
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dec  08012e24  08012e24  00022e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016c10  08016c10  0003011c  2**0
                  CONTENTS
  4 .ARM          00000008  08016c10  08016c10  00026c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016c18  08016c18  0003011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c18  08016c18  00026c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016c1c  08016c1c  00026c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08016c20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003011c  2**0
                  CONTENTS
 10 .bss          000081c4  20000120  20000120  00030120  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  200082e4  200082e4  00030120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a608  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004af8  00000000  00000000  0005a754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002120  00000000  00000000  0005f250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007642  00000000  00000000  00061370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002634e  00000000  00000000  000689b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7529  00000000  00000000  0008ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176229  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00002180  00000000  00000000  00176280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009cc4  00000000  00000000  00178400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012e0c 	.word	0x08012e0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	08012e0c 	.word	0x08012e0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9d3 	b.w	8000c54 <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f861 	bl	8000984 <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f854 	bl	8000984 <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f843 	bl	8000984 <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f835 	bl	8000984 <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b988 	b.w	8000c54 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f81a 	bl	8000984 <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__popcountsi2>:
 800095c:	0843      	lsrs	r3, r0, #1
 800095e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000962:	1ac0      	subs	r0, r0, r3
 8000964:	0883      	lsrs	r3, r0, #2
 8000966:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800096a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 800096e:	4418      	add	r0, r3
 8000970:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000974:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000978:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 800097c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000980:	0e00      	lsrs	r0, r0, #24
 8000982:	4770      	bx	lr

08000984 <__udivmoddi4>:
 8000984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000988:	9d08      	ldr	r5, [sp, #32]
 800098a:	4604      	mov	r4, r0
 800098c:	468e      	mov	lr, r1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d14d      	bne.n	8000a2e <__udivmoddi4+0xaa>
 8000992:	428a      	cmp	r2, r1
 8000994:	4694      	mov	ip, r2
 8000996:	d969      	bls.n	8000a6c <__udivmoddi4+0xe8>
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	b152      	cbz	r2, 80009b4 <__udivmoddi4+0x30>
 800099e:	fa01 f302 	lsl.w	r3, r1, r2
 80009a2:	f1c2 0120 	rsb	r1, r2, #32
 80009a6:	fa20 f101 	lsr.w	r1, r0, r1
 80009aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ae:	ea41 0e03 	orr.w	lr, r1, r3
 80009b2:	4094      	lsls	r4, r2
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	0c21      	lsrs	r1, r4, #16
 80009ba:	fbbe f6f8 	udiv	r6, lr, r8
 80009be:	fa1f f78c 	uxth.w	r7, ip
 80009c2:	fb08 e316 	mls	r3, r8, r6, lr
 80009c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009ca:	fb06 f107 	mul.w	r1, r6, r7
 80009ce:	4299      	cmp	r1, r3
 80009d0:	d90a      	bls.n	80009e8 <__udivmoddi4+0x64>
 80009d2:	eb1c 0303 	adds.w	r3, ip, r3
 80009d6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009da:	f080 811f 	bcs.w	8000c1c <__udivmoddi4+0x298>
 80009de:	4299      	cmp	r1, r3
 80009e0:	f240 811c 	bls.w	8000c1c <__udivmoddi4+0x298>
 80009e4:	3e02      	subs	r6, #2
 80009e6:	4463      	add	r3, ip
 80009e8:	1a5b      	subs	r3, r3, r1
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3310 	mls	r3, r8, r0, r3
 80009f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009f8:	fb00 f707 	mul.w	r7, r0, r7
 80009fc:	42a7      	cmp	r7, r4
 80009fe:	d90a      	bls.n	8000a16 <__udivmoddi4+0x92>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a08:	f080 810a 	bcs.w	8000c20 <__udivmoddi4+0x29c>
 8000a0c:	42a7      	cmp	r7, r4
 8000a0e:	f240 8107 	bls.w	8000c20 <__udivmoddi4+0x29c>
 8000a12:	4464      	add	r4, ip
 8000a14:	3802      	subs	r0, #2
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	1be4      	subs	r4, r4, r7
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	b11d      	cbz	r5, 8000a28 <__udivmoddi4+0xa4>
 8000a20:	40d4      	lsrs	r4, r2
 8000a22:	2300      	movs	r3, #0
 8000a24:	e9c5 4300 	strd	r4, r3, [r5]
 8000a28:	4631      	mov	r1, r6
 8000a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d909      	bls.n	8000a46 <__udivmoddi4+0xc2>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	f000 80ef 	beq.w	8000c16 <__udivmoddi4+0x292>
 8000a38:	2600      	movs	r6, #0
 8000a3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a3e:	4630      	mov	r0, r6
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	fab3 f683 	clz	r6, r3
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d14a      	bne.n	8000ae4 <__udivmoddi4+0x160>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xd4>
 8000a52:	4282      	cmp	r2, r0
 8000a54:	f200 80f9 	bhi.w	8000c4a <__udivmoddi4+0x2c6>
 8000a58:	1a84      	subs	r4, r0, r2
 8000a5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	469e      	mov	lr, r3
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d0e0      	beq.n	8000a28 <__udivmoddi4+0xa4>
 8000a66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a6a:	e7dd      	b.n	8000a28 <__udivmoddi4+0xa4>
 8000a6c:	b902      	cbnz	r2, 8000a70 <__udivmoddi4+0xec>
 8000a6e:	deff      	udf	#255	; 0xff
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	f040 8092 	bne.w	8000b9e <__udivmoddi4+0x21a>
 8000a7a:	eba1 010c 	sub.w	r1, r1, ip
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2601      	movs	r6, #1
 8000a88:	0c20      	lsrs	r0, r4, #16
 8000a8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a96:	fb0e f003 	mul.w	r0, lr, r3
 8000a9a:	4288      	cmp	r0, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x12c>
 8000a9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x12a>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2c0>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	1a09      	subs	r1, r1, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab8:	fb07 1110 	mls	r1, r7, r0, r1
 8000abc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x156>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x154>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2ca>
 8000ad8:	4608      	mov	r0, r1
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ae2:	e79c      	b.n	8000a1e <__udivmoddi4+0x9a>
 8000ae4:	f1c6 0720 	rsb	r7, r6, #32
 8000ae8:	40b3      	lsls	r3, r6
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa20 f407 	lsr.w	r4, r0, r7
 8000af6:	fa01 f306 	lsl.w	r3, r1, r6
 8000afa:	431c      	orrs	r4, r3
 8000afc:	40f9      	lsrs	r1, r7
 8000afe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b02:	fa00 f306 	lsl.w	r3, r0, r6
 8000b06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b0a:	0c20      	lsrs	r0, r4, #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fb09 1118 	mls	r1, r9, r8, r1
 8000b14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b18:	fb08 f00e 	mul.w	r0, r8, lr
 8000b1c:	4288      	cmp	r0, r1
 8000b1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b8>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2bc>
 8000b30:	4288      	cmp	r0, r1
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2bc>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4461      	add	r1, ip
 8000b3c:	1a09      	subs	r1, r1, r0
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b44:	fb09 1110 	mls	r1, r9, r0, r1
 8000b48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	458e      	cmp	lr, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1e2>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2b4>
 8000b5e:	458e      	cmp	lr, r1
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2b4>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b6e:	eba1 010e 	sub.w	r1, r1, lr
 8000b72:	42a1      	cmp	r1, r4
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46a6      	mov	lr, r4
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x2a4>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x2a0>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x212>
 8000b7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b82:	eb61 010e 	sbc.w	r1, r1, lr
 8000b86:	fa01 f707 	lsl.w	r7, r1, r7
 8000b8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b8e:	40f1      	lsrs	r1, r6
 8000b90:	431f      	orrs	r7, r3
 8000b92:	e9c5 7100 	strd	r7, r1, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	40d8      	lsrs	r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bac:	4091      	lsls	r1, r2
 8000bae:	4301      	orrs	r1, r0
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000bc0:	0c0b      	lsrs	r3, r1, #16
 8000bc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bca:	429e      	cmp	r6, r3
 8000bcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x260>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b8>
 8000bdc:	429e      	cmp	r6, r3
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b8>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1b9b      	subs	r3, r3, r6
 8000be6:	b289      	uxth	r1, r1
 8000be8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bec:	fb07 3316 	mls	r3, r7, r6, r3
 8000bf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x28a>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2b0>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2b0>
 8000c0a:	3e02      	subs	r6, #2
 8000c0c:	4461      	add	r1, ip
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0x104>
 8000c16:	462e      	mov	r6, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e705      	b.n	8000a28 <__udivmoddi4+0xa4>
 8000c1c:	4606      	mov	r6, r0
 8000c1e:	e6e3      	b.n	80009e8 <__udivmoddi4+0x64>
 8000c20:	4618      	mov	r0, r3
 8000c22:	e6f8      	b.n	8000a16 <__udivmoddi4+0x92>
 8000c24:	454b      	cmp	r3, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f8>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c30:	3801      	subs	r0, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f8>
 8000c34:	4646      	mov	r6, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x28a>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1e2>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x260>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b8>
 8000c44:	3b02      	subs	r3, #2
 8000c46:	4461      	add	r1, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x12c>
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	e709      	b.n	8000a62 <__udivmoddi4+0xde>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x156>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c5c:	f3bf 8f4f 	dsb	sy
}
 8000c60:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <__NVIC_SystemReset+0x24>)
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c6a:	4904      	ldr	r1, [pc, #16]	; (8000c7c <__NVIC_SystemReset+0x24>)
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_SystemReset+0x28>)
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c72:	f3bf 8f4f 	dsb	sy
}
 8000c76:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <__NVIC_SystemReset+0x20>
 8000c7c:	e000ed00 	.word	0xe000ed00
 8000c80:	05fa0004 	.word	0x05fa0004

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8a:	f008 feb1 	bl	80099f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8e:	f000 f885 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c92:	f000 fa31 	bl	80010f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c96:	f000 f9f9 	bl	800108c <MX_DMA_Init>
  MX_TIM2_Init();
 8000c9a:	f000 f981 	bl	8000fa0 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c9e:	f000 f8e7 	bl	8000e70 <MX_RTC_Init>
  MX_FSMC_Init();
 8000ca2:	f000 facf 	bl	8001244 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000ca6:	f000 f9c7 	bl	8001038 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000caa:	f000 f943 	bl	8000f34 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000cae:	2300      	movs	r3, #0
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	e01e      	b.n	8000cf2 <main+0x6e>
	  HAL_Delay(150);
 8000cb4:	2096      	movs	r0, #150	; 0x96
 8000cb6:	f008 fedd 	bl	8009a74 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	4829      	ldr	r0, [pc, #164]	; (8000d64 <main+0xe0>)
 8000cc0:	f009 fd7c 	bl	800a7bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cca:	4827      	ldr	r0, [pc, #156]	; (8000d68 <main+0xe4>)
 8000ccc:	f009 fd76 	bl	800a7bc <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000cd0:	2096      	movs	r0, #150	; 0x96
 8000cd2:	f008 fecf 	bl	8009a74 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	4822      	ldr	r0, [pc, #136]	; (8000d64 <main+0xe0>)
 8000cdc:	f009 fd6e 	bl	800a7bc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce6:	4820      	ldr	r0, [pc, #128]	; (8000d68 <main+0xe4>)
 8000ce8:	f009 fd68 	bl	800a7bc <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d9dd      	bls.n	8000cb4 <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <main+0xe8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00b fd33 	bl	800c768 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <main+0xec>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2201      	movs	r2, #1
 8000d08:	491a      	ldr	r1, [pc, #104]	; (8000d74 <main+0xf0>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f00c f9ab 	bl	800d066 <HAL_UART_Receive_IT>

  //set_Date(epoch);

  ST7789_Reset();
 8000d10:	f003 f816 	bl	8003d40 <ST7789_Reset>
  ST7789_Init(back_color);
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <main+0xf4>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f003 f82b 	bl	8003d74 <ST7789_Init>

#if defined(SET_FS_TEST) || defined(SET_NAND_TEST)
  dbg = logDump;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <main+0xf8>)
 8000d20:	2202      	movs	r2, #2
 8000d22:	701a      	strb	r2, [r3, #0]
#endif

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d24:	f00d fb2c 	bl	800e380 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000d28:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <main+0xfc>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f00d fc20 	bl	800e572 <osSemaphoreNew>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <main+0x100>)
 8000d36:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(s_qcmd), &myQue_attributes);
 8000d38:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <main+0x104>)
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	2010      	movs	r0, #16
 8000d3e:	f00d fca1 	bl	800e684 <osMessageQueueNew>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <main+0x108>)
 8000d46:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d48:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <main+0x10c>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4811      	ldr	r0, [pc, #68]	; (8000d94 <main+0x110>)
 8000d4e:	f00d fb63 	bl	800e418 <osThreadNew>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <main+0x114>)
 8000d56:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d58:	f00d fb38 	bl	800e3cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f008 fe89 	bl	8009a74 <HAL_Delay>
 8000d62:	e7fb      	b.n	8000d5c <main+0xd8>
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40020c00 	.word	0x40020c00
 8000d6c:	2000006c 	.word	0x2000006c
 8000d70:	20000070 	.word	0x20000070
 8000d74:	20001360 	.word	0x20001360
 8000d78:	20001366 	.word	0x20001366
 8000d7c:	20000062 	.word	0x20000062
 8000d80:	08016884 	.word	0x08016884
 8000d84:	20000348 	.word	0x20000348
 8000d88:	0801686c 	.word	0x0801686c
 8000d8c:	20000344 	.word	0x20000344
 8000d90:	08016848 	.word	0x08016848
 8000d94:	08002c01 	.word	0x08002c01
 8000d98:	20000340 	.word	0x20000340

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b094      	sub	sp, #80	; 0x50
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	2230      	movs	r2, #48	; 0x30
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f010 fdfc 	bl	80119a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <SystemClock_Config+0xcc>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <SystemClock_Config+0xcc>)
 8000dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <SystemClock_Config+0xcc>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <SystemClock_Config+0xd0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <SystemClock_Config+0xd0>)
 8000de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <SystemClock_Config+0xd0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e02:	2302      	movs	r3, #2
 8000e04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e10:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	4618      	mov	r0, r3
 8000e24:	f009 feb6 	bl	800ab94 <HAL_RCC_OscConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e2e:	f002 fde7 	bl	8003a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e32:	230f      	movs	r3, #15
 8000e34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e36:	2302      	movs	r3, #2
 8000e38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	2105      	movs	r1, #5
 8000e50:	4618      	mov	r0, r3
 8000e52:	f00a f917 	bl	800b084 <HAL_RCC_ClockConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e5c:	f002 fdd0 	bl	8003a00 <Error_Handler>
  }
}
 8000e60:	bf00      	nop
 8000e62:	3750      	adds	r7, #80	; 0x50
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40007000 	.word	0x40007000

08000e70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e84:	2300      	movs	r3, #0
 8000e86:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <MX_RTC_Init+0xb8>)
 8000e8a:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <MX_RTC_Init+0xbc>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <MX_RTC_Init+0xb8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <MX_RTC_Init+0xb8>)
 8000e96:	227f      	movs	r2, #127	; 0x7f
 8000e98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <MX_RTC_Init+0xb8>)
 8000e9c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000ea0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <MX_RTC_Init+0xb8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_RTC_Init+0xb8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <MX_RTC_Init+0xb8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eb4:	481c      	ldr	r0, [pc, #112]	; (8000f28 <MX_RTC_Init+0xb8>)
 8000eb6:	f00a fc19 	bl	800b6ec <HAL_RTC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000ec0:	f002 fd9e 	bl	8003a00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8000ec4:	2315      	movs	r3, #21
 8000ec6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8000ec8:	2334      	movs	r3, #52	; 0x34
 8000eca:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8000ecc:	230c      	movs	r3, #12
 8000ece:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	4619      	mov	r1, r3
 8000ede:	4812      	ldr	r0, [pc, #72]	; (8000f28 <MX_RTC_Init+0xb8>)
 8000ee0:	f00a fc7a 	bl	800b7d8 <HAL_RTC_SetTime>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eea:	f002 fd89 	bl	8003a00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	4619      	mov	r1, r3
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <MX_RTC_Init+0xb8>)
 8000f06:	f00a fd5f 	bl	800b9c8 <HAL_RTC_SetDate>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000f10:	f002 fd76 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  set_Date(epoch);
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_RTC_Init+0xc0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 f97d 	bl	8002218 <set_Date>

  /* USER CODE END RTC_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000013c 	.word	0x2000013c
 8000f2c:	40002800 	.word	0x40002800
 8000f30:	20000064 	.word	0x20000064

08000f34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f3a:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <MX_SPI1_Init+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f54:	2202      	movs	r2, #2
 8000f56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f80:	220a      	movs	r2, #10
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_SPI1_Init+0x64>)
 8000f86:	f00a feaf 	bl	800bce8 <HAL_SPI_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f90:	f002 fd36 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000015c 	.word	0x2000015c
 8000f9c:	40013000 	.word	0x40013000

08000fa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_TIM2_Init+0x94>)
 8000fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_TIM2_Init+0x94>)
 8000fc6:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000fca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_TIM2_Init+0x94>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_TIM2_Init+0x94>)
 8000fd4:	22f9      	movs	r2, #249	; 0xf9
 8000fd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_TIM2_Init+0x94>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_TIM2_Init+0x94>)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fe4:	4813      	ldr	r0, [pc, #76]	; (8001034 <MX_TIM2_Init+0x94>)
 8000fe6:	f00b fb6f 	bl	800c6c8 <HAL_TIM_Base_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ff0:	f002 fd06 	bl	8003a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4619      	mov	r1, r3
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <MX_TIM2_Init+0x94>)
 8001002:	f00b fd29 	bl	800ca58 <HAL_TIM_ConfigClockSource>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800100c:	f002 fcf8 	bl	8003a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001010:	2320      	movs	r3, #32
 8001012:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_TIM2_Init+0x94>)
 800101e:	f00b ff45 	bl	800ceac <HAL_TIMEx_MasterConfigSynchronization>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001028:	f002 fcea 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000214 	.word	0x20000214

08001038 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <MX_USART3_UART_Init+0x50>)
 8001040:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001044:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001048:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001070:	f00b ffac 	bl	800cfcc <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800107a:	f002 fcc1 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000025c 	.word	0x2000025c
 8001088:	40004800 	.word	0x40004800

0800108c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_DMA_Init+0x68>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <MX_DMA_Init+0x68>)
 800109c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_DMA_Init+0x68>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MX_DMA_Init+0x68>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <MX_DMA_Init+0x68>)
 80010b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <MX_DMA_Init+0x68>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2105      	movs	r1, #5
 80010ce:	200e      	movs	r0, #14
 80010d0:	f008 fdac 	bl	8009c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010d4:	200e      	movs	r0, #14
 80010d6:	f008 fdc5 	bl	8009c64 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2103      	movs	r1, #3
 80010de:	203b      	movs	r0, #59	; 0x3b
 80010e0:	f008 fda4 	bl	8009c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010e4:	203b      	movs	r0, #59	; 0x3b
 80010e6:	f008 fdbd 	bl	8009c64 <HAL_NVIC_EnableIRQ>

}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	4b48      	ldr	r3, [pc, #288]	; (8001234 <MX_GPIO_Init+0x13c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a47      	ldr	r2, [pc, #284]	; (8001234 <MX_GPIO_Init+0x13c>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b45      	ldr	r3, [pc, #276]	; (8001234 <MX_GPIO_Init+0x13c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001126:	61bb      	str	r3, [r7, #24]
 8001128:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	4b41      	ldr	r3, [pc, #260]	; (8001234 <MX_GPIO_Init+0x13c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a40      	ldr	r2, [pc, #256]	; (8001234 <MX_GPIO_Init+0x13c>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <MX_GPIO_Init+0x13c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <MX_GPIO_Init+0x13c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a39      	ldr	r2, [pc, #228]	; (8001234 <MX_GPIO_Init+0x13c>)
 8001150:	f043 0310 	orr.w	r3, r3, #16
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b37      	ldr	r3, [pc, #220]	; (8001234 <MX_GPIO_Init+0x13c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b33      	ldr	r3, [pc, #204]	; (8001234 <MX_GPIO_Init+0x13c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a32      	ldr	r2, [pc, #200]	; (8001234 <MX_GPIO_Init+0x13c>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b30      	ldr	r3, [pc, #192]	; (8001234 <MX_GPIO_Init+0x13c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <MX_GPIO_Init+0x13c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a2b      	ldr	r2, [pc, #172]	; (8001234 <MX_GPIO_Init+0x13c>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <MX_GPIO_Init+0x13c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <MX_GPIO_Init+0x13c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a24      	ldr	r2, [pc, #144]	; (8001234 <MX_GPIO_Init+0x13c>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b22      	ldr	r3, [pc, #136]	; (8001234 <MX_GPIO_Init+0x13c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	210e      	movs	r1, #14
 80011ba:	481f      	ldr	r0, [pc, #124]	; (8001238 <MX_GPIO_Init+0x140>)
 80011bc:	f009 fafe 	bl	800a7bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c6:	481d      	ldr	r0, [pc, #116]	; (800123c <MX_GPIO_Init+0x144>)
 80011c8:	f009 faf8 	bl	800a7bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	481b      	ldr	r0, [pc, #108]	; (8001240 <MX_GPIO_Init+0x148>)
 80011d2:	f009 faf3 	bl	800a7bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 80011d6:	230e      	movs	r3, #14
 80011d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011de:	2301      	movs	r3, #1
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011e2:	2301      	movs	r3, #1
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	4812      	ldr	r0, [pc, #72]	; (8001238 <MX_GPIO_Init+0x140>)
 80011ee:	f009 f949 	bl	800a484 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001200:	2302      	movs	r3, #2
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <MX_GPIO_Init+0x144>)
 800120c:	f009 f93a 	bl	800a484 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001218:	2302      	movs	r3, #2
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800121c:	2301      	movs	r3, #1
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_GPIO_Init+0x148>)
 8001228:	f009 f92c 	bl	800a484 <HAL_GPIO_Init>

}
 800122c:	bf00      	nop
 800122e:	3730      	adds	r7, #48	; 0x30
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40020800 	.word	0x40020800

08001244 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001244:	b5b0      	push	{r4, r5, r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 800124a:	4b53      	ldr	r3, [pc, #332]	; (8001398 <MX_FSMC_Init+0x154>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
//	#define NAND_DEVICE MY_NAND_DEVICE// 0x70000000L
//#endif

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
*/
  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 800126a:	4b4c      	ldr	r3, [pc, #304]	; (800139c <MX_FSMC_Init+0x158>)
 800126c:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <MX_FSMC_Init+0x15c>)
 800126e:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001270:	4b4a      	ldr	r3, [pc, #296]	; (800139c <MX_FSMC_Init+0x158>)
 8001272:	2210      	movs	r2, #16
 8001274:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001276:	4b49      	ldr	r3, [pc, #292]	; (800139c <MX_FSMC_Init+0x158>)
 8001278:	2202      	movs	r2, #2
 800127a:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800127c:	4b47      	ldr	r3, [pc, #284]	; (800139c <MX_FSMC_Init+0x158>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001282:	4b46      	ldr	r3, [pc, #280]	; (800139c <MX_FSMC_Init+0x158>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001288:	4b44      	ldr	r3, [pc, #272]	; (800139c <MX_FSMC_Init+0x158>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <MX_FSMC_Init+0x158>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001294:	4b41      	ldr	r3, [pc, #260]	; (800139c <MX_FSMC_Init+0x158>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 800129a:	4b40      	ldr	r3, [pc, #256]	; (800139c <MX_FSMC_Init+0x158>)
 800129c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 80012a2:	4b3e      	ldr	r3, [pc, #248]	; (800139c <MX_FSMC_Init+0x158>)
 80012a4:	2210      	movs	r2, #16
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 64;//131072; (in pages)
 80012a8:	4b3c      	ldr	r3, [pc, #240]	; (800139c <MX_FSMC_Init+0x158>)
 80012aa:	2240      	movs	r2, #64	; 0x40
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <MX_FSMC_Init+0x158>)
 80012b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 80012b6:	4b39      	ldr	r3, [pc, #228]	; (800139c <MX_FSMC_Init+0x158>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 80012bc:	4b37      	ldr	r3, [pc, #220]	; (800139c <MX_FSMC_Init+0x158>)
 80012be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012c2:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 80012c4:	4b35      	ldr	r3, [pc, #212]	; (800139c <MX_FSMC_Init+0x158>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 12;//252;
 80012cc:	230c      	movs	r3, #12
 80012ce:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 8;//252;
 80012d0:	2308      	movs	r3, #8
 80012d2:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 8;//252;
 80012d4:	2308      	movs	r3, #8
 80012d6:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 4;//252;
 80012d8:	2304      	movs	r3, #4
 80012da:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 12;//252;
 80012dc:	230c      	movs	r3, #12
 80012de:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 8;//252;
 80012e0:	2308      	movs	r3, #8
 80012e2:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 8;//252;
 80012e4:	2308      	movs	r3, #8
 80012e6:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 4;//252;
 80012e8:	2304      	movs	r3, #4
 80012ea:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012ec:	463a      	mov	r2, r7
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4619      	mov	r1, r3
 80012f4:	4829      	ldr	r0, [pc, #164]	; (800139c <MX_FSMC_Init+0x158>)
 80012f6:	f009 fa94 	bl	800a822 <HAL_NAND_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_FSMC_Init+0xc0>
  {
    Error_Handler( );
 8001300:	f002 fb7e 	bl	8003a00 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

    if (HAL_NAND_ECC_Disable(&hnand1) != HAL_OK) devError |= devNAND;
 8001304:	4825      	ldr	r0, [pc, #148]	; (800139c <MX_FSMC_Init+0x158>)
 8001306:	f009 fbe8 	bl	800aada <HAL_NAND_ECC_Disable>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <MX_FSMC_Init+0xda>
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <MX_FSMC_Init+0x160>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	f043 0320 	orr.w	r3, r3, #32
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <MX_FSMC_Init+0x160>)
 800131c:	801a      	strh	r2, [r3, #0]

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    if (HAL_NAND_RegisterCallback(&hnand1, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

    if (NAND_Read_ID(&hnand1, &nandID) == HAL_OK) {//read ID information from chip
 800131e:	4922      	ldr	r1, [pc, #136]	; (80013a8 <MX_FSMC_Init+0x164>)
 8001320:	481e      	ldr	r0, [pc, #120]	; (800139c <MX_FSMC_Init+0x158>)
 8001322:	f000 f86f 	bl	8001404 <NAND_Read_ID>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d131      	bne.n	8001390 <MX_FSMC_Init+0x14c>

    	nandState = HAL_NAND_GetState(&hnand1);
 800132c:	481b      	ldr	r0, [pc, #108]	; (800139c <MX_FSMC_Init+0x158>)
 800132e:	f009 fbfd 	bl	800ab2c <HAL_NAND_GetState>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_FSMC_Init+0x168>)
 8001338:	701a      	strb	r2, [r3, #0]
nand->cfg.block_number  = hwnand->Config.BlockNbr; // Total Number of block in plane (1024 K9GAG08U0E )
nand->cfg.block_size    = hwnand->Config.BlockSize; // Block size (In page) (64 K9GAG08U0E )
nand->cfg.plane_number  = hwnand->Config.PlaneNbr;  // Number of plane (1 K9GAG08U0E )
nand->cfg.plane_size    = hwnand->Config.PlaneSize * nand->cfg.block_number; // Plane size (In Page)
*/
    	memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 800133a:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <MX_FSMC_Init+0x16c>)
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_FSMC_Init+0x158>)
 800133e:	4615      	mov	r5, r2
 8001340:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001348:	e894 0003 	ldmia.w	r4, {r0, r1}
 800134c:	e885 0003 	stmia.w	r5, {r0, r1}

    	total_pages = chipConf.PlaneSize / chipConf.PageSize;
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <MX_FSMC_Init+0x16c>)
 8001352:	695a      	ldr	r2, [r3, #20]
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_FSMC_Init+0x16c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	fbb2 f3f3 	udiv	r3, r2, r3
 800135c:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <MX_FSMC_Init+0x170>)
 800135e:	6013      	str	r3, [r2, #0]
    	total_bytes = chipConf.PlaneSize;
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_FSMC_Init+0x16c>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <MX_FSMC_Init+0x174>)
 8001366:	6013      	str	r3, [r2, #0]


    	if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_FSMC_Init+0x16c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d008      	beq.n	8001382 <MX_FSMC_Init+0x13e>
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_FSMC_Init+0x16c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001378:	d803      	bhi.n	8001382 <MX_FSMC_Init+0x13e>
    				devError |= devMEM;
    				freeMem(rdBuf);
    			}
    		}*/

    		HAL_NAND_Reset(&hnand1);
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <MX_FSMC_Init+0x158>)
 800137c:	f009 fb73 	bl	800aa66 <HAL_NAND_Reset>

    }


  /* USER CODE END FSMC_Init 2 */
}
 8001380:	e006      	b.n	8001390 <MX_FSMC_Init+0x14c>
    		devError |= devNAND;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_FSMC_Init+0x160>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	f043 0320 	orr.w	r3, r3, #32
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <MX_FSMC_Init+0x160>)
 800138e:	801a      	strh	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}
 8001398:	20001384 	.word	0x20001384
 800139c:	20000300 	.word	0x20000300
 80013a0:	a0000060 	.word	0xa0000060
 80013a4:	2000034c 	.word	0x2000034c
 80013a8:	20001388 	.word	0x20001388
 80013ac:	20000081 	.word	0x20000081
 80013b0:	20001390 	.word	0x20001390
 80013b4:	20001368 	.word	0x20001368
 80013b8:	2000136c 	.word	0x2000136c

080013bc <io_nand_get_page_size>:
}
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
uint32_t io_nand_get_page_size(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
    return chipConf.PageSize;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <io_nand_get_page_size+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20001390 	.word	0x20001390

080013d4 <io_nand_get_block_number>:
uint32_t io_nand_get_block_number(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
	return chipConf.BlockNbr;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <io_nand_get_block_number+0x14>)
 80013da:	68db      	ldr	r3, [r3, #12]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20001390 	.word	0x20001390

080013ec <io_nand_get_block_size>:
uint32_t io_nand_get_block_size(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	return chipConf.BlockSize;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <io_nand_get_block_size+0x14>)
 80013f2:	689b      	ldr	r3, [r3, #8]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20001390 	.word	0x20001390

08001404 <NAND_Read_ID>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------

HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d101      	bne.n	800141e <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 800141a:	2302      	movs	r3, #2
 800141c:	e059      	b.n	80014d2 <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d152      	bne.n	80014d0 <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <NAND_Read_ID+0x34>
 8001434:	2302      	movs	r3, #2
 8001436:	e04c      	b.n	80014d2 <NAND_Read_ID+0xce>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <NAND_Read_ID+0xdc>)
 800144a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800144e:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <NAND_Read_ID+0xdc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001458:	2290      	movs	r2, #144	; 0x90
 800145a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800145c:	f3bf 8f4f 	dsb	sy
}
 8001460:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <NAND_Read_ID+0xdc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800146e:	f3bf 8f4f 	dsb	sy
}
 8001472:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d123      	bne.n	80014c4 <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <NAND_Read_ID+0xdc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <NAND_Read_ID+0xdc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3310      	adds	r3, #16
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	b2da      	uxtb	r2, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	0c1b      	lsrs	r3, r3, #16
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	0e1b      	lsrs	r3, r3, #24
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	711a      	strb	r2, [r3, #4]

	    	hnand->State = HAL_NAND_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e000      	b.n	80014d2 <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20001370 	.word	0x20001370

080014e4 <pageIsEmpty>:
}
//-----------------------------------------------------------------------------
//      Check: page is empty ?
//
bool pageIsEmpty(uint32_t page)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
bool ret = false;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]

	io_nand_read(page, rdBuf, chipConf.PageSize, 0)	;
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <pageIsEmpty+0x5c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	4913      	ldr	r1, [pc, #76]	; (8001544 <pageIsEmpty+0x60>)
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fc7b 	bl	8001df4 <io_nand_read>
	if (!(devError & devNAND)) {
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <pageIsEmpty+0x64>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	2b00      	cmp	r3, #0
 8001508:	d115      	bne.n	8001536 <pageIsEmpty+0x52>
		ret = true;
 800150a:	2301      	movs	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	e00b      	b.n	800152c <pageIsEmpty+0x48>
			if (*(uint8_t *)(rdBuf + i) != EMPTY) {
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <pageIsEmpty+0x60>)
 8001518:	4413      	add	r3, r2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2bff      	cmp	r3, #255	; 0xff
 800151e:	d002      	beq.n	8001526 <pageIsEmpty+0x42>
				ret = false;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
				break;
 8001524:	e007      	b.n	8001536 <pageIsEmpty+0x52>
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3301      	adds	r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <pageIsEmpty+0x5c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	429a      	cmp	r2, r3
 8001534:	d3ee      	bcc.n	8001514 <pageIsEmpty+0x30>
			}
		}
	}

	return ret;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20001390 	.word	0x20001390
 8001544:	200013a8 	.word	0x200013a8
 8001548:	2000034c 	.word	0x2000034c

0800154c <_write>:
	return NAND_Erase_Block(nandPort, &nans, 0);
}
*/
#ifdef SET_SMALL_FS
int _write(int file, char *buf, int len)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
	Report(0, "%.*s", len, buf);
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4904      	ldr	r1, [pc, #16]	; (8001570 <_write+0x24>)
 800155e:	2000      	movs	r0, #0
 8001560:	f000 ff54 	bl	800240c <Report>
	return len;
 8001564:	687b      	ldr	r3, [r7, #4]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	08012fa0 	.word	0x08012fa0

08001574 <str_fsErr>:
#endif
//
#ifdef SET_FS_TEST
static char *str_fsErr(int e)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	switch (e) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3354      	adds	r3, #84	; 0x54
 8001580:	2b54      	cmp	r3, #84	; 0x54
 8001582:	f200 80cb 	bhi.w	800171c <str_fsErr+0x1a8>
 8001586:	a201      	add	r2, pc, #4	; (adr r2, 800158c <str_fsErr+0x18>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	080016e9 	.word	0x080016e9
 8001590:	0800171d 	.word	0x0800171d
 8001594:	0800171d 	.word	0x0800171d
 8001598:	0800171d 	.word	0x0800171d
 800159c:	0800171d 	.word	0x0800171d
 80015a0:	0800171d 	.word	0x0800171d
 80015a4:	0800171d 	.word	0x0800171d
 80015a8:	0800171d 	.word	0x0800171d
 80015ac:	0800171d 	.word	0x0800171d
 80015b0:	0800171d 	.word	0x0800171d
 80015b4:	0800171d 	.word	0x0800171d
 80015b8:	0800171d 	.word	0x0800171d
 80015bc:	0800171d 	.word	0x0800171d
 80015c0:	0800171d 	.word	0x0800171d
 80015c4:	0800171d 	.word	0x0800171d
 80015c8:	0800171d 	.word	0x0800171d
 80015cc:	0800171d 	.word	0x0800171d
 80015d0:	0800171d 	.word	0x0800171d
 80015d4:	0800171d 	.word	0x0800171d
 80015d8:	0800171d 	.word	0x0800171d
 80015dc:	0800171d 	.word	0x0800171d
 80015e0:	0800171d 	.word	0x0800171d
 80015e4:	0800171d 	.word	0x0800171d
 80015e8:	08001715 	.word	0x08001715
 80015ec:	0800171d 	.word	0x0800171d
 80015f0:	0800171d 	.word	0x0800171d
 80015f4:	0800171d 	.word	0x0800171d
 80015f8:	0800171d 	.word	0x0800171d
 80015fc:	0800171d 	.word	0x0800171d
 8001600:	0800171d 	.word	0x0800171d
 8001604:	0800171d 	.word	0x0800171d
 8001608:	0800171d 	.word	0x0800171d
 800160c:	0800171d 	.word	0x0800171d
 8001610:	0800171d 	.word	0x0800171d
 8001614:	0800171d 	.word	0x0800171d
 8001618:	0800171d 	.word	0x0800171d
 800161c:	0800171d 	.word	0x0800171d
 8001620:	0800171d 	.word	0x0800171d
 8001624:	0800171d 	.word	0x0800171d
 8001628:	0800171d 	.word	0x0800171d
 800162c:	0800171d 	.word	0x0800171d
 8001630:	0800171d 	.word	0x0800171d
 8001634:	0800171d 	.word	0x0800171d
 8001638:	0800171d 	.word	0x0800171d
 800163c:	0800171d 	.word	0x0800171d
 8001640:	080016fd 	.word	0x080016fd
 8001644:	0800171d 	.word	0x0800171d
 8001648:	0800171d 	.word	0x0800171d
 800164c:	08001719 	.word	0x08001719
 8001650:	0800171d 	.word	0x0800171d
 8001654:	0800171d 	.word	0x0800171d
 8001658:	0800171d 	.word	0x0800171d
 800165c:	0800171d 	.word	0x0800171d
 8001660:	0800171d 	.word	0x0800171d
 8001664:	0800171d 	.word	0x0800171d
 8001668:	0800171d 	.word	0x0800171d
 800166c:	0800170d 	.word	0x0800170d
 8001670:	08001705 	.word	0x08001705
 8001674:	0800171d 	.word	0x0800171d
 8001678:	0800171d 	.word	0x0800171d
 800167c:	0800171d 	.word	0x0800171d
 8001680:	0800171d 	.word	0x0800171d
 8001684:	08001709 	.word	0x08001709
 8001688:	080016f9 	.word	0x080016f9
 800168c:	080016f5 	.word	0x080016f5
 8001690:	0800171d 	.word	0x0800171d
 8001694:	0800171d 	.word	0x0800171d
 8001698:	080016f1 	.word	0x080016f1
 800169c:	0800171d 	.word	0x0800171d
 80016a0:	0800171d 	.word	0x0800171d
 80016a4:	0800171d 	.word	0x0800171d
 80016a8:	0800171d 	.word	0x0800171d
 80016ac:	08001711 	.word	0x08001711
 80016b0:	0800171d 	.word	0x0800171d
 80016b4:	0800171d 	.word	0x0800171d
 80016b8:	08001701 	.word	0x08001701
 80016bc:	0800171d 	.word	0x0800171d
 80016c0:	0800171d 	.word	0x0800171d
 80016c4:	0800171d 	.word	0x0800171d
 80016c8:	080016e5 	.word	0x080016e5
 80016cc:	0800171d 	.word	0x0800171d
 80016d0:	0800171d 	.word	0x0800171d
 80016d4:	080016ed 	.word	0x080016ed
 80016d8:	0800171d 	.word	0x0800171d
 80016dc:	080016e1 	.word	0x080016e1
		case LFS_ERR_OK://          = 0,    // No error
			return "OK";
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <str_fsErr+0x1b8>)
 80016e2:	e01c      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_IO://          = -5,   // Error during device operation
			return "ERR_IO";
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <str_fsErr+0x1bc>)
 80016e6:	e01a      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_CORRUPT://     = -84,  // Corrupted
			return "ERR_CORRUPT";
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <str_fsErr+0x1c0>)
 80016ea:	e018      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_NOENT://       = -2,   // No directory entry
			return "ERR_NOENT";
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <str_fsErr+0x1c4>)
 80016ee:	e016      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_EXIST://       = -17,  // Entry already exists
			return "ERR_EXIST";
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <str_fsErr+0x1c8>)
 80016f2:	e014      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_NOTDIR://      = -20,  // Entry is not a dir
			return "ERR_NOTDIR";
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <str_fsErr+0x1cc>)
 80016f6:	e012      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_ISDIR://       = -21,  // Entry is a dir
			return "ERR_ISDIR";
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <str_fsErr+0x1d0>)
 80016fa:	e010      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_NOTEMPTY://    = -39,  // Dir is not empty
			return "ERR_NOTEMPTY";
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <str_fsErr+0x1d4>)
 80016fe:	e00e      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_BADF://        = -9,   // Bad file number
			return "ERR_BADF";
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <str_fsErr+0x1d8>)
 8001702:	e00c      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_FBIG://        = -27,  // File too large
			return "ERR_FBIG";
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <str_fsErr+0x1dc>)
 8001706:	e00a      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_INVAL://       = -22,  // Invalid parameter
			return "ERR_INVAL";
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <str_fsErr+0x1e0>)
 800170a:	e008      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_NOSPC://       = -28,  // No space left on device
			return "ERR_NOSPC";
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <str_fsErr+0x1e4>)
 800170e:	e006      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_NOMEM://       = -12,  // No more memory available
			return "ERR_NOMEM";
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <str_fsErr+0x1e8>)
 8001712:	e004      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_NOATTR://      = -61,  // No data/attr available
			return "ERR_NOATTR";
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <str_fsErr+0x1ec>)
 8001716:	e002      	b.n	800171e <str_fsErr+0x1aa>
		case LFS_ERR_NAMETOOLONG:// = -36,  // File name too long
			return "ERR_NAMETOOLONG";
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <str_fsErr+0x1f0>)
 800171a:	e000      	b.n	800171e <str_fsErr+0x1aa>
	}

	return "UNKNOWN";
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <str_fsErr+0x1f4>)
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	08012fa8 	.word	0x08012fa8
 8001730:	08012fac 	.word	0x08012fac
 8001734:	08012fb4 	.word	0x08012fb4
 8001738:	08012fc0 	.word	0x08012fc0
 800173c:	08012fcc 	.word	0x08012fcc
 8001740:	08012fd8 	.word	0x08012fd8
 8001744:	08012fe4 	.word	0x08012fe4
 8001748:	08012ff0 	.word	0x08012ff0
 800174c:	08013000 	.word	0x08013000
 8001750:	0801300c 	.word	0x0801300c
 8001754:	08013018 	.word	0x08013018
 8001758:	08013024 	.word	0x08013024
 800175c:	08013030 	.word	0x08013030
 8001760:	0801303c 	.word	0x0801303c
 8001764:	08013048 	.word	0x08013048
 8001768:	08013058 	.word	0x08013058

0800176c <io_uint32_to_flash_adr>:
{
	return  ((adr->Plane * chipConf.PlaneSize) + (adr->Block * chipConf.BlockSize) + adr->Page);
}
//-----------------------------------------------------------------------------
NAND_AddressTypeDef io_uint32_to_flash_adr(uint32_t addr)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
NAND_AddressTypeDef a;

	a.Plane = addr / chipConf.PlaneSize;
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <io_uint32_to_flash_adr+0x7c>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	817b      	strh	r3, [r7, #10]
	a.Block = (addr - a.Plane * chipConf.PlaneSize) / chipConf.BlockSize;
 8001784:	897b      	ldrh	r3, [r7, #10]
 8001786:	461a      	mov	r2, r3
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <io_uint32_to_flash_adr+0x7c>)
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	1ad2      	subs	r2, r2, r3
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <io_uint32_to_flash_adr+0x7c>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	fbb2 f3f3 	udiv	r3, r2, r3
 800179c:	b29b      	uxth	r3, r3
 800179e:	81bb      	strh	r3, [r7, #12]
	a.Page  = addr - (a.Plane * chipConf.PlaneSize) - (a.Block * chipConf.BlockSize);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	8979      	ldrh	r1, [r7, #10]
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <io_uint32_to_flash_adr+0x7c>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	fb11 f303 	smulbb	r3, r1, r3
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	89b9      	ldrh	r1, [r7, #12]
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <io_uint32_to_flash_adr+0x7c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	fb11 f303 	smulbb	r3, r1, r3
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	813b      	strh	r3, [r7, #8]

	return a;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	461a      	mov	r2, r3
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	6010      	str	r0, [r2, #0]
 80017d6:	889b      	ldrh	r3, [r3, #4]
 80017d8:	8093      	strh	r3, [r2, #4]
}
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20001390 	.word	0x20001390

080017ec <io_nand_read_8b>:
//-----------------------------------------------------------------------------
uint32_t io_nand_read_8b (uint32_t addr, uint8_t *pBuffer, uint32_t size, uint32_t offset)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b090      	sub	sp, #64	; 0x40
 80017f0:	af04      	add	r7, sp, #16
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	68f9      	ldr	r1, [r7, #12]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ffb3 	bl	800176c <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 8001806:	4b8d      	ldr	r3, [pc, #564]	; (8001a3c <io_nand_read_8b+0x250>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d101      	bne.n	8001818 <io_nand_read_8b+0x2c>
 8001814:	2302      	movs	r3, #2
 8001816:	e10c      	b.n	8001a32 <io_nand_read_8b+0x246>

    __HAL_LOCK(nandPort);
 8001818:	4b88      	ldr	r3, [pc, #544]	; (8001a3c <io_nand_read_8b+0x250>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <io_nand_read_8b+0x3c>
 8001824:	2302      	movs	r3, #2
 8001826:	e104      	b.n	8001a32 <io_nand_read_8b+0x246>
 8001828:	4b84      	ldr	r3, [pc, #528]	; (8001a3c <io_nand_read_8b+0x250>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 8001832:	4b82      	ldr	r3, [pc, #520]	; (8001a3c <io_nand_read_8b+0x250>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2202      	movs	r2, #2
 8001838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 800183c:	4b80      	ldr	r3, [pc, #512]	; (8001a40 <io_nand_read_8b+0x254>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 8001842:	8abb      	ldrh	r3, [r7, #20]
 8001844:	4619      	mov	r1, r3
 8001846:	8b3b      	ldrh	r3, [r7, #24]
 8001848:	461a      	mov	r2, r3
 800184a:	8afb      	ldrh	r3, [r7, #22]
 800184c:	4618      	mov	r0, r3
 800184e:	4b7b      	ldr	r3, [pc, #492]	; (8001a3c <io_nand_read_8b+0x250>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001854:	fb00 f303 	mul.w	r3, r0, r3
 8001858:	4413      	add	r3, r2
 800185a:	4a78      	ldr	r2, [pc, #480]	; (8001a3c <io_nand_read_8b+0x250>)
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001860:	fb02 f303 	mul.w	r3, r2, r3
 8001864:	440b      	add	r3, r1
 8001866:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 8001868:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <io_nand_read_8b+0x258>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d911      	bls.n	8001894 <io_nand_read_8b+0xa8>
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, eol);
 8001870:	8abb      	ldrh	r3, [r7, #20]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001872:	461a      	mov	r2, r3
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, eol);
 8001874:	8afb      	ldrh	r3, [r7, #22]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001876:	4619      	mov	r1, r3
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, eol);
 8001878:	8b3b      	ldrh	r3, [r7, #24]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800187a:	4618      	mov	r0, r3
 800187c:	4b72      	ldr	r3, [pc, #456]	; (8001a48 <io_nand_read_8b+0x25c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	9303      	str	r3, [sp, #12]
 8001882:	9002      	str	r0, [sp, #8]
 8001884:	9101      	str	r1, [sp, #4]
 8001886:	9200      	str	r2, [sp, #0]
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	4a70      	ldr	r2, [pc, #448]	; (8001a4c <io_nand_read_8b+0x260>)
 800188c:	4970      	ldr	r1, [pc, #448]	; (8001a50 <io_nand_read_8b+0x264>)
 800188e:	2001      	movs	r0, #1
 8001890:	f000 fdbc 	bl	800240c <Report>


    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800189e:	f3bf 8f4f 	dsb	sy
}
 80018a2:	bf00      	nop
    __DSB();

    // Cards with page size <= 512 bytes
    if ((nandPort->Config.PageSize) <= 512U) {
 80018a4:	4b65      	ldr	r3, [pc, #404]	; (8001a3c <io_nand_read_8b+0x250>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ae:	d830      	bhi.n	8001912 <io_nand_read_8b+0x126>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018bc:	f3bf 8f4f 	dsb	sy
}
 80018c0:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	6a3a      	ldr	r2, [r7, #32]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018ce:	f3bf 8f4f 	dsb	sy
}
 80018d2:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	0a1a      	lsrs	r2, r3, #8
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018e2:	f3bf 8f4f 	dsb	sy
}
 80018e6:	bf00      	nop
    	__DSB();
        if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 80018e8:	4b54      	ldr	r3, [pc, #336]	; (8001a3c <io_nand_read_8b+0x250>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	4a53      	ldr	r2, [pc, #332]	; (8001a3c <io_nand_read_8b+0x250>)
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fc:	d344      	bcc.n	8001988 <io_nand_read_8b+0x19c>
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	0c1a      	lsrs	r2, r3, #16
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800190c:	f3bf 8f4f 	dsb	sy
}
 8001910:	e03a      	b.n	8001988 <io_nand_read_8b+0x19c>
			__DSB();
        }
    } else {// (hnand->Config.PageSize) > 512
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800191e:	f3bf 8f4f 	dsb	sy
}
 8001922:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	0a1a      	lsrs	r2, r3, #8
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001932:	f3bf 8f4f 	dsb	sy
}
 8001936:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193e:	6a3a      	ldr	r2, [r7, #32]
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001944:	f3bf 8f4f 	dsb	sy
}
 8001948:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	0a1a      	lsrs	r2, r3, #8
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001958:	f3bf 8f4f 	dsb	sy
}
 800195c:	bf00      	nop
    	__DSB();
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 800195e:	4b37      	ldr	r3, [pc, #220]	; (8001a3c <io_nand_read_8b+0x250>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	4a35      	ldr	r2, [pc, #212]	; (8001a3c <io_nand_read_8b+0x250>)
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001972:	d309      	bcc.n	8001988 <io_nand_read_8b+0x19c>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	0c1a      	lsrs	r2, r3, #16
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001982:	f3bf 8f4f 	dsb	sy
}
 8001986:	bf00      	nop
    		__DSB();
    	}
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198e:	2230      	movs	r2, #48	; 0x30
 8001990:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001992:	f3bf 8f4f 	dsb	sy
}
 8001996:	bf00      	nop
    __DSB();

    uint32_t tickstart = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
    // Check if an extra command is needed for reading pages
    if (nandPort->Config.ExtraCommandEnable == ENABLE) {
 800199c:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <io_nand_read_8b+0x250>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d127      	bne.n	80019f8 <io_nand_read_8b+0x20c>
        tickstart = HAL_GetTick();
 80019a8:	f008 f858 	bl	8009a5c <HAL_GetTick>
 80019ac:	61f8      	str	r0, [r7, #28]
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80019ae:	e013      	b.n	80019d8 <io_nand_read_8b+0x1ec>
            if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 80019b0:	f008 f854 	bl	8009a5c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019be:	d90b      	bls.n	80019d8 <io_nand_read_8b+0x1ec>
            	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <io_nand_read_8b+0x250>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2203      	movs	r2, #3
 80019c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            	__HAL_UNLOCK(nandPort);
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <io_nand_read_8b+0x250>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2020 	strb.w	r2, [r3, #32]
            	return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e02c      	b.n	8001a32 <io_nand_read_8b+0x246>
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <io_nand_read_8b+0x250>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f009 f8b3 	bl	800ab48 <HAL_NAND_Read_Status>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b40      	cmp	r3, #64	; 0x40
 80019e6:	d1e3      	bne.n	80019b0 <io_nand_read_8b+0x1c4>
            }
        }

        // Go back to read mode
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019f2:	f3bf 8f4f 	dsb	sy
}
 80019f6:	bf00      	nop
        __DSB();
    }

    // Get Data into Buffer
    uint8_t *buff = pBuffer;
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) *buff++ = *(uint8_t *)deviceaddress;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a00:	e008      	b.n	8001a14 <io_nand_read_8b+0x228>
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a06:	1c59      	adds	r1, r3, #1
 8001a08:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001a0a:	7812      	ldrb	r2, [r2, #0]
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	3301      	adds	r3, #1
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d3f2      	bcc.n	8001a02 <io_nand_read_8b+0x216>

    nandPort->State = HAL_NAND_STATE_READY;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <io_nand_read_8b+0x250>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <io_nand_read_8b+0x250>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3730      	adds	r7, #48	; 0x30
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000074 	.word	0x20000074
 8001a40:	20001370 	.word	0x20001370
 8001a44:	20000062 	.word	0x20000062
 8001a48:	20000004 	.word	0x20000004
 8001a4c:	08016894 	.word	0x08016894
 8001a50:	08012f6c 	.word	0x08012f6c

08001a54 <io_nand_write_8b>:
//-----------------------------------------------------------------------------
uint32_t io_nand_write_8b(uint32_t addr, uint8_t *pBuffer, uint32_t size, uint32_t offset)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b090      	sub	sp, #64	; 0x40
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	68f9      	ldr	r1, [r7, #12]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fe7f 	bl	800176c <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 8001a6e:	4b8a      	ldr	r3, [pc, #552]	; (8001c98 <io_nand_write_8b+0x244>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d101      	bne.n	8001a80 <io_nand_write_8b+0x2c>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e107      	b.n	8001c90 <io_nand_write_8b+0x23c>

    __HAL_LOCK(nandPort);
 8001a80:	4b85      	ldr	r3, [pc, #532]	; (8001c98 <io_nand_write_8b+0x244>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <io_nand_write_8b+0x3c>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e0ff      	b.n	8001c90 <io_nand_write_8b+0x23c>
 8001a90:	4b81      	ldr	r3, [pc, #516]	; (8001c98 <io_nand_write_8b+0x244>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 8001a9a:	4b7f      	ldr	r3, [pc, #508]	; (8001c98 <io_nand_write_8b+0x244>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 8001aa4:	4b7d      	ldr	r3, [pc, #500]	; (8001c9c <io_nand_write_8b+0x248>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 8001aaa:	8abb      	ldrh	r3, [r7, #20]
 8001aac:	4619      	mov	r1, r3
 8001aae:	8b3b      	ldrh	r3, [r7, #24]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	8afb      	ldrh	r3, [r7, #22]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4b78      	ldr	r3, [pc, #480]	; (8001c98 <io_nand_write_8b+0x244>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abc:	fb00 f303 	mul.w	r3, r0, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a75      	ldr	r2, [pc, #468]	; (8001c98 <io_nand_write_8b+0x244>)
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	440b      	add	r3, r1
 8001ace:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 8001ad0:	4b73      	ldr	r3, [pc, #460]	; (8001ca0 <io_nand_write_8b+0x24c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d911      	bls.n	8001afc <io_nand_write_8b+0xa8>
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, eol);
 8001ad8:	8abb      	ldrh	r3, [r7, #20]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001ada:	461a      	mov	r2, r3
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, eol);
 8001adc:	8afb      	ldrh	r3, [r7, #22]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001ade:	4619      	mov	r1, r3
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, eol);
 8001ae0:	8b3b      	ldrh	r3, [r7, #24]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4b6f      	ldr	r3, [pc, #444]	; (8001ca4 <io_nand_write_8b+0x250>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	9303      	str	r3, [sp, #12]
 8001aea:	9002      	str	r0, [sp, #8]
 8001aec:	9101      	str	r1, [sp, #4]
 8001aee:	9200      	str	r2, [sp, #0]
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	4a6d      	ldr	r2, [pc, #436]	; (8001ca8 <io_nand_write_8b+0x254>)
 8001af4:	496d      	ldr	r1, [pc, #436]	; (8001cac <io_nand_write_8b+0x258>)
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 fc88 	bl	800240c <Report>

    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b06:	f3bf 8f4f 	dsb	sy
}
 8001b0a:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b12:	2280      	movs	r2, #128	; 0x80
 8001b14:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b16:	f3bf 8f4f 	dsb	sy
}
 8001b1a:	bf00      	nop
    __DSB();

    /* Cards with page size <= 512 bytes */
    if (nandPort->Config.PageSize <= 512U) {
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <io_nand_write_8b+0x244>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b26:	d830      	bhi.n	8001b8a <io_nand_write_8b+0x136>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b34:	f3bf 8f4f 	dsb	sy
}
 8001b38:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	6a3a      	ldr	r2, [r7, #32]
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b46:	f3bf 8f4f 	dsb	sy
}
 8001b4a:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	0a1a      	lsrs	r2, r3, #8
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b5a:	f3bf 8f4f 	dsb	sy
}
 8001b5e:	bf00      	nop
    	__DSB();
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001b60:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <io_nand_write_8b+0x244>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <io_nand_write_8b+0x244>)
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d344      	bcc.n	8001c00 <io_nand_write_8b+0x1ac>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	0c1a      	lsrs	r2, r3, #16
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b84:	f3bf 8f4f 	dsb	sy
}
 8001b88:	e03a      	b.n	8001c00 <io_nand_write_8b+0x1ac>
    		__DSB();
        }
    } else {/* (hnand->Config.PageSize) > 512 */
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b96:	f3bf 8f4f 	dsb	sy
}
 8001b9a:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	0a1a      	lsrs	r2, r3, #8
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001baa:	f3bf 8f4f 	dsb	sy
}
 8001bae:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb6:	6a3a      	ldr	r2, [r7, #32]
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bbc:	f3bf 8f4f 	dsb	sy
}
 8001bc0:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	0a1a      	lsrs	r2, r3, #8
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bd0:	f3bf 8f4f 	dsb	sy
}
 8001bd4:	bf00      	nop
    	__DSB();
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001bd6:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <io_nand_write_8b+0x244>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	4a2e      	ldr	r2, [pc, #184]	; (8001c98 <io_nand_write_8b+0x244>)
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bea:	d309      	bcc.n	8001c00 <io_nand_write_8b+0x1ac>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	0c1a      	lsrs	r2, r3, #16
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bfa:	f3bf 8f4f 	dsb	sy
}
 8001bfe:	bf00      	nop
        }
    }


    /* Write data to memory */
    uint8_t *buff = pBuffer;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) {
 8001c04:	2300      	movs	r3, #0
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c08:	e00b      	b.n	8001c22 <io_nand_write_8b+0x1ce>
    	*(__IO uint8_t *)deviceaddress = *buff++;
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c16:	f3bf 8f4f 	dsb	sy
}
 8001c1a:	bf00      	nop
    for (uint32_t index = 0; index < size; index++) {
 8001c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1e:	3301      	adds	r3, #1
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d3ef      	bcc.n	8001c0a <io_nand_write_8b+0x1b6>
    	__DSB();
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	2210      	movs	r2, #16
 8001c32:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c34:	f3bf 8f4f 	dsb	sy
}
 8001c38:	bf00      	nop
    __DSB();

    /* Read status until NAND is ready */
    uint32_t tickstart;
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001c3a:	e016      	b.n	8001c6a <io_nand_write_8b+0x216>
        tickstart = HAL_GetTick();
 8001c3c:	f007 ff0e 	bl	8009a5c <HAL_GetTick>
 8001c40:	61f8      	str	r0, [r7, #28]
        if ((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 8001c42:	f007 ff0b 	bl	8009a5c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c50:	d90b      	bls.n	8001c6a <io_nand_write_8b+0x216>
        	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <io_nand_write_8b+0x244>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2203      	movs	r2, #3
 8001c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        	__HAL_UNLOCK(nandPort);
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <io_nand_write_8b+0x244>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2020 	strb.w	r2, [r3, #32]
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e012      	b.n	8001c90 <io_nand_write_8b+0x23c>
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <io_nand_write_8b+0x244>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f008 ff6a 	bl	800ab48 <HAL_NAND_Read_Status>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b40      	cmp	r3, #64	; 0x40
 8001c78:	d1e0      	bne.n	8001c3c <io_nand_write_8b+0x1e8>
        }
    }

    nandPort->State = HAL_NAND_STATE_READY;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <io_nand_write_8b+0x244>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <io_nand_write_8b+0x244>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3730      	adds	r7, #48	; 0x30
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000074 	.word	0x20000074
 8001c9c:	20001370 	.word	0x20001370
 8001ca0:	20000062 	.word	0x20000062
 8001ca4:	20000004 	.word	0x20000004
 8001ca8:	080168a4 	.word	0x080168a4
 8001cac:	08012f6c 	.word	0x08012f6c

08001cb0 <io_nand_erase_block>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef io_nand_erase_block(NAND_AddressTypeDef *pAddress)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af04      	add	r7, sp, #16
 8001cb6:	6078      	str	r0, [r7, #4]

	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 8001cb8:	4b48      	ldr	r3, [pc, #288]	; (8001ddc <io_nand_erase_block+0x12c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d101      	bne.n	8001cca <io_nand_erase_block+0x1a>

		return HAL_BUSY;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e084      	b.n	8001dd4 <io_nand_erase_block+0x124>

	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 8001cca:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <io_nand_erase_block+0x12c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d17c      	bne.n	8001dd2 <io_nand_erase_block+0x122>

		__HAL_LOCK(nandPort);
 8001cd8:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <io_nand_erase_block+0x12c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <io_nand_erase_block+0x38>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e075      	b.n	8001dd4 <io_nand_erase_block+0x124>
 8001ce8:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <io_nand_erase_block+0x12c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 8001cf2:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <io_nand_erase_block+0x12c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		uint32_t deviceaddress = devAdr;
 8001cfc:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <io_nand_erase_block+0x130>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
		uint32_t nandaddress = ARRAY_ADDRESS(pAddress, nandPort);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	4619      	mov	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	889b      	ldrh	r3, [r3, #4]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	885b      	ldrh	r3, [r3, #2]
 8001d12:	4618      	mov	r0, r3
 8001d14:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <io_nand_erase_block+0x12c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	fb00 f303 	mul.w	r3, r0, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a2e      	ldr	r2, [pc, #184]	; (8001ddc <io_nand_erase_block+0x12c>)
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	60bb      	str	r3, [r7, #8]


		if (dbg > logOn)
 8001d2e:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <io_nand_erase_block+0x134>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d914      	bls.n	8001d60 <io_nand_erase_block+0xb0>
			Report(1, "[%s] nand_adr:0x%X page:%lu block:%lu plane:%lu%s",
					  __func__, nandaddress, pAddress->Page, pAddress->Block, pAddress->Plane, eol);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	881b      	ldrh	r3, [r3, #0]
			Report(1, "[%s] nand_adr:0x%X page:%lu block:%lu plane:%lu%s",
 8001d3a:	461a      	mov	r2, r3
					  __func__, nandaddress, pAddress->Page, pAddress->Block, pAddress->Plane, eol);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	889b      	ldrh	r3, [r3, #4]
			Report(1, "[%s] nand_adr:0x%X page:%lu block:%lu plane:%lu%s",
 8001d40:	4619      	mov	r1, r3
					  __func__, nandaddress, pAddress->Page, pAddress->Block, pAddress->Plane, eol);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	885b      	ldrh	r3, [r3, #2]
			Report(1, "[%s] nand_adr:0x%X page:%lu block:%lu plane:%lu%s",
 8001d46:	4618      	mov	r0, r3
 8001d48:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <io_nand_erase_block+0x138>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	9303      	str	r3, [sp, #12]
 8001d4e:	9002      	str	r0, [sp, #8]
 8001d50:	9101      	str	r1, [sp, #4]
 8001d52:	9200      	str	r2, [sp, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4a25      	ldr	r2, [pc, #148]	; (8001dec <io_nand_erase_block+0x13c>)
 8001d58:	4925      	ldr	r1, [pc, #148]	; (8001df0 <io_nand_erase_block+0x140>)
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f000 fb56 	bl	800240c <Report>

		/* Send Erase block command sequence */
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d66:	2260      	movs	r2, #96	; 0x60
 8001d68:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d6a:	f3bf 8f4f 	dsb	sy
}
 8001d6e:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7c:	f3bf 8f4f 	dsb	sy
}
 8001d80:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	0a1a      	lsrs	r2, r3, #8
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d90:	f3bf 8f4f 	dsb	sy
}
 8001d94:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	0c1a      	lsrs	r2, r3, #16
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001da4:	f3bf 8f4f 	dsb	sy
}
 8001da8:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	22d0      	movs	r2, #208	; 0xd0
 8001db2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001db4:	f3bf 8f4f 	dsb	sy
}
 8001db8:	bf00      	nop
		__DSB();

		nandPort->State = HAL_NAND_STATE_READY;
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <io_nand_erase_block+0x12c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <io_nand_erase_block+0x12c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2020 	strb.w	r2, [r3, #32]

		return HAL_ERROR;

	}

	return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <io_nand_erase_block+0x124>
		return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000074 	.word	0x20000074
 8001de0:	20001370 	.word	0x20001370
 8001de4:	20000062 	.word	0x20000062
 8001de8:	20000004 	.word	0x20000004
 8001dec:	080168b8 	.word	0x080168b8
 8001df0:	08013060 	.word	0x08013060

08001df4 <io_nand_read>:
//-----------------------------------------------------------------------------
uint32_t io_nand_read(uint32_t addr, uint8_t *buffer, uint32_t size, uint32_t offset)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]

	if (io_nand_read_8b(addr, buffer, size, 0) != HAL_OK) devError |= devNAND;
 8001e02:	2300      	movs	r3, #0
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	68b9      	ldr	r1, [r7, #8]
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f7ff fcef 	bl	80017ec <io_nand_read_8b>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <io_nand_read+0x2e>
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <io_nand_read+0x38>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	f043 0320 	orr.w	r3, r3, #32
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <io_nand_read+0x38>)
 8001e20:	801a      	strh	r2, [r3, #0]
	//NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
	//if (NAND_Read_Page_8b(nandPort, &Address, buffer, size, offset) != HAL_OK) devError |= devNAND;

    return 0;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	2000034c 	.word	0x2000034c

08001e30 <io_nand_write>:
//-----------------------------------------------------------------------------
uint32_t io_nand_write(uint32_t addr, uint8_t *buffer, uint32_t size, uint32_t offset)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]

	if (io_nand_write_8b(addr, buffer, size, offset) != HAL_OK) devError |= devNAND;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	68b9      	ldr	r1, [r7, #8]
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff fe05 	bl	8001a54 <io_nand_write_8b>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <io_nand_write+0x2e>
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <io_nand_write+0x38>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	f043 0320 	orr.w	r3, r3, #32
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <io_nand_write+0x38>)
 8001e5c:	801a      	strh	r2, [r3, #0]

	return 0;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	2000034c 	.word	0x2000034c

08001e6c <io_nand_block_erase>:
//-----------------------------------------------------------------------------
void io_nand_block_erase(uint32_t addr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
NAND_AddressTypeDef nans = io_uint32_to_flash_adr(addr);
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fc76 	bl	800176c <io_uint32_to_flash_adr>

	if (io_nand_erase_block(&nans) != HAL_OK) devError |= devNAND;
 8001e80:	f107 0308 	add.w	r3, r7, #8
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff13 	bl	8001cb0 <io_nand_erase_block>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <io_nand_block_erase+0x32>
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <io_nand_block_erase+0x3c>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	f043 0320 	orr.w	r3, r3, #32
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <io_nand_block_erase+0x3c>)
 8001e9c:	801a      	strh	r2, [r3, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000034c 	.word	0x2000034c

08001eac <get_qStat>:
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	dc18      	bgt.n	8001eec <get_qStat+0x40>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f113 0f06 	cmn.w	r3, #6
 8001ec0:	db2a      	blt.n	8001f18 <get_qStat+0x6c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3306      	adds	r3, #6
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d826      	bhi.n	8001f18 <get_qStat+0x6c>
 8001eca:	a201      	add	r2, pc, #4	; (adr r2, 8001ed0 <get_qStat+0x24>)
 8001ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed0:	08001f11 	.word	0x08001f11
 8001ed4:	08001f0d 	.word	0x08001f0d
 8001ed8:	08001f09 	.word	0x08001f09
 8001edc:	08001f05 	.word	0x08001f05
 8001ee0:	08001f01 	.word	0x08001f01
 8001ee4:	08001efd 	.word	0x08001efd
 8001ee8:	08001ef9 	.word	0x08001ef9
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00e      	beq.n	8001f14 <get_qStat+0x68>
 8001ef6:	e00f      	b.n	8001f18 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <get_qStat+0x7c>)
 8001efa:	e00e      	b.n	8001f1a <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <get_qStat+0x80>)
 8001efe:	e00c      	b.n	8001f1a <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <get_qStat+0x84>)
 8001f02:	e00a      	b.n	8001f1a <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <get_qStat+0x88>)
 8001f06:	e008      	b.n	8001f1a <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <get_qStat+0x8c>)
 8001f0a:	e006      	b.n	8001f1a <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <get_qStat+0x90>)
 8001f0e:	e004      	b.n	8001f1a <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <get_qStat+0x94>)
 8001f12:	e002      	b.n	8001f1a <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <get_qStat+0x98>)
 8001f16:	e000      	b.n	8001f1a <get_qStat+0x6e>
	}

	return "UnknownError";
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <get_qStat+0x9c>)
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	08013094 	.word	0x08013094
 8001f2c:	0801309c 	.word	0x0801309c
 8001f30:	080130a4 	.word	0x080130a4
 8001f34:	080130b4 	.word	0x080130b4
 8001f38:	080130c4 	.word	0x080130c4
 8001f3c:	080130d8 	.word	0x080130d8
 8001f40:	080130e8 	.word	0x080130e8
 8001f44:	080130f4 	.word	0x080130f4
 8001f48:	08013108 	.word	0x08013108

08001f4c <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d00a      	beq.n	8001f72 <get_logName+0x26>
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	dc0a      	bgt.n	8001f76 <get_logName+0x2a>
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <get_logName+0x1e>
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d002      	beq.n	8001f6e <get_logName+0x22>
 8001f68:	e005      	b.n	8001f76 <get_logName+0x2a>
		case logOff:
			return "logOff";
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <get_logName+0x38>)
 8001f6c:	e004      	b.n	8001f78 <get_logName+0x2c>
		case logOn:
			return "logOn";
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <get_logName+0x3c>)
 8001f70:	e002      	b.n	8001f78 <get_logName+0x2c>
		case logDump:
			return "logDump";
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <get_logName+0x40>)
 8001f74:	e000      	b.n	8001f78 <get_logName+0x2c>
	}

	return "???";
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <get_logName+0x44>)
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	08013118 	.word	0x08013118
 8001f88:	08013120 	.word	0x08013120
 8001f8c:	08013128 	.word	0x08013128
 8001f90:	08013130 	.word	0x08013130

08001f94 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8001fa0:	2330      	movs	r3, #48	; 0x30
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <hex2bin+0x28>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <hex2bin+0x2c>
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	e0b2      	b.n	8002126 <hex2bin+0x192>
    if (len > 8) len = 8;
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d901      	bls.n	8001fca <hex2bin+0x36>
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f1c3 0308 	rsb	r3, r3, #8
 8001fd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8001fd4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001fd8:	f107 0210 	add.w	r2, r7, #16
 8001fdc:	4413      	add	r3, r2
 8001fde:	78fa      	ldrb	r2, [r7, #3]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00f fcd2 	bl	801198c <memcpy>

    k = j = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001fee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ff2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8001ff6:	e090      	b.n	800211a <hex2bin+0x186>
        jk = j + 2;
 8001ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8002000:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002008:	e066      	b.n	80020d8 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 800200a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800200e:	3328      	adds	r3, #40	; 0x28
 8002010:	443b      	add	r3, r7
 8002012:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002016:	2b2f      	cmp	r3, #47	; 0x2f
 8002018:	d918      	bls.n	800204c <hex2bin+0xb8>
 800201a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800201e:	3328      	adds	r3, #40	; 0x28
 8002020:	443b      	add	r3, r7
 8002022:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002026:	2b39      	cmp	r3, #57	; 0x39
 8002028:	d810      	bhi.n	800204c <hex2bin+0xb8>
 800202a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800202e:	3328      	adds	r3, #40	; 0x28
 8002030:	443b      	add	r3, r7
 8002032:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	3a30      	subs	r2, #48	; 0x30
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	3328      	adds	r3, #40	; 0x28
 8002044:	443b      	add	r3, r7
 8002046:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800204a:	e040      	b.n	80020ce <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 800204c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002050:	3328      	adds	r3, #40	; 0x28
 8002052:	443b      	add	r3, r7
 8002054:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002058:	2b60      	cmp	r3, #96	; 0x60
 800205a:	d918      	bls.n	800208e <hex2bin+0xfa>
 800205c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002060:	3328      	adds	r3, #40	; 0x28
 8002062:	443b      	add	r3, r7
 8002064:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002068:	2b66      	cmp	r3, #102	; 0x66
 800206a:	d810      	bhi.n	800208e <hex2bin+0xfa>
 800206c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002070:	3328      	adds	r3, #40	; 0x28
 8002072:	443b      	add	r3, r7
 8002074:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	3a57      	subs	r2, #87	; 0x57
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	3328      	adds	r3, #40	; 0x28
 8002086:	443b      	add	r3, r7
 8002088:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800208c:	e01f      	b.n	80020ce <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 800208e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002092:	3328      	adds	r3, #40	; 0x28
 8002094:	443b      	add	r3, r7
 8002096:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800209a:	2b40      	cmp	r3, #64	; 0x40
 800209c:	d917      	bls.n	80020ce <hex2bin+0x13a>
 800209e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020a2:	3328      	adds	r3, #40	; 0x28
 80020a4:	443b      	add	r3, r7
 80020a6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80020aa:	2b46      	cmp	r3, #70	; 0x46
 80020ac:	d80f      	bhi.n	80020ce <hex2bin+0x13a>
 80020ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020b2:	3328      	adds	r3, #40	; 0x28
 80020b4:	443b      	add	r3, r7
 80020b6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80020ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	3a37      	subs	r2, #55	; 0x37
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	3328      	adds	r3, #40	; 0x28
 80020c8:	443b      	add	r3, r7
 80020ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 80020ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020d2:	3301      	adds	r3, #1
 80020d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80020dc:	7ffb      	ldrb	r3, [r7, #31]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d393      	bcc.n	800200a <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 80020e2:	7b3b      	ldrb	r3, [r7, #12]
 80020e4:	011a      	lsls	r2, r3, #4
 80020e6:	7b7b      	ldrb	r3, [r7, #13]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 80020f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80020f4:	f1c3 0303 	rsb	r3, r3, #3
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	4313      	orrs	r3, r2
 8002104:	623b      	str	r3, [r7, #32]
        k++;
 8002106:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800210a:	3301      	adds	r3, #1
 800210c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 8002110:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002114:	3302      	adds	r3, #2
 8002116:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 800211a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800211e:	2b03      	cmp	r3, #3
 8002120:	f67f af6a 	bls.w	8001ff8 <hex2bin+0x64>
    }

    return ret;
 8002124:	6a3b      	ldr	r3, [r7, #32]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
	if (on)
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d006      	beq.n	800214e <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8002140:	2201      	movs	r2, #1
 8002142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002146:	4807      	ldr	r0, [pc, #28]	; (8002164 <errLedOn+0x34>)
 8002148:	f008 fb38 	bl	800a7bc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 800214c:	e005      	b.n	800215a <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002154:	4803      	ldr	r0, [pc, #12]	; (8002164 <errLedOn+0x34>)
 8002156:	f008 fb31 	bl	800a7bc <HAL_GPIO_WritePin>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40020c00 	.word	0x40020c00

08002168 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
	return secCounter;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <get_secCounter+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000350 	.word	0x20000350

08002180 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	secCounter++;
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <inc_secCounter+0x18>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	4a03      	ldr	r2, [pc, #12]	; (8002198 <inc_secCounter+0x18>)
 800218c:	6013      	str	r3, [r2, #0]
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	20000350 	.word	0x20000350

0800219c <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
	return msCounter;
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <get_msCounter+0x18>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000358 	.word	0x20000358

080021b8 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
	msCounter++;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <inc_msCounter+0x20>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	1c50      	adds	r0, r2, #1
 80021c4:	f143 0100 	adc.w	r1, r3, #0
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <inc_msCounter+0x20>)
 80021ca:	e9c3 0100 	strd	r0, r1, [r3]
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	20000358 	.word	0x20000358

080021dc <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 80021e4:	f7ff ffc0 	bl	8002168 <get_secCounter>
 80021e8:	4602      	mov	r2, r0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 80021fe:	f7ff ffb3 	bl	8002168 <get_secCounter>
 8002202:	4602      	mov	r2, r0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4293      	cmp	r3, r2
 8002208:	bf94      	ite	ls
 800220a:	2301      	movls	r3, #1
 800220c:	2300      	movhi	r3, #0
 800220e:	b2db      	uxtb	r3, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b094      	sub	sp, #80	; 0x50
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	2000      	movs	r0, #0
 8002224:	460a      	mov	r2, r1
 8002226:	4603      	mov	r3, r0
 8002228:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 800222c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002230:	f107 0320 	add.w	r3, r7, #32
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f00f fac4 	bl	80117c4 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 800223c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223e:	b2db      	uxtb	r3, r3
 8002240:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8002242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002244:	b2db      	uxtb	r3, r3
 8002246:	3301      	adds	r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 800224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224e:	b2db      	uxtb	r3, r3
 8002250:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8002252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002254:	b2db      	uxtb	r3, r3
 8002256:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8002258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <set_Date+0xb0>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4413      	add	r3, r2
 8002262:	b2db      	uxtb	r3, r3
 8002264:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	b2db      	uxtb	r3, r3
 800226a:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 800226c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226e:	b2db      	uxtb	r3, r3
 8002270:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	2200      	movs	r2, #0
 8002278:	4619      	mov	r1, r3
 800227a:	4814      	ldr	r0, [pc, #80]	; (80022cc <set_Date+0xb4>)
 800227c:	f009 faac 	bl	800b7d8 <HAL_RTC_SetTime>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <set_Date+0x7e>
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <set_Date+0xb8>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	f043 0308 	orr.w	r3, r3, #8
 800228e:	b29a      	uxth	r2, r3
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <set_Date+0xb8>)
 8002292:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8002294:	e014      	b.n	80022c0 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	2200      	movs	r2, #0
 800229c:	4619      	mov	r1, r3
 800229e:	480b      	ldr	r0, [pc, #44]	; (80022cc <set_Date+0xb4>)
 80022a0:	f009 fb92 	bl	800b9c8 <HAL_RTC_SetDate>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <set_Date+0xa2>
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <set_Date+0xb8>)
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	f043 0308 	orr.w	r3, r3, #8
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <set_Date+0xb8>)
 80022b6:	801a      	strh	r2, [r3, #0]
}
 80022b8:	e002      	b.n	80022c0 <set_Date+0xa8>
			setDate = true;
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <set_Date+0xbc>)
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
}
 80022c0:	bf00      	nop
 80022c2:	3750      	adds	r7, #80	; 0x50
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20001365 	.word	0x20001365
 80022cc:	2000013c 	.word	0x2000013c
 80022d0:	2000034c 	.word	0x2000034c
 80022d4:	20001364 	.word	0x20001364

080022d8 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b093      	sub	sp, #76	; 0x4c
 80022dc:	af04      	add	r7, sp, #16
 80022de:	6078      	str	r0, [r7, #4]
int ret = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 80022e4:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <sec2str+0x110>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f083 0301 	eor.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d040      	beq.n	8002374 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 80022f2:	f7ff ff39 	bl	8002168 <get_secCounter>
 80022f6:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	4a3c      	ldr	r2, [pc, #240]	; (80023ec <sec2str+0x114>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	4a39      	ldr	r2, [pc, #228]	; (80023ec <sec2str+0x114>)
 8002308:	fba2 1203 	umull	r1, r2, r2, r3
 800230c:	0c12      	lsrs	r2, r2, #16
 800230e:	4938      	ldr	r1, [pc, #224]	; (80023f0 <sec2str+0x118>)
 8002310:	fb01 f202 	mul.w	r2, r1, r2
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	4a36      	ldr	r2, [pc, #216]	; (80023f4 <sec2str+0x11c>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	0adb      	lsrs	r3, r3, #11
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	4a33      	ldr	r2, [pc, #204]	; (80023f4 <sec2str+0x11c>)
 8002328:	fba2 1203 	umull	r1, r2, r2, r3
 800232c:	0ad2      	lsrs	r2, r2, #11
 800232e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002332:	fb01 f202 	mul.w	r2, r1, r2
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <sec2str+0x120>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8002346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <sec2str+0x120>)
 800234a:	fba3 1302 	umull	r1, r3, r3, r2
 800234e:	0959      	lsrs	r1, r3, #5
 8002350:	460b      	mov	r3, r1
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a5b      	subs	r3, r3, r1
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 800235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002368:	4924      	ldr	r1, [pc, #144]	; (80023fc <sec2str+0x124>)
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f00f ff84 	bl	8012278 <siprintf>
 8002370:	6378      	str	r0, [r7, #52]	; 0x34
 8002372:	e034      	b.n	80023de <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	2200      	movs	r2, #0
 800237a:	4619      	mov	r1, r3
 800237c:	4820      	ldr	r0, [pc, #128]	; (8002400 <sec2str+0x128>)
 800237e:	f009 fba7 	bl	800bad0 <HAL_RTC_GetDate>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <sec2str+0xc0>
 8002388:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <sec2str+0x12c>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	f043 0308 	orr.w	r3, r3, #8
 8002390:	b29a      	uxth	r2, r3
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <sec2str+0x12c>)
 8002394:	801a      	strh	r2, [r3, #0]
 8002396:	e022      	b.n	80023de <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	2200      	movs	r2, #0
 800239e:	4619      	mov	r1, r3
 80023a0:	4817      	ldr	r0, [pc, #92]	; (8002400 <sec2str+0x128>)
 80023a2:	f009 fab3 	bl	800b90c <HAL_RTC_GetTime>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <sec2str+0xe4>
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <sec2str+0x12c>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <sec2str+0x12c>)
 80023b8:	801a      	strh	r2, [r3, #0]
 80023ba:	e010      	b.n	80023de <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 80023bc:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80023be:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 80023c0:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80023c2:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 80023c4:	7c3b      	ldrb	r3, [r7, #16]
 80023c6:	7c7a      	ldrb	r2, [r7, #17]
 80023c8:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80023ca:	9102      	str	r1, [sp, #8]
 80023cc:	9201      	str	r2, [sp, #4]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	4623      	mov	r3, r4
 80023d2:	4602      	mov	r2, r0
 80023d4:	490c      	ldr	r1, [pc, #48]	; (8002408 <sec2str+0x130>)
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f00f ff4e 	bl	8012278 <siprintf>
 80023dc:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 80023de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	373c      	adds	r7, #60	; 0x3c
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}
 80023e8:	20001364 	.word	0x20001364
 80023ec:	c22e4507 	.word	0xc22e4507
 80023f0:	00015180 	.word	0x00015180
 80023f4:	91a2b3c5 	.word	0x91a2b3c5
 80023f8:	88888889 	.word	0x88888889
 80023fc:	08013134 	.word	0x08013134
 8002400:	2000013c 	.word	0x2000013c
 8002404:	2000034c 	.word	0x2000034c
 8002408:	0801314c 	.word	0x0801314c

0800240c <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 800240c:	b40e      	push	{r1, r2, r3}
 800240e:	b590      	push	{r4, r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8002418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800241c:	613b      	str	r3, [r7, #16]
int dl = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8002422:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <Report+0xb4>)
 8002424:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d010      	beq.n	8002454 <Report+0x48>
		dl = sec2str(buf);
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f7ff ff50 	bl	80022d8 <sec2str>
 8002438:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f7fd fec8 	bl	80001d0 <strlen>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <Report+0xb8>)
 800244a:	6810      	ldr	r0, [r2, #0]
 800244c:	6018      	str	r0, [r3, #0]
		dl += 3;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3303      	adds	r3, #3
 8002452:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8002454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002458:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	18d0      	adds	r0, r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	1ad1      	subs	r1, r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246a:	f010 f86d 	bl	8012548 <vsniprintf>

	uartRdy = false;
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <Report+0xbc>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <Report+0xc0>)
 8002476:	681c      	ldr	r4, [r3, #0]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7fd fea9 	bl	80001d0 <strlen>
 800247e:	4603      	mov	r3, r0
 8002480:	b29b      	uxth	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	4620      	mov	r0, r4
 8002488:	f00a fe1e 	bl	800d0c8 <HAL_UART_Transmit_DMA>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <Report+0x94>
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <Report+0xc4>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <Report+0xc4>)
 800249e:	801a      	strh	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 80024a0:	bf00      	nop
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <Report+0xbc>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	f083 0301 	eor.w	r3, r3, #1
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f8      	bne.n	80024a2 <Report+0x96>

	va_end(args);

	return 0;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80024bc:	b003      	add	sp, #12
 80024be:	4770      	bx	lr
 80024c0:	20000360 	.word	0x20000360
 80024c4:	08013168 	.word	0x08013168
 80024c8:	20000060 	.word	0x20000060
 80024cc:	20000070 	.word	0x20000070
 80024d0:	2000034c 	.word	0x2000034c

080024d4 <HAL_UART_RxCpltCallback>:


#endif
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b090      	sub	sp, #64	; 0x40
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4aad      	ldr	r2, [pc, #692]	; (8002798 <HAL_UART_RxCpltCallback+0x2c4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	f040 8265 	bne.w	80029b2 <HAL_UART_RxCpltCallback+0x4de>

		rxBuf[ruk++] = (char)rxByte;
 80024e8:	4bac      	ldr	r3, [pc, #688]	; (800279c <HAL_UART_RxCpltCallback+0x2c8>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	b291      	uxth	r1, r2
 80024f0:	4aaa      	ldr	r2, [pc, #680]	; (800279c <HAL_UART_RxCpltCallback+0x2c8>)
 80024f2:	8011      	strh	r1, [r2, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4baa      	ldr	r3, [pc, #680]	; (80027a0 <HAL_UART_RxCpltCallback+0x2cc>)
 80024f8:	7819      	ldrb	r1, [r3, #0]
 80024fa:	4baa      	ldr	r3, [pc, #680]	; (80027a4 <HAL_UART_RxCpltCallback+0x2d0>)
 80024fc:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 80024fe:	4ba8      	ldr	r3, [pc, #672]	; (80027a0 <HAL_UART_RxCpltCallback+0x2cc>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b0a      	cmp	r3, #10
 8002504:	f040 8250 	bne.w	80029a8 <HAL_UART_RxCpltCallback+0x4d4>
			rxBuf[--ruk] = '\0';
 8002508:	4ba4      	ldr	r3, [pc, #656]	; (800279c <HAL_UART_RxCpltCallback+0x2c8>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	4ba2      	ldr	r3, [pc, #648]	; (800279c <HAL_UART_RxCpltCallback+0x2c8>)
 8002512:	801a      	strh	r2, [r3, #0]
 8002514:	4ba1      	ldr	r3, [pc, #644]	; (800279c <HAL_UART_RxCpltCallback+0x2c8>)
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4ba2      	ldr	r3, [pc, #648]	; (80027a4 <HAL_UART_RxCpltCallback+0x2d0>)
 800251c:	2100      	movs	r1, #0
 800251e:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8002520:	2300      	movs	r3, #0
 8002522:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8002524:	2300      	movs	r3, #0
 8002526:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 800252a:	4b9f      	ldr	r3, [pc, #636]	; (80027a8 <HAL_UART_RxCpltCallback+0x2d4>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8002530:	2300      	movs	r3, #0
 8002532:	83bb      	strh	r3, [r7, #28]
			if (strlen(rxBuf) >= 4) {
 8002534:	489b      	ldr	r0, [pc, #620]	; (80027a4 <HAL_UART_RxCpltCallback+0x2d0>)
 8002536:	f7fd fe4b 	bl	80001d0 <strlen>
 800253a:	4603      	mov	r3, r0
 800253c:	2b03      	cmp	r3, #3
 800253e:	f240 822d 	bls.w	800299c <HAL_UART_RxCpltCallback+0x4c8>
				int8_t idx = -1;
 8002542:	23ff      	movs	r3, #255	; 0xff
 8002544:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800254e:	e018      	b.n	8002582 <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8002550:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002554:	4a95      	ldr	r2, [pc, #596]	; (80027ac <HAL_UART_RxCpltCallback+0x2d8>)
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	4619      	mov	r1, r3
 800255c:	4891      	ldr	r0, [pc, #580]	; (80027a4 <HAL_UART_RxCpltCallback+0x2d0>)
 800255e:	f00f ff25 	bl	80123ac <strstr>
 8002562:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <HAL_UART_RxCpltCallback+0xa0>
														  //"erase:"
														  //"check:"
														  //"log:"
														  //"info"
						  	  	  	  	  	  	  	  	  //"help"
						idx = i;
 800256a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800256e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 8002572:	e00a      	b.n	800258a <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002574:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002578:	b2db      	uxtb	r3, r3
 800257a:	3301      	adds	r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002582:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002586:	2b0a      	cmp	r3, #10
 8002588:	dde2      	ble.n	8002550 <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 800258a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258c:	4a85      	ldr	r2, [pc, #532]	; (80027a4 <HAL_UART_RxCpltCallback+0x2d0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	f040 8204 	bne.w	800299c <HAL_UART_RxCpltCallback+0x4c8>
 8002594:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800259c:	f000 81fe 	beq.w	800299c <HAL_UART_RxCpltCallback+0x4c8>
					nandLen = MAX_LEN_DATA;//256;
 80025a0:	4b83      	ldr	r3, [pc, #524]	; (80027b0 <HAL_UART_RxCpltCallback+0x2dc>)
 80025a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a6:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 80025a8:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80025ac:	4a7f      	ldr	r2, [pc, #508]	; (80027ac <HAL_UART_RxCpltCallback+0x2d8>)
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd fe0c 	bl	80001d0 <strlen>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025bc:	4413      	add	r3, r2
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c8:	2300      	movs	r3, #0
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 80025cc:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80025d0:	2b0a      	cmp	r3, #10
 80025d2:	f200 81a6 	bhi.w	8002922 <HAL_UART_RxCpltCallback+0x44e>
 80025d6:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <HAL_UART_RxCpltCallback+0x108>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	08002609 	.word	0x08002609
 80025e0:	08002611 	.word	0x08002611
 80025e4:	08002669 	.word	0x08002669
 80025e8:	080026e5 	.word	0x080026e5
 80025ec:	08002705 	.word	0x08002705
 80025f0:	08002871 	.word	0x08002871
 80025f4:	080028a7 	.word	0x080028a7
 80025f8:	080028c9 	.word	0x080028c9
 80025fc:	08002609 	.word	0x08002609
 8002600:	08002609 	.word	0x08002609
 8002604:	08002609 	.word	0x08002609
						case cmdHelp:
						case cmdInfo:
						case cmdRestart:
						case cmdMem:
							cmd_flag = 1;
 8002608:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <HAL_UART_RxCpltCallback+0x2d4>)
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
						break;
 800260e:	e188      	b.n	8002922 <HAL_UART_RxCpltCallback+0x44e>
						case cmdEpoch:
							if (strlen(uk) < 10) {
 8002610:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002612:	f7fd fddd 	bl	80001d0 <strlen>
 8002616:	4603      	mov	r3, r0
 8002618:	2b09      	cmp	r3, #9
 800261a:	d802      	bhi.n	8002622 <HAL_UART_RxCpltCallback+0x14e>
								qcmd.attr = 1;
 800261c:	2301      	movs	r3, #1
 800261e:	777b      	strb	r3, [r7, #29]
 8002620:	e01e      	b.n	8002660 <HAL_UART_RxCpltCallback+0x18c>
							} else {
								uki = strchr(uk, ':');
 8002622:	213a      	movs	r1, #58	; 0x3a
 8002624:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002626:	f00f fe99 	bl	801235c <strchr>
 800262a:	6378      	str	r0, [r7, #52]	; 0x34
								if (uki) {
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00c      	beq.n	800264c <HAL_UART_RxCpltCallback+0x178>
									tZone = (uint8_t)atol(uki + 1);
 8002632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002634:	3301      	adds	r3, #1
 8002636:	4618      	mov	r0, r3
 8002638:	f00e ffb2 	bl	80115a0 <atol>
 800263c:	4603      	mov	r3, r0
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_UART_RxCpltCallback+0x2e0>)
 8002642:	701a      	strb	r2, [r3, #0]
									*uki = '\0';
 8002644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
 800264a:	e002      	b.n	8002652 <HAL_UART_RxCpltCallback+0x17e>
								} else {
									tZone = 0;
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_UART_RxCpltCallback+0x2e0>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
								}
								epoch = (uint32_t)atol(uk);
 8002652:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002654:	f00e ffa4 	bl	80115a0 <atol>
 8002658:	4603      	mov	r3, r0
 800265a:	461a      	mov	r2, r3
 800265c:	4b56      	ldr	r3, [pc, #344]	; (80027b8 <HAL_UART_RxCpltCallback+0x2e4>)
 800265e:	601a      	str	r2, [r3, #0]
							}
							cmd_flag = 1;
 8002660:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_UART_RxCpltCallback+0x2d4>)
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
						break;
 8002666:	e15c      	b.n	8002922 <HAL_UART_RxCpltCallback+0x44e>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 8002668:	213a      	movs	r1, #58	; 0x3a
 800266a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800266c:	f00f fe76 	bl	801235c <strchr>
 8002670:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <HAL_UART_RxCpltCallback+0x1bc>
								nandLen = atol(uki + 1);
 8002678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267a:	3301      	adds	r3, #1
 800267c:	4618      	mov	r0, r3
 800267e:	f00e ff8f 	bl	80115a0 <atol>
 8002682:	4603      	mov	r3, r0
 8002684:	b29a      	uxth	r2, r3
 8002686:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <HAL_UART_RxCpltCallback+0x2dc>)
 8002688:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 800268a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8002690:	494a      	ldr	r1, [pc, #296]	; (80027bc <HAL_UART_RxCpltCallback+0x2e8>)
 8002692:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002694:	f00f fe8a 	bl	80123ac <strstr>
 8002698:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 800269a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00f      	beq.n	80026c0 <HAL_UART_RxCpltCallback+0x1ec>
								uki += 2;
 80026a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a2:	3302      	adds	r3, #2
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 80026a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026a8:	f7fd fd92 	bl	80001d0 <strlen>
 80026ac:	4603      	mov	r3, r0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	4619      	mov	r1, r3
 80026b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026b4:	f7ff fc6e 	bl	8001f94 <hex2bin>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4a41      	ldr	r2, [pc, #260]	; (80027c0 <HAL_UART_RxCpltCallback+0x2ec>)
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e006      	b.n	80026ce <HAL_UART_RxCpltCallback+0x1fa>
							} else {
								nandAdr = atol(uk);
 80026c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80026c2:	f00e ff6d 	bl	80115a0 <atol>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_UART_RxCpltCallback+0x2ec>)
 80026cc:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 80026ce:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <HAL_UART_RxCpltCallback+0x2ec>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4b3c      	ldr	r3, [pc, #240]	; (80027c4 <HAL_UART_RxCpltCallback+0x2f0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	4a39      	ldr	r2, [pc, #228]	; (80027c0 <HAL_UART_RxCpltCallback+0x2ec>)
 80026da:	6013      	str	r3, [r2, #0]
							check = true;
 80026dc:	2301      	movs	r3, #1
 80026de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 80026e2:	e11e      	b.n	8002922 <HAL_UART_RxCpltCallback+0x44e>
						case cmdNext://"next";
							//if (nandAdr < devAdr) nandAdr = devAdr;
							nandLen = 512;
 80026e4:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <HAL_UART_RxCpltCallback+0x2dc>)
 80026e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ea:	801a      	strh	r2, [r3, #0]
							nandAdr += nandLen;
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <HAL_UART_RxCpltCallback+0x2dc>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b33      	ldr	r3, [pc, #204]	; (80027c0 <HAL_UART_RxCpltCallback+0x2ec>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a31      	ldr	r2, [pc, #196]	; (80027c0 <HAL_UART_RxCpltCallback+0x2ec>)
 80026fa:	6013      	str	r3, [r2, #0]
							check = true;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 8002702:	e10e      	b.n	8002922 <HAL_UART_RxCpltCallback+0x44e>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 8002704:	2300      	movs	r3, #0
 8002706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 800270a:	492c      	ldr	r1, [pc, #176]	; (80027bc <HAL_UART_RxCpltCallback+0x2e8>)
 800270c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800270e:	f00f fe4d 	bl	80123ac <strstr>
 8002712:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_UART_RxCpltCallback+0x25c>
								if (uki == uk) {
 800271a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800271c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800271e:	429a      	cmp	r2, r3
 8002720:	d108      	bne.n	8002734 <HAL_UART_RxCpltCallback+0x260>
									uki += 2;
 8002722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002724:	3302      	adds	r3, #2
 8002726:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 8002728:	2301      	movs	r3, #1
 800272a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800272e:	e001      	b.n	8002734 <HAL_UART_RxCpltCallback+0x260>
								}
							} else uki = uk;
 8002730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 8002734:	213a      	movs	r1, #58	; 0x3a
 8002736:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002738:	f00f fe10 	bl	801235c <strchr>
 800273c:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80eb 	beq.w	800291c <HAL_UART_RxCpltCallback+0x448>
								ukb = uke + 1;
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	3301      	adds	r3, #1
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2210      	movs	r2, #16
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f00f f927 	bl	80119a8 <memset>
								memcpy(tmp, uki, uke - uki);
 800275a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800275c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	461a      	mov	r2, r3
 8002762:	f107 030c 	add.w	r3, r7, #12
 8002766:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002768:	4618      	mov	r0, r3
 800276a:	f00f f90f 	bl	801198c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 800276e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002772:	2b00      	cmp	r3, #0
 8002774:	d028      	beq.n	80027c8 <HAL_UART_RxCpltCallback+0x2f4>
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	4618      	mov	r0, r3
 800277c:	f7fd fd28 	bl	80001d0 <strlen>
 8002780:	4603      	mov	r3, r0
 8002782:	b2da      	uxtb	r2, r3
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fc02 	bl	8001f94 <hex2bin>
 8002790:	4603      	mov	r3, r0
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <HAL_UART_RxCpltCallback+0x2ec>)
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e020      	b.n	80027da <HAL_UART_RxCpltCallback+0x306>
 8002798:	40004800 	.word	0x40004800
 800279c:	20001362 	.word	0x20001362
 80027a0:	20001360 	.word	0x20001360
 80027a4:	20000b60 	.word	0x20000b60
 80027a8:	2000034e 	.word	0x2000034e
 80027ac:	20000008 	.word	0x20000008
 80027b0:	20001378 	.word	0x20001378
 80027b4:	20001365 	.word	0x20001365
 80027b8:	20000064 	.word	0x20000064
 80027bc:	0801316c 	.word	0x0801316c
 80027c0:	20001374 	.word	0x20001374
 80027c4:	20001370 	.word	0x20001370
								    else nandAdr = atol(tmp);
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	4618      	mov	r0, r3
 80027ce:	f00e fee7 	bl	80115a0 <atol>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b79      	ldr	r3, [pc, #484]	; (80029bc <HAL_UART_RxCpltCallback+0x4e8>)
 80027d8:	601a      	str	r2, [r3, #0]
								uki = ukb;
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 80027de:	213a      	movs	r1, #58	; 0x3a
 80027e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027e2:	f00f fdbb 	bl	801235c <strchr>
 80027e6:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_UART_RxCpltCallback+0x332>
									nandLen = atol(uke + 1);
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	3301      	adds	r3, #1
 80027f2:	4618      	mov	r0, r3
 80027f4:	f00e fed4 	bl	80115a0 <atol>
 80027f8:	4603      	mov	r3, r0
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	4b70      	ldr	r3, [pc, #448]	; (80029c0 <HAL_UART_RxCpltCallback+0x4ec>)
 80027fe:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 8002806:	496f      	ldr	r1, [pc, #444]	; (80029c4 <HAL_UART_RxCpltCallback+0x4f0>)
 8002808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800280a:	f00f fdcf 	bl	80123ac <strstr>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d006      	beq.n	8002822 <HAL_UART_RxCpltCallback+0x34e>
									ukb += 2;
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	3302      	adds	r3, #2
 8002818:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002820:	e002      	b.n	8002828 <HAL_UART_RxCpltCallback+0x354>
								} else hex = false;
 8002822:	2300      	movs	r3, #0
 8002824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 8002828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00d      	beq.n	800284c <HAL_UART_RxCpltCallback+0x378>
 8002830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002832:	f7fd fccd 	bl	80001d0 <strlen>
 8002836:	4603      	mov	r3, r0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	4619      	mov	r1, r3
 800283c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800283e:	f7ff fba9 	bl	8001f94 <hex2bin>
 8002842:	4603      	mov	r3, r0
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b60      	ldr	r3, [pc, #384]	; (80029c8 <HAL_UART_RxCpltCallback+0x4f4>)
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e006      	b.n	800285a <HAL_UART_RxCpltCallback+0x386>
								    else nandByte = (uint8_t)atol(ukb);
 800284c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800284e:	f00e fea7 	bl	80115a0 <atol>
 8002852:	4603      	mov	r3, r0
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4b5c      	ldr	r3, [pc, #368]	; (80029c8 <HAL_UART_RxCpltCallback+0x4f4>)
 8002858:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 800285a:	4b58      	ldr	r3, [pc, #352]	; (80029bc <HAL_UART_RxCpltCallback+0x4e8>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b5b      	ldr	r3, [pc, #364]	; (80029cc <HAL_UART_RxCpltCallback+0x4f8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4413      	add	r3, r2
 8002864:	4a55      	ldr	r2, [pc, #340]	; (80029bc <HAL_UART_RxCpltCallback+0x4e8>)
 8002866:	6013      	str	r3, [r2, #0]
								check = true;
 8002868:	2301      	movs	r3, #1
 800286a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							}
						}
						break;
 800286e:	e055      	b.n	800291c <HAL_UART_RxCpltCallback+0x448>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 8002870:	4957      	ldr	r1, [pc, #348]	; (80029d0 <HAL_UART_RxCpltCallback+0x4fc>)
 8002872:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002874:	f00f fd9a 	bl	80123ac <strstr>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_UART_RxCpltCallback+0x3b0>
								qcmd.attr = 1;
 800287e:	2301      	movs	r3, #1
 8002880:	777b      	strb	r3, [r7, #29]
 8002882:	e00c      	b.n	800289e <HAL_UART_RxCpltCallback+0x3ca>
							} else {
								uint32_t blk = atol(uk);
 8002884:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002886:	f00e fe8b 	bl	80115a0 <atol>
 800288a:	4603      	mov	r3, r0
 800288c:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 800288e:	4b51      	ldr	r3, [pc, #324]	; (80029d4 <HAL_UART_RxCpltCallback+0x500>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	6a3a      	ldr	r2, [r7, #32]
 8002894:	429a      	cmp	r2, r3
 8002896:	d202      	bcs.n	800289e <HAL_UART_RxCpltCallback+0x3ca>
 8002898:	4a4f      	ldr	r2, [pc, #316]	; (80029d8 <HAL_UART_RxCpltCallback+0x504>)
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	6013      	str	r3, [r2, #0]
							}
							cmd_flag = 1;
 800289e:	4b4f      	ldr	r3, [pc, #316]	; (80029dc <HAL_UART_RxCpltCallback+0x508>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
						break;
 80028a4:	e03d      	b.n	8002922 <HAL_UART_RxCpltCallback+0x44e>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 80028a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028a8:	f00e fe7a 	bl	80115a0 <atol>
 80028ac:	4603      	mov	r3, r0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < total_pages) {//128MB / 2K = 65536 - pages
 80028b0:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <HAL_UART_RxCpltCallback+0x50c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d232      	bcs.n	8002920 <HAL_UART_RxCpltCallback+0x44c>
								nandPage = page;
 80028ba:	4a4a      	ldr	r2, [pc, #296]	; (80029e4 <HAL_UART_RxCpltCallback+0x510>)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	6013      	str	r3, [r2, #0]
								cmd_flag = 1;
 80028c0:	4b46      	ldr	r3, [pc, #280]	; (80029dc <HAL_UART_RxCpltCallback+0x508>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 80028c6:	e02b      	b.n	8002920 <HAL_UART_RxCpltCallback+0x44c>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 80028c8:	2303      	movs	r3, #3
 80028ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							if (strstr(uk, "off")) {
 80028ce:	4946      	ldr	r1, [pc, #280]	; (80029e8 <HAL_UART_RxCpltCallback+0x514>)
 80028d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028d2:	f00f fd6b 	bl	80123ac <strstr>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_UART_RxCpltCallback+0x410>
								lg = logOff;
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80028e2:	e014      	b.n	800290e <HAL_UART_RxCpltCallback+0x43a>
							} else if (strstr(uk, "on")) {
 80028e4:	4941      	ldr	r1, [pc, #260]	; (80029ec <HAL_UART_RxCpltCallback+0x518>)
 80028e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028e8:	f00f fd60 	bl	80123ac <strstr>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_UART_RxCpltCallback+0x426>
								lg = logOn;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80028f8:	e009      	b.n	800290e <HAL_UART_RxCpltCallback+0x43a>
							} else if (strstr(uk, "dump")) {
 80028fa:	493d      	ldr	r1, [pc, #244]	; (80029f0 <HAL_UART_RxCpltCallback+0x51c>)
 80028fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028fe:	f00f fd55 	bl	80123ac <strstr>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_UART_RxCpltCallback+0x43a>
								lg = logDump;
 8002908:	2302      	movs	r3, #2
 800290a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							}
							qcmd.attr = lg;
 800290e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002912:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 8002914:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_UART_RxCpltCallback+0x508>)
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
						}
						break;
 800291a:	e002      	b.n	8002922 <HAL_UART_RxCpltCallback+0x44e>
						break;
 800291c:	bf00      	nop
 800291e:	e000      	b.n	8002922 <HAL_UART_RxCpltCallback+0x44e>
						break;
 8002920:	bf00      	nop
					}
					qcmd.cmd = idx;
 8002922:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002926:	773b      	strb	r3, [r7, #28]
					if (check) {
 8002928:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01b      	beq.n	8002968 <HAL_UART_RxCpltCallback+0x494>
						if ((nandAdr + nandLen) >= (total_bytes + devAdr)) {
 8002930:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_UART_RxCpltCallback+0x4ec>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4b21      	ldr	r3, [pc, #132]	; (80029bc <HAL_UART_RxCpltCallback+0x4e8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	441a      	add	r2, r3
 800293c:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <HAL_UART_RxCpltCallback+0x520>)
 800293e:	6819      	ldr	r1, [r3, #0]
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <HAL_UART_RxCpltCallback+0x4f8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	440b      	add	r3, r1
 8002946:	429a      	cmp	r2, r3
 8002948:	d30b      	bcc.n	8002962 <HAL_UART_RxCpltCallback+0x48e>
							nandLen = total_bytes - nandAdr - 1;
 800294a:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <HAL_UART_RxCpltCallback+0x520>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	b29a      	uxth	r2, r3
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_UART_RxCpltCallback+0x4e8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_UART_RxCpltCallback+0x4ec>)
 8002960:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <HAL_UART_RxCpltCallback+0x508>)
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
					}
					//
					if (cmd_flag) {
 8002968:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <HAL_UART_RxCpltCallback+0x508>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d015      	beq.n	800299c <HAL_UART_RxCpltCallback+0x4c8>
						if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8002970:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_UART_RxCpltCallback+0x524>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	f107 011c 	add.w	r1, r7, #28
 8002978:	2300      	movs	r3, #0
 800297a:	2205      	movs	r2, #5
 800297c:	f00b fef6 	bl	800e76c <osMessageQueuePut>
 8002980:	4603      	mov	r3, r0
 8002982:	4a1e      	ldr	r2, [pc, #120]	; (80029fc <HAL_UART_RxCpltCallback+0x528>)
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_UART_RxCpltCallback+0x528>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <HAL_UART_RxCpltCallback+0x4c8>
 800298e:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <HAL_UART_RxCpltCallback+0x52c>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002996:	b29a      	uxth	r2, r3
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_UART_RxCpltCallback+0x52c>)
 800299a:	801a      	strh	r2, [r3, #0]
					}
					//
				}
			}
			ruk = 0;
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_UART_RxCpltCallback+0x530>)
 800299e:	2200      	movs	r2, #0
 80029a0:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 80029a2:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_UART_RxCpltCallback+0x534>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 80029a8:	2201      	movs	r2, #1
 80029aa:	4918      	ldr	r1, [pc, #96]	; (8002a0c <HAL_UART_RxCpltCallback+0x538>)
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f00a fb5a 	bl	800d066 <HAL_UART_Receive_IT>
	}
}
 80029b2:	bf00      	nop
 80029b4:	3740      	adds	r7, #64	; 0x40
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20001374 	.word	0x20001374
 80029c0:	20001378 	.word	0x20001378
 80029c4:	0801316c 	.word	0x0801316c
 80029c8:	20000080 	.word	0x20000080
 80029cc:	20001370 	.word	0x20001370
 80029d0:	08013170 	.word	0x08013170
 80029d4:	20001390 	.word	0x20001390
 80029d8:	2000137c 	.word	0x2000137c
 80029dc:	2000034e 	.word	0x2000034e
 80029e0:	20001368 	.word	0x20001368
 80029e4:	20001380 	.word	0x20001380
 80029e8:	08013174 	.word	0x08013174
 80029ec:	08013178 	.word	0x08013178
 80029f0:	0801317c 	.word	0x0801317c
 80029f4:	2000136c 	.word	0x2000136c
 80029f8:	20000344 	.word	0x20000344
 80029fc:	200023a8 	.word	0x200023a8
 8002a00:	2000034c 	.word	0x2000034c
 8002a04:	20001362 	.word	0x20001362
 8002a08:	20000b60 	.word	0x20000b60
 8002a0c:	20001360 	.word	0x20001360

08002a10 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <HAL_UART_TxCpltCallback+0x24>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d102      	bne.n	8002a28 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_UART_TxCpltCallback+0x28>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
	}
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40004800 	.word	0x40004800
 8002a38:	20000060 	.word	0x20000060

08002a3c <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <HAL_SPI_TxCpltCallback+0x24>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d102      	bne.n	8002a54 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_SPI_TxCpltCallback+0x28>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
	}
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40013000 	.word	0x40013000
 8002a64:	20000061 	.word	0x20000061

08002a68 <HAL_NAND_ITCallback>:
//-------------------------------------------------------------------------------------------
void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	cb_nandCounter++;
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_NAND_ITCallback+0x20>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <HAL_NAND_ITCallback+0x20>)
 8002a78:	6013      	str	r3, [r2, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20001384 	.word	0x20001384

08002a8c <showBuf>:
	}
}
*/
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08e      	sub	sp, #56	; 0x38
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60ba      	str	r2, [r7, #8]
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	4603      	mov	r3, r0
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (type == 2) {
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d10e      	bne.n	8002ace <showBuf+0x42>
		if (rd) {
 8002ab0:	7bbb      	ldrb	r3, [r7, #14]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <showBuf+0x3e>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 8002ab6:	4b4a      	ldr	r3, [pc, #296]	; (8002be0 <showBuf+0x154>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
			max_ind = chipConf.PageSize;
 8002ac2:	4b47      	ldr	r3, [pc, #284]	; (8002be0 <showBuf+0x154>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac8:	e001      	b.n	8002ace <showBuf+0x42>
		} else ind = max_ind;
 8002aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 8002ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d271      	bcs.n	8002bba <showBuf+0x12e>
		bool done = false;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 8002adc:	2300      	movs	r3, #0
 8002ade:	623b      	str	r3, [r7, #32]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	fbb3 f1f2 	udiv	r1, r3, r2
 8002af2:	fb01 f202 	mul.w	r2, r1, r2
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <showBuf+0x76>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	3301      	adds	r3, #1
 8002b00:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 8002b02:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <showBuf+0x158>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
		while (!done) {
 8002b08:	e046      	b.n	8002b98 <showBuf+0x10c>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 8002b0a:	4836      	ldr	r0, [pc, #216]	; (8002be4 <showBuf+0x158>)
 8002b0c:	f7fd fb60 	bl	80001d0 <strlen>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4a34      	ldr	r2, [pc, #208]	; (8002be4 <showBuf+0x158>)
 8002b14:	4413      	add	r3, r2
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	4933      	ldr	r1, [pc, #204]	; (8002be8 <showBuf+0x15c>)
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f00f fbac 	bl	8012278 <siprintf>
			for (int i = 0; i < step; i++) {
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e01d      	b.n	8002b62 <showBuf+0xd6>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 8002b26:	482f      	ldr	r0, [pc, #188]	; (8002be4 <showBuf+0x158>)
 8002b28:	f7fd fb52 	bl	80001d0 <strlen>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4a2d      	ldr	r2, [pc, #180]	; (8002be4 <showBuf+0x158>)
 8002b30:	1898      	adds	r0, r3, r2
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	4413      	add	r3, r2
 8002b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	492a      	ldr	r1, [pc, #168]	; (8002bec <showBuf+0x160>)
 8002b42:	f00f fb99 	bl	8012278 <siprintf>
				ix++;
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 8002b4c:	6a3a      	ldr	r2, [r7, #32]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d103      	bne.n	8002b5c <showBuf+0xd0>
					done = true;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 8002b5a:	e006      	b.n	8002b6a <showBuf+0xde>
			for (int i = 0; i < step; i++) {
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	dbdd      	blt.n	8002b26 <showBuf+0x9a>
				}
			}
			strcat(stx, eol);
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <showBuf+0x164>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	481c      	ldr	r0, [pc, #112]	; (8002be4 <showBuf+0x158>)
 8002b72:	f00f fbe4 	bl	801233e <strcat>
			adr += step;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	60bb      	str	r3, [r7, #8]
			ind += step;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b82:	4413      	add	r3, r2
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d102      	bne.n	8002b98 <showBuf+0x10c>
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 8002b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b9c:	f083 0301 	eor.w	r3, r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1b1      	bne.n	8002b0a <showBuf+0x7e>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <showBuf+0x168>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d014      	beq.n	8002bd8 <showBuf+0x14c>
 8002bae:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <showBuf+0x158>)
 8002bb0:	4911      	ldr	r1, [pc, #68]	; (8002bf8 <showBuf+0x16c>)
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7ff fc2a 	bl	800240c <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 8002bb8:	e00e      	b.n	8002bd8 <showBuf+0x14c>
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <showBuf+0x168>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <showBuf+0x14c>
 8002bc2:	7bbb      	ldrb	r3, [r7, #14]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <showBuf+0x164>)
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	9201      	str	r2, [sp, #4]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd0:	490a      	ldr	r1, [pc, #40]	; (8002bfc <showBuf+0x170>)
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f7ff fc1a 	bl	800240c <Report>
}
 8002bd8:	bf00      	nop
 8002bda:	3730      	adds	r7, #48	; 0x30
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20001390 	.word	0x20001390
 8002be4:	200023ac 	.word	0x200023ac
 8002be8:	08013184 	.word	0x08013184
 8002bec:	0801318c 	.word	0x0801318c
 8002bf0:	20000004 	.word	0x20000004
 8002bf4:	20000062 	.word	0x20000062
 8002bf8:	08013194 	.word	0x08013194
 8002bfc:	08013198 	.word	0x08013198

08002c00 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
 8002c06:	af04      	add	r7, sp, #16
 8002c08:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002c0c:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8002c10:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(500);
 8002c12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c16:	f006 ff2d 	bl	8009a74 <HAL_Delay>
	if (dbg != logOff) {
 8002c1a:	4b52      	ldr	r3, [pc, #328]	; (8002d64 <defThread+0x164>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d018      	beq.n	8002c54 <defThread+0x54>
		Report(0, "%s", eol);
 8002c22:	4b51      	ldr	r3, [pc, #324]	; (8002d68 <defThread+0x168>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	4950      	ldr	r1, [pc, #320]	; (8002d6c <defThread+0x16c>)
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7ff fbee 	bl	800240c <Report>
		Report(1, "%s Старт '%s' FreeRTOS memory: free=%lu heap=%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8002c30:	4b4f      	ldr	r3, [pc, #316]	; (8002d70 <defThread+0x170>)
 8002c32:	681c      	ldr	r4, [r3, #0]
 8002c34:	f00e fb66 	bl	8011304 <xPortGetFreeHeapSize>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <defThread+0x168>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	9302      	str	r3, [sp, #8]
 8002c40:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	9200      	str	r2, [sp, #0]
 8002c48:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <defThread+0x174>)
 8002c4a:	4622      	mov	r2, r4
 8002c4c:	494a      	ldr	r1, [pc, #296]	; (8002d78 <defThread+0x178>)
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f7ff fbdc 	bl	800240c <Report>
			devError |= devMEM;
			freeMem(rdBuf);
		}
	}*/

	uint8_t byte = logOff;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 344d 	strb.w	r3, [r7, #1101]	; 0x44d
	uint8_t next_block_erase = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
	uint32_t iBlk, stik;
	uint8_t nand_show = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
	bool readed = false;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f887 3462 	strb.w	r3, [r7, #1122]	; 0x462
	char cid[32];
	uint32_t BlockSizeKB = (chipConf.BlockSize * chipConf.PageSize ) / 1024;
 8002c6c:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <defThread+0x17c>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a42      	ldr	r2, [pc, #264]	; (8002d7c <defThread+0x17c>)
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	fb02 f303 	mul.w	r3, r2, r3
 8002c78:	0a9b      	lsrs	r3, r3, #10
 8002c7a:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
	uint32_t PlaneSizeMB = chipConf.PlaneSize / 1024 / 1024;
 8002c7e:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <defThread+0x17c>)
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	0d1b      	lsrs	r3, r3, #20
 8002c84:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
	uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8002c88:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <defThread+0x180>)
 8002c8a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
	if (nandState == HAL_NAND_STATE_READY) {
 8002c8e:	4b3d      	ldr	r3, [pc, #244]	; (8002d84 <defThread+0x184>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	f040 8086 	bne.w	8002da4 <defThread+0x1a4>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8002c98:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <defThread+0x180>)
 8002c9a:	785b      	ldrb	r3, [r3, #1]
 8002c9c:	22f1      	movs	r2, #241	; 0xf1
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d108      	bne.n	8002cb4 <defThread+0xb4>
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <defThread+0x188>)
 8002ca4:	6819      	ldr	r1, [r3, #0]
 8002ca6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002caa:	2220      	movs	r2, #32
 8002cac:	4618      	mov	r0, r3
 8002cae:	f00f fb6a 	bl	8012386 <strncpy>
 8002cb2:	e006      	b.n	8002cc2 <defThread+0xc2>
		                               else strcpy(cid, "UNKNOWN");
 8002cb4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002cb8:	4a34      	ldr	r2, [pc, #208]	; (8002d8c <defThread+0x18c>)
 8002cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cbe:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8002cc2:	4b33      	ldr	r3, [pc, #204]	; (8002d90 <defThread+0x190>)
 8002cc4:	4a33      	ldr	r2, [pc, #204]	; (8002d94 <defThread+0x194>)
 8002cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cca:	6018      	str	r0, [r3, #0]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	8019      	strh	r1, [r3, #0]
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f887 3461 	strb.w	r3, [r7, #1121]	; 0x461
 8002cd6:	e016      	b.n	8002d06 <defThread+0x106>
 8002cd8:	482d      	ldr	r0, [pc, #180]	; (8002d90 <defThread+0x190>)
 8002cda:	f7fd fa79 	bl	80001d0 <strlen>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	; (8002d90 <defThread+0x190>)
 8002ce2:	1898      	adds	r0, r3, r2
 8002ce4:	f997 3461 	ldrsb.w	r3, [r7, #1121]	; 0x461
 8002ce8:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8002cec:	4413      	add	r3, r2
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4929      	ldr	r1, [pc, #164]	; (8002d98 <defThread+0x198>)
 8002cf4:	f00f fac0 	bl	8012278 <siprintf>
 8002cf8:	f997 3461 	ldrsb.w	r3, [r7, #1121]	; 0x461
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f887 3461 	strb.w	r3, [r7, #1121]	; 0x461
 8002d06:	f897 3461 	ldrb.w	r3, [r7, #1121]	; 0x461
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d9e4      	bls.n	8002cd8 <defThread+0xd8>
		sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8002d0e:	4820      	ldr	r0, [pc, #128]	; (8002d90 <defThread+0x190>)
 8002d10:	f7fd fa5e 	bl	80001d0 <strlen>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <defThread+0x190>)
 8002d18:	1898      	adds	r0, r3, r2
 8002d1a:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <defThread+0x180>)
 8002d1c:	785b      	ldrb	r3, [r3, #1]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002d24:	491d      	ldr	r1, [pc, #116]	; (8002d9c <defThread+0x19c>)
 8002d26:	f00f faa7 	bl	8012278 <siprintf>
		sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB",
 8002d2a:	4819      	ldr	r0, [pc, #100]	; (8002d90 <defThread+0x190>)
 8002d2c:	f7fd fa50 	bl	80001d0 <strlen>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <defThread+0x190>)
 8002d34:	1898      	adds	r0, r3, r2
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <defThread+0x17c>)
 8002d38:	681c      	ldr	r4, [r3, #0]
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <defThread+0x17c>)
 8002d3c:	685d      	ldr	r5, [r3, #4]
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <defThread+0x17c>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <defThread+0x17c>)
 8002d44:	6912      	ldr	r2, [r2, #16]
 8002d46:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 8002d4a:	9103      	str	r1, [sp, #12]
 8002d4c:	9202      	str	r2, [sp, #8]
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	462b      	mov	r3, r5
 8002d58:	4622      	mov	r2, r4
 8002d5a:	4911      	ldr	r1, [pc, #68]	; (8002da0 <defThread+0x1a0>)
 8002d5c:	f00f fa8c 	bl	8012278 <siprintf>
 8002d60:	e02d      	b.n	8002dbe <defThread+0x1be>
 8002d62:	bf00      	nop
 8002d64:	20000062 	.word	0x20000062
 8002d68:	20000004 	.word	0x20000004
 8002d6c:	08013194 	.word	0x08013194
 8002d70:	20000000 	.word	0x20000000
 8002d74:	080168cc 	.word	0x080168cc
 8002d78:	080131c0 	.word	0x080131c0
 8002d7c:	20001390 	.word	0x20001390
 8002d80:	20001388 	.word	0x20001388
 8002d84:	20000081 	.word	0x20000081
 8002d88:	20000084 	.word	0x20000084
 8002d8c:	08013058 	.word	0x08013058
 8002d90:	200023ac 	.word	0x200023ac
 8002d94:	08013200 	.word	0x08013200
 8002d98:	0801318c 	.word	0x0801318c
 8002d9c:	08013208 	.word	0x08013208
 8002da0:	08013220 	.word	0x08013220
					chipConf.BlockNbr,
					chipConf.PlaneNbr,
					PlaneSizeMB);
	} else {
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
					     nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8002da4:	4bb2      	ldr	r3, [pc, #712]	; (8003070 <defThread+0x470>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 8002dac:	4ab1      	ldr	r2, [pc, #708]	; (8003074 <defThread+0x474>)
 8002dae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002db2:	4baf      	ldr	r3, [pc, #700]	; (8003070 <defThread+0x470>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	49b0      	ldr	r1, [pc, #704]	; (8003078 <defThread+0x478>)
 8002db8:	48b0      	ldr	r0, [pc, #704]	; (800307c <defThread+0x47c>)
 8002dba:	f00f fa5d 	bl	8012278 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8002dbe:	4bb0      	ldr	r3, [pc, #704]	; (8003080 <defThread+0x480>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <defThread+0x1d4>
 8002dc6:	4baf      	ldr	r3, [pc, #700]	; (8003084 <defThread+0x484>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4aac      	ldr	r2, [pc, #688]	; (800307c <defThread+0x47c>)
 8002dcc:	49ae      	ldr	r1, [pc, #696]	; (8003088 <defThread+0x488>)
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f7ff fb1c 	bl	800240c <Report>


	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8002dda:	4bac      	ldr	r3, [pc, #688]	; (800308c <defThread+0x48c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	785b      	ldrb	r3, [r3, #1]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002de6:	9200      	str	r2, [sp, #0]
 8002de8:	22ef      	movs	r2, #239	; 0xef
 8002dea:	2100      	movs	r1, #0
 8002dec:	2000      	movs	r0, #0
 8002dee:	f001 f8a6 	bl	8003f3e <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8002df2:	4ba6      	ldr	r3, [pc, #664]	; (800308c <defThread+0x48c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	785b      	ldrb	r3, [r3, #1]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002dfe:	b299      	uxth	r1, r3
 8002e00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	23ef      	movs	r3, #239	; 0xef
 8002e08:	22ef      	movs	r2, #239	; 0xef
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f001 f897 	bl	8003f3e <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 8002e10:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002e14:	f107 0310 	add.w	r3, r7, #16
 8002e18:	499d      	ldr	r1, [pc, #628]	; (8003090 <defThread+0x490>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f00f fa2c 	bl	8012278 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 8002e20:	4b9c      	ldr	r3, [pc, #624]	; (8003094 <defThread+0x494>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	23f0      	movs	r3, #240	; 0xf0
 8002e2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	f107 0310 	add.w	r3, r7, #16
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 f98e 	bl	8004158 <mkLineCenter>
	sprintf(screen+strlen(screen),
 8002e3c:	f107 0310 	add.w	r3, r7, #16
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd f9c5 	bl	80001d0 <strlen>
 8002e46:	4602      	mov	r2, r0
 8002e48:	f107 0310 	add.w	r3, r7, #16
 8002e4c:	1898      	adds	r0, r3, r2
 8002e4e:	4b92      	ldr	r3, [pc, #584]	; (8003098 <defThread+0x498>)
 8002e50:	681c      	ldr	r4, [r3, #0]
 8002e52:	4b91      	ldr	r3, [pc, #580]	; (8003098 <defThread+0x498>)
 8002e54:	685d      	ldr	r5, [r3, #4]
 8002e56:	4b90      	ldr	r3, [pc, #576]	; (8003098 <defThread+0x498>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	4a8f      	ldr	r2, [pc, #572]	; (8003098 <defThread+0x498>)
 8002e5c:	6912      	ldr	r2, [r2, #16]
 8002e5e:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 8002e62:	9103      	str	r1, [sp, #12]
 8002e64:	9202      	str	r2, [sp, #8]
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	462b      	mov	r3, r5
 8002e70:	4622      	mov	r2, r4
 8002e72:	498a      	ldr	r1, [pc, #552]	; (800309c <defThread+0x49c>)
 8002e74:	f00f fa00 	bl	8012278 <siprintf>
			chipConf.SpareAreaSize,
			BlockSizeKB,
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			PlaneSizeMB);
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 8002e78:	4b89      	ldr	r3, [pc, #548]	; (80030a0 <defThread+0x4a0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00e      	beq.n	8002e9e <defThread+0x29e>
 8002e80:	f107 0310 	add.w	r3, r7, #16
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd f9a3 	bl	80001d0 <strlen>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	4413      	add	r3, r2
 8002e92:	4a83      	ldr	r2, [pc, #524]	; (80030a0 <defThread+0x4a0>)
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	4983      	ldr	r1, [pc, #524]	; (80030a4 <defThread+0x4a4>)
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f00f f9ed 	bl	8012278 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8002e9e:	4b7d      	ldr	r3, [pc, #500]	; (8003094 <defThread+0x494>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fc67 	bl	8000778 <__aeabi_i2d>
 8002eaa:	4604      	mov	r4, r0
 8002eac:	460d      	mov	r5, r1
 8002eae:	4b79      	ldr	r3, [pc, #484]	; (8003094 <defThread+0x494>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fc5f 	bl	8000778 <__aeabi_i2d>
 8002eba:	a36b      	add	r3, pc, #428	; (adr r3, 8003068 <defThread+0x468>)
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	f7fd f9de 	bl	8000280 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd fb08 	bl	80004e0 <__adddf3>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f7fd fcb8 	bl	800084c <__aeabi_d2uiz>
 8002edc:	4603      	mov	r3, r0
 8002ede:	b298      	uxth	r0, r3
 8002ee0:	4b6c      	ldr	r3, [pc, #432]	; (8003094 <defThread+0x494>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a70      	ldr	r2, [pc, #448]	; (80030a8 <defThread+0x4a8>)
 8002ee6:	8812      	ldrh	r2, [r2, #0]
 8002ee8:	43d2      	mvns	r2, r2
 8002eea:	b292      	uxth	r2, r2
 8002eec:	496e      	ldr	r1, [pc, #440]	; (80030a8 <defThread+0x4a8>)
 8002eee:	8809      	ldrh	r1, [r1, #0]
 8002ef0:	f107 0410 	add.w	r4, r7, #16
 8002ef4:	9102      	str	r1, [sp, #8]
 8002ef6:	9201      	str	r2, [sp, #4]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	9200      	str	r2, [sp, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4622      	mov	r2, r4
 8002f00:	4601      	mov	r1, r0
 8002f02:	2000      	movs	r0, #0
 8002f04:	f001 f8d2 	bl	80040ac <ST7789_WriteString>
					   screen,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8002f08:	2001      	movs	r0, #1
 8002f0a:	f000 fe89 	bl	8003c20 <ipsOn>

#ifdef SET_SMALL_FS
	bool mnt = false;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d

	#ifdef SET_FS_TEST
		fs_err = io_fs_init();
 8002f14:	f001 fdc8 	bl	8004aa8 <io_fs_init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4a64      	ldr	r2, [pc, #400]	; (80030ac <defThread+0x4ac>)
 8002f1c:	6013      	str	r3, [r2, #0]
		Report(1, "Mount device '%s' start%s", cid, eol);
 8002f1e:	4b59      	ldr	r3, [pc, #356]	; (8003084 <defThread+0x484>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002f26:	4962      	ldr	r1, [pc, #392]	; (80030b0 <defThread+0x4b0>)
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f7ff fa6f 	bl	800240c <Report>
		fs_err = io_fs_mount();
 8002f2e:	f001 fe11 	bl	8004b54 <io_fs_mount>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4a5d      	ldr	r2, [pc, #372]	; (80030ac <defThread+0x4ac>)
 8002f36:	6013      	str	r3, [r2, #0]
		if (fs_err) {
 8002f38:	4b5c      	ldr	r3, [pc, #368]	; (80030ac <defThread+0x4ac>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00c      	beq.n	8002f5a <defThread+0x35a>
			sprintf(stx, "Mount Error '%s'(%ld)", str_fsErr(fs_err), fs_err);
 8002f40:	4b5a      	ldr	r3, [pc, #360]	; (80030ac <defThread+0x4ac>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe fb15 	bl	8001574 <str_fsErr>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	4b57      	ldr	r3, [pc, #348]	; (80030ac <defThread+0x4ac>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4958      	ldr	r1, [pc, #352]	; (80030b4 <defThread+0x4b4>)
 8002f52:	484a      	ldr	r0, [pc, #296]	; (800307c <defThread+0x47c>)
 8002f54:	f00f f990 	bl	8012278 <siprintf>
 8002f58:	e009      	b.n	8002f6e <defThread+0x36e>
		} else {
			mnt = true;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
			sprintf(stx, "Mount device '%s' OK", cid);
 8002f60:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002f64:	461a      	mov	r2, r3
 8002f66:	4954      	ldr	r1, [pc, #336]	; (80030b8 <defThread+0x4b8>)
 8002f68:	4844      	ldr	r0, [pc, #272]	; (800307c <defThread+0x47c>)
 8002f6a:	f00f f985 	bl	8012278 <siprintf>
		}
		Report(1, "%s%s", stx, eol);
 8002f6e:	4b45      	ldr	r3, [pc, #276]	; (8003084 <defThread+0x484>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a42      	ldr	r2, [pc, #264]	; (800307c <defThread+0x47c>)
 8002f74:	4944      	ldr	r1, [pc, #272]	; (8003088 <defThread+0x488>)
 8002f76:	2001      	movs	r0, #1
 8002f78:	f7ff fa48 	bl	800240c <Report>
		if (fs_err) {
 8002f7c:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <defThread+0x4ac>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <defThread+0x3c6>
			Report(1, "Format...%s", eol);
 8002f84:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <defThread+0x484>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	494c      	ldr	r1, [pc, #304]	; (80030bc <defThread+0x4bc>)
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f7ff fa3d 	bl	800240c <Report>
			fs_err = io_fs_format();
 8002f92:	f001 fdd1 	bl	8004b38 <io_fs_format>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4a44      	ldr	r2, [pc, #272]	; (80030ac <defThread+0x4ac>)
 8002f9a:	6013      	str	r3, [r2, #0]
			if (fs_err) {
 8002f9c:	4b43      	ldr	r3, [pc, #268]	; (80030ac <defThread+0x4ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d010      	beq.n	8002fc6 <defThread+0x3c6>
				Report(1, "Format Error '%s'(%d)%s", str_fsErr(fs_err), fs_err, eol);
 8002fa4:	4b41      	ldr	r3, [pc, #260]	; (80030ac <defThread+0x4ac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fae3 	bl	8001574 <str_fsErr>
 8002fae:	4601      	mov	r1, r0
 8002fb0:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <defThread+0x4ac>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b33      	ldr	r3, [pc, #204]	; (8003084 <defThread+0x484>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	4940      	ldr	r1, [pc, #256]	; (80030c0 <defThread+0x4c0>)
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f7ff fa23 	bl	800240c <Report>
			}
		}
		if (!fs_err) {
 8002fc6:	4b39      	ldr	r3, [pc, #228]	; (80030ac <defThread+0x4ac>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d12e      	bne.n	800302c <defThread+0x42c>
			Report(1, "Mount device '%s' start%s", cid, eol);
 8002fce:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <defThread+0x484>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002fd6:	4936      	ldr	r1, [pc, #216]	; (80030b0 <defThread+0x4b0>)
 8002fd8:	2001      	movs	r0, #1
 8002fda:	f7ff fa17 	bl	800240c <Report>
			fs_err = io_fs_mount();
 8002fde:	f001 fdb9 	bl	8004b54 <io_fs_mount>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4a31      	ldr	r2, [pc, #196]	; (80030ac <defThread+0x4ac>)
 8002fe6:	6013      	str	r3, [r2, #0]
			if (fs_err) {
 8002fe8:	4b30      	ldr	r3, [pc, #192]	; (80030ac <defThread+0x4ac>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00c      	beq.n	800300a <defThread+0x40a>
				printf(stx, "Mount Error '%s'(%d)%s", str_fsErr(fs_err), fs_err);
 8002ff0:	4b2e      	ldr	r3, [pc, #184]	; (80030ac <defThread+0x4ac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe fabd 	bl	8001574 <str_fsErr>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <defThread+0x4ac>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4930      	ldr	r1, [pc, #192]	; (80030c4 <defThread+0x4c4>)
 8003002:	481e      	ldr	r0, [pc, #120]	; (800307c <defThread+0x47c>)
 8003004:	f00f f8a6 	bl	8012154 <iprintf>
 8003008:	e009      	b.n	800301e <defThread+0x41e>
			} else {
				mnt = true;
 800300a:	2301      	movs	r3, #1
 800300c:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
				printf(stx, "Mount device '%s' OK%s", cid);
 8003010:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8003014:	461a      	mov	r2, r3
 8003016:	492c      	ldr	r1, [pc, #176]	; (80030c8 <defThread+0x4c8>)
 8003018:	4818      	ldr	r0, [pc, #96]	; (800307c <defThread+0x47c>)
 800301a:	f00f f89b 	bl	8012154 <iprintf>
			}
			Report(1, "%s%s", stx, eol);
 800301e:	4b19      	ldr	r3, [pc, #100]	; (8003084 <defThread+0x484>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a16      	ldr	r2, [pc, #88]	; (800307c <defThread+0x47c>)
 8003024:	4918      	ldr	r1, [pc, #96]	; (8003088 <defThread+0x488>)
 8003026:	2001      	movs	r0, #1
 8003028:	f7ff f9f0 	bl	800240c <Report>

		}
	#endif
#endif

	bool loop = true;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 345c 	strb.w	r3, [r7, #1116]	; 0x45c
//	if (!rdBuf || wrBuf) loop = false;

	bool led = false;
 8003032:	2300      	movs	r3, #0
 8003034:	f887 345b 	strb.w	r3, [r7, #1115]	; 0x45b
	uint32_t tmr = get_tmr(1);
 8003038:	2001      	movs	r0, #1
 800303a:	f7ff f8cf 	bl	80021dc <get_tmr>
 800303e:	f8c7 0454 	str.w	r0, [r7, #1108]	; 0x454

	s_qcmd qcmd = {0};
 8003042:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003046:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800304a:	2200      	movs	r2, #0
 800304c:	801a      	strh	r2, [r3, #0]
	uint8_t prio = 0;
 800304e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003052:	f2a3 4365 	subw	r3, r3, #1125	; 0x465
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
	osStatus_t qs = osOK;
 800305a:	2300      	movs	r3, #0
 800305c:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450

  /* Infinite loop */

	while (loop) {
 8003060:	f000 bc48 	b.w	80038f4 <defThread+0xcf4>
 8003064:	f3af 8000 	nop.w
 8003068:	33333333 	.word	0x33333333
 800306c:	3feb3333 	.word	0x3feb3333
 8003070:	20000081 	.word	0x20000081
 8003074:	20000088 	.word	0x20000088
 8003078:	08013284 	.word	0x08013284
 800307c:	200023ac 	.word	0x200023ac
 8003080:	20000062 	.word	0x20000062
 8003084:	20000004 	.word	0x20000004
 8003088:	080132a4 	.word	0x080132a4
 800308c:	20000078 	.word	0x20000078
 8003090:	080132ac 	.word	0x080132ac
 8003094:	2000007c 	.word	0x2000007c
 8003098:	20001390 	.word	0x20001390
 800309c:	080132b8 	.word	0x080132b8
 80030a0:	20001384 	.word	0x20001384
 80030a4:	08013314 	.word	0x08013314
 80030a8:	20001366 	.word	0x20001366
 80030ac:	20002bac 	.word	0x20002bac
 80030b0:	08013324 	.word	0x08013324
 80030b4:	08013340 	.word	0x08013340
 80030b8:	08013358 	.word	0x08013358
 80030bc:	08013370 	.word	0x08013370
 80030c0:	0801337c 	.word	0x0801337c
 80030c4:	08013394 	.word	0x08013394
 80030c8:	080133ac 	.word	0x080133ac

		if (check_tmr(tmr)) {
 80030cc:	f8d7 0454 	ldr.w	r0, [r7, #1108]	; 0x454
 80030d0:	f7ff f891 	bl	80021f6 <check_tmr>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8091 	beq.w	80031fe <defThread+0x5fe>
			tmr = get_tmr(1);
 80030dc:	2001      	movs	r0, #1
 80030de:	f7ff f87d 	bl	80021dc <get_tmr>
 80030e2:	f8c7 0454 	str.w	r0, [r7, #1108]	; 0x454
			//
			sec2str(screen);
 80030e6:	f107 0310 	add.w	r3, r7, #16
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff f8f4 	bl	80022d8 <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 80030f0:	4bb3      	ldr	r3, [pc, #716]	; (80033c0 <defThread+0x7c0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	23f0      	movs	r3, #240	; 0xf0
 80030fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80030fe:	b29a      	uxth	r2, r3
 8003100:	f107 0310 	add.w	r3, r7, #16
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f001 f826 	bl	8004158 <mkLineCenter>
 800310c:	4601      	mov	r1, r0
 800310e:	4bac      	ldr	r3, [pc, #688]	; (80033c0 <defThread+0x7c0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003116:	9202      	str	r2, [sp, #8]
 8003118:	221f      	movs	r2, #31
 800311a:	9201      	str	r2, [sp, #4]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	9200      	str	r2, [sp, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	460a      	mov	r2, r1
 8003124:	2100      	movs	r1, #0
 8003126:	2008      	movs	r0, #8
 8003128:	f000 ffc0 	bl	80040ac <ST7789_WriteString>

			sprintf(screen, "Error: 0x%04X", devError);
 800312c:	4ba5      	ldr	r3, [pc, #660]	; (80033c4 <defThread+0x7c4>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	f107 0310 	add.w	r3, r7, #16
 8003136:	49a4      	ldr	r1, [pc, #656]	; (80033c8 <defThread+0x7c8>)
 8003138:	4618      	mov	r0, r3
 800313a:	f00f f89d 	bl	8012278 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 800313e:	4ba1      	ldr	r3, [pc, #644]	; (80033c4 <defThread+0x7c4>)
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d004      	beq.n	8003150 <defThread+0x550>
 8003146:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800314a:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
 800314e:	e002      	b.n	8003156 <defThread+0x556>
 8003150:	2300      	movs	r3, #0
 8003152:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8003156:	4b9a      	ldr	r3, [pc, #616]	; (80033c0 <defThread+0x7c0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	785b      	ldrb	r3, [r3, #1]
 800315c:	b29b      	uxth	r3, r3
 800315e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003162:	b29c      	uxth	r4, r3
 8003164:	4b96      	ldr	r3, [pc, #600]	; (80033c0 <defThread+0x7c0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	23f0      	movs	r3, #240	; 0xf0
 800316e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003172:	b29a      	uxth	r2, r3
 8003174:	f107 0310 	add.w	r3, r7, #16
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f000 ffec 	bl	8004158 <mkLineCenter>
 8003180:	4601      	mov	r1, r0
 8003182:	4b8f      	ldr	r3, [pc, #572]	; (80033c0 <defThread+0x7c0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800318a:	9202      	str	r2, [sp, #8]
 800318c:	f8b7 245e 	ldrh.w	r2, [r7, #1118]	; 0x45e
 8003190:	9201      	str	r2, [sp, #4]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	9200      	str	r2, [sp, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	460a      	mov	r2, r1
 800319a:	4621      	mov	r1, r4
 800319c:	2000      	movs	r0, #0
 800319e:	f000 ff85 	bl	80040ac <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 80031a2:	4b8a      	ldr	r3, [pc, #552]	; (80033cc <defThread+0x7cc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d019      	beq.n	80031de <defThread+0x5de>
				if (qs != qStat) {
 80031aa:	4b88      	ldr	r3, [pc, #544]	; (80033cc <defThread+0x7cc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d013      	beq.n	80031de <defThread+0x5de>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 80031b6:	4b86      	ldr	r3, [pc, #536]	; (80033d0 <defThread+0x7d0>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <defThread+0x5d6>
 80031be:	4b83      	ldr	r3, [pc, #524]	; (80033cc <defThread+0x7cc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe fe72 	bl	8001eac <get_qStat>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b82      	ldr	r3, [pc, #520]	; (80033d4 <defThread+0x7d4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4982      	ldr	r1, [pc, #520]	; (80033d8 <defThread+0x7d8>)
 80031d0:	2001      	movs	r0, #1
 80031d2:	f7ff f91b 	bl	800240c <Report>
					qs = qStat;
 80031d6:	4b7d      	ldr	r3, [pc, #500]	; (80033cc <defThread+0x7cc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
				}
			}

			if (devError) led = true; else led = false;
 80031de:	4b79      	ldr	r3, [pc, #484]	; (80033c4 <defThread+0x7c4>)
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <defThread+0x5ee>
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 345b 	strb.w	r3, [r7, #1115]	; 0x45b
 80031ec:	e002      	b.n	80031f4 <defThread+0x5f4>
 80031ee:	2300      	movs	r3, #0
 80031f0:	f887 345b 	strb.w	r3, [r7, #1115]	; 0x45b
			errLedOn(led);
 80031f4:	f897 345b 	ldrb.w	r3, [r7, #1115]	; 0x45b
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe ff99 	bl	8002130 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 80031fe:	4b77      	ldr	r3, [pc, #476]	; (80033dc <defThread+0x7dc>)
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	f107 020b 	add.w	r2, r7, #11
 8003206:	f107 010c 	add.w	r1, r7, #12
 800320a:	2305      	movs	r3, #5
 800320c:	f00b fb0e 	bl	800e82c <osMessageQueueGet>
 8003210:	4603      	mov	r3, r0
 8003212:	4a6e      	ldr	r2, [pc, #440]	; (80033cc <defThread+0x7cc>)
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b6d      	ldr	r3, [pc, #436]	; (80033cc <defThread+0x7cc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d028      	beq.n	8003270 <defThread+0x670>
			if (qs != qStat) qs = qStat;
 800321e:	4b6b      	ldr	r3, [pc, #428]	; (80033cc <defThread+0x7cc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8003226:	429a      	cmp	r2, r3
 8003228:	d003      	beq.n	8003232 <defThread+0x632>
 800322a:	4b68      	ldr	r3, [pc, #416]	; (80033cc <defThread+0x7cc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
			if (qStat != osErrorTimeout) {
 8003232:	4b66      	ldr	r3, [pc, #408]	; (80033cc <defThread+0x7cc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f113 0f02 	cmn.w	r3, #2
 800323a:	f000 82fb 	beq.w	8003834 <defThread+0xc34>
				devError |= devQUE;
 800323e:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <defThread+0x7c4>)
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003246:	b29a      	uxth	r2, r3
 8003248:	4b5e      	ldr	r3, [pc, #376]	; (80033c4 <defThread+0x7c4>)
 800324a:	801a      	strh	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 800324c:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <defThread+0x7d0>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 82ef 	beq.w	8003834 <defThread+0xc34>
 8003256:	4b5d      	ldr	r3, [pc, #372]	; (80033cc <defThread+0x7cc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe fe26 	bl	8001eac <get_qStat>
 8003260:	4602      	mov	r2, r0
 8003262:	4b5c      	ldr	r3, [pc, #368]	; (80033d4 <defThread+0x7d4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	495c      	ldr	r1, [pc, #368]	; (80033d8 <defThread+0x7d8>)
 8003268:	2001      	movs	r0, #1
 800326a:	f7ff f8cf 	bl	800240c <Report>
 800326e:	e2e1      	b.n	8003834 <defThread+0xc34>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 8003270:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003274:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	4b58      	ldr	r3, [pc, #352]	; (80033e0 <defThread+0x7e0>)
 800327e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003282:	f107 0310 	add.w	r3, r7, #16
 8003286:	4957      	ldr	r1, [pc, #348]	; (80033e4 <defThread+0x7e4>)
 8003288:	4618      	mov	r0, r3
 800328a:	f00e fff5 	bl	8012278 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 800328e:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <defThread+0x7c0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	785b      	ldrb	r3, [r3, #1]
 8003294:	b29b      	uxth	r3, r3
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	b29b      	uxth	r3, r3
 800329a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800329e:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 80032a0:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <defThread+0x7c0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	23f0      	movs	r3, #240	; 0xf0
 80032aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 ff4e 	bl	8004158 <mkLineCenter>
 80032bc:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 80032be:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <defThread+0x7c0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	9202      	str	r2, [sp, #8]
 80032c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80032ca:	9201      	str	r2, [sp, #4]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	9200      	str	r2, [sp, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	460a      	mov	r2, r1
 80032d4:	4621      	mov	r1, r4
 80032d6:	2000      	movs	r0, #0
 80032d8:	f000 fee8 	bl	80040ac <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			if (dbg > logOn)
 80032dc:	4b3c      	ldr	r3, [pc, #240]	; (80033d0 <defThread+0x7d0>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d91e      	bls.n	8003322 <defThread+0x722>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 80032e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80032e8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	4619      	mov	r1, r3
 80032f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80032f4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80032f8:	785b      	ldrb	r3, [r3, #1]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003300:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <defThread+0x7e0>)
 800330a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800330e:	4a31      	ldr	r2, [pc, #196]	; (80033d4 <defThread+0x7d4>)
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	9201      	str	r2, [sp, #4]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	4603      	mov	r3, r0
 8003318:	460a      	mov	r2, r1
 800331a:	4933      	ldr	r1, [pc, #204]	; (80033e8 <defThread+0x7e8>)
 800331c:	2001      	movs	r0, #1
 800331e:	f7ff f875 	bl	800240c <Report>
			//
			nand_show = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
			switch (qcmd.cmd) {
 8003328:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800332c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b0a      	cmp	r3, #10
 8003334:	f200 826c 	bhi.w	8003810 <defThread+0xc10>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <defThread+0x740>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	0800341b 	.word	0x0800341b
 8003344:	080034db 	.word	0x080034db
 8003348:	08003585 	.word	0x08003585
 800334c:	08003585 	.word	0x08003585
 8003350:	08003735 	.word	0x08003735
 8003354:	080035d3 	.word	0x080035d3
 8003358:	08003665 	.word	0x08003665
 800335c:	08003515 	.word	0x08003515
 8003360:	08003423 	.word	0x08003423
 8003364:	08003401 	.word	0x08003401
 8003368:	0800336d 	.word	0x0800336d
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 800336c:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <defThread+0x7d4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	491e      	ldr	r1, [pc, #120]	; (80033ec <defThread+0x7ec>)
 8003374:	481e      	ldr	r0, [pc, #120]	; (80033f0 <defThread+0x7f0>)
 8003376:	f00e ff7f 	bl	8012278 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 800337a:	2300      	movs	r3, #0
 800337c:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 8003380:	e014      	b.n	80033ac <defThread+0x7ac>
 8003382:	481b      	ldr	r0, [pc, #108]	; (80033f0 <defThread+0x7f0>)
 8003384:	f7fc ff24 	bl	80001d0 <strlen>
 8003388:	4603      	mov	r3, r0
 800338a:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <defThread+0x7f0>)
 800338c:	1898      	adds	r0, r3, r2
 800338e:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 8003392:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <defThread+0x7f4>)
 8003394:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003398:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <defThread+0x7d4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4916      	ldr	r1, [pc, #88]	; (80033f8 <defThread+0x7f8>)
 800339e:	f00e ff6b 	bl	8012278 <siprintf>
 80033a2:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 80033a6:	3301      	adds	r3, #1
 80033a8:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 80033ac:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 80033b0:	2b0a      	cmp	r3, #10
 80033b2:	d9e6      	bls.n	8003382 <defThread+0x782>
					Report(1, "%s", stx);
 80033b4:	4a0e      	ldr	r2, [pc, #56]	; (80033f0 <defThread+0x7f0>)
 80033b6:	4911      	ldr	r1, [pc, #68]	; (80033fc <defThread+0x7fc>)
 80033b8:	2001      	movs	r0, #1
 80033ba:	f7ff f827 	bl	800240c <Report>
				break;
 80033be:	e227      	b.n	8003810 <defThread+0xc10>
 80033c0:	20000078 	.word	0x20000078
 80033c4:	2000034c 	.word	0x2000034c
 80033c8:	080133c4 	.word	0x080133c4
 80033cc:	200023a8 	.word	0x200023a8
 80033d0:	20000062 	.word	0x20000062
 80033d4:	20000004 	.word	0x20000004
 80033d8:	080133d4 	.word	0x080133d4
 80033dc:	20000344 	.word	0x20000344
 80033e0:	20000034 	.word	0x20000034
 80033e4:	080133e0 	.word	0x080133e0
 80033e8:	080133e8 	.word	0x080133e8
 80033ec:	08013400 	.word	0x08013400
 80033f0:	200023ac 	.word	0x200023ac
 80033f4:	20000008 	.word	0x20000008
 80033f8:	0801341c 	.word	0x0801341c
 80033fc:	08013194 	.word	0x08013194
				case cmdMem:
					Report(1, "FreeRTOS memory: free=%lu heap=%lu bytes%s", xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003400:	f00d ff80 	bl	8011304 <xPortGetFreeHeapSize>
 8003404:	4602      	mov	r2, r0
 8003406:	4ba9      	ldr	r3, [pc, #676]	; (80036ac <defThread+0xaac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003410:	49a7      	ldr	r1, [pc, #668]	; (80036b0 <defThread+0xab0>)
 8003412:	2001      	movs	r0, #1
 8003414:	f7fe fffa 	bl	800240c <Report>
				break;
 8003418:	e1fa      	b.n	8003810 <defThread+0xc10>
				case cmdRestart:
					loop = false;
 800341a:	2300      	movs	r3, #0
 800341c:	f887 345c 	strb.w	r3, [r7, #1116]	; 0x45c
		  		break;
 8003420:	e1f6      	b.n	8003810 <defThread+0xc10>
				case cmdInfo:
					if (dbg != logOff) {
 8003422:	4ba4      	ldr	r3, [pc, #656]	; (80036b4 <defThread+0xab4>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 81e7 	beq.w	80037fa <defThread+0xbfa>
						strcpy(stx, "NAND:");
 800342c:	4ba2      	ldr	r3, [pc, #648]	; (80036b8 <defThread+0xab8>)
 800342e:	4aa3      	ldr	r2, [pc, #652]	; (80036bc <defThread+0xabc>)
 8003430:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003434:	6018      	str	r0, [r3, #0]
 8003436:	3304      	adds	r3, #4
 8003438:	8019      	strh	r1, [r3, #0]
						for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 800343a:	2300      	movs	r3, #0
 800343c:	f887 344e 	strb.w	r3, [r7, #1102]	; 0x44e
 8003440:	e016      	b.n	8003470 <defThread+0x870>
 8003442:	489d      	ldr	r0, [pc, #628]	; (80036b8 <defThread+0xab8>)
 8003444:	f7fc fec4 	bl	80001d0 <strlen>
 8003448:	4603      	mov	r3, r0
 800344a:	4a9b      	ldr	r2, [pc, #620]	; (80036b8 <defThread+0xab8>)
 800344c:	1898      	adds	r0, r3, r2
 800344e:	f997 344e 	ldrsb.w	r3, [r7, #1102]	; 0x44e
 8003452:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8003456:	4413      	add	r3, r2
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	4998      	ldr	r1, [pc, #608]	; (80036c0 <defThread+0xac0>)
 800345e:	f00e ff0b 	bl	8012278 <siprintf>
 8003462:	f997 344e 	ldrsb.w	r3, [r7, #1102]	; 0x44e
 8003466:	b2db      	uxtb	r3, r3
 8003468:	3301      	adds	r3, #1
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f887 344e 	strb.w	r3, [r7, #1102]	; 0x44e
 8003470:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 8003474:	2b04      	cmp	r3, #4
 8003476:	d9e4      	bls.n	8003442 <defThread+0x842>
						sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8003478:	488f      	ldr	r0, [pc, #572]	; (80036b8 <defThread+0xab8>)
 800347a:	f7fc fea9 	bl	80001d0 <strlen>
 800347e:	4603      	mov	r3, r0
 8003480:	4a8d      	ldr	r2, [pc, #564]	; (80036b8 <defThread+0xab8>)
 8003482:	1898      	adds	r0, r3, r2
 8003484:	4b8f      	ldr	r3, [pc, #572]	; (80036c4 <defThread+0xac4>)
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	461a      	mov	r2, r3
 800348a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800348e:	498e      	ldr	r1, [pc, #568]	; (80036c8 <defThread+0xac8>)
 8003490:	f00e fef2 	bl	8012278 <siprintf>
						sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB",
 8003494:	4888      	ldr	r0, [pc, #544]	; (80036b8 <defThread+0xab8>)
 8003496:	f7fc fe9b 	bl	80001d0 <strlen>
 800349a:	4603      	mov	r3, r0
 800349c:	4a86      	ldr	r2, [pc, #536]	; (80036b8 <defThread+0xab8>)
 800349e:	1898      	adds	r0, r3, r2
 80034a0:	4b8a      	ldr	r3, [pc, #552]	; (80036cc <defThread+0xacc>)
 80034a2:	681c      	ldr	r4, [r3, #0]
 80034a4:	4b89      	ldr	r3, [pc, #548]	; (80036cc <defThread+0xacc>)
 80034a6:	685d      	ldr	r5, [r3, #4]
 80034a8:	4b88      	ldr	r3, [pc, #544]	; (80036cc <defThread+0xacc>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a87      	ldr	r2, [pc, #540]	; (80036cc <defThread+0xacc>)
 80034ae:	6912      	ldr	r2, [r2, #16]
 80034b0:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 80034b4:	9103      	str	r1, [sp, #12]
 80034b6:	9202      	str	r2, [sp, #8]
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	462b      	mov	r3, r5
 80034c2:	4622      	mov	r2, r4
 80034c4:	4982      	ldr	r1, [pc, #520]	; (80036d0 <defThread+0xad0>)
 80034c6:	f00e fed7 	bl	8012278 <siprintf>
											chipConf.SpareAreaSize,
											BlockSizeKB,
											chipConf.BlockNbr,
											chipConf.PlaneNbr,
											PlaneSizeMB);
						Report(1, "%s%s", stx, eol);
 80034ca:	4b78      	ldr	r3, [pc, #480]	; (80036ac <defThread+0xaac>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a7a      	ldr	r2, [pc, #488]	; (80036b8 <defThread+0xab8>)
 80034d0:	4980      	ldr	r1, [pc, #512]	; (80036d4 <defThread+0xad4>)
 80034d2:	2001      	movs	r0, #1
 80034d4:	f7fe ff9a 	bl	800240c <Report>
					}
				break;
 80034d8:	e18f      	b.n	80037fa <defThread+0xbfa>
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 80034da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80034de:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80034e2:	785b      	ldrb	r3, [r3, #1]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <defThread+0x8f4>
						set_Date(epoch);
 80034e8:	4b7b      	ldr	r3, [pc, #492]	; (80036d8 <defThread+0xad8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe fe93 	bl	8002218 <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 80034f2:	e184      	b.n	80037fe <defThread+0xbfe>
						sec2str(stx);
 80034f4:	4870      	ldr	r0, [pc, #448]	; (80036b8 <defThread+0xab8>)
 80034f6:	f7fe feef 	bl	80022d8 <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 80034fa:	4b6e      	ldr	r3, [pc, #440]	; (80036b4 <defThread+0xab4>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 817d 	beq.w	80037fe <defThread+0xbfe>
 8003504:	4b69      	ldr	r3, [pc, #420]	; (80036ac <defThread+0xaac>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a6b      	ldr	r2, [pc, #428]	; (80036b8 <defThread+0xab8>)
 800350a:	4974      	ldr	r1, [pc, #464]	; (80036dc <defThread+0xadc>)
 800350c:	2000      	movs	r0, #0
 800350e:	f7fe ff7d 	bl	800240c <Report>
				break;
 8003512:	e174      	b.n	80037fe <defThread+0xbfe>
				case cmdLog:
					if (qcmd.attr < logNone) {
 8003514:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003518:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800351c:	785b      	ldrb	r3, [r3, #1]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d81e      	bhi.n	8003560 <defThread+0x960>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 8003522:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003526:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800352a:	785b      	ldrb	r3, [r3, #1]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe fd0d 	bl	8001f4c <get_logName>
 8003532:	4602      	mov	r2, r0
 8003534:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003538:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800353c:	785b      	ldrb	r3, [r3, #1]
 800353e:	4619      	mov	r1, r3
 8003540:	4b5a      	ldr	r3, [pc, #360]	; (80036ac <defThread+0xaac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	460b      	mov	r3, r1
 8003548:	4965      	ldr	r1, [pc, #404]	; (80036e0 <defThread+0xae0>)
 800354a:	2001      	movs	r0, #1
 800354c:	f7fe ff5e 	bl	800240c <Report>
						dbg = qcmd.attr;
 8003550:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003554:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003558:	785a      	ldrb	r2, [r3, #1]
 800355a:	4b56      	ldr	r3, [pc, #344]	; (80036b4 <defThread+0xab4>)
 800355c:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 800355e:	e157      	b.n	8003810 <defThread+0xc10>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 8003560:	4b54      	ldr	r3, [pc, #336]	; (80036b4 <defThread+0xab4>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fcf1 	bl	8001f4c <get_logName>
 800356a:	4602      	mov	r2, r0
 800356c:	4b51      	ldr	r3, [pc, #324]	; (80036b4 <defThread+0xab4>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	4619      	mov	r1, r3
 8003572:	4b4e      	ldr	r3, [pc, #312]	; (80036ac <defThread+0xaac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	460b      	mov	r3, r1
 800357a:	495a      	ldr	r1, [pc, #360]	; (80036e4 <defThread+0xae4>)
 800357c:	2001      	movs	r0, #1
 800357e:	f7fe ff45 	bl	800240c <Report>
				break;
 8003582:	e145      	b.n	8003810 <defThread+0xc10>
				case cmdRead:
				case cmdNext:
					io_nand_read(nandAdr - devAdr, rdBuf, nandLen, 0);
 8003584:	4b58      	ldr	r3, [pc, #352]	; (80036e8 <defThread+0xae8>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b58      	ldr	r3, [pc, #352]	; (80036ec <defThread+0xaec>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	1ad0      	subs	r0, r2, r3
 800358e:	4b58      	ldr	r3, [pc, #352]	; (80036f0 <defThread+0xaf0>)
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	2300      	movs	r3, #0
 8003596:	4957      	ldr	r1, [pc, #348]	; (80036f4 <defThread+0xaf4>)
 8003598:	f7fe fc2c 	bl	8001df4 <io_nand_read>
					if (!(devError & devNAND)) {
 800359c:	4b56      	ldr	r3, [pc, #344]	; (80036f8 <defThread+0xaf8>)
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f040 812c 	bne.w	8003802 <defThread+0xc02>
						nand_show = 1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
						if (qcmd.cmd == cmdRead) readed = true;
 80035b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80035b4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d103      	bne.n	80035c6 <defThread+0x9c6>
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3462 	strb.w	r3, [r7, #1122]	; 0x462
											else nand_show++;
					}
				break;
 80035c4:	e11d      	b.n	8003802 <defThread+0xc02>
											else nand_show++;
 80035c6:	f897 3463 	ldrb.w	r3, [r7, #1123]	; 0x463
 80035ca:	3301      	adds	r3, #1
 80035cc:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
				break;
 80035d0:	e117      	b.n	8003802 <defThread+0xc02>
				/*case cmdNext:
					if (dbg != logOff) Report(1, "Read next nand adr:0x%X len:%lu%s", nandAdr, nandLen, eol);
					if (rdBuf) nand_show = 2;
				break;*/
				case cmdErase:
					if (!qcmd.attr) {
 80035d2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80035d6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d12e      	bne.n	800363e <defThread+0xa3e>
						uint32_t bk = nandBlk * chipConf.PageSize;
 80035e0:	4b3a      	ldr	r3, [pc, #232]	; (80036cc <defThread+0xacc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a45      	ldr	r2, [pc, #276]	; (80036fc <defThread+0xafc>)
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	fb02 f303 	mul.w	r3, r2, r3
 80035ec:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
						io_nand_block_erase(bk);
 80035f0:	f8d7 0438 	ldr.w	r0, [r7, #1080]	; 0x438
 80035f4:	f7fe fc3a 	bl	8001e6c <io_nand_block_erase>
						if (dbg != logOff) {
 80035f8:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <defThread+0xab4>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8102 	beq.w	8003806 <defThread+0xc06>
							if (devError & devNAND) {
 8003602:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <defThread+0xaf8>)
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <defThread+0xa26>
								Report(1, "Erase nand block:%lu addr:%u Error !%s", nandBlk, bk, eol);
 800360e:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <defThread+0xafc>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b26      	ldr	r3, [pc, #152]	; (80036ac <defThread+0xaac>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800361c:	4938      	ldr	r1, [pc, #224]	; (8003700 <defThread+0xb00>)
 800361e:	2001      	movs	r0, #1
 8003620:	f7fe fef4 	bl	800240c <Report>
						iBlk = 0;
						next_block_erase = 1;
						if (dbg != logOff) Report(1, "Erase chip ");
						stik = HAL_GetTick();
					}
				break;
 8003624:	e0ef      	b.n	8003806 <defThread+0xc06>
								Report(1, "Erase nand block:%lu addr:%u Ok !%s", nandBlk, bk, eol);
 8003626:	4b35      	ldr	r3, [pc, #212]	; (80036fc <defThread+0xafc>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b20      	ldr	r3, [pc, #128]	; (80036ac <defThread+0xaac>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8003634:	4933      	ldr	r1, [pc, #204]	; (8003704 <defThread+0xb04>)
 8003636:	2001      	movs	r0, #1
 8003638:	f7fe fee8 	bl	800240c <Report>
				break;
 800363c:	e0e3      	b.n	8003806 <defThread+0xc06>
						iBlk = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
						next_block_erase = 1;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
						if (dbg != logOff) Report(1, "Erase chip ");
 800364a:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <defThread+0xab4>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <defThread+0xa5a>
 8003652:	492d      	ldr	r1, [pc, #180]	; (8003708 <defThread+0xb08>)
 8003654:	2001      	movs	r0, #1
 8003656:	f7fe fed9 	bl	800240c <Report>
						stik = HAL_GetTick();
 800365a:	f006 f9ff 	bl	8009a5c <HAL_GetTick>
 800365e:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
				break;
 8003662:	e0d0      	b.n	8003806 <defThread+0xc06>
				case cmdCheck:
				{
					uint32_t adr = nandPage * chipConf.PageSize;//nand_PageToBlock(nandPage);
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <defThread+0xacc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a28      	ldr	r2, [pc, #160]	; (800370c <defThread+0xb0c>)
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
					if (!pageIsEmpty(adr)) {
 8003674:	f8d7 043c 	ldr.w	r0, [r7, #1084]	; 0x43c
 8003678:	f7fd ff34 	bl	80014e4 <pageIsEmpty>
 800367c:	4603      	mov	r3, r0
 800367e:	f083 0301 	eor.w	r3, r3, #1
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d045      	beq.n	8003714 <defThread+0xb14>
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu Not empty%s", nandPage, adr, eol);
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <defThread+0xab4>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80bc 	beq.w	800380a <defThread+0xc0a>
 8003692:	4b1e      	ldr	r3, [pc, #120]	; (800370c <defThread+0xb0c>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <defThread+0xaac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80036a0:	491b      	ldr	r1, [pc, #108]	; (8003710 <defThread+0xb10>)
 80036a2:	2001      	movs	r0, #1
 80036a4:	f7fe feb2 	bl	800240c <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu is Empty%s", nandPage, adr, eol);
					}
				}
				break;
 80036a8:	e0af      	b.n	800380a <defThread+0xc0a>
 80036aa:	bf00      	nop
 80036ac:	20000004 	.word	0x20000004
 80036b0:	08013424 	.word	0x08013424
 80036b4:	20000062 	.word	0x20000062
 80036b8:	200023ac 	.word	0x200023ac
 80036bc:	08013200 	.word	0x08013200
 80036c0:	0801318c 	.word	0x0801318c
 80036c4:	20001388 	.word	0x20001388
 80036c8:	08013208 	.word	0x08013208
 80036cc:	20001390 	.word	0x20001390
 80036d0:	08013220 	.word	0x08013220
 80036d4:	080132a4 	.word	0x080132a4
 80036d8:	20000064 	.word	0x20000064
 80036dc:	08013450 	.word	0x08013450
 80036e0:	0801346c 	.word	0x0801346c
 80036e4:	08013488 	.word	0x08013488
 80036e8:	20001374 	.word	0x20001374
 80036ec:	20001370 	.word	0x20001370
 80036f0:	20001378 	.word	0x20001378
 80036f4:	200013a8 	.word	0x200013a8
 80036f8:	2000034c 	.word	0x2000034c
 80036fc:	2000137c 	.word	0x2000137c
 8003700:	080134a8 	.word	0x080134a8
 8003704:	080134d0 	.word	0x080134d0
 8003708:	080134f4 	.word	0x080134f4
 800370c:	20001380 	.word	0x20001380
 8003710:	08013500 	.word	0x08013500
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu is Empty%s", nandPage, adr, eol);
 8003714:	4b8c      	ldr	r3, [pc, #560]	; (8003948 <defThread+0xd48>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d076      	beq.n	800380a <defThread+0xc0a>
 800371c:	4b8b      	ldr	r3, [pc, #556]	; (800394c <defThread+0xd4c>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b8b      	ldr	r3, [pc, #556]	; (8003950 <defThread+0xd50>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800372a:	498a      	ldr	r1, [pc, #552]	; (8003954 <defThread+0xd54>)
 800372c:	2001      	movs	r0, #1
 800372e:	f7fe fe6d 	bl	800240c <Report>
				break;
 8003732:	e06a      	b.n	800380a <defThread+0xc0a>
				case cmdWrite:
				{
					uint32_t wadr = nandAdr - devAdr;
 8003734:	4b88      	ldr	r3, [pc, #544]	; (8003958 <defThread+0xd58>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4b88      	ldr	r3, [pc, #544]	; (800395c <defThread+0xd5c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
					if (!pageIsEmpty(wadr)) {
 8003742:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 8003746:	f7fd fecd 	bl	80014e4 <pageIsEmpty>
 800374a:	4603      	mov	r3, r0
 800374c:	f083 0301 	eor.w	r3, r3, #1
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <defThread+0xb6c>
						io_nand_block_erase(wadr);
 8003756:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 800375a:	f7fe fb87 	bl	8001e6c <io_nand_block_erase>
						sprintf(stx, "Erase nand addr:%lu done", wadr);
 800375e:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8003762:	497f      	ldr	r1, [pc, #508]	; (8003960 <defThread+0xd60>)
 8003764:	487f      	ldr	r0, [pc, #508]	; (8003964 <defThread+0xd64>)
 8003766:	f00e fd87 	bl	8012278 <siprintf>
 800376a:	e005      	b.n	8003778 <defThread+0xb78>
					} else {
						sprintf(stx, "Addr:%lu is Empty", wadr);
 800376c:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8003770:	497d      	ldr	r1, [pc, #500]	; (8003968 <defThread+0xd68>)
 8003772:	487c      	ldr	r0, [pc, #496]	; (8003964 <defThread+0xd64>)
 8003774:	f00e fd80 	bl	8012278 <siprintf>
					}
					if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8003778:	4b73      	ldr	r3, [pc, #460]	; (8003948 <defThread+0xd48>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d006      	beq.n	800378e <defThread+0xb8e>
 8003780:	4b73      	ldr	r3, [pc, #460]	; (8003950 <defThread+0xd50>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a77      	ldr	r2, [pc, #476]	; (8003964 <defThread+0xd64>)
 8003786:	4979      	ldr	r1, [pc, #484]	; (800396c <defThread+0xd6c>)
 8003788:	2001      	movs	r0, #1
 800378a:	f7fe fe3f 	bl	800240c <Report>
					memset(wrBuf, EMPTY, chipConf.PageSize);
 800378e:	4b78      	ldr	r3, [pc, #480]	; (8003970 <defThread+0xd70>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	21ff      	movs	r1, #255	; 0xff
 8003796:	4877      	ldr	r0, [pc, #476]	; (8003974 <defThread+0xd74>)
 8003798:	f00e f906 	bl	80119a8 <memset>
					uint32_t ofs = 0;//(nandAdr - devAdr) % chipConf.PageSize;
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
					memset(wrBuf /* + ofs*/, nandByte, nandLen);
 80037a2:	4b75      	ldr	r3, [pc, #468]	; (8003978 <defThread+0xd78>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	4619      	mov	r1, r3
 80037a8:	4b74      	ldr	r3, [pc, #464]	; (800397c <defThread+0xd7c>)
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	4871      	ldr	r0, [pc, #452]	; (8003974 <defThread+0xd74>)
 80037b0:	f00e f8fa 	bl	80119a8 <memset>
					////showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
					//if (NAND_Write_Page_8b(nandPort, &addr, wrBuf, nandLen, ofs) != HAL_OK) devError |= devNAND;
					//if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%lu (page:%lu blk:%lu)%s",
					//	      	  	  	  	  	  nandAdr, nandByte, nandLen, ofs, addr.Page, addr.Block, eol);
					io_nand_write(wadr, wrBuf, nandLen, ofs);
 80037b4:	4b71      	ldr	r3, [pc, #452]	; (800397c <defThread+0xd7c>)
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80037be:	496d      	ldr	r1, [pc, #436]	; (8003974 <defThread+0xd74>)
 80037c0:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 80037c4:	f7fe fb34 	bl	8001e30 <io_nand_write>
					if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%lu%s",
 80037c8:	4b5f      	ldr	r3, [pc, #380]	; (8003948 <defThread+0xd48>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d01e      	beq.n	800380e <defThread+0xc0e>
 80037d0:	4b61      	ldr	r3, [pc, #388]	; (8003958 <defThread+0xd58>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b68      	ldr	r3, [pc, #416]	; (8003978 <defThread+0xd78>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	4b68      	ldr	r3, [pc, #416]	; (800397c <defThread+0xd7c>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	4619      	mov	r1, r3
 80037e0:	4b5b      	ldr	r3, [pc, #364]	; (8003950 <defThread+0xd50>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	9302      	str	r3, [sp, #8]
 80037e6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	9100      	str	r1, [sp, #0]
 80037ee:	4603      	mov	r3, r0
 80037f0:	4963      	ldr	r1, [pc, #396]	; (8003980 <defThread+0xd80>)
 80037f2:	2001      	movs	r0, #1
 80037f4:	f7fe fe0a 	bl	800240c <Report>
												 nandAdr, nandByte, nandLen, ofs, eol);
				}
				break;
 80037f8:	e009      	b.n	800380e <defThread+0xc0e>
				break;
 80037fa:	bf00      	nop
 80037fc:	e008      	b.n	8003810 <defThread+0xc10>
				break;
 80037fe:	bf00      	nop
 8003800:	e006      	b.n	8003810 <defThread+0xc10>
				break;
 8003802:	bf00      	nop
 8003804:	e004      	b.n	8003810 <defThread+0xc10>
				break;
 8003806:	bf00      	nop
 8003808:	e002      	b.n	8003810 <defThread+0xc10>
				break;
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <defThread+0xc10>
				break;
 800380e:	bf00      	nop
			}
			if (nand_show) {
 8003810:	f897 3463 	ldrb.w	r3, [r7, #1123]	; 0x463
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <defThread+0xc34>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 8003818:	4b4f      	ldr	r3, [pc, #316]	; (8003958 <defThread+0xd58>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b57      	ldr	r3, [pc, #348]	; (800397c <defThread+0xd7c>)
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	461c      	mov	r4, r3
 8003822:	f897 1462 	ldrb.w	r1, [r7, #1122]	; 0x462
 8003826:	f897 0463 	ldrb.w	r0, [r7, #1123]	; 0x463
 800382a:	4b56      	ldr	r3, [pc, #344]	; (8003984 <defThread+0xd84>)
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	4623      	mov	r3, r4
 8003830:	f7ff f92c 	bl	8002a8c <showBuf>
			}
		}

		// Erase all pages
		if (next_block_erase) {
 8003834:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 8003838:	2b00      	cmp	r3, #0
 800383a:	d058      	beq.n	80038ee <defThread+0xcee>
			byte = dbg;
 800383c:	4b42      	ldr	r3, [pc, #264]	; (8003948 <defThread+0xd48>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	f887 344d 	strb.w	r3, [r7, #1101]	; 0x44d
			dbg = logOff;//disable print log !
 8003844:	4b40      	ldr	r3, [pc, #256]	; (8003948 <defThread+0xd48>)
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]
			io_nand_block_erase(iBlk);
 800384a:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 800384e:	f7fe fb0d 	bl	8001e6c <io_nand_block_erase>
			dbg = byte;//restore dbg value !
 8003852:	4a3d      	ldr	r2, [pc, #244]	; (8003948 <defThread+0xd48>)
 8003854:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 8003858:	7013      	strb	r3, [r2, #0]
			if (devError & devNAND) {
 800385a:	4b4b      	ldr	r3, [pc, #300]	; (8003988 <defThread+0xd88>)
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <defThread+0xc6e>
				next_block_erase = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 800386c:	e01c      	b.n	80038a8 <defThread+0xca8>
			} else {
				if (!(iBlk % (chipConf.PageSize * 1024))) Report(0, ".");
 800386e:	4b40      	ldr	r3, [pc, #256]	; (8003970 <defThread+0xd70>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	029a      	lsls	r2, r3, #10
 8003874:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8003878:	fbb3 f1f2 	udiv	r1, r3, r2
 800387c:	fb01 f202 	mul.w	r2, r1, r2
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <defThread+0xc8e>
 8003886:	4941      	ldr	r1, [pc, #260]	; (800398c <defThread+0xd8c>)
 8003888:	2000      	movs	r0, #0
 800388a:	f7fe fdbf 	bl	800240c <Report>
				if (iBlk >= (chipConf.PlaneSize * chipConf.PlaneNbr)) next_block_erase = 0;
 800388e:	4b38      	ldr	r3, [pc, #224]	; (8003970 <defThread+0xd70>)
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	4a37      	ldr	r2, [pc, #220]	; (8003970 <defThread+0xd70>)
 8003894:	6912      	ldr	r2, [r2, #16]
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 800389e:	429a      	cmp	r2, r3
 80038a0:	d302      	bcc.n	80038a8 <defThread+0xca8>
 80038a2:	2300      	movs	r3, #0
 80038a4:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			}
			iBlk += chipConf.PageSize;
 80038a8:	4b31      	ldr	r3, [pc, #196]	; (8003970 <defThread+0xd70>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 80038b0:	4413      	add	r3, r2
 80038b2:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
			if (!next_block_erase) {
 80038b6:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d117      	bne.n	80038ee <defThread+0xcee>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 80038be:	4b22      	ldr	r3, [pc, #136]	; (8003948 <defThread+0xd48>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d013      	beq.n	80038ee <defThread+0xcee>
 80038c6:	f006 f8c9 	bl	8009a5c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	4a2f      	ldr	r2, [pc, #188]	; (8003990 <defThread+0xd90>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	099a      	lsrs	r2, r3, #6
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <defThread+0xd50>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 80038e6:	492b      	ldr	r1, [pc, #172]	; (8003994 <defThread+0xd94>)
 80038e8:	2000      	movs	r0, #0
 80038ea:	f7fe fd8f 	bl	800240c <Report>
			}
		}
		//
		osDelay(5);
 80038ee:	2005      	movs	r0, #5
 80038f0:	f00a fe24 	bl	800e53c <osDelay>
	while (loop) {
 80038f4:	f897 345c 	ldrb.w	r3, [r7, #1116]	; 0x45c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f47f abe7 	bne.w	80030cc <defThread+0x4cc>

//	if (wrBuf) freeMem(wrBuf);//free(wrBuf);
//	if (rdBuf) freeMem(rdBuf);//free(rdBuf);

#ifdef SET_SMALL_FS
	if (mnt) fs_err = io_fs_unmount();
 80038fe:	f897 345d 	ldrb.w	r3, [r7, #1117]	; 0x45d
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <defThread+0xd10>
 8003906:	f001 f933 	bl	8004b70 <io_fs_unmount>
 800390a:	4603      	mov	r3, r0
 800390c:	4a22      	ldr	r2, [pc, #136]	; (8003998 <defThread+0xd98>)
 800390e:	6013      	str	r3, [r2, #0]
#endif

	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003910:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <defThread+0xd48>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d011      	beq.n	800393c <defThread+0xd3c>
 8003918:	4b20      	ldr	r3, [pc, #128]	; (800399c <defThread+0xd9c>)
 800391a:	681c      	ldr	r4, [r3, #0]
 800391c:	f00d fcf2 	bl	8011304 <xPortGetFreeHeapSize>
 8003920:	4602      	mov	r2, r0
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <defThread+0xd50>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	9302      	str	r3, [sp, #8]
 8003928:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	9200      	str	r2, [sp, #0]
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <defThread+0xda0>)
 8003932:	4622      	mov	r2, r4
 8003934:	491b      	ldr	r1, [pc, #108]	; (80039a4 <defThread+0xda4>)
 8003936:	2001      	movs	r0, #1
 8003938:	f7fe fd68 	bl	800240c <Report>
	osDelay(250);
 800393c:	20fa      	movs	r0, #250	; 0xfa
 800393e:	f00a fdfd 	bl	800e53c <osDelay>

	NVIC_SystemReset();
 8003942:	f7fd f989 	bl	8000c58 <__NVIC_SystemReset>
 8003946:	bf00      	nop
 8003948:	20000062 	.word	0x20000062
 800394c:	20001380 	.word	0x20001380
 8003950:	20000004 	.word	0x20000004
 8003954:	08013524 	.word	0x08013524
 8003958:	20001374 	.word	0x20001374
 800395c:	20001370 	.word	0x20001370
 8003960:	08013544 	.word	0x08013544
 8003964:	200023ac 	.word	0x200023ac
 8003968:	08013560 	.word	0x08013560
 800396c:	080132a4 	.word	0x080132a4
 8003970:	20001390 	.word	0x20001390
 8003974:	20001ba8 	.word	0x20001ba8
 8003978:	20000080 	.word	0x20000080
 800397c:	20001378 	.word	0x20001378
 8003980:	08013574 	.word	0x08013574
 8003984:	200013a8 	.word	0x200013a8
 8003988:	2000034c 	.word	0x2000034c
 800398c:	080135a8 	.word	0x080135a8
 8003990:	10624dd3 	.word	0x10624dd3
 8003994:	080135ac 	.word	0x080135ac
 8003998:	20002bac 	.word	0x20002bac
 800399c:	20000000 	.word	0x20000000
 80039a0:	080168cc 	.word	0x080168cc
 80039a4:	080135c4 	.word	0x080135c4

080039a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b5b0      	push	{r4, r5, r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d102      	bne.n	80039c0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80039ba:	f006 f83b 	bl	8009a34 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 80039be:	e016      	b.n	80039ee <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c8:	d111      	bne.n	80039ee <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 80039ca:	f7fe fbe7 	bl	800219c <get_msCounter>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	f002 0403 	and.w	r4, r2, #3
 80039d6:	2500      	movs	r5, #0
 80039d8:	1ee3      	subs	r3, r4, #3
 80039da:	432b      	orrs	r3, r5
 80039dc:	d105      	bne.n	80039ea <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 80039de:	f7fe fbcf 	bl	8002180 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 80039e2:	2180      	movs	r1, #128	; 0x80
 80039e4:	4805      	ldr	r0, [pc, #20]	; (80039fc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80039e6:	f006 ff02 	bl	800a7ee <HAL_GPIO_TogglePin>
	  inc_msCounter();
 80039ea:	f7fe fbe5 	bl	80021b8 <inc_msCounter>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bdb0      	pop	{r4, r5, r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40020800 	.word	0x40020800

08003a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	devError |= devSYS;
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <Error_Handler+0x1c>)
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <Error_Handler+0x1c>)
 8003a10:	801a      	strh	r2, [r3, #0]
	errLedOn(true);
 8003a12:	2001      	movs	r0, #1
 8003a14:	f7fe fb8c 	bl	8002130 <errLedOn>

  /* USER CODE END Error_Handler_Debug */
}
 8003a18:	bf00      	nop
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	2000034c 	.word	0x2000034c

08003a20 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2104      	movs	r1, #4
 8003a2e:	480c      	ldr	r0, [pc, #48]	; (8003a60 <ST7789_WriteCommand+0x40>)
 8003a30:	f006 fec4 	bl	800a7bc <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <ST7789_WriteCommand+0x44>)
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	2396      	movs	r3, #150	; 0x96
 8003a3a:	1df9      	adds	r1, r7, #7
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f008 f9dc 	bl	800bdfa <HAL_SPI_Transmit>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d006      	beq.n	8003a56 <ST7789_WriteCommand+0x36>
 8003a48:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <ST7789_WriteCommand+0x48>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	f043 0310 	orr.w	r3, r3, #16
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <ST7789_WriteCommand+0x48>)
 8003a54:	801a      	strh	r2, [r3, #0]
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40020000 	.word	0x40020000
 8003a64:	20000068 	.word	0x20000068
 8003a68:	2000034c 	.word	0x2000034c

08003a6c <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8003a76:	2200      	movs	r2, #0
 8003a78:	2104      	movs	r1, #4
 8003a7a:	480e      	ldr	r0, [pc, #56]	; (8003ab4 <ST7789_WriteCommands+0x48>)
 8003a7c:	f006 fe9e 	bl	800a7bc <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8003a80:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <ST7789_WriteCommands+0x4c>)
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	2196      	movs	r1, #150	; 0x96
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	f008 f9b1 	bl	800bdfa <HAL_SPI_Transmit>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d006      	beq.n	8003aac <ST7789_WriteCommands+0x40>
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <ST7789_WriteCommands+0x50>)
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	f043 0310 	orr.w	r3, r3, #16
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <ST7789_WriteCommands+0x50>)
 8003aaa:	801a      	strh	r2, [r3, #0]
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40020000 	.word	0x40020000
 8003ab8:	20000068 	.word	0x20000068
 8003abc:	2000034c 	.word	0x2000034c

08003ac0 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003ace:	2201      	movs	r2, #1
 8003ad0:	2104      	movs	r1, #4
 8003ad2:	481f      	ldr	r0, [pc, #124]	; (8003b50 <ST7789_WriteData+0x90>)
 8003ad4:	f006 fe72 	bl	800a7bc <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8003ad8:	e028      	b.n	8003b2c <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	bf28      	it	cs
 8003ae4:	4613      	movcs	r3, r2
 8003ae6:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <ST7789_WriteData+0x94>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8003aee:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <ST7789_WriteData+0x98>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	89ba      	ldrh	r2, [r7, #12]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f008 fabc 	bl	800c074 <HAL_SPI_Transmit_DMA>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461a      	mov	r2, r3
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003b06:	e002      	b.n	8003b0e <ST7789_WriteData+0x4e>
 8003b08:	2001      	movs	r0, #1
 8003b0a:	f005 ffb3 	bl	8009a74 <HAL_Delay>
 8003b0e:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <ST7789_WriteData+0x94>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	f083 0301 	eor.w	r3, r3, #1
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f5      	bne.n	8003b08 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8003b1c:	89bb      	ldrh	r3, [r7, #12]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	4413      	add	r3, r2
 8003b22:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8003b24:	89bb      	ldrh	r3, [r7, #12]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1d3      	bne.n	8003ada <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d006      	beq.n	8003b46 <ST7789_WriteData+0x86>
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <ST7789_WriteData+0x9c>)
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	f043 0310 	orr.w	r3, r3, #16
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <ST7789_WriteData+0x9c>)
 8003b44:	801a      	strh	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40020000 	.word	0x40020000
 8003b54:	20000061 	.word	0x20000061
 8003b58:	20000068 	.word	0x20000068
 8003b5c:	2000034c 	.word	0x2000034c

08003b60 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003b6e:	2201      	movs	r2, #1
 8003b70:	2104      	movs	r1, #4
 8003b72:	4814      	ldr	r0, [pc, #80]	; (8003bc4 <ST7789_WriteDataLine+0x64>)
 8003b74:	f006 fe22 	bl	800a7bc <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003b78:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <ST7789_WriteDataLine+0x68>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <ST7789_WriteDataLine+0x6c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	b292      	uxth	r2, r2
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f008 fa73 	bl	800c074 <HAL_SPI_Transmit_DMA>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003b92:	e002      	b.n	8003b9a <ST7789_WriteDataLine+0x3a>
 8003b94:	2001      	movs	r0, #1
 8003b96:	f005 ff6d 	bl	8009a74 <HAL_Delay>
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <ST7789_WriteDataLine+0x68>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	f083 0301 	eor.w	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f5      	bne.n	8003b94 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d006      	beq.n	8003bbc <ST7789_WriteDataLine+0x5c>
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <ST7789_WriteDataLine+0x70>)
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	f043 0310 	orr.w	r3, r3, #16
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <ST7789_WriteDataLine+0x70>)
 8003bba:	801a      	strh	r2, [r3, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40020000 	.word	0x40020000
 8003bc8:	20000061 	.word	0x20000061
 8003bcc:	20000068 	.word	0x20000068
 8003bd0:	2000034c 	.word	0x2000034c

08003bd4 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8003bde:	2201      	movs	r2, #1
 8003be0:	2104      	movs	r1, #4
 8003be2:	480c      	ldr	r0, [pc, #48]	; (8003c14 <ST7789_WriteSmallData+0x40>)
 8003be4:	f006 fdea 	bl	800a7bc <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <ST7789_WriteSmallData+0x44>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	2396      	movs	r3, #150	; 0x96
 8003bee:	1df9      	adds	r1, r7, #7
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f008 f902 	bl	800bdfa <HAL_SPI_Transmit>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d006      	beq.n	8003c0a <ST7789_WriteSmallData+0x36>
 8003bfc:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <ST7789_WriteSmallData+0x48>)
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	f043 0310 	orr.w	r3, r3, #16
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <ST7789_WriteSmallData+0x48>)
 8003c08:	801a      	strh	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40020000 	.word	0x40020000
 8003c18:	20000068 	.word	0x20000068
 8003c1c:	2000034c 	.word	0x2000034c

08003c20 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <ipsOn+0x18>
 8003c30:	2029      	movs	r0, #41	; 0x29
 8003c32:	f7ff fef5 	bl	8003a20 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8003c36:	e002      	b.n	8003c3e <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8003c38:	2028      	movs	r0, #40	; 0x28
 8003c3a:	f7ff fef1 	bl	8003a20 <ST7789_WriteCommand>
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8003c52:	2036      	movs	r0, #54	; 0x36
 8003c54:	f7ff fee4 	bl	8003a20 <ST7789_WriteCommand>
	switch (m) {
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d81a      	bhi.n	8003c94 <ST7789_SetRotation+0x4c>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <ST7789_SetRotation+0x1c>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c75 	.word	0x08003c75
 8003c68:	08003c7d 	.word	0x08003c7d
 8003c6c:	08003c85 	.word	0x08003c85
 8003c70:	08003c8d 	.word	0x08003c8d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8003c74:	20c0      	movs	r0, #192	; 0xc0
 8003c76:	f7ff ffad 	bl	8003bd4 <ST7789_WriteSmallData>
		break;
 8003c7a:	e00c      	b.n	8003c96 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003c7c:	20a0      	movs	r0, #160	; 0xa0
 8003c7e:	f7ff ffa9 	bl	8003bd4 <ST7789_WriteSmallData>
		break;
 8003c82:	e008      	b.n	8003c96 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8003c84:	2000      	movs	r0, #0
 8003c86:	f7ff ffa5 	bl	8003bd4 <ST7789_WriteSmallData>
		break;
 8003c8a:	e004      	b.n	8003c96 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003c8c:	2060      	movs	r0, #96	; 0x60
 8003c8e:	f7ff ffa1 	bl	8003bd4 <ST7789_WriteSmallData>
		break;
 8003c92:	e000      	b.n	8003c96 <ST7789_SetRotation+0x4e>
	default:
		break;
 8003c94:	bf00      	nop
	}
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop

08003ca0 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	4608      	mov	r0, r1
 8003caa:	4611      	mov	r1, r2
 8003cac:	461a      	mov	r2, r3
 8003cae:	4623      	mov	r3, r4
 8003cb0:	80fb      	strh	r3, [r7, #6]
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	80bb      	strh	r3, [r7, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	807b      	strh	r3, [r7, #2]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	82fb      	strh	r3, [r7, #22]
 8003cc2:	887b      	ldrh	r3, [r7, #2]
 8003cc4:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8003cc6:	88bb      	ldrh	r3, [r7, #4]
 8003cc8:	827b      	strh	r3, [r7, #18]
 8003cca:	883b      	ldrh	r3, [r7, #0]
 8003ccc:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8003cce:	202a      	movs	r0, #42	; 0x2a
 8003cd0:	f7ff fea6 	bl	8003a20 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8003cd4:	8afb      	ldrh	r3, [r7, #22]
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	733b      	strb	r3, [r7, #12]
 8003cde:	8afb      	ldrh	r3, [r7, #22]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	737b      	strb	r3, [r7, #13]
 8003ce4:	8abb      	ldrh	r3, [r7, #20]
 8003ce6:	0a1b      	lsrs	r3, r3, #8
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	73bb      	strb	r3, [r7, #14]
 8003cee:	8abb      	ldrh	r3, [r7, #20]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8003cf4:	f107 030c 	add.w	r3, r7, #12
 8003cf8:	2104      	movs	r1, #4
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fee0 	bl	8003ac0 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8003d00:	202b      	movs	r0, #43	; 0x2b
 8003d02:	f7ff fe8d 	bl	8003a20 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8003d06:	8a7b      	ldrh	r3, [r7, #18]
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	723b      	strb	r3, [r7, #8]
 8003d10:	8a7b      	ldrh	r3, [r7, #18]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	727b      	strb	r3, [r7, #9]
 8003d16:	8a3b      	ldrh	r3, [r7, #16]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	72bb      	strb	r3, [r7, #10]
 8003d20:	8a3b      	ldrh	r3, [r7, #16]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8003d26:	f107 0308 	add.w	r3, r7, #8
 8003d2a:	2104      	movs	r1, #4
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fec7 	bl	8003ac0 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8003d32:	202c      	movs	r0, #44	; 0x2c
 8003d34:	f7ff fe74 	bl	8003a20 <ST7789_WriteCommand>
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd90      	pop	{r4, r7, pc}

08003d40 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8003d44:	2014      	movs	r0, #20
 8003d46:	f005 fe95 	bl	8009a74 <HAL_Delay>
    ST7789_RST_Clr();
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	4808      	ldr	r0, [pc, #32]	; (8003d70 <ST7789_Reset+0x30>)
 8003d50:	f006 fd34 	bl	800a7bc <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8003d54:	200a      	movs	r0, #10
 8003d56:	f005 fe8d 	bl	8009a74 <HAL_Delay>
    ST7789_RST_Set();
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	4804      	ldr	r0, [pc, #16]	; (8003d70 <ST7789_Reset+0x30>)
 8003d60:	f006 fd2c 	bl	800a7bc <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8003d64:	2014      	movs	r0, #20
 8003d66:	f005 fe85 	bl	8009a74 <HAL_Delay>
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40020000 	.word	0x40020000

08003d74 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b08f      	sub	sp, #60	; 0x3c
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8003d7e:	203a      	movs	r0, #58	; 0x3a
 8003d80:	f7ff fe4e 	bl	8003a20 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8003d84:	2055      	movs	r0, #85	; 0x55
 8003d86:	f7ff ff25 	bl	8003bd4 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8003d8a:	20b2      	movs	r0, #178	; 0xb2
 8003d8c:	f7ff fe48 	bl	8003a20 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8003d90:	4a3a      	ldr	r2, [pc, #232]	; (8003e7c <ST7789_Init+0x108>)
 8003d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d9a:	6018      	str	r0, [r3, #0]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8003da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003da4:	2105      	movs	r1, #5
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fe8a 	bl	8003ac0 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8003dac:	2003      	movs	r0, #3
 8003dae:	f7ff ff4b 	bl	8003c48 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8003db2:	20b7      	movs	r0, #183	; 0xb7
 8003db4:	f7ff fe34 	bl	8003a20 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8003db8:	2035      	movs	r0, #53	; 0x35
 8003dba:	f7ff ff0b 	bl	8003bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8003dbe:	20bb      	movs	r0, #187	; 0xbb
 8003dc0:	f7ff fe2e 	bl	8003a20 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8003dc4:	2019      	movs	r0, #25
 8003dc6:	f7ff ff05 	bl	8003bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8003dca:	20c0      	movs	r0, #192	; 0xc0
 8003dcc:	f7ff fe28 	bl	8003a20 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8003dd0:	202c      	movs	r0, #44	; 0x2c
 8003dd2:	f7ff feff 	bl	8003bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8003dd6:	20c2      	movs	r0, #194	; 0xc2
 8003dd8:	f7ff fe22 	bl	8003a20 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8003ddc:	2001      	movs	r0, #1
 8003dde:	f7ff fef9 	bl	8003bd4 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8003de2:	20ff      	movs	r0, #255	; 0xff
 8003de4:	f7ff fef6 	bl	8003bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8003de8:	20c3      	movs	r0, #195	; 0xc3
 8003dea:	f7ff fe19 	bl	8003a20 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8003dee:	2012      	movs	r0, #18
 8003df0:	f7ff fef0 	bl	8003bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8003df4:	20c4      	movs	r0, #196	; 0xc4
 8003df6:	f7ff fe13 	bl	8003a20 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8003dfa:	2020      	movs	r0, #32
 8003dfc:	f7ff feea 	bl	8003bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8003e00:	20c6      	movs	r0, #198	; 0xc6
 8003e02:	f7ff fe0d 	bl	8003a20 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8003e06:	200f      	movs	r0, #15
 8003e08:	f7ff fee4 	bl	8003bd4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8003e0c:	20d0      	movs	r0, #208	; 0xd0
 8003e0e:	f7ff fe07 	bl	8003a20 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8003e12:	20a4      	movs	r0, #164	; 0xa4
 8003e14:	f7ff fede 	bl	8003bd4 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8003e18:	20a1      	movs	r0, #161	; 0xa1
 8003e1a:	f7ff fedb 	bl	8003bd4 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8003e1e:	20e0      	movs	r0, #224	; 0xe0
 8003e20:	f7ff fdfe 	bl	8003a20 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8003e24:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <ST7789_Init+0x10c>)
 8003e26:	f107 041c 	add.w	r4, r7, #28
 8003e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e2c:	c407      	stmia	r4!, {r0, r1, r2}
 8003e2e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003e30:	f107 031c 	add.w	r3, r7, #28
 8003e34:	210e      	movs	r1, #14
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fe42 	bl	8003ac0 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8003e3c:	20e1      	movs	r0, #225	; 0xe1
 8003e3e:	f7ff fdef 	bl	8003a20 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <ST7789_Init+0x110>)
 8003e44:	f107 040c 	add.w	r4, r7, #12
 8003e48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e4a:	c407      	stmia	r4!, {r0, r1, r2}
 8003e4c:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003e4e:	f107 030c 	add.w	r3, r7, #12
 8003e52:	210e      	movs	r1, #14
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fe33 	bl	8003ac0 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <ST7789_Init+0x114>)
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 8003e5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e62:	2104      	movs	r1, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fe01 	bl	8003a6c <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f80d 	bl	8003e8c <ST7789_Fill_Color>
}
 8003e72:	bf00      	nop
 8003e74:	373c      	adds	r7, #60	; 0x3c
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd90      	pop	{r4, r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	080135f0 	.word	0x080135f0
 8003e80:	080135f8 	.word	0x080135f8
 8003e84:	08013608 	.word	0x08013608
 8003e88:	28131121 	.word	0x28131121

08003e8c <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b0fc      	sub	sp, #496	; 0x1f0
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4602      	mov	r2, r0
 8003e94:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003e98:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003e9c:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8003e9e:	23ef      	movs	r3, #239	; 0xef
 8003ea0:	22ef      	movs	r2, #239	; 0xef
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7ff fefb 	bl	8003ca0 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003eb6:	e024      	b.n	8003f02 <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8003eb8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003ebc:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	b21a      	sxth	r2, r3
 8003ec8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003ecc:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	b21b      	sxth	r3, r3
 8003ed6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eda:	b21b      	sxth	r3, r3
 8003edc:	4313      	orrs	r3, r2
 8003ede:	b219      	sxth	r1, r3
 8003ee0:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8003ee4:	f107 020c 	add.w	r2, r7, #12
 8003ee8:	4413      	add	r3, r2
 8003eea:	b28a      	uxth	r2, r1
 8003eec:	801a      	strh	r2, [r3, #0]
		i += 2;
 8003eee:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8003ef2:	3302      	adds	r3, #2
 8003ef4:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8003ef8:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003efc:	3301      	adds	r3, #1
 8003efe:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003f02:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003f06:	2bef      	cmp	r3, #239	; 0xef
 8003f08:	d9d6      	bls.n	8003eb8 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003f10:	e00b      	b.n	8003f2a <ST7789_Fill_Color+0x9e>
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fe20 	bl	8003b60 <ST7789_WriteDataLine>
 8003f20:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003f24:	3301      	adds	r3, #1
 8003f26:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003f2a:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003f2e:	2bef      	cmp	r3, #239	; 0xef
 8003f30:	d9ef      	bls.n	8003f12 <ST7789_Fill_Color+0x86>

//#endif
}
 8003f32:	bf00      	nop
 8003f34:	bf00      	nop
 8003f36:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8003f3e:	b590      	push	{r4, r7, lr}
 8003f40:	b085      	sub	sp, #20
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	4604      	mov	r4, r0
 8003f46:	4608      	mov	r0, r1
 8003f48:	4611      	mov	r1, r2
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	80fb      	strh	r3, [r7, #6]
 8003f50:	4603      	mov	r3, r0
 8003f52:	80bb      	strh	r3, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8003f5c:	887b      	ldrh	r3, [r7, #2]
 8003f5e:	2bef      	cmp	r3, #239	; 0xef
 8003f60:	d82b      	bhi.n	8003fba <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8003f62:	883b      	ldrh	r3, [r7, #0]
 8003f64:	2bef      	cmp	r3, #239	; 0xef
 8003f66:	d828      	bhi.n	8003fba <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 8003f68:	8c3b      	ldrh	r3, [r7, #32]
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	723b      	strb	r3, [r7, #8]
 8003f72:	8c3b      	ldrh	r3, [r7, #32]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8003f78:	883b      	ldrh	r3, [r7, #0]
 8003f7a:	887a      	ldrh	r2, [r7, #2]
 8003f7c:	88b9      	ldrh	r1, [r7, #4]
 8003f7e:	88f8      	ldrh	r0, [r7, #6]
 8003f80:	f7ff fe8e 	bl	8003ca0 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8003f84:	88bb      	ldrh	r3, [r7, #4]
 8003f86:	81fb      	strh	r3, [r7, #14]
 8003f88:	e012      	b.n	8003fb0 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	81bb      	strh	r3, [r7, #12]
 8003f8e:	e008      	b.n	8003fa2 <ST7789_Fill+0x64>
 8003f90:	f107 0308 	add.w	r3, r7, #8
 8003f94:	2102      	movs	r1, #2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fd92 	bl	8003ac0 <ST7789_WriteData>
 8003f9c:	89bb      	ldrh	r3, [r7, #12]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	81bb      	strh	r3, [r7, #12]
 8003fa2:	89ba      	ldrh	r2, [r7, #12]
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d9f2      	bls.n	8003f90 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 8003faa:	89fb      	ldrh	r3, [r7, #14]
 8003fac:	3301      	adds	r3, #1
 8003fae:	81fb      	strh	r3, [r7, #14]
 8003fb0:	89fa      	ldrh	r2, [r7, #14]
 8003fb2:	883b      	ldrh	r3, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d9e8      	bls.n	8003f8a <ST7789_Fill+0x4c>
 8003fb8:	e000      	b.n	8003fbc <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8003fba:	bf00      	nop
	}
}
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd90      	pop	{r4, r7, pc}

08003fc2 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	b590      	push	{r4, r7, lr}
 8003fc6:	b089      	sub	sp, #36	; 0x24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	637b      	str	r3, [r7, #52]	; 0x34
 8003fcc:	4603      	mov	r3, r0
 8003fce:	80fb      	strh	r3, [r7, #6]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	80bb      	strh	r3, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8003fd8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29c      	uxth	r4, r3
 8003fe8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	88bb      	ldrh	r3, [r7, #4]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	88b9      	ldrh	r1, [r7, #4]
 8003ffa:	88f8      	ldrh	r0, [r7, #6]
 8003ffc:	4622      	mov	r2, r4
 8003ffe:	f7ff fe4f 	bl	8003ca0 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8004002:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	b29b      	uxth	r3, r3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	733b      	strb	r3, [r7, #12]
 800400c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800400e:	b2db      	uxtb	r3, r3
 8004010:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8004012:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	b29b      	uxth	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	723b      	strb	r3, [r7, #8]
 800401e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004022:	b2db      	uxtb	r3, r3
 8004024:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	e02f      	b.n	8004090 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8004030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	3b20      	subs	r3, #32
 8004036:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4619      	mov	r1, r3
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	440b      	add	r3, r1
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 800404c:	2300      	movs	r3, #0
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e015      	b.n	800407e <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <ST7789_WriteChar+0xa8>
				uk = cdata;
 8004062:	f107 030c 	add.w	r3, r7, #12
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	e002      	b.n	8004070 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 800406a:	f107 0308 	add.w	r3, r7, #8
 800406e:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 8004070:	2102      	movs	r1, #2
 8004072:	6978      	ldr	r0, [r7, #20]
 8004074:	f7ff fd24 	bl	8003ac0 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	3301      	adds	r3, #1
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004082:	461a      	mov	r2, r3
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	4293      	cmp	r3, r2
 8004088:	d3e3      	bcc.n	8004052 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3301      	adds	r3, #1
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004094:	461a      	mov	r2, r3
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4293      	cmp	r3, r2
 800409a:	d3c9      	bcc.n	8004030 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	3724      	adds	r7, #36	; 0x24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80040a8:	b002      	add	sp, #8
 80040aa:	4770      	bx	lr

080040ac <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80040ac:	b082      	sub	sp, #8
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b086      	sub	sp, #24
 80040b2:	af04      	add	r7, sp, #16
 80040b4:	603a      	str	r2, [r7, #0]
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	4603      	mov	r3, r0
 80040ba:	80fb      	strh	r3, [r7, #6]
 80040bc:	460b      	mov	r3, r1
 80040be:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d03f      	beq.n	8004146 <ST7789_WriteString+0x9a>

	while (*str) {
 80040c6:	e039      	b.n	800413c <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	7d3a      	ldrb	r2, [r7, #20]
 80040cc:	4413      	add	r3, r2
 80040ce:	2bef      	cmp	r3, #239	; 0xef
 80040d0:	dd13      	ble.n	80040fa <ST7789_WriteString+0x4e>
			x = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80040d6:	7d7b      	ldrb	r3, [r7, #21]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	88bb      	ldrh	r3, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 80040e0:	88bb      	ldrh	r3, [r7, #4]
 80040e2:	7d7a      	ldrb	r2, [r7, #21]
 80040e4:	4413      	add	r3, r2
 80040e6:	2bef      	cmp	r3, #239	; 0xef
 80040e8:	dc2f      	bgt.n	800414a <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d103      	bne.n	80040fa <ST7789_WriteString+0x4e>
				str++;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	603b      	str	r3, [r7, #0]
				continue;
 80040f8:	e020      	b.n	800413c <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b0a      	cmp	r3, #10
 8004100:	d012      	beq.n	8004128 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	88b9      	ldrh	r1, [r7, #4]
 8004108:	88f8      	ldrh	r0, [r7, #6]
 800410a:	8c3b      	ldrh	r3, [r7, #32]
 800410c:	9302      	str	r3, [sp, #8]
 800410e:	8bbb      	ldrh	r3, [r7, #28]
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f7ff ff53 	bl	8003fc2 <ST7789_WriteChar>
			x += font.width;
 800411c:	7d3b      	ldrb	r3, [r7, #20]
 800411e:	b29a      	uxth	r2, r3
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	4413      	add	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
 8004126:	e006      	b.n	8004136 <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800412c:	7d7b      	ldrb	r3, [r7, #21]
 800412e:	b29a      	uxth	r2, r3
 8004130:	88bb      	ldrh	r3, [r7, #4]
 8004132:	4413      	add	r3, r2
 8004134:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	3301      	adds	r3, #1
 800413a:	603b      	str	r3, [r7, #0]
	while (*str) {
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1c1      	bne.n	80040c8 <ST7789_WriteString+0x1c>
 8004144:	e002      	b.n	800414c <ST7789_WriteString+0xa0>
	if (!str) return;
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 800414a:	bf00      	nop
	}
}
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004154:	b002      	add	sp, #8
 8004156:	4770      	bx	lr

08004158 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b0a4      	sub	sp, #144	; 0x90
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	f107 0310 	add.w	r3, r7, #16
 800416c:	227c      	movs	r2, #124	; 0x7c
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f00d fc19 	bl	80119a8 <memset>

	memset(st, 0x20, 127);
 8004176:	f107 030c 	add.w	r3, r7, #12
 800417a:	227f      	movs	r2, #127	; 0x7f
 800417c:	2120      	movs	r1, #32
 800417e:	4618      	mov	r0, r3
 8004180:	f00d fc12 	bl	80119a8 <memset>
	int8_t k = strlen(str);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fc f823 	bl	80001d0 <strlen>
 800418a:	4603      	mov	r3, r0
 800418c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 8004190:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	429a      	cmp	r2, r3
 8004198:	da25      	bge.n	80041e6 <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	0fda      	lsrs	r2, r3, #31
 80041a4:	4413      	add	r3, r2
 80041a6:	105b      	asrs	r3, r3, #1
 80041a8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 80041ac:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 80041b0:	f107 020c 	add.w	r2, r7, #12
 80041b4:	4413      	add	r3, r2
 80041b6:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4618      	mov	r0, r3
 80041be:	f00d fbe5 	bl	801198c <memcpy>
		st[k + n*2 + 1] = '\0';
 80041c2:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80041c6:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	3301      	adds	r3, #1
 80041d0:	3390      	adds	r3, #144	; 0x90
 80041d2:	443b      	add	r3, r7
 80041d4:	2200      	movs	r2, #0
 80041d6:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 80041da:	f107 030c 	add.w	r3, r7, #12
 80041de:	4619      	mov	r1, r3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f00e f8c8 	bl	8012376 <strcpy>
	}

	return str;
 80041e6:	687b      	ldr	r3, [r7, #4]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3790      	adds	r7, #144	; 0x90
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <HAL_MspInit+0x74>)
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	4a19      	ldr	r2, [pc, #100]	; (8004264 <HAL_MspInit+0x74>)
 8004200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004204:	6453      	str	r3, [r2, #68]	; 0x44
 8004206:	4b17      	ldr	r3, [pc, #92]	; (8004264 <HAL_MspInit+0x74>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800420e:	607b      	str	r3, [r7, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	4b13      	ldr	r3, [pc, #76]	; (8004264 <HAL_MspInit+0x74>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	4a12      	ldr	r2, [pc, #72]	; (8004264 <HAL_MspInit+0x74>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004220:	6413      	str	r3, [r2, #64]	; 0x40
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_MspInit+0x74>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800422e:	2200      	movs	r2, #0
 8004230:	210f      	movs	r1, #15
 8004232:	f06f 0001 	mvn.w	r0, #1
 8004236:	f005 fcf9 	bl	8009c2c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800423a:	2200      	movs	r2, #0
 800423c:	2105      	movs	r1, #5
 800423e:	2005      	movs	r0, #5
 8004240:	f005 fcf4 	bl	8009c2c <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004244:	2005      	movs	r0, #5
 8004246:	f005 fd0d 	bl	8009c64 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800424a:	2200      	movs	r2, #0
 800424c:	2105      	movs	r1, #5
 800424e:	2005      	movs	r0, #5
 8004250:	f005 fcec 	bl	8009c2c <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004254:	2005      	movs	r0, #5
 8004256:	f005 fd05 	bl	8009c64 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800

08004268 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004270:	f107 0308 	add.w	r3, r7, #8
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a0c      	ldr	r2, [pc, #48]	; (80042b4 <HAL_RTC_MspInit+0x4c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d110      	bne.n	80042aa <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004288:	2302      	movs	r3, #2
 800428a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800428c:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <HAL_RTC_MspInit+0x50>)
 800428e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004290:	f107 0308 	add.w	r3, r7, #8
 8004294:	4618      	mov	r0, r3
 8004296:	f007 f947 	bl	800b528 <HAL_RCCEx_PeriphCLKConfig>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 80042a0:	f7ff fbae 	bl	8003a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RTC_MspInit+0x54>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40002800 	.word	0x40002800
 80042b8:	00190300 	.word	0x00190300
 80042bc:	42470e3c 	.word	0x42470e3c

080042c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	; 0x28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c8:	f107 0314 	add.w	r3, r7, #20
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	60da      	str	r2, [r3, #12]
 80042d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a39      	ldr	r2, [pc, #228]	; (80043c4 <HAL_SPI_MspInit+0x104>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d16b      	bne.n	80043ba <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	4b38      	ldr	r3, [pc, #224]	; (80043c8 <HAL_SPI_MspInit+0x108>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	4a37      	ldr	r2, [pc, #220]	; (80043c8 <HAL_SPI_MspInit+0x108>)
 80042ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042f0:	6453      	str	r3, [r2, #68]	; 0x44
 80042f2:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <HAL_SPI_MspInit+0x108>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <HAL_SPI_MspInit+0x108>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	4a30      	ldr	r2, [pc, #192]	; (80043c8 <HAL_SPI_MspInit+0x108>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6313      	str	r3, [r2, #48]	; 0x30
 800430e:	4b2e      	ldr	r3, [pc, #184]	; (80043c8 <HAL_SPI_MspInit+0x108>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 800431a:	23a0      	movs	r3, #160	; 0xa0
 800431c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431e:	2302      	movs	r3, #2
 8004320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004326:	2303      	movs	r3, #3
 8004328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800432a:	2305      	movs	r3, #5
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432e:	f107 0314 	add.w	r3, r7, #20
 8004332:	4619      	mov	r1, r3
 8004334:	4825      	ldr	r0, [pc, #148]	; (80043cc <HAL_SPI_MspInit+0x10c>)
 8004336:	f006 f8a5 	bl	800a484 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800433a:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 800433c:	4a25      	ldr	r2, [pc, #148]	; (80043d4 <HAL_SPI_MspInit+0x114>)
 800433e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004340:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 8004342:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004346:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004348:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 800434a:	2240      	movs	r2, #64	; 0x40
 800434c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 8004350:	2200      	movs	r2, #0
 8004352:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004354:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 8004356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800435a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800435c:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 800435e:	2200      	movs	r2, #0
 8004360:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004362:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 8004364:	2200      	movs	r2, #0
 8004366:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 800436a:	2200      	movs	r2, #0
 800436c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800436e:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 8004370:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004374:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004376:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 8004378:	2204      	movs	r2, #4
 800437a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800437c:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 800437e:	2203      	movs	r2, #3
 8004380:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 8004384:	2200      	movs	r2, #0
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800438e:	4810      	ldr	r0, [pc, #64]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 8004390:	f005 fc76 	bl	8009c80 <HAL_DMA_Init>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 800439a:	f7ff fb31 	bl	8003a00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a0b      	ldr	r2, [pc, #44]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 80043a2:	649a      	str	r2, [r3, #72]	; 0x48
 80043a4:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <HAL_SPI_MspInit+0x110>)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 80043aa:	2200      	movs	r2, #0
 80043ac:	2102      	movs	r1, #2
 80043ae:	2023      	movs	r0, #35	; 0x23
 80043b0:	f005 fc3c 	bl	8009c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80043b4:	2023      	movs	r0, #35	; 0x23
 80043b6:	f005 fc55 	bl	8009c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80043ba:	bf00      	nop
 80043bc:	3728      	adds	r7, #40	; 0x28
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40013000 	.word	0x40013000
 80043c8:	40023800 	.word	0x40023800
 80043cc:	40020000 	.word	0x40020000
 80043d0:	200001b4 	.word	0x200001b4
 80043d4:	40026458 	.word	0x40026458

080043d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e8:	d115      	bne.n	8004416 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <HAL_TIM_Base_MspInit+0x48>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a0b      	ldr	r2, [pc, #44]	; (8004420 <HAL_TIM_Base_MspInit+0x48>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_TIM_Base_MspInit+0x48>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004406:	2200      	movs	r2, #0
 8004408:	2101      	movs	r1, #1
 800440a:	201c      	movs	r0, #28
 800440c:	f005 fc0e 	bl	8009c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004410:	201c      	movs	r0, #28
 8004412:	f005 fc27 	bl	8009c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004416:	bf00      	nop
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800

08004424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800442c:	f107 0314 	add.w	r3, r7, #20
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	60da      	str	r2, [r3, #12]
 800443a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a35      	ldr	r2, [pc, #212]	; (8004518 <HAL_UART_MspInit+0xf4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d163      	bne.n	800450e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	4b34      	ldr	r3, [pc, #208]	; (800451c <HAL_UART_MspInit+0xf8>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	4a33      	ldr	r2, [pc, #204]	; (800451c <HAL_UART_MspInit+0xf8>)
 8004450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004454:	6413      	str	r3, [r2, #64]	; 0x40
 8004456:	4b31      	ldr	r3, [pc, #196]	; (800451c <HAL_UART_MspInit+0xf8>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	4b2d      	ldr	r3, [pc, #180]	; (800451c <HAL_UART_MspInit+0xf8>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4a2c      	ldr	r2, [pc, #176]	; (800451c <HAL_UART_MspInit+0xf8>)
 800446c:	f043 0302 	orr.w	r3, r3, #2
 8004470:	6313      	str	r3, [r2, #48]	; 0x30
 8004472:	4b2a      	ldr	r3, [pc, #168]	; (800451c <HAL_UART_MspInit+0xf8>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 800447e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004484:	2302      	movs	r3, #2
 8004486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800448c:	2303      	movs	r3, #3
 800448e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004490:	2307      	movs	r3, #7
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004494:	f107 0314 	add.w	r3, r7, #20
 8004498:	4619      	mov	r1, r3
 800449a:	4821      	ldr	r0, [pc, #132]	; (8004520 <HAL_UART_MspInit+0xfc>)
 800449c:	f005 fff2 	bl	800a484 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80044a0:	4b20      	ldr	r3, [pc, #128]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044a2:	4a21      	ldr	r2, [pc, #132]	; (8004528 <HAL_UART_MspInit+0x104>)
 80044a4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80044a6:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044ac:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044ae:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044b0:	2240      	movs	r2, #64	; 0x40
 80044b2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044ba:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044c0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044c8:	4b16      	ldr	r3, [pc, #88]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80044ce:	4b15      	ldr	r3, [pc, #84]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044da:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044de:	2200      	movs	r2, #0
 80044e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80044e2:	4810      	ldr	r0, [pc, #64]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044e4:	f005 fbcc 	bl	8009c80 <HAL_DMA_Init>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80044ee:	f7ff fa87 	bl	8003a00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a0b      	ldr	r2, [pc, #44]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044f6:	635a      	str	r2, [r3, #52]	; 0x34
 80044f8:	4a0a      	ldr	r2, [pc, #40]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80044fe:	2200      	movs	r2, #0
 8004500:	2105      	movs	r1, #5
 8004502:	2027      	movs	r0, #39	; 0x27
 8004504:	f005 fb92 	bl	8009c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004508:	2027      	movs	r0, #39	; 0x27
 800450a:	f005 fbab 	bl	8009c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800450e:	bf00      	nop
 8004510:	3728      	adds	r7, #40	; 0x28
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40004800 	.word	0x40004800
 800451c:	40023800 	.word	0x40023800
 8004520:	40020400 	.word	0x40020400
 8004524:	200002a0 	.word	0x200002a0
 8004528:	40026058 	.word	0x40026058

0800452c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004532:	1d3b      	adds	r3, r7, #4
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004540:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <HAL_FSMC_MspInit+0x98>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d139      	bne.n	80045bc <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8004548:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <HAL_FSMC_MspInit+0x98>)
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <HAL_FSMC_MspInit+0x9c>)
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <HAL_FSMC_MspInit+0x9c>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	6393      	str	r3, [r2, #56]	; 0x38
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <HAL_FSMC_MspInit+0x9c>)
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 800456a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800456e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2302      	movs	r3, #2
 8004572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004578:	2303      	movs	r3, #3
 800457a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800457c:	230c      	movs	r3, #12
 800457e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004580:	1d3b      	adds	r3, r7, #4
 8004582:	4619      	mov	r1, r3
 8004584:	4811      	ldr	r0, [pc, #68]	; (80045cc <HAL_FSMC_MspInit+0xa0>)
 8004586:	f005 ff7d 	bl	800a484 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 800458a:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 800458e:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004590:	2302      	movs	r3, #2
 8004592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004598:	2303      	movs	r3, #3
 800459a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800459c:	230c      	movs	r3, #12
 800459e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045a0:	1d3b      	adds	r3, r7, #4
 80045a2:	4619      	mov	r1, r3
 80045a4:	480a      	ldr	r0, [pc, #40]	; (80045d0 <HAL_FSMC_MspInit+0xa4>)
 80045a6:	f005 ff6d 	bl	800a484 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 80045aa:	2200      	movs	r2, #0
 80045ac:	2105      	movs	r1, #5
 80045ae:	2030      	movs	r0, #48	; 0x30
 80045b0:	f005 fb3c 	bl	8009c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 80045b4:	2030      	movs	r0, #48	; 0x30
 80045b6:	f005 fb55 	bl	8009c64 <HAL_NVIC_EnableIRQ>
 80045ba:	e000      	b.n	80045be <HAL_FSMC_MspInit+0x92>
    return;
 80045bc:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20002bb0 	.word	0x20002bb0
 80045c8:	40023800 	.word	0x40023800
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40020c00 	.word	0x40020c00

080045d4 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 80045dc:	f7ff ffa6 	bl	800452c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08c      	sub	sp, #48	; 0x30
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80045f8:	2200      	movs	r2, #0
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	2019      	movs	r0, #25
 80045fe:	f005 fb15 	bl	8009c2c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004602:	2019      	movs	r0, #25
 8004604:	f005 fb2e 	bl	8009c64 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	4b1f      	ldr	r3, [pc, #124]	; (800468c <HAL_InitTick+0xa4>)
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	4a1e      	ldr	r2, [pc, #120]	; (800468c <HAL_InitTick+0xa4>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6453      	str	r3, [r2, #68]	; 0x44
 8004618:	4b1c      	ldr	r3, [pc, #112]	; (800468c <HAL_InitTick+0xa4>)
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004624:	f107 0210 	add.w	r2, r7, #16
 8004628:	f107 0314 	add.w	r3, r7, #20
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f006 ff48 	bl	800b4c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004634:	f006 ff32 	bl	800b49c <HAL_RCC_GetPCLK2Freq>
 8004638:	4603      	mov	r3, r0
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	4a13      	ldr	r2, [pc, #76]	; (8004690 <HAL_InitTick+0xa8>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	0c9b      	lsrs	r3, r3, #18
 8004648:	3b01      	subs	r3, #1
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <HAL_InitTick+0xac>)
 800464e:	4a12      	ldr	r2, [pc, #72]	; (8004698 <HAL_InitTick+0xb0>)
 8004650:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <HAL_InitTick+0xac>)
 8004654:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004658:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800465a:	4a0e      	ldr	r2, [pc, #56]	; (8004694 <HAL_InitTick+0xac>)
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <HAL_InitTick+0xac>)
 8004662:	2200      	movs	r2, #0
 8004664:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <HAL_InitTick+0xac>)
 8004668:	2200      	movs	r2, #0
 800466a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800466c:	4809      	ldr	r0, [pc, #36]	; (8004694 <HAL_InitTick+0xac>)
 800466e:	f008 f82b 	bl	800c6c8 <HAL_TIM_Base_Init>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004678:	4806      	ldr	r0, [pc, #24]	; (8004694 <HAL_InitTick+0xac>)
 800467a:	f008 f875 	bl	800c768 <HAL_TIM_Base_Start_IT>
 800467e:	4603      	mov	r3, r0
 8004680:	e000      	b.n	8004684 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
}
 8004684:	4618      	mov	r0, r3
 8004686:	3730      	adds	r7, #48	; 0x30
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40023800 	.word	0x40023800
 8004690:	431bde83 	.word	0x431bde83
 8004694:	20002bb4 	.word	0x20002bb4
 8004698:	40010000 	.word	0x40010000

0800469c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80046a0:	bf00      	nop
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046aa:	b480      	push	{r7}
 80046ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046ae:	e7fe      	b.n	80046ae <HardFault_Handler+0x4>

080046b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046b4:	e7fe      	b.n	80046b4 <MemManage_Handler+0x4>

080046b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046b6:	b480      	push	{r7}
 80046b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046ba:	e7fe      	b.n	80046ba <BusFault_Handler+0x4>

080046bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046c0:	e7fe      	b.n	80046c0 <UsageFault_Handler+0x4>

080046c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046c2:	b480      	push	{r7}
 80046c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80046e4:	4802      	ldr	r0, [pc, #8]	; (80046f0 <DMA1_Stream3_IRQHandler+0x10>)
 80046e6:	f005 fc63 	bl	8009fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200002a0 	.word	0x200002a0

080046f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046f8:	4802      	ldr	r0, [pc, #8]	; (8004704 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80046fa:	f008 f8a5 	bl	800c848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20002bb4 	.word	0x20002bb4

08004708 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800470c:	4802      	ldr	r0, [pc, #8]	; (8004718 <TIM2_IRQHandler+0x10>)
 800470e:	f008 f89b 	bl	800c848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000214 	.word	0x20000214

0800471c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004720:	4802      	ldr	r0, [pc, #8]	; (800472c <SPI1_IRQHandler+0x10>)
 8004722:	f007 fd5d 	bl	800c1e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004726:	bf00      	nop
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	2000015c 	.word	0x2000015c

08004730 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004734:	4802      	ldr	r0, [pc, #8]	; (8004740 <USART3_IRQHandler+0x10>)
 8004736:	f008 fd45 	bl	800d1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800473a:	bf00      	nop
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	2000025c 	.word	0x2000025c

08004744 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8004748:	4802      	ldr	r0, [pc, #8]	; (8004754 <FSMC_IRQHandler+0x10>)
 800474a:	f006 f8b8 	bl	800a8be <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 800474e:	bf00      	nop
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000300 	.word	0x20000300

08004758 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800475c:	4802      	ldr	r0, [pc, #8]	; (8004768 <DMA2_Stream3_IRQHandler+0x10>)
 800475e:	f005 fc27 	bl	8009fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004762:	bf00      	nop
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	200001b4 	.word	0x200001b4

0800476c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
	return 1;
 8004770:	2301      	movs	r3, #1
}
 8004772:	4618      	mov	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <_kill>:

int _kill(int pid, int sig)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004786:	f00c ff0f 	bl	80115a8 <__errno>
 800478a:	4603      	mov	r3, r0
 800478c:	2216      	movs	r2, #22
 800478e:	601a      	str	r2, [r3, #0]
	return -1;
 8004790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <_exit>:

void _exit (int status)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80047a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ffe7 	bl	800477c <_kill>
	while (1) {}		/* Make sure we hang here */
 80047ae:	e7fe      	b.n	80047ae <_exit+0x12>

080047b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	e00a      	b.n	80047d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80047c2:	f3af 8000 	nop.w
 80047c6:	4601      	mov	r1, r0
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	60ba      	str	r2, [r7, #8]
 80047ce:	b2ca      	uxtb	r2, r1
 80047d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	3301      	adds	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	dbf0      	blt.n	80047c2 <_read+0x12>
	}

return len;
 80047e0:	687b      	ldr	r3, [r7, #4]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <_close>:
	}
	return len;
}

int _close(int file)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
	return -1;
 80047f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004812:	605a      	str	r2, [r3, #4]
	return 0;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <_isatty>:

int _isatty(int file)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
	return 1;
 800482a:	2301      	movs	r3, #1
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
	return 0;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800485c:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <_sbrk+0x5c>)
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <_sbrk+0x60>)
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004868:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <_sbrk+0x64>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004870:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <_sbrk+0x64>)
 8004872:	4a12      	ldr	r2, [pc, #72]	; (80048bc <_sbrk+0x68>)
 8004874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <_sbrk+0x64>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4413      	add	r3, r2
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	429a      	cmp	r2, r3
 8004882:	d207      	bcs.n	8004894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004884:	f00c fe90 	bl	80115a8 <__errno>
 8004888:	4603      	mov	r3, r0
 800488a:	220c      	movs	r2, #12
 800488c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800488e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004892:	e009      	b.n	80048a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <_sbrk+0x64>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <_sbrk+0x64>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4413      	add	r3, r2
 80048a2:	4a05      	ldr	r2, [pc, #20]	; (80048b8 <_sbrk+0x64>)
 80048a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048a6:	68fb      	ldr	r3, [r7, #12]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20020000 	.word	0x20020000
 80048b4:	00000800 	.word	0x00000800
 80048b8:	20002bfc 	.word	0x20002bfc
 80048bc:	200082e8 	.word	0x200082e8

080048c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048c4:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <SystemInit+0x28>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ca:	4a07      	ldr	r2, [pc, #28]	; (80048e8 <SystemInit+0x28>)
 80048cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <SystemInit+0x28>)
 80048d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048da:	609a      	str	r2, [r3, #8]
#endif
}
 80048dc:	bf00      	nop
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	e000ed00 	.word	0xe000ed00

080048ec <_fs_flash_read>:
/param: Number bytes to read
/return: 0 if all ok
-----------------------------------------------------------*/
int _fs_flash_read(  const struct lfs_config *cfg, lfs_block_t block,
                    lfs_off_t off, void *buffer, lfs_size_t size)
{
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
    assert(off  % cfg->read_size == 0);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	fbb3 f1f2 	udiv	r1, r3, r2
 8004904:	fb01 f202 	mul.w	r2, r1, r2
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <_fs_flash_read+0x2e>
 800490e:	4b1d      	ldr	r3, [pc, #116]	; (8004984 <_fs_flash_read+0x98>)
 8004910:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <_fs_flash_read+0x9c>)
 8004912:	2121      	movs	r1, #33	; 0x21
 8004914:	481d      	ldr	r0, [pc, #116]	; (800498c <_fs_flash_read+0xa0>)
 8004916:	f00c fe25 	bl	8011564 <__assert_func>
    assert(size % cfg->read_size == 0);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	fbb3 f1f2 	udiv	r1, r3, r2
 8004924:	fb01 f202 	mul.w	r2, r1, r2
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <_fs_flash_read+0x4e>
 800492e:	4b18      	ldr	r3, [pc, #96]	; (8004990 <_fs_flash_read+0xa4>)
 8004930:	4a15      	ldr	r2, [pc, #84]	; (8004988 <_fs_flash_read+0x9c>)
 8004932:	2122      	movs	r1, #34	; 0x22
 8004934:	4815      	ldr	r0, [pc, #84]	; (800498c <_fs_flash_read+0xa0>)
 8004936:	f00c fe15 	bl	8011564 <__assert_func>
    assert(block < cfg->block_count);   
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	429a      	cmp	r2, r3
 8004942:	d305      	bcc.n	8004950 <_fs_flash_read+0x64>
 8004944:	4b13      	ldr	r3, [pc, #76]	; (8004994 <_fs_flash_read+0xa8>)
 8004946:	4a10      	ldr	r2, [pc, #64]	; (8004988 <_fs_flash_read+0x9c>)
 8004948:	2123      	movs	r1, #35	; 0x23
 800494a:	4810      	ldr	r0, [pc, #64]	; (800498c <_fs_flash_read+0xa0>)
 800494c:	f00c fe0a 	bl	8011564 <__assert_func>

    uint32_t addr = block * io_nand_get_block_size() + off / io_nand_get_page_size();
 8004950:	f7fc fd4c 	bl	80013ec <io_nand_get_block_size>
 8004954:	4602      	mov	r2, r0
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	fb03 f402 	mul.w	r4, r3, r2
 800495c:	f7fc fd2e 	bl	80013bc <io_nand_get_page_size>
 8004960:	4602      	mov	r2, r0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	fbb3 f3f2 	udiv	r3, r3, r2
 8004968:	4423      	add	r3, r4
 800496a:	617b      	str	r3, [r7, #20]
    io_nand_read(addr, (uint8_t*) buffer, size, 0);
 800496c:	2300      	movs	r3, #0
 800496e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	6978      	ldr	r0, [r7, #20]
 8004974:	f7fd fa3e 	bl	8001df4 <io_nand_read>

    return 0;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	bf00      	nop
 8004984:	08013618 	.word	0x08013618
 8004988:	080168f0 	.word	0x080168f0
 800498c:	08013634 	.word	0x08013634
 8004990:	0801364c 	.word	0x0801364c
 8004994:	08013668 	.word	0x08013668

08004998 <_fs_flash_prog>:
/param: Number bytes to write
/return: 0 if all ok
-----------------------------------------------------------*/
int _fs_flash_prog(  const struct lfs_config *cfg, lfs_block_t block,
                    lfs_off_t off, const void *buffer, lfs_size_t size)
{
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]

    assert(off  % cfg->prog_size == 0);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80049b0:	fb01 f202 	mul.w	r2, r1, r2
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <_fs_flash_prog+0x2e>
 80049ba:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <_fs_flash_prog+0x98>)
 80049bc:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <_fs_flash_prog+0x9c>)
 80049be:	2138      	movs	r1, #56	; 0x38
 80049c0:	481d      	ldr	r0, [pc, #116]	; (8004a38 <_fs_flash_prog+0xa0>)
 80049c2:	f00c fdcf 	bl	8011564 <__assert_func>
    assert(size % cfg->prog_size == 0);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80049d0:	fb01 f202 	mul.w	r2, r1, r2
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <_fs_flash_prog+0x4e>
 80049da:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <_fs_flash_prog+0xa4>)
 80049dc:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <_fs_flash_prog+0x9c>)
 80049de:	2139      	movs	r1, #57	; 0x39
 80049e0:	4815      	ldr	r0, [pc, #84]	; (8004a38 <_fs_flash_prog+0xa0>)
 80049e2:	f00c fdbf 	bl	8011564 <__assert_func>
    assert(block < cfg->block_count);  
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d305      	bcc.n	80049fc <_fs_flash_prog+0x64>
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <_fs_flash_prog+0xa8>)
 80049f2:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <_fs_flash_prog+0x9c>)
 80049f4:	213a      	movs	r1, #58	; 0x3a
 80049f6:	4810      	ldr	r0, [pc, #64]	; (8004a38 <_fs_flash_prog+0xa0>)
 80049f8:	f00c fdb4 	bl	8011564 <__assert_func>

    uint32_t addr = block * io_nand_get_block_size() + off / io_nand_get_page_size();
 80049fc:	f7fc fcf6 	bl	80013ec <io_nand_get_block_size>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	fb03 f402 	mul.w	r4, r3, r2
 8004a08:	f7fc fcd8 	bl	80013bc <io_nand_get_page_size>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a14:	4423      	add	r3, r4
 8004a16:	617b      	str	r3, [r7, #20]
    io_nand_write(addr, (uint8_t*) buffer, size, 0);
 8004a18:	2300      	movs	r3, #0
 8004a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a1c:	6839      	ldr	r1, [r7, #0]
 8004a1e:	6978      	ldr	r0, [r7, #20]
 8004a20:	f7fd fa06 	bl	8001e30 <io_nand_write>
  
    return 0;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd90      	pop	{r4, r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	08013684 	.word	0x08013684
 8004a34:	08016900 	.word	0x08016900
 8004a38:	08013634 	.word	0x08013634
 8004a3c:	080136a0 	.word	0x080136a0
 8004a40:	08013668 	.word	0x08013668

08004a44 <_fs_flash_erase>:
/param: Pointer to lfs config
/param: Number block
/return: 0 if all ok
-----------------------------------------------------------*/
int _fs_flash_erase(const struct lfs_config *cfg, lfs_block_t block)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
    assert(block < cfg->block_count);  
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d305      	bcc.n	8004a64 <_fs_flash_erase+0x20>
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <_fs_flash_erase+0x40>)
 8004a5a:	4a0b      	ldr	r2, [pc, #44]	; (8004a88 <_fs_flash_erase+0x44>)
 8004a5c:	214a      	movs	r1, #74	; 0x4a
 8004a5e:	480b      	ldr	r0, [pc, #44]	; (8004a8c <_fs_flash_erase+0x48>)
 8004a60:	f00c fd80 	bl	8011564 <__assert_func>

    uint32_t addr = block * io_nand_get_block_size();
 8004a64:	f7fc fcc2 	bl	80013ec <io_nand_get_block_size>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	fb02 f303 	mul.w	r3, r2, r3
 8004a70:	60fb      	str	r3, [r7, #12]
    io_nand_block_erase(addr);
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f7fd f9fa 	bl	8001e6c <io_nand_block_erase>

    return 0;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	08013668 	.word	0x08013668
 8004a88:	08016910 	.word	0x08016910
 8004a8c:	08013634 	.word	0x08013634

08004a90 <_fs_flash_sync>:
/brief: Sync data
/param: Pointer to lfs config
/return: 0 if all ok
-----------------------------------------------------------*/
int _fs_flash_sync(const struct lfs_config *c)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
    return 0;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
	...

08004aa8 <io_fs_init>:
/brief: Init FS
/param:
/return: 0 if all ok
-----------------------------------------------------------*/
int io_fs_init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
    uint32_t page_size = io_nand_get_page_size();
 8004aae:	f7fc fc85 	bl	80013bc <io_nand_get_page_size>
 8004ab2:	6078      	str	r0, [r7, #4]

    _lfs_config.read_size   = page_size;
 8004ab4:	4a19      	ldr	r2, [pc, #100]	; (8004b1c <io_fs_init+0x74>)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6153      	str	r3, [r2, #20]
    _lfs_config.prog_size   = page_size;
 8004aba:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <io_fs_init+0x74>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6193      	str	r3, [r2, #24]
    
    _lfs_config.block_size  = io_nand_get_block_size() * page_size;
 8004ac0:	f7fc fc94 	bl	80013ec <io_nand_get_block_size>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	fb02 f303 	mul.w	r3, r2, r3
 8004acc:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <io_fs_init+0x74>)
 8004ace:	61d3      	str	r3, [r2, #28]
    _lfs_config.block_count = io_nand_get_block_number();
 8004ad0:	f7fc fc80 	bl	80013d4 <io_nand_get_block_number>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4a11      	ldr	r2, [pc, #68]	; (8004b1c <io_fs_init+0x74>)
 8004ad8:	6213      	str	r3, [r2, #32]
    
    _lfs_config.block_cycles = 100;
 8004ada:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <io_fs_init+0x74>)
 8004adc:	2264      	movs	r2, #100	; 0x64
 8004ade:	625a      	str	r2, [r3, #36]	; 0x24
    _lfs_config.lookahead_size = page_size;
 8004ae0:	4a0e      	ldr	r2, [pc, #56]	; (8004b1c <io_fs_init+0x74>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
    _lfs_config.cache_size     = page_size;
 8004ae6:	4a0d      	ldr	r2, [pc, #52]	; (8004b1c <io_fs_init+0x74>)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6293      	str	r3, [r2, #40]	; 0x28
    
    _lfs_config.read_buffer = _rd;
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <io_fs_init+0x74>)
 8004aee:	4a0c      	ldr	r2, [pc, #48]	; (8004b20 <io_fs_init+0x78>)
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
    _lfs_config.prog_buffer = _wr;
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <io_fs_init+0x74>)
 8004af4:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <io_fs_init+0x7c>)
 8004af6:	635a      	str	r2, [r3, #52]	; 0x34

    _lfs_config.read   = _fs_flash_read;
 8004af8:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <io_fs_init+0x74>)
 8004afa:	4a0b      	ldr	r2, [pc, #44]	; (8004b28 <io_fs_init+0x80>)
 8004afc:	605a      	str	r2, [r3, #4]
    _lfs_config.prog   = _fs_flash_prog;
 8004afe:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <io_fs_init+0x74>)
 8004b00:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <io_fs_init+0x84>)
 8004b02:	609a      	str	r2, [r3, #8]
    _lfs_config.erase  = _fs_flash_erase;
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <io_fs_init+0x74>)
 8004b06:	4a0a      	ldr	r2, [pc, #40]	; (8004b30 <io_fs_init+0x88>)
 8004b08:	60da      	str	r2, [r3, #12]
    _lfs_config.sync   = _fs_flash_sync;
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <io_fs_init+0x74>)
 8004b0c:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <io_fs_init+0x8c>)
 8004b0e:	611a      	str	r2, [r3, #16]

    return 0;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20002c78 	.word	0x20002c78
 8004b20:	20002cc0 	.word	0x20002cc0
 8004b24:	200034c0 	.word	0x200034c0
 8004b28:	080048ed 	.word	0x080048ed
 8004b2c:	08004999 	.word	0x08004999
 8004b30:	08004a45 	.word	0x08004a45
 8004b34:	08004a91 	.word	0x08004a91

08004b38 <io_fs_format>:
/brief: Format a block device with the FS
/param:
/return: A negative error code on failure
-----------------------------------------------------------*/
int io_fs_format(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
    return lfs_format(&_lfs, &_lfs_config);
 8004b3c:	4903      	ldr	r1, [pc, #12]	; (8004b4c <io_fs_format+0x14>)
 8004b3e:	4804      	ldr	r0, [pc, #16]	; (8004b50 <io_fs_format+0x18>)
 8004b40:	f004 f9ae 	bl	8008ea0 <lfs_format>
 8004b44:	4603      	mov	r3, r0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20002c78 	.word	0x20002c78
 8004b50:	20002c00 	.word	0x20002c00

08004b54 <io_fs_mount>:
/brief: Mount a FS
/param:
/return: A negative error code on failure
-----------------------------------------------------------*/
int io_fs_mount(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
    return lfs_mount(&_lfs, &_lfs_config);
 8004b58:	4903      	ldr	r1, [pc, #12]	; (8004b68 <io_fs_mount+0x14>)
 8004b5a:	4804      	ldr	r0, [pc, #16]	; (8004b6c <io_fs_mount+0x18>)
 8004b5c:	f004 fa4e 	bl	8008ffc <lfs_mount>
 8004b60:	4603      	mov	r3, r0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20002c78 	.word	0x20002c78
 8004b6c:	20002c00 	.word	0x20002c00

08004b70 <io_fs_unmount>:
/brief: Unmount a FS
/param:
/return: A negative error code on failure
-----------------------------------------------------------*/
int io_fs_unmount()
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
    return lfs_unmount(&_lfs);
 8004b74:	4802      	ldr	r0, [pc, #8]	; (8004b80 <io_fs_unmount+0x10>)
 8004b76:	f004 fba9 	bl	80092cc <lfs_unmount>
 8004b7a:	4603      	mov	r3, r0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20002c00 	.word	0x20002c00

08004b84 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4293      	cmp	r3, r2
 8004b94:	bf38      	it	cc
 8004b96:	4613      	movcc	r3, r2
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	bf28      	it	cs
 8004bb6:	4613      	movcs	r3, r2
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bd6:	6839      	ldr	r1, [r7, #0]
 8004bd8:	fb01 f202 	mul.w	r2, r1, r2
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	1ad3      	subs	r3, r2, r3
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	6839      	ldr	r1, [r7, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff ffde 	bl	8004bc4 <lfs_aligndown>
 8004c08:	4603      	mov	r3, r0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <lfs_npw2>:

// Find the next smallest power of 2 less than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	fab3 f383 	clz	r3, r3
 8004c22:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	fa93 f3a3 	rbit	r3, r3
 8004c40:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7fb fe7f 	bl	800095c <__popcountsi2>
 8004c5e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	1ad3      	subs	r3, r2, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 8004c8c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff ffee 	bl	8004c84 <lfs_fromle32>
 8004ca8:	4603      	mov	r3, r0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff ffed 	bl	8004cb2 <lfs_frombe32>
 8004cd8:	4603      	mov	r3, r0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f00c fe3e 	bl	801196c <malloc>
 8004cf0:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f00c fe3a 	bl	801197c <free>
#else
    (void)p;
#endif
}
 8004d08:	bf00      	nop
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <lfs_cache_drop>:

#define LFS_BLOCK_NULL ((lfs_block_t)-1)
#define LFS_BLOCK_INLINE ((lfs_block_t)-2)

/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d20:	601a      	str	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68d8      	ldr	r0, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	461a      	mov	r2, r3
 8004d44:	21ff      	movs	r1, #255	; 0xff
 8004d46:	f00c fe2f 	bl	80119a8 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d50:	601a      	str	r2, [r3, #0]
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8004d5c:	b5b0      	push	{r4, r5, r7, lr}
 8004d5e:	b08a      	sub	sp, #40	; 0x28
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block != LFS_BLOCK_NULL);
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d74:	d105      	bne.n	8004d82 <lfs_bd_read+0x26>
 8004d76:	4b7c      	ldr	r3, [pc, #496]	; (8004f68 <lfs_bd_read+0x20c>)
 8004d78:	4a7c      	ldr	r2, [pc, #496]	; (8004f6c <lfs_bd_read+0x210>)
 8004d7a:	2122      	movs	r1, #34	; 0x22
 8004d7c:	487c      	ldr	r0, [pc, #496]	; (8004f70 <lfs_bd_read+0x214>)
 8004d7e:	f00c fbf1 	bl	8011564 <__assert_func>
    if (off+size > lfs->cfg->block_size) {
 8004d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d86:	441a      	add	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	f240 80e0 	bls.w	8004f54 <lfs_bd_read+0x1f8>
        return LFS_ERR_CORRUPT;
 8004d94:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004d98:	e0e1      	b.n	8004f5e <lfs_bd_read+0x202>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8004d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9c:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d03f      	beq.n	8004e24 <lfs_bd_read+0xc8>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d13a      	bne.n	8004e24 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8004db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d232      	bcs.n	8004e24 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d324      	bcc.n	8004e12 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	6859      	ldr	r1, [r3, #4]
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd2:	1acb      	subs	r3, r1, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	69b8      	ldr	r0, [r7, #24]
 8004dda:	f7ff fee3 	bl	8004ba4 <lfs_min>
 8004dde:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004dea:	1acb      	subs	r3, r1, r3
 8004dec:	4413      	add	r3, r2
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4619      	mov	r1, r3
 8004df2:	69f8      	ldr	r0, [r7, #28]
 8004df4:	f00c fdca 	bl	801198c <memcpy>

                data += diff;
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	61fb      	str	r3, [r7, #28]
                off += diff;
 8004e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	4413      	add	r3, r2
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8004e08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8004e10:	e0a0      	b.n	8004f54 <lfs_bd_read+0x1f8>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	69b8      	ldr	r0, [r7, #24]
 8004e1e:	f7ff fec1 	bl	8004ba4 <lfs_min>
 8004e22:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d13a      	bne.n	8004ea4 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	4413      	add	r3, r2
        if (block == rcache->block &&
 8004e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d232      	bcs.n	8004ea4 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d324      	bcc.n	8004e92 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6859      	ldr	r1, [r3, #4]
 8004e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e52:	1acb      	subs	r3, r1, r3
 8004e54:	4413      	add	r3, r2
 8004e56:	4619      	mov	r1, r3
 8004e58:	69b8      	ldr	r0, [r7, #24]
 8004e5a:	f7ff fea3 	bl	8004ba4 <lfs_min>
 8004e5e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e6a:	1acb      	subs	r3, r1, r3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4619      	mov	r1, r3
 8004e72:	69f8      	ldr	r0, [r7, #28]
 8004e74:	f00c fd8a 	bl	801198c <memcpy>

                data += diff;
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	61fb      	str	r3, [r7, #28]
                off += diff;
 8004e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	4413      	add	r3, r2
 8004e86:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8004e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8004e90:	e060      	b.n	8004f54 <lfs_bd_read+0x1f8>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	69b8      	ldr	r0, [r7, #24]
 8004e9e:	f7ff fe81 	bl	8004ba4 <lfs_min>
 8004ea2:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d305      	bcc.n	8004ebc <lfs_bd_read+0x160>
 8004eb0:	4b30      	ldr	r3, [pc, #192]	; (8004f74 <lfs_bd_read+0x218>)
 8004eb2:	4a2e      	ldr	r2, [pc, #184]	; (8004f6c <lfs_bd_read+0x210>)
 8004eb4:	214d      	movs	r1, #77	; 0x4d
 8004eb6:	482e      	ldr	r0, [pc, #184]	; (8004f70 <lfs_bd_read+0x214>)
 8004eb8:	f00c fb54 	bl	8011564 <__assert_func>
        rcache->block = block;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec0:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ecc:	f7ff fe7a 	bl	8004bc4 <lfs_aligndown>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8004ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f7ff fe82 	bl	8004bee <lfs_alignup>
 8004eea:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f7ff fe55 	bl	8004ba4 <lfs_min>
 8004efa:	4602      	mov	r2, r0
                - rcache->off,
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8004f00:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7ff fe4a 	bl	8004ba4 <lfs_min>
 8004f10:	4602      	mov	r2, r0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f1a:	685c      	ldr	r4, [r3, #4]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	462b      	mov	r3, r5
 8004f34:	47a0      	blx	r4
 8004f36:	6178      	str	r0, [r7, #20]
        LFS_ASSERT(err <= 0);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	dd05      	ble.n	8004f4a <lfs_bd_read+0x1ee>
 8004f3e:	4b0e      	ldr	r3, [pc, #56]	; (8004f78 <lfs_bd_read+0x21c>)
 8004f40:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <lfs_bd_read+0x210>)
 8004f42:	2158      	movs	r1, #88	; 0x58
 8004f44:	480a      	ldr	r0, [pc, #40]	; (8004f70 <lfs_bd_read+0x214>)
 8004f46:	f00c fb0d 	bl	8011564 <__assert_func>
        if (err) {
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <lfs_bd_read+0x1f8>
            return err;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	e004      	b.n	8004f5e <lfs_bd_read+0x202>
    while (size > 0) {
 8004f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f47f af1f 	bne.w	8004d9a <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bdb0      	pop	{r4, r5, r7, pc}
 8004f66:	bf00      	nop
 8004f68:	080136bc 	.word	0x080136bc
 8004f6c:	08016920 	.word	0x08016920
 8004f70:	080136d8 	.word	0x080136d8
 8004f74:	080136f0 	.word	0x080136f0
 8004f78:	08013710 	.word	0x08013710

08004f7c <lfs_bd_cmp>:
};

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08c      	sub	sp, #48	; 0x30
 8004f80:	af04      	add	r7, sp, #16
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	61bb      	str	r3, [r7, #24]

    for (lfs_off_t i = 0; i < size; i++) {
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	e02e      	b.n	8004ff2 <lfs_bd_cmp+0x76>
        uint8_t dat;
        int err = lfs_bd_read(lfs,
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	1ad1      	subs	r1, r2, r3
 8004f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	9203      	str	r2, [sp, #12]
 8004fa4:	f107 0213 	add.w	r2, r7, #19
 8004fa8:	9202      	str	r2, [sp, #8]
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f7ff fed0 	bl	8004d5c <lfs_bd_read>
 8004fbc:	6178      	str	r0, [r7, #20]
                pcache, rcache, hint-i,
                block, off+i, &dat, 1);
        if (err) {
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <lfs_bd_cmp+0x4c>
            return err;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	e019      	b.n	8004ffc <lfs_bd_cmp+0x80>
        }

        if (dat != data[i]) {
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	781a      	ldrb	r2, [r3, #0]
 8004fd0:	7cfb      	ldrb	r3, [r7, #19]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d00a      	beq.n	8004fec <lfs_bd_cmp+0x70>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	781a      	ldrb	r2, [r3, #0]
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d901      	bls.n	8004fe8 <lfs_bd_cmp+0x6c>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e009      	b.n	8004ffc <lfs_bd_cmp+0x80>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e007      	b.n	8004ffc <lfs_bd_cmp+0x80>
    for (lfs_off_t i = 0; i < size; i++) {
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d3cc      	bcc.n	8004f94 <lfs_bd_cmp+0x18>
        }
    }

    return LFS_CMP_EQ;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3720      	adds	r7, #32
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <lfs_bd_flush>:

static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8005004:	b5b0      	push	{r4, r5, r7, lr}
 8005006:	b08c      	sub	sp, #48	; 0x30
 8005008:	af04      	add	r7, sp, #16
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501a:	d061      	beq.n	80050e0 <lfs_bd_flush+0xdc>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f113 0f02 	cmn.w	r3, #2
 8005024:	d05c      	beq.n	80050e0 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	429a      	cmp	r2, r3
 8005032:	d305      	bcc.n	8005040 <lfs_bd_flush+0x3c>
 8005034:	4b2d      	ldr	r3, [pc, #180]	; (80050ec <lfs_bd_flush+0xe8>)
 8005036:	4a2e      	ldr	r2, [pc, #184]	; (80050f0 <lfs_bd_flush+0xec>)
 8005038:	2181      	movs	r1, #129	; 0x81
 800503a:	482e      	ldr	r0, [pc, #184]	; (80050f4 <lfs_bd_flush+0xf0>)
 800503c:	f00c fa92 	bl	8011564 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f7ff fdce 	bl	8004bee <lfs_alignup>
 8005052:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005058:	689c      	ldr	r4, [r3, #8]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6819      	ldr	r1, [r3, #0]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	462b      	mov	r3, r5
 8005070:	47a0      	blx	r4
 8005072:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	dd05      	ble.n	8005086 <lfs_bd_flush+0x82>
 800507a:	4b1f      	ldr	r3, [pc, #124]	; (80050f8 <lfs_bd_flush+0xf4>)
 800507c:	4a1c      	ldr	r2, [pc, #112]	; (80050f0 <lfs_bd_flush+0xec>)
 800507e:	2185      	movs	r1, #133	; 0x85
 8005080:	481c      	ldr	r0, [pc, #112]	; (80050f4 <lfs_bd_flush+0xf0>)
 8005082:	f00c fa6f 	bl	8011564 <__assert_func>
        if (err) {
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <lfs_bd_flush+0x8c>
            return err;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	e028      	b.n	80050e2 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d020      	beq.n	80050d8 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff fe39 	bl	8004d10 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 80050aa:	69f8      	ldr	r0, [r7, #28]
 80050ac:	9003      	str	r0, [sp, #12]
 80050ae:	9102      	str	r1, [sp, #8]
 80050b0:	9201      	str	r2, [sp, #4]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	2100      	movs	r1, #0
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7ff ff5e 	bl	8004f7c <lfs_bd_cmp>
 80050c0:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	da01      	bge.n	80050cc <lfs_bd_flush+0xc8>
                return res;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	e00a      	b.n	80050e2 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 80050d2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80050d6:	e004      	b.n	80050e2 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f7ff fe27 	bl	8004d2e <lfs_cache_zero>
    }

    return 0;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bdb0      	pop	{r4, r5, r7, pc}
 80050ea:	bf00      	nop
 80050ec:	0801371c 	.word	0x0801371c
 80050f0:	0801692c 	.word	0x0801692c
 80050f4:	080136d8 	.word	0x080136d8
 80050f8:	08013710 	.word	0x08013710

080050fc <lfs_bd_sync>:

static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff fdff 	bl	8004d10 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff ff73 	bl	8005004 <lfs_bd_flush>
 800511e:	6178      	str	r0, [r7, #20]
    if (err) {
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <lfs_bd_sync+0x2e>
        return err;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	e011      	b.n	800514e <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005134:	4610      	mov	r0, r2
 8005136:	4798      	blx	r3
 8005138:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b00      	cmp	r3, #0
 800513e:	dd05      	ble.n	800514c <lfs_bd_sync+0x50>
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <lfs_bd_sync+0x5c>)
 8005142:	4a06      	ldr	r2, [pc, #24]	; (800515c <lfs_bd_sync+0x60>)
 8005144:	21a9      	movs	r1, #169	; 0xa9
 8005146:	4806      	ldr	r0, [pc, #24]	; (8005160 <lfs_bd_sync+0x64>)
 8005148:	f00c fa0c 	bl	8011564 <__assert_func>
    return err;
 800514c:	697b      	ldr	r3, [r7, #20]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	08013710 	.word	0x08013710
 800515c:	0801693c 	.word	0x0801693c
 8005160:	080136d8 	.word	0x080136d8

08005164 <lfs_bd_prog>:

static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block != LFS_BLOCK_NULL);
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800517c:	d105      	bne.n	800518a <lfs_bd_prog+0x26>
 800517e:	4b47      	ldr	r3, [pc, #284]	; (800529c <lfs_bd_prog+0x138>)
 8005180:	4a47      	ldr	r2, [pc, #284]	; (80052a0 <lfs_bd_prog+0x13c>)
 8005182:	21b2      	movs	r1, #178	; 0xb2
 8005184:	4847      	ldr	r0, [pc, #284]	; (80052a4 <lfs_bd_prog+0x140>)
 8005186:	f00c f9ed 	bl	8011564 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800518a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	441a      	add	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	429a      	cmp	r2, r3
 8005198:	d977      	bls.n	800528a <lfs_bd_prog+0x126>
 800519a:	4b43      	ldr	r3, [pc, #268]	; (80052a8 <lfs_bd_prog+0x144>)
 800519c:	4a40      	ldr	r2, [pc, #256]	; (80052a0 <lfs_bd_prog+0x13c>)
 800519e:	21b3      	movs	r1, #179	; 0xb3
 80051a0:	4840      	ldr	r0, [pc, #256]	; (80052a4 <lfs_bd_prog+0x140>)
 80051a2:	f00c f9df 	bl	8011564 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d151      	bne.n	8005254 <lfs_bd_prog+0xf0>
                off >= pcache->off &&
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80051b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d34c      	bcc.n	8005254 <lfs_bd_prog+0xf0>
                off < pcache->off + lfs->cfg->cache_size) {
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	4413      	add	r3, r2
                off >= pcache->off &&
 80051c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d243      	bcs.n	8005254 <lfs_bd_prog+0xf0>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6859      	ldr	r1, [r3, #4]
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80051da:	4413      	add	r3, r2
 80051dc:	4619      	mov	r1, r3
 80051de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051e0:	f7ff fce0 	bl	8004ba4 <lfs_min>
 80051e4:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051f0:	1acb      	subs	r3, r1, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	69f9      	ldr	r1, [r7, #28]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f00c fbc7 	bl	801198c <memcpy>

            data += diff;
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	4413      	add	r3, r2
 8005204:	61fb      	str	r3, [r7, #28]
            off += diff;
 8005206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	4413      	add	r3, r2
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 800520e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	6898      	ldr	r0, [r3, #8]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	4619      	mov	r1, r3
 8005224:	f7ff fcae 	bl	8004b84 <lfs_max>
 8005228:	4602      	mov	r2, r0
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	429a      	cmp	r2, r3
 800523a:	d126      	bne.n	800528a <lfs_bd_prog+0x126>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f7ff fede 	bl	8005004 <lfs_bd_flush>
 8005248:	6178      	str	r0, [r7, #20]
                if (err) {
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01c      	beq.n	800528a <lfs_bd_prog+0x126>
                    return err;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	e01e      	b.n	8005292 <lfs_bd_prog+0x12e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800525c:	d005      	beq.n	800526a <lfs_bd_prog+0x106>
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <lfs_bd_prog+0x148>)
 8005260:	4a0f      	ldr	r2, [pc, #60]	; (80052a0 <lfs_bd_prog+0x13c>)
 8005262:	21d0      	movs	r1, #208	; 0xd0
 8005264:	480f      	ldr	r0, [pc, #60]	; (80052a4 <lfs_bd_prog+0x140>)
 8005266:	f00c f97d 	bl	8011564 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800526e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	4619      	mov	r1, r3
 8005278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800527a:	f7ff fca3 	bl	8004bc4 <lfs_aligndown>
 800527e:	4602      	mov	r2, r0
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2200      	movs	r2, #0
 8005288:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800528a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528c:	2b00      	cmp	r3, #0
 800528e:	d18a      	bne.n	80051a6 <lfs_bd_prog+0x42>
    }

    return 0;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3720      	adds	r7, #32
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	080136bc 	.word	0x080136bc
 80052a0:	08016948 	.word	0x08016948
 80052a4:	080136d8 	.word	0x080136d8
 80052a8:	08013744 	.word	0x08013744
 80052ac:	08013768 	.word	0x08013768

080052b0 <lfs_bd_erase>:

static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d305      	bcc.n	80052d2 <lfs_bd_erase+0x22>
 80052c6:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <lfs_bd_erase+0x50>)
 80052c8:	4a0e      	ldr	r2, [pc, #56]	; (8005304 <lfs_bd_erase+0x54>)
 80052ca:	21dc      	movs	r1, #220	; 0xdc
 80052cc:	480e      	ldr	r0, [pc, #56]	; (8005308 <lfs_bd_erase+0x58>)
 80052ce:	f00c f949 	bl	8011564 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	4610      	mov	r0, r2
 80052e0:	4798      	blx	r3
 80052e2:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	dd05      	ble.n	80052f6 <lfs_bd_erase+0x46>
 80052ea:	4b08      	ldr	r3, [pc, #32]	; (800530c <lfs_bd_erase+0x5c>)
 80052ec:	4a05      	ldr	r2, [pc, #20]	; (8005304 <lfs_bd_erase+0x54>)
 80052ee:	21de      	movs	r1, #222	; 0xde
 80052f0:	4805      	ldr	r0, [pc, #20]	; (8005308 <lfs_bd_erase+0x58>)
 80052f2:	f00c f937 	bl	8011564 <__assert_func>
    return err;
 80052f6:	68fb      	ldr	r3, [r7, #12]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	080136f0 	.word	0x080136f0
 8005304:	08016954 	.word	0x08016954
 8005308:	080136d8 	.word	0x080136d8
 800530c:	08013710 	.word	0x08013710

08005310 <lfs_pair_swap>:


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3304      	adds	r3, #4
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	601a      	str	r2, [r3, #0]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800534a:	d005      	beq.n	8005358 <lfs_pair_isnull+0x1e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3304      	adds	r3, #4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005356:	d101      	bne.n	800535c <lfs_pair_isnull+0x22>
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <lfs_pair_isnull+0x24>
 800535c:	2300      	movs	r3, #0
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	b2db      	uxtb	r3, r3
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d017      	beq.n	80053b6 <lfs_pair_cmp+0x46>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	3304      	adds	r3, #4
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d00f      	beq.n	80053b6 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	3304      	adds	r3, #4
 800539e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d008      	beq.n	80053b6 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d001      	beq.n	80053b6 <lfs_pair_cmp+0x46>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <lfs_pair_cmp+0x48>
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <lfs_pair_fromle32>:
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
}

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80053c4:	b590      	push	{r4, r7, lr}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fc57 	bl	8004c84 <lfs_fromle32>
 80053d6:	4602      	mov	r2, r0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	1d1c      	adds	r4, r3, #4
 80053e6:	4610      	mov	r0, r2
 80053e8:	f7ff fc4c 	bl	8004c84 <lfs_fromle32>
 80053ec:	4603      	mov	r3, r0
 80053ee:	6023      	str	r3, [r4, #0]
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd90      	pop	{r4, r7, pc}

080053f8 <lfs_pair_tole32>:

static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff fc48 	bl	8004c9a <lfs_tole32>
 800540a:	4602      	mov	r2, r0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3304      	adds	r3, #4
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	1d1c      	adds	r4, r3, #4
 800541a:	4610      	mov	r0, r2
 800541c:	f7ff fc3d 	bl	8004c9a <lfs_tole32>
 8005420:	4603      	mov	r3, r0
 8005422:	6023      	str	r3, [r4, #0]
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bd90      	pop	{r4, r7, pc}

0800542c <lfs_tag_isvalid>:
typedef int32_t lfs_stag_t;

#define LFS_MKTAG(type, id, size) \
    (((lfs_tag_t)(type) << 20) | ((lfs_tag_t)(id) << 10) | (lfs_tag_t)(size))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	43db      	mvns	r3, r3
 8005438:	0fdb      	lsrs	r3, r3, #31
 800543a:	b2db      	uxtb	r3, r3
}
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	059b      	lsls	r3, r3, #22
 8005454:	159b      	asrs	r3, r3, #22
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800545a:	bf0c      	ite	eq
 800545c:	2301      	moveq	r3, #1
 800545e:	2300      	movne	r3, #0
 8005460:	b2db      	uxtb	r3, r3
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	0d1b      	lsrs	r3, r3, #20
 800547a:	b29b      	uxth	r3, r3
 800547c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005480:	b29b      	uxth	r3, r3
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	0d1b      	lsrs	r3, r3, #20
 800549a:	b29b      	uxth	r3, r3
 800549c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054a0:	b29b      	uxth	r3, r3
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	0d1b      	lsrs	r3, r3, #20
 80054ba:	b2db      	uxtb	r3, r3
}
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff ffec 	bl	80054ae <lfs_tag_chunk>
 80054d6:	4603      	mov	r3, r0
 80054d8:	b25b      	sxtb	r3, r3
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0a9b      	lsrs	r3, r3, #10
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054f4:	b29b      	uxth	r3, r3
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ff8f 	bl	8005448 <lfs_tag_isdelete>
 800552a:	4603      	mov	r3, r0
 800552c:	461a      	mov	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4413      	add	r3, r2
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff ffe5 	bl	8005502 <lfs_tag_size>
 8005538:	4603      	mov	r3, r0
 800553a:	3304      	adds	r3, #4
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(struct lfs_gstate *a,
        const struct lfs_gstate *b) {
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e012      	b.n	800557a <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	4413      	add	r3, r2
 800555c:	6819      	ldr	r1, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	4413      	add	r3, r2
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	4403      	add	r3, r0
 8005570:	404a      	eors	r2, r1
 8005572:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3301      	adds	r3, #1
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b02      	cmp	r3, #2
 800557e:	dde9      	ble.n	8005554 <lfs_gstate_xor+0x10>
    }
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const struct lfs_gstate *a) {
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	e00b      	b.n	80055b4 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	4413      	add	r3, r2
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <lfs_gstate_iszero+0x20>
            return false;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e006      	b.n	80055bc <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3301      	adds	r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	ddf0      	ble.n	800559c <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80055ba:	2301      	movs	r3, #1
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <lfs_gstate_hasorphans>:

static inline bool lfs_gstate_hasorphans(const struct lfs_gstate *a) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff ff94 	bl	8005502 <lfs_tag_size>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <lfs_gstate_hasmove>:

static inline uint8_t lfs_gstate_getorphans(const struct lfs_gstate *a) {
    return lfs_tag_size(a->tag);
}

static inline bool lfs_gstate_hasmove(const struct lfs_gstate *a) {
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff ff37 	bl	800546e <lfs_tag_type1>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf14      	ite	ne
 8005606:	2301      	movne	r3, #1
 8005608:	2300      	moveq	r3, #0
 800560a:	b2db      	uxtb	r3, r3
}
 800560c:	4618      	mov	r0, r3
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const struct lfs_gstate *a,
        const lfs_block_t *pair) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff ff23 	bl	800546e <lfs_tag_type1>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <lfs_gstate_hasmovehere+0x30>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3304      	adds	r3, #4
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fe9b 	bl	8005370 <lfs_pair_cmp>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <lfs_gstate_hasmovehere+0x30>
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <lfs_gstate_hasmovehere+0x32>
 8005644:	2300      	movs	r3, #0
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	b2db      	uxtb	r3, r3
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <lfs_gstate_xororphans>:

static inline void lfs_gstate_xororphans(struct lfs_gstate *a,
        const struct lfs_gstate *b, bool orphans) {
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	4613      	mov	r3, r2
 8005660:	71fb      	strb	r3, [r7, #7]
    a->tag ^= LFS_MKTAG(0x800, 0, 0) & (b->tag ^ ((uint32_t)orphans << 31));
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6819      	ldr	r1, [r3, #0]
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	07db      	lsls	r3, r3, #31
 800566e:	404b      	eors	r3, r1
 8005670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005674:	405a      	eors	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	601a      	str	r2, [r3, #0]
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <lfs_gstate_xormove>:

static inline void lfs_gstate_xormove(struct lfs_gstate *a,
        const struct lfs_gstate *b, uint16_t id, const lfs_block_t pair[2]) {
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	80fb      	strh	r3, [r7, #6]
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	6819      	ldr	r1, [r3, #0]
            (id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80056a6:	4283      	cmp	r3, r0
 80056a8:	d006      	beq.n	80056b8 <lfs_gstate_xormove+0x30>
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	029b      	lsls	r3, r3, #10
 80056ae:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80056b2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80056b6:	e000      	b.n	80056ba <lfs_gstate_xormove+0x32>
 80056b8:	2300      	movs	r3, #0
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 80056ba:	4059      	eors	r1, r3
 80056bc:	4b16      	ldr	r3, [pc, #88]	; (8005718 <lfs_gstate_xormove+0x90>)
 80056be:	400b      	ands	r3, r1
 80056c0:	405a      	eors	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	601a      	str	r2, [r3, #0]
    a->pair[0] ^= b->pair[0] ^ ((id != 0x3ff) ? pair[0] : 0);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	6859      	ldr	r1, [r3, #4]
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80056d4:	4283      	cmp	r3, r0
 80056d6:	d002      	beq.n	80056de <lfs_gstate_xormove+0x56>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	e000      	b.n	80056e0 <lfs_gstate_xormove+0x58>
 80056de:	2300      	movs	r3, #0
 80056e0:	404b      	eors	r3, r1
 80056e2:	405a      	eors	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	605a      	str	r2, [r3, #4]
    a->pair[1] ^= b->pair[1] ^ ((id != 0x3ff) ? pair[1] : 0);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	6899      	ldr	r1, [r3, #8]
 80056f0:	88fb      	ldrh	r3, [r7, #6]
 80056f2:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80056f6:	4283      	cmp	r3, r0
 80056f8:	d003      	beq.n	8005702 <lfs_gstate_xormove+0x7a>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	3304      	adds	r3, #4
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	e000      	b.n	8005704 <lfs_gstate_xormove+0x7c>
 8005702:	2300      	movs	r3, #0
 8005704:	404b      	eors	r3, r1
 8005706:	405a      	eors	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	bf00      	nop
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	7ffffc00 	.word	0x7ffffc00

0800571c <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(struct lfs_gstate *a) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff faab 	bl	8004c84 <lfs_fromle32>
 800572e:	4602      	mov	r2, r0
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff faa3 	bl	8004c84 <lfs_fromle32>
 800573e:	4602      	mov	r2, r0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff fa9b 	bl	8004c84 <lfs_fromle32>
 800574e:	4602      	mov	r2, r0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	609a      	str	r2, [r3, #8]
}
 8005754:	bf00      	nop
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <lfs_gstate_tole32>:

static inline void lfs_gstate_tole32(struct lfs_gstate *a) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff fa96 	bl	8004c9a <lfs_tole32>
 800576e:	4602      	mov	r2, r0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fa8e 	bl	8004c9a <lfs_tole32>
 800577e:	4602      	mov	r2, r0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff fa86 	bl	8004c9a <lfs_tole32>
 800578e:	4602      	mov	r2, r0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	609a      	str	r2, [r3, #8]
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <lfs_ctz_fromle32>:

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fa6b 	bl	8004c84 <lfs_fromle32>
 80057ae:	4602      	mov	r2, r0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff fa63 	bl	8004c84 <lfs_fromle32>
 80057be:	4602      	mov	r2, r0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	605a      	str	r2, [r3, #4]
}
 80057c4:	bf00      	nop
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <lfs_superblock_fromle32>:
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
    ctz->head = lfs_tole32(ctz->head);
    ctz->size = lfs_tole32(ctz->size);
}

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fa53 	bl	8004c84 <lfs_fromle32>
 80057de:	4602      	mov	r2, r0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff fa4b 	bl	8004c84 <lfs_fromle32>
 80057ee:	4602      	mov	r2, r0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff fa43 	bl	8004c84 <lfs_fromle32>
 80057fe:	4602      	mov	r2, r0
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fa3b 	bl	8004c84 <lfs_fromle32>
 800580e:	4602      	mov	r2, r0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff fa33 	bl	8004c84 <lfs_fromle32>
 800581e:	4602      	mov	r2, r0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff fa2b 	bl	8004c84 <lfs_fromle32>
 800582e:	4602      	mov	r2, r0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	615a      	str	r2, [r3, #20]
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <lfs_superblock_tole32>:

static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff fa26 	bl	8004c9a <lfs_tole32>
 800584e:	4602      	mov	r2, r0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fa1e 	bl	8004c9a <lfs_tole32>
 800585e:	4602      	mov	r2, r0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fa16 	bl	8004c9a <lfs_tole32>
 800586e:	4602      	mov	r2, r0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff fa0e 	bl	8004c9a <lfs_tole32>
 800587e:	4602      	mov	r2, r0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff fa06 	bl	8004c9a <lfs_tole32>
 800588e:	4602      	mov	r2, r0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff f9fe 	bl	8004c9a <lfs_tole32>
 800589e:	4602      	mov	r2, r0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	615a      	str	r2, [r3, #20]
}
 80058a4:	bf00      	nop
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <lfs_alloc_lookahead>:
static int lfs1_traverse(lfs_t *lfs,
        int (*cb)(void*, lfs_block_t), void *data);
#endif

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	4413      	add	r3, r2
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058ce:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 80058d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80058d4:	fb01 f202 	mul.w	r2, r1, r2
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d212      	bcs.n	800590c <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	009a      	lsls	r2, r3, #2
 80058f0:	440a      	add	r2, r1
 80058f2:	6811      	ldr	r1, [r2, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	f002 021f 	and.w	r2, r2, #31
 80058fa:	2001      	movs	r0, #1
 80058fc:	fa00 f202 	lsl.w	r2, r0, r2
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4403      	add	r3, r0
 8005908:	430a      	orrs	r2, r1
 800590a:	601a      	str	r2, [r3, #0]
    }

    return 0;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
	...

0800591c <lfs_alloc>:

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8005926:	e04f      	b.n	80059c8 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592c:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593c:	1e5a      	subs	r2, r3, #1
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	2101      	movs	r1, #1
 8005958:	fa01 f303 	lsl.w	r3, r1, r3
 800595c:	4013      	ands	r3, r2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d132      	bne.n	80059c8 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4413      	add	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800596e:	6a12      	ldr	r2, [r2, #32]
 8005970:	fbb3 f1f2 	udiv	r1, r3, r2
 8005974:	fb01 f202 	mul.w	r2, r1, r2
 8005978:	1a9a      	subs	r2, r3, r2
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 800597e:	e009      	b.n	8005994 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598e:	1e5a      	subs	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599c:	429a      	cmp	r2, r3
 800599e:	d011      	beq.n	80059c4 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2101      	movs	r1, #1
 80059ba:	fa01 f303 	lsl.w	r3, r1, r3
 80059be:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1dd      	bne.n	8005980 <lfs_alloc+0x64>
                }

                return 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e04a      	b.n	8005a5e <lfs_alloc+0x142>
        while (lfs->free.i != lfs->free.size) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d1a9      	bne.n	8005928 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10d      	bne.n	80059f8 <lfs_alloc+0xdc>
            LFS_ERROR("No more free space %"PRIu32,
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	4413      	add	r3, r2
 80059e6:	461a      	mov	r2, r3
 80059e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80059ec:	481e      	ldr	r0, [pc, #120]	; (8005a68 <lfs_alloc+0x14c>)
 80059ee:	f00c fbb1 	bl	8012154 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 80059f2:	f06f 031b 	mvn.w	r3, #27
 80059f6:	e032      	b.n	8005a5e <lfs_alloc+0x142>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a00:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a06:	6a12      	ldr	r2, [r2, #32]
 8005a08:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a0c:	fb01 f202 	mul.w	r2, r1, r2
 8005a10:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	00da      	lsls	r2, r3, #3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a22:	4619      	mov	r1, r3
 8005a24:	4610      	mov	r0, r2
 8005a26:	f7ff f8bd 	bl	8004ba4 <lfs_min>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	461a      	mov	r2, r3
 8005a42:	2100      	movs	r1, #0
 8005a44:	f00b ffb0 	bl	80119a8 <memset>
        int err = lfs_fs_traverse(lfs, lfs_alloc_lookahead, lfs);
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	4908      	ldr	r1, [pc, #32]	; (8005a6c <lfs_alloc+0x150>)
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f003 fc5b 	bl	8009308 <lfs_fs_traverse>
 8005a52:	60f8      	str	r0, [r7, #12]
        if (err) {
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f43f af65 	beq.w	8005926 <lfs_alloc+0xa>
            return err;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	0801378c 	.word	0x0801378c
 8005a6c:	080058ad 	.word	0x080058ad

08005a70 <lfs_alloc_ack>:

static void lfs_alloc_ack(lfs_t *lfs) {
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a7c:	6a1a      	ldr	r2, [r3, #32]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <lfs_dir_getslice>:


/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b08f      	sub	sp, #60	; 0x3c
 8005a94:	af04      	add	r7, sp, #16
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair) &&
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3330      	adds	r3, #48	; 0x30
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fdac 	bl	8005614 <lfs_gstate_hasmovehere>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80b2 	beq.w	8005c28 <lfs_dir_getslice+0x198>
            lfs_tag_id(gtag) <= lfs_tag_id(lfs->gstate.tag)) {
 8005ac4:	6838      	ldr	r0, [r7, #0]
 8005ac6:	f7ff fd0c 	bl	80054e2 <lfs_tag_id>
 8005aca:	4603      	mov	r3, r0
 8005acc:	461c      	mov	r4, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff fd05 	bl	80054e2 <lfs_tag_id>
 8005ad8:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair) &&
 8005ada:	429c      	cmp	r4, r3
 8005adc:	f200 80a4 	bhi.w	8005c28 <lfs_dir_getslice+0x198>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005ae6:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8005ae8:	e09e      	b.n	8005c28 <lfs_dir_getslice+0x198>
        off -= lfs_tag_dsize(ntag);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fd15 	bl	800551c <lfs_tag_dsize>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8005afe:	68f9      	ldr	r1, [r7, #12]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2204      	movs	r2, #4
 8005b06:	9203      	str	r2, [sp, #12]
 8005b08:	f107 0210 	add.w	r2, r7, #16
 8005b0c:	9202      	str	r2, [sp, #8]
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b10:	9201      	str	r2, [sp, #4]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	2304      	movs	r3, #4
 8005b16:	460a      	mov	r2, r1
 8005b18:	2100      	movs	r1, #0
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f7ff f91e 	bl	8004d5c <lfs_bd_read>
 8005b20:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <lfs_dir_getslice+0x9c>
            return err;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	e089      	b.n	8005c40 <lfs_dir_getslice+0x1b0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff f8bf 	bl	8004cb2 <lfs_frombe32>
 8005b34:	4602      	mov	r2, r0
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4053      	eors	r3, r2
 8005b3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b3e:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff fcce 	bl	80054e2 <lfs_tag_id>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d02b      	beq.n	8005ba4 <lfs_dir_getslice+0x114>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005b4c:	69f8      	ldr	r0, [r7, #28]
 8005b4e:	f7ff fc8e 	bl	800546e <lfs_tag_type1>
 8005b52:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8005b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b58:	d124      	bne.n	8005ba4 <lfs_dir_getslice+0x114>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8005b5a:	69f8      	ldr	r0, [r7, #28]
 8005b5c:	f7ff fcc1 	bl	80054e2 <lfs_tag_id>
 8005b60:	4603      	mov	r3, r0
 8005b62:	461c      	mov	r4, r3
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff fcb9 	bl	80054e2 <lfs_tag_id>
 8005b70:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005b72:	429c      	cmp	r4, r3
 8005b74:	d816      	bhi.n	8005ba4 <lfs_dir_getslice+0x114>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	1ad2      	subs	r2, r2, r3
 8005b7c:	4b32      	ldr	r3, [pc, #200]	; (8005c48 <lfs_dir_getslice+0x1b8>)
 8005b7e:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8005b80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d102      	bne.n	8005b94 <lfs_dir_getslice+0x104>
                // found where we were created
                return LFS_ERR_NOENT;
 8005b8e:	f06f 0301 	mvn.w	r3, #1
 8005b92:	e055      	b.n	8005c40 <lfs_dir_getslice+0x1b0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005b94:	69f8      	ldr	r0, [r7, #28]
 8005b96:	f7ff fc97 	bl	80054c8 <lfs_tag_splice>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	029a      	lsls	r2, r3, #10
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	1ad2      	subs	r2, r2, r3
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	405a      	eors	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d138      	bne.n	8005c28 <lfs_dir_getslice+0x198>
            if (lfs_tag_isdelete(tag)) {
 8005bb6:	69f8      	ldr	r0, [r7, #28]
 8005bb8:	f7ff fc46 	bl	8005448 <lfs_tag_isdelete>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <lfs_dir_getslice+0x138>
                return LFS_ERR_NOENT;
 8005bc2:	f06f 0301 	mvn.w	r3, #1
 8005bc6:	e03b      	b.n	8005c40 <lfs_dir_getslice+0x1b0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8005bc8:	69f8      	ldr	r0, [r7, #28]
 8005bca:	f7ff fc9a 	bl	8005502 <lfs_tag_size>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe ffe6 	bl	8004ba4 <lfs_min>
 8005bd8:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8005be0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be4:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8005be6:	3204      	adds	r2, #4
 8005be8:	6979      	ldr	r1, [r7, #20]
 8005bea:	9103      	str	r1, [sp, #12]
 8005bec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bee:	9102      	str	r1, [sp, #8]
 8005bf0:	9201      	str	r2, [sp, #4]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7ff f8ae 	bl	8004d5c <lfs_bd_read>
 8005c00:	61b8      	str	r0, [r7, #24]
            if (err) {
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <lfs_dir_getslice+0x17c>
                return err;
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	e019      	b.n	8005c40 <lfs_dir_getslice+0x1b0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8005c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	18d0      	adds	r0, r2, r3
 8005c12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	f00b fec4 	bl	80119a8 <memset>

            return tag + gdiff;
 8005c20:	6a3a      	ldr	r2, [r7, #32]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	4413      	add	r3, r2
 8005c26:	e00b      	b.n	8005c40 <lfs_dir_getslice+0x1b0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fc76 	bl	800551c <lfs_tag_dsize>
 8005c30:	4603      	mov	r3, r0
 8005c32:	3304      	adds	r3, #4
 8005c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c36:	429a      	cmp	r2, r3
 8005c38:	f4bf af57 	bcs.w	8005aea <lfs_dir_getslice+0x5a>
        }
    }

    return LFS_ERR_NOENT;
 8005c3c:	f06f 0301 	mvn.w	r3, #1
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	372c      	adds	r7, #44	; 0x2c
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd90      	pop	{r4, r7, pc}
 8005c48:	000ffc00 	.word	0x000ffc00

08005c4c <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af04      	add	r7, sp, #16
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8005c5a:	6838      	ldr	r0, [r7, #0]
 8005c5c:	f7ff fc51 	bl	8005502 <lfs_tag_size>
 8005c60:	4603      	mov	r3, r0
 8005c62:	9302      	str	r3, [sp, #8]
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff ff0c 	bl	8005a90 <lfs_dir_getslice>
 8005c78:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b08c      	sub	sp, #48	; 0x30
 8005c86:	af04      	add	r7, sp, #16
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
 8005c8e:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8005c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c98:	441a      	add	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	f240 80c0 	bls.w	8005e26 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8005ca6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005caa:	e0c1      	b.n	8005e30 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8005cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cae:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d03f      	beq.n	8005d36 <lfs_dir_getread+0xb4>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f113 0f02 	cmn.w	r3, #2
 8005cbe:	d13a      	bne.n	8005d36 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8005cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d232      	bcs.n	8005d36 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d324      	bcc.n	8005d24 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6859      	ldr	r1, [r3, #4]
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce4:	1acb      	subs	r3, r1, r3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	4619      	mov	r1, r3
 8005cea:	69b8      	ldr	r0, [r7, #24]
 8005cec:	f7fe ff5a 	bl	8004ba4 <lfs_min>
 8005cf0:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cfc:	1acb      	subs	r3, r1, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	4619      	mov	r1, r3
 8005d04:	69f8      	ldr	r0, [r7, #28]
 8005d06:	f00b fe41 	bl	801198c <memcpy>

                data += diff;
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	4413      	add	r3, r2
 8005d10:	61fb      	str	r3, [r7, #28]
                off += diff;
 8005d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	4413      	add	r3, r2
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8005d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8005d22:	e080      	b.n	8005e26 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	69b8      	ldr	r0, [r7, #24]
 8005d30:	f7fe ff38 	bl	8004ba4 <lfs_min>
 8005d34:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f113 0f02 	cmn.w	r3, #2
 8005d3e:	d13a      	bne.n	8005db6 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8005d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d232      	bcs.n	8005db6 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d324      	bcc.n	8005da4 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6859      	ldr	r1, [r3, #4]
 8005d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d64:	1acb      	subs	r3, r1, r3
 8005d66:	4413      	add	r3, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	69b8      	ldr	r0, [r7, #24]
 8005d6c:	f7fe ff1a 	bl	8004ba4 <lfs_min>
 8005d70:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d7c:	1acb      	subs	r3, r1, r3
 8005d7e:	4413      	add	r3, r2
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4619      	mov	r1, r3
 8005d84:	69f8      	ldr	r0, [r7, #28]
 8005d86:	f00b fe01 	bl	801198c <memcpy>

                data += diff;
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	4413      	add	r3, r2
 8005d90:	61fb      	str	r3, [r7, #28]
                off += diff;
 8005d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	4413      	add	r3, r2
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8005d9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8005da2:	e040      	b.n	8005e26 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	4619      	mov	r1, r3
 8005dae:	69b8      	ldr	r0, [r7, #24]
 8005db0:	f7fe fef8 	bl	8004ba4 <lfs_min>
 8005db4:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	f06f 0201 	mvn.w	r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005dc8:	f7fe fefc 	bl	8004bc4 <lfs_aligndown>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8005dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	441a      	add	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	4619      	mov	r1, r3
 8005de0:	4610      	mov	r0, r2
 8005de2:	f7fe ff04 	bl	8004bee <lfs_alignup>
 8005de6:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	4619      	mov	r1, r3
 8005df0:	4610      	mov	r0, r2
 8005df2:	f7fe fed7 	bl	8004ba4 <lfs_min>
 8005df6:	4602      	mov	r2, r0
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6889      	ldr	r1, [r1, #8]
 8005e08:	9102      	str	r1, [sp, #8]
 8005e0a:	9201      	str	r2, [sp, #4]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff fe3b 	bl	8005a90 <lfs_dir_getslice>
 8005e1a:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	da01      	bge.n	8005e26 <lfs_dir_getread+0x1a4>
            return err;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	e004      	b.n	8005e30 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8005e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f47f af3f 	bne.w	8005cac <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <lfs_dir_traverse_filter>:

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8005e38:	b590      	push	{r4, r7, lr}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <lfs_dir_traverse_filter+0x1e>
 8005e52:	4b23      	ldr	r3, [pc, #140]	; (8005ee0 <lfs_dir_traverse_filter+0xa8>)
 8005e54:	e000      	b.n	8005e58 <lfs_dir_traverse_filter+0x20>
 8005e56:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <lfs_dir_traverse_filter+0xac>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8005e58:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	405a      	eors	r2, r3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4013      	ands	r3, r2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d014      	beq.n	8005e94 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff faea 	bl	8005448 <lfs_tag_isdelete>
 8005e74:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10c      	bne.n	8005e94 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	4a18      	ldr	r2, [pc, #96]	; (8005ee0 <lfs_dir_traverse_filter+0xa8>)
 8005e7e:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <lfs_dir_traverse_filter+0xb0>)
 8005e86:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8005e88:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8005e8c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d101      	bne.n	8005e98 <lfs_dir_traverse_filter+0x60>
        return true;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e01e      	b.n	8005ed6 <lfs_dir_traverse_filter+0x9e>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005e98:	68b8      	ldr	r0, [r7, #8]
 8005e9a:	f7ff fae8 	bl	800546e <lfs_tag_type1>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea4:	d116      	bne.n	8005ed4 <lfs_dir_traverse_filter+0x9c>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8005ea6:	68b8      	ldr	r0, [r7, #8]
 8005ea8:	f7ff fb1b 	bl	80054e2 <lfs_tag_id>
 8005eac:	4603      	mov	r3, r0
 8005eae:	461c      	mov	r4, r3
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fb14 	bl	80054e2 <lfs_tag_id>
 8005eba:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	d809      	bhi.n	8005ed4 <lfs_dir_traverse_filter+0x9c>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005ec0:	68b8      	ldr	r0, [r7, #8]
 8005ec2:	f7ff fb01 	bl	80054c8 <lfs_tag_splice>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	029a      	lsls	r2, r3, #10
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	441a      	add	r2, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	601a      	str	r2, [r3, #0]
    }

    return false;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd90      	pop	{r4, r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	7ffffc00 	.word	0x7ffffc00
 8005ee4:	700ffc00 	.word	0x700ffc00
 8005ee8:	000ffc00 	.word	0x000ffc00

08005eec <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount, bool hasseenmove,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8005eec:	b590      	push	{r4, r7, lr}
 8005eee:	b09d      	sub	sp, #116	; 0x74
 8005ef0:	af0a      	add	r7, sp, #40	; 0x28
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 8005efa:	6838      	ldr	r0, [r7, #0]
 8005efc:	f7ff fb0e 	bl	800551c <lfs_tag_dsize>
 8005f00:	4602      	mov	r2, r0
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	441a      	add	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d233      	bcs.n	8005f76 <lfs_dir_traverse+0x8a>
            off += lfs_tag_dsize(ptag);
 8005f0e:	6838      	ldr	r0, [r7, #0]
 8005f10:	f7ff fb04 	bl	800551c <lfs_tag_dsize>
 8005f14:	4602      	mov	r2, r0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4413      	add	r3, r2
 8005f1a:	607b      	str	r3, [r7, #4]
            int err = lfs_bd_read(lfs,
 8005f1c:	68f9      	ldr	r1, [r7, #12]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2204      	movs	r2, #4
 8005f24:	9203      	str	r2, [sp, #12]
 8005f26:	f107 021c 	add.w	r2, r7, #28
 8005f2a:	9202      	str	r2, [sp, #8]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	9201      	str	r2, [sp, #4]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	2304      	movs	r3, #4
 8005f34:	460a      	mov	r2, r1
 8005f36:	2100      	movs	r1, #0
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7fe ff0f 	bl	8004d5c <lfs_bd_read>
 8005f3e:	63f8      	str	r0, [r7, #60]	; 0x3c
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8005f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <lfs_dir_traverse+0x5e>
                return err;
 8005f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f48:	e13f      	b.n	80061ca <lfs_dir_traverse+0x2de>
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe feb0 	bl	8004cb2 <lfs_frombe32>
 8005f52:	4602      	mov	r2, r0
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	4053      	eors	r3, r2
 8005f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f5c:	61fb      	str	r3, [r7, #28]
            disk.block = dir->pair[0];
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	617b      	str	r3, [r7, #20]
            disk.off = off+sizeof(lfs_tag_t);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3304      	adds	r3, #4
 8005f68:	61bb      	str	r3, [r7, #24]
            buffer = &disk;
 8005f6a:	f107 0314 	add.w	r3, r7, #20
 8005f6e:	647b      	str	r3, [r7, #68]	; 0x44
            ptag = tag;
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	e02d      	b.n	8005fd2 <lfs_dir_traverse+0xe6>
        } else if (attrcount > 0) {
 8005f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	dd0c      	ble.n	8005f96 <lfs_dir_traverse+0xaa>
            tag = attrs[0].tag;
 8005f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	61fb      	str	r3, [r7, #28]
            buffer = attrs[0].buffer;
 8005f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	647b      	str	r3, [r7, #68]	; 0x44
            attrs += 1;
 8005f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	65bb      	str	r3, [r7, #88]	; 0x58
            attrcount -= 1;
 8005f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f90:	3b01      	subs	r3, #1
 8005f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f94:	e01d      	b.n	8005fd2 <lfs_dir_traverse+0xe6>
        } else if (!hasseenmove &&
 8005f96:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8005f9a:	f083 0301 	eor.w	r3, r3, #1
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d014      	beq.n	8005fce <lfs_dir_traverse+0xe2>
                lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	333c      	adds	r3, #60	; 0x3c
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	4611      	mov	r1, r2
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff fb31 	bl	8005614 <lfs_gstate_hasmovehere>
 8005fb2:	4603      	mov	r3, r0
        } else if (!hasseenmove &&
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <lfs_dir_traverse+0xe2>
            // Wait, we have pending move? Handle this here (we need to
            // or else we risk letting moves fall out of date)
            tag = lfs->gpending.tag & LFS_MKTAG(0x7ff, 0x3ff, 0);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fbc:	4b85      	ldr	r3, [pc, #532]	; (80061d4 <lfs_dir_traverse+0x2e8>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	61fb      	str	r3, [r7, #28]
            buffer = NULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	647b      	str	r3, [r7, #68]	; 0x44
            hasseenmove = true;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8005fcc:	e001      	b.n	8005fd2 <lfs_dir_traverse+0xe6>
        } else {
            return 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e0fb      	b.n	80061ca <lfs_dir_traverse+0x2de>
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8005fd2:	4b81      	ldr	r3, [pc, #516]	; (80061d8 <lfs_dir_traverse+0x2ec>)
 8005fd4:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fda:	405a      	eors	r2, r3
 8005fdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fe0:	400b      	ands	r3, r1
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f040 80ea 	bne.w	80061be <lfs_dir_traverse+0x2d2>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
 8005fea:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005fec:	f7ff fa79 	bl	80054e2 <lfs_tag_id>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d03b      	beq.n	800606e <lfs_dir_traverse+0x182>
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
 8005ff6:	f107 031c 	add.w	r3, r7, #28
 8005ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8005ffc:	4b77      	ldr	r3, [pc, #476]	; (80061dc <lfs_dir_traverse+0x2f0>)
 8005ffe:	9308      	str	r3, [sp, #32]
 8006000:	2300      	movs	r3, #0
 8006002:	9307      	str	r3, [sp, #28]
 8006004:	2300      	movs	r3, #0
 8006006:	9306      	str	r3, [sp, #24]
 8006008:	2300      	movs	r3, #0
 800600a:	9305      	str	r3, [sp, #20]
 800600c:	2300      	movs	r3, #0
 800600e:	9304      	str	r3, [sp, #16]
 8006010:	2300      	movs	r3, #0
 8006012:	9303      	str	r3, [sp, #12]
 8006014:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006018:	9302      	str	r3, [sp, #8]
 800601a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff ff5f 	bl	8005eec <lfs_dir_traverse>
 800602e:	6378      	str	r0, [r7, #52]	; 0x34
                    dir, off, ptag, attrs, attrcount, hasseenmove,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
 8006030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006032:	2b00      	cmp	r3, #0
 8006034:	da01      	bge.n	800603a <lfs_dir_traverse+0x14e>
                return filter;
 8006036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006038:	e0c7      	b.n	80061ca <lfs_dir_traverse+0x2de>
            }

            if (filter) {
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 80c0 	bne.w	80061c2 <lfs_dir_traverse+0x2d6>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff fa4c 	bl	80054e2 <lfs_tag_id>
 800604a:	4603      	mov	r3, r0
 800604c:	461a      	mov	r2, r3
 800604e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006052:	4293      	cmp	r3, r2
 8006054:	f200 80b7 	bhi.w	80061c6 <lfs_dir_traverse+0x2da>
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff fa41 	bl	80054e2 <lfs_tag_id>
 8006060:	4603      	mov	r3, r0
 8006062:	461a      	mov	r2, r3
 8006064:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8006068:	4293      	cmp	r3, r2
 800606a:	f240 80ac 	bls.w	80061c6 <lfs_dir_traverse+0x2da>
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff fa0c 	bl	800548e <lfs_tag_type3>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	f43f af3e 	beq.w	8005efa <lfs_dir_traverse+0xe>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff fa04 	bl	800548e <lfs_tag_type3>
 8006086:	4603      	mov	r3, r0
 8006088:	461a      	mov	r2, r3
 800608a:	f240 1301 	movw	r3, #257	; 0x101
 800608e:	429a      	cmp	r2, r3
 8006090:	d138      	bne.n	8006104 <lfs_dir_traverse+0x218>
            uint16_t fromid = lfs_tag_size(tag);
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fa34 	bl	8005502 <lfs_tag_size>
 800609a:	4603      	mov	r3, r0
 800609c:	84fb      	strh	r3, [r7, #38]	; 0x26
            uint16_t toid = lfs_tag_id(tag);
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff fa1e 	bl	80054e2 <lfs_tag_id>
 80060a6:	4603      	mov	r3, r0
 80060a8:	84bb      	strh	r3, [r7, #36]	; 0x24
            int err = lfs_dir_traverse(lfs,
 80060aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060ac:	3301      	adds	r3, #1
 80060ae:	b29b      	uxth	r3, r3
                    buffer, 0, LFS_BLOCK_NULL, NULL, 0, true,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
 80060b0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80060b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060b4:	1a8a      	subs	r2, r1, r2
 80060b6:	b291      	uxth	r1, r2
 80060b8:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80060bc:	440a      	add	r2, r1
 80060be:	b292      	uxth	r2, r2
            int err = lfs_dir_traverse(lfs,
 80060c0:	b212      	sxth	r2, r2
 80060c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060c4:	9109      	str	r1, [sp, #36]	; 0x24
 80060c6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80060c8:	9108      	str	r1, [sp, #32]
 80060ca:	9207      	str	r2, [sp, #28]
 80060cc:	9306      	str	r3, [sp, #24]
 80060ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060d0:	9305      	str	r3, [sp, #20]
 80060d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80060d6:	9304      	str	r3, [sp, #16]
 80060d8:	4b41      	ldr	r3, [pc, #260]	; (80061e0 <lfs_dir_traverse+0x2f4>)
 80060da:	9303      	str	r3, [sp, #12]
 80060dc:	2301      	movs	r3, #1
 80060de:	9302      	str	r3, [sp, #8]
 80060e0:	2300      	movs	r3, #0
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	2300      	movs	r3, #0
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ec:	2200      	movs	r2, #0
 80060ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7ff fefb 	bl	8005eec <lfs_dir_traverse>
 80060f6:	6238      	str	r0, [r7, #32]
                    cb, data);
            if (err) {
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f43f aefd 	beq.w	8005efa <lfs_dir_traverse+0xe>
                return err;
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	e062      	b.n	80061ca <lfs_dir_traverse+0x2de>
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff f9c1 	bl	800548e <lfs_tag_type3>
 800610c:	4603      	mov	r3, r0
 800610e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8006112:	d144      	bne.n	800619e <lfs_dir_traverse+0x2b2>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8006114:	2300      	movs	r3, #0
 8006116:	643b      	str	r3, [r7, #64]	; 0x40
 8006118:	e038      	b.n	800618c <lfs_dir_traverse+0x2a0>
                const struct lfs_attr *a = buffer;
 800611a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800611e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006120:	4613      	mov	r3, r2
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	461a      	mov	r2, r3
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	4413      	add	r3, r2
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006134:	051c      	lsls	r4, r3, #20
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff f9d2 	bl	80054e2 <lfs_tag_id>
 800613e:	4603      	mov	r3, r0
 8006140:	461a      	mov	r2, r3
 8006142:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8006146:	4413      	add	r3, r2
 8006148:	029b      	lsls	r3, r3, #10
 800614a:	ea44 0103 	orr.w	r1, r4, r3
 800614e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006150:	4613      	mov	r3, r2
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	461a      	mov	r2, r3
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	4413      	add	r3, r2
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8006162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006164:	4613      	mov	r3, r2
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	461a      	mov	r2, r3
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	4413      	add	r3, r2
 8006172:	685a      	ldr	r2, [r3, #4]
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8006174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006176:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8006178:	4798      	blx	r3
 800617a:	62b8      	str	r0, [r7, #40]	; 0x28
                if (err) {
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <lfs_dir_traverse+0x29a>
                    return err;
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	e021      	b.n	80061ca <lfs_dir_traverse+0x2de>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8006186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006188:	3301      	adds	r3, #1
 800618a:	643b      	str	r3, [r7, #64]	; 0x40
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff f9b7 	bl	8005502 <lfs_tag_size>
 8006194:	4602      	mov	r2, r0
 8006196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006198:	4293      	cmp	r3, r2
 800619a:	d3be      	bcc.n	800611a <lfs_dir_traverse+0x22e>
 800619c:	e6ad      	b.n	8005efa <lfs_dir_traverse+0xe>
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800619e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80061a2:	029a      	lsls	r2, r3, #10
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	18d1      	adds	r1, r2, r3
 80061a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061ac:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80061ae:	4798      	blx	r3
 80061b0:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f43f aea0 	beq.w	8005efa <lfs_dir_traverse+0xe>
                return err;
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	e005      	b.n	80061ca <lfs_dir_traverse+0x2de>
            continue;
 80061be:	bf00      	nop
 80061c0:	e69b      	b.n	8005efa <lfs_dir_traverse+0xe>
                continue;
 80061c2:	bf00      	nop
 80061c4:	e699      	b.n	8005efa <lfs_dir_traverse+0xe>
                continue;
 80061c6:	bf00      	nop
    while (true) {
 80061c8:	e697      	b.n	8005efa <lfs_dir_traverse+0xe>
            }
        }
    }
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	374c      	adds	r7, #76	; 0x4c
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd90      	pop	{r4, r7, pc}
 80061d2:	bf00      	nop
 80061d4:	7ffffc00 	.word	0x7ffffc00
 80061d8:	7ff00000 	.word	0x7ff00000
 80061dc:	08005e39 	.word	0x08005e39
 80061e0:	600ffc00 	.word	0x600ffc00

080061e4 <lfs_dir_fetchmatch>:

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b09f      	sub	sp, #124	; 0x7c
 80061e8:	af04      	add	r7, sp, #16
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80061f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061f6:	667b      	str	r3, [r7, #100]	; 0x64

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80061f8:	2300      	movs	r3, #0
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061fc:	2300      	movs	r3, #0
 80061fe:	633b      	str	r3, [r7, #48]	; 0x30
    int r = 0;
 8006200:	2300      	movs	r3, #0
 8006202:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8006204:	2300      	movs	r3, #0
 8006206:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006208:	e052      	b.n	80062b0 <lfs_dir_fetchmatch+0xcc>
        int err = lfs_bd_read(lfs,
 800620a:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800620c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8006214:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8006216:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800621a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800621c:	0092      	lsls	r2, r2, #2
 800621e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8006220:	2104      	movs	r1, #4
 8006222:	9103      	str	r1, [sp, #12]
 8006224:	9202      	str	r2, [sp, #8]
 8006226:	2200      	movs	r2, #0
 8006228:	9201      	str	r2, [sp, #4]
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	2304      	movs	r3, #4
 800622e:	4602      	mov	r2, r0
 8006230:	2100      	movs	r1, #0
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7fe fd92 	bl	8004d5c <lfs_bd_read>
 8006238:	6378      	str	r0, [r7, #52]	; 0x34
        revs[i] = lfs_fromle32(revs[i]);
 800623a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	3368      	adds	r3, #104	; 0x68
 8006240:	443b      	add	r3, r7
 8006242:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006246:	4618      	mov	r0, r3
 8006248:	f7fe fd1c 	bl	8004c84 <lfs_fromle32>
 800624c:	4602      	mov	r2, r0
 800624e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	3368      	adds	r3, #104	; 0x68
 8006254:	443b      	add	r3, r7
 8006256:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800625a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <lfs_dir_fetchmatch+0x88>
 8006260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006262:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006266:	d001      	beq.n	800626c <lfs_dir_fetchmatch+0x88>
            return err;
 8006268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626a:	e2e9      	b.n	8006840 <lfs_dir_fetchmatch+0x65c>
        }

        if (err != LFS_ERR_CORRUPT &&
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006272:	d01a      	beq.n	80062aa <lfs_dir_fetchmatch+0xc6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8006274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	3368      	adds	r3, #104	; 0x68
 800627a:	443b      	add	r3, r7
 800627c:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8006280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006282:	3301      	adds	r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	bfb8      	it	lt
 800628c:	425b      	neglt	r3, r3
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	3368      	adds	r3, #104	; 0x68
 8006292:	443b      	add	r3, r7
 8006294:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f7fe fce4 	bl	8004c68 <lfs_scmp>
 80062a0:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dd01      	ble.n	80062aa <lfs_dir_fetchmatch+0xc6>
            r = i;
 80062a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a8:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80062aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062ac:	3301      	adds	r3, #1
 80062ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	dda9      	ble.n	800620a <lfs_dir_fetchmatch+0x26>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80062b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	bfb8      	it	lt
 80062c0:	425b      	neglt	r3, r3
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	4413      	add	r3, r2
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80062ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062d0:	3301      	adds	r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	bfb8      	it	lt
 80062da:	425b      	neglt	r3, r3
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	4413      	add	r3, r2
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 80062e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	bfb8      	it	lt
 80062f2:	425b      	neglt	r3, r3
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	3368      	adds	r3, #104	; 0x68
 80062f8:	443b      	add	r3, r7
 80062fa:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2200      	movs	r2, #0
 8006306:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8006308:	2300      	movs	r3, #0
 800630a:	65bb      	str	r3, [r7, #88]	; 0x58
 800630c:	e289      	b.n	8006822 <lfs_dir_fetchmatch+0x63e>
        lfs_off_t off = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = LFS_BLOCK_NULL;
 8006312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006316:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800631e:	4a90      	ldr	r2, [pc, #576]	; (8006560 <lfs_dir_fetchmatch+0x37c>)
 8006320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006328:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800632c:	2300      	movs	r3, #0
 800632e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 8006332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006334:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe fcad 	bl	8004c9a <lfs_tole32>
 8006340:	4602      	mov	r2, r0
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(LFS_BLOCK_NULL, &dir->rev, sizeof(dir->rev));
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	3308      	adds	r3, #8
 800634a:	2204      	movs	r2, #4
 800634c:	4619      	mov	r1, r3
 800634e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006352:	f003 fae5 	bl	8009920 <lfs_crc>
 8006356:	6478      	str	r0, [r7, #68]	; 0x44
        dir->rev = lfs_fromle32(dir->rev);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe fc91 	bl	8004c84 <lfs_fromle32>
 8006362:	4602      	mov	r2, r0
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8006368:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800636a:	f7ff f8d7 	bl	800551c <lfs_tag_dsize>
 800636e:	4602      	mov	r2, r0
 8006370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006372:	4413      	add	r3, r2
 8006374:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8006376:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800637c:	69d8      	ldr	r0, [r3, #28]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2204      	movs	r2, #4
 8006384:	9203      	str	r2, [sp, #12]
 8006386:	f107 0220 	add.w	r2, r7, #32
 800638a:	9202      	str	r2, [sp, #8]
 800638c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800638e:	9201      	str	r2, [sp, #4]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	4603      	mov	r3, r0
 8006394:	460a      	mov	r2, r1
 8006396:	2100      	movs	r1, #0
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7fe fcdf 	bl	8004d5c <lfs_bd_read>
 800639e:	63f8      	str	r0, [r7, #60]	; 0x3c
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80063a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <lfs_dir_fetchmatch+0x1d6>
                if (err == LFS_ERR_CORRUPT) {
 80063a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80063ac:	d103      	bne.n	80063b6 <lfs_dir_fetchmatch+0x1d2>
                    // can't continue?
                    dir->erased = false;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2200      	movs	r2, #0
 80063b2:	759a      	strb	r2, [r3, #22]
                    break;
 80063b4:	e1bd      	b.n	8006732 <lfs_dir_fetchmatch+0x54e>
                }
                return err;
 80063b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b8:	e242      	b.n	8006840 <lfs_dir_fetchmatch+0x65c>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80063ba:	f107 0320 	add.w	r3, r7, #32
 80063be:	2204      	movs	r2, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80063c4:	f003 faac 	bl	8009920 <lfs_crc>
 80063c8:	6478      	str	r0, [r7, #68]	; 0x44
            tag = lfs_frombe32(tag) ^ ptag;
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fe fc70 	bl	8004cb2 <lfs_frombe32>
 80063d2:	4602      	mov	r2, r0
 80063d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d6:	4053      	eors	r3, r2
 80063d8:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag) ||
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff f825 	bl	800542c <lfs_tag_isvalid>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f083 0301 	eor.w	r3, r3, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <lfs_dir_fetchmatch+0x222>
                    off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff f893 	bl	800551c <lfs_tag_dsize>
 80063f6:	4602      	mov	r2, r0
 80063f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063fa:	441a      	add	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006400:	69db      	ldr	r3, [r3, #28]
            if (!lfs_tag_isvalid(tag) ||
 8006402:	429a      	cmp	r2, r3
 8006404:	d91b      	bls.n	800643e <lfs_dir_fetchmatch+0x25a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8006406:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006408:	f7ff f831 	bl	800546e <lfs_tag_type1>
 800640c:	4603      	mov	r3, r0
 800640e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006412:	d10d      	bne.n	8006430 <lfs_dir_fetchmatch+0x24c>
                        dir->off % lfs->cfg->prog_size == 0);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800641c:	6992      	ldr	r2, [r2, #24]
 800641e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006422:	fb01 f202 	mul.w	r2, r1, r2
 8006426:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <lfs_dir_fetchmatch+0x24c>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <lfs_dir_fetchmatch+0x24e>
 8006430:	2300      	movs	r3, #0
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	b2da      	uxtb	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	759a      	strb	r2, [r3, #22]
                break;
 800643c:	e179      	b.n	8006732 <lfs_dir_fetchmatch+0x54e>
            }

            ptag = tag;
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff f812 	bl	800546e <lfs_tag_type1>
 800644a:	4603      	mov	r3, r0
 800644c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006450:	d15f      	bne.n	8006512 <lfs_dir_fetchmatch+0x32e>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8006452:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8006458:	69dc      	ldr	r4, [r3, #28]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006460:	3204      	adds	r2, #4
 8006462:	2104      	movs	r1, #4
 8006464:	9103      	str	r1, [sp, #12]
 8006466:	f107 011c 	add.w	r1, r7, #28
 800646a:	9102      	str	r1, [sp, #8]
 800646c:	9201      	str	r2, [sp, #4]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	4623      	mov	r3, r4
 8006472:	4602      	mov	r2, r0
 8006474:	2100      	movs	r1, #0
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7fe fc70 	bl	8004d5c <lfs_bd_read>
 800647c:	63f8      	str	r0, [r7, #60]	; 0x3c
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800647e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d009      	beq.n	8006498 <lfs_dir_fetchmatch+0x2b4>
                    if (err == LFS_ERR_CORRUPT) {
 8006484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006486:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800648a:	d103      	bne.n	8006494 <lfs_dir_fetchmatch+0x2b0>
                        dir->erased = false;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2200      	movs	r2, #0
 8006490:	759a      	strb	r2, [r3, #22]
                        break;
 8006492:	e14e      	b.n	8006732 <lfs_dir_fetchmatch+0x54e>
                    }
                    return err;
 8006494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 8006496:	e1d3      	b.n	8006840 <lfs_dir_fetchmatch+0x65c>
                }
                dcrc = lfs_fromle32(dcrc);
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe fbf2 	bl	8004c84 <lfs_fromle32>
 80064a0:	4603      	mov	r3, r0
 80064a2:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d003      	beq.n	80064b4 <lfs_dir_fetchmatch+0x2d0>
                    dir->erased = false;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2200      	movs	r2, #0
 80064b0:	759a      	strb	r2, [r3, #22]
                    break;
 80064b2:	e13e      	b.n	8006732 <lfs_dir_fetchmatch+0x54e>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fff9 	bl	80054ae <lfs_tag_chunk>
 80064bc:	4603      	mov	r3, r0
 80064be:	07db      	lsls	r3, r3, #31
 80064c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064c2:	4053      	eors	r3, r2
 80064c4:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers
                lfs->seed ^= crc;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064cc:	405a      	eors	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 80064d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d4:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff f81f 	bl	800551c <lfs_tag_dsize>
 80064de:	4602      	mov	r2, r0
 80064e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e2:	441a      	add	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064ec:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80064f4:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80064f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 80064fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006508:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = LFS_BLOCK_NULL;
 800650a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800650e:	647b      	str	r3, [r7, #68]	; 0x44
 8006510:	e72a      	b.n	8006368 <lfs_dir_fetchmatch+0x184>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8006512:	2304      	movs	r3, #4
 8006514:	643b      	str	r3, [r7, #64]	; 0x40
 8006516:	e030      	b.n	800657a <lfs_dir_fetchmatch+0x396>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8006518:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800651e:	69dc      	ldr	r4, [r3, #28]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006528:	440a      	add	r2, r1
 800652a:	2101      	movs	r1, #1
 800652c:	9103      	str	r1, [sp, #12]
 800652e:	f107 011b 	add.w	r1, r7, #27
 8006532:	9102      	str	r1, [sp, #8]
 8006534:	9201      	str	r2, [sp, #4]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	4623      	mov	r3, r4
 800653a:	4602      	mov	r2, r0
 800653c:	2100      	movs	r1, #0
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f7fe fc0c 	bl	8004d5c <lfs_bd_read>
 8006544:	63f8      	str	r0, [r7, #60]	; 0x3c
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8006546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <lfs_dir_fetchmatch+0x380>
                    if (err == LFS_ERR_CORRUPT) {
 800654c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006552:	d103      	bne.n	800655c <lfs_dir_fetchmatch+0x378>
                        dir->erased = false;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2200      	movs	r2, #0
 8006558:	759a      	strb	r2, [r3, #22]
 800655a:	e016      	b.n	800658a <lfs_dir_fetchmatch+0x3a6>
                        break;
                    }
                    return err;
 800655c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 800655e:	e16f      	b.n	8006840 <lfs_dir_fetchmatch+0x65c>
 8006560:	080137e4 	.word	0x080137e4
                }

                crc = lfs_crc(crc, &dat, 1);
 8006564:	f107 031b 	add.w	r3, r7, #27
 8006568:	2201      	movs	r2, #1
 800656a:	4619      	mov	r1, r3
 800656c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800656e:	f003 f9d7 	bl	8009920 <lfs_crc>
 8006572:	6478      	str	r0, [r7, #68]	; 0x44
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8006574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006576:	3301      	adds	r3, #1
 8006578:	643b      	str	r3, [r7, #64]	; 0x40
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe ffcd 	bl	800551c <lfs_tag_dsize>
 8006582:	4602      	mov	r2, r0
 8006584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006586:	4293      	cmp	r3, r2
 8006588:	d3c6      	bcc.n	8006518 <lfs_dir_fetchmatch+0x334>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe ff6e 	bl	800546e <lfs_tag_type1>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d113      	bne.n	80065c0 <lfs_dir_fetchmatch+0x3dc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe ffa1 	bl	80054e2 <lfs_tag_id>
 80065a0:	4603      	mov	r3, r0
 80065a2:	461a      	mov	r2, r3
 80065a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80065a8:	4293      	cmp	r3, r2
 80065aa:	f200 8081 	bhi.w	80066b0 <lfs_dir_fetchmatch+0x4cc>
                    tempcount = lfs_tag_id(tag) + 1;
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe ff96 	bl	80054e2 <lfs_tag_id>
 80065b6:	4603      	mov	r3, r0
 80065b8:	3301      	adds	r3, #1
 80065ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80065be:	e077      	b.n	80066b0 <lfs_dir_fetchmatch+0x4cc>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe ff53 	bl	800546e <lfs_tag_type1>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ce:	d134      	bne.n	800663a <lfs_dir_fetchmatch+0x456>
                tempcount += lfs_tag_splice(tag);
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe ff78 	bl	80054c8 <lfs_tag_splice>
 80065d8:	4603      	mov	r3, r0
 80065da:	b29a      	uxth	r2, r3
 80065dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80065e0:	4413      	add	r3, r2
 80065e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80065e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e8:	4b97      	ldr	r3, [pc, #604]	; (8006848 <lfs_dir_fetchmatch+0x664>)
 80065ea:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80065ec:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80065f0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80065f4:	6a3a      	ldr	r2, [r7, #32]
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d104      	bne.n	8006604 <lfs_dir_fetchmatch+0x420>
                    tempbesttag |= 0x80000000;
 80065fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006600:	64bb      	str	r3, [r7, #72]	; 0x48
 8006602:	e055      	b.n	80066b0 <lfs_dir_fetchmatch+0x4cc>
                } else if (tempbesttag != -1 &&
 8006604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800660a:	d051      	beq.n	80066b0 <lfs_dir_fetchmatch+0x4cc>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe ff67 	bl	80054e2 <lfs_tag_id>
 8006614:	4603      	mov	r3, r0
 8006616:	461c      	mov	r4, r3
 8006618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe ff61 	bl	80054e2 <lfs_tag_id>
 8006620:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8006622:	429c      	cmp	r4, r3
 8006624:	d844      	bhi.n	80066b0 <lfs_dir_fetchmatch+0x4cc>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	4618      	mov	r0, r3
 800662a:	f7fe ff4d 	bl	80054c8 <lfs_tag_splice>
 800662e:	4603      	mov	r3, r0
 8006630:	029a      	lsls	r2, r3, #10
 8006632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006634:	4413      	add	r3, r2
 8006636:	64bb      	str	r3, [r7, #72]	; 0x48
 8006638:	e03a      	b.n	80066b0 <lfs_dir_fetchmatch+0x4cc>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	4618      	mov	r0, r3
 800663e:	f7fe ff16 	bl	800546e <lfs_tag_type1>
 8006642:	4603      	mov	r3, r0
 8006644:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006648:	d132      	bne.n	80066b0 <lfs_dir_fetchmatch+0x4cc>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe ff2e 	bl	80054ae <lfs_tag_chunk>
 8006652:	4603      	mov	r3, r0
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	bf14      	ite	ne
 800665c:	2301      	movne	r3, #1
 800665e:	2300      	moveq	r3, #0
 8006660:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 8006664:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800666a:	69dc      	ldr	r4, [r3, #28]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006672:	3204      	adds	r2, #4
 8006674:	2108      	movs	r1, #8
 8006676:	9103      	str	r1, [sp, #12]
 8006678:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800667c:	9102      	str	r1, [sp, #8]
 800667e:	9201      	str	r2, [sp, #4]
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	4623      	mov	r3, r4
 8006684:	4602      	mov	r2, r0
 8006686:	2100      	movs	r1, #0
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7fe fb67 	bl	8004d5c <lfs_bd_read>
 800668e:	63f8      	str	r0, [r7, #60]	; 0x3c
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8006690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <lfs_dir_fetchmatch+0x4c2>
                    if (err == LFS_ERR_CORRUPT) {
 8006696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006698:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800669c:	d103      	bne.n	80066a6 <lfs_dir_fetchmatch+0x4c2>
                        dir->erased = false;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2200      	movs	r2, #0
 80066a2:	759a      	strb	r2, [r3, #22]
                        break;
 80066a4:	e045      	b.n	8006732 <lfs_dir_fetchmatch+0x54e>
                    }
                }
                lfs_pair_fromle32(temptail);
 80066a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe fe8a 	bl	80053c4 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80066b0:	6a3a      	ldr	r2, [r7, #32]
 80066b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066b4:	405a      	eors	r2, r3
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	4013      	ands	r3, r2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f47f ae54 	bne.w	8006368 <lfs_dir_fetchmatch+0x184>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80066c0:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 80066c6:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 80066c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ca:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	f107 0210 	add.w	r2, r7, #16
 80066d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066d6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80066da:	4798      	blx	r3
 80066dc:	63b8      	str	r0, [r7, #56]	; 0x38
                if (res < 0) {
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	da09      	bge.n	80066f8 <lfs_dir_fetchmatch+0x514>
                    if (res == LFS_ERR_CORRUPT) {
 80066e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80066ea:	d103      	bne.n	80066f4 <lfs_dir_fetchmatch+0x510>
                        dir->erased = false;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2200      	movs	r2, #0
 80066f0:	759a      	strb	r2, [r3, #22]
 80066f2:	e01e      	b.n	8006732 <lfs_dir_fetchmatch+0x54e>
                        break;
                    }
                    return res;
 80066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                return err;
 80066f6:	e0a3      	b.n	8006840 <lfs_dir_fetchmatch+0x65c>
                }

                if (res == LFS_CMP_EQ) {
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d102      	bne.n	8006704 <lfs_dir_fetchmatch+0x520>
                    // found a match
                    tempbesttag = tag;
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	64bb      	str	r3, [r7, #72]	; 0x48
 8006702:	e631      	b.n	8006368 <lfs_dir_fetchmatch+0x184>
                } else if (res == LFS_CMP_GT &&
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	2b02      	cmp	r3, #2
 8006708:	f47f ae2e 	bne.w	8006368 <lfs_dir_fetchmatch+0x184>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	4618      	mov	r0, r3
 8006710:	f7fe fee7 	bl	80054e2 <lfs_tag_id>
 8006714:	4603      	mov	r3, r0
 8006716:	461c      	mov	r4, r3
 8006718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe fee1 	bl	80054e2 <lfs_tag_id>
 8006720:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8006722:	429c      	cmp	r4, r3
 8006724:	f63f ae20 	bhi.w	8006368 <lfs_dir_fetchmatch+0x184>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800672e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006730:	e61a      	b.n	8006368 <lfs_dir_fetchmatch+0x184>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d100      	bne.n	800673c <lfs_dir_fetchmatch+0x558>
 800673a:	e05d      	b.n	80067f8 <lfs_dir_fetchmatch+0x614>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair)) {
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3330      	adds	r3, #48	; 0x30
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	4611      	mov	r1, r2
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe ff65 	bl	8005614 <lfs_gstate_hasmovehere>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d028      	beq.n	80067a2 <lfs_dir_fetchmatch+0x5be>
                if (lfs_tag_id(lfs->gstate.tag) == lfs_tag_id(besttag)) {
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe fec4 	bl	80054e2 <lfs_tag_id>
 800675a:	4603      	mov	r3, r0
 800675c:	461c      	mov	r4, r3
 800675e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe febe 	bl	80054e2 <lfs_tag_id>
 8006766:	4603      	mov	r3, r0
 8006768:	429c      	cmp	r4, r3
 800676a:	d104      	bne.n	8006776 <lfs_dir_fetchmatch+0x592>
                    besttag |= 0x80000000;
 800676c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800676e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006772:	667b      	str	r3, [r7, #100]	; 0x64
 8006774:	e015      	b.n	80067a2 <lfs_dir_fetchmatch+0x5be>
                } else if (besttag != -1 &&
 8006776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800677c:	d011      	beq.n	80067a2 <lfs_dir_fetchmatch+0x5be>
                        lfs_tag_id(lfs->gstate.tag) < lfs_tag_id(besttag)) {
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe fead 	bl	80054e2 <lfs_tag_id>
 8006788:	4603      	mov	r3, r0
 800678a:	461c      	mov	r4, r3
 800678c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe fea7 	bl	80054e2 <lfs_tag_id>
 8006794:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8006796:	429c      	cmp	r4, r3
 8006798:	d203      	bcs.n	80067a2 <lfs_dir_fetchmatch+0x5be>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800679a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800679c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80067a0:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 80067a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00f      	beq.n	80067c8 <lfs_dir_fetchmatch+0x5e4>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 80067a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fe99 	bl	80054e2 <lfs_tag_id>
 80067b0:	4603      	mov	r3, r0
 80067b2:	461a      	mov	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	8a9b      	ldrh	r3, [r3, #20]
 80067b8:	4619      	mov	r1, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	f7fe f9f2 	bl	8004ba4 <lfs_min>
 80067c0:	4603      	mov	r3, r0
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067c6:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 80067c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe fe2e 	bl	800542c <lfs_tag_isvalid>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <lfs_dir_fetchmatch+0x5f6>
                return besttag;
 80067d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067d8:	e032      	b.n	8006840 <lfs_dir_fetchmatch+0x65c>
            } else if (lfs_tag_id(besttag) < dir->count) {
 80067da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fe fe80 	bl	80054e2 <lfs_tag_id>
 80067e2:	4603      	mov	r3, r0
 80067e4:	461a      	mov	r2, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	8a9b      	ldrh	r3, [r3, #20]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d202      	bcs.n	80067f4 <lfs_dir_fetchmatch+0x610>
                return LFS_ERR_NOENT;
 80067ee:	f06f 0301 	mvn.w	r3, #1
 80067f2:	e025      	b.n	8006840 <lfs_dir_fetchmatch+0x65c>
            } else {
                return 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	e023      	b.n	8006840 <lfs_dir_fetchmatch+0x65c>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe fd88 	bl	8005310 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8006800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006802:	3301      	adds	r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	bfb8      	it	lt
 800680c:	425b      	neglt	r3, r3
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	3368      	adds	r3, #104	; 0x68
 8006812:	443b      	add	r3, r7
 8006814:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800681c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800681e:	3301      	adds	r3, #1
 8006820:	65bb      	str	r3, [r7, #88]	; 0x58
 8006822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006824:	2b01      	cmp	r3, #1
 8006826:	f77f ad72 	ble.w	800630e <lfs_dir_fetchmatch+0x12a>
    }

    LFS_ERROR("Corrupted dir pair at %"PRIx32" %"PRIx32,
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f240 31cd 	movw	r1, #973	; 0x3cd
 8006836:	4805      	ldr	r0, [pc, #20]	; (800684c <lfs_dir_fetchmatch+0x668>)
 8006838:	f00b fc8c 	bl	8012154 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800683c:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8006840:	4618      	mov	r0, r3
 8006842:	376c      	adds	r7, #108	; 0x6c
 8006844:	46bd      	mov	sp, r7
 8006846:	bd90      	pop	{r4, r7, pc}
 8006848:	000ffc00 	.word	0x000ffc00
 800684c:	080137b4 	.word	0x080137b4

08006850 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af04      	add	r7, sp, #16
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=0 can never match a tag since this
    // pattern has the invalid bit set
    return lfs_dir_fetchmatch(lfs, dir, pair, -1, 0, NULL, NULL, NULL);
 800685c:	2300      	movs	r3, #0
 800685e:	9303      	str	r3, [sp, #12]
 8006860:	2300      	movs	r3, #0
 8006862:	9302      	str	r3, [sp, #8]
 8006864:	2300      	movs	r3, #0
 8006866:	9301      	str	r3, [sp, #4]
 8006868:	2300      	movs	r3, #0
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f7ff fcb5 	bl	80061e4 <lfs_dir_fetchmatch>
 800687a:	4603      	mov	r3, r0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        struct lfs_gstate *gstate) {
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	; 0x28
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
    struct lfs_gstate temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8006890:	f107 0310 	add.w	r3, r7, #16
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	4b12      	ldr	r3, [pc, #72]	; (80068e0 <lfs_dir_getgstate+0x5c>)
 8006898:	4a12      	ldr	r2, [pc, #72]	; (80068e4 <lfs_dir_getgstate+0x60>)
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f7ff f9d5 	bl	8005c4c <lfs_dir_get>
 80068a2:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	da05      	bge.n	80068b6 <lfs_dir_getgstate+0x32>
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	f113 0f02 	cmn.w	r3, #2
 80068b0:	d001      	beq.n	80068b6 <lfs_dir_getgstate+0x32>
        return res;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	e00f      	b.n	80068d6 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	f113 0f02 	cmn.w	r3, #2
 80068bc:	d00a      	beq.n	80068d4 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 80068be:	f107 0310 	add.w	r3, r7, #16
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe ff2a 	bl	800571c <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 80068c8:	f107 0310 	add.w	r3, r7, #16
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fe fe38 	bl	8005544 <lfs_gstate_xor>
    }

    return 0;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3720      	adds	r7, #32
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	7ff0000c 	.word	0x7ff0000c
 80068e4:	7ff00000 	.word	0x7ff00000

080068e8 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80068e8:	b590      	push	{r4, r7, lr}
 80068ea:	b08f      	sub	sp, #60	; 0x3c
 80068ec:	af04      	add	r7, sp, #16
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	689c      	ldr	r4, [r3, #8]
 8006906:	68b8      	ldr	r0, [r7, #8]
 8006908:	f7fe fdfb 	bl	8005502 <lfs_tag_size>
 800690c:	4603      	mov	r3, r0
 800690e:	4619      	mov	r1, r3
 8006910:	4620      	mov	r0, r4
 8006912:	f7fe f947 	bl	8004ba4 <lfs_min>
 8006916:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8006918:	6a3c      	ldr	r4, [r7, #32]
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	6852      	ldr	r2, [r2, #4]
 8006922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006924:	6849      	ldr	r1, [r1, #4]
 8006926:	69b8      	ldr	r0, [r7, #24]
 8006928:	9003      	str	r0, [sp, #12]
 800692a:	9102      	str	r1, [sp, #8]
 800692c:	9201      	str	r2, [sp, #4]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	4622      	mov	r2, r4
 8006934:	2100      	movs	r1, #0
 8006936:	6a38      	ldr	r0, [r7, #32]
 8006938:	f7fe fb20 	bl	8004f7c <lfs_bd_cmp>
 800693c:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <lfs_dir_find_match+0x60>
        return res;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	e014      	b.n	8006972 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	689c      	ldr	r4, [r3, #8]
 800694c:	68b8      	ldr	r0, [r7, #8]
 800694e:	f7fe fdd8 	bl	8005502 <lfs_tag_size>
 8006952:	4603      	mov	r3, r0
 8006954:	429c      	cmp	r4, r3
 8006956:	d00b      	beq.n	8006970 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	689c      	ldr	r4, [r3, #8]
 800695c:	68b8      	ldr	r0, [r7, #8]
 800695e:	f7fe fdd0 	bl	8005502 <lfs_tag_size>
 8006962:	4603      	mov	r3, r0
 8006964:	429c      	cmp	r4, r3
 8006966:	d201      	bcs.n	800696c <lfs_dir_find_match+0x84>
 8006968:	2301      	movs	r3, #1
 800696a:	e002      	b.n	8006972 <lfs_dir_find_match+0x8a>
 800696c:	2302      	movs	r3, #2
 800696e:	e000      	b.n	8006972 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	372c      	adds	r7, #44	; 0x2c
 8006976:	46bd      	mov	sp, r7
 8006978:	bd90      	pop	{r4, r7, pc}

0800697a <lfs_dir_commitprog>:
    lfs_off_t begin;
    lfs_off_t end;
};

static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800697a:	b590      	push	{r4, r7, lr}
 800697c:	b08b      	sub	sp, #44	; 0x2c
 800697e:	af04      	add	r7, sp, #16
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	607a      	str	r2, [r7, #4]
 8006986:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f103 0010 	add.w	r0, r3, #16
 800698e:	68fc      	ldr	r4, [r7, #12]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	6852      	ldr	r2, [r2, #4]
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	9103      	str	r1, [sp, #12]
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	9102      	str	r1, [sp, #8]
 80069a0:	9201      	str	r2, [sp, #4]
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	2300      	movs	r3, #0
 80069a6:	4622      	mov	r2, r4
 80069a8:	4601      	mov	r1, r0
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7fe fbda 	bl	8005164 <lfs_bd_prog>
 80069b0:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <lfs_dir_commitprog+0x42>
        return err;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	e010      	b.n	80069de <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f002 ffab 	bl	8009920 <lfs_crc>
 80069ca:	4602      	mov	r2, r0
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	60da      	str	r2, [r3, #12]
    commit->off += size;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	441a      	add	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	605a      	str	r2, [r3, #4]
    return 0;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd90      	pop	{r4, r7, pc}

080069e6 <lfs_dir_commitattr>:

static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 80069e6:	b590      	push	{r4, r7, lr}
 80069e8:	b08f      	sub	sp, #60	; 0x3c
 80069ea:	af04      	add	r7, sp, #16
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7fe fd91 	bl	800551c <lfs_tag_dsize>
 80069fa:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	441a      	add	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d902      	bls.n	8006a12 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8006a0c:	f06f 031b 	mvn.w	r3, #27
 8006a10:	e065      	b.n	8006ade <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	4053      	eors	r3, r2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe f953 	bl	8004cca <lfs_tobe32>
 8006a24:	4603      	mov	r3, r0
 8006a26:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8006a28:	f107 0214 	add.w	r2, r7, #20
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff ffa2 	bl	800697a <lfs_dir_commitprog>
 8006a36:	61f8      	str	r0, [r7, #28]
    if (err) {
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <lfs_dir_commitattr+0x5c>
        return err;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	e04d      	b.n	8006ade <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	db0c      	blt.n	8006a62 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	3b04      	subs	r3, #4
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7ff ff92 	bl	800697a <lfs_dir_commitprog>
 8006a56:	61f8      	str	r0, [r7, #28]
        if (err) {
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d039      	beq.n	8006ad2 <lfs_dir_commitattr+0xec>
            return err;
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	e03d      	b.n	8006ade <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8006a66:	2300      	movs	r3, #0
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6a:	e02d      	b.n	8006ac8 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8006a6c:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8006a6e:	6a3a      	ldr	r2, [r7, #32]
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8006a74:	1f1c      	subs	r4, r3, #4
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8006a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a80:	440a      	add	r2, r1
 8006a82:	2101      	movs	r1, #1
 8006a84:	9103      	str	r1, [sp, #12]
 8006a86:	f107 0113 	add.w	r1, r7, #19
 8006a8a:	9102      	str	r1, [sp, #8]
 8006a8c:	9201      	str	r2, [sp, #4]
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	4623      	mov	r3, r4
 8006a92:	4602      	mov	r2, r0
 8006a94:	2100      	movs	r1, #0
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f7fe f960 	bl	8004d5c <lfs_bd_read>
 8006a9c:	61f8      	str	r0, [r7, #28]
            if (err) {
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <lfs_dir_commitattr+0xc2>
                return err;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	e01a      	b.n	8006ade <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8006aa8:	f107 0213 	add.w	r2, r7, #19
 8006aac:	2301      	movs	r3, #1
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7ff ff62 	bl	800697a <lfs_dir_commitprog>
 8006ab6:	61f8      	str	r0, [r7, #28]
            if (err) {
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <lfs_dir_commitattr+0xdc>
                return err;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	e00d      	b.n	8006ade <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	3b04      	subs	r3, #4
 8006acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d3cc      	bcc.n	8006a6c <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	609a      	str	r2, [r3, #8]
    return 0;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	372c      	adds	r7, #44	; 0x2c
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd90      	pop	{r4, r7, pc}

08006ae6 <lfs_dir_commitcrc>:

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8006ae6:	b590      	push	{r4, r7, lr}
 8006ae8:	b097      	sub	sp, #92	; 0x5c
 8006aea:	af04      	add	r7, sp, #16
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t off1 = commit->off + sizeof(lfs_tag_t);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	3304      	adds	r3, #4
 8006af6:	633b      	str	r3, [r7, #48]	; 0x30
    const lfs_off_t end = lfs_alignup(off1 + sizeof(uint32_t),
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	1d1a      	adds	r2, r3, #4
            lfs->cfg->prog_size);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(off1 + sizeof(uint32_t),
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f7fe f872 	bl	8004bee <lfs_alignup>
 8006b0a:	62f8      	str	r0, [r7, #44]	; 0x2c

    // create crc tags to fill up remainder of commit, note that
    // padding is not crcd, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8006b0c:	e09c      	b.n	8006c48 <lfs_dir_commitcrc+0x162>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	3304      	adds	r3, #4
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8006b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe f83f 	bl	8004ba4 <lfs_min>
 8006b26:	4602      	mov	r2, r0
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	4413      	add	r3, r2
 8006b2c:	647b      	str	r3, [r7, #68]	; 0x44
        if (noff < end) {
 8006b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d206      	bcs.n	8006b44 <lfs_dir_commitcrc+0x5e>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	3b08      	subs	r3, #8
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006b3e:	f7fe f831 	bl	8004ba4 <lfs_min>
 8006b42:	6478      	str	r0, [r7, #68]	; 0x44
        }

        // read erased state from next program unit
        lfs_tag_t tag = LFS_BLOCK_NULL;
 8006b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b48:	61bb      	str	r3, [r7, #24]
        int err = lfs_bd_read(lfs,
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2204      	movs	r2, #4
 8006b52:	9203      	str	r2, [sp, #12]
 8006b54:	f107 0218 	add.w	r2, r7, #24
 8006b58:	9202      	str	r2, [sp, #8]
 8006b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b5c:	9201      	str	r2, [sp, #4]
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	2304      	movs	r3, #4
 8006b62:	460a      	mov	r2, r1
 8006b64:	2100      	movs	r1, #0
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fe f8f8 	bl	8004d5c <lfs_bd_read>
 8006b6c:	6238      	str	r0, [r7, #32]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <lfs_dir_commitcrc+0x9a>
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006b7a:	d001      	beq.n	8006b80 <lfs_dir_commitcrc+0x9a>
            return err;
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	e0d3      	b.n	8006d28 <lfs_dir_commitcrc+0x242>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe f895 	bl	8004cb2 <lfs_frombe32>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	0fdb      	lsrs	r3, r3, #31
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bf14      	ite	ne
 8006b92:	2301      	movne	r3, #1
 8006b94:	2300      	moveq	r3, #0
 8006b96:	77fb      	strb	r3, [r7, #31]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8006b98:	7ffb      	ldrb	r3, [r7, #31]
 8006b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b9e:	051a      	lsls	r2, r3, #20
 8006ba0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	1acb      	subs	r3, r1, r3
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8006bac:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8006bb0:	61bb      	str	r3, [r7, #24]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	4053      	eors	r3, r2
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe f885 	bl	8004cca <lfs_tobe32>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f107 0110 	add.w	r1, r7, #16
 8006bcc:	2204      	movs	r2, #4
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f002 fea6 	bl	8009920 <lfs_crc>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe f85b 	bl	8004c9a <lfs_tole32>
 8006be4:	4603      	mov	r3, r0
 8006be6:	617b      	str	r3, [r7, #20]
        err = lfs_bd_prog(lfs,
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f103 0010 	add.w	r0, r3, #16
 8006bee:	687c      	ldr	r4, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	6852      	ldr	r2, [r2, #4]
 8006bf8:	2108      	movs	r1, #8
 8006bfa:	9103      	str	r1, [sp, #12]
 8006bfc:	f107 0110 	add.w	r1, r7, #16
 8006c00:	9102      	str	r1, [sp, #8]
 8006c02:	9201      	str	r2, [sp, #4]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2300      	movs	r3, #0
 8006c08:	4622      	mov	r2, r4
 8006c0a:	4601      	mov	r1, r0
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7fe faa9 	bl	8005164 <lfs_bd_prog>
 8006c12:	6238      	str	r0, [r7, #32]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <lfs_dir_commitcrc+0x138>
            return err;
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	e084      	b.n	8006d28 <lfs_dir_commitcrc+0x242>
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fe fc6e 	bl	8005502 <lfs_tag_size>
 8006c26:	4603      	mov	r3, r0
 8006c28:	1d1a      	adds	r2, r3, #4
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	441a      	add	r2, r3
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8006c34:	7ffb      	ldrb	r3, [r7, #31]
 8006c36:	07da      	lsls	r2, r3, #31
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	405a      	eors	r2, r3
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	609a      	str	r2, [r3, #8]
        commit->crc = LFS_BLOCK_NULL; // reset crc for next "commit"
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c46:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	f63f af5d 	bhi.w	8006b0e <lfs_dir_commitcrc+0x28>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f103 0110 	add.w	r1, r3, #16
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fe fa4c 	bl	80050fc <lfs_bd_sync>
 8006c64:	62b8      	str	r0, [r7, #40]	; 0x28
    if (err) {
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <lfs_dir_commitcrc+0x18a>
        return err;
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	e05b      	b.n	8006d28 <lfs_dir_commitcrc+0x242>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	643b      	str	r3, [r7, #64]	; 0x40
    lfs_off_t noff = off1;
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (off < end) {
 8006c7a:	e050      	b.n	8006d1e <lfs_dir_commitcrc+0x238>
        uint32_t crc = LFS_BLOCK_NULL;
 8006c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c80:	63bb      	str	r3, [r7, #56]	; 0x38
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8006c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
 8006c86:	e025      	b.n	8006cd4 <lfs_dir_commitcrc+0x1ee>
            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8006c88:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8006c8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8e:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8006c90:	1d18      	adds	r0, r3, #4
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2201      	movs	r2, #1
 8006c98:	9203      	str	r2, [sp, #12]
 8006c9a:	f107 020f 	add.w	r2, r7, #15
 8006c9e:	9202      	str	r2, [sp, #8]
 8006ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ca2:	9201      	str	r2, [sp, #4]
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	460a      	mov	r2, r1
 8006caa:	2100      	movs	r1, #0
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7fe f855 	bl	8004d5c <lfs_bd_read>
 8006cb2:	62b8      	str	r0, [r7, #40]	; 0x28
                    commit->block, i, &dat, 1);
            if (err) {
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <lfs_dir_commitcrc+0x1d8>
                return err;
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	e034      	b.n	8006d28 <lfs_dir_commitcrc+0x242>
            }

            crc = lfs_crc(crc, &dat, 1);
 8006cbe:	f107 030f 	add.w	r3, r7, #15
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cc8:	f002 fe2a 	bl	8009920 <lfs_crc>
 8006ccc:	63b8      	str	r0, [r7, #56]	; 0x38
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d3d4      	bcc.n	8006c88 <lfs_dir_commitcrc+0x1a2>
        }

        // detected write error?
        if (crc != 0) {
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <lfs_dir_commitcrc+0x204>
            return LFS_ERR_CORRUPT;
 8006ce4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006ce8:	e01e      	b.n	8006d28 <lfs_dir_commitcrc+0x242>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 8006cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fd ff55 	bl	8004ba4 <lfs_min>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfe:	4413      	add	r3, r2
 8006d00:	643b      	str	r3, [r7, #64]	; 0x40
        if (off < end) {
 8006d02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d206      	bcs.n	8006d18 <lfs_dir_commitcrc+0x232>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	3b08      	subs	r3, #8
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006d12:	f7fd ff47 	bl	8004ba4 <lfs_min>
 8006d16:	6438      	str	r0, [r7, #64]	; 0x40
        }
        noff = off + sizeof(uint32_t);
 8006d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (off < end) {
 8006d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d3aa      	bcc.n	8006c7c <lfs_dir_commitcrc+0x196>
    }

    return 0;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	374c      	adds	r7, #76	; 0x4c
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd90      	pop	{r4, r7, pc}

08006d30 <lfs_dir_alloc>:

static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af04      	add	r7, sp, #16
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	e016      	b.n	8006d6e <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	3301      	adds	r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	bfb8      	it	lt
 8006d4c:	425b      	neglt	r3, r3
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	4413      	add	r3, r2
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fe fde0 	bl	800591c <lfs_alloc>
 8006d5c:	60f8      	str	r0, [r7, #12]
        if (err) {
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <lfs_dir_alloc+0x38>
            return err;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	e048      	b.n	8006dfa <lfs_dir_alloc+0xca>
    for (int i = 0; i < 2; i++) {
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	dde5      	ble.n	8006d40 <lfs_dir_alloc+0x10>
        }
    }

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8006d7e:	2004      	movs	r0, #4
 8006d80:	9003      	str	r0, [sp, #12]
 8006d82:	9202      	str	r2, [sp, #8]
 8006d84:	2200      	movs	r2, #0
 8006d86:	9201      	str	r2, [sp, #4]
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	2304      	movs	r3, #4
 8006d8c:	460a      	mov	r2, r1
 8006d8e:	2100      	movs	r1, #0
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fd ffe3 	bl	8004d5c <lfs_bd_read>
 8006d96:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fd ff71 	bl	8004c84 <lfs_fromle32>
 8006da2:	4602      	mov	r2, r0
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d005      	beq.n	8006dba <lfs_dir_alloc+0x8a>
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006db4:	d001      	beq.n	8006dba <lfs_dir_alloc+0x8a>
        return err;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	e01f      	b.n	8006dfa <lfs_dir_alloc+0xca>
    }

    // make sure we don't immediately evict
    dir->rev += dir->rev & 1;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	f023 0201 	bic.w	r2, r3, #1
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	609a      	str	r2, [r3, #8]

    // set defaults
    dir->off = sizeof(dir->rev);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2204      	movs	r2, #4
 8006dcc:	60da      	str	r2, [r3, #12]
    dir->etag = LFS_BLOCK_NULL;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dd4:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006de2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dea:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2200      	movs	r2, #0
 8006df6:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <lfs_dir_drop>:

static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08a      	sub	sp, #40	; 0x28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3348      	adds	r3, #72	; 0x48
 8006e14:	461a      	mov	r2, r3
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f7ff fd33 	bl	8006884 <lfs_dir_getgstate>
 8006e1e:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <lfs_dir_drop+0x26>
        return err;
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	e022      	b.n	8006e70 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3318      	adds	r3, #24
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fae2 	bl	80053f8 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	7ddb      	ldrb	r3, [r3, #23]
 8006e38:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006e3c:	051a      	lsls	r2, r3, #20
 8006e3e:	4b0e      	ldr	r3, [pc, #56]	; (8006e78 <lfs_dir_drop+0x74>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3318      	adds	r3, #24
 8006e48:	623b      	str	r3, [r7, #32]
 8006e4a:	f107 021c 	add.w	r2, r7, #28
 8006e4e:	2301      	movs	r3, #1
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 fb6a 	bl	800752c <lfs_dir_commit>
 8006e58:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3318      	adds	r3, #24
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe fab0 	bl	80053c4 <lfs_pair_fromle32>
    if (err) {
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <lfs_dir_drop+0x6a>
        return err;
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	e000      	b.n	8006e70 <lfs_dir_drop+0x6c>
    }

    return 0;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3728      	adds	r7, #40	; 0x28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	000ffc08 	.word	0x000ffc08

08006e7c <lfs_dir_split>:

static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b092      	sub	sp, #72	; 0x48
 8006e80:	af04      	add	r7, sp, #16
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
    // create tail directory
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8006e8a:	f107 0314 	add.w	r3, r7, #20
 8006e8e:	4619      	mov	r1, r3
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f7ff ff4d 	bl	8006d30 <lfs_dir_alloc>
 8006e96:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8006e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <lfs_dir_split+0x26>
        return err;
 8006e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea0:	e03c      	b.n	8006f1c <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	7ddb      	ldrb	r3, [r3, #23]
 8006ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    tail.tail[0] = dir->tail[0];
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    tail.tail[1] = dir->tail[1];
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	633b      	str	r3, [r7, #48]	; 0x30

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8006eb6:	f107 0114 	add.w	r1, r7, #20
 8006eba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ebe:	9302      	str	r3, [sp, #8]
 8006ec0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 f854 	bl	8006f7c <lfs_dir_compact>
 8006ed4:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8006ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <lfs_dir_split+0x64>
        return err;
 8006edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ede:	e01d      	b.n	8006f1c <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3320      	adds	r3, #32
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fe fa38 	bl	8005370 <lfs_pair_cmp>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d109      	bne.n	8006f1a <lfs_dir_split+0x9e>
 8006f06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d105      	bne.n	8006f1a <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3738      	adds	r7, #56	; 0x38
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <lfs_dir_commit_size>:

static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8006f34:	68b8      	ldr	r0, [r7, #8]
 8006f36:	f7fe faf1 	bl	800551c <lfs_tag_dsize>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	441a      	add	r2, r3
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	601a      	str	r2, [r3, #0]
    return 0;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <lfs_dir_commit_commit>:
struct lfs_dir_commit_commit {
    lfs_t *lfs;
    struct lfs_commit *commit;
};

static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	6859      	ldr	r1, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	f7ff fd3b 	bl	80069e6 <lfs_dir_commitattr>
 8006f70:	4603      	mov	r3, r0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <lfs_dir_compact>:

static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8006f7c:	b590      	push	{r4, r7, lr}
 8006f7e:	b0a9      	sub	sp, #164	; 0xa4
 8006f80:	af0a      	add	r7, sp, #40	; 0x28
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[1], dir->pair[0]};
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	653b      	str	r3, [r7, #80]	; 0x50
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	657b      	str	r3, [r7, #84]	; 0x54
    bool relocated = false;
 8006f96:	2300      	movs	r3, #0
 8006f98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    bool exhausted = false;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    // should we split?
    while (end - begin > 1) {
 8006fa2:	e080      	b.n	80070a6 <lfs_dir_compact+0x12a>
        // find size
        lfs_size_t size = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
        int err = lfs_dir_traverse(lfs,
 8006fa8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006fac:	425b      	negs	r3, r3
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	b21b      	sxth	r3, r3
 8006fb2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8006fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb8:	4a9c      	ldr	r2, [pc, #624]	; (800722c <lfs_dir_compact+0x2b0>)
 8006fba:	9208      	str	r2, [sp, #32]
 8006fbc:	9307      	str	r3, [sp, #28]
 8006fbe:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8006fc2:	9306      	str	r3, [sp, #24]
 8006fc4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006fc8:	9305      	str	r3, [sp, #20]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	4b98      	ldr	r3, [pc, #608]	; (8007230 <lfs_dir_compact+0x2b4>)
 8006fd0:	9303      	str	r3, [sp, #12]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9302      	str	r3, [sp, #8]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7fe ff7f 	bl	8005eec <lfs_dir_traverse>
 8006fee:	6738      	str	r0, [r7, #112]	; 0x70
                source, 0, LFS_BLOCK_NULL, attrs, attrcount, false,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
 8006ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <lfs_dir_compact+0x7e>
            return err;
 8006ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ff8:	e27f      	b.n	80074fa <lfs_dir_compact+0x57e>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
 8006ffa:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8006ffe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2bfe      	cmp	r3, #254	; 0xfe
 8007006:	dc18      	bgt.n	800703a <lfs_dir_compact+0xbe>
                size <= lfs_min(lfs->cfg->block_size - 36,
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                    lfs_alignup(lfs->cfg->block_size/2,
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007016:	69db      	ldr	r3, [r3, #28]
                size <= lfs_min(lfs->cfg->block_size - 36,
 8007018:	085a      	lsrs	r2, r3, #1
                        lfs->cfg->prog_size))) {
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                size <= lfs_min(lfs->cfg->block_size - 36,
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	4619      	mov	r1, r3
 8007022:	4610      	mov	r0, r2
 8007024:	f7fd fde3 	bl	8004bee <lfs_alignup>
 8007028:	4603      	mov	r3, r0
 800702a:	4619      	mov	r1, r3
 800702c:	4620      	mov	r0, r4
 800702e:	f7fd fdb9 	bl	8004ba4 <lfs_min>
 8007032:	4602      	mov	r2, r0
 8007034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
        if (end - begin < 0xff &&
 8007036:	429a      	cmp	r2, r3
 8007038:	d23e      	bcs.n	80070b8 <lfs_dir_compact+0x13c>
        }

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
 800703a:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800703e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	0fda      	lsrs	r2, r3, #31
 8007046:	4413      	add	r3, r2
 8007048:	105b      	asrs	r3, r3, #1
 800704a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800704e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007052:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007056:	4413      	add	r3, r2
 8007058:	b29b      	uxth	r3, r3
 800705a:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800705e:	9202      	str	r2, [sp, #8]
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f7ff ff04 	bl	8006e7c <lfs_dir_split>
 8007074:	6738      	str	r0, [r7, #112]	; 0x70
                source, begin+split, end);
        if (err) {
 8007076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00d      	beq.n	8007098 <lfs_dir_compact+0x11c>
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 800707c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800707e:	f113 0f1c 	cmn.w	r3, #28
 8007082:	d107      	bne.n	8007094 <lfs_dir_compact+0x118>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800708e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007090:	429a      	cmp	r2, r3
 8007092:	d213      	bcs.n	80070bc <lfs_dir_compact+0x140>
                break;
            }
            return err;
 8007094:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007096:	e230      	b.n	80074fa <lfs_dir_compact+0x57e>
        }

        end = begin + split;
 8007098:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800709c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80070a0:	4413      	add	r3, r2
 80070a2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    while (end - begin > 1) {
 80070a6:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80070aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	f73f af77 	bgt.w	8006fa4 <lfs_dir_compact+0x28>
 80070b6:	e002      	b.n	80070be <lfs_dir_compact+0x142>
            break;
 80070b8:	bf00      	nop
 80070ba:	e000      	b.n	80070be <lfs_dir_compact+0x142>
                break;
 80070bc:	bf00      	nop
    }

    // increment revision count
    dir->rev += 1;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	609a      	str	r2, [r3, #8]
    if (lfs->cfg->block_cycles > 0 &&
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	dd58      	ble.n	8007184 <lfs_dir_compact+0x208>
            (dir->rev % (lfs->cfg->block_cycles+1) == 0)) {
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80070da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070dc:	3201      	adds	r2, #1
 80070de:	fbb3 f1f2 	udiv	r1, r3, r2
 80070e2:	fb01 f202 	mul.w	r2, r1, r2
 80070e6:	1a9b      	subs	r3, r3, r2
    if (lfs->cfg->block_cycles > 0 &&
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d14b      	bne.n	8007184 <lfs_dir_compact+0x208>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2200      	movs	r2, #0
 80070f0:	647a      	str	r2, [r7, #68]	; 0x44
 80070f2:	2201      	movs	r2, #1
 80070f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80070f6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80070fa:	4611      	mov	r1, r2
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe f937 	bl	8005370 <lfs_pair_cmp>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d138      	bne.n	800717a <lfs_dir_compact+0x1fe>
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_size(lfs);
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f002 fbd9 	bl	80098c0 <lfs_fs_size>
 800710e:	66b8      	str	r0, [r7, #104]	; 0x68
            if (res < 0) {
 8007110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007112:	2b00      	cmp	r3, #0
 8007114:	da01      	bge.n	800711a <lfs_dir_compact+0x19e>
                return res;
 8007116:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007118:	e1ef      	b.n	80074fa <lfs_dir_compact+0x57e>
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	085a      	lsrs	r2, r3, #1
 8007122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007124:	429a      	cmp	r2, r3
 8007126:	d92d      	bls.n	8007184 <lfs_dir_compact+0x208>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	461a      	mov	r2, r3
 800712e:	f240 51d6 	movw	r1, #1494	; 0x5d6
 8007132:	4840      	ldr	r0, [pc, #256]	; (8007234 <lfs_dir_compact+0x2b8>)
 8007134:	f00b f80e 	bl	8012154 <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8007138:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800713c:	9302      	str	r3, [sp, #8]
 800713e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007142:	9301      	str	r3, [sp, #4]
 8007144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f7ff fe93 	bl	8006e7c <lfs_dir_split>
 8007156:	6678      	str	r0, [r7, #100]	; 0x64
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
 8007158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <lfs_dir_compact+0x1ee>
 800715e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007160:	f113 0f1c 	cmn.w	r3, #28
 8007164:	d001      	beq.n	800716a <lfs_dir_compact+0x1ee>
                    return err;
 8007166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007168:	e1c7      	b.n	80074fa <lfs_dir_compact+0x57e>
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
 800716a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800716c:	2b00      	cmp	r3, #0
 800716e:	d109      	bne.n	8007184 <lfs_dir_compact+0x208>
                    end = begin;
 8007170:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007174:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8007178:	e004      	b.n	8007184 <lfs_dir_compact+0x208>
            // we can't relocate our root during migrations, as this would
            // cause the superblock to get updated, which would clobber v1
#endif
        } else {
            // we're writing too much, time to relocate
            exhausted = true;
 800717a:	2301      	movs	r3, #1
 800717c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8007180:	e13d      	b.n	80073fe <lfs_dir_compact+0x482>
            goto relocate;
        }
    }

    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
 8007182:	bf00      	nop
        {
            // There's nothing special about our global delta, so feed it into
            // our local global delta
            int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3348      	adds	r3, #72	; 0x48
 8007188:	461a      	mov	r2, r3
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f7ff fb79 	bl	8006884 <lfs_dir_getgstate>
 8007192:	6638      	str	r0, [r7, #96]	; 0x60
            if (err) {
 8007194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <lfs_dir_compact+0x222>
                return err;
 800719a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800719c:	e1ad      	b.n	80074fa <lfs_dir_compact+0x57e>
            }

            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80071a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a4:	2300      	movs	r3, #0
 80071a6:	633b      	str	r3, [r7, #48]	; 0x30
 80071a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071ac:	637b      	str	r3, [r7, #52]	; 0x34
 80071ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80071b4:	2300      	movs	r3, #0
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                .off = 0,
                .ptag = LFS_BLOCK_NULL,
                .crc = LFS_BLOCK_NULL,

                .begin = 0,
                .end = lfs->cfg->block_size - 8,
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 80071c0:	643b      	str	r3, [r7, #64]	; 0x40
            };

            // erase block to write to
            err = lfs_bd_erase(lfs, dir->pair[1]);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	4619      	mov	r1, r3
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f7fe f871 	bl	80052b0 <lfs_bd_erase>
 80071ce:	6638      	str	r0, [r7, #96]	; 0x60
            if (err) {
 80071d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d006      	beq.n	80071e4 <lfs_dir_compact+0x268>
                if (err == LFS_ERR_CORRUPT) {
 80071d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071d8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80071dc:	f000 8104 	beq.w	80073e8 <lfs_dir_compact+0x46c>
                    goto relocate;
                }
                return err;
 80071e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071e2:	e18a      	b.n	80074fa <lfs_dir_compact+0x57e>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fd fd56 	bl	8004c9a <lfs_tole32>
 80071ee:	4602      	mov	r2, r0
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 80071fa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80071fe:	2304      	movs	r3, #4
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f7ff fbba 	bl	800697a <lfs_dir_commitprog>
 8007206:	6638      	str	r0, [r7, #96]	; 0x60
            dir->rev = lfs_fromle32(dir->rev);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	4618      	mov	r0, r3
 800720e:	f7fd fd39 	bl	8004c84 <lfs_fromle32>
 8007212:	4602      	mov	r2, r0
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	609a      	str	r2, [r3, #8]
            if (err) {
 8007218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00c      	beq.n	8007238 <lfs_dir_compact+0x2bc>
                if (err == LFS_ERR_CORRUPT) {
 800721e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007220:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007224:	f000 80e2 	beq.w	80073ec <lfs_dir_compact+0x470>
                    goto relocate;
                }
                return err;
 8007228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800722a:	e166      	b.n	80074fa <lfs_dir_compact+0x57e>
 800722c:	08006f25 	.word	0x08006f25
 8007230:	400ffc00 	.word	0x400ffc00
 8007234:	080137f8 	.word	0x080137f8
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8007238:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800723c:	425b      	negs	r3, r3
 800723e:	b29b      	uxth	r3, r3
 8007240:	b21b      	sxth	r3, r3
                    source, 0, LFS_BLOCK_NULL, attrs, attrcount, false,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	627a      	str	r2, [r7, #36]	; 0x24
 8007246:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800724a:	62ba      	str	r2, [r7, #40]	; 0x28
            err = lfs_dir_traverse(lfs,
 800724c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007250:	9209      	str	r2, [sp, #36]	; 0x24
 8007252:	4aac      	ldr	r2, [pc, #688]	; (8007504 <lfs_dir_compact+0x588>)
 8007254:	9208      	str	r2, [sp, #32]
 8007256:	9307      	str	r3, [sp, #28]
 8007258:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800725c:	9306      	str	r3, [sp, #24]
 800725e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007262:	9305      	str	r3, [sp, #20]
 8007264:	2300      	movs	r3, #0
 8007266:	9304      	str	r3, [sp, #16]
 8007268:	4ba7      	ldr	r3, [pc, #668]	; (8007508 <lfs_dir_compact+0x58c>)
 800726a:	9303      	str	r3, [sp, #12]
 800726c:	2300      	movs	r3, #0
 800726e:	9302      	str	r3, [sp, #8]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800727c:	2200      	movs	r2, #0
 800727e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f7fe fe32 	bl	8005eec <lfs_dir_traverse>
 8007288:	6638      	str	r0, [r7, #96]	; 0x60
                        lfs, &commit});
            if (err) {
 800728a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800728c:	2b00      	cmp	r3, #0
 800728e:	d006      	beq.n	800729e <lfs_dir_compact+0x322>
                if (err == LFS_ERR_CORRUPT) {
 8007290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007292:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007296:	f000 80ab 	beq.w	80073f0 <lfs_dir_compact+0x474>
                    goto relocate;
                }
                return err;
 800729a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800729c:	e12d      	b.n	80074fa <lfs_dir_compact+0x57e>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	3318      	adds	r3, #24
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe f849 	bl	800533a <lfs_pair_isnull>
 80072a8:	4603      	mov	r3, r0
 80072aa:	f083 0301 	eor.w	r3, r3, #1
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d021      	beq.n	80072f8 <lfs_dir_compact+0x37c>
                lfs_pair_tole32(dir->tail);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	3318      	adds	r3, #24
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fe f89d 	bl	80053f8 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	7ddb      	ldrb	r3, [r3, #23]
 80072c2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80072c6:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80072c8:	4a90      	ldr	r2, [pc, #576]	; (800750c <lfs_dir_compact+0x590>)
 80072ca:	431a      	orrs	r2, r3
                        dir->tail);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80072d0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7ff fb86 	bl	80069e6 <lfs_dir_commitattr>
 80072da:	6638      	str	r0, [r7, #96]	; 0x60
                lfs_pair_fromle32(dir->tail);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3318      	adds	r3, #24
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fe f86f 	bl	80053c4 <lfs_pair_fromle32>
                if (err) {
 80072e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <lfs_dir_compact+0x37c>
                    if (err == LFS_ERR_CORRUPT) {
 80072ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ee:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80072f2:	d07f      	beq.n	80073f4 <lfs_dir_compact+0x478>
                        goto relocate;
                    }
                    return err;
 80072f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072f6:	e100      	b.n	80074fa <lfs_dir_compact+0x57e>
                }
            }

            if (!relocated && !lfs_gstate_iszero(&lfs->gdelta)) {
 80072f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80072fc:	f083 0301 	eor.w	r3, r3, #1
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d026      	beq.n	8007354 <lfs_dir_compact+0x3d8>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3348      	adds	r3, #72	; 0x48
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe f93f 	bl	800558e <lfs_gstate_iszero>
 8007310:	4603      	mov	r3, r0
 8007312:	f083 0301 	eor.w	r3, r3, #1
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01b      	beq.n	8007354 <lfs_dir_compact+0x3d8>
                // commit any globals, unless we're relocating,
                // in which case our parent will steal our globals
                lfs_gstate_tole32(&lfs->gdelta);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3348      	adds	r3, #72	; 0x48
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe fa1b 	bl	800575c <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(lfs->gdelta)), &lfs->gdelta);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3348      	adds	r3, #72	; 0x48
                err = lfs_dir_commitattr(lfs, &commit,
 800732a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800732e:	4a78      	ldr	r2, [pc, #480]	; (8007510 <lfs_dir_compact+0x594>)
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f7ff fb58 	bl	80069e6 <lfs_dir_commitattr>
 8007336:	6638      	str	r0, [r7, #96]	; 0x60
                lfs_gstate_fromle32(&lfs->gdelta);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3348      	adds	r3, #72	; 0x48
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe f9ed 	bl	800571c <lfs_gstate_fromle32>
                if (err) {
 8007342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <lfs_dir_compact+0x3d8>
                    if (err == LFS_ERR_CORRUPT) {
 8007348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800734a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800734e:	d053      	beq.n	80073f8 <lfs_dir_compact+0x47c>
                        goto relocate;
                    }
                    return err;
 8007350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007352:	e0d2      	b.n	80074fa <lfs_dir_compact+0x57e>
                }
            }

            err = lfs_dir_commitcrc(lfs, &commit);
 8007354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007358:	4619      	mov	r1, r3
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff fbc3 	bl	8006ae6 <lfs_dir_commitcrc>
 8007360:	6638      	str	r0, [r7, #96]	; 0x60
            if (err) {
 8007362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <lfs_dir_compact+0x3f8>
                if (err == LFS_ERR_CORRUPT) {
 8007368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800736a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800736e:	d045      	beq.n	80073fc <lfs_dir_compact+0x480>
                    goto relocate;
                }
                return err;
 8007370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007372:	e0c2      	b.n	80074fa <lfs_dir_compact+0x57e>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800737a:	6992      	ldr	r2, [r2, #24]
 800737c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007380:	fb01 f202 	mul.w	r2, r1, r2
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d006      	beq.n	8007398 <lfs_dir_compact+0x41c>
 800738a:	4b62      	ldr	r3, [pc, #392]	; (8007514 <lfs_dir_compact+0x598>)
 800738c:	4a62      	ldr	r2, [pc, #392]	; (8007518 <lfs_dir_compact+0x59c>)
 800738e:	f44f 61ca 	mov.w	r1, #1616	; 0x650
 8007392:	4862      	ldr	r0, [pc, #392]	; (800751c <lfs_dir_compact+0x5a0>)
 8007394:	f00a f8e6 	bl	8011564 <__assert_func>
            lfs_pair_swap(dir->pair);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	4618      	mov	r0, r3
 800739c:	f7fd ffb8 	bl	8005310 <lfs_pair_swap>
            dir->count = end - begin;
 80073a0:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80073a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80073b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80073b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	611a      	str	r2, [r3, #16]
            // note we able to have already handled move here
            if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	333c      	adds	r3, #60	; 0x3c
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	4611      	mov	r1, r2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe f925 	bl	8005614 <lfs_gstate_hasmovehere>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d061      	beq.n	8007494 <lfs_dir_compact+0x518>
                lfs_gstate_xormove(&lfs->gpending,
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
                    &lfs->gpending, 0x3ff, NULL);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
                lfs_gstate_xormove(&lfs->gpending,
 80073dc:	2300      	movs	r3, #0
 80073de:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80073e2:	f7fe f951 	bl	8005688 <lfs_gstate_xormove>
            }
        }
        break;
 80073e6:	e055      	b.n	8007494 <lfs_dir_compact+0x518>
                    goto relocate;
 80073e8:	bf00      	nop
 80073ea:	e008      	b.n	80073fe <lfs_dir_compact+0x482>
                    goto relocate;
 80073ec:	bf00      	nop
 80073ee:	e006      	b.n	80073fe <lfs_dir_compact+0x482>
                    goto relocate;
 80073f0:	bf00      	nop
 80073f2:	e004      	b.n	80073fe <lfs_dir_compact+0x482>
                        goto relocate;
 80073f4:	bf00      	nop
 80073f6:	e002      	b.n	80073fe <lfs_dir_compact+0x482>
                        goto relocate;
 80073f8:	bf00      	nop
 80073fa:	e000      	b.n	80073fe <lfs_dir_compact+0x482>
                    goto relocate;
 80073fc:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80073fe:	2301      	movs	r3, #1
 8007400:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        lfs_cache_drop(lfs, &lfs->pcache);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3310      	adds	r3, #16
 8007408:	4619      	mov	r1, r3
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7fd fc80 	bl	8004d10 <lfs_cache_drop>
        if (!exhausted) {
 8007410:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007414:	f083 0301 	eor.w	r3, r3, #1
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d007      	beq.n	800742e <lfs_dir_compact+0x4b2>
            LFS_DEBUG("Bad block at %"PRIx32, dir->pair[1]);
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	461a      	mov	r2, r3
 8007424:	f240 6162 	movw	r1, #1634	; 0x662
 8007428:	483d      	ldr	r0, [pc, #244]	; (8007520 <lfs_dir_compact+0x5a4>)
 800742a:	f00a fe93 	bl	8012154 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(oldpair, (const lfs_block_t[2]){0, 1}) == 0) {
 800742e:	2300      	movs	r3, #0
 8007430:	61fb      	str	r3, [r7, #28]
 8007432:	2301      	movs	r3, #1
 8007434:	623b      	str	r3, [r7, #32]
 8007436:	f107 021c 	add.w	r2, r7, #28
 800743a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800743e:	4611      	mov	r1, r2
 8007440:	4618      	mov	r0, r3
 8007442:	f7fd ff95 	bl	8005370 <lfs_pair_cmp>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d109      	bne.n	8007460 <lfs_dir_compact+0x4e4>
            LFS_WARN("Superblock %"PRIx32" has become unwritable", oldpair[1]);
 800744c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800744e:	461a      	mov	r2, r3
 8007450:	f240 6167 	movw	r1, #1639	; 0x667
 8007454:	4833      	ldr	r0, [pc, #204]	; (8007524 <lfs_dir_compact+0x5a8>)
 8007456:	f00a fe7d 	bl	8012154 <iprintf>
            return LFS_ERR_NOSPC;
 800745a:	f06f 031b 	mvn.w	r3, #27
 800745e:	e04c      	b.n	80074fa <lfs_dir_compact+0x57e>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	3304      	adds	r3, #4
 8007464:	4619      	mov	r1, r3
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f7fe fa58 	bl	800591c <lfs_alloc>
 800746c:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && (err != LFS_ERR_NOSPC && !exhausted)) {
 800746e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007470:	2b00      	cmp	r3, #0
 8007472:	f43f ae86 	beq.w	8007182 <lfs_dir_compact+0x206>
 8007476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007478:	f113 0f1c 	cmn.w	r3, #28
 800747c:	f43f ae81 	beq.w	8007182 <lfs_dir_compact+0x206>
 8007480:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007484:	f083 0301 	eor.w	r3, r3, #1
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	f43f ae79 	beq.w	8007182 <lfs_dir_compact+0x206>
            return err;
 8007490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007492:	e032      	b.n	80074fa <lfs_dir_compact+0x57e>
        break;
 8007494:	bf00      	nop
        }

        continue;
    }

    if (!relocated) {
 8007496:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800749a:	f083 0301 	eor.w	r3, r3, #1
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00d      	beq.n	80074c0 <lfs_dir_compact+0x544>
        lfs->gstate = lfs->gpending;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	3330      	adds	r3, #48	; 0x30
 80074aa:	323c      	adds	r2, #60	; 0x3c
 80074ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80074ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (struct lfs_gstate){0};
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3348      	adds	r3, #72	; 0x48
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	605a      	str	r2, [r3, #4]
 80074bc:	609a      	str	r2, [r3, #8]
 80074be:	e01b      	b.n	80074f8 <lfs_dir_compact+0x57c>
    } else {
        // update references if we relocated
        LFS_DEBUG("Relocating %"PRIx32" %"PRIx32" -> %"PRIx32" %"PRIx32,
 80074c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	6852      	ldr	r2, [r2, #4]
 80074cc:	9201      	str	r2, [sp, #4]
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	4603      	mov	r3, r0
 80074d2:	460a      	mov	r2, r1
 80074d4:	f240 6179 	movw	r1, #1657	; 0x679
 80074d8:	4813      	ldr	r0, [pc, #76]	; (8007528 <lfs_dir_compact+0x5ac>)
 80074da:	f00a fe3b 	bl	8012154 <iprintf>
                oldpair[0], oldpair[1], dir->pair[0], dir->pair[1]);
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80074e4:	4619      	mov	r1, r3
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f002 f8f6 	bl	80096d8 <lfs_fs_relocate>
 80074ec:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 80074ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <lfs_dir_compact+0x57c>
            return err;
 80074f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f6:	e000      	b.n	80074fa <lfs_dir_compact+0x57e>
        }
    }

    return 0;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	377c      	adds	r7, #124	; 0x7c
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd90      	pop	{r4, r7, pc}
 8007502:	bf00      	nop
 8007504:	08006f51 	.word	0x08006f51
 8007508:	400ffc00 	.word	0x400ffc00
 800750c:	000ffc08 	.word	0x000ffc08
 8007510:	7ffffc0c 	.word	0x7ffffc0c
 8007514:	08013828 	.word	0x08013828
 8007518:	08016964 	.word	0x08016964
 800751c:	080136d8 	.word	0x080136d8
 8007520:	08013850 	.word	0x08013850
 8007524:	08013870 	.word	0x08013870
 8007528:	080138a4 	.word	0x080138a4

0800752c <lfs_dir_commit>:

static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800752c:	b5b0      	push	{r4, r5, r7, lr}
 800752e:	b0b4      	sub	sp, #208	; 0xd0
 8007530:	af0a      	add	r7, sp, #40	; 0x28
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007542:	e045      	b.n	80075d0 <lfs_dir_commit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8007544:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007548:	3308      	adds	r3, #8
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	429a      	cmp	r2, r3
 800754e:	d03a      	beq.n	80075c6 <lfs_dir_commit+0x9a>
 8007550:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007554:	3308      	adds	r3, #8
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	4611      	mov	r1, r2
 800755a:	4618      	mov	r0, r3
 800755c:	f7fd ff08 	bl	8005370 <lfs_pair_cmp>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d12f      	bne.n	80075c6 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800756a:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800756c:	2b01      	cmp	r3, #1
 800756e:	d12a      	bne.n	80075c6 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007570:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d023      	beq.n	80075c6 <lfs_dir_commit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800757e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800758a:	429a      	cmp	r2, r3
 800758c:	d91b      	bls.n	80075c6 <lfs_dir_commit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800758e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fe3a 	bl	800820c <lfs_file_outline>
 8007598:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
            if (err) {
 800759c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <lfs_dir_commit+0x7e>
                return err;
 80075a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075a8:	e2e3      	b.n	8007b72 <lfs_dir_commit+0x646>
            }

            err = lfs_file_flush(lfs, f);
 80075aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 fe4e 	bl	8008250 <lfs_file_flush>
 80075b4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
            if (err) {
 80075b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <lfs_dir_commit+0x9a>
                return err;
 80075c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075c4:	e2d5      	b.n	8007b72 <lfs_dir_commit+0x646>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80075c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1b5      	bne.n	8007544 <lfs_dir_commit+0x18>
            }
        }
    }

    // calculate changes to the directory
    lfs_tag_t deletetag = LFS_BLOCK_NULL;
 80075d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    lfs_tag_t createtag = LFS_BLOCK_NULL;
 80075e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    for (int i = 0; i < attrcount; i++) {
 80075e8:	2300      	movs	r3, #0
 80075ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075ee:	e082      	b.n	80076f6 <lfs_dir_commit+0x1ca>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80075f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	4413      	add	r3, r2
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fd ff46 	bl	800548e <lfs_tag_type3>
 8007602:	4603      	mov	r3, r0
 8007604:	461a      	mov	r2, r3
 8007606:	f240 4301 	movw	r3, #1025	; 0x401
 800760a:	429a      	cmp	r2, r3
 800760c:	d10e      	bne.n	800762c <lfs_dir_commit+0x100>
            createtag = attrs[i].tag;
 800760e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	4413      	add	r3, r2
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            dir->count += 1;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	8a9b      	ldrh	r3, [r3, #20]
 8007622:	3301      	adds	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	829a      	strh	r2, [r3, #20]
 800762a:	e05f      	b.n	80076ec <lfs_dir_commit+0x1c0>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800762c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	4413      	add	r3, r2
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4618      	mov	r0, r3
 800763a:	f7fd ff28 	bl	800548e <lfs_tag_type3>
 800763e:	4603      	mov	r3, r0
 8007640:	461a      	mov	r2, r3
 8007642:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8007646:	429a      	cmp	r2, r3
 8007648:	d119      	bne.n	800767e <lfs_dir_commit+0x152>
            deletetag = attrs[i].tag;
 800764a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	4413      	add	r3, r2
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            LFS_ASSERT(dir->count > 0);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	8a9b      	ldrh	r3, [r3, #20]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <lfs_dir_commit+0x144>
 8007662:	4ba6      	ldr	r3, [pc, #664]	; (80078fc <lfs_dir_commit+0x3d0>)
 8007664:	4aa6      	ldr	r2, [pc, #664]	; (8007900 <lfs_dir_commit+0x3d4>)
 8007666:	f240 61a1 	movw	r1, #1697	; 0x6a1
 800766a:	48a6      	ldr	r0, [pc, #664]	; (8007904 <lfs_dir_commit+0x3d8>)
 800766c:	f009 ff7a 	bl	8011564 <__assert_func>
            dir->count -= 1;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	8a9b      	ldrh	r3, [r3, #20]
 8007674:	3b01      	subs	r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	829a      	strh	r2, [r3, #20]
 800767c:	e036      	b.n	80076ec <lfs_dir_commit+0x1c0>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800767e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	4413      	add	r3, r2
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4618      	mov	r0, r3
 800768c:	f7fd feef 	bl	800546e <lfs_tag_type1>
 8007690:	4603      	mov	r3, r0
 8007692:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007696:	d129      	bne.n	80076ec <lfs_dir_commit+0x1c0>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8007698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	4413      	add	r3, r2
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 80076aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	4413      	add	r3, r2
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80076bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076c0:	00db      	lsls	r3, r3, #3
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	4413      	add	r3, r2
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fd fef0 	bl	80054ae <lfs_tag_chunk>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	bf14      	ite	ne
 80076d8:	2301      	movne	r3, #1
 80076da:	2300      	moveq	r3, #0
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	3318      	adds	r3, #24
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fd fe6c 	bl	80053c4 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 80076ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076f0:	3301      	adds	r3, #1
 80076f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	f6ff af77 	blt.w	80075f0 <lfs_dir_commit+0xc4>
        }
    }

    // do we have a pending move?
    if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	333c      	adds	r3, #60	; 0x3c
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	4611      	mov	r1, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f7fd ff82 	bl	8005614 <lfs_gstate_hasmovehere>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d021      	beq.n	800775a <lfs_dir_commit+0x22e>
        deletetag = lfs->gpending.tag & LFS_MKTAG(0x7ff, 0x3ff, 0);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800771a:	4b7b      	ldr	r3, [pc, #492]	; (8007908 <lfs_dir_commit+0x3dc>)
 800771c:	4013      	ands	r3, r2
 800771e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        LFS_ASSERT(dir->count > 0);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	8a9b      	ldrh	r3, [r3, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <lfs_dir_commit+0x20c>
 800772a:	4b74      	ldr	r3, [pc, #464]	; (80078fc <lfs_dir_commit+0x3d0>)
 800772c:	4a74      	ldr	r2, [pc, #464]	; (8007900 <lfs_dir_commit+0x3d4>)
 800772e:	f240 61ae 	movw	r1, #1710	; 0x6ae
 8007732:	4874      	ldr	r0, [pc, #464]	; (8007904 <lfs_dir_commit+0x3d8>)
 8007734:	f009 ff16 	bl	8011564 <__assert_func>
        dir->count -= 1;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	8a9b      	ldrh	r3, [r3, #20]
 800773c:	3b01      	subs	r3, #1
 800773e:	b29a      	uxth	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	829a      	strh	r2, [r3, #20]

        // mark gdelta so we reflect the move we will fix
        lfs_gstate_xormove(&lfs->gdelta, &lfs->gpending, 0x3ff, NULL);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007750:	2300      	movs	r3, #0
 8007752:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007756:	f7fd ff97 	bl	8005688 <lfs_gstate_xormove>
    }

    // should we actually drop the directory block?
    if (lfs_tag_isvalid(deletetag) && dir->count == 0) {
 800775a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800775e:	f7fd fe65 	bl	800542c <lfs_tag_isvalid>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d02a      	beq.n	80077be <lfs_dir_commit+0x292>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	8a9b      	ldrh	r3, [r3, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d126      	bne.n	80077be <lfs_dir_commit+0x292>
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f107 0214 	add.w	r2, r7, #20
 8007776:	4619      	mov	r1, r3
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f001 feed 	bl	8009558 <lfs_fs_pred>
 800777e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if (err && err != LFS_ERR_NOENT) {
 8007782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007786:	2b00      	cmp	r3, #0
 8007788:	d007      	beq.n	800779a <lfs_dir_commit+0x26e>
 800778a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800778e:	f113 0f02 	cmn.w	r3, #2
 8007792:	d002      	beq.n	800779a <lfs_dir_commit+0x26e>
            return err;
 8007794:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007798:	e1eb      	b.n	8007b72 <lfs_dir_commit+0x646>
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
 800779a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800779e:	f113 0f02 	cmn.w	r3, #2
 80077a2:	d00c      	beq.n	80077be <lfs_dir_commit+0x292>
 80077a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d008      	beq.n	80077be <lfs_dir_commit+0x292>
            return lfs_dir_drop(lfs, &pdir, dir);
 80077ac:	f107 0314 	add.w	r3, r7, #20
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	4619      	mov	r1, r3
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f7ff fb25 	bl	8006e04 <lfs_dir_drop>
 80077ba:	4603      	mov	r3, r0
 80077bc:	e1d9      	b.n	8007b72 <lfs_dir_commit+0x646>
        }
    }

    if (dir->erased || dir->count >= 0xff) {
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	7d9b      	ldrb	r3, [r3, #22]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d104      	bne.n	80077d0 <lfs_dir_commit+0x2a4>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	8a9b      	ldrh	r3, [r3, #20]
 80077ca:	2bfe      	cmp	r3, #254	; 0xfe
 80077cc:	f240 80f6 	bls.w	80079bc <lfs_dir_commit+0x490>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 80077d4:	64bb      	str	r3, [r7, #72]	; 0x48
            .off = dir->off,
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80077da:	64fb      	str	r3, [r7, #76]	; 0x4c
            .ptag = dir->etag,
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 80077e0:	653b      	str	r3, [r7, #80]	; 0x50
 80077e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077e6:	657b      	str	r3, [r7, #84]	; 0x54
            .crc = LFS_BLOCK_NULL,

            .begin = dir->off,
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80077ec:	65bb      	str	r3, [r7, #88]	; 0x58
            .end = lfs->cfg->block_size - 8,
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 80077f6:	65fb      	str	r3, [r7, #92]	; 0x5c
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	3318      	adds	r3, #24
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fd fdfb 	bl	80053f8 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount, false,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	643b      	str	r3, [r7, #64]	; 0x40
 800780e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007812:	647b      	str	r3, [r7, #68]	; 0x44
        int err = lfs_dir_traverse(lfs,
 8007814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007818:	9309      	str	r3, [sp, #36]	; 0x24
 800781a:	4b3c      	ldr	r3, [pc, #240]	; (800790c <lfs_dir_commit+0x3e0>)
 800781c:	9308      	str	r3, [sp, #32]
 800781e:	2300      	movs	r3, #0
 8007820:	9307      	str	r3, [sp, #28]
 8007822:	2300      	movs	r3, #0
 8007824:	9306      	str	r3, [sp, #24]
 8007826:	2300      	movs	r3, #0
 8007828:	9305      	str	r3, [sp, #20]
 800782a:	2300      	movs	r3, #0
 800782c:	9304      	str	r3, [sp, #16]
 800782e:	2300      	movs	r3, #0
 8007830:	9303      	str	r3, [sp, #12]
 8007832:	2300      	movs	r3, #0
 8007834:	9302      	str	r3, [sp, #8]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	460b      	mov	r3, r1
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f7fe fb52 	bl	8005eec <lfs_dir_traverse>
 8007848:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	3318      	adds	r3, #24
 8007850:	4618      	mov	r0, r3
 8007852:	f7fd fdb7 	bl	80053c4 <lfs_pair_fromle32>
        if (err) {
 8007856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00e      	beq.n	800787c <lfs_dir_commit+0x350>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800785e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007862:	f113 0f1c 	cmn.w	r3, #28
 8007866:	f000 80ab 	beq.w	80079c0 <lfs_dir_commit+0x494>
 800786a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800786e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007872:	f000 80a5 	beq.w	80079c0 <lfs_dir_commit+0x494>
                goto compact;
            }
            return err;
 8007876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800787a:	e17a      	b.n	8007b72 <lfs_dir_commit+0x646>
        }

        // commit any global diffs if we have any
        if (!lfs_gstate_iszero(&lfs->gdelta)) {
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3348      	adds	r3, #72	; 0x48
 8007880:	4618      	mov	r0, r3
 8007882:	f7fd fe84 	bl	800558e <lfs_gstate_iszero>
 8007886:	4603      	mov	r3, r0
 8007888:	f083 0301 	eor.w	r3, r3, #1
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d040      	beq.n	8007914 <lfs_dir_commit+0x3e8>
            err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3348      	adds	r3, #72	; 0x48
 8007896:	461a      	mov	r2, r3
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7fe fff2 	bl	8006884 <lfs_dir_getgstate>
 80078a0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 80078a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <lfs_dir_commit+0x386>
                return err;
 80078ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078b0:	e15f      	b.n	8007b72 <lfs_dir_commit+0x646>
            }

            lfs_gstate_tole32(&lfs->gdelta);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3348      	adds	r3, #72	; 0x48
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fd ff50 	bl	800575c <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(lfs->gdelta)), &lfs->gdelta);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3348      	adds	r3, #72	; 0x48
            err = lfs_dir_commitattr(lfs, &commit,
 80078c0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80078c4:	4a12      	ldr	r2, [pc, #72]	; (8007910 <lfs_dir_commit+0x3e4>)
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f7ff f88d 	bl	80069e6 <lfs_dir_commitattr>
 80078cc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            lfs_gstate_fromle32(&lfs->gdelta);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3348      	adds	r3, #72	; 0x48
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fd ff21 	bl	800571c <lfs_gstate_fromle32>
            if (err) {
 80078da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d018      	beq.n	8007914 <lfs_dir_commit+0x3e8>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80078e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078e6:	f113 0f1c 	cmn.w	r3, #28
 80078ea:	d06b      	beq.n	80079c4 <lfs_dir_commit+0x498>
 80078ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078f0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80078f4:	d066      	beq.n	80079c4 <lfs_dir_commit+0x498>
                    goto compact;
                }
                return err;
 80078f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078fa:	e13a      	b.n	8007b72 <lfs_dir_commit+0x646>
 80078fc:	080138d4 	.word	0x080138d4
 8007900:	08016974 	.word	0x08016974
 8007904:	080136d8 	.word	0x080136d8
 8007908:	7ffffc00 	.word	0x7ffffc00
 800790c:	08006f51 	.word	0x08006f51
 8007910:	7ffffc0c 	.word	0x7ffffc0c
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8007914:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007918:	4619      	mov	r1, r3
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f7ff f8e3 	bl	8006ae6 <lfs_dir_commitcrc>
 8007920:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (err) {
 8007924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00c      	beq.n	8007946 <lfs_dir_commit+0x41a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800792c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007930:	f113 0f1c 	cmn.w	r3, #28
 8007934:	d048      	beq.n	80079c8 <lfs_dir_commit+0x49c>
 8007936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800793a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800793e:	d043      	beq.n	80079c8 <lfs_dir_commit+0x49c>
                goto compact;
            }
            return err;
 8007940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007944:	e115      	b.n	8007b72 <lfs_dir_commit+0x646>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8007946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800794c:	6992      	ldr	r2, [r2, #24]
 800794e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007952:	fb01 f202 	mul.w	r2, r1, r2
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d006      	beq.n	800796a <lfs_dir_commit+0x43e>
 800795c:	4b87      	ldr	r3, [pc, #540]	; (8007b7c <lfs_dir_commit+0x650>)
 800795e:	4a88      	ldr	r2, [pc, #544]	; (8007b80 <lfs_dir_commit+0x654>)
 8007960:	f240 61fb 	movw	r1, #1787	; 0x6fb
 8007964:	4887      	ldr	r0, [pc, #540]	; (8007b84 <lfs_dir_commit+0x658>)
 8007966:	f009 fdfd 	bl	8011564 <__assert_func>
        dir->off = commit.off;
 800796a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8007970:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	611a      	str	r2, [r3, #16]

        // note we able to have already handled move here
        if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	333c      	adds	r3, #60	; 0x3c
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f7fd fe48 	bl	8005614 <lfs_gstate_hasmovehere>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <lfs_dir_commit+0x474>
            lfs_gstate_xormove(&lfs->gpending, &lfs->gpending, 0x3ff, NULL);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007996:	2300      	movs	r3, #0
 8007998:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800799c:	f7fd fe74 	bl	8005688 <lfs_gstate_xormove>
        }

        // update gstate
        lfs->gstate = lfs->gpending;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	3330      	adds	r3, #48	; 0x30
 80079a6:	323c      	adds	r2, #60	; 0x3c
 80079a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80079aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (struct lfs_gstate){0};
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3348      	adds	r3, #72	; 0x48
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	605a      	str	r2, [r3, #4]
 80079b8:	609a      	str	r2, [r3, #8]
    if (dir->erased || dir->count >= 0xff) {
 80079ba:	e022      	b.n	8007a02 <lfs_dir_commit+0x4d6>
    } else {
compact:
 80079bc:	bf00      	nop
 80079be:	e004      	b.n	80079ca <lfs_dir_commit+0x49e>
                goto compact;
 80079c0:	bf00      	nop
 80079c2:	e002      	b.n	80079ca <lfs_dir_commit+0x49e>
                    goto compact;
 80079c4:	bf00      	nop
 80079c6:	e000      	b.n	80079ca <lfs_dir_commit+0x49e>
                goto compact;
 80079c8:	bf00      	nop
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3310      	adds	r3, #16
 80079ce:	4619      	mov	r1, r3
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f7fd f99d 	bl	8004d10 <lfs_cache_drop>

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	8a9b      	ldrh	r3, [r3, #20]
 80079da:	9302      	str	r3, [sp, #8]
 80079dc:	2300      	movs	r3, #0
 80079de:	9301      	str	r3, [sp, #4]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f7ff fac6 	bl	8006f7c <lfs_dir_compact>
 80079f0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                dir, 0, dir->count);
        if (err) {
 80079f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <lfs_dir_commit+0x4d6>
            return err;
 80079fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a00:	e0b7      	b.n	8007b72 <lfs_dir_commit+0x646>
        }
    }

    // update any directories that are affected
    lfs_mdir_t copy = *dir;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8007a08:	461d      	mov	r5, r3
 8007a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007a12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // two passes, once for things that aren't us, and one
    // for things that are
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a1e:	e0a2      	b.n	8007b66 <lfs_dir_commit+0x63a>
        if (lfs_pair_cmp(d->m.pair, copy.pair) == 0) {
 8007a20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a24:	3308      	adds	r3, #8
 8007a26:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fd fc9f 	bl	8005370 <lfs_pair_cmp>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f040 8091 	bne.w	8007b5c <lfs_dir_commit+0x630>
            d->m = *dir;
 8007a3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	f103 0408 	add.w	r4, r3, #8
 8007a44:	4615      	mov	r5, r2
 8007a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007a4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->id == lfs_tag_id(deletetag)) {
 8007a52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a56:	889c      	ldrh	r4, [r3, #4]
 8007a58:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007a5c:	f7fd fd41 	bl	80054e2 <lfs_tag_id>
 8007a60:	4603      	mov	r3, r0
 8007a62:	429c      	cmp	r4, r3
 8007a64:	d10a      	bne.n	8007a7c <lfs_dir_commit+0x550>
                d->m.pair[0] = LFS_BLOCK_NULL;
 8007a66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a6e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = LFS_BLOCK_NULL;
 8007a70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a78:	60da      	str	r2, [r3, #12]
 8007a7a:	e062      	b.n	8007b42 <lfs_dir_commit+0x616>
            } else if (d->id > lfs_tag_id(deletetag)) {
 8007a7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a80:	889c      	ldrh	r4, [r3, #4]
 8007a82:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007a86:	f7fd fd2c 	bl	80054e2 <lfs_tag_id>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	429c      	cmp	r4, r3
 8007a8e:	d914      	bls.n	8007aba <lfs_dir_commit+0x58e>
                d->id -= 1;
 8007a90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a94:	889b      	ldrh	r3, [r3, #4]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a9e:	809a      	strh	r2, [r3, #4]
                if (d->type == LFS_TYPE_DIR) {
 8007aa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007aa4:	799b      	ldrb	r3, [r3, #6]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d14b      	bne.n	8007b42 <lfs_dir_commit+0x616>
                    ((lfs_dir_t*)d)->pos -= 1;
 8007aaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	1e5a      	subs	r2, r3, #1
 8007ab2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ab8:	e043      	b.n	8007b42 <lfs_dir_commit+0x616>
                }
            } else if (&d->m != dir && d->id >= lfs_tag_id(createtag)) {
 8007aba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007abe:	3308      	adds	r3, #8
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d03d      	beq.n	8007b42 <lfs_dir_commit+0x616>
 8007ac6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007aca:	889c      	ldrh	r4, [r3, #4]
 8007acc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8007ad0:	f7fd fd07 	bl	80054e2 <lfs_tag_id>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	429c      	cmp	r4, r3
 8007ad8:	d333      	bcc.n	8007b42 <lfs_dir_commit+0x616>
                d->id += 1;
 8007ada:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ade:	889b      	ldrh	r3, [r3, #4]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ae8:	809a      	strh	r2, [r3, #4]
                if (d->type == LFS_TYPE_DIR) {
 8007aea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007aee:	799b      	ldrb	r3, [r3, #6]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d126      	bne.n	8007b42 <lfs_dir_commit+0x616>
                    ((lfs_dir_t*)d)->pos += 1;
 8007af4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b00:	629a      	str	r2, [r3, #40]	; 0x28
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8007b02:	e01e      	b.n	8007b42 <lfs_dir_commit+0x616>
                // we split and id is on tail now
                d->id -= d->m.count;
 8007b04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b08:	889a      	ldrh	r2, [r3, #4]
 8007b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b0e:	8b9b      	ldrh	r3, [r3, #28]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b18:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8007b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b1e:	f103 0108 	add.w	r1, r3, #8
 8007b22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b26:	3320      	adds	r3, #32
 8007b28:	461a      	mov	r2, r3
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7fe fe90 	bl	8006850 <lfs_dir_fetch>
 8007b30:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                if (err) {
 8007b34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <lfs_dir_commit+0x616>
                    return err;
 8007b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b40:	e017      	b.n	8007b72 <lfs_dir_commit+0x646>
            while (d->id >= d->m.count && d->m.split) {
 8007b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b46:	889a      	ldrh	r2, [r3, #4]
 8007b48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b4c:	8b9b      	ldrh	r3, [r3, #28]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d304      	bcc.n	8007b5c <lfs_dir_commit+0x630>
 8007b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b56:	7fdb      	ldrb	r3, [r3, #31]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1d3      	bne.n	8007b04 <lfs_dir_commit+0x5d8>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007b5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f47f af58 	bne.w	8007a20 <lfs_dir_commit+0x4f4>
                }
            }
        }
    }

    return 0;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	37a8      	adds	r7, #168	; 0xa8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bdb0      	pop	{r4, r5, r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	08013828 	.word	0x08013828
 8007b80:	08016974 	.word	0x08016974
 8007b84:	080136d8 	.word	0x080136d8

08007b88 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8007b88:	b590      	push	{r4, r7, lr}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	3b08      	subs	r3, #8
 8007ba0:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007baa:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <lfs_ctz_index+0x2e>
        return 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e01c      	b.n	8007bf0 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fd f848 	bl	8004c50 <lfs_popc>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	3302      	adds	r3, #2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	1ad2      	subs	r2, r2, r3
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd0:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	fb02 f303 	mul.w	r3, r2, r3
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	1ad4      	subs	r4, r2, r3
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f7fd f836 	bl	8004c50 <lfs_popc>
 8007be4:	4603      	mov	r3, r0
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	1ae2      	subs	r2, r4, r3
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	601a      	str	r2, [r3, #0]
    return i;
 8007bee:	68fb      	ldr	r3, [r7, #12]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	371c      	adds	r7, #28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd90      	pop	{r4, r7, pc}

08007bf8 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8007bf8:	b590      	push	{r4, r7, lr}
 8007bfa:	b08f      	sub	sp, #60	; 0x3c
 8007bfc:	af04      	add	r7, sp, #16
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d108      	bne.n	8007c1e <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8007c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c12:	601a      	str	r2, [r3, #0]
        *off = 0;
 8007c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]
        return 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e063      	b.n	8007ce6 <lfs_ctz_find+0xee>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	3b01      	subs	r3, #1
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	f107 0314 	add.w	r3, r7, #20
 8007c28:	4619      	mov	r1, r3
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f7ff ffac 	bl	8007b88 <lfs_ctz_index>
 8007c30:	4603      	mov	r3, r0
 8007c32:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8007c34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c38:	4619      	mov	r1, r3
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f7ff ffa4 	bl	8007b88 <lfs_ctz_index>
 8007c40:	4603      	mov	r3, r0
 8007c42:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8007c44:	e044      	b.n	8007cd0 <lfs_ctz_find+0xd8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8007c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fc ffdf 	bl	8004c12 <lfs_npw2>
 8007c54:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8007c56:	1e5c      	subs	r4, r3, #1
 8007c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c5a:	f7fc ffea 	bl	8004c32 <lfs_ctz>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	4619      	mov	r1, r3
 8007c62:	4620      	mov	r0, r4
 8007c64:	f7fc ff9e 	bl	8004ba4 <lfs_min>
 8007c68:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	69fa      	ldr	r2, [r7, #28]
 8007c6e:	0092      	lsls	r2, r2, #2
 8007c70:	2104      	movs	r1, #4
 8007c72:	9103      	str	r1, [sp, #12]
 8007c74:	4639      	mov	r1, r7
 8007c76:	9102      	str	r1, [sp, #8]
 8007c78:	9201      	str	r2, [sp, #4]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	68b9      	ldr	r1, [r7, #8]
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7fd f86a 	bl	8004d5c <lfs_bd_read>
 8007c88:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fc fff9 	bl	8004c84 <lfs_fromle32>
 8007c92:	4603      	mov	r3, r0
 8007c94:	603b      	str	r3, [r7, #0]
        if (err) {
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <lfs_ctz_find+0xa8>
            return err;
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	e022      	b.n	8007ce6 <lfs_ctz_find+0xee>
        }

        LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d905      	bls.n	8007cb2 <lfs_ctz_find+0xba>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007caa:	6a1a      	ldr	r2, [r3, #32]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d206      	bcs.n	8007cc0 <lfs_ctz_find+0xc8>
 8007cb2:	4b0f      	ldr	r3, [pc, #60]	; (8007cf0 <lfs_ctz_find+0xf8>)
 8007cb4:	4a0f      	ldr	r2, [pc, #60]	; (8007cf4 <lfs_ctz_find+0xfc>)
 8007cb6:	f640 016d 	movw	r1, #2157	; 0x86d
 8007cba:	480f      	ldr	r0, [pc, #60]	; (8007cf8 <lfs_ctz_find+0x100>)
 8007cbc:	f009 fc52 	bl	8011564 <__assert_func>
        current -= 1 << skip;
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8007cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d8b6      	bhi.n	8007c46 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cdc:	601a      	str	r2, [r3, #0]
    *off = pos;
 8007cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce2:	601a      	str	r2, [r3, #0]
    return 0;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	372c      	adds	r7, #44	; 0x2c
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd90      	pop	{r4, r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	08013af4 	.word	0x08013af4
 8007cf4:	08016984 	.word	0x08016984
 8007cf8:	080136d8 	.word	0x080136d8

08007cfc <lfs_ctz_extend>:

static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b090      	sub	sp, #64	; 0x40
 8007d00:	af04      	add	r7, sp, #16
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8007d0a:	f107 0318 	add.w	r3, r7, #24
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7fd fe03 	bl	800591c <lfs_alloc>
 8007d16:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <lfs_ctz_extend+0x26>
            return err;
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	e103      	b.n	8007f2a <lfs_ctz_extend+0x22e>
        }
        LFS_ASSERT(nblock >= 2 && nblock <= lfs->cfg->block_count);
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d905      	bls.n	8007d34 <lfs_ctz_extend+0x38>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d2c:	6a1a      	ldr	r2, [r3, #32]
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d206      	bcs.n	8007d42 <lfs_ctz_extend+0x46>
 8007d34:	4b7f      	ldr	r3, [pc, #508]	; (8007f34 <lfs_ctz_extend+0x238>)
 8007d36:	4a80      	ldr	r2, [pc, #512]	; (8007f38 <lfs_ctz_extend+0x23c>)
 8007d38:	f640 0181 	movw	r1, #2177	; 0x881
 8007d3c:	487f      	ldr	r0, [pc, #508]	; (8007f3c <lfs_ctz_extend+0x240>)
 8007d3e:	f009 fc11 	bl	8011564 <__assert_func>

        {
            err = lfs_bd_erase(lfs, nblock);
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	4619      	mov	r1, r3
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f7fd fab2 	bl	80052b0 <lfs_bd_erase>
 8007d4c:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d006      	beq.n	8007d62 <lfs_ctz_extend+0x66>
                if (err == LFS_ERR_CORRUPT) {
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007d5a:	f000 80d5 	beq.w	8007f08 <lfs_ctz_extend+0x20c>
                    goto relocate;
                }
                return err;
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	e0e3      	b.n	8007f2a <lfs_ctz_extend+0x22e>
            }

            if (size == 0) {
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d107      	bne.n	8007d78 <lfs_ctz_extend+0x7c>
                *block = nblock;
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6c:	601a      	str	r2, [r3, #0]
                *off = 0;
 8007d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]
                return 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e0d8      	b.n	8007f2a <lfs_ctz_extend+0x22e>
            }

            size -= 1;
 8007d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	63bb      	str	r3, [r7, #56]	; 0x38
            lfs_off_t index = lfs_ctz_index(lfs, &size);
 8007d7e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f7ff ff00 	bl	8007b88 <lfs_ctz_index>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	623b      	str	r3, [r7, #32]
            size += 1;
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	3301      	adds	r3, #1
 8007d90:	63bb      	str	r3, [r7, #56]	; 0x38

            // just copy out the last block if it is incomplete
            if (size != lfs->cfg->block_size) {
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d96:	69da      	ldr	r2, [r3, #28]
 8007d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d043      	beq.n	8007e26 <lfs_ctz_extend+0x12a>
                for (lfs_off_t i = 0; i < size; i++) {
 8007d9e:	2300      	movs	r3, #0
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007da2:	e034      	b.n	8007e0e <lfs_ctz_extend+0x112>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8007da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	1ad1      	subs	r1, r2, r3
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2201      	movs	r2, #1
 8007dae:	9203      	str	r2, [sp, #12]
 8007db0:	f107 0217 	add.w	r2, r7, #23
 8007db4:	9202      	str	r2, [sp, #8]
 8007db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007db8:	9201      	str	r2, [sp, #4]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f7fc ffca 	bl	8004d5c <lfs_bd_read>
 8007dc8:	6278      	str	r0, [r7, #36]	; 0x24
                            NULL, rcache, size-i,
                            head, i, &data, 1);
                    if (err) {
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <lfs_ctz_extend+0xd8>
                        return err;
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	e0aa      	b.n	8007f2a <lfs_ctz_extend+0x22e>
                    }

                    err = lfs_bd_prog(lfs,
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	9203      	str	r2, [sp, #12]
 8007dda:	f107 0217 	add.w	r2, r7, #23
 8007dde:	9202      	str	r2, [sp, #8]
 8007de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007de2:	9201      	str	r2, [sp, #4]
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	2301      	movs	r3, #1
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7fd f9b9 	bl	8005164 <lfs_bd_prog>
 8007df2:	6278      	str	r0, [r7, #36]	; 0x24
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d006      	beq.n	8007e08 <lfs_ctz_extend+0x10c>
                        if (err == LFS_ERR_CORRUPT) {
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007e00:	f000 8084 	beq.w	8007f0c <lfs_ctz_extend+0x210>
                            goto relocate;
                        }
                        return err;
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	e090      	b.n	8007f2a <lfs_ctz_extend+0x22e>
                for (lfs_off_t i = 0; i < size; i++) {
 8007e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d3c6      	bcc.n	8007da4 <lfs_ctz_extend+0xa8>
                    }
                }

                *block = nblock;
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1a:	601a      	str	r2, [r3, #0]
                *off = size;
 8007e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e20:	601a      	str	r2, [r3, #0]
                return 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	e081      	b.n	8007f2a <lfs_ctz_extend+0x22e>
            }

            // append block
            index += 1;
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	623b      	str	r3, [r7, #32]
            lfs_size_t skips = lfs_ctz(index) + 1;
 8007e2c:	6a38      	ldr	r0, [r7, #32]
 8007e2e:	f7fc ff00 	bl	8004c32 <lfs_ctz>
 8007e32:	4603      	mov	r3, r0
 8007e34:	3301      	adds	r3, #1
 8007e36:	61fb      	str	r3, [r7, #28]

            for (lfs_off_t i = 0; i < skips; i++) {
 8007e38:	2300      	movs	r3, #0
 8007e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e3c:	e057      	b.n	8007eee <lfs_ctz_extend+0x1f2>
                head = lfs_tole32(head);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fc ff2a 	bl	8004c9a <lfs_tole32>
 8007e46:	4603      	mov	r3, r0
 8007e48:	603b      	str	r3, [r7, #0]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e4e:	0092      	lsls	r2, r2, #2
 8007e50:	2104      	movs	r1, #4
 8007e52:	9103      	str	r1, [sp, #12]
 8007e54:	4639      	mov	r1, r7
 8007e56:	9102      	str	r1, [sp, #8]
 8007e58:	9201      	str	r2, [sp, #4]
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7fd f97e 	bl	8005164 <lfs_bd_prog>
 8007e68:	6278      	str	r0, [r7, #36]	; 0x24
                        nblock, 4*i, &head, 4);
                head = lfs_fromle32(head);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fc ff09 	bl	8004c84 <lfs_fromle32>
 8007e72:	4603      	mov	r3, r0
 8007e74:	603b      	str	r3, [r7, #0]
                if (err) {
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <lfs_ctz_extend+0x18c>
                    if (err == LFS_ERR_CORRUPT) {
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007e82:	d045      	beq.n	8007f10 <lfs_ctz_extend+0x214>
                        goto relocate;
                    }
                    return err;
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	e050      	b.n	8007f2a <lfs_ctz_extend+0x22e>
                }

                if (i != skips-1) {
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d01a      	beq.n	8007ec8 <lfs_ctz_extend+0x1cc>
                    err = lfs_bd_read(lfs,
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e96:	0092      	lsls	r2, r2, #2
 8007e98:	2104      	movs	r1, #4
 8007e9a:	9103      	str	r1, [sp, #12]
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	9102      	str	r1, [sp, #8]
 8007ea0:	9201      	str	r2, [sp, #4]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	2304      	movs	r3, #4
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7fc ff56 	bl	8004d5c <lfs_bd_read>
 8007eb0:	6278      	str	r0, [r7, #36]	; 0x24
                            NULL, rcache, sizeof(head),
                            head, 4*i, &head, sizeof(head));
                    head = lfs_fromle32(head);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fc fee5 	bl	8004c84 <lfs_fromle32>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	603b      	str	r3, [r7, #0]
                    if (err) {
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <lfs_ctz_extend+0x1cc>
                        return err;
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	e030      	b.n	8007f2a <lfs_ctz_extend+0x22e>
                    }
                }

                LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d905      	bls.n	8007eda <lfs_ctz_extend+0x1de>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ed2:	6a1a      	ldr	r2, [r3, #32]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d206      	bcs.n	8007ee8 <lfs_ctz_extend+0x1ec>
 8007eda:	4b19      	ldr	r3, [pc, #100]	; (8007f40 <lfs_ctz_extend+0x244>)
 8007edc:	4a16      	ldr	r2, [pc, #88]	; (8007f38 <lfs_ctz_extend+0x23c>)
 8007ede:	f640 01cb 	movw	r1, #2251	; 0x8cb
 8007ee2:	4816      	ldr	r0, [pc, #88]	; (8007f3c <lfs_ctz_extend+0x240>)
 8007ee4:	f009 fb3e 	bl	8011564 <__assert_func>
            for (lfs_off_t i = 0; i < skips; i++) {
 8007ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eea:	3301      	adds	r3, #1
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d3a3      	bcc.n	8007e3e <lfs_ctz_extend+0x142>
            }

            *block = nblock;
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efa:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	009a      	lsls	r2, r3, #2
 8007f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f02:	601a      	str	r2, [r3, #0]
            return 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e010      	b.n	8007f2a <lfs_ctz_extend+0x22e>
                    goto relocate;
 8007f08:	bf00      	nop
 8007f0a:	e002      	b.n	8007f12 <lfs_ctz_extend+0x216>
                            goto relocate;
 8007f0c:	bf00      	nop
 8007f0e:	e000      	b.n	8007f12 <lfs_ctz_extend+0x216>
                        goto relocate;
 8007f10:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at %"PRIx32, nblock);
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	461a      	mov	r2, r3
 8007f16:	f640 01d4 	movw	r1, #2260	; 0x8d4
 8007f1a:	480a      	ldr	r0, [pc, #40]	; (8007f44 <lfs_ctz_extend+0x248>)
 8007f1c:	f00a f91a 	bl	8012154 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7fc fef4 	bl	8004d10 <lfs_cache_drop>
    while (true) {
 8007f28:	e6ef      	b.n	8007d0a <lfs_ctz_extend+0xe>
    }
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3730      	adds	r7, #48	; 0x30
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	08013b20 	.word	0x08013b20
 8007f38:	08016994 	.word	0x08016994
 8007f3c:	080136d8 	.word	0x080136d8
 8007f40:	08013af4 	.word	0x08013af4
 8007f44:	08013850 	.word	0x08013850

08007f48 <lfs_ctz_traverse>:

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b090      	sub	sp, #64	; 0x40
 8007f4c:	af04      	add	r7, sp, #16
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <lfs_ctz_traverse+0x18>
        return 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e06b      	b.n	8008038 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	3b01      	subs	r3, #1
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	f107 031c 	add.w	r3, r7, #28
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff fe0b 	bl	8007b88 <lfs_ctz_index>
 8007f72:	4603      	mov	r3, r0
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8007f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007f7c:	4798      	blx	r3
 8007f7e:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <lfs_ctz_traverse+0x42>
            return err;
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	e056      	b.n	8008038 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8007f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <lfs_ctz_traverse+0x4c>
            return 0;
 8007f90:	2300      	movs	r3, #0
 8007f92:	e051      	b.n	8008038 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8007f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	f1c3 0302 	rsb	r3, r3, #2
 8007f9e:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8007fa2:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8007fa6:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8007fa8:	9303      	str	r3, [sp, #12]
 8007faa:	f107 0314 	add.w	r3, r7, #20
 8007fae:	9302      	str	r3, [sp, #8]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9301      	str	r3, [sp, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	68b9      	ldr	r1, [r7, #8]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7fc fecc 	bl	8004d5c <lfs_bd_read>
 8007fc4:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fc fe5b 	bl	8004c84 <lfs_fromle32>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fc fe55 	bl	8004c84 <lfs_fromle32>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	61bb      	str	r3, [r7, #24]
        if (err) {
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <lfs_ctz_traverse+0xa0>
            return err;
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	e027      	b.n	8008038 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8007fe8:	2300      	movs	r3, #0
 8007fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fec:	e012      	b.n	8008014 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8007fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	3330      	adds	r3, #48	; 0x30
 8007ff4:	443b      	add	r3, r7
 8007ff6:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8007ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008000:	4798      	blx	r3
 8008002:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <lfs_ctz_traverse+0xc6>
                return err;
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	e014      	b.n	8008038 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800800e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008010:	3301      	adds	r3, #1
 8008012:	62bb      	str	r3, [r7, #40]	; 0x28
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	3b01      	subs	r3, #1
 8008018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800801a:	429a      	cmp	r2, r3
 800801c:	dbe7      	blt.n	8007fee <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	3b01      	subs	r3, #1
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	3330      	adds	r3, #48	; 0x30
 8008026:	443b      	add	r3, r7
 8008028:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800802c:	603b      	str	r3, [r7, #0]
        index -= count;
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8008036:	e79e      	b.n	8007f76 <lfs_ctz_traverse+0x2e>
    }
}
 8008038:	4618      	mov	r0, r3
 800803a:	3730      	adds	r7, #48	; 0x30
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <lfs_file_relocate>:
    file->flags &= ~LFS_F_OPENED;
    LFS_TRACE("lfs_file_close -> %d", err);
    return err;
}

static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8008040:	b590      	push	{r4, r7, lr}
 8008042:	b08d      	sub	sp, #52	; 0x34
 8008044:	af06      	add	r7, sp, #24
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(file->flags & LFS_F_OPENED);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d106      	bne.n	8008064 <lfs_file_relocate+0x24>
 8008056:	4b68      	ldr	r3, [pc, #416]	; (80081f8 <lfs_file_relocate+0x1b8>)
 8008058:	4a68      	ldr	r2, [pc, #416]	; (80081fc <lfs_file_relocate+0x1bc>)
 800805a:	f640 11c5 	movw	r1, #2501	; 0x9c5
 800805e:	4868      	ldr	r0, [pc, #416]	; (8008200 <lfs_file_relocate+0x1c0>)
 8008060:	f009 fa80 	bl	8011564 <__assert_func>

    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8008064:	f107 030c 	add.w	r3, r7, #12
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7fd fc56 	bl	800591c <lfs_alloc>
 8008070:	6138      	str	r0, [r7, #16]
        if (err) {
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <lfs_file_relocate+0x3c>
            return err;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	e0b9      	b.n	80081f0 <lfs_file_relocate+0x1b0>
        }

        err = lfs_bd_erase(lfs, nblock);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fd f915 	bl	80052b0 <lfs_bd_erase>
 8008086:	6138      	str	r0, [r7, #16]
        if (err) {
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d006      	beq.n	800809c <lfs_file_relocate+0x5c>
            if (err == LFS_ERR_CORRUPT) {
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008094:	f000 809b 	beq.w	80081ce <lfs_file_relocate+0x18e>
                goto relocate;
            }
            return err;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	e0a9      	b.n	80081f0 <lfs_file_relocate+0x1b0>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800809c:	2300      	movs	r3, #0
 800809e:	617b      	str	r3, [r7, #20]
 80080a0:	e069      	b.n	8008176 <lfs_file_relocate+0x136>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d027      	beq.n	80080fe <lfs_file_relocate+0xbe>
                err = lfs_dir_getread(lfs, &file->m,
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	f103 0008 	add.w	r0, r3, #8
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	889b      	ldrh	r3, [r3, #4]
 80080c6:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80080c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080d0:	2101      	movs	r1, #1
 80080d2:	9105      	str	r1, [sp, #20]
 80080d4:	f107 010b 	add.w	r1, r7, #11
 80080d8:	9104      	str	r1, [sp, #16]
 80080da:	6979      	ldr	r1, [r7, #20]
 80080dc:	9103      	str	r1, [sp, #12]
 80080de:	9302      	str	r3, [sp, #8]
 80080e0:	4b48      	ldr	r3, [pc, #288]	; (8008204 <lfs_file_relocate+0x1c4>)
 80080e2:	9301      	str	r3, [sp, #4]
 80080e4:	9200      	str	r2, [sp, #0]
 80080e6:	4623      	mov	r3, r4
 80080e8:	2200      	movs	r2, #0
 80080ea:	4601      	mov	r1, r0
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7fd fdc8 	bl	8005c82 <lfs_dir_getread>
 80080f2:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d01e      	beq.n	8008138 <lfs_file_relocate+0xf8>
                    return err;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	e078      	b.n	80081f0 <lfs_file_relocate+0x1b0>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8008104:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	1ad4      	subs	r4, r2, r3
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	2201      	movs	r2, #1
 8008114:	9203      	str	r2, [sp, #12]
 8008116:	f107 020b 	add.w	r2, r7, #11
 800811a:	9202      	str	r2, [sp, #8]
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	9201      	str	r2, [sp, #4]
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	4623      	mov	r3, r4
 8008124:	4602      	mov	r2, r0
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fc fe18 	bl	8004d5c <lfs_bd_read>
 800812c:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <lfs_file_relocate+0xf8>
                    return err;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	e05b      	b.n	80081f0 <lfs_file_relocate+0x1b0>
                }
            }

            err = lfs_bd_prog(lfs,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f103 0110 	add.w	r1, r3, #16
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2201      	movs	r2, #1
 8008144:	9203      	str	r2, [sp, #12]
 8008146:	f107 020b 	add.w	r2, r7, #11
 800814a:	9202      	str	r2, [sp, #8]
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	9201      	str	r2, [sp, #4]
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	2301      	movs	r3, #1
 8008154:	4602      	mov	r2, r0
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7fd f804 	bl	8005164 <lfs_bd_prog>
 800815c:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d005      	beq.n	8008170 <lfs_file_relocate+0x130>
                if (err == LFS_ERR_CORRUPT) {
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800816a:	d032      	beq.n	80081d2 <lfs_file_relocate+0x192>
                    goto relocate;
                }
                return err;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	e03f      	b.n	80081f0 <lfs_file_relocate+0x1b0>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	3301      	adds	r3, #1
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	429a      	cmp	r2, r3
 800817e:	d390      	bcc.n	80080a2 <lfs_file_relocate+0x62>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	69d9      	ldr	r1, [r3, #28]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800818c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818e:	461a      	mov	r2, r3
 8008190:	f009 fbfc 	bl	801198c <memcpy>
        file->cache.block = lfs->pcache.block;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691a      	ldr	r2, [r3, #16]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	695a      	ldr	r2, [r3, #20]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	699a      	ldr	r2, [r3, #24]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3310      	adds	r3, #16
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7fc fdbb 	bl	8004d2e <lfs_cache_zero>

        file->block = nblock;
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	e010      	b.n	80081f0 <lfs_file_relocate+0x1b0>
                goto relocate;
 80081ce:	bf00      	nop
 80081d0:	e000      	b.n	80081d4 <lfs_file_relocate+0x194>
                    goto relocate;
 80081d2:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at %"PRIx32, nblock);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	461a      	mov	r2, r3
 80081d8:	f640 2104 	movw	r1, #2564	; 0xa04
 80081dc:	480a      	ldr	r0, [pc, #40]	; (8008208 <lfs_file_relocate+0x1c8>)
 80081de:	f009 ffb9 	bl	8012154 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3310      	adds	r3, #16
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7fc fd91 	bl	8004d10 <lfs_cache_drop>
    while (true) {
 80081ee:	e739      	b.n	8008064 <lfs_file_relocate+0x24>
    }
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	371c      	adds	r7, #28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd90      	pop	{r4, r7, pc}
 80081f8:	08013c54 	.word	0x08013c54
 80081fc:	080169a4 	.word	0x080169a4
 8008200:	080136d8 	.word	0x080136d8
 8008204:	fff7fc00 	.word	0xfff7fc00
 8008208:	08013850 	.word	0x08013850

0800820c <lfs_file_outline>:

static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7fd fc26 	bl	8005a70 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff ff0a 	bl	8008040 <lfs_file_relocate>
 800822c:	60f8      	str	r0, [r7, #12]
    if (err) {
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <lfs_file_outline+0x2c>
        return err;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	e006      	b.n	8008246 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <lfs_file_flush>:

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8008250:	b590      	push	{r4, r7, lr}
 8008252:	b09d      	sub	sp, #116	; 0x74
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(file->flags & LFS_F_OPENED);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d106      	bne.n	8008274 <lfs_file_flush+0x24>
 8008266:	4b66      	ldr	r3, [pc, #408]	; (8008400 <lfs_file_flush+0x1b0>)
 8008268:	4a66      	ldr	r2, [pc, #408]	; (8008404 <lfs_file_flush+0x1b4>)
 800826a:	f640 2118 	movw	r1, #2584	; 0xa18
 800826e:	4866      	ldr	r0, [pc, #408]	; (8008408 <lfs_file_flush+0x1b8>)
 8008270:	f009 f978 	bl	8011564 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d011      	beq.n	80082a4 <lfs_file_flush+0x54>
        if (!(file->flags & LFS_F_INLINE)) {
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d105      	bne.n	8008298 <lfs_file_flush+0x48>
            lfs_cache_drop(lfs, &file->cache);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	3340      	adds	r3, #64	; 0x40
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7fc fd3c 	bl	8004d10 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 80a2 	beq.w	80083f6 <lfs_file_flush+0x1a6>
        lfs_off_t pos = file->pos;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b6:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d174      	bne.n	80083ae <lfs_file_flush+0x15e>
            // copy over anything after current branch
            lfs_file_t orig = {
 80082c4:	f107 030c 	add.w	r3, r7, #12
 80082c8:	2254      	movs	r2, #84	; 0x54
 80082ca:	2100      	movs	r1, #0
 80082cc:	4618      	mov	r0, r3
 80082ce:	f009 fb6b 	bl	80119a8 <memset>
                .ctz.head = file->ctz.head,
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80082d6:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80082dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80082de:	4b4b      	ldr	r3, [pc, #300]	; (800840c <lfs_file_flush+0x1bc>)
 80082e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY | LFS_F_OPENED,
                .pos = file->pos,
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80082e6:	643b      	str	r3, [r7, #64]	; 0x40
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80082ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7fc fd09 	bl	8004d10 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80082fe:	e02b      	b.n	8008358 <lfs_file_flush+0x108>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
 8008300:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008304:	f107 010c 	add.w	r1, r7, #12
 8008308:	2301      	movs	r3, #1
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f882 	bl	8008414 <lfs_file_read>
 8008310:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8008312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008314:	2b00      	cmp	r3, #0
 8008316:	da01      	bge.n	800831c <lfs_file_flush+0xcc>
                    return res;
 8008318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800831a:	e06d      	b.n	80083f8 <lfs_file_flush+0x1a8>
                }

                res = lfs_file_write(lfs, file, &data, 1);
 800831c:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008320:	2301      	movs	r3, #1
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f9ab 	bl	8008680 <lfs_file_write>
 800832a:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800832c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800832e:	2b00      	cmp	r3, #0
 8008330:	da01      	bge.n	8008336 <lfs_file_flush+0xe6>
                    return res;
 8008332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008334:	e060      	b.n	80083f8 <lfs_file_flush+0x1a8>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800833e:	d00b      	beq.n	8008358 <lfs_file_flush+0x108>
                    lfs_cache_drop(lfs, &orig.cache);
 8008340:	f107 030c 	add.w	r3, r7, #12
 8008344:	3340      	adds	r3, #64	; 0x40
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7fc fce1 	bl	8004d10 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7fc fcdc 	bl	8004d10 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	429a      	cmp	r2, r3
 8008362:	d3cd      	bcc.n	8008300 <lfs_file_flush+0xb0>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	2301      	movs	r3, #1
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7fc fe48 	bl	8005004 <lfs_bd_flush>
 8008374:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8008376:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008378:	2b00      	cmp	r3, #0
 800837a:	d024      	beq.n	80083c6 <lfs_file_flush+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800837c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800837e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008382:	d001      	beq.n	8008388 <lfs_file_flush+0x138>
                        goto relocate;
                    }
                    return err;
 8008384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008386:	e037      	b.n	80083f8 <lfs_file_flush+0x1a8>
                        goto relocate;
 8008388:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at %"PRIx32, file->block);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838e:	461a      	mov	r2, r3
 8008390:	f640 2151 	movw	r1, #2641	; 0xa51
 8008394:	481e      	ldr	r0, [pc, #120]	; (8008410 <lfs_file_flush+0x1c0>)
 8008396:	f009 fedd 	bl	8012154 <iprintf>
                err = lfs_file_relocate(lfs, file);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fe4f 	bl	8008040 <lfs_file_relocate>
 80083a2:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80083a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0dc      	beq.n	8008364 <lfs_file_flush+0x114>
                    return err;
 80083aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083ac:	e024      	b.n	80083f8 <lfs_file_flush+0x1a8>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	4619      	mov	r1, r3
 80083b8:	4610      	mov	r0, r2
 80083ba:	f7fc fbe3 	bl	8004b84 <lfs_max>
 80083be:	4602      	mov	r2, r0
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	635a      	str	r2, [r3, #52]	; 0x34
 80083c4:	e000      	b.n	80083c8 <lfs_file_flush+0x178>
                break;
 80083c6:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083f4:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return 0;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3774      	adds	r7, #116	; 0x74
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd90      	pop	{r4, r7, pc}
 8008400:	08013c54 	.word	0x08013c54
 8008404:	080169b8 	.word	0x080169b8
 8008408:	080136d8 	.word	0x080136d8
 800840c:	00200001 	.word	0x00200001
 8008410:	08013850 	.word	0x08013850

08008414 <lfs_file_read>:
        }
    }
}

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008414:	b5b0      	push	{r4, r5, r7, lr}
 8008416:	b092      	sub	sp, #72	; 0x48
 8008418:	af06      	add	r7, sp, #24
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	603b      	str	r3, [r7, #0]
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	f640 21ab 	movw	r1, #2731	; 0xaab
 8008432:	488c      	ldr	r0, [pc, #560]	; (8008664 <lfs_file_read+0x250>)
 8008434:	f009 fe8e 	bl	8012154 <iprintf>
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d106      	bne.n	8008452 <lfs_file_read+0x3e>
 8008444:	4b88      	ldr	r3, [pc, #544]	; (8008668 <lfs_file_read+0x254>)
 8008446:	4a89      	ldr	r2, [pc, #548]	; (800866c <lfs_file_read+0x258>)
 8008448:	f640 21ad 	movw	r1, #2733	; 0xaad
 800844c:	4888      	ldr	r0, [pc, #544]	; (8008670 <lfs_file_read+0x25c>)
 800844e:	f009 f889 	bl	8011564 <__assert_func>
    LFS_ASSERT((file->flags & 3) != LFS_O_WRONLY);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d106      	bne.n	800846c <lfs_file_read+0x58>
 800845e:	4b85      	ldr	r3, [pc, #532]	; (8008674 <lfs_file_read+0x260>)
 8008460:	4a82      	ldr	r2, [pc, #520]	; (800866c <lfs_file_read+0x258>)
 8008462:	f640 21ae 	movw	r1, #2734	; 0xaae
 8008466:	4882      	ldr	r0, [pc, #520]	; (8008670 <lfs_file_read+0x25c>)
 8008468:	f009 f87c 	bl	8011564 <__assert_func>

    uint8_t *data = buffer;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	62bb      	str	r3, [r7, #40]	; 0x28

    if (file->flags & LFS_F_WRITING) {
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00f      	beq.n	80084a0 <lfs_file_read+0x8c>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8008480:	68b9      	ldr	r1, [r7, #8]
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f7ff fee4 	bl	8008250 <lfs_file_flush>
 8008488:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	2b00      	cmp	r3, #0
 800848e:	d007      	beq.n	80084a0 <lfs_file_read+0x8c>
            LFS_TRACE("lfs_file_read -> %"PRId32, err);
 8008490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008492:	f640 21b7 	movw	r1, #2743	; 0xab7
 8008496:	4878      	ldr	r0, [pc, #480]	; (8008678 <lfs_file_read+0x264>)
 8008498:	f009 fe5c 	bl	8012154 <iprintf>
            return err;
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	e0dd      	b.n	800865c <lfs_file_read+0x248>
        }
    }

    if (file->pos >= file->ctz.size) {
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d307      	bcc.n	80084bc <lfs_file_read+0xa8>
        // eof if past end
        LFS_TRACE("lfs_file_read -> %"PRId32, 0);
 80084ac:	2200      	movs	r2, #0
 80084ae:	f640 21be 	movw	r1, #2750	; 0xabe
 80084b2:	4871      	ldr	r0, [pc, #452]	; (8008678 <lfs_file_read+0x264>)
 80084b4:	f009 fe4e 	bl	8012154 <iprintf>
        return 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	e0cf      	b.n	800865c <lfs_file_read+0x248>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	4619      	mov	r1, r3
 80084c8:	6838      	ldr	r0, [r7, #0]
 80084ca:	f7fc fb6b 	bl	8004ba4 <lfs_min>
 80084ce:	6038      	str	r0, [r7, #0]
    nsize = size;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	62bb      	str	r3, [r7, #40]	; 0x28

    while (nsize > 0) {
 80084d4:	e0b7      	b.n	8008646 <lfs_file_read+0x232>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d006      	beq.n	80084f0 <lfs_file_read+0xdc>
                file->off == lfs->cfg->block_size) {
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084ea:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d136      	bne.n	800855e <lfs_file_read+0x14a>
            if (!(file->flags & LFS_F_INLINE)) {
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d122      	bne.n	8008542 <lfs_file_read+0x12e>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800850e:	68b9      	ldr	r1, [r7, #8]
 8008510:	3138      	adds	r1, #56	; 0x38
 8008512:	68b8      	ldr	r0, [r7, #8]
 8008514:	303c      	adds	r0, #60	; 0x3c
 8008516:	9003      	str	r0, [sp, #12]
 8008518:	9102      	str	r1, [sp, #8]
 800851a:	9201      	str	r2, [sp, #4]
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	462b      	mov	r3, r5
 8008520:	4622      	mov	r2, r4
 8008522:	2100      	movs	r1, #0
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f7ff fb67 	bl	8007bf8 <lfs_ctz_find>
 800852a:	6238      	str	r0, [r7, #32]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00f      	beq.n	8008552 <lfs_file_read+0x13e>
                    LFS_TRACE("lfs_file_read -> %"PRId32, err);
 8008532:	6a3a      	ldr	r2, [r7, #32]
 8008534:	f640 21ce 	movw	r1, #2766	; 0xace
 8008538:	484f      	ldr	r0, [pc, #316]	; (8008678 <lfs_file_read+0x264>)
 800853a:	f009 fe0b 	bl	8012154 <iprintf>
                    return err;
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	e08c      	b.n	800865c <lfs_file_read+0x248>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	f06f 0201 	mvn.w	r2, #1
 8008548:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008562:	69da      	ldr	r2, [r3, #28]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	4619      	mov	r1, r3
 800856c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800856e:	f7fc fb19 	bl	8004ba4 <lfs_min>
 8008572:	61f8      	str	r0, [r7, #28]
        if (file->flags & LFS_F_INLINE) {
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d02c      	beq.n	80085da <lfs_file_read+0x1c6>
            int err = lfs_dir_getread(lfs, &file->m,
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f103 0408 	add.w	r4, r3, #8
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 8008590:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	889b      	ldrh	r3, [r3, #4]
 8008596:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8008598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800859c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085a0:	68b9      	ldr	r1, [r7, #8]
 80085a2:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80085a4:	69f8      	ldr	r0, [r7, #28]
 80085a6:	9005      	str	r0, [sp, #20]
 80085a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085aa:	9004      	str	r0, [sp, #16]
 80085ac:	9103      	str	r1, [sp, #12]
 80085ae:	9302      	str	r3, [sp, #8]
 80085b0:	4b32      	ldr	r3, [pc, #200]	; (800867c <lfs_file_read+0x268>)
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	9200      	str	r2, [sp, #0]
 80085b6:	462b      	mov	r3, r5
 80085b8:	2200      	movs	r2, #0
 80085ba:	4621      	mov	r1, r4
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7fd fb60 	bl	8005c82 <lfs_dir_getread>
 80085c2:	6178      	str	r0, [r7, #20]
                    file->off, data, diff);
            if (err) {
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d029      	beq.n	800861e <lfs_file_read+0x20a>
                LFS_TRACE("lfs_file_read -> %"PRId32, err);
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	f640 21e2 	movw	r1, #2786	; 0xae2
 80085d0:	4829      	ldr	r0, [pc, #164]	; (8008678 <lfs_file_read+0x264>)
 80085d2:	f009 fdbf 	bl	8012154 <iprintf>
                return err;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	e040      	b.n	800865c <lfs_file_read+0x248>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80085e4:	69dc      	ldr	r4, [r3, #28]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80085ee:	69f9      	ldr	r1, [r7, #28]
 80085f0:	9103      	str	r1, [sp, #12]
 80085f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085f4:	9102      	str	r1, [sp, #8]
 80085f6:	9201      	str	r2, [sp, #4]
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	4623      	mov	r3, r4
 80085fc:	4602      	mov	r2, r0
 80085fe:	2100      	movs	r1, #0
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f7fc fbab 	bl	8004d5c <lfs_bd_read>
 8008606:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <lfs_file_read+0x20a>
                LFS_TRACE("lfs_file_read -> %"PRId32, err);
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	f640 21ea 	movw	r1, #2794	; 0xaea
 8008614:	4818      	ldr	r0, [pc, #96]	; (8008678 <lfs_file_read+0x264>)
 8008616:	f009 fd9d 	bl	8012154 <iprintf>
                return err;
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	e01e      	b.n	800865c <lfs_file_read+0x248>
            }
        }

        file->pos += diff;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	441a      	add	r2, r3
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	441a      	add	r2, r3
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8008636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	4413      	add	r3, r2
 800863c:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 800863e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	62bb      	str	r3, [r7, #40]	; 0x28
    while (nsize > 0) {
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	2b00      	cmp	r3, #0
 800864a:	f47f af44 	bne.w	80084d6 <lfs_file_read+0xc2>
    }

    LFS_TRACE("lfs_file_read -> %"PRId32, size);
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	f640 21f5 	movw	r1, #2805	; 0xaf5
 8008654:	4808      	ldr	r0, [pc, #32]	; (8008678 <lfs_file_read+0x264>)
 8008656:	f009 fd7d 	bl	8012154 <iprintf>
    return size;
 800865a:	683b      	ldr	r3, [r7, #0]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3730      	adds	r7, #48	; 0x30
 8008660:	46bd      	mov	sp, r7
 8008662:	bdb0      	pop	{r4, r5, r7, pc}
 8008664:	08013ce0 	.word	0x08013ce0
 8008668:	08013c54 	.word	0x08013c54
 800866c:	080169c8 	.word	0x080169c8
 8008670:	080136d8 	.word	0x080136d8
 8008674:	08013d10 	.word	0x08013d10
 8008678:	08013d34 	.word	0x08013d34
 800867c:	fff7fc00 	.word	0xfff7fc00

08008680 <lfs_file_write>:

lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008680:	b5b0      	push	{r4, r5, r7, lr}
 8008682:	b094      	sub	sp, #80	; 0x50
 8008684:	af04      	add	r7, sp, #16
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	f640 21fb 	movw	r1, #2811	; 0xafb
 800869e:	4886      	ldr	r0, [pc, #536]	; (80088b8 <lfs_file_write+0x238>)
 80086a0:	f009 fd58 	bl	8012154 <iprintf>
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d106      	bne.n	80086be <lfs_file_write+0x3e>
 80086b0:	4b82      	ldr	r3, [pc, #520]	; (80088bc <lfs_file_write+0x23c>)
 80086b2:	4a83      	ldr	r2, [pc, #524]	; (80088c0 <lfs_file_write+0x240>)
 80086b4:	f640 21fd 	movw	r1, #2813	; 0xafd
 80086b8:	4882      	ldr	r0, [pc, #520]	; (80088c4 <lfs_file_write+0x244>)
 80086ba:	f008 ff53 	bl	8011564 <__assert_func>
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c2:	f003 0303 	and.w	r3, r3, #3
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d106      	bne.n	80086d8 <lfs_file_write+0x58>
 80086ca:	4b7f      	ldr	r3, [pc, #508]	; (80088c8 <lfs_file_write+0x248>)
 80086cc:	4a7c      	ldr	r2, [pc, #496]	; (80088c0 <lfs_file_write+0x240>)
 80086ce:	f640 21fe 	movw	r1, #2814	; 0xafe
 80086d2:	487c      	ldr	r0, [pc, #496]	; (80088c4 <lfs_file_write+0x244>)
 80086d4:	f008 ff46 	bl	8011564 <__assert_func>

    const uint8_t *data = buffer;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
    lfs_size_t nsize = size;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	63bb      	str	r3, [r7, #56]	; 0x38

    if (file->flags & LFS_F_READING) {
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00f      	beq.n	800870c <lfs_file_write+0x8c>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80086ec:	68b9      	ldr	r1, [r7, #8]
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f7ff fdae 	bl	8008250 <lfs_file_flush>
 80086f4:	6378      	str	r0, [r7, #52]	; 0x34
        if (err) {
 80086f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d007      	beq.n	800870c <lfs_file_write+0x8c>
            LFS_TRACE("lfs_file_write -> %"PRId32, err);
 80086fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086fe:	f640 3107 	movw	r1, #2823	; 0xb07
 8008702:	4872      	ldr	r0, [pc, #456]	; (80088cc <lfs_file_write+0x24c>)
 8008704:	f009 fd26 	bl	8012154 <iprintf>
            return err;
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870a:	e194      	b.n	8008a36 <lfs_file_write+0x3b6>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008714:	2b00      	cmp	r3, #0
 8008716:	d009      	beq.n	800872c <lfs_file_write+0xac>
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	429a      	cmp	r2, r3
 8008722:	d203      	bcs.n	800872c <lfs_file_write+0xac>
        file->pos = file->ctz.size;
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	441a      	add	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008738:	429a      	cmp	r2, r3
 800873a:	d909      	bls.n	8008750 <lfs_file_write+0xd0>
        // Larger than file limit?
        LFS_TRACE("lfs_file_write -> %"PRId32, LFS_ERR_FBIG);
 800873c:	f06f 021a 	mvn.w	r2, #26
 8008740:	f640 3112 	movw	r1, #2834	; 0xb12
 8008744:	4861      	ldr	r0, [pc, #388]	; (80088cc <lfs_file_write+0x24c>)
 8008746:	f009 fd05 	bl	8012154 <iprintf>
        return LFS_ERR_FBIG;
 800874a:	f06f 031a 	mvn.w	r3, #26
 800874e:	e172      	b.n	8008a36 <lfs_file_write+0x3b6>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d127      	bne.n	80087ac <lfs_file_write+0x12c>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	429a      	cmp	r2, r3
 8008766:	d921      	bls.n	80087ac <lfs_file_write+0x12c>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876c:	633b      	str	r3, [r7, #48]	; 0x30
        file->pos = file->ctz.size;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8008776:	e014      	b.n	80087a2 <lfs_file_write+0x122>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
 8008778:	2300      	movs	r3, #0
 800877a:	75fb      	strb	r3, [r7, #23]
 800877c:	f107 0217 	add.w	r2, r7, #23
 8008780:	2301      	movs	r3, #1
 8008782:	68b9      	ldr	r1, [r7, #8]
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f7ff ff7b 	bl	8008680 <lfs_file_write>
 800878a:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0) {
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	2b00      	cmp	r3, #0
 8008790:	da07      	bge.n	80087a2 <lfs_file_write+0x122>
                LFS_TRACE("lfs_file_write -> %"PRId32, res);
 8008792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008794:	f640 311e 	movw	r1, #2846	; 0xb1e
 8008798:	484c      	ldr	r0, [pc, #304]	; (80088cc <lfs_file_write+0x24c>)
 800879a:	f009 fcdb 	bl	8012154 <iprintf>
                return res;
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	e149      	b.n	8008a36 <lfs_file_write+0x3b6>
        while (file->pos < pos) {
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d8e5      	bhi.n	8008778 <lfs_file_write+0xf8>
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 812d 	beq.w	8008a14 <lfs_file_write+0x394>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c0:	441a      	add	r2, r3
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c6:	4619      	mov	r1, r3
 80087c8:	4610      	mov	r0, r2
 80087ca:	f7fc f9db 	bl	8004b84 <lfs_max>
 80087ce:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 80087d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087da:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80087dc:	08db      	lsrs	r3, r3, #3
 80087de:	4619      	mov	r1, r3
 80087e0:	4610      	mov	r0, r2
 80087e2:	f7fc f9df 	bl	8004ba4 <lfs_min>
 80087e6:	4603      	mov	r3, r0
 80087e8:	4619      	mov	r1, r3
 80087ea:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80087ee:	f7fc f9d9 	bl	8004ba4 <lfs_min>
 80087f2:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80087f4:	429c      	cmp	r4, r3
 80087f6:	f240 810d 	bls.w	8008a14 <lfs_file_write+0x394>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80087fa:	68b9      	ldr	r1, [r7, #8]
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff fd05 	bl	800820c <lfs_file_outline>
 8008802:	62b8      	str	r0, [r7, #40]	; 0x28
        if (err) {
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 8104 	beq.w	8008a14 <lfs_file_write+0x394>
            file->flags |= LFS_F_ERRED;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008810:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	631a      	str	r2, [r3, #48]	; 0x30
            LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8008818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881a:	f640 312c 	movw	r1, #2860	; 0xb2c
 800881e:	482b      	ldr	r0, [pc, #172]	; (80088cc <lfs_file_write+0x24c>)
 8008820:	f009 fc98 	bl	8012154 <iprintf>
            return err;
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	e106      	b.n	8008a36 <lfs_file_write+0x3b6>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d007      	beq.n	8008844 <lfs_file_write+0x1c4>
                file->off == lfs->cfg->block_size) {
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800883c:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 800883e:	429a      	cmp	r2, r3
 8008840:	f040 8084 	bne.w	800894c <lfs_file_write+0x2cc>
            if (!(file->flags & LFS_F_INLINE)) {
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d16f      	bne.n	8008930 <lfs_file_write+0x2b0>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d13f      	bne.n	80088dc <lfs_file_write+0x25c>
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008860:	2b00      	cmp	r3, #0
 8008862:	d03b      	beq.n	80088dc <lfs_file_write+0x25c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008876:	3a01      	subs	r2, #1
 8008878:	68b9      	ldr	r1, [r7, #8]
 800887a:	3138      	adds	r1, #56	; 0x38
 800887c:	68b8      	ldr	r0, [r7, #8]
 800887e:	303c      	adds	r0, #60	; 0x3c
 8008880:	9003      	str	r0, [sp, #12]
 8008882:	9102      	str	r1, [sp, #8]
 8008884:	9201      	str	r2, [sp, #4]
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	462b      	mov	r3, r5
 800888a:	4622      	mov	r2, r4
 800888c:	2100      	movs	r1, #0
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f7ff f9b2 	bl	8007bf8 <lfs_ctz_find>
 8008894:	6278      	str	r0, [r7, #36]	; 0x24
                    if (err) {
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	2b00      	cmp	r3, #0
 800889a:	d019      	beq.n	80088d0 <lfs_file_write+0x250>
                        file->flags |= LFS_F_ERRED;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	631a      	str	r2, [r3, #48]	; 0x30
                        LFS_TRACE("lfs_file_write -> %"PRId32, err);
 80088a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088aa:	f640 313d 	movw	r1, #2877	; 0xb3d
 80088ae:	4807      	ldr	r0, [pc, #28]	; (80088cc <lfs_file_write+0x24c>)
 80088b0:	f009 fc50 	bl	8012154 <iprintf>
                        return err;
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	e0be      	b.n	8008a36 <lfs_file_write+0x3b6>
 80088b8:	08013d58 	.word	0x08013d58
 80088bc:	08013c54 	.word	0x08013c54
 80088c0:	080169d8 	.word	0x080169d8
 80088c4:	080136d8 	.word	0x080136d8
 80088c8:	08013d88 	.word	0x08013d88
 80088cc:	08013dac 	.word	0x08013dac
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	3340      	adds	r3, #64	; 0x40
 80088d4:	4619      	mov	r1, r3
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f7fc fa29 	bl	8004d2e <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f7fd f8c7 	bl	8005a70 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80088e8:	68fc      	ldr	r4, [r7, #12]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	3238      	adds	r2, #56	; 0x38
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	313c      	adds	r1, #60	; 0x3c
 80088fa:	9102      	str	r1, [sp, #8]
 80088fc:	9201      	str	r2, [sp, #4]
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	462b      	mov	r3, r5
 8008902:	4622      	mov	r2, r4
 8008904:	4601      	mov	r1, r0
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7ff f9f8 	bl	8007cfc <lfs_ctz_extend>
 800890c:	6238      	str	r0, [r7, #32]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800890e:	6a3b      	ldr	r3, [r7, #32]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d015      	beq.n	8008940 <lfs_file_write+0x2c0>
                    file->flags |= LFS_F_ERRED;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008918:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	631a      	str	r2, [r3, #48]	; 0x30
                    LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8008920:	6a3a      	ldr	r2, [r7, #32]
 8008922:	f640 314c 	movw	r1, #2892	; 0xb4c
 8008926:	4846      	ldr	r0, [pc, #280]	; (8008a40 <lfs_file_write+0x3c0>)
 8008928:	f009 fc14 	bl	8012154 <iprintf>
                    return err;
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	e082      	b.n	8008a36 <lfs_file_write+0x3b6>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	f06f 0201 	mvn.w	r2, #1
 8008936:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008944:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008950:	69da      	ldr	r2, [r3, #28]
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	4619      	mov	r1, r3
 800895a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800895c:	f7fc f922 	bl	8004ba4 <lfs_min>
 8008960:	61f8      	str	r0, [r7, #28]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008968:	68fc      	ldr	r4, [r7, #12]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008972:	69f9      	ldr	r1, [r7, #28]
 8008974:	9103      	str	r1, [sp, #12]
 8008976:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008978:	9102      	str	r1, [sp, #8]
 800897a:	9201      	str	r2, [sp, #4]
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	2301      	movs	r3, #1
 8008980:	4622      	mov	r2, r4
 8008982:	4601      	mov	r1, r0
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f7fc fbed 	bl	8005164 <lfs_bd_prog>
 800898a:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d028      	beq.n	80089e4 <lfs_file_write+0x364>
                if (err == LFS_ERR_CORRUPT) {
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008998:	d00d      	beq.n	80089b6 <lfs_file_write+0x336>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	631a      	str	r2, [r3, #48]	; 0x30
                LFS_TRACE("lfs_file_write -> %"PRId32, err);
 80089a6:	69ba      	ldr	r2, [r7, #24]
 80089a8:	f640 3161 	movw	r1, #2913	; 0xb61
 80089ac:	4824      	ldr	r0, [pc, #144]	; (8008a40 <lfs_file_write+0x3c0>)
 80089ae:	f009 fbd1 	bl	8012154 <iprintf>
                return err;
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	e03f      	b.n	8008a36 <lfs_file_write+0x3b6>
                    goto relocate;
 80089b6:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f7ff fb40 	bl	8008040 <lfs_file_relocate>
 80089c0:	61b8      	str	r0, [r7, #24]
            if (err) {
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0cc      	beq.n	8008962 <lfs_file_write+0x2e2>
                file->flags |= LFS_F_ERRED;
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089cc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	631a      	str	r2, [r3, #48]	; 0x30
                LFS_TRACE("lfs_file_write -> %"PRId32, err);
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	f640 316a 	movw	r1, #2922	; 0xb6a
 80089da:	4819      	ldr	r0, [pc, #100]	; (8008a40 <lfs_file_write+0x3c0>)
 80089dc:	f009 fbba 	bl	8012154 <iprintf>
                return err;
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	e028      	b.n	8008a36 <lfs_file_write+0x3b6>
            break;
 80089e4:	bf00      	nop
            }
        }

        file->pos += diff;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	441a      	add	r2, r3
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	441a      	add	r2, r3
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80089fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	4413      	add	r3, r2
 8008a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        nsize -= diff;
 8008a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	63bb      	str	r3, [r7, #56]	; 0x38

        lfs_alloc_ack(lfs);
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f7fd f82e 	bl	8005a70 <lfs_alloc_ack>
    while (nsize > 0) {
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f47f af06 	bne.w	8008828 <lfs_file_write+0x1a8>
    }

    file->flags &= ~LFS_F_ERRED;
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	631a      	str	r2, [r3, #48]	; 0x30
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	f640 3178 	movw	r1, #2936	; 0xb78
 8008a2e:	4804      	ldr	r0, [pc, #16]	; (8008a40 <lfs_file_write+0x3c0>)
 8008a30:	f009 fb90 	bl	8012154 <iprintf>
    return size;
 8008a34:	683b      	ldr	r3, [r7, #0]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3740      	adds	r7, #64	; 0x40
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	08013dac 	.word	0x08013dac

08008a44 <lfs_init>:
    return err;
}


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08c      	sub	sp, #48	; 0x30
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8008a54:	2300      	movs	r3, #0
 8008a56:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d106      	bne.n	8008a70 <lfs_init+0x2c>
 8008a62:	4b92      	ldr	r3, [pc, #584]	; (8008cac <lfs_init+0x268>)
 8008a64:	4a92      	ldr	r2, [pc, #584]	; (8008cb0 <lfs_init+0x26c>)
 8008a66:	f44f 6153 	mov.w	r1, #3376	; 0xd30
 8008a6a:	4892      	ldr	r0, [pc, #584]	; (8008cb4 <lfs_init+0x270>)
 8008a6c:	f008 fd7a 	bl	8011564 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d106      	bne.n	8008a88 <lfs_init+0x44>
 8008a7a:	4b8f      	ldr	r3, [pc, #572]	; (8008cb8 <lfs_init+0x274>)
 8008a7c:	4a8c      	ldr	r2, [pc, #560]	; (8008cb0 <lfs_init+0x26c>)
 8008a7e:	f640 5131 	movw	r1, #3377	; 0xd31
 8008a82:	488c      	ldr	r0, [pc, #560]	; (8008cb4 <lfs_init+0x270>)
 8008a84:	f008 fd6e 	bl	8011564 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d106      	bne.n	8008aa0 <lfs_init+0x5c>
 8008a92:	4b8a      	ldr	r3, [pc, #552]	; (8008cbc <lfs_init+0x278>)
 8008a94:	4a86      	ldr	r2, [pc, #536]	; (8008cb0 <lfs_init+0x26c>)
 8008a96:	f640 5132 	movw	r1, #3378	; 0xd32
 8008a9a:	4886      	ldr	r0, [pc, #536]	; (8008cb4 <lfs_init+0x270>)
 8008a9c:	f008 fd62 	bl	8011564 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008aaa:	6952      	ldr	r2, [r2, #20]
 8008aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ab0:	fb01 f202 	mul.w	r2, r1, r2
 8008ab4:	1a9b      	subs	r3, r3, r2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d006      	beq.n	8008ac8 <lfs_init+0x84>
 8008aba:	4b81      	ldr	r3, [pc, #516]	; (8008cc0 <lfs_init+0x27c>)
 8008abc:	4a7c      	ldr	r2, [pc, #496]	; (8008cb0 <lfs_init+0x26c>)
 8008abe:	f640 5136 	movw	r1, #3382	; 0xd36
 8008ac2:	487c      	ldr	r0, [pc, #496]	; (8008cb4 <lfs_init+0x270>)
 8008ac4:	f008 fd4e 	bl	8011564 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008ad2:	6992      	ldr	r2, [r2, #24]
 8008ad4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ad8:	fb01 f202 	mul.w	r2, r1, r2
 8008adc:	1a9b      	subs	r3, r3, r2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d006      	beq.n	8008af0 <lfs_init+0xac>
 8008ae2:	4b78      	ldr	r3, [pc, #480]	; (8008cc4 <lfs_init+0x280>)
 8008ae4:	4a72      	ldr	r2, [pc, #456]	; (8008cb0 <lfs_init+0x26c>)
 8008ae6:	f640 5137 	movw	r1, #3383	; 0xd37
 8008aea:	4872      	ldr	r0, [pc, #456]	; (8008cb4 <lfs_init+0x270>)
 8008aec:	f008 fd3a 	bl	8011564 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008afa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008afc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b00:	fb01 f202 	mul.w	r2, r1, r2
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d006      	beq.n	8008b18 <lfs_init+0xd4>
 8008b0a:	4b6f      	ldr	r3, [pc, #444]	; (8008cc8 <lfs_init+0x284>)
 8008b0c:	4a68      	ldr	r2, [pc, #416]	; (8008cb0 <lfs_init+0x26c>)
 8008b0e:	f640 5138 	movw	r1, #3384	; 0xd38
 8008b12:	4868      	ldr	r0, [pc, #416]	; (8008cb4 <lfs_init+0x270>)
 8008b14:	f008 fd26 	bl	8011564 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(LFS_BLOCK_NULL / (lfs->cfg->block_size-2*4))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	3b08      	subs	r3, #8
 8008b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fc f872 	bl	8004c12 <lfs_npw2>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	009a      	lsls	r2, r3, #2
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d906      	bls.n	8008b4a <lfs_init+0x106>
 8008b3c:	4b63      	ldr	r3, [pc, #396]	; (8008ccc <lfs_init+0x288>)
 8008b3e:	4a5c      	ldr	r2, [pc, #368]	; (8008cb0 <lfs_init+0x26c>)
 8008b40:	f640 513b 	movw	r1, #3387	; 0xd3b
 8008b44:	485b      	ldr	r0, [pc, #364]	; (8008cb4 <lfs_init+0x270>)
 8008b46:	f008 fd0d 	bl	8011564 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <lfs_init+0x11e>
 8008b54:	4b5e      	ldr	r3, [pc, #376]	; (8008cd0 <lfs_init+0x28c>)
 8008b56:	4a56      	ldr	r2, [pc, #344]	; (8008cb0 <lfs_init+0x26c>)
 8008b58:	f640 5144 	movw	r1, #3396	; 0xd44
 8008b5c:	4855      	ldr	r0, [pc, #340]	; (8008cb4 <lfs_init+0x270>)
 8008b5e:	f008 fd01 	bl	8011564 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d005      	beq.n	8008b78 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60da      	str	r2, [r3, #12]
 8008b76:	e010      	b.n	8008b9a <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fc f8af 	bl	8004ce2 <lfs_malloc>
 8008b84:	4602      	mov	r2, r0
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d103      	bne.n	8008b9a <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8008b92:	f06f 030b 	mvn.w	r3, #11
 8008b96:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8008b98:	e0ee      	b.n	8008d78 <lfs_init+0x334>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	61da      	str	r2, [r3, #28]
 8008bae:	e010      	b.n	8008bd2 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fc f893 	bl	8004ce2 <lfs_malloc>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	69db      	ldr	r3, [r3, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d103      	bne.n	8008bd2 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8008bca:	f06f 030b 	mvn.w	r3, #11
 8008bce:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8008bd0:	e0d2      	b.n	8008d78 <lfs_init+0x334>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7fc f8a9 	bl	8004d2e <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3310      	adds	r3, #16
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7fc f8a3 	bl	8004d2e <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d106      	bne.n	8008c00 <lfs_init+0x1bc>
 8008bf2:	4b38      	ldr	r3, [pc, #224]	; (8008cd4 <lfs_init+0x290>)
 8008bf4:	4a2e      	ldr	r2, [pc, #184]	; (8008cb0 <lfs_init+0x26c>)
 8008bf6:	f640 5162 	movw	r1, #3426	; 0xd62
 8008bfa:	482e      	ldr	r0, [pc, #184]	; (8008cb4 <lfs_init+0x270>)
 8008bfc:	f008 fcb2 	bl	8011564 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d106      	bne.n	8008c1c <lfs_init+0x1d8>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c14:	f003 0303 	and.w	r3, r3, #3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d006      	beq.n	8008c2a <lfs_init+0x1e6>
 8008c1c:	4b2e      	ldr	r3, [pc, #184]	; (8008cd8 <lfs_init+0x294>)
 8008c1e:	4a24      	ldr	r2, [pc, #144]	; (8008cb0 <lfs_init+0x26c>)
 8008c20:	f640 5163 	movw	r1, #3427	; 0xd63
 8008c24:	4823      	ldr	r0, [pc, #140]	; (8008cb4 <lfs_init+0x270>)
 8008c26:	f008 fc9d 	bl	8011564 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d005      	beq.n	8008c40 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	665a      	str	r2, [r3, #100]	; 0x64
 8008c3e:	e010      	b.n	8008c62 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fc f84b 	bl	8004ce2 <lfs_malloc>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d103      	bne.n	8008c62 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 8008c5a:	f06f 030b 	mvn.w	r3, #11
 8008c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8008c60:	e08a      	b.n	8008d78 <lfs_init+0x334>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c68:	2bff      	cmp	r3, #255	; 0xff
 8008c6a:	d906      	bls.n	8008c7a <lfs_init+0x236>
 8008c6c:	4b1b      	ldr	r3, [pc, #108]	; (8008cdc <lfs_init+0x298>)
 8008c6e:	4a10      	ldr	r2, [pc, #64]	; (8008cb0 <lfs_init+0x26c>)
 8008c70:	f44f 6157 	mov.w	r1, #3440	; 0xd70
 8008c74:	480f      	ldr	r0, [pc, #60]	; (8008cb4 <lfs_init+0x270>)
 8008c76:	f008 fc75 	bl	8011564 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d102      	bne.n	8008c92 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	22ff      	movs	r2, #255	; 0xff
 8008c90:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	da23      	bge.n	8008ce4 <lfs_init+0x2a0>
 8008c9c:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <lfs_init+0x29c>)
 8008c9e:	4a04      	ldr	r2, [pc, #16]	; (8008cb0 <lfs_init+0x26c>)
 8008ca0:	f640 5176 	movw	r1, #3446	; 0xd76
 8008ca4:	4803      	ldr	r0, [pc, #12]	; (8008cb4 <lfs_init+0x270>)
 8008ca6:	f008 fc5d 	bl	8011564 <__assert_func>
 8008caa:	bf00      	nop
 8008cac:	08014144 	.word	0x08014144
 8008cb0:	080169e8 	.word	0x080169e8
 8008cb4:	080136d8 	.word	0x080136d8
 8008cb8:	08014160 	.word	0x08014160
 8008cbc:	0801417c 	.word	0x0801417c
 8008cc0:	08014198 	.word	0x08014198
 8008cc4:	080141c8 	.word	0x080141c8
 8008cc8:	080141f8 	.word	0x080141f8
 8008ccc:	0801422c 	.word	0x0801422c
 8008cd0:	08014280 	.word	0x08014280
 8008cd4:	0801429c 	.word	0x0801429c
 8008cd8:	080142bc 	.word	0x080142bc
 8008cdc:	08014310 	.word	0x08014310
 8008ce0:	0801432c 	.word	0x0801432c
    lfs->file_max = lfs->cfg->file_max;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d103      	bne.n	8008cfe <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008cfc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d04:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d906      	bls.n	8008d1a <lfs_init+0x2d6>
 8008d0c:	4b1e      	ldr	r3, [pc, #120]	; (8008d88 <lfs_init+0x344>)
 8008d0e:	4a1f      	ldr	r2, [pc, #124]	; (8008d8c <lfs_init+0x348>)
 8008d10:	f640 517c 	movw	r1, #3452	; 0xd7c
 8008d14:	481e      	ldr	r0, [pc, #120]	; (8008d90 <lfs_init+0x34c>)
 8008d16:	f008 fc25 	bl	8011564 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d103      	bne.n	8008d34 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008d32:	675a      	str	r2, [r3, #116]	; 0x74
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d3a:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d42:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gstate = (struct lfs_gstate){0};
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3330      	adds	r3, #48	; 0x30
 8008d54:	2200      	movs	r2, #0
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	605a      	str	r2, [r3, #4]
 8008d5a:	609a      	str	r2, [r3, #8]
    lfs->gpending = (struct lfs_gstate){0};
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	333c      	adds	r3, #60	; 0x3c
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	605a      	str	r2, [r3, #4]
 8008d66:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (struct lfs_gstate){0};
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	3348      	adds	r3, #72	; 0x48
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	605a      	str	r2, [r3, #4]
 8008d72:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	e003      	b.n	8008d80 <lfs_init+0x33c>

cleanup:
    lfs_deinit(lfs);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f80b 	bl	8008d94 <lfs_deinit>
    return err;
 8008d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3730      	adds	r7, #48	; 0x30
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	08014350 	.word	0x08014350
 8008d8c:	080169e8 	.word	0x080169e8
 8008d90:	080136d8 	.word	0x080136d8

08008d94 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d104      	bne.n	8008db0 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fb ffa5 	bl	8004cfa <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d104      	bne.n	8008dc4 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fb ff9b 	bl	8004cfa <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fb ff91 	bl	8004cfa <lfs_free>
    }

    return 0;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <cfg_prn>:

void cfg_prn(lfs_t *lfs, const struct lfs_config *cfg)
{
 8008de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008de6:	b0a1      	sub	sp, #132	; 0x84
 8008de8:	af12      	add	r7, sp, #72	; 0x48
 8008dea:	6378      	str	r0, [r7, #52]	; 0x34
 8008dec:	6339      	str	r1, [r7, #48]	; 0x30
	LFS_TRACE("lfs_format(%p, %p\n{\n\t.context=%p, "
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	681d      	ldr	r5, [r3, #0]
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	685e      	ldr	r6, [r3, #4]
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	62ba      	str	r2, [r7, #40]	; 0x28
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	6919      	ldr	r1, [r3, #16]
 8008e06:	6279      	str	r1, [r7, #36]	; 0x24
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	6958      	ldr	r0, [r3, #20]
 8008e0c:	6238      	str	r0, [r7, #32]
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	699c      	ldr	r4, [r3, #24]
 8008e12:	61fc      	str	r4, [r7, #28]
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	61bb      	str	r3, [r7, #24]
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	6a1a      	ldr	r2, [r3, #32]
 8008e1e:	617a      	str	r2, [r7, #20]
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008e24:	6139      	str	r1, [r7, #16]
 8008e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e28:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008e30:	60bc      	str	r4, [r7, #8]
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e36:	607b      	str	r3, [r7, #4]
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e4c:	9311      	str	r3, [sp, #68]	; 0x44
 8008e4e:	9210      	str	r2, [sp, #64]	; 0x40
 8008e50:	910f      	str	r1, [sp, #60]	; 0x3c
 8008e52:	900e      	str	r0, [sp, #56]	; 0x38
 8008e54:	940d      	str	r4, [sp, #52]	; 0x34
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	930c      	str	r3, [sp, #48]	; 0x30
 8008e5a:	68bc      	ldr	r4, [r7, #8]
 8008e5c:	940b      	str	r4, [sp, #44]	; 0x2c
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	900a      	str	r0, [sp, #40]	; 0x28
 8008e62:	6939      	ldr	r1, [r7, #16]
 8008e64:	9109      	str	r1, [sp, #36]	; 0x24
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	9208      	str	r2, [sp, #32]
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	9307      	str	r3, [sp, #28]
 8008e6e:	69fc      	ldr	r4, [r7, #28]
 8008e70:	9406      	str	r4, [sp, #24]
 8008e72:	6a38      	ldr	r0, [r7, #32]
 8008e74:	9005      	str	r0, [sp, #20]
 8008e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e78:	9104      	str	r1, [sp, #16]
 8008e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e7c:	9203      	str	r2, [sp, #12]
 8008e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e80:	9302      	str	r3, [sp, #8]
 8008e82:	9601      	str	r6, [sp, #4]
 8008e84:	9500      	str	r5, [sp, #0]
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e8a:	f640 51a8 	movw	r1, #3496	; 0xda8
 8008e8e:	4803      	ldr	r0, [pc, #12]	; (8008e9c <cfg_prn+0xb8>)
 8008e90:	f009 f960 	bl	8012154 <iprintf>
	            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,
	            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
	            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
	            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
	            cfg->name_max, cfg->file_max, cfg->attr_max);
}
 8008e94:	bf00      	nop
 8008e96:	373c      	adds	r7, #60	; 0x3c
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9c:	0801436c 	.word	0x0801436c

08008ea0 <lfs_format>:

int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b0a0      	sub	sp, #128	; 0x80
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);*/
    int err = 0;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff fdc7 	bl	8008a44 <lfs_init>
 8008eb6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8008eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d007      	beq.n	8008ece <lfs_format+0x2e>
            LFS_TRACE("lfs_format -> %d", err);
 8008ebe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008ec0:	f44f 615d 	mov.w	r1, #3536	; 0xdd0
 8008ec4:	4848      	ldr	r0, [pc, #288]	; (8008fe8 <lfs_format+0x148>)
 8008ec6:	f009 f945 	bl	8012154 <iprintf>
            return err;
 8008eca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ecc:	e088      	b.n	8008fe0 <lfs_format+0x140>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	461a      	mov	r2, r3
 8008eda:	2100      	movs	r1, #0
 8008edc:	f008 fd64 	bl	80119a8 <memset>
        lfs->free.off = 0;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7fb fe54 	bl	8004ba4 <lfs_min>
 8008efc:	4602      	mov	r2, r0
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7fc fdb1 	bl	8005a70 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8008f0e:	f107 030c 	add.w	r3, r7, #12
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7fd ff0b 	bl	8006d30 <lfs_dir_alloc>
 8008f1a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8008f1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d14f      	bne.n	8008fc2 <lfs_format+0x122>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8008f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f26:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f2c:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8008f2e:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f34:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8008f36:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8008f3c:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8008f42:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8008f48:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8008f4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fc fc74 	bl	800583c <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8008f54:	4b25      	ldr	r3, [pc, #148]	; (8008fec <lfs_format+0x14c>)
 8008f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f58:	2300      	movs	r3, #0
 8008f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8008f5c:	4b24      	ldr	r3, [pc, #144]	; (8008ff0 <lfs_format+0x150>)
 8008f5e:	657b      	str	r3, [r7, #84]	; 0x54
 8008f60:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <lfs_format+0x154>)
 8008f62:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f64:	4b24      	ldr	r3, [pc, #144]	; (8008ff8 <lfs_format+0x158>)
 8008f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8008f6e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008f72:	f107 010c 	add.w	r1, r7, #12
 8008f76:	2303      	movs	r3, #3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7fe fad7 	bl	800752c <lfs_dir_commit>
 8008f7e:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8008f80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d11f      	bne.n	8008fc6 <lfs_format+0x126>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8008f86:	2300      	movs	r3, #0
 8008f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f8e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008f92:	f107 030c 	add.w	r3, r7, #12
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7fd fc59 	bl	8006850 <lfs_dir_fetch>
 8008f9e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8008fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d111      	bne.n	8008fca <lfs_format+0x12a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8008fac:	f107 010c 	add.w	r1, r7, #12
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7fe fab9 	bl	800752c <lfs_dir_commit>
 8008fba:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8008fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	e004      	b.n	8008fcc <lfs_format+0x12c>
            goto cleanup;
 8008fc2:	bf00      	nop
 8008fc4:	e002      	b.n	8008fcc <lfs_format+0x12c>
            goto cleanup;
 8008fc6:	bf00      	nop
 8008fc8:	e000      	b.n	8008fcc <lfs_format+0x12c>
            goto cleanup;
 8008fca:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff fee1 	bl	8008d94 <lfs_deinit>
    LFS_TRACE("lfs_format -> %d", err);
 8008fd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008fd4:	f640 6108 	movw	r1, #3592	; 0xe08
 8008fd8:	4803      	ldr	r0, [pc, #12]	; (8008fe8 <lfs_format+0x148>)
 8008fda:	f009 f8bb 	bl	8012154 <iprintf>
    return err;
 8008fde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3780      	adds	r7, #128	; 0x80
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	080144cc 	.word	0x080144cc
 8008fec:	40100000 	.word	0x40100000
 8008ff0:	0ff00008 	.word	0x0ff00008
 8008ff4:	080144ec 	.word	0x080144ec
 8008ff8:	20100018 	.word	0x20100018

08008ffc <lfs_mount>:

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8008ffc:	b5b0      	push	{r4, r5, r7, lr}
 8008ffe:	b09a      	sub	sp, #104	; 0x68
 8009000:	af04      	add	r7, sp, #16
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
	cfg_prn(lfs, cfg);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff feeb 	bl	8008de4 <cfg_prn>
            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);*/
    int err = lfs_init(lfs, cfg);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff fd17 	bl	8008a44 <lfs_init>
 8009016:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 8009018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800901a:	2b00      	cmp	r3, #0
 800901c:	d007      	beq.n	800902e <lfs_mount+0x32>
        LFS_TRACE("lfs_mount -> %d", err);
 800901e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009020:	f44f 6162 	mov.w	r1, #3616	; 0xe20
 8009024:	489e      	ldr	r0, [pc, #632]	; (80092a0 <lfs_mount+0x2a4>)
 8009026:	f009 f895 	bl	8012154 <iprintf>
        return err;
 800902a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800902c:	e134      	b.n	8009298 <lfs_mount+0x29c>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800902e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009032:	2220      	movs	r2, #32
 8009034:	2100      	movs	r1, #0
 8009036:	4618      	mov	r0, r3
 8009038:	f008 fcb6 	bl	80119a8 <memset>
 800903c:	2301      	movs	r3, #1
 800903e:	64bb      	str	r3, [r7, #72]	; 0x48
    while (!lfs_pair_isnull(dir.tail)) {
 8009040:	e0b9      	b.n	80091b6 <lfs_mount+0x1ba>
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	623b      	str	r3, [r7, #32]
 8009046:	4b97      	ldr	r3, [pc, #604]	; (80092a4 <lfs_mount+0x2a8>)
 8009048:	627b      	str	r3, [r7, #36]	; 0x24
 800904a:	2308      	movs	r3, #8
 800904c:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800904e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009052:	f103 0218 	add.w	r2, r3, #24
 8009056:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800905a:	f107 0320 	add.w	r3, r7, #32
 800905e:	9303      	str	r3, [sp, #12]
 8009060:	4b91      	ldr	r3, [pc, #580]	; (80092a8 <lfs_mount+0x2ac>)
 8009062:	9302      	str	r3, [sp, #8]
 8009064:	2300      	movs	r3, #0
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	4b90      	ldr	r3, [pc, #576]	; (80092ac <lfs_mount+0x2b0>)
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	4b90      	ldr	r3, [pc, #576]	; (80092b0 <lfs_mount+0x2b4>)
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fd f8b8 	bl	80061e4 <lfs_dir_fetchmatch>
 8009074:	6538      	str	r0, [r7, #80]	; 0x50
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8009076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009078:	2b00      	cmp	r3, #0
 800907a:	da02      	bge.n	8009082 <lfs_mount+0x86>
            err = tag;
 800907c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800907e:	657b      	str	r3, [r7, #84]	; 0x54
            goto cleanup;
 8009080:	e100      	b.n	8009284 <lfs_mount+0x288>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8009082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 8089 	beq.w	800919c <lfs_mount+0x1a0>
 800908a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800908c:	4618      	mov	r0, r3
 800908e:	f7fc f9db 	bl	8005448 <lfs_tag_isdelete>
 8009092:	4603      	mov	r3, r0
 8009094:	f083 0301 	eor.w	r3, r3, #1
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d07e      	beq.n	800919c <lfs_mount+0x1a0>
            // update root
            lfs->root[0] = dir.pair[0];
 800909e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80090a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80090aa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80090ae:	f107 0308 	add.w	r3, r7, #8
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	4b7f      	ldr	r3, [pc, #508]	; (80092b4 <lfs_mount+0x2b8>)
 80090b6:	4a7e      	ldr	r2, [pc, #504]	; (80092b0 <lfs_mount+0x2b4>)
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7fc fdc7 	bl	8005c4c <lfs_dir_get>
 80090be:	6538      	str	r0, [r7, #80]	; 0x50
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 80090c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	da02      	bge.n	80090cc <lfs_mount+0xd0>
                err = tag;
 80090c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090c8:	657b      	str	r3, [r7, #84]	; 0x54
                goto cleanup;
 80090ca:	e0db      	b.n	8009284 <lfs_mount+0x288>
            }
            lfs_superblock_fromle32(&superblock);
 80090cc:	f107 0308 	add.w	r3, r7, #8
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fc fb7b 	bl	80057cc <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	0c1b      	lsrs	r3, r3, #16
 80090da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 80090e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d103      	bne.n	80090f4 <lfs_mount+0xf8>
 80090ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00c      	beq.n	800910e <lfs_mount+0x112>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version %"PRIu16".%"PRIu16,
 80090f4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80090f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80090fc:	f640 6149 	movw	r1, #3657	; 0xe49
 8009100:	486d      	ldr	r0, [pc, #436]	; (80092b8 <lfs_mount+0x2bc>)
 8009102:	f009 f827 	bl	8012154 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8009106:	f06f 0315 	mvn.w	r3, #21
 800910a:	657b      	str	r3, [r7, #84]	; 0x54
                goto cleanup;
 800910c:	e045      	b.n	800919a <lfs_mount+0x19e>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d013      	beq.n	800913c <lfs_mount+0x140>
                if (superblock.name_max > lfs->name_max) {
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800911a:	429a      	cmp	r2, r3
 800911c:	d90b      	bls.n	8009136 <lfs_mount+0x13a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009124:	f640 6152 	movw	r1, #3666	; 0xe52
 8009128:	4864      	ldr	r0, [pc, #400]	; (80092bc <lfs_mount+0x2c0>)
 800912a:	f009 f813 	bl	8012154 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800912e:	f06f 0315 	mvn.w	r3, #21
 8009132:	657b      	str	r3, [r7, #84]	; 0x54
                    goto cleanup;
 8009134:	e031      	b.n	800919a <lfs_mount+0x19e>
                }

                lfs->name_max = superblock.name_max;
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d013      	beq.n	800916a <lfs_mount+0x16e>
                if (superblock.file_max > lfs->file_max) {
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009148:	429a      	cmp	r2, r3
 800914a:	d90b      	bls.n	8009164 <lfs_mount+0x168>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800914c:	69ba      	ldr	r2, [r7, #24]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009152:	f640 615d 	movw	r1, #3677	; 0xe5d
 8009156:	485a      	ldr	r0, [pc, #360]	; (80092c0 <lfs_mount+0x2c4>)
 8009158:	f008 fffc 	bl	8012154 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800915c:	f06f 0315 	mvn.w	r3, #21
 8009160:	657b      	str	r3, [r7, #84]	; 0x54
                    goto cleanup;
 8009162:	e01a      	b.n	800919a <lfs_mount+0x19e>
                }

                lfs->file_max = superblock.file_max;
 8009164:	69ba      	ldr	r2, [r7, #24]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d015      	beq.n	800919c <lfs_mount+0x1a0>
                if (superblock.attr_max > lfs->attr_max) {
 8009170:	69fa      	ldr	r2, [r7, #28]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009176:	429a      	cmp	r2, r3
 8009178:	d90b      	bls.n	8009192 <lfs_mount+0x196>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800917a:	69fa      	ldr	r2, [r7, #28]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009180:	f640 6168 	movw	r1, #3688	; 0xe68
 8009184:	484f      	ldr	r0, [pc, #316]	; (80092c4 <lfs_mount+0x2c8>)
 8009186:	f008 ffe5 	bl	8012154 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800918a:	f06f 0315 	mvn.w	r3, #21
 800918e:	657b      	str	r3, [r7, #84]	; 0x54
                    goto cleanup;
 8009190:	e003      	b.n	800919a <lfs_mount+0x19e>
                }

                lfs->attr_max = superblock.attr_max;
 8009192:	69fa      	ldr	r2, [r7, #28]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	675a      	str	r2, [r3, #116]	; 0x74
 8009198:	e000      	b.n	800919c <lfs_mount+0x1a0>
            goto cleanup;
 800919a:	e073      	b.n	8009284 <lfs_mount+0x288>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gpending);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80091a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7fd fb6b 	bl	8006884 <lfs_dir_getgstate>
 80091ae:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 80091b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d165      	bne.n	8009282 <lfs_mount+0x286>
    while (!lfs_pair_isnull(dir.tail)) {
 80091b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091ba:	3318      	adds	r3, #24
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fc f8bc 	bl	800533a <lfs_pair_isnull>
 80091c2:	4603      	mov	r3, r0
 80091c4:	f083 0301 	eor.w	r3, r3, #1
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f47f af39 	bne.w	8009042 <lfs_mount+0x46>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	3320      	adds	r3, #32
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fc f8b0 	bl	800533a <lfs_pair_isnull>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <lfs_mount+0x1ec>
        err = LFS_ERR_INVAL;
 80091e0:	f06f 0315 	mvn.w	r3, #21
 80091e4:	657b      	str	r3, [r7, #84]	; 0x54
        goto cleanup;
 80091e6:	e04d      	b.n	8009284 <lfs_mount+0x288>
    }

    // update littlefs with gstate
    lfs->gpending.tag += !lfs_tag_isvalid(lfs->gpending.tag);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fc f91d 	bl	800542c <lfs_tag_isvalid>
 80091f2:	4603      	mov	r3, r0
 80091f4:	f083 0301 	eor.w	r3, r3, #1
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	461a      	mov	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009200:	441a      	add	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs->gstate = lfs->gpending;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	3330      	adds	r3, #48	; 0x30
 800920c:	323c      	adds	r2, #60	; 0x3c
 800920e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009210:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (lfs_gstate_hasmove(&lfs->gstate)) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3330      	adds	r3, #48	; 0x30
 8009218:	4618      	mov	r0, r3
 800921a:	f7fc f9e8 	bl	80055ee <lfs_gstate_hasmove>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d011      	beq.n	8009248 <lfs_mount+0x24c>
        LFS_DEBUG("Found move %"PRIx32" %"PRIx32" %"PRIx16,
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009230:	4618      	mov	r0, r3
 8009232:	f7fc f956 	bl	80054e2 <lfs_tag_id>
 8009236:	4603      	mov	r3, r0
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	462b      	mov	r3, r5
 800923c:	4622      	mov	r2, r4
 800923e:	f640 6183 	movw	r1, #3715	; 0xe83
 8009242:	4821      	ldr	r0, [pc, #132]	; (80092c8 <lfs_mount+0x2cc>)
 8009244:	f008 ff86 	bl	8012154 <iprintf>
                lfs->gstate.pair[1],
                lfs_tag_id(lfs->gstate.tag));
    }

    // setup free lookahead
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009250:	69d2      	ldr	r2, [r2, #28]
 8009252:	fbb3 f1f2 	udiv	r1, r3, r2
 8009256:	fb01 f202 	mul.w	r2, r1, r2
 800925a:	1a9a      	subs	r2, r3, r2
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->free.size = 0;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7fc fbff 	bl	8005a70 <lfs_alloc_ack>

    LFS_TRACE("lfs_mount -> %d", 0);
 8009272:	2200      	movs	r2, #0
 8009274:	f640 618f 	movw	r1, #3727	; 0xe8f
 8009278:	4809      	ldr	r0, [pc, #36]	; (80092a0 <lfs_mount+0x2a4>)
 800927a:	f008 ff6b 	bl	8012154 <iprintf>
    return 0;
 800927e:	2300      	movs	r3, #0
 8009280:	e00a      	b.n	8009298 <lfs_mount+0x29c>
            goto cleanup;
 8009282:	bf00      	nop

cleanup:
    lfs_unmount(lfs);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f821 	bl	80092cc <lfs_unmount>
    LFS_TRACE("lfs_mount -> %d", err);
 800928a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800928c:	f640 6194 	movw	r1, #3732	; 0xe94
 8009290:	4803      	ldr	r0, [pc, #12]	; (80092a0 <lfs_mount+0x2a4>)
 8009292:	f008 ff5f 	bl	8012154 <iprintf>
    return err;
 8009296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8009298:	4618      	mov	r0, r3
 800929a:	3758      	adds	r7, #88	; 0x58
 800929c:	46bd      	mov	sp, r7
 800929e:	bdb0      	pop	{r4, r5, r7, pc}
 80092a0:	080144f8 	.word	0x080144f8
 80092a4:	080144ec 	.word	0x080144ec
 80092a8:	080068e9 	.word	0x080068e9
 80092ac:	0ff00008 	.word	0x0ff00008
 80092b0:	7ffffc00 	.word	0x7ffffc00
 80092b4:	20100018 	.word	0x20100018
 80092b8:	08014518 	.word	0x08014518
 80092bc:	08014540 	.word	0x08014540
 80092c0:	08014570 	.word	0x08014570
 80092c4:	080145a0 	.word	0x080145a0
 80092c8:	080145d0 	.word	0x080145d0

080092cc <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	f640 6199 	movw	r1, #3737	; 0xe99
 80092da:	4809      	ldr	r0, [pc, #36]	; (8009300 <lfs_unmount+0x34>)
 80092dc:	f008 ff3a 	bl	8012154 <iprintf>
    int err = lfs_deinit(lfs);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff fd57 	bl	8008d94 <lfs_deinit>
 80092e6:	60f8      	str	r0, [r7, #12]
    LFS_TRACE("lfs_unmount -> %d", err);
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	f640 619b 	movw	r1, #3739	; 0xe9b
 80092ee:	4805      	ldr	r0, [pc, #20]	; (8009304 <lfs_unmount+0x38>)
 80092f0:	f008 ff30 	bl	8012154 <iprintf>
    return err;
 80092f4:	68fb      	ldr	r3, [r7, #12]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	080145f8 	.word	0x080145f8
 8009304:	08014618 	.word	0x08014618

08009308 <lfs_fs_traverse>:


/// Filesystem filesystem operations ///
int lfs_fs_traverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data) {
 8009308:	b590      	push	{r4, r7, lr}
 800930a:	b09b      	sub	sp, #108	; 0x6c
 800930c:	af04      	add	r7, sp, #16
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
    LFS_TRACE("lfs_fs_traverse(%p, %p, %p)",
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	f640 61a3 	movw	r1, #3747	; 0xea3
 8009320:	488a      	ldr	r0, [pc, #552]	; (800954c <lfs_fs_traverse+0x244>)
 8009322:	f008 ff17 	bl	8012154 <iprintf>
            (void*)lfs, (void*)(uintptr_t)cb, data);
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009326:	f107 0318 	add.w	r3, r7, #24
 800932a:	2220      	movs	r2, #32
 800932c:	2100      	movs	r1, #0
 800932e:	4618      	mov	r0, r3
 8009330:	f008 fb3a 	bl	80119a8 <memset>
 8009334:	2301      	movs	r3, #1
 8009336:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    while (!lfs_pair_isnull(dir.tail)) {
 8009338:	e08d      	b.n	8009456 <lfs_fs_traverse+0x14e>
        for (int i = 0; i < 2; i++) {
 800933a:	2300      	movs	r3, #0
 800933c:	657b      	str	r3, [r7, #84]	; 0x54
 800933e:	e019      	b.n	8009374 <lfs_fs_traverse+0x6c>
            int err = cb(data, dir.tail[i]);
 8009340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009342:	3306      	adds	r3, #6
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	3358      	adds	r3, #88	; 0x58
 8009348:	443b      	add	r3, r7
 800934a:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	4611      	mov	r1, r2
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
 8009356:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	2b00      	cmp	r3, #0
 800935c:	d007      	beq.n	800936e <lfs_fs_traverse+0x66>
                LFS_TRACE("lfs_fs_traverse -> %d", err);
 800935e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009360:	f640 61ba 	movw	r1, #3770	; 0xeba
 8009364:	487a      	ldr	r0, [pc, #488]	; (8009550 <lfs_fs_traverse+0x248>)
 8009366:	f008 fef5 	bl	8012154 <iprintf>
                return err;
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	e0ea      	b.n	8009544 <lfs_fs_traverse+0x23c>
        for (int i = 0; i < 2; i++) {
 800936e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009370:	3301      	adds	r3, #1
 8009372:	657b      	str	r3, [r7, #84]	; 0x54
 8009374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009376:	2b01      	cmp	r3, #1
 8009378:	dde2      	ble.n	8009340 <lfs_fs_traverse+0x38>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800937a:	f107 0318 	add.w	r3, r7, #24
 800937e:	f103 0218 	add.w	r2, r3, #24
 8009382:	f107 0318 	add.w	r3, r7, #24
 8009386:	4619      	mov	r1, r3
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f7fd fa61 	bl	8006850 <lfs_dir_fetch>
 800938e:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8009390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009392:	2b00      	cmp	r3, #0
 8009394:	d007      	beq.n	80093a6 <lfs_fs_traverse+0x9e>
            LFS_TRACE("lfs_fs_traverse -> %d", err);
 8009396:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009398:	f640 61c2 	movw	r1, #3778	; 0xec2
 800939c:	486c      	ldr	r0, [pc, #432]	; (8009550 <lfs_fs_traverse+0x248>)
 800939e:	f008 fed9 	bl	8012154 <iprintf>
            return err;
 80093a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093a4:	e0ce      	b.n	8009544 <lfs_fs_traverse+0x23c>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 80093a6:	2300      	movs	r3, #0
 80093a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80093ac:	e04e      	b.n	800944c <lfs_fs_traverse+0x144>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80093ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80093b2:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80093b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093b8:	f043 0308 	orr.w	r3, r3, #8
 80093bc:	f107 0118 	add.w	r1, r7, #24
 80093c0:	f107 0210 	add.w	r2, r7, #16
 80093c4:	9200      	str	r2, [sp, #0]
 80093c6:	4a63      	ldr	r2, [pc, #396]	; (8009554 <lfs_fs_traverse+0x24c>)
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f7fc fc3f 	bl	8005c4c <lfs_dir_get>
 80093ce:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 80093d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	da0b      	bge.n	80093ee <lfs_fs_traverse+0xe6>
                if (tag == LFS_ERR_NOENT) {
 80093d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d8:	f113 0f02 	cmn.w	r3, #2
 80093dc:	d030      	beq.n	8009440 <lfs_fs_traverse+0x138>
                    continue;
                }
                LFS_TRACE("lfs_fs_traverse -> %d", tag);
 80093de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093e0:	f640 61ce 	movw	r1, #3790	; 0xece
 80093e4:	485a      	ldr	r0, [pc, #360]	; (8009550 <lfs_fs_traverse+0x248>)
 80093e6:	f008 feb5 	bl	8012154 <iprintf>
                return tag;
 80093ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ec:	e0aa      	b.n	8009544 <lfs_fs_traverse+0x23c>
            }
            lfs_ctz_fromle32(&ctz);
 80093ee:	f107 0310 	add.w	r3, r7, #16
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fc f9d2 	bl	800579c <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80093f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fc f847 	bl	800548e <lfs_tag_type3>
 8009400:	4603      	mov	r3, r0
 8009402:	461a      	mov	r2, r3
 8009404:	f240 2302 	movw	r3, #514	; 0x202
 8009408:	429a      	cmp	r2, r3
 800940a:	d11a      	bne.n	8009442 <lfs_fs_traverse+0x13a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800940c:	68f9      	ldr	r1, [r7, #12]
 800940e:	6938      	ldr	r0, [r7, #16]
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	9202      	str	r2, [sp, #8]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	9201      	str	r2, [sp, #4]
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	4603      	mov	r3, r0
 800941e:	460a      	mov	r2, r1
 8009420:	2100      	movs	r1, #0
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7fe fd90 	bl	8007f48 <lfs_ctz_traverse>
 8009428:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800942a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800942c:	2b00      	cmp	r3, #0
 800942e:	d008      	beq.n	8009442 <lfs_fs_traverse+0x13a>
                    LFS_TRACE("lfs_fs_traverse -> %d", err);
 8009430:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009432:	f640 61d7 	movw	r1, #3799	; 0xed7
 8009436:	4846      	ldr	r0, [pc, #280]	; (8009550 <lfs_fs_traverse+0x248>)
 8009438:	f008 fe8c 	bl	8012154 <iprintf>
                    return err;
 800943c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800943e:	e081      	b.n	8009544 <lfs_fs_traverse+0x23c>
                    continue;
 8009440:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8009442:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009446:	3301      	adds	r3, #1
 8009448:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800944c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800944e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8009452:	429a      	cmp	r2, r3
 8009454:	d3ab      	bcc.n	80093ae <lfs_fs_traverse+0xa6>
    while (!lfs_pair_isnull(dir.tail)) {
 8009456:	f107 0318 	add.w	r3, r7, #24
 800945a:	3318      	adds	r3, #24
 800945c:	4618      	mov	r0, r3
 800945e:	f7fb ff6c 	bl	800533a <lfs_pair_isnull>
 8009462:	4603      	mov	r3, r0
 8009464:	f083 0301 	eor.w	r3, r3, #1
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	f47f af65 	bne.w	800933a <lfs_fs_traverse+0x32>
            }
        }
    }

    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009476:	e05b      	b.n	8009530 <lfs_fs_traverse+0x228>
        if (f->type != LFS_TYPE_REG) {
 8009478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800947a:	799b      	ldrb	r3, [r3, #6]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d153      	bne.n	8009528 <lfs_fs_traverse+0x220>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8009480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009488:	2b00      	cmp	r3, #0
 800948a:	d023      	beq.n	80094d4 <lfs_fs_traverse+0x1cc>
 800948c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800948e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d11d      	bne.n	80094d4 <lfs_fs_traverse+0x1cc>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800949a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80094a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	9202      	str	r2, [sp, #8]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	9201      	str	r2, [sp, #4]
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	4623      	mov	r3, r4
 80094b4:	4602      	mov	r2, r0
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7fe fd46 	bl	8007f48 <lfs_ctz_traverse>
 80094bc:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80094be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d007      	beq.n	80094d4 <lfs_fs_traverse+0x1cc>
                LFS_TRACE("lfs_fs_traverse -> %d", err);
 80094c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094c6:	f640 61e8 	movw	r1, #3816	; 0xee8
 80094ca:	4821      	ldr	r0, [pc, #132]	; (8009550 <lfs_fs_traverse+0x248>)
 80094cc:	f008 fe42 	bl	8012154 <iprintf>
                return err;
 80094d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094d2:	e037      	b.n	8009544 <lfs_fs_traverse+0x23c>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80094d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d024      	beq.n	800952a <lfs_fs_traverse+0x222>
 80094e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d11e      	bne.n	800952a <lfs_fs_traverse+0x222>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80094ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ee:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80094f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	9202      	str	r2, [sp, #8]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	9201      	str	r2, [sp, #4]
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	4623      	mov	r3, r4
 8009508:	4602      	mov	r2, r0
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7fe fd1c 	bl	8007f48 <lfs_ctz_traverse>
 8009510:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8009512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009514:	2b00      	cmp	r3, #0
 8009516:	d008      	beq.n	800952a <lfs_fs_traverse+0x222>
                LFS_TRACE("lfs_fs_traverse -> %d", err);
 8009518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800951a:	f640 61f1 	movw	r1, #3825	; 0xef1
 800951e:	480c      	ldr	r0, [pc, #48]	; (8009550 <lfs_fs_traverse+0x248>)
 8009520:	f008 fe18 	bl	8012154 <iprintf>
                return err;
 8009524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009526:	e00d      	b.n	8009544 <lfs_fs_traverse+0x23c>
            continue;
 8009528:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800952a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1a0      	bne.n	8009478 <lfs_fs_traverse+0x170>
            }
        }
    }

    LFS_TRACE("lfs_fs_traverse -> %d", 0);
 8009536:	2200      	movs	r2, #0
 8009538:	f640 61f7 	movw	r1, #3831	; 0xef7
 800953c:	4804      	ldr	r0, [pc, #16]	; (8009550 <lfs_fs_traverse+0x248>)
 800953e:	f008 fe09 	bl	8012154 <iprintf>
    return 0;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	375c      	adds	r7, #92	; 0x5c
 8009548:	46bd      	mov	sp, r7
 800954a:	bd90      	pop	{r4, r7, pc}
 800954c:	0801463c 	.word	0x0801463c
 8009550:	08014668 	.word	0x08014668
 8009554:	700ffc00 	.word	0x700ffc00

08009558 <lfs_fs_pred>:

static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	61da      	str	r2, [r3, #28]
    while (!lfs_pair_isnull(pdir->tail)) {
 8009570:	e017      	b.n	80095a2 <lfs_fs_pred+0x4a>
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	3318      	adds	r3, #24
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	4618      	mov	r0, r3
 800957a:	f7fb fef9 	bl	8005370 <lfs_pair_cmp>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <lfs_fs_pred+0x30>
            return 0;
 8009584:	2300      	movs	r3, #0
 8009586:	e019      	b.n	80095bc <lfs_fs_pred+0x64>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3318      	adds	r3, #24
 800958c:	461a      	mov	r2, r3
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f7fd f95d 	bl	8006850 <lfs_dir_fetch>
 8009596:	6178      	str	r0, [r7, #20]
        if (err) {
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d001      	beq.n	80095a2 <lfs_fs_pred+0x4a>
            return err;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	e00c      	b.n	80095bc <lfs_fs_pred+0x64>
    while (!lfs_pair_isnull(pdir->tail)) {
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3318      	adds	r3, #24
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fb fec7 	bl	800533a <lfs_pair_isnull>
 80095ac:	4603      	mov	r3, r0
 80095ae:	f083 0301 	eor.w	r3, r3, #1
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1dc      	bne.n	8009572 <lfs_fs_pred+0x1a>
        }
    }

    return LFS_ERR_NOENT;
 80095b8:	f06f 0301 	mvn.w	r3, #1
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <lfs_fs_parent_match>:
    lfs_t *lfs;
    const lfs_block_t pair[2];
};

static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80095c4:	b5b0      	push	{r4, r5, r7, lr}
 80095c6:	b08e      	sub	sp, #56	; 0x38
 80095c8:	af04      	add	r7, sp, #16
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80095e4:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80095e6:	6a3b      	ldr	r3, [r7, #32]
 80095e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 80095ea:	69dd      	ldr	r5, [r3, #28]
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	69fa      	ldr	r2, [r7, #28]
 80095f2:	6852      	ldr	r2, [r2, #4]
 80095f4:	2108      	movs	r1, #8
 80095f6:	9103      	str	r1, [sp, #12]
 80095f8:	f107 0110 	add.w	r1, r7, #16
 80095fc:	9102      	str	r1, [sp, #8]
 80095fe:	9201      	str	r2, [sp, #4]
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	462b      	mov	r3, r5
 8009604:	4622      	mov	r2, r4
 8009606:	4601      	mov	r1, r0
 8009608:	6a38      	ldr	r0, [r7, #32]
 800960a:	f7fb fba7 	bl	8004d5c <lfs_bd_read>
 800960e:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <lfs_fs_parent_match+0x56>
        return err;
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	e012      	b.n	8009640 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800961a:	f107 0310 	add.w	r3, r7, #16
 800961e:	4618      	mov	r0, r3
 8009620:	f7fb fed0 	bl	80053c4 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	1d1a      	adds	r2, r3, #4
 8009628:	f107 0310 	add.w	r3, r7, #16
 800962c:	4611      	mov	r1, r2
 800962e:	4618      	mov	r0, r3
 8009630:	f7fb fe9e 	bl	8005370 <lfs_pair_cmp>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	bf14      	ite	ne
 800963a:	2301      	movne	r3, #1
 800963c:	2300      	moveq	r3, #0
 800963e:	b2db      	uxtb	r3, r3
}
 8009640:	4618      	mov	r0, r3
 8009642:	3728      	adds	r7, #40	; 0x28
 8009644:	46bd      	mov	sp, r7
 8009646:	bdb0      	pop	{r4, r5, r7, pc}

08009648 <lfs_fs_parent>:

static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8009648:	b580      	push	{r7, lr}
 800964a:	b08c      	sub	sp, #48	; 0x30
 800964c:	af04      	add	r7, sp, #16
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	61da      	str	r2, [r3, #28]
    while (!lfs_pair_isnull(parent->tail)) {
 8009660:	e022      	b.n	80096a8 <lfs_fs_parent+0x60>
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009670:	617b      	str	r3, [r7, #20]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8009678:	f107 0310 	add.w	r3, r7, #16
 800967c:	9303      	str	r3, [sp, #12]
 800967e:	4b13      	ldr	r3, [pc, #76]	; (80096cc <lfs_fs_parent+0x84>)
 8009680:	9302      	str	r3, [sp, #8]
 8009682:	2300      	movs	r3, #0
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	4b12      	ldr	r3, [pc, #72]	; (80096d0 <lfs_fs_parent+0x88>)
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	4b12      	ldr	r3, [pc, #72]	; (80096d4 <lfs_fs_parent+0x8c>)
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f7fc fda8 	bl	80061e4 <lfs_dir_fetchmatch>
 8009694:	61f8      	str	r0, [r7, #28]
        if (tag && tag != LFS_ERR_NOENT) {
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d005      	beq.n	80096a8 <lfs_fs_parent+0x60>
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	f113 0f02 	cmn.w	r3, #2
 80096a2:	d001      	beq.n	80096a8 <lfs_fs_parent+0x60>
            return tag;
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	e00c      	b.n	80096c2 <lfs_fs_parent+0x7a>
    while (!lfs_pair_isnull(parent->tail)) {
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	3318      	adds	r3, #24
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fb fe44 	bl	800533a <lfs_pair_isnull>
 80096b2:	4603      	mov	r3, r0
 80096b4:	f083 0301 	eor.w	r3, r3, #1
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1d1      	bne.n	8009662 <lfs_fs_parent+0x1a>
        }
    }

    return LFS_ERR_NOENT;
 80096be:	f06f 0301 	mvn.w	r3, #1
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3720      	adds	r7, #32
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	080095c5 	.word	0x080095c5
 80096d0:	20000008 	.word	0x20000008
 80096d4:	7ff003ff 	.word	0x7ff003ff

080096d8 <lfs_fs_relocate>:

static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 80096d8:	b580      	push	{r7, lr}
 80096da:	b098      	sub	sp, #96	; 0x60
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	3320      	adds	r3, #32
 80096e8:	4619      	mov	r1, r3
 80096ea:	68b8      	ldr	r0, [r7, #8]
 80096ec:	f7fb fe40 	bl	8005370 <lfs_pair_cmp>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d111      	bne.n	800971a <lfs_fs_relocate+0x42>
        LFS_DEBUG("Relocating root %"PRIx32" %"PRIx32,
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3304      	adds	r3, #4
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f640 713e 	movw	r1, #3902	; 0xf3e
 8009704:	4849      	ldr	r0, [pc, #292]	; (800982c <lfs_fs_relocate+0x154>)
 8009706:	f008 fd25 	bl	8012154 <iprintf>
                newpair[0], newpair[1]);
        lfs->root[0] = newpair[0];
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	621a      	str	r2, [r3, #32]
        lfs->root[1] = newpair[1];
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	625a      	str	r2, [r3, #36]	; 0x24
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009720:	e013      	b.n	800974a <lfs_fs_relocate+0x72>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
 8009722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009724:	3308      	adds	r3, #8
 8009726:	4619      	mov	r1, r3
 8009728:	68b8      	ldr	r0, [r7, #8]
 800972a:	f7fb fe21 	bl	8005370 <lfs_pair_cmp>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d107      	bne.n	8009744 <lfs_fs_relocate+0x6c>
            d->m.pair[0] = newpair[0];
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800973a:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009742:	60da      	str	r2, [r3, #12]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8009744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800974a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e8      	bne.n	8009722 <lfs_fs_relocate+0x4a>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 8009750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009754:	461a      	mov	r2, r3
 8009756:	68b9      	ldr	r1, [r7, #8]
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7ff ff75 	bl	8009648 <lfs_fs_parent>
 800975e:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 8009760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009762:	2b00      	cmp	r3, #0
 8009764:	da05      	bge.n	8009772 <lfs_fs_relocate+0x9a>
 8009766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009768:	f113 0f02 	cmn.w	r3, #2
 800976c:	d001      	beq.n	8009772 <lfs_fs_relocate+0x9a>
        return tag;
 800976e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009770:	e058      	b.n	8009824 <lfs_fs_relocate+0x14c>
    }

    if (tag != LFS_ERR_NOENT) {
 8009772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009774:	f113 0f02 	cmn.w	r3, #2
 8009778:	d020      	beq.n	80097bc <lfs_fs_relocate+0xe4>
        // update disk, this creates a desync
        lfs_fs_preporphans(lfs, +1);
 800977a:	2101      	movs	r1, #1
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 f859 	bl	8009834 <lfs_fs_preporphans>

        lfs_pair_tole32(newpair);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7fb fe38 	bl	80053f8 <lfs_pair_tole32>
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS({tag, newpair}));
 8009788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800978a:	62bb      	str	r3, [r7, #40]	; 0x28
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009790:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009794:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009798:	2301      	movs	r3, #1
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7fd fec6 	bl	800752c <lfs_dir_commit>
 80097a0:	6578      	str	r0, [r7, #84]	; 0x54
        lfs_pair_fromle32(newpair);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7fb fe0e 	bl	80053c4 <lfs_pair_fromle32>
        if (err) {
 80097a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <lfs_fs_relocate+0xda>
            return err;
 80097ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097b0:	e038      	b.n	8009824 <lfs_fs_relocate+0x14c>
        }

        // next step, clean up orphans
        lfs_fs_preporphans(lfs, -1);
 80097b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 f83c 	bl	8009834 <lfs_fs_preporphans>
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 80097bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097c0:	461a      	mov	r2, r3
 80097c2:	68b9      	ldr	r1, [r7, #8]
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f7ff fec7 	bl	8009558 <lfs_fs_pred>
 80097ca:	6538      	str	r0, [r7, #80]	; 0x50
    if (err && err != LFS_ERR_NOENT) {
 80097cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <lfs_fs_relocate+0x106>
 80097d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097d4:	f113 0f02 	cmn.w	r3, #2
 80097d8:	d001      	beq.n	80097de <lfs_fs_relocate+0x106>
        return err;
 80097da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097dc:	e022      	b.n	8009824 <lfs_fs_relocate+0x14c>
    }

    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
 80097de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097e0:	f113 0f02 	cmn.w	r3, #2
 80097e4:	d01d      	beq.n	8009822 <lfs_fs_relocate+0x14a>
        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7fb fe06 	bl	80053f8 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 80097ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80097f0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80097f4:	051a      	lsls	r2, r3, #20
 80097f6:	4b0e      	ldr	r3, [pc, #56]	; (8009830 <lfs_fs_relocate+0x158>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	61bb      	str	r3, [r7, #24]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	61fb      	str	r3, [r7, #28]
 8009800:	f107 0218 	add.w	r2, r7, #24
 8009804:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009808:	2301      	movs	r3, #1
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f7fd fe8e 	bl	800752c <lfs_dir_commit>
 8009810:	6538      	str	r0, [r7, #80]	; 0x50
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fb fdd6 	bl	80053c4 <lfs_pair_fromle32>
        if (err) {
 8009818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <lfs_fs_relocate+0x14a>
            return err;
 800981e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009820:	e000      	b.n	8009824 <lfs_fs_relocate+0x14c>
        }
    }

    return 0;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3760      	adds	r7, #96	; 0x60
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	08014690 	.word	0x08014690
 8009830:	000ffc08 	.word	0x000ffc08

08009834 <lfs_fs_preporphans>:

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8009834:	b5b0      	push	{r4, r5, r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
    lfs->gpending.tag += orphans;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009848:	441a      	add	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_gstate_xororphans(&lfs->gdelta,   &lfs->gpending,
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f103 053c 	add.w	r5, r3, #60	; 0x3c
            lfs_gstate_hasorphans(&lfs->gpending));
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	333c      	adds	r3, #60	; 0x3c
    lfs_gstate_xororphans(&lfs->gdelta,   &lfs->gpending,
 800985e:	4618      	mov	r0, r3
 8009860:	f7fb feb2 	bl	80055c8 <lfs_gstate_hasorphans>
 8009864:	4603      	mov	r3, r0
 8009866:	461a      	mov	r2, r3
 8009868:	4629      	mov	r1, r5
 800986a:	4620      	mov	r0, r4
 800986c:	f7fb fef2 	bl	8005654 <lfs_gstate_xororphans>
    lfs_gstate_xororphans(&lfs->gpending, &lfs->gpending,
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f103 053c 	add.w	r5, r3, #60	; 0x3c
            lfs_gstate_hasorphans(&lfs->gpending));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	333c      	adds	r3, #60	; 0x3c
    lfs_gstate_xororphans(&lfs->gpending, &lfs->gpending,
 8009880:	4618      	mov	r0, r3
 8009882:	f7fb fea1 	bl	80055c8 <lfs_gstate_hasorphans>
 8009886:	4603      	mov	r3, r0
 8009888:	461a      	mov	r2, r3
 800988a:	4629      	mov	r1, r5
 800988c:	4620      	mov	r0, r4
 800988e:	f7fb fee1 	bl	8005654 <lfs_gstate_xororphans>
}
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bdb0      	pop	{r4, r5, r7, pc}

0800989a <lfs_fs_size_count>:
    }

    return 0;
}

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800989a:	b480      	push	{r7}
 800989c:	b085      	sub	sp, #20
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	1c5a      	adds	r2, r3, #1
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	601a      	str	r2, [r3, #0]
    return 0;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <lfs_fs_size>:

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	f640 71ff 	movw	r1, #4095	; 0xfff
 80098ce:	4811      	ldr	r0, [pc, #68]	; (8009914 <lfs_fs_size+0x54>)
 80098d0:	f008 fc40 	bl	8012154 <iprintf>
    lfs_size_t size = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse(lfs, lfs_fs_size_count, &size);
 80098d8:	f107 0308 	add.w	r3, r7, #8
 80098dc:	461a      	mov	r2, r3
 80098de:	490e      	ldr	r1, [pc, #56]	; (8009918 <lfs_fs_size+0x58>)
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff fd11 	bl	8009308 <lfs_fs_traverse>
 80098e6:	60f8      	str	r0, [r7, #12]
    if (err) {
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d007      	beq.n	80098fe <lfs_fs_size+0x3e>
        LFS_TRACE("lfs_fs_size -> %"PRId32, err);
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	f241 0103 	movw	r1, #4099	; 0x1003
 80098f4:	4809      	ldr	r0, [pc, #36]	; (800991c <lfs_fs_size+0x5c>)
 80098f6:	f008 fc2d 	bl	8012154 <iprintf>
        return err;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	e006      	b.n	800990c <lfs_fs_size+0x4c>
    }

    LFS_TRACE("lfs_fs_size -> %"PRId32, err);
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	f241 0107 	movw	r1, #4103	; 0x1007
 8009904:	4805      	ldr	r0, [pc, #20]	; (800991c <lfs_fs_size+0x5c>)
 8009906:	f008 fc25 	bl	8012154 <iprintf>
    return size;
 800990a:	68bb      	ldr	r3, [r7, #8]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	08014734 	.word	0x08014734
 8009918:	0800989b 	.word	0x0800989b
 800991c:	08014754 	.word	0x08014754

08009920 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8009930:	2300      	movs	r3, #0
 8009932:	617b      	str	r3, [r7, #20]
 8009934:	e024      	b.n	8009980 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	091a      	lsrs	r2, r3, #4
 800993a:	6939      	ldr	r1, [r7, #16]
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	440b      	add	r3, r1
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	4619      	mov	r1, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	404b      	eors	r3, r1
 8009948:	f003 030f 	and.w	r3, r3, #15
 800994c:	4912      	ldr	r1, [pc, #72]	; (8009998 <lfs_crc+0x78>)
 800994e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009952:	4053      	eors	r3, r2
 8009954:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	091a      	lsrs	r2, r3, #4
 800995a:	6939      	ldr	r1, [r7, #16]
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	440b      	add	r3, r1
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	091b      	lsrs	r3, r3, #4
 8009964:	b2db      	uxtb	r3, r3
 8009966:	4619      	mov	r1, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	404b      	eors	r3, r1
 800996c:	f003 030f 	and.w	r3, r3, #15
 8009970:	4909      	ldr	r1, [pc, #36]	; (8009998 <lfs_crc+0x78>)
 8009972:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009976:	4053      	eors	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	3301      	adds	r3, #1
 800997e:	617b      	str	r3, [r7, #20]
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	429a      	cmp	r2, r3
 8009986:	d3d6      	bcc.n	8009936 <lfs_crc+0x16>
    }

    return crc;
 8009988:	68fb      	ldr	r3, [r7, #12]
}
 800998a:	4618      	mov	r0, r3
 800998c:	371c      	adds	r7, #28
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	080169f4 	.word	0x080169f4

0800999c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800999c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80099d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80099a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80099a2:	e003      	b.n	80099ac <LoopCopyDataInit>

080099a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80099a4:	4b0c      	ldr	r3, [pc, #48]	; (80099d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80099a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80099a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80099aa:	3104      	adds	r1, #4

080099ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80099ac:	480b      	ldr	r0, [pc, #44]	; (80099dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80099ae:	4b0c      	ldr	r3, [pc, #48]	; (80099e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80099b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80099b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80099b4:	d3f6      	bcc.n	80099a4 <CopyDataInit>
  ldr  r2, =_sbss
 80099b6:	4a0b      	ldr	r2, [pc, #44]	; (80099e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80099b8:	e002      	b.n	80099c0 <LoopFillZerobss>

080099ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80099ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80099bc:	f842 3b04 	str.w	r3, [r2], #4

080099c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80099c0:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80099c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80099c4:	d3f9      	bcc.n	80099ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80099c6:	f7fa ff7b 	bl	80048c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80099ca:	f007 ffa7 	bl	801191c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80099ce:	f7f7 f959 	bl	8000c84 <main>
  bx  lr    
 80099d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80099d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80099d8:	08016c20 	.word	0x08016c20
  ldr  r0, =_sdata
 80099dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80099e0:	2000011c 	.word	0x2000011c
  ldr  r2, =_sbss
 80099e4:	20000120 	.word	0x20000120
  ldr  r3, = _ebss
 80099e8:	200082e4 	.word	0x200082e4

080099ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80099ec:	e7fe      	b.n	80099ec <ADC_IRQHandler>
	...

080099f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80099f4:	4b0e      	ldr	r3, [pc, #56]	; (8009a30 <HAL_Init+0x40>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a0d      	ldr	r2, [pc, #52]	; (8009a30 <HAL_Init+0x40>)
 80099fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009a00:	4b0b      	ldr	r3, [pc, #44]	; (8009a30 <HAL_Init+0x40>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a0a      	ldr	r2, [pc, #40]	; (8009a30 <HAL_Init+0x40>)
 8009a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009a0c:	4b08      	ldr	r3, [pc, #32]	; (8009a30 <HAL_Init+0x40>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a07      	ldr	r2, [pc, #28]	; (8009a30 <HAL_Init+0x40>)
 8009a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009a18:	2003      	movs	r0, #3
 8009a1a:	f000 f8fc 	bl	8009c16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009a1e:	200f      	movs	r0, #15
 8009a20:	f7fa fde2 	bl	80045e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009a24:	f7fa fbe4 	bl	80041f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	40023c00 	.word	0x40023c00

08009a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009a34:	b480      	push	{r7}
 8009a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009a38:	4b06      	ldr	r3, [pc, #24]	; (8009a54 <HAL_IncTick+0x20>)
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <HAL_IncTick+0x24>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4413      	add	r3, r2
 8009a44:	4a04      	ldr	r2, [pc, #16]	; (8009a58 <HAL_IncTick+0x24>)
 8009a46:	6013      	str	r3, [r2, #0]
}
 8009a48:	bf00      	nop
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	200000a0 	.word	0x200000a0
 8009a58:	20003cc0 	.word	0x20003cc0

08009a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8009a60:	4b03      	ldr	r3, [pc, #12]	; (8009a70 <HAL_GetTick+0x14>)
 8009a62:	681b      	ldr	r3, [r3, #0]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	20003cc0 	.word	0x20003cc0

08009a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009a7c:	f7ff ffee 	bl	8009a5c <HAL_GetTick>
 8009a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a8c:	d005      	beq.n	8009a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009a8e:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <HAL_Delay+0x44>)
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	461a      	mov	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	4413      	add	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009a9a:	bf00      	nop
 8009a9c:	f7ff ffde 	bl	8009a5c <HAL_GetTick>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d8f7      	bhi.n	8009a9c <HAL_Delay+0x28>
  {
  }
}
 8009aac:	bf00      	nop
 8009aae:	bf00      	nop
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	200000a0 	.word	0x200000a0

08009abc <__NVIC_SetPriorityGrouping>:
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f003 0307 	and.w	r3, r3, #7
 8009aca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009acc:	4b0c      	ldr	r3, [pc, #48]	; (8009b00 <__NVIC_SetPriorityGrouping+0x44>)
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009ad8:	4013      	ands	r3, r2
 8009ada:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009aee:	4a04      	ldr	r2, [pc, #16]	; (8009b00 <__NVIC_SetPriorityGrouping+0x44>)
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	60d3      	str	r3, [r2, #12]
}
 8009af4:	bf00      	nop
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	e000ed00 	.word	0xe000ed00

08009b04 <__NVIC_GetPriorityGrouping>:
{
 8009b04:	b480      	push	{r7}
 8009b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009b08:	4b04      	ldr	r3, [pc, #16]	; (8009b1c <__NVIC_GetPriorityGrouping+0x18>)
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	0a1b      	lsrs	r3, r3, #8
 8009b0e:	f003 0307 	and.w	r3, r3, #7
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	e000ed00 	.word	0xe000ed00

08009b20 <__NVIC_EnableIRQ>:
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	db0b      	blt.n	8009b4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	f003 021f 	and.w	r2, r3, #31
 8009b38:	4907      	ldr	r1, [pc, #28]	; (8009b58 <__NVIC_EnableIRQ+0x38>)
 8009b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b3e:	095b      	lsrs	r3, r3, #5
 8009b40:	2001      	movs	r0, #1
 8009b42:	fa00 f202 	lsl.w	r2, r0, r2
 8009b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009b4a:	bf00      	nop
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	e000e100 	.word	0xe000e100

08009b5c <__NVIC_SetPriority>:
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	4603      	mov	r3, r0
 8009b64:	6039      	str	r1, [r7, #0]
 8009b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	db0a      	blt.n	8009b86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	490c      	ldr	r1, [pc, #48]	; (8009ba8 <__NVIC_SetPriority+0x4c>)
 8009b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b7a:	0112      	lsls	r2, r2, #4
 8009b7c:	b2d2      	uxtb	r2, r2
 8009b7e:	440b      	add	r3, r1
 8009b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009b84:	e00a      	b.n	8009b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	4908      	ldr	r1, [pc, #32]	; (8009bac <__NVIC_SetPriority+0x50>)
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
 8009b8e:	f003 030f 	and.w	r3, r3, #15
 8009b92:	3b04      	subs	r3, #4
 8009b94:	0112      	lsls	r2, r2, #4
 8009b96:	b2d2      	uxtb	r2, r2
 8009b98:	440b      	add	r3, r1
 8009b9a:	761a      	strb	r2, [r3, #24]
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	e000e100 	.word	0xe000e100
 8009bac:	e000ed00 	.word	0xe000ed00

08009bb0 <NVIC_EncodePriority>:
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b089      	sub	sp, #36	; 0x24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f003 0307 	and.w	r3, r3, #7
 8009bc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	f1c3 0307 	rsb	r3, r3, #7
 8009bca:	2b04      	cmp	r3, #4
 8009bcc:	bf28      	it	cs
 8009bce:	2304      	movcs	r3, #4
 8009bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	2b06      	cmp	r3, #6
 8009bd8:	d902      	bls.n	8009be0 <NVIC_EncodePriority+0x30>
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	3b03      	subs	r3, #3
 8009bde:	e000      	b.n	8009be2 <NVIC_EncodePriority+0x32>
 8009be0:	2300      	movs	r3, #0
 8009be2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	fa02 f303 	lsl.w	r3, r2, r3
 8009bee:	43da      	mvns	r2, r3
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	401a      	ands	r2, r3
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009bf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8009c02:	43d9      	mvns	r1, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c08:	4313      	orrs	r3, r2
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3724      	adds	r7, #36	; 0x24
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b082      	sub	sp, #8
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7ff ff4c 	bl	8009abc <__NVIC_SetPriorityGrouping>
}
 8009c24:	bf00      	nop
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009c3e:	f7ff ff61 	bl	8009b04 <__NVIC_GetPriorityGrouping>
 8009c42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	68b9      	ldr	r1, [r7, #8]
 8009c48:	6978      	ldr	r0, [r7, #20]
 8009c4a:	f7ff ffb1 	bl	8009bb0 <NVIC_EncodePriority>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c54:	4611      	mov	r1, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7ff ff80 	bl	8009b5c <__NVIC_SetPriority>
}
 8009c5c:	bf00      	nop
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff ff54 	bl	8009b20 <__NVIC_EnableIRQ>
}
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009c8c:	f7ff fee6 	bl	8009a5c <HAL_GetTick>
 8009c90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e099      	b.n	8009dd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f022 0201 	bic.w	r2, r2, #1
 8009cba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009cbc:	e00f      	b.n	8009cde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009cbe:	f7ff fecd 	bl	8009a5c <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	2b05      	cmp	r3, #5
 8009cca:	d908      	bls.n	8009cde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2203      	movs	r2, #3
 8009cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e078      	b.n	8009dd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1e8      	bne.n	8009cbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	4b38      	ldr	r3, [pc, #224]	; (8009dd8 <HAL_DMA_Init+0x158>)
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685a      	ldr	r2, [r3, #4]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d34:	2b04      	cmp	r3, #4
 8009d36:	d107      	bne.n	8009d48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d40:	4313      	orrs	r3, r2
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f023 0307 	bic.w	r3, r3, #7
 8009d5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	2b04      	cmp	r3, #4
 8009d70:	d117      	bne.n	8009da2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00e      	beq.n	8009da2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fb01 	bl	800a38c <DMA_CheckFifoParam>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d008      	beq.n	8009da2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2240      	movs	r2, #64	; 0x40
 8009d94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e016      	b.n	8009dd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fab8 	bl	800a320 <DMA_CalcBaseAndBitshift>
 8009db0:	4603      	mov	r3, r0
 8009db2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009db8:	223f      	movs	r2, #63	; 0x3f
 8009dba:	409a      	lsls	r2, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	f010803f 	.word	0xf010803f

08009ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d101      	bne.n	8009e02 <HAL_DMA_Start_IT+0x26>
 8009dfe:	2302      	movs	r3, #2
 8009e00:	e040      	b.n	8009e84 <HAL_DMA_Start_IT+0xa8>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d12f      	bne.n	8009e76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2202      	movs	r2, #2
 8009e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	68b9      	ldr	r1, [r7, #8]
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 fa4a 	bl	800a2c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e34:	223f      	movs	r2, #63	; 0x3f
 8009e36:	409a      	lsls	r2, r3
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f042 0216 	orr.w	r2, r2, #22
 8009e4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d007      	beq.n	8009e64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f042 0208 	orr.w	r2, r2, #8
 8009e62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f042 0201 	orr.w	r2, r2, #1
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	e005      	b.n	8009e82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009e7e:	2302      	movs	r3, #2
 8009e80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009e9a:	f7ff fddf 	bl	8009a5c <HAL_GetTick>
 8009e9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d008      	beq.n	8009ebe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2280      	movs	r2, #128	; 0x80
 8009eb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e052      	b.n	8009f64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f022 0216 	bic.w	r2, r2, #22
 8009ecc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	695a      	ldr	r2, [r3, #20]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009edc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d103      	bne.n	8009eee <HAL_DMA_Abort+0x62>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d007      	beq.n	8009efe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f022 0208 	bic.w	r2, r2, #8
 8009efc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f022 0201 	bic.w	r2, r2, #1
 8009f0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f0e:	e013      	b.n	8009f38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f10:	f7ff fda4 	bl	8009a5c <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	2b05      	cmp	r3, #5
 8009f1c:	d90c      	bls.n	8009f38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2220      	movs	r2, #32
 8009f22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2203      	movs	r2, #3
 8009f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e015      	b.n	8009f64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e4      	bne.n	8009f10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f4a:	223f      	movs	r2, #63	; 0x3f
 8009f4c:	409a      	lsls	r2, r3
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d004      	beq.n	8009f8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2280      	movs	r2, #128	; 0x80
 8009f84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e00c      	b.n	8009fa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2205      	movs	r2, #5
 8009f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f022 0201 	bic.w	r2, r2, #1
 8009fa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009fbc:	4b8e      	ldr	r3, [pc, #568]	; (800a1f8 <HAL_DMA_IRQHandler+0x248>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a8e      	ldr	r2, [pc, #568]	; (800a1fc <HAL_DMA_IRQHandler+0x24c>)
 8009fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc6:	0a9b      	lsrs	r3, r3, #10
 8009fc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fda:	2208      	movs	r2, #8
 8009fdc:	409a      	lsls	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d01a      	beq.n	800a01c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0304 	and.w	r3, r3, #4
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d013      	beq.n	800a01c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f022 0204 	bic.w	r2, r2, #4
 800a002:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a008:	2208      	movs	r2, #8
 800a00a:	409a      	lsls	r2, r3
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a014:	f043 0201 	orr.w	r2, r3, #1
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a020:	2201      	movs	r2, #1
 800a022:	409a      	lsls	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4013      	ands	r3, r2
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d012      	beq.n	800a052 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00b      	beq.n	800a052 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a03e:	2201      	movs	r2, #1
 800a040:	409a      	lsls	r2, r3
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a04a:	f043 0202 	orr.w	r2, r3, #2
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a056:	2204      	movs	r2, #4
 800a058:	409a      	lsls	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	4013      	ands	r3, r2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d012      	beq.n	800a088 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0302 	and.w	r3, r3, #2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a074:	2204      	movs	r2, #4
 800a076:	409a      	lsls	r2, r3
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a080:	f043 0204 	orr.w	r2, r3, #4
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a08c:	2210      	movs	r2, #16
 800a08e:	409a      	lsls	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	4013      	ands	r3, r2
 800a094:	2b00      	cmp	r3, #0
 800a096:	d043      	beq.n	800a120 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 0308 	and.w	r3, r3, #8
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d03c      	beq.n	800a120 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0aa:	2210      	movs	r2, #16
 800a0ac:	409a      	lsls	r2, r3
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d018      	beq.n	800a0f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d108      	bne.n	800a0e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d024      	beq.n	800a120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
 800a0de:	e01f      	b.n	800a120 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d01b      	beq.n	800a120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	4798      	blx	r3
 800a0f0:	e016      	b.n	800a120 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d107      	bne.n	800a110 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f022 0208 	bic.w	r2, r2, #8
 800a10e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a114:	2b00      	cmp	r3, #0
 800a116:	d003      	beq.n	800a120 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a124:	2220      	movs	r2, #32
 800a126:	409a      	lsls	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4013      	ands	r3, r2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f000 808f 	beq.w	800a250 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 0310 	and.w	r3, r3, #16
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f000 8087 	beq.w	800a250 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a146:	2220      	movs	r2, #32
 800a148:	409a      	lsls	r2, r3
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b05      	cmp	r3, #5
 800a158:	d136      	bne.n	800a1c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f022 0216 	bic.w	r2, r2, #22
 800a168:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	695a      	ldr	r2, [r3, #20]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a178:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d103      	bne.n	800a18a <HAL_DMA_IRQHandler+0x1da>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a186:	2b00      	cmp	r3, #0
 800a188:	d007      	beq.n	800a19a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f022 0208 	bic.w	r2, r2, #8
 800a198:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a19e:	223f      	movs	r2, #63	; 0x3f
 800a1a0:	409a      	lsls	r2, r3
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d07e      	beq.n	800a2bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
        }
        return;
 800a1c6:	e079      	b.n	800a2bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d01d      	beq.n	800a212 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10d      	bne.n	800a200 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d031      	beq.n	800a250 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	4798      	blx	r3
 800a1f4:	e02c      	b.n	800a250 <HAL_DMA_IRQHandler+0x2a0>
 800a1f6:	bf00      	nop
 800a1f8:	20000098 	.word	0x20000098
 800a1fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a204:	2b00      	cmp	r3, #0
 800a206:	d023      	beq.n	800a250 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	4798      	blx	r3
 800a210:	e01e      	b.n	800a250 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10f      	bne.n	800a240 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f022 0210 	bic.w	r2, r2, #16
 800a22e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d003      	beq.n	800a250 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a254:	2b00      	cmp	r3, #0
 800a256:	d032      	beq.n	800a2be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	d022      	beq.n	800a2aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2205      	movs	r2, #5
 800a268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f022 0201 	bic.w	r2, r2, #1
 800a27a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	3301      	adds	r3, #1
 800a280:	60bb      	str	r3, [r7, #8]
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	429a      	cmp	r2, r3
 800a286:	d307      	bcc.n	800a298 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1f2      	bne.n	800a27c <HAL_DMA_IRQHandler+0x2cc>
 800a296:	e000      	b.n	800a29a <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a298:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	4798      	blx	r3
 800a2ba:	e000      	b.n	800a2be <HAL_DMA_IRQHandler+0x30e>
        return;
 800a2bc:	bf00      	nop
    }
  }
}
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a2e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	2b40      	cmp	r3, #64	; 0x40
 800a2f0:	d108      	bne.n	800a304 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a302:	e007      	b.n	800a314 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	60da      	str	r2, [r3, #12]
}
 800a314:	bf00      	nop
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	3b10      	subs	r3, #16
 800a330:	4a14      	ldr	r2, [pc, #80]	; (800a384 <DMA_CalcBaseAndBitshift+0x64>)
 800a332:	fba2 2303 	umull	r2, r3, r2, r3
 800a336:	091b      	lsrs	r3, r3, #4
 800a338:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a33a:	4a13      	ldr	r2, [pc, #76]	; (800a388 <DMA_CalcBaseAndBitshift+0x68>)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4413      	add	r3, r2
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d909      	bls.n	800a362 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a356:	f023 0303 	bic.w	r3, r3, #3
 800a35a:	1d1a      	adds	r2, r3, #4
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	659a      	str	r2, [r3, #88]	; 0x58
 800a360:	e007      	b.n	800a372 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a36a:	f023 0303 	bic.w	r3, r3, #3
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a376:	4618      	mov	r0, r3
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	aaaaaaab 	.word	0xaaaaaaab
 800a388:	08016a34 	.word	0x08016a34

0800a38c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a39c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d11f      	bne.n	800a3e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d856      	bhi.n	800a45a <DMA_CheckFifoParam+0xce>
 800a3ac:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <DMA_CheckFifoParam+0x28>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a3c5 	.word	0x0800a3c5
 800a3b8:	0800a3d7 	.word	0x0800a3d7
 800a3bc:	0800a3c5 	.word	0x0800a3c5
 800a3c0:	0800a45b 	.word	0x0800a45b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d046      	beq.n	800a45e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a3d4:	e043      	b.n	800a45e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a3de:	d140      	bne.n	800a462 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a3e4:	e03d      	b.n	800a462 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3ee:	d121      	bne.n	800a434 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d837      	bhi.n	800a466 <DMA_CheckFifoParam+0xda>
 800a3f6:	a201      	add	r2, pc, #4	; (adr r2, 800a3fc <DMA_CheckFifoParam+0x70>)
 800a3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fc:	0800a40d 	.word	0x0800a40d
 800a400:	0800a413 	.word	0x0800a413
 800a404:	0800a40d 	.word	0x0800a40d
 800a408:	0800a425 	.word	0x0800a425
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	73fb      	strb	r3, [r7, #15]
      break;
 800a410:	e030      	b.n	800a474 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a416:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d025      	beq.n	800a46a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a422:	e022      	b.n	800a46a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a42c:	d11f      	bne.n	800a46e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a432:	e01c      	b.n	800a46e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b02      	cmp	r3, #2
 800a438:	d903      	bls.n	800a442 <DMA_CheckFifoParam+0xb6>
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2b03      	cmp	r3, #3
 800a43e:	d003      	beq.n	800a448 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a440:	e018      	b.n	800a474 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	73fb      	strb	r3, [r7, #15]
      break;
 800a446:	e015      	b.n	800a474 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00e      	beq.n	800a472 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	73fb      	strb	r3, [r7, #15]
      break;
 800a458:	e00b      	b.n	800a472 <DMA_CheckFifoParam+0xe6>
      break;
 800a45a:	bf00      	nop
 800a45c:	e00a      	b.n	800a474 <DMA_CheckFifoParam+0xe8>
      break;
 800a45e:	bf00      	nop
 800a460:	e008      	b.n	800a474 <DMA_CheckFifoParam+0xe8>
      break;
 800a462:	bf00      	nop
 800a464:	e006      	b.n	800a474 <DMA_CheckFifoParam+0xe8>
      break;
 800a466:	bf00      	nop
 800a468:	e004      	b.n	800a474 <DMA_CheckFifoParam+0xe8>
      break;
 800a46a:	bf00      	nop
 800a46c:	e002      	b.n	800a474 <DMA_CheckFifoParam+0xe8>
      break;   
 800a46e:	bf00      	nop
 800a470:	e000      	b.n	800a474 <DMA_CheckFifoParam+0xe8>
      break;
 800a472:	bf00      	nop
    }
  } 
  
  return status; 
 800a474:	7bfb      	ldrb	r3, [r7, #15]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop

0800a484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a484:	b480      	push	{r7}
 800a486:	b089      	sub	sp, #36	; 0x24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a48e:	2300      	movs	r3, #0
 800a490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a492:	2300      	movs	r3, #0
 800a494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a496:	2300      	movs	r3, #0
 800a498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a49a:	2300      	movs	r3, #0
 800a49c:	61fb      	str	r3, [r7, #28]
 800a49e:	e16b      	b.n	800a778 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	f040 815a 	bne.w	800a772 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f003 0303 	and.w	r3, r3, #3
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d005      	beq.n	800a4d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d130      	bne.n	800a538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	2203      	movs	r2, #3
 800a4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e6:	43db      	mvns	r3, r3
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	68da      	ldr	r2, [r3, #12]
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	69ba      	ldr	r2, [r7, #24]
 800a504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a50c:	2201      	movs	r2, #1
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	fa02 f303 	lsl.w	r3, r2, r3
 800a514:	43db      	mvns	r3, r3
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	4013      	ands	r3, r2
 800a51a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	091b      	lsrs	r3, r3, #4
 800a522:	f003 0201 	and.w	r2, r3, #1
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	fa02 f303 	lsl.w	r3, r2, r3
 800a52c:	69ba      	ldr	r2, [r7, #24]
 800a52e:	4313      	orrs	r3, r2
 800a530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	f003 0303 	and.w	r3, r3, #3
 800a540:	2b03      	cmp	r3, #3
 800a542:	d017      	beq.n	800a574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	2203      	movs	r2, #3
 800a550:	fa02 f303 	lsl.w	r3, r2, r3
 800a554:	43db      	mvns	r3, r3
 800a556:	69ba      	ldr	r2, [r7, #24]
 800a558:	4013      	ands	r3, r2
 800a55a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	fa02 f303 	lsl.w	r3, r2, r3
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	69ba      	ldr	r2, [r7, #24]
 800a572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	f003 0303 	and.w	r3, r3, #3
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d123      	bne.n	800a5c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	08da      	lsrs	r2, r3, #3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3208      	adds	r2, #8
 800a588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	f003 0307 	and.w	r3, r3, #7
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	220f      	movs	r2, #15
 800a598:	fa02 f303 	lsl.w	r3, r2, r3
 800a59c:	43db      	mvns	r3, r3
 800a59e:	69ba      	ldr	r2, [r7, #24]
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	691a      	ldr	r2, [r3, #16]
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	f003 0307 	and.w	r3, r3, #7
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	08da      	lsrs	r2, r3, #3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	3208      	adds	r2, #8
 800a5c2:	69b9      	ldr	r1, [r7, #24]
 800a5c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	005b      	lsls	r3, r3, #1
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d8:	43db      	mvns	r3, r3
 800a5da:	69ba      	ldr	r2, [r7, #24]
 800a5dc:	4013      	ands	r3, r2
 800a5de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	f003 0203 	and.w	r2, r3, #3
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	69ba      	ldr	r2, [r7, #24]
 800a5fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 80b4 	beq.w	800a772 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	4b60      	ldr	r3, [pc, #384]	; (800a790 <HAL_GPIO_Init+0x30c>)
 800a610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a612:	4a5f      	ldr	r2, [pc, #380]	; (800a790 <HAL_GPIO_Init+0x30c>)
 800a614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a618:	6453      	str	r3, [r2, #68]	; 0x44
 800a61a:	4b5d      	ldr	r3, [pc, #372]	; (800a790 <HAL_GPIO_Init+0x30c>)
 800a61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a61e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a626:	4a5b      	ldr	r2, [pc, #364]	; (800a794 <HAL_GPIO_Init+0x310>)
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	089b      	lsrs	r3, r3, #2
 800a62c:	3302      	adds	r3, #2
 800a62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	f003 0303 	and.w	r3, r3, #3
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	220f      	movs	r2, #15
 800a63e:	fa02 f303 	lsl.w	r3, r2, r3
 800a642:	43db      	mvns	r3, r3
 800a644:	69ba      	ldr	r2, [r7, #24]
 800a646:	4013      	ands	r3, r2
 800a648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a52      	ldr	r2, [pc, #328]	; (800a798 <HAL_GPIO_Init+0x314>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d02b      	beq.n	800a6aa <HAL_GPIO_Init+0x226>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a51      	ldr	r2, [pc, #324]	; (800a79c <HAL_GPIO_Init+0x318>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d025      	beq.n	800a6a6 <HAL_GPIO_Init+0x222>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a50      	ldr	r2, [pc, #320]	; (800a7a0 <HAL_GPIO_Init+0x31c>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d01f      	beq.n	800a6a2 <HAL_GPIO_Init+0x21e>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a4f      	ldr	r2, [pc, #316]	; (800a7a4 <HAL_GPIO_Init+0x320>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d019      	beq.n	800a69e <HAL_GPIO_Init+0x21a>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a4e      	ldr	r2, [pc, #312]	; (800a7a8 <HAL_GPIO_Init+0x324>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d013      	beq.n	800a69a <HAL_GPIO_Init+0x216>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a4d      	ldr	r2, [pc, #308]	; (800a7ac <HAL_GPIO_Init+0x328>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d00d      	beq.n	800a696 <HAL_GPIO_Init+0x212>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a4c      	ldr	r2, [pc, #304]	; (800a7b0 <HAL_GPIO_Init+0x32c>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d007      	beq.n	800a692 <HAL_GPIO_Init+0x20e>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a4b      	ldr	r2, [pc, #300]	; (800a7b4 <HAL_GPIO_Init+0x330>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d101      	bne.n	800a68e <HAL_GPIO_Init+0x20a>
 800a68a:	2307      	movs	r3, #7
 800a68c:	e00e      	b.n	800a6ac <HAL_GPIO_Init+0x228>
 800a68e:	2308      	movs	r3, #8
 800a690:	e00c      	b.n	800a6ac <HAL_GPIO_Init+0x228>
 800a692:	2306      	movs	r3, #6
 800a694:	e00a      	b.n	800a6ac <HAL_GPIO_Init+0x228>
 800a696:	2305      	movs	r3, #5
 800a698:	e008      	b.n	800a6ac <HAL_GPIO_Init+0x228>
 800a69a:	2304      	movs	r3, #4
 800a69c:	e006      	b.n	800a6ac <HAL_GPIO_Init+0x228>
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e004      	b.n	800a6ac <HAL_GPIO_Init+0x228>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e002      	b.n	800a6ac <HAL_GPIO_Init+0x228>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e000      	b.n	800a6ac <HAL_GPIO_Init+0x228>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	69fa      	ldr	r2, [r7, #28]
 800a6ae:	f002 0203 	and.w	r2, r2, #3
 800a6b2:	0092      	lsls	r2, r2, #2
 800a6b4:	4093      	lsls	r3, r2
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a6bc:	4935      	ldr	r1, [pc, #212]	; (800a794 <HAL_GPIO_Init+0x310>)
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	089b      	lsrs	r3, r3, #2
 800a6c2:	3302      	adds	r3, #2
 800a6c4:	69ba      	ldr	r2, [r7, #24]
 800a6c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a6ca:	4b3b      	ldr	r3, [pc, #236]	; (800a7b8 <HAL_GPIO_Init+0x334>)
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	43db      	mvns	r3, r3
 800a6d4:	69ba      	ldr	r2, [r7, #24]
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a6e6:	69ba      	ldr	r2, [r7, #24]
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a6ee:	4a32      	ldr	r2, [pc, #200]	; (800a7b8 <HAL_GPIO_Init+0x334>)
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a6f4:	4b30      	ldr	r3, [pc, #192]	; (800a7b8 <HAL_GPIO_Init+0x334>)
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	43db      	mvns	r3, r3
 800a6fe:	69ba      	ldr	r2, [r7, #24]
 800a700:	4013      	ands	r3, r2
 800a702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d003      	beq.n	800a718 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a710:	69ba      	ldr	r2, [r7, #24]
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	4313      	orrs	r3, r2
 800a716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a718:	4a27      	ldr	r2, [pc, #156]	; (800a7b8 <HAL_GPIO_Init+0x334>)
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a71e:	4b26      	ldr	r3, [pc, #152]	; (800a7b8 <HAL_GPIO_Init+0x334>)
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	43db      	mvns	r3, r3
 800a728:	69ba      	ldr	r2, [r7, #24]
 800a72a:	4013      	ands	r3, r2
 800a72c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a73a:	69ba      	ldr	r2, [r7, #24]
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	4313      	orrs	r3, r2
 800a740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a742:	4a1d      	ldr	r2, [pc, #116]	; (800a7b8 <HAL_GPIO_Init+0x334>)
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a748:	4b1b      	ldr	r3, [pc, #108]	; (800a7b8 <HAL_GPIO_Init+0x334>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	43db      	mvns	r3, r3
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	4013      	ands	r3, r2
 800a756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a760:	2b00      	cmp	r3, #0
 800a762:	d003      	beq.n	800a76c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a764:	69ba      	ldr	r2, [r7, #24]
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	4313      	orrs	r3, r2
 800a76a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a76c:	4a12      	ldr	r2, [pc, #72]	; (800a7b8 <HAL_GPIO_Init+0x334>)
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	3301      	adds	r3, #1
 800a776:	61fb      	str	r3, [r7, #28]
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	2b0f      	cmp	r3, #15
 800a77c:	f67f ae90 	bls.w	800a4a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a780:	bf00      	nop
 800a782:	bf00      	nop
 800a784:	3724      	adds	r7, #36	; 0x24
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	40023800 	.word	0x40023800
 800a794:	40013800 	.word	0x40013800
 800a798:	40020000 	.word	0x40020000
 800a79c:	40020400 	.word	0x40020400
 800a7a0:	40020800 	.word	0x40020800
 800a7a4:	40020c00 	.word	0x40020c00
 800a7a8:	40021000 	.word	0x40021000
 800a7ac:	40021400 	.word	0x40021400
 800a7b0:	40021800 	.word	0x40021800
 800a7b4:	40021c00 	.word	0x40021c00
 800a7b8:	40013c00 	.word	0x40013c00

0800a7bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	807b      	strh	r3, [r7, #2]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a7cc:	787b      	ldrb	r3, [r7, #1]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a7d2:	887a      	ldrh	r2, [r7, #2]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a7d8:	e003      	b.n	800a7e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a7da:	887b      	ldrh	r3, [r7, #2]
 800a7dc:	041a      	lsls	r2, r3, #16
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	619a      	str	r2, [r3, #24]
}
 800a7e2:	bf00      	nop
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b085      	sub	sp, #20
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	695b      	ldr	r3, [r3, #20]
 800a7fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a800:	887a      	ldrh	r2, [r7, #2]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	4013      	ands	r3, r2
 800a806:	041a      	lsls	r2, r3, #16
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	43d9      	mvns	r1, r3
 800a80c:	887b      	ldrh	r3, [r7, #2]
 800a80e:	400b      	ands	r3, r1
 800a810:	431a      	orrs	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	619a      	str	r2, [r3, #24]
}
 800a816:	bf00      	nop
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b084      	sub	sp, #16
 800a826:	af00      	add	r7, sp, #0
 800a828:	60f8      	str	r0, [r7, #12]
 800a82a:	60b9      	str	r1, [r7, #8]
 800a82c:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e03e      	b.n	800a8b6 <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d106      	bne.n	800a852 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f7f9 fec1 	bl	80045d4 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3304      	adds	r3, #4
 800a85a:	4619      	mov	r1, r3
 800a85c:	4610      	mov	r0, r2
 800a85e:	f003 fc79 	bl	800e154 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6818      	ldr	r0, [r3, #0]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	461a      	mov	r2, r3
 800a86c:	68b9      	ldr	r1, [r7, #8]
 800a86e:	f003 fcbd 	bl	800e1ec <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6818      	ldr	r0, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	461a      	mov	r2, r3
 800a87c:	6879      	ldr	r1, [r7, #4]
 800a87e:	f003 fcea 	bl	800e256 <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	2b10      	cmp	r3, #16
 800a888:	d108      	bne.n	800a89c <HAL_NAND_Init+0x7a>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f042 0204 	orr.w	r2, r2, #4
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	e007      	b.n	800a8ac <HAL_NAND_Init+0x8a>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6a1a      	ldr	r2, [r3, #32]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f042 0204 	orr.w	r2, r2, #4
 800a8aa:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2b10      	cmp	r3, #16
 800a8cc:	d10a      	bne.n	800a8e4 <HAL_NAND_IRQHandler+0x26>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	bf0c      	ite	eq
 800a8dc:	2301      	moveq	r3, #1
 800a8de:	2300      	movne	r3, #0
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	e009      	b.n	800a8f8 <HAL_NAND_IRQHandler+0x3a>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	bf0c      	ite	eq
 800a8f2:	2301      	moveq	r3, #1
 800a8f4:	2300      	movne	r3, #0
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d017      	beq.n	800a92c <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f7f8 f8b3 	bl	8002a68 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	2b10      	cmp	r3, #16
 800a908:	d108      	bne.n	800a91c <HAL_NAND_IRQHandler+0x5e>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 0201 	bic.w	r2, r2, #1
 800a918:	605a      	str	r2, [r3, #4]
 800a91a:	e007      	b.n	800a92c <HAL_NAND_IRQHandler+0x6e>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f022 0201 	bic.w	r2, r2, #1
 800a92a:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	2b10      	cmp	r3, #16
 800a932:	d10a      	bne.n	800a94a <HAL_NAND_IRQHandler+0x8c>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f003 0302 	and.w	r3, r3, #2
 800a93e:	2b02      	cmp	r3, #2
 800a940:	bf0c      	ite	eq
 800a942:	2301      	moveq	r3, #1
 800a944:	2300      	movne	r3, #0
 800a946:	b2db      	uxtb	r3, r3
 800a948:	e009      	b.n	800a95e <HAL_NAND_IRQHandler+0xa0>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a950:	f003 0302 	and.w	r3, r3, #2
 800a954:	2b02      	cmp	r3, #2
 800a956:	bf0c      	ite	eq
 800a958:	2301      	moveq	r3, #1
 800a95a:	2300      	movne	r3, #0
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d017      	beq.n	800a992 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7f8 f880 	bl	8002a68 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	2b10      	cmp	r3, #16
 800a96e:	d108      	bne.n	800a982 <HAL_NAND_IRQHandler+0xc4>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f022 0202 	bic.w	r2, r2, #2
 800a97e:	605a      	str	r2, [r3, #4]
 800a980:	e007      	b.n	800a992 <HAL_NAND_IRQHandler+0xd4>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f022 0202 	bic.w	r2, r2, #2
 800a990:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	2b10      	cmp	r3, #16
 800a998:	d10a      	bne.n	800a9b0 <HAL_NAND_IRQHandler+0xf2>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	f003 0304 	and.w	r3, r3, #4
 800a9a4:	2b04      	cmp	r3, #4
 800a9a6:	bf0c      	ite	eq
 800a9a8:	2301      	moveq	r3, #1
 800a9aa:	2300      	movne	r3, #0
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	e009      	b.n	800a9c4 <HAL_NAND_IRQHandler+0x106>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b6:	f003 0304 	and.w	r3, r3, #4
 800a9ba:	2b04      	cmp	r3, #4
 800a9bc:	bf0c      	ite	eq
 800a9be:	2301      	moveq	r3, #1
 800a9c0:	2300      	movne	r3, #0
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d017      	beq.n	800a9f8 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f7f8 f84d 	bl	8002a68 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	2b10      	cmp	r3, #16
 800a9d4:	d108      	bne.n	800a9e8 <HAL_NAND_IRQHandler+0x12a>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f022 0204 	bic.w	r2, r2, #4
 800a9e4:	605a      	str	r2, [r3, #4]
 800a9e6:	e007      	b.n	800a9f8 <HAL_NAND_IRQHandler+0x13a>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f022 0204 	bic.w	r2, r2, #4
 800a9f6:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	2b10      	cmp	r3, #16
 800a9fe:	d10a      	bne.n	800aa16 <HAL_NAND_IRQHandler+0x158>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa0a:	2b40      	cmp	r3, #64	; 0x40
 800aa0c:	bf0c      	ite	eq
 800aa0e:	2301      	moveq	r3, #1
 800aa10:	2300      	movne	r3, #0
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	e009      	b.n	800aa2a <HAL_NAND_IRQHandler+0x16c>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa20:	2b40      	cmp	r3, #64	; 0x40
 800aa22:	bf0c      	ite	eq
 800aa24:	2301      	moveq	r3, #1
 800aa26:	2300      	movne	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d017      	beq.n	800aa5e <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7f8 f81a 	bl	8002a68 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	2b10      	cmp	r3, #16
 800aa3a:	d108      	bne.n	800aa4e <HAL_NAND_IRQHandler+0x190>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa4a:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 800aa4c:	e007      	b.n	800aa5e <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa5c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800aa5e:	bf00      	nop
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <HAL_NAND_Reset>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b085      	sub	sp, #20
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d101      	bne.n	800aa7e <HAL_NAND_Reset+0x18>
  {
    return HAL_BUSY;
 800aa7a:	2302      	movs	r3, #2
 800aa7c:	e027      	b.n	800aace <HAL_NAND_Reset+0x68>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d120      	bne.n	800aacc <HAL_NAND_Reset+0x66>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d101      	bne.n	800aa98 <HAL_NAND_Reset+0x32>
 800aa94:	2302      	movs	r3, #2
 800aa96:	e01a      	b.n	800aace <HAL_NAND_Reset+0x68>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    else
    {
      deviceaddress = NAND_DEVICE2;
    }
#else
    deviceaddress = NAND_DEVICE;
 800aaa8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800aaac:	60fb      	str	r3, [r7, #12]
#endif

    /* Send NAND reset command */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = 0xFF;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aab4:	22ff      	movs	r2, #255	; 0xff
 800aab6:	701a      	strb	r2, [r3, #0]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	e000      	b.n	800aace <HAL_NAND_Reset+0x68>
    return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1

}
 800aace:	4618      	mov	r0, r3
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <HAL_NAND_ECC_Disable>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_ECC_Disable(NAND_HandleTypeDef *hnand)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b082      	sub	sp, #8
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d101      	bne.n	800aaf2 <HAL_NAND_ECC_Disable+0x18>
  {
    return HAL_BUSY;
 800aaee:	2302      	movs	r3, #2
 800aaf0:	e018      	b.n	800ab24 <HAL_NAND_ECC_Disable+0x4a>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d111      	bne.n	800ab22 <HAL_NAND_ECC_Disable+0x48>
  {
    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2202      	movs	r2, #2
 800ab02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable ECC feature */
    (void)FMC_NAND_ECC_Disable(hnand->Instance, hnand->Init.NandBank);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	4619      	mov	r1, r3
 800ab10:	4610      	mov	r0, r2
 800ab12:	f003 fbd5 	bl	800e2c0 <FSMC_NAND_ECC_Disable>

    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_READY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	e000      	b.n	800ab24 <HAL_NAND_ECC_Disable+0x4a>
    return HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  return hnand->State;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ab3a:	b2db      	uxtb	r3, r3
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 800ab50:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ab54:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab5c:	2270      	movs	r2, #112	; 0x70
 800ab5e:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e007      	b.n	800ab86 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 800ab80:	2340      	movs	r3, #64	; 0x40
 800ab82:	e000      	b.n	800ab86 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 800ab84:	2300      	movs	r3, #0
  }
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
	...

0800ab94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e267      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d075      	beq.n	800ac9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800abb2:	4b88      	ldr	r3, [pc, #544]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	f003 030c 	and.w	r3, r3, #12
 800abba:	2b04      	cmp	r3, #4
 800abbc:	d00c      	beq.n	800abd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800abbe:	4b85      	ldr	r3, [pc, #532]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800abc6:	2b08      	cmp	r3, #8
 800abc8:	d112      	bne.n	800abf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800abca:	4b82      	ldr	r3, [pc, #520]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abd6:	d10b      	bne.n	800abf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abd8:	4b7e      	ldr	r3, [pc, #504]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d05b      	beq.n	800ac9c <HAL_RCC_OscConfig+0x108>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d157      	bne.n	800ac9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e242      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf8:	d106      	bne.n	800ac08 <HAL_RCC_OscConfig+0x74>
 800abfa:	4b76      	ldr	r3, [pc, #472]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a75      	ldr	r2, [pc, #468]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ac00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	e01d      	b.n	800ac44 <HAL_RCC_OscConfig+0xb0>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac10:	d10c      	bne.n	800ac2c <HAL_RCC_OscConfig+0x98>
 800ac12:	4b70      	ldr	r3, [pc, #448]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a6f      	ldr	r2, [pc, #444]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ac18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	4b6d      	ldr	r3, [pc, #436]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a6c      	ldr	r2, [pc, #432]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ac24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac28:	6013      	str	r3, [r2, #0]
 800ac2a:	e00b      	b.n	800ac44 <HAL_RCC_OscConfig+0xb0>
 800ac2c:	4b69      	ldr	r3, [pc, #420]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a68      	ldr	r2, [pc, #416]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ac32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac36:	6013      	str	r3, [r2, #0]
 800ac38:	4b66      	ldr	r3, [pc, #408]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a65      	ldr	r2, [pc, #404]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ac3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d013      	beq.n	800ac74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac4c:	f7fe ff06 	bl	8009a5c <HAL_GetTick>
 800ac50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac52:	e008      	b.n	800ac66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ac54:	f7fe ff02 	bl	8009a5c <HAL_GetTick>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	2b64      	cmp	r3, #100	; 0x64
 800ac60:	d901      	bls.n	800ac66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e207      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac66:	4b5b      	ldr	r3, [pc, #364]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d0f0      	beq.n	800ac54 <HAL_RCC_OscConfig+0xc0>
 800ac72:	e014      	b.n	800ac9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac74:	f7fe fef2 	bl	8009a5c <HAL_GetTick>
 800ac78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac7a:	e008      	b.n	800ac8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ac7c:	f7fe feee 	bl	8009a5c <HAL_GetTick>
 800ac80:	4602      	mov	r2, r0
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	2b64      	cmp	r3, #100	; 0x64
 800ac88:	d901      	bls.n	800ac8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e1f3      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac8e:	4b51      	ldr	r3, [pc, #324]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1f0      	bne.n	800ac7c <HAL_RCC_OscConfig+0xe8>
 800ac9a:	e000      	b.n	800ac9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 0302 	and.w	r3, r3, #2
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d063      	beq.n	800ad72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800acaa:	4b4a      	ldr	r3, [pc, #296]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	f003 030c 	and.w	r3, r3, #12
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00b      	beq.n	800acce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800acb6:	4b47      	ldr	r3, [pc, #284]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800acbe:	2b08      	cmp	r3, #8
 800acc0:	d11c      	bne.n	800acfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800acc2:	4b44      	ldr	r3, [pc, #272]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acca:	2b00      	cmp	r3, #0
 800accc:	d116      	bne.n	800acfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800acce:	4b41      	ldr	r3, [pc, #260]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0302 	and.w	r3, r3, #2
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d005      	beq.n	800ace6 <HAL_RCC_OscConfig+0x152>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d001      	beq.n	800ace6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e1c7      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ace6:	4b3b      	ldr	r3, [pc, #236]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	4937      	ldr	r1, [pc, #220]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800acfa:	e03a      	b.n	800ad72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d020      	beq.n	800ad46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad04:	4b34      	ldr	r3, [pc, #208]	; (800add8 <HAL_RCC_OscConfig+0x244>)
 800ad06:	2201      	movs	r2, #1
 800ad08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad0a:	f7fe fea7 	bl	8009a5c <HAL_GetTick>
 800ad0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad10:	e008      	b.n	800ad24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ad12:	f7fe fea3 	bl	8009a5c <HAL_GetTick>
 800ad16:	4602      	mov	r2, r0
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d901      	bls.n	800ad24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e1a8      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad24:	4b2b      	ldr	r3, [pc, #172]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0302 	and.w	r3, r3, #2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d0f0      	beq.n	800ad12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad30:	4b28      	ldr	r3, [pc, #160]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	4925      	ldr	r1, [pc, #148]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ad40:	4313      	orrs	r3, r2
 800ad42:	600b      	str	r3, [r1, #0]
 800ad44:	e015      	b.n	800ad72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad46:	4b24      	ldr	r3, [pc, #144]	; (800add8 <HAL_RCC_OscConfig+0x244>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad4c:	f7fe fe86 	bl	8009a5c <HAL_GetTick>
 800ad50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad52:	e008      	b.n	800ad66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ad54:	f7fe fe82 	bl	8009a5c <HAL_GetTick>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d901      	bls.n	800ad66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ad62:	2303      	movs	r3, #3
 800ad64:	e187      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad66:	4b1b      	ldr	r3, [pc, #108]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0302 	and.w	r3, r3, #2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1f0      	bne.n	800ad54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 0308 	and.w	r3, r3, #8
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d036      	beq.n	800adec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	695b      	ldr	r3, [r3, #20]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d016      	beq.n	800adb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad86:	4b15      	ldr	r3, [pc, #84]	; (800addc <HAL_RCC_OscConfig+0x248>)
 800ad88:	2201      	movs	r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad8c:	f7fe fe66 	bl	8009a5c <HAL_GetTick>
 800ad90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad92:	e008      	b.n	800ada6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ad94:	f7fe fe62 	bl	8009a5c <HAL_GetTick>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d901      	bls.n	800ada6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ada2:	2303      	movs	r3, #3
 800ada4:	e167      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ada6:	4b0b      	ldr	r3, [pc, #44]	; (800add4 <HAL_RCC_OscConfig+0x240>)
 800ada8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adaa:	f003 0302 	and.w	r3, r3, #2
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d0f0      	beq.n	800ad94 <HAL_RCC_OscConfig+0x200>
 800adb2:	e01b      	b.n	800adec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800adb4:	4b09      	ldr	r3, [pc, #36]	; (800addc <HAL_RCC_OscConfig+0x248>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800adba:	f7fe fe4f 	bl	8009a5c <HAL_GetTick>
 800adbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800adc0:	e00e      	b.n	800ade0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800adc2:	f7fe fe4b 	bl	8009a5c <HAL_GetTick>
 800adc6:	4602      	mov	r2, r0
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d907      	bls.n	800ade0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800add0:	2303      	movs	r3, #3
 800add2:	e150      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
 800add4:	40023800 	.word	0x40023800
 800add8:	42470000 	.word	0x42470000
 800addc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ade0:	4b88      	ldr	r3, [pc, #544]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800ade2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1ea      	bne.n	800adc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f000 8097 	beq.w	800af28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800adfa:	2300      	movs	r3, #0
 800adfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800adfe:	4b81      	ldr	r3, [pc, #516]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800ae00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10f      	bne.n	800ae2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60bb      	str	r3, [r7, #8]
 800ae0e:	4b7d      	ldr	r3, [pc, #500]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800ae10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae12:	4a7c      	ldr	r2, [pc, #496]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800ae14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae18:	6413      	str	r3, [r2, #64]	; 0x40
 800ae1a:	4b7a      	ldr	r3, [pc, #488]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800ae1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae22:	60bb      	str	r3, [r7, #8]
 800ae24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae26:	2301      	movs	r3, #1
 800ae28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae2a:	4b77      	ldr	r3, [pc, #476]	; (800b008 <HAL_RCC_OscConfig+0x474>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d118      	bne.n	800ae68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ae36:	4b74      	ldr	r3, [pc, #464]	; (800b008 <HAL_RCC_OscConfig+0x474>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a73      	ldr	r2, [pc, #460]	; (800b008 <HAL_RCC_OscConfig+0x474>)
 800ae3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae42:	f7fe fe0b 	bl	8009a5c <HAL_GetTick>
 800ae46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae48:	e008      	b.n	800ae5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae4a:	f7fe fe07 	bl	8009a5c <HAL_GetTick>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	2b02      	cmp	r3, #2
 800ae56:	d901      	bls.n	800ae5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	e10c      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae5c:	4b6a      	ldr	r3, [pc, #424]	; (800b008 <HAL_RCC_OscConfig+0x474>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d0f0      	beq.n	800ae4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d106      	bne.n	800ae7e <HAL_RCC_OscConfig+0x2ea>
 800ae70:	4b64      	ldr	r3, [pc, #400]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800ae72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae74:	4a63      	ldr	r2, [pc, #396]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800ae76:	f043 0301 	orr.w	r3, r3, #1
 800ae7a:	6713      	str	r3, [r2, #112]	; 0x70
 800ae7c:	e01c      	b.n	800aeb8 <HAL_RCC_OscConfig+0x324>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d10c      	bne.n	800aea0 <HAL_RCC_OscConfig+0x30c>
 800ae86:	4b5f      	ldr	r3, [pc, #380]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800ae88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae8a:	4a5e      	ldr	r2, [pc, #376]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800ae8c:	f043 0304 	orr.w	r3, r3, #4
 800ae90:	6713      	str	r3, [r2, #112]	; 0x70
 800ae92:	4b5c      	ldr	r3, [pc, #368]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800ae94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae96:	4a5b      	ldr	r2, [pc, #364]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800ae98:	f043 0301 	orr.w	r3, r3, #1
 800ae9c:	6713      	str	r3, [r2, #112]	; 0x70
 800ae9e:	e00b      	b.n	800aeb8 <HAL_RCC_OscConfig+0x324>
 800aea0:	4b58      	ldr	r3, [pc, #352]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800aea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea4:	4a57      	ldr	r2, [pc, #348]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800aea6:	f023 0301 	bic.w	r3, r3, #1
 800aeaa:	6713      	str	r3, [r2, #112]	; 0x70
 800aeac:	4b55      	ldr	r3, [pc, #340]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800aeae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeb0:	4a54      	ldr	r2, [pc, #336]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800aeb2:	f023 0304 	bic.w	r3, r3, #4
 800aeb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d015      	beq.n	800aeec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aec0:	f7fe fdcc 	bl	8009a5c <HAL_GetTick>
 800aec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aec6:	e00a      	b.n	800aede <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aec8:	f7fe fdc8 	bl	8009a5c <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d901      	bls.n	800aede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e0cb      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aede:	4b49      	ldr	r3, [pc, #292]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800aee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aee2:	f003 0302 	and.w	r3, r3, #2
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d0ee      	beq.n	800aec8 <HAL_RCC_OscConfig+0x334>
 800aeea:	e014      	b.n	800af16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aeec:	f7fe fdb6 	bl	8009a5c <HAL_GetTick>
 800aef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aef2:	e00a      	b.n	800af0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aef4:	f7fe fdb2 	bl	8009a5c <HAL_GetTick>
 800aef8:	4602      	mov	r2, r0
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	f241 3288 	movw	r2, #5000	; 0x1388
 800af02:	4293      	cmp	r3, r2
 800af04:	d901      	bls.n	800af0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e0b5      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af0a:	4b3e      	ldr	r3, [pc, #248]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800af0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af0e:	f003 0302 	and.w	r3, r3, #2
 800af12:	2b00      	cmp	r3, #0
 800af14:	d1ee      	bne.n	800aef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d105      	bne.n	800af28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af1c:	4b39      	ldr	r3, [pc, #228]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800af1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af20:	4a38      	ldr	r2, [pc, #224]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800af22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 80a1 	beq.w	800b074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800af32:	4b34      	ldr	r3, [pc, #208]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	f003 030c 	and.w	r3, r3, #12
 800af3a:	2b08      	cmp	r3, #8
 800af3c:	d05c      	beq.n	800aff8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	2b02      	cmp	r3, #2
 800af44:	d141      	bne.n	800afca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af46:	4b31      	ldr	r3, [pc, #196]	; (800b00c <HAL_RCC_OscConfig+0x478>)
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af4c:	f7fe fd86 	bl	8009a5c <HAL_GetTick>
 800af50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af52:	e008      	b.n	800af66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af54:	f7fe fd82 	bl	8009a5c <HAL_GetTick>
 800af58:	4602      	mov	r2, r0
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d901      	bls.n	800af66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	e087      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af66:	4b27      	ldr	r3, [pc, #156]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1f0      	bne.n	800af54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	69da      	ldr	r2, [r3, #28]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	431a      	orrs	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af80:	019b      	lsls	r3, r3, #6
 800af82:	431a      	orrs	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af88:	085b      	lsrs	r3, r3, #1
 800af8a:	3b01      	subs	r3, #1
 800af8c:	041b      	lsls	r3, r3, #16
 800af8e:	431a      	orrs	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af94:	061b      	lsls	r3, r3, #24
 800af96:	491b      	ldr	r1, [pc, #108]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800af98:	4313      	orrs	r3, r2
 800af9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af9c:	4b1b      	ldr	r3, [pc, #108]	; (800b00c <HAL_RCC_OscConfig+0x478>)
 800af9e:	2201      	movs	r2, #1
 800afa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afa2:	f7fe fd5b 	bl	8009a5c <HAL_GetTick>
 800afa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afa8:	e008      	b.n	800afbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afaa:	f7fe fd57 	bl	8009a5c <HAL_GetTick>
 800afae:	4602      	mov	r2, r0
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d901      	bls.n	800afbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800afb8:	2303      	movs	r3, #3
 800afba:	e05c      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afbc:	4b11      	ldr	r3, [pc, #68]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d0f0      	beq.n	800afaa <HAL_RCC_OscConfig+0x416>
 800afc8:	e054      	b.n	800b074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afca:	4b10      	ldr	r3, [pc, #64]	; (800b00c <HAL_RCC_OscConfig+0x478>)
 800afcc:	2200      	movs	r2, #0
 800afce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afd0:	f7fe fd44 	bl	8009a5c <HAL_GetTick>
 800afd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800afd6:	e008      	b.n	800afea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afd8:	f7fe fd40 	bl	8009a5c <HAL_GetTick>
 800afdc:	4602      	mov	r2, r0
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d901      	bls.n	800afea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e045      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800afea:	4b06      	ldr	r3, [pc, #24]	; (800b004 <HAL_RCC_OscConfig+0x470>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1f0      	bne.n	800afd8 <HAL_RCC_OscConfig+0x444>
 800aff6:	e03d      	b.n	800b074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d107      	bne.n	800b010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e038      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
 800b004:	40023800 	.word	0x40023800
 800b008:	40007000 	.word	0x40007000
 800b00c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b010:	4b1b      	ldr	r3, [pc, #108]	; (800b080 <HAL_RCC_OscConfig+0x4ec>)
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d028      	beq.n	800b070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b028:	429a      	cmp	r2, r3
 800b02a:	d121      	bne.n	800b070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b036:	429a      	cmp	r2, r3
 800b038:	d11a      	bne.n	800b070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b040:	4013      	ands	r3, r2
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b048:	4293      	cmp	r3, r2
 800b04a:	d111      	bne.n	800b070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b056:	085b      	lsrs	r3, r3, #1
 800b058:	3b01      	subs	r3, #1
 800b05a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d107      	bne.n	800b070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d001      	beq.n	800b074 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e000      	b.n	800b076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3718      	adds	r7, #24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	40023800 	.word	0x40023800

0800b084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d101      	bne.n	800b098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e0cc      	b.n	800b232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b098:	4b68      	ldr	r3, [pc, #416]	; (800b23c <HAL_RCC_ClockConfig+0x1b8>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0307 	and.w	r3, r3, #7
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d90c      	bls.n	800b0c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0a6:	4b65      	ldr	r3, [pc, #404]	; (800b23c <HAL_RCC_ClockConfig+0x1b8>)
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	b2d2      	uxtb	r2, r2
 800b0ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0ae:	4b63      	ldr	r3, [pc, #396]	; (800b23c <HAL_RCC_ClockConfig+0x1b8>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0307 	and.w	r3, r3, #7
 800b0b6:	683a      	ldr	r2, [r7, #0]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d001      	beq.n	800b0c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e0b8      	b.n	800b232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 0302 	and.w	r3, r3, #2
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d020      	beq.n	800b10e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f003 0304 	and.w	r3, r3, #4
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d005      	beq.n	800b0e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b0d8:	4b59      	ldr	r3, [pc, #356]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	4a58      	ldr	r2, [pc, #352]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b0de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b0e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0308 	and.w	r3, r3, #8
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d005      	beq.n	800b0fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b0f0:	4b53      	ldr	r3, [pc, #332]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	4a52      	ldr	r2, [pc, #328]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b0f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b0fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0fc:	4b50      	ldr	r3, [pc, #320]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	494d      	ldr	r1, [pc, #308]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b10a:	4313      	orrs	r3, r2
 800b10c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	2b00      	cmp	r3, #0
 800b118:	d044      	beq.n	800b1a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d107      	bne.n	800b132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b122:	4b47      	ldr	r3, [pc, #284]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d119      	bne.n	800b162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e07f      	b.n	800b232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	2b02      	cmp	r3, #2
 800b138:	d003      	beq.n	800b142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d107      	bne.n	800b152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b142:	4b3f      	ldr	r3, [pc, #252]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d109      	bne.n	800b162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e06f      	b.n	800b232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b152:	4b3b      	ldr	r3, [pc, #236]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 0302 	and.w	r3, r3, #2
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d101      	bne.n	800b162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	e067      	b.n	800b232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b162:	4b37      	ldr	r3, [pc, #220]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	f023 0203 	bic.w	r2, r3, #3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	4934      	ldr	r1, [pc, #208]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b170:	4313      	orrs	r3, r2
 800b172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b174:	f7fe fc72 	bl	8009a5c <HAL_GetTick>
 800b178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b17a:	e00a      	b.n	800b192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b17c:	f7fe fc6e 	bl	8009a5c <HAL_GetTick>
 800b180:	4602      	mov	r2, r0
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	f241 3288 	movw	r2, #5000	; 0x1388
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d901      	bls.n	800b192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b18e:	2303      	movs	r3, #3
 800b190:	e04f      	b.n	800b232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b192:	4b2b      	ldr	r3, [pc, #172]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	f003 020c 	and.w	r2, r3, #12
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d1eb      	bne.n	800b17c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b1a4:	4b25      	ldr	r3, [pc, #148]	; (800b23c <HAL_RCC_ClockConfig+0x1b8>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 0307 	and.w	r3, r3, #7
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d20c      	bcs.n	800b1cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1b2:	4b22      	ldr	r3, [pc, #136]	; (800b23c <HAL_RCC_ClockConfig+0x1b8>)
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	b2d2      	uxtb	r2, r2
 800b1b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1ba:	4b20      	ldr	r3, [pc, #128]	; (800b23c <HAL_RCC_ClockConfig+0x1b8>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 0307 	and.w	r3, r3, #7
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d001      	beq.n	800b1cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e032      	b.n	800b232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d008      	beq.n	800b1ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b1d8:	4b19      	ldr	r3, [pc, #100]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	4916      	ldr	r1, [pc, #88]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 0308 	and.w	r3, r3, #8
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d009      	beq.n	800b20a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b1f6:	4b12      	ldr	r3, [pc, #72]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	490e      	ldr	r1, [pc, #56]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b206:	4313      	orrs	r3, r2
 800b208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b20a:	f000 f821 	bl	800b250 <HAL_RCC_GetSysClockFreq>
 800b20e:	4602      	mov	r2, r0
 800b210:	4b0b      	ldr	r3, [pc, #44]	; (800b240 <HAL_RCC_ClockConfig+0x1bc>)
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	091b      	lsrs	r3, r3, #4
 800b216:	f003 030f 	and.w	r3, r3, #15
 800b21a:	490a      	ldr	r1, [pc, #40]	; (800b244 <HAL_RCC_ClockConfig+0x1c0>)
 800b21c:	5ccb      	ldrb	r3, [r1, r3]
 800b21e:	fa22 f303 	lsr.w	r3, r2, r3
 800b222:	4a09      	ldr	r2, [pc, #36]	; (800b248 <HAL_RCC_ClockConfig+0x1c4>)
 800b224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b226:	4b09      	ldr	r3, [pc, #36]	; (800b24c <HAL_RCC_ClockConfig+0x1c8>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7f9 f9dc 	bl	80045e8 <HAL_InitTick>

  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	40023c00 	.word	0x40023c00
 800b240:	40023800 	.word	0x40023800
 800b244:	080168d8 	.word	0x080168d8
 800b248:	20000098 	.word	0x20000098
 800b24c:	2000009c 	.word	0x2000009c

0800b250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b254:	b094      	sub	sp, #80	; 0x50
 800b256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b258:	2300      	movs	r3, #0
 800b25a:	647b      	str	r3, [r7, #68]	; 0x44
 800b25c:	2300      	movs	r3, #0
 800b25e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b260:	2300      	movs	r3, #0
 800b262:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b264:	2300      	movs	r3, #0
 800b266:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b268:	4b79      	ldr	r3, [pc, #484]	; (800b450 <HAL_RCC_GetSysClockFreq+0x200>)
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	f003 030c 	and.w	r3, r3, #12
 800b270:	2b08      	cmp	r3, #8
 800b272:	d00d      	beq.n	800b290 <HAL_RCC_GetSysClockFreq+0x40>
 800b274:	2b08      	cmp	r3, #8
 800b276:	f200 80e1 	bhi.w	800b43c <HAL_RCC_GetSysClockFreq+0x1ec>
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d002      	beq.n	800b284 <HAL_RCC_GetSysClockFreq+0x34>
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d003      	beq.n	800b28a <HAL_RCC_GetSysClockFreq+0x3a>
 800b282:	e0db      	b.n	800b43c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b284:	4b73      	ldr	r3, [pc, #460]	; (800b454 <HAL_RCC_GetSysClockFreq+0x204>)
 800b286:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b288:	e0db      	b.n	800b442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b28a:	4b73      	ldr	r3, [pc, #460]	; (800b458 <HAL_RCC_GetSysClockFreq+0x208>)
 800b28c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b28e:	e0d8      	b.n	800b442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b290:	4b6f      	ldr	r3, [pc, #444]	; (800b450 <HAL_RCC_GetSysClockFreq+0x200>)
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b298:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b29a:	4b6d      	ldr	r3, [pc, #436]	; (800b450 <HAL_RCC_GetSysClockFreq+0x200>)
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d063      	beq.n	800b36e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b2a6:	4b6a      	ldr	r3, [pc, #424]	; (800b450 <HAL_RCC_GetSysClockFreq+0x200>)
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	099b      	lsrs	r3, r3, #6
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2b8:	633b      	str	r3, [r7, #48]	; 0x30
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b2be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b2c2:	4622      	mov	r2, r4
 800b2c4:	462b      	mov	r3, r5
 800b2c6:	f04f 0000 	mov.w	r0, #0
 800b2ca:	f04f 0100 	mov.w	r1, #0
 800b2ce:	0159      	lsls	r1, r3, #5
 800b2d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b2d4:	0150      	lsls	r0, r2, #5
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4621      	mov	r1, r4
 800b2dc:	1a51      	subs	r1, r2, r1
 800b2de:	6139      	str	r1, [r7, #16]
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	eb63 0301 	sbc.w	r3, r3, r1
 800b2e6:	617b      	str	r3, [r7, #20]
 800b2e8:	f04f 0200 	mov.w	r2, #0
 800b2ec:	f04f 0300 	mov.w	r3, #0
 800b2f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b2f4:	4659      	mov	r1, fp
 800b2f6:	018b      	lsls	r3, r1, #6
 800b2f8:	4651      	mov	r1, sl
 800b2fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b2fe:	4651      	mov	r1, sl
 800b300:	018a      	lsls	r2, r1, #6
 800b302:	4651      	mov	r1, sl
 800b304:	ebb2 0801 	subs.w	r8, r2, r1
 800b308:	4659      	mov	r1, fp
 800b30a:	eb63 0901 	sbc.w	r9, r3, r1
 800b30e:	f04f 0200 	mov.w	r2, #0
 800b312:	f04f 0300 	mov.w	r3, #0
 800b316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b31a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b31e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b322:	4690      	mov	r8, r2
 800b324:	4699      	mov	r9, r3
 800b326:	4623      	mov	r3, r4
 800b328:	eb18 0303 	adds.w	r3, r8, r3
 800b32c:	60bb      	str	r3, [r7, #8]
 800b32e:	462b      	mov	r3, r5
 800b330:	eb49 0303 	adc.w	r3, r9, r3
 800b334:	60fb      	str	r3, [r7, #12]
 800b336:	f04f 0200 	mov.w	r2, #0
 800b33a:	f04f 0300 	mov.w	r3, #0
 800b33e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b342:	4629      	mov	r1, r5
 800b344:	024b      	lsls	r3, r1, #9
 800b346:	4621      	mov	r1, r4
 800b348:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b34c:	4621      	mov	r1, r4
 800b34e:	024a      	lsls	r2, r1, #9
 800b350:	4610      	mov	r0, r2
 800b352:	4619      	mov	r1, r3
 800b354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b356:	2200      	movs	r2, #0
 800b358:	62bb      	str	r3, [r7, #40]	; 0x28
 800b35a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b35c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b360:	f7f5 fae4 	bl	800092c <__aeabi_uldivmod>
 800b364:	4602      	mov	r2, r0
 800b366:	460b      	mov	r3, r1
 800b368:	4613      	mov	r3, r2
 800b36a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b36c:	e058      	b.n	800b420 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b36e:	4b38      	ldr	r3, [pc, #224]	; (800b450 <HAL_RCC_GetSysClockFreq+0x200>)
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	099b      	lsrs	r3, r3, #6
 800b374:	2200      	movs	r2, #0
 800b376:	4618      	mov	r0, r3
 800b378:	4611      	mov	r1, r2
 800b37a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b37e:	623b      	str	r3, [r7, #32]
 800b380:	2300      	movs	r3, #0
 800b382:	627b      	str	r3, [r7, #36]	; 0x24
 800b384:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b388:	4642      	mov	r2, r8
 800b38a:	464b      	mov	r3, r9
 800b38c:	f04f 0000 	mov.w	r0, #0
 800b390:	f04f 0100 	mov.w	r1, #0
 800b394:	0159      	lsls	r1, r3, #5
 800b396:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b39a:	0150      	lsls	r0, r2, #5
 800b39c:	4602      	mov	r2, r0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	4641      	mov	r1, r8
 800b3a2:	ebb2 0a01 	subs.w	sl, r2, r1
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	eb63 0b01 	sbc.w	fp, r3, r1
 800b3ac:	f04f 0200 	mov.w	r2, #0
 800b3b0:	f04f 0300 	mov.w	r3, #0
 800b3b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b3b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b3bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b3c0:	ebb2 040a 	subs.w	r4, r2, sl
 800b3c4:	eb63 050b 	sbc.w	r5, r3, fp
 800b3c8:	f04f 0200 	mov.w	r2, #0
 800b3cc:	f04f 0300 	mov.w	r3, #0
 800b3d0:	00eb      	lsls	r3, r5, #3
 800b3d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b3d6:	00e2      	lsls	r2, r4, #3
 800b3d8:	4614      	mov	r4, r2
 800b3da:	461d      	mov	r5, r3
 800b3dc:	4643      	mov	r3, r8
 800b3de:	18e3      	adds	r3, r4, r3
 800b3e0:	603b      	str	r3, [r7, #0]
 800b3e2:	464b      	mov	r3, r9
 800b3e4:	eb45 0303 	adc.w	r3, r5, r3
 800b3e8:	607b      	str	r3, [r7, #4]
 800b3ea:	f04f 0200 	mov.w	r2, #0
 800b3ee:	f04f 0300 	mov.w	r3, #0
 800b3f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	028b      	lsls	r3, r1, #10
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b400:	4621      	mov	r1, r4
 800b402:	028a      	lsls	r2, r1, #10
 800b404:	4610      	mov	r0, r2
 800b406:	4619      	mov	r1, r3
 800b408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b40a:	2200      	movs	r2, #0
 800b40c:	61bb      	str	r3, [r7, #24]
 800b40e:	61fa      	str	r2, [r7, #28]
 800b410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b414:	f7f5 fa8a 	bl	800092c <__aeabi_uldivmod>
 800b418:	4602      	mov	r2, r0
 800b41a:	460b      	mov	r3, r1
 800b41c:	4613      	mov	r3, r2
 800b41e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b420:	4b0b      	ldr	r3, [pc, #44]	; (800b450 <HAL_RCC_GetSysClockFreq+0x200>)
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	0c1b      	lsrs	r3, r3, #16
 800b426:	f003 0303 	and.w	r3, r3, #3
 800b42a:	3301      	adds	r3, #1
 800b42c:	005b      	lsls	r3, r3, #1
 800b42e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b434:	fbb2 f3f3 	udiv	r3, r2, r3
 800b438:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b43a:	e002      	b.n	800b442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b43c:	4b05      	ldr	r3, [pc, #20]	; (800b454 <HAL_RCC_GetSysClockFreq+0x204>)
 800b43e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b440:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b444:	4618      	mov	r0, r3
 800b446:	3750      	adds	r7, #80	; 0x50
 800b448:	46bd      	mov	sp, r7
 800b44a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b44e:	bf00      	nop
 800b450:	40023800 	.word	0x40023800
 800b454:	00f42400 	.word	0x00f42400
 800b458:	007a1200 	.word	0x007a1200

0800b45c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b45c:	b480      	push	{r7}
 800b45e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b460:	4b03      	ldr	r3, [pc, #12]	; (800b470 <HAL_RCC_GetHCLKFreq+0x14>)
 800b462:	681b      	ldr	r3, [r3, #0]
}
 800b464:	4618      	mov	r0, r3
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	20000098 	.word	0x20000098

0800b474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b478:	f7ff fff0 	bl	800b45c <HAL_RCC_GetHCLKFreq>
 800b47c:	4602      	mov	r2, r0
 800b47e:	4b05      	ldr	r3, [pc, #20]	; (800b494 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	0a9b      	lsrs	r3, r3, #10
 800b484:	f003 0307 	and.w	r3, r3, #7
 800b488:	4903      	ldr	r1, [pc, #12]	; (800b498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b48a:	5ccb      	ldrb	r3, [r1, r3]
 800b48c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b490:	4618      	mov	r0, r3
 800b492:	bd80      	pop	{r7, pc}
 800b494:	40023800 	.word	0x40023800
 800b498:	080168e8 	.word	0x080168e8

0800b49c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b4a0:	f7ff ffdc 	bl	800b45c <HAL_RCC_GetHCLKFreq>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	4b05      	ldr	r3, [pc, #20]	; (800b4bc <HAL_RCC_GetPCLK2Freq+0x20>)
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	0b5b      	lsrs	r3, r3, #13
 800b4ac:	f003 0307 	and.w	r3, r3, #7
 800b4b0:	4903      	ldr	r1, [pc, #12]	; (800b4c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b4b2:	5ccb      	ldrb	r3, [r1, r3]
 800b4b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	40023800 	.word	0x40023800
 800b4c0:	080168e8 	.word	0x080168e8

0800b4c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	220f      	movs	r2, #15
 800b4d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b4d4:	4b12      	ldr	r3, [pc, #72]	; (800b520 <HAL_RCC_GetClockConfig+0x5c>)
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	f003 0203 	and.w	r2, r3, #3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b4e0:	4b0f      	ldr	r3, [pc, #60]	; (800b520 <HAL_RCC_GetClockConfig+0x5c>)
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b4ec:	4b0c      	ldr	r3, [pc, #48]	; (800b520 <HAL_RCC_GetClockConfig+0x5c>)
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b4f8:	4b09      	ldr	r3, [pc, #36]	; (800b520 <HAL_RCC_GetClockConfig+0x5c>)
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	08db      	lsrs	r3, r3, #3
 800b4fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b506:	4b07      	ldr	r3, [pc, #28]	; (800b524 <HAL_RCC_GetClockConfig+0x60>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0207 	and.w	r2, r3, #7
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	601a      	str	r2, [r3, #0]
}
 800b512:	bf00      	nop
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	40023800 	.word	0x40023800
 800b524:	40023c00 	.word	0x40023c00

0800b528 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b534:	2300      	movs	r3, #0
 800b536:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0301 	and.w	r3, r3, #1
 800b540:	2b00      	cmp	r3, #0
 800b542:	d105      	bne.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d035      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b550:	4b62      	ldr	r3, [pc, #392]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b552:	2200      	movs	r2, #0
 800b554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b556:	f7fe fa81 	bl	8009a5c <HAL_GetTick>
 800b55a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b55c:	e008      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b55e:	f7fe fa7d 	bl	8009a5c <HAL_GetTick>
 800b562:	4602      	mov	r2, r0
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d901      	bls.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b56c:	2303      	movs	r3, #3
 800b56e:	e0b0      	b.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b570:	4b5b      	ldr	r3, [pc, #364]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1f0      	bne.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	019a      	lsls	r2, r3, #6
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	071b      	lsls	r3, r3, #28
 800b588:	4955      	ldr	r1, [pc, #340]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b58a:	4313      	orrs	r3, r2
 800b58c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b590:	4b52      	ldr	r3, [pc, #328]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b592:	2201      	movs	r2, #1
 800b594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b596:	f7fe fa61 	bl	8009a5c <HAL_GetTick>
 800b59a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b59c:	e008      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b59e:	f7fe fa5d 	bl	8009a5c <HAL_GetTick>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d901      	bls.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	e090      	b.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b5b0:	4b4b      	ldr	r3, [pc, #300]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d0f0      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 0302 	and.w	r3, r3, #2
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f000 8083 	beq.w	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60fb      	str	r3, [r7, #12]
 800b5ce:	4b44      	ldr	r3, [pc, #272]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d2:	4a43      	ldr	r2, [pc, #268]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5d8:	6413      	str	r3, [r2, #64]	; 0x40
 800b5da:	4b41      	ldr	r3, [pc, #260]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5e2:	60fb      	str	r3, [r7, #12]
 800b5e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b5e6:	4b3f      	ldr	r3, [pc, #252]	; (800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a3e      	ldr	r2, [pc, #248]	; (800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b5ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b5f2:	f7fe fa33 	bl	8009a5c <HAL_GetTick>
 800b5f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b5f8:	e008      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b5fa:	f7fe fa2f 	bl	8009a5c <HAL_GetTick>
 800b5fe:	4602      	mov	r2, r0
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	2b02      	cmp	r3, #2
 800b606:	d901      	bls.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b608:	2303      	movs	r3, #3
 800b60a:	e062      	b.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b60c:	4b35      	ldr	r3, [pc, #212]	; (800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b614:	2b00      	cmp	r3, #0
 800b616:	d0f0      	beq.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b618:	4b31      	ldr	r3, [pc, #196]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b61c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b620:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d02f      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	429a      	cmp	r2, r3
 800b634:	d028      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b636:	4b2a      	ldr	r3, [pc, #168]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b63a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b63e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b640:	4b29      	ldr	r3, [pc, #164]	; (800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b642:	2201      	movs	r2, #1
 800b644:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b646:	4b28      	ldr	r3, [pc, #160]	; (800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b648:	2200      	movs	r2, #0
 800b64a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b64c:	4a24      	ldr	r2, [pc, #144]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b652:	4b23      	ldr	r3, [pc, #140]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b656:	f003 0301 	and.w	r3, r3, #1
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d114      	bne.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b65e:	f7fe f9fd 	bl	8009a5c <HAL_GetTick>
 800b662:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b664:	e00a      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b666:	f7fe f9f9 	bl	8009a5c <HAL_GetTick>
 800b66a:	4602      	mov	r2, r0
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	f241 3288 	movw	r2, #5000	; 0x1388
 800b674:	4293      	cmp	r3, r2
 800b676:	d901      	bls.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b678:	2303      	movs	r3, #3
 800b67a:	e02a      	b.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b67c:	4b18      	ldr	r3, [pc, #96]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b67e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b680:	f003 0302 	and.w	r3, r3, #2
 800b684:	2b00      	cmp	r3, #0
 800b686:	d0ee      	beq.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b694:	d10d      	bne.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b696:	4b12      	ldr	r3, [pc, #72]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b6a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6aa:	490d      	ldr	r1, [pc, #52]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	608b      	str	r3, [r1, #8]
 800b6b0:	e005      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b6b2:	4b0b      	ldr	r3, [pc, #44]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	4a0a      	ldr	r2, [pc, #40]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b6bc:	6093      	str	r3, [r2, #8]
 800b6be:	4b08      	ldr	r3, [pc, #32]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6ca:	4905      	ldr	r1, [pc, #20]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	42470068 	.word	0x42470068
 800b6e0:	40023800 	.word	0x40023800
 800b6e4:	40007000 	.word	0x40007000
 800b6e8:	42470e40 	.word	0x42470e40

0800b6ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d101      	bne.n	800b702 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e066      	b.n	800b7d0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	7f5b      	ldrb	r3, [r3, #29]
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d105      	bne.n	800b718 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7f8 fda8 	bl	8004268 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2202      	movs	r2, #2
 800b71c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	22ca      	movs	r2, #202	; 0xca
 800b724:	625a      	str	r2, [r3, #36]	; 0x24
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2253      	movs	r2, #83	; 0x53
 800b72c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fa45 	bl	800bbbe <RTC_EnterInitMode>
 800b734:	4603      	mov	r3, r0
 800b736:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b738:	7bfb      	ldrb	r3, [r7, #15]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d12c      	bne.n	800b798 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	6812      	ldr	r2, [r2, #0]
 800b748:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b74c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b750:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	6899      	ldr	r1, [r3, #8]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685a      	ldr	r2, [r3, #4]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	431a      	orrs	r2, r3
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	695b      	ldr	r3, [r3, #20]
 800b766:	431a      	orrs	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	430a      	orrs	r2, r1
 800b76e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	68d2      	ldr	r2, [r2, #12]
 800b778:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	6919      	ldr	r1, [r3, #16]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	041a      	lsls	r2, r3, #16
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	430a      	orrs	r2, r1
 800b78c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 fa4c 	bl	800bc2c <RTC_ExitInitMode>
 800b794:	4603      	mov	r3, r0
 800b796:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b798:	7bfb      	ldrb	r3, [r7, #15]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d113      	bne.n	800b7c6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b7ac:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	699a      	ldr	r2, [r3, #24]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	430a      	orrs	r2, r1
 800b7be:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	22ff      	movs	r2, #255	; 0xff
 800b7cc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800b7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b7d8:	b590      	push	{r4, r7, lr}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	7f1b      	ldrb	r3, [r3, #28]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d101      	bne.n	800b7f4 <HAL_RTC_SetTime+0x1c>
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	e087      	b.n	800b904 <HAL_RTC_SetTime+0x12c>
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d126      	bne.n	800b854 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b810:	2b00      	cmp	r3, #0
 800b812:	d102      	bne.n	800b81a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	2200      	movs	r2, #0
 800b818:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	4618      	mov	r0, r3
 800b820:	f000 fa29 	bl	800bc76 <RTC_ByteToBcd2>
 800b824:	4603      	mov	r3, r0
 800b826:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	785b      	ldrb	r3, [r3, #1]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 fa22 	bl	800bc76 <RTC_ByteToBcd2>
 800b832:	4603      	mov	r3, r0
 800b834:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b836:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	789b      	ldrb	r3, [r3, #2]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f000 fa1a 	bl	800bc76 <RTC_ByteToBcd2>
 800b842:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b844:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	78db      	ldrb	r3, [r3, #3]
 800b84c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b84e:	4313      	orrs	r3, r2
 800b850:	617b      	str	r3, [r7, #20]
 800b852:	e018      	b.n	800b886 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d102      	bne.n	800b868 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	2200      	movs	r2, #0
 800b866:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	785b      	ldrb	r3, [r3, #1]
 800b872:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b874:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b87a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	78db      	ldrb	r3, [r3, #3]
 800b880:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b882:	4313      	orrs	r3, r2
 800b884:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	22ca      	movs	r2, #202	; 0xca
 800b88c:	625a      	str	r2, [r3, #36]	; 0x24
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2253      	movs	r2, #83	; 0x53
 800b894:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 f991 	bl	800bbbe <RTC_EnterInitMode>
 800b89c:	4603      	mov	r3, r0
 800b89e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b8a0:	7cfb      	ldrb	r3, [r7, #19]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d120      	bne.n	800b8e8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b8b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b8b4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	689a      	ldr	r2, [r3, #8]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b8c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	6899      	ldr	r1, [r3, #8]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	68da      	ldr	r2, [r3, #12]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	431a      	orrs	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	430a      	orrs	r2, r1
 800b8dc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f000 f9a4 	bl	800bc2c <RTC_ExitInitMode>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b8e8:	7cfb      	ldrb	r3, [r7, #19]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d102      	bne.n	800b8f4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	22ff      	movs	r2, #255	; 0xff
 800b8fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2200      	movs	r2, #0
 800b900:	771a      	strb	r2, [r3, #28]

  return status;
 800b902:	7cfb      	ldrb	r3, [r7, #19]
}
 800b904:	4618      	mov	r0, r3
 800b906:	371c      	adds	r7, #28
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd90      	pop	{r4, r7, pc}

0800b90c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b918:	2300      	movs	r3, #0
 800b91a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	691b      	ldr	r3, [r3, #16]
 800b92c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b93e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b942:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	0c1b      	lsrs	r3, r3, #16
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b94e:	b2da      	uxtb	r2, r3
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	0a1b      	lsrs	r3, r3, #8
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	b2db      	uxtb	r3, r3
 800b968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b96c:	b2da      	uxtb	r2, r3
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	0d9b      	lsrs	r3, r3, #22
 800b976:	b2db      	uxtb	r3, r3
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d11a      	bne.n	800b9be <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 f98f 	bl	800bcb0 <RTC_Bcd2ToByte>
 800b992:	4603      	mov	r3, r0
 800b994:	461a      	mov	r2, r3
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	785b      	ldrb	r3, [r3, #1]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 f986 	bl	800bcb0 <RTC_Bcd2ToByte>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	789b      	ldrb	r3, [r3, #2]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 f97d 	bl	800bcb0 <RTC_Bcd2ToByte>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b9c8:	b590      	push	{r4, r7, lr}
 800b9ca:	b087      	sub	sp, #28
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	7f1b      	ldrb	r3, [r3, #28]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d101      	bne.n	800b9e4 <HAL_RTC_SetDate+0x1c>
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	e071      	b.n	800bac8 <HAL_RTC_SetDate+0x100>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10e      	bne.n	800ba14 <HAL_RTC_SetDate+0x4c>
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	785b      	ldrb	r3, [r3, #1]
 800b9fa:	f003 0310 	and.w	r3, r3, #16
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d008      	beq.n	800ba14 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	785b      	ldrb	r3, [r3, #1]
 800ba06:	f023 0310 	bic.w	r3, r3, #16
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	330a      	adds	r3, #10
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d11c      	bne.n	800ba54 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	78db      	ldrb	r3, [r3, #3]
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f000 f929 	bl	800bc76 <RTC_ByteToBcd2>
 800ba24:	4603      	mov	r3, r0
 800ba26:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	785b      	ldrb	r3, [r3, #1]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 f922 	bl	800bc76 <RTC_ByteToBcd2>
 800ba32:	4603      	mov	r3, r0
 800ba34:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ba36:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	789b      	ldrb	r3, [r3, #2]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f000 f91a 	bl	800bc76 <RTC_ByteToBcd2>
 800ba42:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ba44:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	617b      	str	r3, [r7, #20]
 800ba52:	e00e      	b.n	800ba72 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	78db      	ldrb	r3, [r3, #3]
 800ba58:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	785b      	ldrb	r3, [r3, #1]
 800ba5e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ba60:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ba66:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	22ca      	movs	r2, #202	; 0xca
 800ba78:	625a      	str	r2, [r3, #36]	; 0x24
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2253      	movs	r2, #83	; 0x53
 800ba80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f000 f89b 	bl	800bbbe <RTC_EnterInitMode>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ba8c:	7cfb      	ldrb	r3, [r7, #19]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10c      	bne.n	800baac <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ba9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800baa0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f000 f8c2 	bl	800bc2c <RTC_ExitInitMode>
 800baa8:	4603      	mov	r3, r0
 800baaa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800baac:	7cfb      	ldrb	r3, [r7, #19]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d102      	bne.n	800bab8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2201      	movs	r2, #1
 800bab6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	22ff      	movs	r2, #255	; 0xff
 800babe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	771a      	strb	r2, [r3, #28]

  return status;
 800bac6:	7cfb      	ldrb	r3, [r7, #19]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	371c      	adds	r7, #28
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd90      	pop	{r4, r7, pc}

0800bad0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800badc:	2300      	movs	r3, #0
 800bade:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800baea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800baee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	0c1b      	lsrs	r3, r3, #16
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	0a1b      	lsrs	r3, r3, #8
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	f003 031f 	and.w	r3, r3, #31
 800bb04:	b2da      	uxtb	r2, r3
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	0b5b      	lsrs	r3, r3, #13
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	f003 0307 	and.w	r3, r3, #7
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d11a      	bne.n	800bb64 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	78db      	ldrb	r3, [r3, #3]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f8bc 	bl	800bcb0 <RTC_Bcd2ToByte>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	785b      	ldrb	r3, [r3, #1]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f000 f8b3 	bl	800bcb0 <RTC_Bcd2ToByte>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	789b      	ldrb	r3, [r3, #2]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 f8aa 	bl	800bcb0 <RTC_Bcd2ToByte>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	461a      	mov	r2, r3
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b084      	sub	sp, #16
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bb76:	2300      	movs	r3, #0
 800bb78:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68da      	ldr	r2, [r3, #12]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bb88:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bb8a:	f7fd ff67 	bl	8009a5c <HAL_GetTick>
 800bb8e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bb90:	e009      	b.n	800bba6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bb92:	f7fd ff63 	bl	8009a5c <HAL_GetTick>
 800bb96:	4602      	mov	r2, r0
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	1ad3      	subs	r3, r2, r3
 800bb9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bba0:	d901      	bls.n	800bba6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e007      	b.n	800bbb6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	f003 0320 	and.w	r3, r3, #32
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d0ee      	beq.n	800bb92 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b084      	sub	sp, #16
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d122      	bne.n	800bc22 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	68da      	ldr	r2, [r3, #12]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bbea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bbec:	f7fd ff36 	bl	8009a5c <HAL_GetTick>
 800bbf0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bbf2:	e00c      	b.n	800bc0e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bbf4:	f7fd ff32 	bl	8009a5c <HAL_GetTick>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	1ad3      	subs	r3, r2, r3
 800bbfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc02:	d904      	bls.n	800bc0e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2204      	movs	r2, #4
 800bc08:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d102      	bne.n	800bc22 <RTC_EnterInitMode+0x64>
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d1e8      	bne.n	800bbf4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800bc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68da      	ldr	r2, [r3, #12]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc46:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	f003 0320 	and.w	r3, r3, #32
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d10a      	bne.n	800bc6c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f7ff ff89 	bl	800bb6e <HAL_RTC_WaitForSynchro>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d004      	beq.n	800bc6c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2204      	movs	r2, #4
 800bc66:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b085      	sub	sp, #20
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800bc80:	2300      	movs	r3, #0
 800bc82:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800bc84:	e005      	b.n	800bc92 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
 800bc88:	3301      	adds	r3, #1
 800bc8a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800bc8c:	79fb      	ldrb	r3, [r7, #7]
 800bc8e:	3b0a      	subs	r3, #10
 800bc90:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bc92:	79fb      	ldrb	r3, [r7, #7]
 800bc94:	2b09      	cmp	r3, #9
 800bc96:	d8f6      	bhi.n	800bc86 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	011b      	lsls	r3, r3, #4
 800bc9c:	b2da      	uxtb	r2, r3
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	b2db      	uxtb	r3, r3
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800bcbe:	79fb      	ldrb	r3, [r7, #7]
 800bcc0:	091b      	lsrs	r3, r3, #4
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	0092      	lsls	r2, r2, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	005b      	lsls	r3, r3, #1
 800bccc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800bcce:	79fb      	ldrb	r3, [r7, #7]
 800bcd0:	f003 030f 	and.w	r3, r3, #15
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
 800bcd8:	4413      	add	r3, r2
 800bcda:	b2db      	uxtb	r3, r3
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e07b      	b.n	800bdf2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d108      	bne.n	800bd14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd0a:	d009      	beq.n	800bd20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	61da      	str	r2, [r3, #28]
 800bd12:	e005      	b.n	800bd20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d106      	bne.n	800bd40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f7f8 fac0 	bl	80042c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2202      	movs	r2, #2
 800bd44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bd68:	431a      	orrs	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd72:	431a      	orrs	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	f003 0302 	and.w	r3, r3, #2
 800bd7c:	431a      	orrs	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	695b      	ldr	r3, [r3, #20]
 800bd82:	f003 0301 	and.w	r3, r3, #1
 800bd86:	431a      	orrs	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd90:	431a      	orrs	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd9a:	431a      	orrs	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a1b      	ldr	r3, [r3, #32]
 800bda0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bda4:	ea42 0103 	orr.w	r1, r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	430a      	orrs	r2, r1
 800bdb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	699b      	ldr	r3, [r3, #24]
 800bdbc:	0c1b      	lsrs	r3, r3, #16
 800bdbe:	f003 0104 	and.w	r1, r3, #4
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc6:	f003 0210 	and.w	r2, r3, #16
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	430a      	orrs	r2, r1
 800bdd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	69da      	ldr	r2, [r3, #28]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bde0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b088      	sub	sp, #32
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	60f8      	str	r0, [r7, #12]
 800be02:	60b9      	str	r1, [r7, #8]
 800be04:	603b      	str	r3, [r7, #0]
 800be06:	4613      	mov	r3, r2
 800be08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be0a:	2300      	movs	r3, #0
 800be0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800be14:	2b01      	cmp	r3, #1
 800be16:	d101      	bne.n	800be1c <HAL_SPI_Transmit+0x22>
 800be18:	2302      	movs	r3, #2
 800be1a:	e126      	b.n	800c06a <HAL_SPI_Transmit+0x270>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be24:	f7fd fe1a 	bl	8009a5c <HAL_GetTick>
 800be28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800be2a:	88fb      	ldrh	r3, [r7, #6]
 800be2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be34:	b2db      	uxtb	r3, r3
 800be36:	2b01      	cmp	r3, #1
 800be38:	d002      	beq.n	800be40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800be3a:	2302      	movs	r3, #2
 800be3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800be3e:	e10b      	b.n	800c058 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d002      	beq.n	800be4c <HAL_SPI_Transmit+0x52>
 800be46:	88fb      	ldrh	r3, [r7, #6]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d102      	bne.n	800be52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800be50:	e102      	b.n	800c058 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2203      	movs	r2, #3
 800be56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2200      	movs	r2, #0
 800be5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	88fa      	ldrh	r2, [r7, #6]
 800be6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	88fa      	ldrh	r2, [r7, #6]
 800be70:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be98:	d10f      	bne.n	800beba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bea8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800beb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec4:	2b40      	cmp	r3, #64	; 0x40
 800bec6:	d007      	beq.n	800bed8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bee0:	d14b      	bne.n	800bf7a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d002      	beq.n	800bef0 <HAL_SPI_Transmit+0xf6>
 800beea:	8afb      	ldrh	r3, [r7, #22]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d13e      	bne.n	800bf6e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef4:	881a      	ldrh	r2, [r3, #0]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf00:	1c9a      	adds	r2, r3, #2
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bf14:	e02b      	b.n	800bf6e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	f003 0302 	and.w	r3, r3, #2
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d112      	bne.n	800bf4a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf28:	881a      	ldrh	r2, [r3, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf34:	1c9a      	adds	r2, r3, #2
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	3b01      	subs	r3, #1
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	86da      	strh	r2, [r3, #54]	; 0x36
 800bf48:	e011      	b.n	800bf6e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf4a:	f7fd fd87 	bl	8009a5c <HAL_GetTick>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	1ad3      	subs	r3, r2, r3
 800bf54:	683a      	ldr	r2, [r7, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d803      	bhi.n	800bf62 <HAL_SPI_Transmit+0x168>
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf60:	d102      	bne.n	800bf68 <HAL_SPI_Transmit+0x16e>
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d102      	bne.n	800bf6e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800bf68:	2303      	movs	r3, #3
 800bf6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bf6c:	e074      	b.n	800c058 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1ce      	bne.n	800bf16 <HAL_SPI_Transmit+0x11c>
 800bf78:	e04c      	b.n	800c014 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d002      	beq.n	800bf88 <HAL_SPI_Transmit+0x18e>
 800bf82:	8afb      	ldrh	r3, [r7, #22]
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d140      	bne.n	800c00a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	330c      	adds	r3, #12
 800bf92:	7812      	ldrb	r2, [r2, #0]
 800bf94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bfae:	e02c      	b.n	800c00a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	f003 0302 	and.w	r3, r3, #2
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d113      	bne.n	800bfe6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	330c      	adds	r3, #12
 800bfc8:	7812      	ldrb	r2, [r2, #0]
 800bfca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	86da      	strh	r2, [r3, #54]	; 0x36
 800bfe4:	e011      	b.n	800c00a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfe6:	f7fd fd39 	bl	8009a5c <HAL_GetTick>
 800bfea:	4602      	mov	r2, r0
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	1ad3      	subs	r3, r2, r3
 800bff0:	683a      	ldr	r2, [r7, #0]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d803      	bhi.n	800bffe <HAL_SPI_Transmit+0x204>
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bffc:	d102      	bne.n	800c004 <HAL_SPI_Transmit+0x20a>
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d102      	bne.n	800c00a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800c004:	2303      	movs	r3, #3
 800c006:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c008:	e026      	b.n	800c058 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c00e:	b29b      	uxth	r3, r3
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1cd      	bne.n	800bfb0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c014:	69ba      	ldr	r2, [r7, #24]
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f000 fb13 	bl	800c644 <SPI_EndRxTxTransaction>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2220      	movs	r2, #32
 800c028:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10a      	bne.n	800c048 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c032:	2300      	movs	r3, #0
 800c034:	613b      	str	r3, [r7, #16]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	613b      	str	r3, [r7, #16]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	613b      	str	r3, [r7, #16]
 800c046:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	77fb      	strb	r3, [r7, #31]
 800c054:	e000      	b.n	800c058 <HAL_SPI_Transmit+0x25e>
  }

error:
 800c056:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c068:	7ffb      	ldrb	r3, [r7, #31]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3720      	adds	r7, #32
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
	...

0800c074 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	4613      	mov	r3, r2
 800c080:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d101      	bne.n	800c094 <HAL_SPI_Transmit_DMA+0x20>
 800c090:	2302      	movs	r3, #2
 800c092:	e09b      	b.n	800c1cc <HAL_SPI_Transmit_DMA+0x158>
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2201      	movs	r2, #1
 800c098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d002      	beq.n	800c0ae <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c0a8:	2302      	movs	r3, #2
 800c0aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c0ac:	e089      	b.n	800c1c2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <HAL_SPI_Transmit_DMA+0x46>
 800c0b4:	88fb      	ldrh	r3, [r7, #6]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d102      	bne.n	800c0c0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c0be:	e080      	b.n	800c1c2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2203      	movs	r2, #3
 800c0c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	68ba      	ldr	r2, [r7, #8]
 800c0d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	88fa      	ldrh	r2, [r7, #6]
 800c0d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	88fa      	ldrh	r2, [r7, #6]
 800c0de:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c106:	d10f      	bne.n	800c128 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c116:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c126:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c12c:	4a29      	ldr	r2, [pc, #164]	; (800c1d4 <HAL_SPI_Transmit_DMA+0x160>)
 800c12e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c134:	4a28      	ldr	r2, [pc, #160]	; (800c1d8 <HAL_SPI_Transmit_DMA+0x164>)
 800c136:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c13c:	4a27      	ldr	r2, [pc, #156]	; (800c1dc <HAL_SPI_Transmit_DMA+0x168>)
 800c13e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c144:	2200      	movs	r2, #0
 800c146:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c150:	4619      	mov	r1, r3
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	330c      	adds	r3, #12
 800c158:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c15e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c160:	f7fd fe3c 	bl	8009ddc <HAL_DMA_Start_IT>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00c      	beq.n	800c184 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c16e:	f043 0210 	orr.w	r2, r3, #16
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2201      	movs	r2, #1
 800c17e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800c182:	e01e      	b.n	800c1c2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c18e:	2b40      	cmp	r3, #64	; 0x40
 800c190:	d007      	beq.n	800c1a2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1a0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	685a      	ldr	r2, [r3, #4]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f042 0220 	orr.w	r2, r2, #32
 800c1b0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f042 0202 	orr.w	r2, r2, #2
 800c1c0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c1ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3718      	adds	r7, #24
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	0800c4b1 	.word	0x0800c4b1
 800c1d8:	0800c409 	.word	0x0800c409
 800c1dc:	0800c4cd 	.word	0x0800c4cd

0800c1e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b088      	sub	sp, #32
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	099b      	lsrs	r3, r3, #6
 800c1fc:	f003 0301 	and.w	r3, r3, #1
 800c200:	2b00      	cmp	r3, #0
 800c202:	d10f      	bne.n	800c224 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00a      	beq.n	800c224 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	099b      	lsrs	r3, r3, #6
 800c212:	f003 0301 	and.w	r3, r3, #1
 800c216:	2b00      	cmp	r3, #0
 800c218:	d004      	beq.n	800c224 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	4798      	blx	r3
    return;
 800c222:	e0d7      	b.n	800c3d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	085b      	lsrs	r3, r3, #1
 800c228:	f003 0301 	and.w	r3, r3, #1
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00a      	beq.n	800c246 <HAL_SPI_IRQHandler+0x66>
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	09db      	lsrs	r3, r3, #7
 800c234:	f003 0301 	and.w	r3, r3, #1
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d004      	beq.n	800c246 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	4798      	blx	r3
    return;
 800c244:	e0c6      	b.n	800c3d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	095b      	lsrs	r3, r3, #5
 800c24a:	f003 0301 	and.w	r3, r3, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10c      	bne.n	800c26c <HAL_SPI_IRQHandler+0x8c>
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	099b      	lsrs	r3, r3, #6
 800c256:	f003 0301 	and.w	r3, r3, #1
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d106      	bne.n	800c26c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	0a1b      	lsrs	r3, r3, #8
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 80b4 	beq.w	800c3d4 <HAL_SPI_IRQHandler+0x1f4>
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	095b      	lsrs	r3, r3, #5
 800c270:	f003 0301 	and.w	r3, r3, #1
 800c274:	2b00      	cmp	r3, #0
 800c276:	f000 80ad 	beq.w	800c3d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	099b      	lsrs	r3, r3, #6
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b00      	cmp	r3, #0
 800c284:	d023      	beq.n	800c2ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	2b03      	cmp	r3, #3
 800c290:	d011      	beq.n	800c2b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c296:	f043 0204 	orr.w	r2, r3, #4
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c29e:	2300      	movs	r3, #0
 800c2a0:	617b      	str	r3, [r7, #20]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	617b      	str	r3, [r7, #20]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	617b      	str	r3, [r7, #20]
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	e00b      	b.n	800c2ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	613b      	str	r3, [r7, #16]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	613b      	str	r3, [r7, #16]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	613b      	str	r3, [r7, #16]
 800c2ca:	693b      	ldr	r3, [r7, #16]
        return;
 800c2cc:	e082      	b.n	800c3d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	095b      	lsrs	r3, r3, #5
 800c2d2:	f003 0301 	and.w	r3, r3, #1
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d014      	beq.n	800c304 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2de:	f043 0201 	orr.w	r2, r3, #1
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60fb      	str	r3, [r7, #12]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	60fb      	str	r3, [r7, #12]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	0a1b      	lsrs	r3, r3, #8
 800c308:	f003 0301 	and.w	r3, r3, #1
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00c      	beq.n	800c32a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c314:	f043 0208 	orr.w	r2, r3, #8
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c31c:	2300      	movs	r3, #0
 800c31e:	60bb      	str	r3, [r7, #8]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	60bb      	str	r3, [r7, #8]
 800c328:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d04f      	beq.n	800c3d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	685a      	ldr	r2, [r3, #4]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c340:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2201      	movs	r2, #1
 800c346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	f003 0302 	and.w	r3, r3, #2
 800c350:	2b00      	cmp	r3, #0
 800c352:	d104      	bne.n	800c35e <HAL_SPI_IRQHandler+0x17e>
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	f003 0301 	and.w	r3, r3, #1
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d034      	beq.n	800c3c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	685a      	ldr	r2, [r3, #4]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f022 0203 	bic.w	r2, r2, #3
 800c36c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c372:	2b00      	cmp	r3, #0
 800c374:	d011      	beq.n	800c39a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c37a:	4a18      	ldr	r2, [pc, #96]	; (800c3dc <HAL_SPI_IRQHandler+0x1fc>)
 800c37c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c382:	4618      	mov	r0, r3
 800c384:	f7fd fdf2 	bl	8009f6c <HAL_DMA_Abort_IT>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d005      	beq.n	800c39a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c392:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d016      	beq.n	800c3d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3a6:	4a0d      	ldr	r2, [pc, #52]	; (800c3dc <HAL_SPI_IRQHandler+0x1fc>)
 800c3a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fd fddc 	bl	8009f6c <HAL_DMA_Abort_IT>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00a      	beq.n	800c3d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c3c6:	e003      	b.n	800c3d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 f813 	bl	800c3f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c3ce:	e000      	b.n	800c3d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c3d0:	bf00      	nop
    return;
 800c3d2:	bf00      	nop
  }
}
 800c3d4:	3720      	adds	r7, #32
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	0800c50d 	.word	0x0800c50d

0800c3e0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c3e8:	bf00      	nop
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c3fc:	bf00      	nop
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c414:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c416:	f7fd fb21 	bl	8009a5c <HAL_GetTick>
 800c41a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c42a:	d03b      	beq.n	800c4a4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	685a      	ldr	r2, [r3, #4]
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f022 0220 	bic.w	r2, r2, #32
 800c43a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	685a      	ldr	r2, [r3, #4]
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f022 0202 	bic.w	r2, r2, #2
 800c44a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	2164      	movs	r1, #100	; 0x64
 800c450:	6978      	ldr	r0, [r7, #20]
 800c452:	f000 f8f7 	bl	800c644 <SPI_EndRxTxTransaction>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d005      	beq.n	800c468 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c460:	f043 0220 	orr.w	r2, r3, #32
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d10a      	bne.n	800c486 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c470:	2300      	movs	r3, #0
 800c472:	60fb      	str	r3, [r7, #12]
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	60fb      	str	r3, [r7, #12]
 800c484:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2200      	movs	r2, #0
 800c48a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d003      	beq.n	800c4a4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c49c:	6978      	ldr	r0, [r7, #20]
 800c49e:	f7ff ffa9 	bl	800c3f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c4a2:	e002      	b.n	800c4aa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c4a4:	6978      	ldr	r0, [r7, #20]
 800c4a6:	f7f6 fac9 	bl	8002a3c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c4aa:	3718      	adds	r7, #24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4bc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f7ff ff8e 	bl	800c3e0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c4c4:	bf00      	nop
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	685a      	ldr	r2, [r3, #4]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f022 0203 	bic.w	r2, r2, #3
 800c4e8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ee:	f043 0210 	orr.w	r2, r3, #16
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f7ff ff78 	bl	800c3f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c504:	bf00      	nop
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c518:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2200      	movs	r2, #0
 800c51e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2200      	movs	r2, #0
 800c524:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f7ff ff64 	bl	800c3f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c52c:	bf00      	nop
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b088      	sub	sp, #32
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	603b      	str	r3, [r7, #0]
 800c540:	4613      	mov	r3, r2
 800c542:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c544:	f7fd fa8a 	bl	8009a5c <HAL_GetTick>
 800c548:	4602      	mov	r2, r0
 800c54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54c:	1a9b      	subs	r3, r3, r2
 800c54e:	683a      	ldr	r2, [r7, #0]
 800c550:	4413      	add	r3, r2
 800c552:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c554:	f7fd fa82 	bl	8009a5c <HAL_GetTick>
 800c558:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c55a:	4b39      	ldr	r3, [pc, #228]	; (800c640 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	015b      	lsls	r3, r3, #5
 800c560:	0d1b      	lsrs	r3, r3, #20
 800c562:	69fa      	ldr	r2, [r7, #28]
 800c564:	fb02 f303 	mul.w	r3, r2, r3
 800c568:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c56a:	e054      	b.n	800c616 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c572:	d050      	beq.n	800c616 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c574:	f7fd fa72 	bl	8009a5c <HAL_GetTick>
 800c578:	4602      	mov	r2, r0
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	69fa      	ldr	r2, [r7, #28]
 800c580:	429a      	cmp	r2, r3
 800c582:	d902      	bls.n	800c58a <SPI_WaitFlagStateUntilTimeout+0x56>
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d13d      	bne.n	800c606 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	685a      	ldr	r2, [r3, #4]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c598:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5a2:	d111      	bne.n	800c5c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5ac:	d004      	beq.n	800c5b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5b6:	d107      	bne.n	800c5c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5d0:	d10f      	bne.n	800c5f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5e0:	601a      	str	r2, [r3, #0]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c5f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c602:	2303      	movs	r3, #3
 800c604:	e017      	b.n	800c636 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d101      	bne.n	800c610 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c60c:	2300      	movs	r3, #0
 800c60e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	3b01      	subs	r3, #1
 800c614:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	689a      	ldr	r2, [r3, #8]
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	4013      	ands	r3, r2
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	429a      	cmp	r2, r3
 800c624:	bf0c      	ite	eq
 800c626:	2301      	moveq	r3, #1
 800c628:	2300      	movne	r3, #0
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	461a      	mov	r2, r3
 800c62e:	79fb      	ldrb	r3, [r7, #7]
 800c630:	429a      	cmp	r2, r3
 800c632:	d19b      	bne.n	800c56c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3720      	adds	r7, #32
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	20000098 	.word	0x20000098

0800c644 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b088      	sub	sp, #32
 800c648:	af02      	add	r7, sp, #8
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c650:	4b1b      	ldr	r3, [pc, #108]	; (800c6c0 <SPI_EndRxTxTransaction+0x7c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a1b      	ldr	r2, [pc, #108]	; (800c6c4 <SPI_EndRxTxTransaction+0x80>)
 800c656:	fba2 2303 	umull	r2, r3, r2, r3
 800c65a:	0d5b      	lsrs	r3, r3, #21
 800c65c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c660:	fb02 f303 	mul.w	r3, r2, r3
 800c664:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c66e:	d112      	bne.n	800c696 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	2200      	movs	r2, #0
 800c678:	2180      	movs	r1, #128	; 0x80
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f7ff ff5a 	bl	800c534 <SPI_WaitFlagStateUntilTimeout>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d016      	beq.n	800c6b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c68a:	f043 0220 	orr.w	r2, r3, #32
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c692:	2303      	movs	r3, #3
 800c694:	e00f      	b.n	800c6b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00a      	beq.n	800c6b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	3b01      	subs	r3, #1
 800c6a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ac:	2b80      	cmp	r3, #128	; 0x80
 800c6ae:	d0f2      	beq.n	800c696 <SPI_EndRxTxTransaction+0x52>
 800c6b0:	e000      	b.n	800c6b4 <SPI_EndRxTxTransaction+0x70>
        break;
 800c6b2:	bf00      	nop
  }

  return HAL_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3718      	adds	r7, #24
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	20000098 	.word	0x20000098
 800c6c4:	165e9f81 	.word	0x165e9f81

0800c6c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d101      	bne.n	800c6da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e041      	b.n	800c75e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d106      	bne.n	800c6f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f7f7 fe72 	bl	80043d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2202      	movs	r2, #2
 800c6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	3304      	adds	r3, #4
 800c704:	4619      	mov	r1, r3
 800c706:	4610      	mov	r0, r2
 800c708:	f000 fa96 	bl	800cc38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2201      	movs	r2, #1
 800c720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2201      	movs	r2, #1
 800c728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2201      	movs	r2, #1
 800c738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2201      	movs	r2, #1
 800c748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2201      	movs	r2, #1
 800c758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
	...

0800c768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c776:	b2db      	uxtb	r3, r3
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d001      	beq.n	800c780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	e04e      	b.n	800c81e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2202      	movs	r2, #2
 800c784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68da      	ldr	r2, [r3, #12]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f042 0201 	orr.w	r2, r2, #1
 800c796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a23      	ldr	r2, [pc, #140]	; (800c82c <HAL_TIM_Base_Start_IT+0xc4>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d022      	beq.n	800c7e8 <HAL_TIM_Base_Start_IT+0x80>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7aa:	d01d      	beq.n	800c7e8 <HAL_TIM_Base_Start_IT+0x80>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a1f      	ldr	r2, [pc, #124]	; (800c830 <HAL_TIM_Base_Start_IT+0xc8>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d018      	beq.n	800c7e8 <HAL_TIM_Base_Start_IT+0x80>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a1e      	ldr	r2, [pc, #120]	; (800c834 <HAL_TIM_Base_Start_IT+0xcc>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d013      	beq.n	800c7e8 <HAL_TIM_Base_Start_IT+0x80>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a1c      	ldr	r2, [pc, #112]	; (800c838 <HAL_TIM_Base_Start_IT+0xd0>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d00e      	beq.n	800c7e8 <HAL_TIM_Base_Start_IT+0x80>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a1b      	ldr	r2, [pc, #108]	; (800c83c <HAL_TIM_Base_Start_IT+0xd4>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d009      	beq.n	800c7e8 <HAL_TIM_Base_Start_IT+0x80>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a19      	ldr	r2, [pc, #100]	; (800c840 <HAL_TIM_Base_Start_IT+0xd8>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d004      	beq.n	800c7e8 <HAL_TIM_Base_Start_IT+0x80>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a18      	ldr	r2, [pc, #96]	; (800c844 <HAL_TIM_Base_Start_IT+0xdc>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d111      	bne.n	800c80c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	f003 0307 	and.w	r3, r3, #7
 800c7f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b06      	cmp	r3, #6
 800c7f8:	d010      	beq.n	800c81c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f042 0201 	orr.w	r2, r2, #1
 800c808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c80a:	e007      	b.n	800c81c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f042 0201 	orr.w	r2, r2, #1
 800c81a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3714      	adds	r7, #20
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	40010000 	.word	0x40010000
 800c830:	40000400 	.word	0x40000400
 800c834:	40000800 	.word	0x40000800
 800c838:	40000c00 	.word	0x40000c00
 800c83c:	40010400 	.word	0x40010400
 800c840:	40014000 	.word	0x40014000
 800c844:	40001800 	.word	0x40001800

0800c848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	f003 0302 	and.w	r3, r3, #2
 800c85a:	2b02      	cmp	r3, #2
 800c85c:	d122      	bne.n	800c8a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	f003 0302 	and.w	r3, r3, #2
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d11b      	bne.n	800c8a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f06f 0202 	mvn.w	r2, #2
 800c874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	699b      	ldr	r3, [r3, #24]
 800c882:	f003 0303 	and.w	r3, r3, #3
 800c886:	2b00      	cmp	r3, #0
 800c888:	d003      	beq.n	800c892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 f9b5 	bl	800cbfa <HAL_TIM_IC_CaptureCallback>
 800c890:	e005      	b.n	800c89e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f9a7 	bl	800cbe6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 f9b8 	bl	800cc0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	f003 0304 	and.w	r3, r3, #4
 800c8ae:	2b04      	cmp	r3, #4
 800c8b0:	d122      	bne.n	800c8f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b04      	cmp	r3, #4
 800c8be:	d11b      	bne.n	800c8f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f06f 0204 	mvn.w	r2, #4
 800c8c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d003      	beq.n	800c8e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f98b 	bl	800cbfa <HAL_TIM_IC_CaptureCallback>
 800c8e4:	e005      	b.n	800c8f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 f97d 	bl	800cbe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 f98e 	bl	800cc0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	f003 0308 	and.w	r3, r3, #8
 800c902:	2b08      	cmp	r3, #8
 800c904:	d122      	bne.n	800c94c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	f003 0308 	and.w	r3, r3, #8
 800c910:	2b08      	cmp	r3, #8
 800c912:	d11b      	bne.n	800c94c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f06f 0208 	mvn.w	r2, #8
 800c91c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2204      	movs	r2, #4
 800c922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	69db      	ldr	r3, [r3, #28]
 800c92a:	f003 0303 	and.w	r3, r3, #3
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f961 	bl	800cbfa <HAL_TIM_IC_CaptureCallback>
 800c938:	e005      	b.n	800c946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f953 	bl	800cbe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f964 	bl	800cc0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	691b      	ldr	r3, [r3, #16]
 800c952:	f003 0310 	and.w	r3, r3, #16
 800c956:	2b10      	cmp	r3, #16
 800c958:	d122      	bne.n	800c9a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	f003 0310 	and.w	r3, r3, #16
 800c964:	2b10      	cmp	r3, #16
 800c966:	d11b      	bne.n	800c9a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f06f 0210 	mvn.w	r2, #16
 800c970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2208      	movs	r2, #8
 800c976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	69db      	ldr	r3, [r3, #28]
 800c97e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c982:	2b00      	cmp	r3, #0
 800c984:	d003      	beq.n	800c98e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f937 	bl	800cbfa <HAL_TIM_IC_CaptureCallback>
 800c98c:	e005      	b.n	800c99a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 f929 	bl	800cbe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 f93a 	bl	800cc0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	f003 0301 	and.w	r3, r3, #1
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d10e      	bne.n	800c9cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	f003 0301 	and.w	r3, r3, #1
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d107      	bne.n	800c9cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f06f 0201 	mvn.w	r2, #1
 800c9c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f7f6 ffee 	bl	80039a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9d6:	2b80      	cmp	r3, #128	; 0x80
 800c9d8:	d10e      	bne.n	800c9f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9e4:	2b80      	cmp	r3, #128	; 0x80
 800c9e6:	d107      	bne.n	800c9f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c9f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 fae0 	bl	800cfb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca02:	2b40      	cmp	r3, #64	; 0x40
 800ca04:	d10e      	bne.n	800ca24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca10:	2b40      	cmp	r3, #64	; 0x40
 800ca12:	d107      	bne.n	800ca24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ca1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f8ff 	bl	800cc22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	f003 0320 	and.w	r3, r3, #32
 800ca2e:	2b20      	cmp	r3, #32
 800ca30:	d10e      	bne.n	800ca50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	f003 0320 	and.w	r3, r3, #32
 800ca3c:	2b20      	cmp	r3, #32
 800ca3e:	d107      	bne.n	800ca50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f06f 0220 	mvn.w	r2, #32
 800ca48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 faaa 	bl	800cfa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca62:	2300      	movs	r3, #0
 800ca64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d101      	bne.n	800ca74 <HAL_TIM_ConfigClockSource+0x1c>
 800ca70:	2302      	movs	r3, #2
 800ca72:	e0b4      	b.n	800cbde <HAL_TIM_ConfigClockSource+0x186>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2202      	movs	r2, #2
 800ca80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ca92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800caac:	d03e      	beq.n	800cb2c <HAL_TIM_ConfigClockSource+0xd4>
 800caae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cab2:	f200 8087 	bhi.w	800cbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800cab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caba:	f000 8086 	beq.w	800cbca <HAL_TIM_ConfigClockSource+0x172>
 800cabe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cac2:	d87f      	bhi.n	800cbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800cac4:	2b70      	cmp	r3, #112	; 0x70
 800cac6:	d01a      	beq.n	800cafe <HAL_TIM_ConfigClockSource+0xa6>
 800cac8:	2b70      	cmp	r3, #112	; 0x70
 800caca:	d87b      	bhi.n	800cbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800cacc:	2b60      	cmp	r3, #96	; 0x60
 800cace:	d050      	beq.n	800cb72 <HAL_TIM_ConfigClockSource+0x11a>
 800cad0:	2b60      	cmp	r3, #96	; 0x60
 800cad2:	d877      	bhi.n	800cbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800cad4:	2b50      	cmp	r3, #80	; 0x50
 800cad6:	d03c      	beq.n	800cb52 <HAL_TIM_ConfigClockSource+0xfa>
 800cad8:	2b50      	cmp	r3, #80	; 0x50
 800cada:	d873      	bhi.n	800cbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800cadc:	2b40      	cmp	r3, #64	; 0x40
 800cade:	d058      	beq.n	800cb92 <HAL_TIM_ConfigClockSource+0x13a>
 800cae0:	2b40      	cmp	r3, #64	; 0x40
 800cae2:	d86f      	bhi.n	800cbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800cae4:	2b30      	cmp	r3, #48	; 0x30
 800cae6:	d064      	beq.n	800cbb2 <HAL_TIM_ConfigClockSource+0x15a>
 800cae8:	2b30      	cmp	r3, #48	; 0x30
 800caea:	d86b      	bhi.n	800cbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800caec:	2b20      	cmp	r3, #32
 800caee:	d060      	beq.n	800cbb2 <HAL_TIM_ConfigClockSource+0x15a>
 800caf0:	2b20      	cmp	r3, #32
 800caf2:	d867      	bhi.n	800cbc4 <HAL_TIM_ConfigClockSource+0x16c>
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d05c      	beq.n	800cbb2 <HAL_TIM_ConfigClockSource+0x15a>
 800caf8:	2b10      	cmp	r3, #16
 800cafa:	d05a      	beq.n	800cbb2 <HAL_TIM_ConfigClockSource+0x15a>
 800cafc:	e062      	b.n	800cbc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6818      	ldr	r0, [r3, #0]
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	6899      	ldr	r1, [r3, #8]
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	685a      	ldr	r2, [r3, #4]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	f000 f9ad 	bl	800ce6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cb20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	68ba      	ldr	r2, [r7, #8]
 800cb28:	609a      	str	r2, [r3, #8]
      break;
 800cb2a:	e04f      	b.n	800cbcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6818      	ldr	r0, [r3, #0]
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	6899      	ldr	r1, [r3, #8]
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	685a      	ldr	r2, [r3, #4]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	f000 f996 	bl	800ce6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	689a      	ldr	r2, [r3, #8]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb4e:	609a      	str	r2, [r3, #8]
      break;
 800cb50:	e03c      	b.n	800cbcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6818      	ldr	r0, [r3, #0]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	6859      	ldr	r1, [r3, #4]
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	f000 f90a 	bl	800cd78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2150      	movs	r1, #80	; 0x50
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f000 f963 	bl	800ce36 <TIM_ITRx_SetConfig>
      break;
 800cb70:	e02c      	b.n	800cbcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6818      	ldr	r0, [r3, #0]
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	6859      	ldr	r1, [r3, #4]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	f000 f929 	bl	800cdd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2160      	movs	r1, #96	; 0x60
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f000 f953 	bl	800ce36 <TIM_ITRx_SetConfig>
      break;
 800cb90:	e01c      	b.n	800cbcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6818      	ldr	r0, [r3, #0]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	6859      	ldr	r1, [r3, #4]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	461a      	mov	r2, r3
 800cba0:	f000 f8ea 	bl	800cd78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2140      	movs	r1, #64	; 0x40
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 f943 	bl	800ce36 <TIM_ITRx_SetConfig>
      break;
 800cbb0:	e00c      	b.n	800cbcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	4610      	mov	r0, r2
 800cbbe:	f000 f93a 	bl	800ce36 <TIM_ITRx_SetConfig>
      break;
 800cbc2:	e003      	b.n	800cbcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	73fb      	strb	r3, [r7, #15]
      break;
 800cbc8:	e000      	b.n	800cbcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cbca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cbe6:	b480      	push	{r7}
 800cbe8:	b083      	sub	sp, #12
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cbee:	bf00      	nop
 800cbf0:	370c      	adds	r7, #12
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b083      	sub	sp, #12
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc02:	bf00      	nop
 800cc04:	370c      	adds	r7, #12
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc0e:	b480      	push	{r7}
 800cc10:	b083      	sub	sp, #12
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc16:	bf00      	nop
 800cc18:	370c      	adds	r7, #12
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr

0800cc22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc22:	b480      	push	{r7}
 800cc24:	b083      	sub	sp, #12
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc2a:	bf00      	nop
 800cc2c:	370c      	adds	r7, #12
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
	...

0800cc38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4a40      	ldr	r2, [pc, #256]	; (800cd4c <TIM_Base_SetConfig+0x114>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d013      	beq.n	800cc78 <TIM_Base_SetConfig+0x40>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc56:	d00f      	beq.n	800cc78 <TIM_Base_SetConfig+0x40>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a3d      	ldr	r2, [pc, #244]	; (800cd50 <TIM_Base_SetConfig+0x118>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d00b      	beq.n	800cc78 <TIM_Base_SetConfig+0x40>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4a3c      	ldr	r2, [pc, #240]	; (800cd54 <TIM_Base_SetConfig+0x11c>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d007      	beq.n	800cc78 <TIM_Base_SetConfig+0x40>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4a3b      	ldr	r2, [pc, #236]	; (800cd58 <TIM_Base_SetConfig+0x120>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d003      	beq.n	800cc78 <TIM_Base_SetConfig+0x40>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	4a3a      	ldr	r2, [pc, #232]	; (800cd5c <TIM_Base_SetConfig+0x124>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d108      	bne.n	800cc8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	4a2f      	ldr	r2, [pc, #188]	; (800cd4c <TIM_Base_SetConfig+0x114>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d02b      	beq.n	800ccea <TIM_Base_SetConfig+0xb2>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc98:	d027      	beq.n	800ccea <TIM_Base_SetConfig+0xb2>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4a2c      	ldr	r2, [pc, #176]	; (800cd50 <TIM_Base_SetConfig+0x118>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d023      	beq.n	800ccea <TIM_Base_SetConfig+0xb2>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a2b      	ldr	r2, [pc, #172]	; (800cd54 <TIM_Base_SetConfig+0x11c>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d01f      	beq.n	800ccea <TIM_Base_SetConfig+0xb2>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a2a      	ldr	r2, [pc, #168]	; (800cd58 <TIM_Base_SetConfig+0x120>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d01b      	beq.n	800ccea <TIM_Base_SetConfig+0xb2>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4a29      	ldr	r2, [pc, #164]	; (800cd5c <TIM_Base_SetConfig+0x124>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d017      	beq.n	800ccea <TIM_Base_SetConfig+0xb2>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a28      	ldr	r2, [pc, #160]	; (800cd60 <TIM_Base_SetConfig+0x128>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d013      	beq.n	800ccea <TIM_Base_SetConfig+0xb2>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a27      	ldr	r2, [pc, #156]	; (800cd64 <TIM_Base_SetConfig+0x12c>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d00f      	beq.n	800ccea <TIM_Base_SetConfig+0xb2>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4a26      	ldr	r2, [pc, #152]	; (800cd68 <TIM_Base_SetConfig+0x130>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d00b      	beq.n	800ccea <TIM_Base_SetConfig+0xb2>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a25      	ldr	r2, [pc, #148]	; (800cd6c <TIM_Base_SetConfig+0x134>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d007      	beq.n	800ccea <TIM_Base_SetConfig+0xb2>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4a24      	ldr	r2, [pc, #144]	; (800cd70 <TIM_Base_SetConfig+0x138>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d003      	beq.n	800ccea <TIM_Base_SetConfig+0xb2>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	4a23      	ldr	r2, [pc, #140]	; (800cd74 <TIM_Base_SetConfig+0x13c>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d108      	bne.n	800ccfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	695b      	ldr	r3, [r3, #20]
 800cd06:	4313      	orrs	r3, r2
 800cd08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	689a      	ldr	r2, [r3, #8]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a0a      	ldr	r2, [pc, #40]	; (800cd4c <TIM_Base_SetConfig+0x114>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d003      	beq.n	800cd30 <TIM_Base_SetConfig+0xf8>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4a0c      	ldr	r2, [pc, #48]	; (800cd5c <TIM_Base_SetConfig+0x124>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d103      	bne.n	800cd38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	691a      	ldr	r2, [r3, #16]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	615a      	str	r2, [r3, #20]
}
 800cd3e:	bf00      	nop
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	40010000 	.word	0x40010000
 800cd50:	40000400 	.word	0x40000400
 800cd54:	40000800 	.word	0x40000800
 800cd58:	40000c00 	.word	0x40000c00
 800cd5c:	40010400 	.word	0x40010400
 800cd60:	40014000 	.word	0x40014000
 800cd64:	40014400 	.word	0x40014400
 800cd68:	40014800 	.word	0x40014800
 800cd6c:	40001800 	.word	0x40001800
 800cd70:	40001c00 	.word	0x40001c00
 800cd74:	40002000 	.word	0x40002000

0800cd78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b087      	sub	sp, #28
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6a1b      	ldr	r3, [r3, #32]
 800cd88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6a1b      	ldr	r3, [r3, #32]
 800cd8e:	f023 0201 	bic.w	r2, r3, #1
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	699b      	ldr	r3, [r3, #24]
 800cd9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cda2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	011b      	lsls	r3, r3, #4
 800cda8:	693a      	ldr	r2, [r7, #16]
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	f023 030a 	bic.w	r3, r3, #10
 800cdb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cdb6:	697a      	ldr	r2, [r7, #20]
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	693a      	ldr	r2, [r7, #16]
 800cdc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	621a      	str	r2, [r3, #32]
}
 800cdca:	bf00      	nop
 800cdcc:	371c      	adds	r7, #28
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	b087      	sub	sp, #28
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	60f8      	str	r0, [r7, #12]
 800cdde:	60b9      	str	r1, [r7, #8]
 800cde0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6a1b      	ldr	r3, [r3, #32]
 800cde6:	f023 0210 	bic.w	r2, r3, #16
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6a1b      	ldr	r3, [r3, #32]
 800cdf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	031b      	lsls	r3, r3, #12
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	011b      	lsls	r3, r3, #4
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	621a      	str	r2, [r3, #32]
}
 800ce2a:	bf00      	nop
 800ce2c:	371c      	adds	r7, #28
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr

0800ce36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce36:	b480      	push	{r7}
 800ce38:	b085      	sub	sp, #20
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
 800ce3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	f043 0307 	orr.w	r3, r3, #7
 800ce58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	609a      	str	r2, [r3, #8]
}
 800ce60:	bf00      	nop
 800ce62:	3714      	adds	r7, #20
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b087      	sub	sp, #28
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
 800ce78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	021a      	lsls	r2, r3, #8
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	431a      	orrs	r2, r3
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	4313      	orrs	r3, r2
 800ce94:	697a      	ldr	r2, [r7, #20]
 800ce96:	4313      	orrs	r3, r2
 800ce98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	697a      	ldr	r2, [r7, #20]
 800ce9e:	609a      	str	r2, [r3, #8]
}
 800cea0:	bf00      	nop
 800cea2:	371c      	adds	r7, #28
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d101      	bne.n	800cec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cec0:	2302      	movs	r3, #2
 800cec2:	e05a      	b.n	800cf7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2202      	movs	r2, #2
 800ced0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a21      	ldr	r2, [pc, #132]	; (800cf88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d022      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf10:	d01d      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a1d      	ldr	r2, [pc, #116]	; (800cf8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d018      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a1b      	ldr	r2, [pc, #108]	; (800cf90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d013      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a1a      	ldr	r2, [pc, #104]	; (800cf94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d00e      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a18      	ldr	r2, [pc, #96]	; (800cf98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d009      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a17      	ldr	r2, [pc, #92]	; (800cf9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d004      	beq.n	800cf4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a15      	ldr	r2, [pc, #84]	; (800cfa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d10c      	bne.n	800cf68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	40010000 	.word	0x40010000
 800cf8c:	40000400 	.word	0x40000400
 800cf90:	40000800 	.word	0x40000800
 800cf94:	40000c00 	.word	0x40000c00
 800cf98:	40010400 	.word	0x40010400
 800cf9c:	40014000 	.word	0x40014000
 800cfa0:	40001800 	.word	0x40001800

0800cfa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d101      	bne.n	800cfde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	e03f      	b.n	800d05e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d106      	bne.n	800cff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2200      	movs	r2, #0
 800cfee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7f7 fa16 	bl	8004424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2224      	movs	r2, #36	; 0x24
 800cffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	68da      	ldr	r2, [r3, #12]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d00e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 fe2b 	bl	800dc6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	691a      	ldr	r2, [r3, #16]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	695a      	ldr	r2, [r3, #20]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	68da      	ldr	r2, [r3, #12]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2220      	movs	r2, #32
 800d050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2220      	movs	r2, #32
 800d058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d05c:	2300      	movs	r3, #0
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b084      	sub	sp, #16
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	60f8      	str	r0, [r7, #12]
 800d06e:	60b9      	str	r1, [r7, #8]
 800d070:	4613      	mov	r3, r2
 800d072:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b20      	cmp	r3, #32
 800d07e:	d11d      	bne.n	800d0bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d002      	beq.n	800d08c <HAL_UART_Receive_IT+0x26>
 800d086:	88fb      	ldrh	r3, [r7, #6]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d08c:	2301      	movs	r3, #1
 800d08e:	e016      	b.n	800d0be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d096:	2b01      	cmp	r3, #1
 800d098:	d101      	bne.n	800d09e <HAL_UART_Receive_IT+0x38>
 800d09a:	2302      	movs	r3, #2
 800d09c:	e00f      	b.n	800d0be <HAL_UART_Receive_IT+0x58>
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d0ac:	88fb      	ldrh	r3, [r7, #6]
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	68b9      	ldr	r1, [r7, #8]
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f000 fbd9 	bl	800d86a <UART_Start_Receive_IT>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	e000      	b.n	800d0be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800d0bc:	2302      	movs	r3, #2
  }
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
	...

0800d0c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b08c      	sub	sp, #48	; 0x30
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	2b20      	cmp	r3, #32
 800d0e0:	d165      	bne.n	800d1ae <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d002      	beq.n	800d0ee <HAL_UART_Transmit_DMA+0x26>
 800d0e8:	88fb      	ldrh	r3, [r7, #6]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d101      	bne.n	800d0f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e05e      	b.n	800d1b0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d101      	bne.n	800d100 <HAL_UART_Transmit_DMA+0x38>
 800d0fc:	2302      	movs	r3, #2
 800d0fe:	e057      	b.n	800d1b0 <HAL_UART_Transmit_DMA+0xe8>
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	88fa      	ldrh	r2, [r7, #6]
 800d112:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	88fa      	ldrh	r2, [r7, #6]
 800d118:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2200      	movs	r2, #0
 800d11e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2221      	movs	r2, #33	; 0x21
 800d124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d12c:	4a22      	ldr	r2, [pc, #136]	; (800d1b8 <HAL_UART_Transmit_DMA+0xf0>)
 800d12e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d134:	4a21      	ldr	r2, [pc, #132]	; (800d1bc <HAL_UART_Transmit_DMA+0xf4>)
 800d136:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d13c:	4a20      	ldr	r2, [pc, #128]	; (800d1c0 <HAL_UART_Transmit_DMA+0xf8>)
 800d13e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d144:	2200      	movs	r2, #0
 800d146:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800d148:	f107 0308 	add.w	r3, r7, #8
 800d14c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d154:	6819      	ldr	r1, [r3, #0]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	3304      	adds	r3, #4
 800d15c:	461a      	mov	r2, r3
 800d15e:	88fb      	ldrh	r3, [r7, #6]
 800d160:	f7fc fe3c 	bl	8009ddc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d16c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	3314      	adds	r3, #20
 800d17c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	e853 3f00 	ldrex	r3, [r3]
 800d184:	617b      	str	r3, [r7, #20]
   return(result);
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d18c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3314      	adds	r3, #20
 800d194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d196:	627a      	str	r2, [r7, #36]	; 0x24
 800d198:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19a:	6a39      	ldr	r1, [r7, #32]
 800d19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d19e:	e841 2300 	strex	r3, r2, [r1]
 800d1a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1e5      	bne.n	800d176 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	e000      	b.n	800d1b0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800d1ae:	2302      	movs	r3, #2
  }
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3730      	adds	r7, #48	; 0x30
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	0800d721 	.word	0x0800d721
 800d1bc:	0800d7bb 	.word	0x0800d7bb
 800d1c0:	0800d7d7 	.word	0x0800d7d7

0800d1c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b0ba      	sub	sp, #232	; 0xe8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	695b      	ldr	r3, [r3, #20]
 800d1e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1fa:	f003 030f 	and.w	r3, r3, #15
 800d1fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d206:	2b00      	cmp	r3, #0
 800d208:	d10f      	bne.n	800d22a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d20e:	f003 0320 	and.w	r3, r3, #32
 800d212:	2b00      	cmp	r3, #0
 800d214:	d009      	beq.n	800d22a <HAL_UART_IRQHandler+0x66>
 800d216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d21a:	f003 0320 	and.w	r3, r3, #32
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d003      	beq.n	800d22a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 fc66 	bl	800daf4 <UART_Receive_IT>
      return;
 800d228:	e256      	b.n	800d6d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d22a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f000 80de 	beq.w	800d3f0 <HAL_UART_IRQHandler+0x22c>
 800d234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d238:	f003 0301 	and.w	r3, r3, #1
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d106      	bne.n	800d24e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d244:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 80d1 	beq.w	800d3f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d252:	f003 0301 	and.w	r3, r3, #1
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00b      	beq.n	800d272 <HAL_UART_IRQHandler+0xae>
 800d25a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d25e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d262:	2b00      	cmp	r3, #0
 800d264:	d005      	beq.n	800d272 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26a:	f043 0201 	orr.w	r2, r3, #1
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d276:	f003 0304 	and.w	r3, r3, #4
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00b      	beq.n	800d296 <HAL_UART_IRQHandler+0xd2>
 800d27e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	2b00      	cmp	r3, #0
 800d288:	d005      	beq.n	800d296 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d28e:	f043 0202 	orr.w	r2, r3, #2
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d29a:	f003 0302 	and.w	r3, r3, #2
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00b      	beq.n	800d2ba <HAL_UART_IRQHandler+0xf6>
 800d2a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2a6:	f003 0301 	and.w	r3, r3, #1
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d005      	beq.n	800d2ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b2:	f043 0204 	orr.w	r2, r3, #4
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2be:	f003 0308 	and.w	r3, r3, #8
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d011      	beq.n	800d2ea <HAL_UART_IRQHandler+0x126>
 800d2c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2ca:	f003 0320 	and.w	r3, r3, #32
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d105      	bne.n	800d2de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d2d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2d6:	f003 0301 	and.w	r3, r3, #1
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d005      	beq.n	800d2ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e2:	f043 0208 	orr.w	r2, r3, #8
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 81ed 	beq.w	800d6ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2f8:	f003 0320 	and.w	r3, r3, #32
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d008      	beq.n	800d312 <HAL_UART_IRQHandler+0x14e>
 800d300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d304:	f003 0320 	and.w	r3, r3, #32
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d002      	beq.n	800d312 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 fbf1 	bl	800daf4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	695b      	ldr	r3, [r3, #20]
 800d318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d31c:	2b40      	cmp	r3, #64	; 0x40
 800d31e:	bf0c      	ite	eq
 800d320:	2301      	moveq	r3, #1
 800d322:	2300      	movne	r3, #0
 800d324:	b2db      	uxtb	r3, r3
 800d326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32e:	f003 0308 	and.w	r3, r3, #8
 800d332:	2b00      	cmp	r3, #0
 800d334:	d103      	bne.n	800d33e <HAL_UART_IRQHandler+0x17a>
 800d336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d04f      	beq.n	800d3de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 faf9 	bl	800d936 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d34e:	2b40      	cmp	r3, #64	; 0x40
 800d350:	d141      	bne.n	800d3d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	3314      	adds	r3, #20
 800d358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d35c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d360:	e853 3f00 	ldrex	r3, [r3]
 800d364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d368:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d36c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	3314      	adds	r3, #20
 800d37a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d37e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d38a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d38e:	e841 2300 	strex	r3, r2, [r1]
 800d392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1d9      	bne.n	800d352 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d013      	beq.n	800d3ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3aa:	4a7d      	ldr	r2, [pc, #500]	; (800d5a0 <HAL_UART_IRQHandler+0x3dc>)
 800d3ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fc fdda 	bl	8009f6c <HAL_DMA_Abort_IT>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d016      	beq.n	800d3ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3cc:	e00e      	b.n	800d3ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 f990 	bl	800d6f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3d4:	e00a      	b.n	800d3ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 f98c 	bl	800d6f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3dc:	e006      	b.n	800d3ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 f988 	bl	800d6f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d3ea:	e170      	b.n	800d6ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3ec:	bf00      	nop
    return;
 800d3ee:	e16e      	b.n	800d6ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	f040 814a 	bne.w	800d68e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d3fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3fe:	f003 0310 	and.w	r3, r3, #16
 800d402:	2b00      	cmp	r3, #0
 800d404:	f000 8143 	beq.w	800d68e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d40c:	f003 0310 	and.w	r3, r3, #16
 800d410:	2b00      	cmp	r3, #0
 800d412:	f000 813c 	beq.w	800d68e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d416:	2300      	movs	r3, #0
 800d418:	60bb      	str	r3, [r7, #8]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	60bb      	str	r3, [r7, #8]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	60bb      	str	r3, [r7, #8]
 800d42a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	695b      	ldr	r3, [r3, #20]
 800d432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d436:	2b40      	cmp	r3, #64	; 0x40
 800d438:	f040 80b4 	bne.w	800d5a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d448:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f000 8140 	beq.w	800d6d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d45a:	429a      	cmp	r2, r3
 800d45c:	f080 8139 	bcs.w	800d6d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d466:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46c:	69db      	ldr	r3, [r3, #28]
 800d46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d472:	f000 8088 	beq.w	800d586 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	330c      	adds	r3, #12
 800d47c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d480:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d484:	e853 3f00 	ldrex	r3, [r3]
 800d488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d48c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	330c      	adds	r3, #12
 800d49e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d4a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d4a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d4ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d4b2:	e841 2300 	strex	r3, r2, [r1]
 800d4b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d4ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1d9      	bne.n	800d476 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	3314      	adds	r3, #20
 800d4c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4cc:	e853 3f00 	ldrex	r3, [r3]
 800d4d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d4d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4d4:	f023 0301 	bic.w	r3, r3, #1
 800d4d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3314      	adds	r3, #20
 800d4e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d4e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d4ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d4ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d4f2:	e841 2300 	strex	r3, r2, [r1]
 800d4f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d4f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1e1      	bne.n	800d4c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	3314      	adds	r3, #20
 800d504:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d508:	e853 3f00 	ldrex	r3, [r3]
 800d50c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d50e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3314      	adds	r3, #20
 800d51e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d522:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d524:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d526:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d528:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d52a:	e841 2300 	strex	r3, r2, [r1]
 800d52e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1e3      	bne.n	800d4fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2220      	movs	r2, #32
 800d53a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	330c      	adds	r3, #12
 800d54a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d54e:	e853 3f00 	ldrex	r3, [r3]
 800d552:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d556:	f023 0310 	bic.w	r3, r3, #16
 800d55a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	330c      	adds	r3, #12
 800d564:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d568:	65ba      	str	r2, [r7, #88]	; 0x58
 800d56a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d56c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d56e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d570:	e841 2300 	strex	r3, r2, [r1]
 800d574:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1e3      	bne.n	800d544 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d580:	4618      	mov	r0, r3
 800d582:	f7fc fc83 	bl	8009e8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d58e:	b29b      	uxth	r3, r3
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	b29b      	uxth	r3, r3
 800d594:	4619      	mov	r1, r3
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 f8b6 	bl	800d708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d59c:	e099      	b.n	800d6d2 <HAL_UART_IRQHandler+0x50e>
 800d59e:	bf00      	nop
 800d5a0:	0800d9fd 	.word	0x0800d9fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	f000 808b 	beq.w	800d6d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d5c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	f000 8086 	beq.w	800d6d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	330c      	adds	r3, #12
 800d5d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d4:	e853 3f00 	ldrex	r3, [r3]
 800d5d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d5e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	330c      	adds	r3, #12
 800d5ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d5ee:	647a      	str	r2, [r7, #68]	; 0x44
 800d5f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d5f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5f6:	e841 2300 	strex	r3, r2, [r1]
 800d5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1e3      	bne.n	800d5ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	3314      	adds	r3, #20
 800d608:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	e853 3f00 	ldrex	r3, [r3]
 800d610:	623b      	str	r3, [r7, #32]
   return(result);
 800d612:	6a3b      	ldr	r3, [r7, #32]
 800d614:	f023 0301 	bic.w	r3, r3, #1
 800d618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	3314      	adds	r3, #20
 800d622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d626:	633a      	str	r2, [r7, #48]	; 0x30
 800d628:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d62c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d62e:	e841 2300 	strex	r3, r2, [r1]
 800d632:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1e3      	bne.n	800d602 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2220      	movs	r2, #32
 800d63e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	330c      	adds	r3, #12
 800d64e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	e853 3f00 	ldrex	r3, [r3]
 800d656:	60fb      	str	r3, [r7, #12]
   return(result);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f023 0310 	bic.w	r3, r3, #16
 800d65e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	330c      	adds	r3, #12
 800d668:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d66c:	61fa      	str	r2, [r7, #28]
 800d66e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d670:	69b9      	ldr	r1, [r7, #24]
 800d672:	69fa      	ldr	r2, [r7, #28]
 800d674:	e841 2300 	strex	r3, r2, [r1]
 800d678:	617b      	str	r3, [r7, #20]
   return(result);
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1e3      	bne.n	800d648 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d684:	4619      	mov	r1, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f83e 	bl	800d708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d68c:	e023      	b.n	800d6d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d696:	2b00      	cmp	r3, #0
 800d698:	d009      	beq.n	800d6ae <HAL_UART_IRQHandler+0x4ea>
 800d69a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d003      	beq.n	800d6ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 f9bc 	bl	800da24 <UART_Transmit_IT>
    return;
 800d6ac:	e014      	b.n	800d6d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00e      	beq.n	800d6d8 <HAL_UART_IRQHandler+0x514>
 800d6ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d008      	beq.n	800d6d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f9fc 	bl	800dac4 <UART_EndTransmit_IT>
    return;
 800d6cc:	e004      	b.n	800d6d8 <HAL_UART_IRQHandler+0x514>
    return;
 800d6ce:	bf00      	nop
 800d6d0:	e002      	b.n	800d6d8 <HAL_UART_IRQHandler+0x514>
      return;
 800d6d2:	bf00      	nop
 800d6d4:	e000      	b.n	800d6d8 <HAL_UART_IRQHandler+0x514>
      return;
 800d6d6:	bf00      	nop
  }
}
 800d6d8:	37e8      	adds	r7, #232	; 0xe8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop

0800d6e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d6e8:	bf00      	nop
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d6fc:	bf00      	nop
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d708:	b480      	push	{r7}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	460b      	mov	r3, r1
 800d712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d714:	bf00      	nop
 800d716:	370c      	adds	r7, #12
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b090      	sub	sp, #64	; 0x40
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d137      	bne.n	800d7ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800d73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d73e:	2200      	movs	r2, #0
 800d740:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	3314      	adds	r3, #20
 800d748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74c:	e853 3f00 	ldrex	r3, [r3]
 800d750:	623b      	str	r3, [r7, #32]
   return(result);
 800d752:	6a3b      	ldr	r3, [r7, #32]
 800d754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d758:	63bb      	str	r3, [r7, #56]	; 0x38
 800d75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	3314      	adds	r3, #20
 800d760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d762:	633a      	str	r2, [r7, #48]	; 0x30
 800d764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d76a:	e841 2300 	strex	r3, r2, [r1]
 800d76e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d772:	2b00      	cmp	r3, #0
 800d774:	d1e5      	bne.n	800d742 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	330c      	adds	r3, #12
 800d77c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	e853 3f00 	ldrex	r3, [r3]
 800d784:	60fb      	str	r3, [r7, #12]
   return(result);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d78c:	637b      	str	r3, [r7, #52]	; 0x34
 800d78e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	330c      	adds	r3, #12
 800d794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d796:	61fa      	str	r2, [r7, #28]
 800d798:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d79a:	69b9      	ldr	r1, [r7, #24]
 800d79c:	69fa      	ldr	r2, [r7, #28]
 800d79e:	e841 2300 	strex	r3, r2, [r1]
 800d7a2:	617b      	str	r3, [r7, #20]
   return(result);
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d1e5      	bne.n	800d776 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d7aa:	e002      	b.n	800d7b2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d7ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d7ae:	f7f5 f92f 	bl	8002a10 <HAL_UART_TxCpltCallback>
}
 800d7b2:	bf00      	nop
 800d7b4:	3740      	adds	r7, #64	; 0x40
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b084      	sub	sp, #16
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d7c8:	68f8      	ldr	r0, [r7, #12]
 800d7ca:	f7ff ff89 	bl	800d6e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7ce:	bf00      	nop
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b084      	sub	sp, #16
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	695b      	ldr	r3, [r3, #20]
 800d7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7f2:	2b80      	cmp	r3, #128	; 0x80
 800d7f4:	bf0c      	ite	eq
 800d7f6:	2301      	moveq	r3, #1
 800d7f8:	2300      	movne	r3, #0
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d804:	b2db      	uxtb	r3, r3
 800d806:	2b21      	cmp	r3, #33	; 0x21
 800d808:	d108      	bne.n	800d81c <UART_DMAError+0x46>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d005      	beq.n	800d81c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	2200      	movs	r2, #0
 800d814:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d816:	68b8      	ldr	r0, [r7, #8]
 800d818:	f000 f865 	bl	800d8e6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	695b      	ldr	r3, [r3, #20]
 800d822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d826:	2b40      	cmp	r3, #64	; 0x40
 800d828:	bf0c      	ite	eq
 800d82a:	2301      	moveq	r3, #1
 800d82c:	2300      	movne	r3, #0
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	2b22      	cmp	r3, #34	; 0x22
 800d83c:	d108      	bne.n	800d850 <UART_DMAError+0x7a>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d005      	beq.n	800d850 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2200      	movs	r2, #0
 800d848:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800d84a:	68b8      	ldr	r0, [r7, #8]
 800d84c:	f000 f873 	bl	800d936 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d854:	f043 0210 	orr.w	r2, r3, #16
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d85c:	68b8      	ldr	r0, [r7, #8]
 800d85e:	f7ff ff49 	bl	800d6f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d862:	bf00      	nop
 800d864:	3710      	adds	r7, #16
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}

0800d86a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d86a:	b480      	push	{r7}
 800d86c:	b085      	sub	sp, #20
 800d86e:	af00      	add	r7, sp, #0
 800d870:	60f8      	str	r0, [r7, #12]
 800d872:	60b9      	str	r1, [r7, #8]
 800d874:	4613      	mov	r3, r2
 800d876:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	68ba      	ldr	r2, [r7, #8]
 800d87c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	88fa      	ldrh	r2, [r7, #6]
 800d882:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	88fa      	ldrh	r2, [r7, #6]
 800d888:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2200      	movs	r2, #0
 800d88e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2222      	movs	r2, #34	; 0x22
 800d894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2200      	movs	r2, #0
 800d89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	691b      	ldr	r3, [r3, #16]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d007      	beq.n	800d8b8 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	68da      	ldr	r2, [r3, #12]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	695a      	ldr	r2, [r3, #20]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f042 0201 	orr.w	r2, r2, #1
 800d8c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68da      	ldr	r2, [r3, #12]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f042 0220 	orr.w	r2, r2, #32
 800d8d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3714      	adds	r7, #20
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr

0800d8e6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d8e6:	b480      	push	{r7}
 800d8e8:	b089      	sub	sp, #36	; 0x24
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	330c      	adds	r3, #12
 800d8f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	e853 3f00 	ldrex	r3, [r3]
 800d8fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d904:	61fb      	str	r3, [r7, #28]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	330c      	adds	r3, #12
 800d90c:	69fa      	ldr	r2, [r7, #28]
 800d90e:	61ba      	str	r2, [r7, #24]
 800d910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d912:	6979      	ldr	r1, [r7, #20]
 800d914:	69ba      	ldr	r2, [r7, #24]
 800d916:	e841 2300 	strex	r3, r2, [r1]
 800d91a:	613b      	str	r3, [r7, #16]
   return(result);
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1e5      	bne.n	800d8ee <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2220      	movs	r2, #32
 800d926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d92a:	bf00      	nop
 800d92c:	3724      	adds	r7, #36	; 0x24
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr

0800d936 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d936:	b480      	push	{r7}
 800d938:	b095      	sub	sp, #84	; 0x54
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	330c      	adds	r3, #12
 800d944:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d948:	e853 3f00 	ldrex	r3, [r3]
 800d94c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d950:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d954:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	330c      	adds	r3, #12
 800d95c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d95e:	643a      	str	r2, [r7, #64]	; 0x40
 800d960:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d962:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d964:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d966:	e841 2300 	strex	r3, r2, [r1]
 800d96a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1e5      	bne.n	800d93e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3314      	adds	r3, #20
 800d978:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97a:	6a3b      	ldr	r3, [r7, #32]
 800d97c:	e853 3f00 	ldrex	r3, [r3]
 800d980:	61fb      	str	r3, [r7, #28]
   return(result);
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	f023 0301 	bic.w	r3, r3, #1
 800d988:	64bb      	str	r3, [r7, #72]	; 0x48
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	3314      	adds	r3, #20
 800d990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d992:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d994:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d99a:	e841 2300 	strex	r3, r2, [r1]
 800d99e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d1e5      	bne.n	800d972 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d119      	bne.n	800d9e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	330c      	adds	r3, #12
 800d9b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	e853 3f00 	ldrex	r3, [r3]
 800d9bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	f023 0310 	bic.w	r3, r3, #16
 800d9c4:	647b      	str	r3, [r7, #68]	; 0x44
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	330c      	adds	r3, #12
 800d9cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9ce:	61ba      	str	r2, [r7, #24]
 800d9d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d2:	6979      	ldr	r1, [r7, #20]
 800d9d4:	69ba      	ldr	r2, [r7, #24]
 800d9d6:	e841 2300 	strex	r3, r2, [r1]
 800d9da:	613b      	str	r3, [r7, #16]
   return(result);
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d1e5      	bne.n	800d9ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2220      	movs	r2, #32
 800d9e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d9f0:	bf00      	nop
 800d9f2:	3754      	adds	r7, #84	; 0x54
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2200      	movs	r2, #0
 800da0e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2200      	movs	r2, #0
 800da14:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f7ff fe6c 	bl	800d6f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da1c:	bf00      	nop
 800da1e:	3710      	adds	r7, #16
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da32:	b2db      	uxtb	r3, r3
 800da34:	2b21      	cmp	r3, #33	; 0x21
 800da36:	d13e      	bne.n	800dab6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da40:	d114      	bne.n	800da6c <UART_Transmit_IT+0x48>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d110      	bne.n	800da6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6a1b      	ldr	r3, [r3, #32]
 800da4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	881b      	ldrh	r3, [r3, #0]
 800da54:	461a      	mov	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6a1b      	ldr	r3, [r3, #32]
 800da64:	1c9a      	adds	r2, r3, #2
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	621a      	str	r2, [r3, #32]
 800da6a:	e008      	b.n	800da7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6a1b      	ldr	r3, [r3, #32]
 800da70:	1c59      	adds	r1, r3, #1
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	6211      	str	r1, [r2, #32]
 800da76:	781a      	ldrb	r2, [r3, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800da82:	b29b      	uxth	r3, r3
 800da84:	3b01      	subs	r3, #1
 800da86:	b29b      	uxth	r3, r3
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	4619      	mov	r1, r3
 800da8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d10f      	bne.n	800dab2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	68da      	ldr	r2, [r3, #12]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800daa0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	68da      	ldr	r2, [r3, #12]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dab0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	e000      	b.n	800dab8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dab6:	2302      	movs	r3, #2
  }
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3714      	adds	r7, #20
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68da      	ldr	r2, [r3, #12]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dada:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2220      	movs	r2, #32
 800dae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f7f4 ff93 	bl	8002a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b08c      	sub	sp, #48	; 0x30
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800db02:	b2db      	uxtb	r3, r3
 800db04:	2b22      	cmp	r3, #34	; 0x22
 800db06:	f040 80ab 	bne.w	800dc60 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db12:	d117      	bne.n	800db44 <UART_Receive_IT+0x50>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d113      	bne.n	800db44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800db1c:	2300      	movs	r3, #0
 800db1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db24:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db32:	b29a      	uxth	r2, r3
 800db34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db3c:	1c9a      	adds	r2, r3, #2
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	629a      	str	r2, [r3, #40]	; 0x28
 800db42:	e026      	b.n	800db92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800db4a:	2300      	movs	r3, #0
 800db4c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db56:	d007      	beq.n	800db68 <UART_Receive_IT+0x74>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d10a      	bne.n	800db76 <UART_Receive_IT+0x82>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d106      	bne.n	800db76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db72:	701a      	strb	r2, [r3, #0]
 800db74:	e008      	b.n	800db88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db82:	b2da      	uxtb	r2, r3
 800db84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db8c:	1c5a      	adds	r2, r3, #1
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800db96:	b29b      	uxth	r3, r3
 800db98:	3b01      	subs	r3, #1
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	4619      	mov	r1, r3
 800dba0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d15a      	bne.n	800dc5c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	68da      	ldr	r2, [r3, #12]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f022 0220 	bic.w	r2, r2, #32
 800dbb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68da      	ldr	r2, [r3, #12]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dbc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	695a      	ldr	r2, [r3, #20]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f022 0201 	bic.w	r2, r2, #1
 800dbd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2220      	movs	r2, #32
 800dbda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d135      	bne.n	800dc52 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	330c      	adds	r3, #12
 800dbf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	e853 3f00 	ldrex	r3, [r3]
 800dbfa:	613b      	str	r3, [r7, #16]
   return(result);
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	f023 0310 	bic.w	r3, r3, #16
 800dc02:	627b      	str	r3, [r7, #36]	; 0x24
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	330c      	adds	r3, #12
 800dc0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc0c:	623a      	str	r2, [r7, #32]
 800dc0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc10:	69f9      	ldr	r1, [r7, #28]
 800dc12:	6a3a      	ldr	r2, [r7, #32]
 800dc14:	e841 2300 	strex	r3, r2, [r1]
 800dc18:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d1e5      	bne.n	800dbec <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f003 0310 	and.w	r3, r3, #16
 800dc2a:	2b10      	cmp	r3, #16
 800dc2c:	d10a      	bne.n	800dc44 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dc2e:	2300      	movs	r3, #0
 800dc30:	60fb      	str	r3, [r7, #12]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	60fb      	str	r3, [r7, #12]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	60fb      	str	r3, [r7, #12]
 800dc42:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dc48:	4619      	mov	r1, r3
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff fd5c 	bl	800d708 <HAL_UARTEx_RxEventCallback>
 800dc50:	e002      	b.n	800dc58 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f7f4 fc3e 	bl	80024d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	e002      	b.n	800dc62 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	e000      	b.n	800dc62 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800dc60:	2302      	movs	r3, #2
  }
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3730      	adds	r7, #48	; 0x30
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
	...

0800dc6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc70:	b0c0      	sub	sp, #256	; 0x100
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dc78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	691b      	ldr	r3, [r3, #16]
 800dc80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800dc84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc88:	68d9      	ldr	r1, [r3, #12]
 800dc8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	ea40 0301 	orr.w	r3, r0, r1
 800dc94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dc96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc9a:	689a      	ldr	r2, [r3, #8]
 800dc9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dca0:	691b      	ldr	r3, [r3, #16]
 800dca2:	431a      	orrs	r2, r3
 800dca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dca8:	695b      	ldr	r3, [r3, #20]
 800dcaa:	431a      	orrs	r2, r3
 800dcac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcb0:	69db      	ldr	r3, [r3, #28]
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800dcb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dcc4:	f021 010c 	bic.w	r1, r1, #12
 800dcc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dcd2:	430b      	orrs	r3, r1
 800dcd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dcd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	695b      	ldr	r3, [r3, #20]
 800dcde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800dce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dce6:	6999      	ldr	r1, [r3, #24]
 800dce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	ea40 0301 	orr.w	r3, r0, r1
 800dcf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dcf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	4b8f      	ldr	r3, [pc, #572]	; (800df38 <UART_SetConfig+0x2cc>)
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d005      	beq.n	800dd0c <UART_SetConfig+0xa0>
 800dd00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd04:	681a      	ldr	r2, [r3, #0]
 800dd06:	4b8d      	ldr	r3, [pc, #564]	; (800df3c <UART_SetConfig+0x2d0>)
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d104      	bne.n	800dd16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dd0c:	f7fd fbc6 	bl	800b49c <HAL_RCC_GetPCLK2Freq>
 800dd10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800dd14:	e003      	b.n	800dd1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dd16:	f7fd fbad 	bl	800b474 <HAL_RCC_GetPCLK1Freq>
 800dd1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd22:	69db      	ldr	r3, [r3, #28]
 800dd24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd28:	f040 810c 	bne.w	800df44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dd2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dd30:	2200      	movs	r2, #0
 800dd32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dd36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800dd3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800dd3e:	4622      	mov	r2, r4
 800dd40:	462b      	mov	r3, r5
 800dd42:	1891      	adds	r1, r2, r2
 800dd44:	65b9      	str	r1, [r7, #88]	; 0x58
 800dd46:	415b      	adcs	r3, r3
 800dd48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dd4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dd4e:	4621      	mov	r1, r4
 800dd50:	eb12 0801 	adds.w	r8, r2, r1
 800dd54:	4629      	mov	r1, r5
 800dd56:	eb43 0901 	adc.w	r9, r3, r1
 800dd5a:	f04f 0200 	mov.w	r2, #0
 800dd5e:	f04f 0300 	mov.w	r3, #0
 800dd62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dd66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dd6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dd6e:	4690      	mov	r8, r2
 800dd70:	4699      	mov	r9, r3
 800dd72:	4623      	mov	r3, r4
 800dd74:	eb18 0303 	adds.w	r3, r8, r3
 800dd78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dd7c:	462b      	mov	r3, r5
 800dd7e:	eb49 0303 	adc.w	r3, r9, r3
 800dd82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dd86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dd92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800dd96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	18db      	adds	r3, r3, r3
 800dd9e:	653b      	str	r3, [r7, #80]	; 0x50
 800dda0:	4613      	mov	r3, r2
 800dda2:	eb42 0303 	adc.w	r3, r2, r3
 800dda6:	657b      	str	r3, [r7, #84]	; 0x54
 800dda8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ddac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ddb0:	f7f2 fdbc 	bl	800092c <__aeabi_uldivmod>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	4b61      	ldr	r3, [pc, #388]	; (800df40 <UART_SetConfig+0x2d4>)
 800ddba:	fba3 2302 	umull	r2, r3, r3, r2
 800ddbe:	095b      	lsrs	r3, r3, #5
 800ddc0:	011c      	lsls	r4, r3, #4
 800ddc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ddcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ddd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ddd4:	4642      	mov	r2, r8
 800ddd6:	464b      	mov	r3, r9
 800ddd8:	1891      	adds	r1, r2, r2
 800ddda:	64b9      	str	r1, [r7, #72]	; 0x48
 800dddc:	415b      	adcs	r3, r3
 800ddde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dde0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dde4:	4641      	mov	r1, r8
 800dde6:	eb12 0a01 	adds.w	sl, r2, r1
 800ddea:	4649      	mov	r1, r9
 800ddec:	eb43 0b01 	adc.w	fp, r3, r1
 800ddf0:	f04f 0200 	mov.w	r2, #0
 800ddf4:	f04f 0300 	mov.w	r3, #0
 800ddf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ddfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800de00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800de04:	4692      	mov	sl, r2
 800de06:	469b      	mov	fp, r3
 800de08:	4643      	mov	r3, r8
 800de0a:	eb1a 0303 	adds.w	r3, sl, r3
 800de0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de12:	464b      	mov	r3, r9
 800de14:	eb4b 0303 	adc.w	r3, fp, r3
 800de18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800de1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800de28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800de2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800de30:	460b      	mov	r3, r1
 800de32:	18db      	adds	r3, r3, r3
 800de34:	643b      	str	r3, [r7, #64]	; 0x40
 800de36:	4613      	mov	r3, r2
 800de38:	eb42 0303 	adc.w	r3, r2, r3
 800de3c:	647b      	str	r3, [r7, #68]	; 0x44
 800de3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800de42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800de46:	f7f2 fd71 	bl	800092c <__aeabi_uldivmod>
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	4611      	mov	r1, r2
 800de50:	4b3b      	ldr	r3, [pc, #236]	; (800df40 <UART_SetConfig+0x2d4>)
 800de52:	fba3 2301 	umull	r2, r3, r3, r1
 800de56:	095b      	lsrs	r3, r3, #5
 800de58:	2264      	movs	r2, #100	; 0x64
 800de5a:	fb02 f303 	mul.w	r3, r2, r3
 800de5e:	1acb      	subs	r3, r1, r3
 800de60:	00db      	lsls	r3, r3, #3
 800de62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800de66:	4b36      	ldr	r3, [pc, #216]	; (800df40 <UART_SetConfig+0x2d4>)
 800de68:	fba3 2302 	umull	r2, r3, r3, r2
 800de6c:	095b      	lsrs	r3, r3, #5
 800de6e:	005b      	lsls	r3, r3, #1
 800de70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800de74:	441c      	add	r4, r3
 800de76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800de7a:	2200      	movs	r2, #0
 800de7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800de80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800de84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800de88:	4642      	mov	r2, r8
 800de8a:	464b      	mov	r3, r9
 800de8c:	1891      	adds	r1, r2, r2
 800de8e:	63b9      	str	r1, [r7, #56]	; 0x38
 800de90:	415b      	adcs	r3, r3
 800de92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800de98:	4641      	mov	r1, r8
 800de9a:	1851      	adds	r1, r2, r1
 800de9c:	6339      	str	r1, [r7, #48]	; 0x30
 800de9e:	4649      	mov	r1, r9
 800dea0:	414b      	adcs	r3, r1
 800dea2:	637b      	str	r3, [r7, #52]	; 0x34
 800dea4:	f04f 0200 	mov.w	r2, #0
 800dea8:	f04f 0300 	mov.w	r3, #0
 800deac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800deb0:	4659      	mov	r1, fp
 800deb2:	00cb      	lsls	r3, r1, #3
 800deb4:	4651      	mov	r1, sl
 800deb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800deba:	4651      	mov	r1, sl
 800debc:	00ca      	lsls	r2, r1, #3
 800debe:	4610      	mov	r0, r2
 800dec0:	4619      	mov	r1, r3
 800dec2:	4603      	mov	r3, r0
 800dec4:	4642      	mov	r2, r8
 800dec6:	189b      	adds	r3, r3, r2
 800dec8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800decc:	464b      	mov	r3, r9
 800dece:	460a      	mov	r2, r1
 800ded0:	eb42 0303 	adc.w	r3, r2, r3
 800ded4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ded8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dee4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800dee8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800deec:	460b      	mov	r3, r1
 800deee:	18db      	adds	r3, r3, r3
 800def0:	62bb      	str	r3, [r7, #40]	; 0x28
 800def2:	4613      	mov	r3, r2
 800def4:	eb42 0303 	adc.w	r3, r2, r3
 800def8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800defa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800defe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800df02:	f7f2 fd13 	bl	800092c <__aeabi_uldivmod>
 800df06:	4602      	mov	r2, r0
 800df08:	460b      	mov	r3, r1
 800df0a:	4b0d      	ldr	r3, [pc, #52]	; (800df40 <UART_SetConfig+0x2d4>)
 800df0c:	fba3 1302 	umull	r1, r3, r3, r2
 800df10:	095b      	lsrs	r3, r3, #5
 800df12:	2164      	movs	r1, #100	; 0x64
 800df14:	fb01 f303 	mul.w	r3, r1, r3
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	00db      	lsls	r3, r3, #3
 800df1c:	3332      	adds	r3, #50	; 0x32
 800df1e:	4a08      	ldr	r2, [pc, #32]	; (800df40 <UART_SetConfig+0x2d4>)
 800df20:	fba2 2303 	umull	r2, r3, r2, r3
 800df24:	095b      	lsrs	r3, r3, #5
 800df26:	f003 0207 	and.w	r2, r3, #7
 800df2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4422      	add	r2, r4
 800df32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800df34:	e105      	b.n	800e142 <UART_SetConfig+0x4d6>
 800df36:	bf00      	nop
 800df38:	40011000 	.word	0x40011000
 800df3c:	40011400 	.word	0x40011400
 800df40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800df44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800df48:	2200      	movs	r2, #0
 800df4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800df4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800df52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800df56:	4642      	mov	r2, r8
 800df58:	464b      	mov	r3, r9
 800df5a:	1891      	adds	r1, r2, r2
 800df5c:	6239      	str	r1, [r7, #32]
 800df5e:	415b      	adcs	r3, r3
 800df60:	627b      	str	r3, [r7, #36]	; 0x24
 800df62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800df66:	4641      	mov	r1, r8
 800df68:	1854      	adds	r4, r2, r1
 800df6a:	4649      	mov	r1, r9
 800df6c:	eb43 0501 	adc.w	r5, r3, r1
 800df70:	f04f 0200 	mov.w	r2, #0
 800df74:	f04f 0300 	mov.w	r3, #0
 800df78:	00eb      	lsls	r3, r5, #3
 800df7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800df7e:	00e2      	lsls	r2, r4, #3
 800df80:	4614      	mov	r4, r2
 800df82:	461d      	mov	r5, r3
 800df84:	4643      	mov	r3, r8
 800df86:	18e3      	adds	r3, r4, r3
 800df88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800df8c:	464b      	mov	r3, r9
 800df8e:	eb45 0303 	adc.w	r3, r5, r3
 800df92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800df96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dfa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800dfa6:	f04f 0200 	mov.w	r2, #0
 800dfaa:	f04f 0300 	mov.w	r3, #0
 800dfae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	008b      	lsls	r3, r1, #2
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	008a      	lsls	r2, r1, #2
 800dfc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800dfc4:	f7f2 fcb2 	bl	800092c <__aeabi_uldivmod>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	460b      	mov	r3, r1
 800dfcc:	4b60      	ldr	r3, [pc, #384]	; (800e150 <UART_SetConfig+0x4e4>)
 800dfce:	fba3 2302 	umull	r2, r3, r3, r2
 800dfd2:	095b      	lsrs	r3, r3, #5
 800dfd4:	011c      	lsls	r4, r3, #4
 800dfd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dfe0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800dfe4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800dfe8:	4642      	mov	r2, r8
 800dfea:	464b      	mov	r3, r9
 800dfec:	1891      	adds	r1, r2, r2
 800dfee:	61b9      	str	r1, [r7, #24]
 800dff0:	415b      	adcs	r3, r3
 800dff2:	61fb      	str	r3, [r7, #28]
 800dff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dff8:	4641      	mov	r1, r8
 800dffa:	1851      	adds	r1, r2, r1
 800dffc:	6139      	str	r1, [r7, #16]
 800dffe:	4649      	mov	r1, r9
 800e000:	414b      	adcs	r3, r1
 800e002:	617b      	str	r3, [r7, #20]
 800e004:	f04f 0200 	mov.w	r2, #0
 800e008:	f04f 0300 	mov.w	r3, #0
 800e00c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e010:	4659      	mov	r1, fp
 800e012:	00cb      	lsls	r3, r1, #3
 800e014:	4651      	mov	r1, sl
 800e016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e01a:	4651      	mov	r1, sl
 800e01c:	00ca      	lsls	r2, r1, #3
 800e01e:	4610      	mov	r0, r2
 800e020:	4619      	mov	r1, r3
 800e022:	4603      	mov	r3, r0
 800e024:	4642      	mov	r2, r8
 800e026:	189b      	adds	r3, r3, r2
 800e028:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e02c:	464b      	mov	r3, r9
 800e02e:	460a      	mov	r2, r1
 800e030:	eb42 0303 	adc.w	r3, r2, r3
 800e034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	2200      	movs	r2, #0
 800e040:	67bb      	str	r3, [r7, #120]	; 0x78
 800e042:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e044:	f04f 0200 	mov.w	r2, #0
 800e048:	f04f 0300 	mov.w	r3, #0
 800e04c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e050:	4649      	mov	r1, r9
 800e052:	008b      	lsls	r3, r1, #2
 800e054:	4641      	mov	r1, r8
 800e056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e05a:	4641      	mov	r1, r8
 800e05c:	008a      	lsls	r2, r1, #2
 800e05e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e062:	f7f2 fc63 	bl	800092c <__aeabi_uldivmod>
 800e066:	4602      	mov	r2, r0
 800e068:	460b      	mov	r3, r1
 800e06a:	4b39      	ldr	r3, [pc, #228]	; (800e150 <UART_SetConfig+0x4e4>)
 800e06c:	fba3 1302 	umull	r1, r3, r3, r2
 800e070:	095b      	lsrs	r3, r3, #5
 800e072:	2164      	movs	r1, #100	; 0x64
 800e074:	fb01 f303 	mul.w	r3, r1, r3
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	011b      	lsls	r3, r3, #4
 800e07c:	3332      	adds	r3, #50	; 0x32
 800e07e:	4a34      	ldr	r2, [pc, #208]	; (800e150 <UART_SetConfig+0x4e4>)
 800e080:	fba2 2303 	umull	r2, r3, r2, r3
 800e084:	095b      	lsrs	r3, r3, #5
 800e086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e08a:	441c      	add	r4, r3
 800e08c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e090:	2200      	movs	r2, #0
 800e092:	673b      	str	r3, [r7, #112]	; 0x70
 800e094:	677a      	str	r2, [r7, #116]	; 0x74
 800e096:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e09a:	4642      	mov	r2, r8
 800e09c:	464b      	mov	r3, r9
 800e09e:	1891      	adds	r1, r2, r2
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	415b      	adcs	r3, r3
 800e0a4:	60fb      	str	r3, [r7, #12]
 800e0a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e0aa:	4641      	mov	r1, r8
 800e0ac:	1851      	adds	r1, r2, r1
 800e0ae:	6039      	str	r1, [r7, #0]
 800e0b0:	4649      	mov	r1, r9
 800e0b2:	414b      	adcs	r3, r1
 800e0b4:	607b      	str	r3, [r7, #4]
 800e0b6:	f04f 0200 	mov.w	r2, #0
 800e0ba:	f04f 0300 	mov.w	r3, #0
 800e0be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e0c2:	4659      	mov	r1, fp
 800e0c4:	00cb      	lsls	r3, r1, #3
 800e0c6:	4651      	mov	r1, sl
 800e0c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e0cc:	4651      	mov	r1, sl
 800e0ce:	00ca      	lsls	r2, r1, #3
 800e0d0:	4610      	mov	r0, r2
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	4642      	mov	r2, r8
 800e0d8:	189b      	adds	r3, r3, r2
 800e0da:	66bb      	str	r3, [r7, #104]	; 0x68
 800e0dc:	464b      	mov	r3, r9
 800e0de:	460a      	mov	r2, r1
 800e0e0:	eb42 0303 	adc.w	r3, r2, r3
 800e0e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e0e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	663b      	str	r3, [r7, #96]	; 0x60
 800e0f0:	667a      	str	r2, [r7, #100]	; 0x64
 800e0f2:	f04f 0200 	mov.w	r2, #0
 800e0f6:	f04f 0300 	mov.w	r3, #0
 800e0fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e0fe:	4649      	mov	r1, r9
 800e100:	008b      	lsls	r3, r1, #2
 800e102:	4641      	mov	r1, r8
 800e104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e108:	4641      	mov	r1, r8
 800e10a:	008a      	lsls	r2, r1, #2
 800e10c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e110:	f7f2 fc0c 	bl	800092c <__aeabi_uldivmod>
 800e114:	4602      	mov	r2, r0
 800e116:	460b      	mov	r3, r1
 800e118:	4b0d      	ldr	r3, [pc, #52]	; (800e150 <UART_SetConfig+0x4e4>)
 800e11a:	fba3 1302 	umull	r1, r3, r3, r2
 800e11e:	095b      	lsrs	r3, r3, #5
 800e120:	2164      	movs	r1, #100	; 0x64
 800e122:	fb01 f303 	mul.w	r3, r1, r3
 800e126:	1ad3      	subs	r3, r2, r3
 800e128:	011b      	lsls	r3, r3, #4
 800e12a:	3332      	adds	r3, #50	; 0x32
 800e12c:	4a08      	ldr	r2, [pc, #32]	; (800e150 <UART_SetConfig+0x4e4>)
 800e12e:	fba2 2303 	umull	r2, r3, r2, r3
 800e132:	095b      	lsrs	r3, r3, #5
 800e134:	f003 020f 	and.w	r2, r3, #15
 800e138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4422      	add	r2, r4
 800e140:	609a      	str	r2, [r3, #8]
}
 800e142:	bf00      	nop
 800e144:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e148:	46bd      	mov	sp, r7
 800e14a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e14e:	bf00      	nop
 800e150:	51eb851f 	.word	0x51eb851f

0800e154 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2b10      	cmp	r3, #16
 800e164:	d11c      	bne.n	800e1a0 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	4b1f      	ldr	r3, [pc, #124]	; (800e1e8 <FSMC_NAND_Init+0x94>)
 800e16c:	4013      	ands	r3, r2
 800e16e:	683a      	ldr	r2, [r7, #0]
 800e170:	6851      	ldr	r1, [r2, #4]
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	6892      	ldr	r2, [r2, #8]
 800e176:	4311      	orrs	r1, r2
 800e178:	683a      	ldr	r2, [r7, #0]
 800e17a:	68d2      	ldr	r2, [r2, #12]
 800e17c:	4311      	orrs	r1, r2
 800e17e:	683a      	ldr	r2, [r7, #0]
 800e180:	6912      	ldr	r2, [r2, #16]
 800e182:	4311      	orrs	r1, r2
 800e184:	683a      	ldr	r2, [r7, #0]
 800e186:	6952      	ldr	r2, [r2, #20]
 800e188:	0252      	lsls	r2, r2, #9
 800e18a:	4311      	orrs	r1, r2
 800e18c:	683a      	ldr	r2, [r7, #0]
 800e18e:	6992      	ldr	r2, [r2, #24]
 800e190:	0352      	lsls	r2, r2, #13
 800e192:	430a      	orrs	r2, r1
 800e194:	4313      	orrs	r3, r2
 800e196:	f043 0208 	orr.w	r2, r3, #8
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	601a      	str	r2, [r3, #0]
 800e19e:	e01b      	b.n	800e1d8 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6a1a      	ldr	r2, [r3, #32]
 800e1a4:	4b10      	ldr	r3, [pc, #64]	; (800e1e8 <FSMC_NAND_Init+0x94>)
 800e1a6:	4013      	ands	r3, r2
 800e1a8:	683a      	ldr	r2, [r7, #0]
 800e1aa:	6851      	ldr	r1, [r2, #4]
 800e1ac:	683a      	ldr	r2, [r7, #0]
 800e1ae:	6892      	ldr	r2, [r2, #8]
 800e1b0:	4311      	orrs	r1, r2
 800e1b2:	683a      	ldr	r2, [r7, #0]
 800e1b4:	68d2      	ldr	r2, [r2, #12]
 800e1b6:	4311      	orrs	r1, r2
 800e1b8:	683a      	ldr	r2, [r7, #0]
 800e1ba:	6912      	ldr	r2, [r2, #16]
 800e1bc:	4311      	orrs	r1, r2
 800e1be:	683a      	ldr	r2, [r7, #0]
 800e1c0:	6952      	ldr	r2, [r2, #20]
 800e1c2:	0252      	lsls	r2, r2, #9
 800e1c4:	4311      	orrs	r1, r2
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	6992      	ldr	r2, [r2, #24]
 800e1ca:	0352      	lsls	r2, r2, #13
 800e1cc:	430a      	orrs	r2, r1
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	f043 0208 	orr.w	r2, r3, #8
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	370c      	adds	r7, #12
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	fff00181 	.word	0xfff00181

0800e1ec <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b10      	cmp	r3, #16
 800e1fc:	d112      	bne.n	800e224 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	021b      	lsls	r3, r3, #8
 800e20c:	431a      	orrs	r2, r3
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	041b      	lsls	r3, r3, #16
 800e214:	431a      	orrs	r2, r3
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	061b      	lsls	r3, r3, #24
 800e21c:	431a      	orrs	r2, r3
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	609a      	str	r2, [r3, #8]
 800e222:	e011      	b.n	800e248 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	021b      	lsls	r3, r3, #8
 800e232:	431a      	orrs	r2, r3
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	041b      	lsls	r3, r3, #16
 800e23a:	431a      	orrs	r2, r3
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	061b      	lsls	r3, r3, #24
 800e242:	431a      	orrs	r2, r3
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 800e248:	2300      	movs	r3, #0
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3714      	adds	r7, #20
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr

0800e256 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800e256:	b480      	push	{r7}
 800e258:	b085      	sub	sp, #20
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	60f8      	str	r0, [r7, #12]
 800e25e:	60b9      	str	r1, [r7, #8]
 800e260:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2b10      	cmp	r3, #16
 800e266:	d112      	bne.n	800e28e <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	021b      	lsls	r3, r3, #8
 800e276:	431a      	orrs	r2, r3
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	041b      	lsls	r3, r3, #16
 800e27e:	431a      	orrs	r2, r3
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	061b      	lsls	r3, r3, #24
 800e286:	431a      	orrs	r2, r3
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	60da      	str	r2, [r3, #12]
 800e28c:	e011      	b.n	800e2b2 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	021b      	lsls	r3, r3, #8
 800e29c:	431a      	orrs	r2, r3
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	689b      	ldr	r3, [r3, #8]
 800e2a2:	041b      	lsls	r3, r3, #16
 800e2a4:	431a      	orrs	r2, r3
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	061b      	lsls	r3, r3, #24
 800e2ac:	431a      	orrs	r2, r3
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 800e2b2:	2300      	movs	r3, #0
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3714      	adds	r7, #20
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr

0800e2c0 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NAND_DEVICE(Device));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Disable ECC feature */
  if (Bank == FSMC_NAND_BANK2)
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	2b10      	cmp	r3, #16
 800e2ce:	d106      	bne.n	800e2de <FSMC_NAND_ECC_Disable+0x1e>
  {
    CLEAR_BIT(Device->PCR2, FSMC_PCR2_ECCEN);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	e005      	b.n	800e2ea <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    CLEAR_BIT(Device->PCR3, FSMC_PCR2_ECCEN);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6a1b      	ldr	r3, [r3, #32]
 800e2e2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	621a      	str	r2, [r3, #32]
  }

  return HAL_OK;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <__NVIC_SetPriority>:
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	4603      	mov	r3, r0
 800e300:	6039      	str	r1, [r7, #0]
 800e302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	db0a      	blt.n	800e322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	b2da      	uxtb	r2, r3
 800e310:	490c      	ldr	r1, [pc, #48]	; (800e344 <__NVIC_SetPriority+0x4c>)
 800e312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e316:	0112      	lsls	r2, r2, #4
 800e318:	b2d2      	uxtb	r2, r2
 800e31a:	440b      	add	r3, r1
 800e31c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e320:	e00a      	b.n	800e338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	b2da      	uxtb	r2, r3
 800e326:	4908      	ldr	r1, [pc, #32]	; (800e348 <__NVIC_SetPriority+0x50>)
 800e328:	79fb      	ldrb	r3, [r7, #7]
 800e32a:	f003 030f 	and.w	r3, r3, #15
 800e32e:	3b04      	subs	r3, #4
 800e330:	0112      	lsls	r2, r2, #4
 800e332:	b2d2      	uxtb	r2, r2
 800e334:	440b      	add	r3, r1
 800e336:	761a      	strb	r2, [r3, #24]
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr
 800e344:	e000e100 	.word	0xe000e100
 800e348:	e000ed00 	.word	0xe000ed00

0800e34c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e34c:	b580      	push	{r7, lr}
 800e34e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e350:	4b05      	ldr	r3, [pc, #20]	; (800e368 <SysTick_Handler+0x1c>)
 800e352:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e354:	f002 f856 	bl	8010404 <xTaskGetSchedulerState>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d001      	beq.n	800e362 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e35e:	f002 fe3b 	bl	8010fd8 <xPortSysTickHandler>
  }
}
 800e362:	bf00      	nop
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	e000e010 	.word	0xe000e010

0800e36c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e36c:	b580      	push	{r7, lr}
 800e36e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e370:	2100      	movs	r1, #0
 800e372:	f06f 0004 	mvn.w	r0, #4
 800e376:	f7ff ffbf 	bl	800e2f8 <__NVIC_SetPriority>
#endif
}
 800e37a:	bf00      	nop
 800e37c:	bd80      	pop	{r7, pc}
	...

0800e380 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e386:	f3ef 8305 	mrs	r3, IPSR
 800e38a:	603b      	str	r3, [r7, #0]
  return(result);
 800e38c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d003      	beq.n	800e39a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e392:	f06f 0305 	mvn.w	r3, #5
 800e396:	607b      	str	r3, [r7, #4]
 800e398:	e00f      	b.n	800e3ba <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e39a:	4b0a      	ldr	r3, [pc, #40]	; (800e3c4 <osKernelInitialize+0x44>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d108      	bne.n	800e3b4 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800e3a2:	4809      	ldr	r0, [pc, #36]	; (800e3c8 <osKernelInitialize+0x48>)
 800e3a4:	f003 f814 	bl	80113d0 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800e3a8:	4b06      	ldr	r3, [pc, #24]	; (800e3c4 <osKernelInitialize+0x44>)
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	607b      	str	r3, [r7, #4]
 800e3b2:	e002      	b.n	800e3ba <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800e3b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3b8:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e3ba:	687b      	ldr	r3, [r7, #4]
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3708      	adds	r7, #8
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	20003cc4 	.word	0x20003cc4
 800e3c8:	200000a4 	.word	0x200000a4

0800e3cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3d2:	f3ef 8305 	mrs	r3, IPSR
 800e3d6:	603b      	str	r3, [r7, #0]
  return(result);
 800e3d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d003      	beq.n	800e3e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e3de:	f06f 0305 	mvn.w	r3, #5
 800e3e2:	607b      	str	r3, [r7, #4]
 800e3e4:	e010      	b.n	800e408 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e3e6:	4b0b      	ldr	r3, [pc, #44]	; (800e414 <osKernelStart+0x48>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d109      	bne.n	800e402 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e3ee:	f7ff ffbd 	bl	800e36c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e3f2:	4b08      	ldr	r3, [pc, #32]	; (800e414 <osKernelStart+0x48>)
 800e3f4:	2202      	movs	r2, #2
 800e3f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e3f8:	f001 fba8 	bl	800fb4c <vTaskStartScheduler>
      stat = osOK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	607b      	str	r3, [r7, #4]
 800e400:	e002      	b.n	800e408 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e406:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e408:	687b      	ldr	r3, [r7, #4]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	20003cc4 	.word	0x20003cc4

0800e418 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e418:	b580      	push	{r7, lr}
 800e41a:	b08e      	sub	sp, #56	; 0x38
 800e41c:	af04      	add	r7, sp, #16
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e424:	2300      	movs	r3, #0
 800e426:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e428:	f3ef 8305 	mrs	r3, IPSR
 800e42c:	617b      	str	r3, [r7, #20]
  return(result);
 800e42e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e430:	2b00      	cmp	r3, #0
 800e432:	d17e      	bne.n	800e532 <osThreadNew+0x11a>
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d07b      	beq.n	800e532 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e43a:	2380      	movs	r3, #128	; 0x80
 800e43c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e43e:	2318      	movs	r3, #24
 800e440:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e442:	2300      	movs	r3, #0
 800e444:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e44a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d045      	beq.n	800e4de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d002      	beq.n	800e460 <osThreadNew+0x48>
        name = attr->name;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d002      	beq.n	800e46e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	699b      	ldr	r3, [r3, #24]
 800e46c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d008      	beq.n	800e486 <osThreadNew+0x6e>
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	2b38      	cmp	r3, #56	; 0x38
 800e478:	d805      	bhi.n	800e486 <osThreadNew+0x6e>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	f003 0301 	and.w	r3, r3, #1
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <osThreadNew+0x72>
        return (NULL);
 800e486:	2300      	movs	r3, #0
 800e488:	e054      	b.n	800e534 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	695b      	ldr	r3, [r3, #20]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d003      	beq.n	800e49a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	695b      	ldr	r3, [r3, #20]
 800e496:	089b      	lsrs	r3, r3, #2
 800e498:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00e      	beq.n	800e4c0 <osThreadNew+0xa8>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	68db      	ldr	r3, [r3, #12]
 800e4a6:	2bbb      	cmp	r3, #187	; 0xbb
 800e4a8:	d90a      	bls.n	800e4c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d006      	beq.n	800e4c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	695b      	ldr	r3, [r3, #20]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d002      	beq.n	800e4c0 <osThreadNew+0xa8>
        mem = 1;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	61bb      	str	r3, [r7, #24]
 800e4be:	e010      	b.n	800e4e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	689b      	ldr	r3, [r3, #8]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10c      	bne.n	800e4e2 <osThreadNew+0xca>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d108      	bne.n	800e4e2 <osThreadNew+0xca>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	691b      	ldr	r3, [r3, #16]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d104      	bne.n	800e4e2 <osThreadNew+0xca>
          mem = 0;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	61bb      	str	r3, [r7, #24]
 800e4dc:	e001      	b.n	800e4e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d110      	bne.n	800e50a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e4f0:	9202      	str	r2, [sp, #8]
 800e4f2:	9301      	str	r3, [sp, #4]
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	9300      	str	r3, [sp, #0]
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	6a3a      	ldr	r2, [r7, #32]
 800e4fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f001 f938 	bl	800f774 <xTaskCreateStatic>
 800e504:	4603      	mov	r3, r0
 800e506:	613b      	str	r3, [r7, #16]
 800e508:	e013      	b.n	800e532 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d110      	bne.n	800e532 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e510:	6a3b      	ldr	r3, [r7, #32]
 800e512:	b29a      	uxth	r2, r3
 800e514:	f107 0310 	add.w	r3, r7, #16
 800e518:	9301      	str	r3, [sp, #4]
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e522:	68f8      	ldr	r0, [r7, #12]
 800e524:	f001 f983 	bl	800f82e <xTaskCreate>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d001      	beq.n	800e532 <osThreadNew+0x11a>
            hTask = NULL;
 800e52e:	2300      	movs	r3, #0
 800e530:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e532:	693b      	ldr	r3, [r7, #16]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3728      	adds	r7, #40	; 0x28
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e544:	f3ef 8305 	mrs	r3, IPSR
 800e548:	60bb      	str	r3, [r7, #8]
  return(result);
 800e54a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d003      	beq.n	800e558 <osDelay+0x1c>
    stat = osErrorISR;
 800e550:	f06f 0305 	mvn.w	r3, #5
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	e007      	b.n	800e568 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e558:	2300      	movs	r3, #0
 800e55a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d002      	beq.n	800e568 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f001 fabe 	bl	800fae4 <vTaskDelay>
    }
  }

  return (stat);
 800e568:	68fb      	ldr	r3, [r7, #12]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e572:	b580      	push	{r7, lr}
 800e574:	b08a      	sub	sp, #40	; 0x28
 800e576:	af02      	add	r7, sp, #8
 800e578:	60f8      	str	r0, [r7, #12]
 800e57a:	60b9      	str	r1, [r7, #8]
 800e57c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e57e:	2300      	movs	r3, #0
 800e580:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e582:	f3ef 8305 	mrs	r3, IPSR
 800e586:	613b      	str	r3, [r7, #16]
  return(result);
 800e588:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d175      	bne.n	800e67a <osSemaphoreNew+0x108>
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d072      	beq.n	800e67a <osSemaphoreNew+0x108>
 800e594:	68ba      	ldr	r2, [r7, #8]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d86e      	bhi.n	800e67a <osSemaphoreNew+0x108>
    mem = -1;
 800e59c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d015      	beq.n	800e5d4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d006      	beq.n	800e5be <osSemaphoreNew+0x4c>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	2b4f      	cmp	r3, #79	; 0x4f
 800e5b6:	d902      	bls.n	800e5be <osSemaphoreNew+0x4c>
        mem = 1;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	61bb      	str	r3, [r7, #24]
 800e5bc:	e00c      	b.n	800e5d8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	689b      	ldr	r3, [r3, #8]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d108      	bne.n	800e5d8 <osSemaphoreNew+0x66>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	68db      	ldr	r3, [r3, #12]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d104      	bne.n	800e5d8 <osSemaphoreNew+0x66>
          mem = 0;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	61bb      	str	r3, [r7, #24]
 800e5d2:	e001      	b.n	800e5d8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5de:	d04c      	beq.n	800e67a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	d128      	bne.n	800e638 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d10a      	bne.n	800e602 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	2203      	movs	r2, #3
 800e5f2:	9200      	str	r2, [sp, #0]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	2001      	movs	r0, #1
 800e5fa:	f000 fac5 	bl	800eb88 <xQueueGenericCreateStatic>
 800e5fe:	61f8      	str	r0, [r7, #28]
 800e600:	e005      	b.n	800e60e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e602:	2203      	movs	r2, #3
 800e604:	2100      	movs	r1, #0
 800e606:	2001      	movs	r0, #1
 800e608:	f000 fb36 	bl	800ec78 <xQueueGenericCreate>
 800e60c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d022      	beq.n	800e65a <osSemaphoreNew+0xe8>
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d01f      	beq.n	800e65a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e61a:	2300      	movs	r3, #0
 800e61c:	2200      	movs	r2, #0
 800e61e:	2100      	movs	r1, #0
 800e620:	69f8      	ldr	r0, [r7, #28]
 800e622:	f000 fbf1 	bl	800ee08 <xQueueGenericSend>
 800e626:	4603      	mov	r3, r0
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d016      	beq.n	800e65a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e62c:	69f8      	ldr	r0, [r7, #28]
 800e62e:	f000 fee5 	bl	800f3fc <vQueueDelete>
            hSemaphore = NULL;
 800e632:	2300      	movs	r3, #0
 800e634:	61fb      	str	r3, [r7, #28]
 800e636:	e010      	b.n	800e65a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e638:	69bb      	ldr	r3, [r7, #24]
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d108      	bne.n	800e650 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	461a      	mov	r2, r3
 800e644:	68b9      	ldr	r1, [r7, #8]
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f000 fb73 	bl	800ed32 <xQueueCreateCountingSemaphoreStatic>
 800e64c:	61f8      	str	r0, [r7, #28]
 800e64e:	e004      	b.n	800e65a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e650:	68b9      	ldr	r1, [r7, #8]
 800e652:	68f8      	ldr	r0, [r7, #12]
 800e654:	f000 fba4 	bl	800eda0 <xQueueCreateCountingSemaphore>
 800e658:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00c      	beq.n	800e67a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d003      	beq.n	800e66e <osSemaphoreNew+0xfc>
          name = attr->name;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	617b      	str	r3, [r7, #20]
 800e66c:	e001      	b.n	800e672 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e66e:	2300      	movs	r3, #0
 800e670:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e672:	6979      	ldr	r1, [r7, #20]
 800e674:	69f8      	ldr	r0, [r7, #28]
 800e676:	f000 fff5 	bl	800f664 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e67a:	69fb      	ldr	r3, [r7, #28]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3720      	adds	r7, #32
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e684:	b580      	push	{r7, lr}
 800e686:	b08a      	sub	sp, #40	; 0x28
 800e688:	af02      	add	r7, sp, #8
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e690:	2300      	movs	r3, #0
 800e692:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e694:	f3ef 8305 	mrs	r3, IPSR
 800e698:	613b      	str	r3, [r7, #16]
  return(result);
 800e69a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d15f      	bne.n	800e760 <osMessageQueueNew+0xdc>
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d05c      	beq.n	800e760 <osMessageQueueNew+0xdc>
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d059      	beq.n	800e760 <osMessageQueueNew+0xdc>
    mem = -1;
 800e6ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d029      	beq.n	800e70c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d012      	beq.n	800e6e6 <osMessageQueueNew+0x62>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	2b4f      	cmp	r3, #79	; 0x4f
 800e6c6:	d90e      	bls.n	800e6e6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d00a      	beq.n	800e6e6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	695a      	ldr	r2, [r3, #20]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	68b9      	ldr	r1, [r7, #8]
 800e6d8:	fb01 f303 	mul.w	r3, r1, r3
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d302      	bcc.n	800e6e6 <osMessageQueueNew+0x62>
        mem = 1;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	61bb      	str	r3, [r7, #24]
 800e6e4:	e014      	b.n	800e710 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	689b      	ldr	r3, [r3, #8]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d110      	bne.n	800e710 <osMessageQueueNew+0x8c>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10c      	bne.n	800e710 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d108      	bne.n	800e710 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	695b      	ldr	r3, [r3, #20]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d104      	bne.n	800e710 <osMessageQueueNew+0x8c>
          mem = 0;
 800e706:	2300      	movs	r3, #0
 800e708:	61bb      	str	r3, [r7, #24]
 800e70a:	e001      	b.n	800e710 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e70c:	2300      	movs	r3, #0
 800e70e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	2b01      	cmp	r3, #1
 800e714:	d10b      	bne.n	800e72e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	691a      	ldr	r2, [r3, #16]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	2100      	movs	r1, #0
 800e720:	9100      	str	r1, [sp, #0]
 800e722:	68b9      	ldr	r1, [r7, #8]
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f000 fa2f 	bl	800eb88 <xQueueGenericCreateStatic>
 800e72a:	61f8      	str	r0, [r7, #28]
 800e72c:	e008      	b.n	800e740 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d105      	bne.n	800e740 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e734:	2200      	movs	r2, #0
 800e736:	68b9      	ldr	r1, [r7, #8]
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	f000 fa9d 	bl	800ec78 <xQueueGenericCreate>
 800e73e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00c      	beq.n	800e760 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d003      	beq.n	800e754 <osMessageQueueNew+0xd0>
        name = attr->name;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	617b      	str	r3, [r7, #20]
 800e752:	e001      	b.n	800e758 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e754:	2300      	movs	r3, #0
 800e756:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e758:	6979      	ldr	r1, [r7, #20]
 800e75a:	69f8      	ldr	r0, [r7, #28]
 800e75c:	f000 ff82 	bl	800f664 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e760:	69fb      	ldr	r3, [r7, #28]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3720      	adds	r7, #32
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
	...

0800e76c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b088      	sub	sp, #32
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	603b      	str	r3, [r7, #0]
 800e778:	4613      	mov	r3, r2
 800e77a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e780:	2300      	movs	r3, #0
 800e782:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e784:	f3ef 8305 	mrs	r3, IPSR
 800e788:	617b      	str	r3, [r7, #20]
  return(result);
 800e78a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d028      	beq.n	800e7e2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d005      	beq.n	800e7a2 <osMessageQueuePut+0x36>
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d002      	beq.n	800e7a2 <osMessageQueuePut+0x36>
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d003      	beq.n	800e7aa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e7a2:	f06f 0303 	mvn.w	r3, #3
 800e7a6:	61fb      	str	r3, [r7, #28]
 800e7a8:	e038      	b.n	800e81c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e7ae:	f107 0210 	add.w	r2, r7, #16
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	68b9      	ldr	r1, [r7, #8]
 800e7b6:	69b8      	ldr	r0, [r7, #24]
 800e7b8:	f000 fc24 	bl	800f004 <xQueueGenericSendFromISR>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d003      	beq.n	800e7ca <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e7c2:	f06f 0302 	mvn.w	r3, #2
 800e7c6:	61fb      	str	r3, [r7, #28]
 800e7c8:	e028      	b.n	800e81c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d025      	beq.n	800e81c <osMessageQueuePut+0xb0>
 800e7d0:	4b15      	ldr	r3, [pc, #84]	; (800e828 <osMessageQueuePut+0xbc>)
 800e7d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7d6:	601a      	str	r2, [r3, #0]
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	f3bf 8f6f 	isb	sy
 800e7e0:	e01c      	b.n	800e81c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d002      	beq.n	800e7ee <osMessageQueuePut+0x82>
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d103      	bne.n	800e7f6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e7ee:	f06f 0303 	mvn.w	r3, #3
 800e7f2:	61fb      	str	r3, [r7, #28]
 800e7f4:	e012      	b.n	800e81c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	683a      	ldr	r2, [r7, #0]
 800e7fa:	68b9      	ldr	r1, [r7, #8]
 800e7fc:	69b8      	ldr	r0, [r7, #24]
 800e7fe:	f000 fb03 	bl	800ee08 <xQueueGenericSend>
 800e802:	4603      	mov	r3, r0
 800e804:	2b01      	cmp	r3, #1
 800e806:	d009      	beq.n	800e81c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d003      	beq.n	800e816 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e80e:	f06f 0301 	mvn.w	r3, #1
 800e812:	61fb      	str	r3, [r7, #28]
 800e814:	e002      	b.n	800e81c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e816:	f06f 0302 	mvn.w	r3, #2
 800e81a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e81c:	69fb      	ldr	r3, [r7, #28]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3720      	adds	r7, #32
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	e000ed04 	.word	0xe000ed04

0800e82c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b088      	sub	sp, #32
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
 800e838:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e83e:	2300      	movs	r3, #0
 800e840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e842:	f3ef 8305 	mrs	r3, IPSR
 800e846:	617b      	str	r3, [r7, #20]
  return(result);
 800e848:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d028      	beq.n	800e8a0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d005      	beq.n	800e860 <osMessageQueueGet+0x34>
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d002      	beq.n	800e860 <osMessageQueueGet+0x34>
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d003      	beq.n	800e868 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e860:	f06f 0303 	mvn.w	r3, #3
 800e864:	61fb      	str	r3, [r7, #28]
 800e866:	e037      	b.n	800e8d8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e868:	2300      	movs	r3, #0
 800e86a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e86c:	f107 0310 	add.w	r3, r7, #16
 800e870:	461a      	mov	r2, r3
 800e872:	68b9      	ldr	r1, [r7, #8]
 800e874:	69b8      	ldr	r0, [r7, #24]
 800e876:	f000 fd41 	bl	800f2fc <xQueueReceiveFromISR>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d003      	beq.n	800e888 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e880:	f06f 0302 	mvn.w	r3, #2
 800e884:	61fb      	str	r3, [r7, #28]
 800e886:	e027      	b.n	800e8d8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d024      	beq.n	800e8d8 <osMessageQueueGet+0xac>
 800e88e:	4b15      	ldr	r3, [pc, #84]	; (800e8e4 <osMessageQueueGet+0xb8>)
 800e890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e894:	601a      	str	r2, [r3, #0]
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	f3bf 8f6f 	isb	sy
 800e89e:	e01b      	b.n	800e8d8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d002      	beq.n	800e8ac <osMessageQueueGet+0x80>
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d103      	bne.n	800e8b4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e8ac:	f06f 0303 	mvn.w	r3, #3
 800e8b0:	61fb      	str	r3, [r7, #28]
 800e8b2:	e011      	b.n	800e8d8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e8b4:	683a      	ldr	r2, [r7, #0]
 800e8b6:	68b9      	ldr	r1, [r7, #8]
 800e8b8:	69b8      	ldr	r0, [r7, #24]
 800e8ba:	f000 fc3f 	bl	800f13c <xQueueReceive>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d009      	beq.n	800e8d8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d003      	beq.n	800e8d2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e8ca:	f06f 0301 	mvn.w	r3, #1
 800e8ce:	61fb      	str	r3, [r7, #28]
 800e8d0:	e002      	b.n	800e8d8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e8d2:	f06f 0302 	mvn.w	r3, #2
 800e8d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e8d8:	69fb      	ldr	r3, [r7, #28]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3720      	adds	r7, #32
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	e000ed04 	.word	0xe000ed04

0800e8e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e8e8:	b480      	push	{r7}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	4a07      	ldr	r2, [pc, #28]	; (800e914 <vApplicationGetIdleTaskMemory+0x2c>)
 800e8f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	4a06      	ldr	r2, [pc, #24]	; (800e918 <vApplicationGetIdleTaskMemory+0x30>)
 800e8fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2280      	movs	r2, #128	; 0x80
 800e904:	601a      	str	r2, [r3, #0]
}
 800e906:	bf00      	nop
 800e908:	3714      	adds	r7, #20
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr
 800e912:	bf00      	nop
 800e914:	200074c8 	.word	0x200074c8
 800e918:	20007584 	.word	0x20007584

0800e91c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e91c:	b480      	push	{r7}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
 800e922:	60f8      	str	r0, [r7, #12]
 800e924:	60b9      	str	r1, [r7, #8]
 800e926:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	4a07      	ldr	r2, [pc, #28]	; (800e948 <vApplicationGetTimerTaskMemory+0x2c>)
 800e92c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	4a06      	ldr	r2, [pc, #24]	; (800e94c <vApplicationGetTimerTaskMemory+0x30>)
 800e932:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e93a:	601a      	str	r2, [r3, #0]
}
 800e93c:	bf00      	nop
 800e93e:	3714      	adds	r7, #20
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	20007784 	.word	0x20007784
 800e94c:	20007840 	.word	0x20007840

0800e950 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f103 0208 	add.w	r2, r3, #8
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e968:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f103 0208 	add.w	r2, r3, #8
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f103 0208 	add.w	r2, r3, #8
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e984:	bf00      	nop
 800e986:	370c      	adds	r7, #12
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e990:	b480      	push	{r7}
 800e992:	b083      	sub	sp, #12
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e99e:	bf00      	nop
 800e9a0:	370c      	adds	r7, #12
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr

0800e9aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9aa:	b480      	push	{r7}
 800e9ac:	b085      	sub	sp, #20
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	689a      	ldr	r2, [r3, #8]
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	683a      	ldr	r2, [r7, #0]
 800e9ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	683a      	ldr	r2, [r7, #0]
 800e9d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	1c5a      	adds	r2, r3, #1
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	601a      	str	r2, [r3, #0]
}
 800e9e6:	bf00      	nop
 800e9e8:	3714      	adds	r7, #20
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr

0800e9f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9f2:	b480      	push	{r7}
 800e9f4:	b085      	sub	sp, #20
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
 800e9fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea08:	d103      	bne.n	800ea12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	691b      	ldr	r3, [r3, #16]
 800ea0e:	60fb      	str	r3, [r7, #12]
 800ea10:	e00c      	b.n	800ea2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	3308      	adds	r3, #8
 800ea16:	60fb      	str	r3, [r7, #12]
 800ea18:	e002      	b.n	800ea20 <vListInsert+0x2e>
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	60fb      	str	r3, [r7, #12]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	68ba      	ldr	r2, [r7, #8]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d2f6      	bcs.n	800ea1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	685a      	ldr	r2, [r3, #4]
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	683a      	ldr	r2, [r7, #0]
 800ea3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	683a      	ldr	r2, [r7, #0]
 800ea46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	1c5a      	adds	r2, r3, #1
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	601a      	str	r2, [r3, #0]
}
 800ea58:	bf00      	nop
 800ea5a:	3714      	adds	r7, #20
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr

0800ea64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ea64:	b480      	push	{r7}
 800ea66:	b085      	sub	sp, #20
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	687a      	ldr	r2, [r7, #4]
 800ea78:	6892      	ldr	r2, [r2, #8]
 800ea7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	6852      	ldr	r2, [r2, #4]
 800ea84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d103      	bne.n	800ea98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	689a      	ldr	r2, [r3, #8]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	1e5a      	subs	r2, r3, #1
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3714      	adds	r7, #20
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d10a      	bne.n	800eae2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800eade:	bf00      	nop
 800eae0:	e7fe      	b.n	800eae0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800eae2:	f002 f9e7 	bl	8010eb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaee:	68f9      	ldr	r1, [r7, #12]
 800eaf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eaf2:	fb01 f303 	mul.w	r3, r1, r3
 800eaf6:	441a      	add	r2, r3
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2200      	movs	r2, #0
 800eb00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681a      	ldr	r2, [r3, #0]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681a      	ldr	r2, [r3, #0]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb12:	3b01      	subs	r3, #1
 800eb14:	68f9      	ldr	r1, [r7, #12]
 800eb16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eb18:	fb01 f303 	mul.w	r3, r1, r3
 800eb1c:	441a      	add	r2, r3
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	22ff      	movs	r2, #255	; 0xff
 800eb26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	22ff      	movs	r2, #255	; 0xff
 800eb2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d114      	bne.n	800eb62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d01a      	beq.n	800eb76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	3310      	adds	r3, #16
 800eb44:	4618      	mov	r0, r3
 800eb46:	f001 fa9b 	bl	8010080 <xTaskRemoveFromEventList>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d012      	beq.n	800eb76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eb50:	4b0c      	ldr	r3, [pc, #48]	; (800eb84 <xQueueGenericReset+0xcc>)
 800eb52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb56:	601a      	str	r2, [r3, #0]
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	e009      	b.n	800eb76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	3310      	adds	r3, #16
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff fef2 	bl	800e950 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	3324      	adds	r3, #36	; 0x24
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7ff feed 	bl	800e950 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eb76:	f002 f9cd 	bl	8010f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eb7a:	2301      	movs	r3, #1
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3710      	adds	r7, #16
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	e000ed04 	.word	0xe000ed04

0800eb88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b08e      	sub	sp, #56	; 0x38
 800eb8c:	af02      	add	r7, sp, #8
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10a      	bne.n	800ebb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800eb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba0:	f383 8811 	msr	BASEPRI, r3
 800eba4:	f3bf 8f6f 	isb	sy
 800eba8:	f3bf 8f4f 	dsb	sy
 800ebac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ebae:	bf00      	nop
 800ebb0:	e7fe      	b.n	800ebb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d10a      	bne.n	800ebce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ebb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebbc:	f383 8811 	msr	BASEPRI, r3
 800ebc0:	f3bf 8f6f 	isb	sy
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ebca:	bf00      	nop
 800ebcc:	e7fe      	b.n	800ebcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d002      	beq.n	800ebda <xQueueGenericCreateStatic+0x52>
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d001      	beq.n	800ebde <xQueueGenericCreateStatic+0x56>
 800ebda:	2301      	movs	r3, #1
 800ebdc:	e000      	b.n	800ebe0 <xQueueGenericCreateStatic+0x58>
 800ebde:	2300      	movs	r3, #0
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d10a      	bne.n	800ebfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ebe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe8:	f383 8811 	msr	BASEPRI, r3
 800ebec:	f3bf 8f6f 	isb	sy
 800ebf0:	f3bf 8f4f 	dsb	sy
 800ebf4:	623b      	str	r3, [r7, #32]
}
 800ebf6:	bf00      	nop
 800ebf8:	e7fe      	b.n	800ebf8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d102      	bne.n	800ec06 <xQueueGenericCreateStatic+0x7e>
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d101      	bne.n	800ec0a <xQueueGenericCreateStatic+0x82>
 800ec06:	2301      	movs	r3, #1
 800ec08:	e000      	b.n	800ec0c <xQueueGenericCreateStatic+0x84>
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d10a      	bne.n	800ec26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ec10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec14:	f383 8811 	msr	BASEPRI, r3
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	61fb      	str	r3, [r7, #28]
}
 800ec22:	bf00      	nop
 800ec24:	e7fe      	b.n	800ec24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ec26:	2350      	movs	r3, #80	; 0x50
 800ec28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	2b50      	cmp	r3, #80	; 0x50
 800ec2e:	d00a      	beq.n	800ec46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ec30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec34:	f383 8811 	msr	BASEPRI, r3
 800ec38:	f3bf 8f6f 	isb	sy
 800ec3c:	f3bf 8f4f 	dsb	sy
 800ec40:	61bb      	str	r3, [r7, #24]
}
 800ec42:	bf00      	nop
 800ec44:	e7fe      	b.n	800ec44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ec46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ec4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d00d      	beq.n	800ec6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ec52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec54:	2201      	movs	r2, #1
 800ec56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ec5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec60:	9300      	str	r3, [sp, #0]
 800ec62:	4613      	mov	r3, r2
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	68b9      	ldr	r1, [r7, #8]
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f000 f83f 	bl	800ecec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3730      	adds	r7, #48	; 0x30
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b08a      	sub	sp, #40	; 0x28
 800ec7c:	af02      	add	r7, sp, #8
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	4613      	mov	r3, r2
 800ec84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d10a      	bne.n	800eca2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ec8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec90:	f383 8811 	msr	BASEPRI, r3
 800ec94:	f3bf 8f6f 	isb	sy
 800ec98:	f3bf 8f4f 	dsb	sy
 800ec9c:	613b      	str	r3, [r7, #16]
}
 800ec9e:	bf00      	nop
 800eca0:	e7fe      	b.n	800eca0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	68ba      	ldr	r2, [r7, #8]
 800eca6:	fb02 f303 	mul.w	r3, r2, r3
 800ecaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	3350      	adds	r3, #80	; 0x50
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f002 fa21 	bl	80110f8 <pvPortMalloc>
 800ecb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d011      	beq.n	800ece2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	3350      	adds	r3, #80	; 0x50
 800ecc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ecd0:	79fa      	ldrb	r2, [r7, #7]
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	697a      	ldr	r2, [r7, #20]
 800ecda:	68b9      	ldr	r1, [r7, #8]
 800ecdc:	68f8      	ldr	r0, [r7, #12]
 800ecde:	f000 f805 	bl	800ecec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ece2:	69bb      	ldr	r3, [r7, #24]
	}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3720      	adds	r7, #32
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	60b9      	str	r1, [r7, #8]
 800ecf6:	607a      	str	r2, [r7, #4]
 800ecf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d103      	bne.n	800ed08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	69ba      	ldr	r2, [r7, #24]
 800ed04:	601a      	str	r2, [r3, #0]
 800ed06:	e002      	b.n	800ed0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	687a      	ldr	r2, [r7, #4]
 800ed0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ed1a:	2101      	movs	r1, #1
 800ed1c:	69b8      	ldr	r0, [r7, #24]
 800ed1e:	f7ff fecb 	bl	800eab8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	78fa      	ldrb	r2, [r7, #3]
 800ed26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ed2a:	bf00      	nop
 800ed2c:	3710      	adds	r7, #16
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}

0800ed32 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ed32:	b580      	push	{r7, lr}
 800ed34:	b08a      	sub	sp, #40	; 0x28
 800ed36:	af02      	add	r7, sp, #8
 800ed38:	60f8      	str	r0, [r7, #12]
 800ed3a:	60b9      	str	r1, [r7, #8]
 800ed3c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10a      	bne.n	800ed5a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ed44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed48:	f383 8811 	msr	BASEPRI, r3
 800ed4c:	f3bf 8f6f 	isb	sy
 800ed50:	f3bf 8f4f 	dsb	sy
 800ed54:	61bb      	str	r3, [r7, #24]
}
 800ed56:	bf00      	nop
 800ed58:	e7fe      	b.n	800ed58 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ed5a:	68ba      	ldr	r2, [r7, #8]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d90a      	bls.n	800ed78 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ed62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed66:	f383 8811 	msr	BASEPRI, r3
 800ed6a:	f3bf 8f6f 	isb	sy
 800ed6e:	f3bf 8f4f 	dsb	sy
 800ed72:	617b      	str	r3, [r7, #20]
}
 800ed74:	bf00      	nop
 800ed76:	e7fe      	b.n	800ed76 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ed78:	2302      	movs	r3, #2
 800ed7a:	9300      	str	r3, [sp, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	2100      	movs	r1, #0
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f7ff ff00 	bl	800eb88 <xQueueGenericCreateStatic>
 800ed88:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	68ba      	ldr	r2, [r7, #8]
 800ed94:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ed96:	69fb      	ldr	r3, [r7, #28]
	}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3720      	adds	r7, #32
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b086      	sub	sp, #24
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d10a      	bne.n	800edc6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800edb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb4:	f383 8811 	msr	BASEPRI, r3
 800edb8:	f3bf 8f6f 	isb	sy
 800edbc:	f3bf 8f4f 	dsb	sy
 800edc0:	613b      	str	r3, [r7, #16]
}
 800edc2:	bf00      	nop
 800edc4:	e7fe      	b.n	800edc4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800edc6:	683a      	ldr	r2, [r7, #0]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d90a      	bls.n	800ede4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800edce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd2:	f383 8811 	msr	BASEPRI, r3
 800edd6:	f3bf 8f6f 	isb	sy
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	60fb      	str	r3, [r7, #12]
}
 800ede0:	bf00      	nop
 800ede2:	e7fe      	b.n	800ede2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ede4:	2202      	movs	r2, #2
 800ede6:	2100      	movs	r1, #0
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f7ff ff45 	bl	800ec78 <xQueueGenericCreate>
 800edee:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d002      	beq.n	800edfc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	683a      	ldr	r2, [r7, #0]
 800edfa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800edfc:	697b      	ldr	r3, [r7, #20]
	}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3718      	adds	r7, #24
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
	...

0800ee08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b08e      	sub	sp, #56	; 0x38
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	607a      	str	r2, [r7, #4]
 800ee14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ee16:	2300      	movs	r3, #0
 800ee18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10a      	bne.n	800ee3a <xQueueGenericSend+0x32>
	__asm volatile
 800ee24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee36:	bf00      	nop
 800ee38:	e7fe      	b.n	800ee38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d103      	bne.n	800ee48 <xQueueGenericSend+0x40>
 800ee40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d101      	bne.n	800ee4c <xQueueGenericSend+0x44>
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e000      	b.n	800ee4e <xQueueGenericSend+0x46>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d10a      	bne.n	800ee68 <xQueueGenericSend+0x60>
	__asm volatile
 800ee52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee56:	f383 8811 	msr	BASEPRI, r3
 800ee5a:	f3bf 8f6f 	isb	sy
 800ee5e:	f3bf 8f4f 	dsb	sy
 800ee62:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee64:	bf00      	nop
 800ee66:	e7fe      	b.n	800ee66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	2b02      	cmp	r3, #2
 800ee6c:	d103      	bne.n	800ee76 <xQueueGenericSend+0x6e>
 800ee6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d101      	bne.n	800ee7a <xQueueGenericSend+0x72>
 800ee76:	2301      	movs	r3, #1
 800ee78:	e000      	b.n	800ee7c <xQueueGenericSend+0x74>
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d10a      	bne.n	800ee96 <xQueueGenericSend+0x8e>
	__asm volatile
 800ee80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee84:	f383 8811 	msr	BASEPRI, r3
 800ee88:	f3bf 8f6f 	isb	sy
 800ee8c:	f3bf 8f4f 	dsb	sy
 800ee90:	623b      	str	r3, [r7, #32]
}
 800ee92:	bf00      	nop
 800ee94:	e7fe      	b.n	800ee94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee96:	f001 fab5 	bl	8010404 <xTaskGetSchedulerState>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d102      	bne.n	800eea6 <xQueueGenericSend+0x9e>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d101      	bne.n	800eeaa <xQueueGenericSend+0xa2>
 800eea6:	2301      	movs	r3, #1
 800eea8:	e000      	b.n	800eeac <xQueueGenericSend+0xa4>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10a      	bne.n	800eec6 <xQueueGenericSend+0xbe>
	__asm volatile
 800eeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb4:	f383 8811 	msr	BASEPRI, r3
 800eeb8:	f3bf 8f6f 	isb	sy
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	61fb      	str	r3, [r7, #28]
}
 800eec2:	bf00      	nop
 800eec4:	e7fe      	b.n	800eec4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eec6:	f001 fff5 	bl	8010eb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d302      	bcc.n	800eedc <xQueueGenericSend+0xd4>
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	2b02      	cmp	r3, #2
 800eeda:	d129      	bne.n	800ef30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eedc:	683a      	ldr	r2, [r7, #0]
 800eede:	68b9      	ldr	r1, [r7, #8]
 800eee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eee2:	f000 faae 	bl	800f442 <prvCopyDataToQueue>
 800eee6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d010      	beq.n	800ef12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef2:	3324      	adds	r3, #36	; 0x24
 800eef4:	4618      	mov	r0, r3
 800eef6:	f001 f8c3 	bl	8010080 <xTaskRemoveFromEventList>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d013      	beq.n	800ef28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ef00:	4b3f      	ldr	r3, [pc, #252]	; (800f000 <xQueueGenericSend+0x1f8>)
 800ef02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef06:	601a      	str	r2, [r3, #0]
 800ef08:	f3bf 8f4f 	dsb	sy
 800ef0c:	f3bf 8f6f 	isb	sy
 800ef10:	e00a      	b.n	800ef28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ef12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d007      	beq.n	800ef28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ef18:	4b39      	ldr	r3, [pc, #228]	; (800f000 <xQueueGenericSend+0x1f8>)
 800ef1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef1e:	601a      	str	r2, [r3, #0]
 800ef20:	f3bf 8f4f 	dsb	sy
 800ef24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ef28:	f001 fff4 	bl	8010f14 <vPortExitCritical>
				return pdPASS;
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	e063      	b.n	800eff8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d103      	bne.n	800ef3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef36:	f001 ffed 	bl	8010f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	e05c      	b.n	800eff8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d106      	bne.n	800ef52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef44:	f107 0314 	add.w	r3, r7, #20
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f001 f8fd 	bl	8010148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef52:	f001 ffdf 	bl	8010f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef56:	f000 fe69 	bl	800fc2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef5a:	f001 ffab 	bl	8010eb4 <vPortEnterCritical>
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef64:	b25b      	sxtb	r3, r3
 800ef66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef6a:	d103      	bne.n	800ef74 <xQueueGenericSend+0x16c>
 800ef6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef7a:	b25b      	sxtb	r3, r3
 800ef7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef80:	d103      	bne.n	800ef8a <xQueueGenericSend+0x182>
 800ef82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef84:	2200      	movs	r2, #0
 800ef86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef8a:	f001 ffc3 	bl	8010f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef8e:	1d3a      	adds	r2, r7, #4
 800ef90:	f107 0314 	add.w	r3, r7, #20
 800ef94:	4611      	mov	r1, r2
 800ef96:	4618      	mov	r0, r3
 800ef98:	f001 f8ec 	bl	8010174 <xTaskCheckForTimeOut>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d124      	bne.n	800efec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800efa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efa4:	f000 fb45 	bl	800f632 <prvIsQueueFull>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d018      	beq.n	800efe0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800efae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb0:	3310      	adds	r3, #16
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	4611      	mov	r1, r2
 800efb6:	4618      	mov	r0, r3
 800efb8:	f001 f812 	bl	800ffe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800efbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efbe:	f000 fad0 	bl	800f562 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800efc2:	f000 fe41 	bl	800fc48 <xTaskResumeAll>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	f47f af7c 	bne.w	800eec6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800efce:	4b0c      	ldr	r3, [pc, #48]	; (800f000 <xQueueGenericSend+0x1f8>)
 800efd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efd4:	601a      	str	r2, [r3, #0]
 800efd6:	f3bf 8f4f 	dsb	sy
 800efda:	f3bf 8f6f 	isb	sy
 800efde:	e772      	b.n	800eec6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800efe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efe2:	f000 fabe 	bl	800f562 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800efe6:	f000 fe2f 	bl	800fc48 <xTaskResumeAll>
 800efea:	e76c      	b.n	800eec6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800efec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efee:	f000 fab8 	bl	800f562 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eff2:	f000 fe29 	bl	800fc48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eff6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3738      	adds	r7, #56	; 0x38
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	e000ed04 	.word	0xe000ed04

0800f004 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b090      	sub	sp, #64	; 0x40
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
 800f010:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d10a      	bne.n	800f032 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f020:	f383 8811 	msr	BASEPRI, r3
 800f024:	f3bf 8f6f 	isb	sy
 800f028:	f3bf 8f4f 	dsb	sy
 800f02c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f02e:	bf00      	nop
 800f030:	e7fe      	b.n	800f030 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d103      	bne.n	800f040 <xQueueGenericSendFromISR+0x3c>
 800f038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d101      	bne.n	800f044 <xQueueGenericSendFromISR+0x40>
 800f040:	2301      	movs	r3, #1
 800f042:	e000      	b.n	800f046 <xQueueGenericSendFromISR+0x42>
 800f044:	2300      	movs	r3, #0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d10a      	bne.n	800f060 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04e:	f383 8811 	msr	BASEPRI, r3
 800f052:	f3bf 8f6f 	isb	sy
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f05c:	bf00      	nop
 800f05e:	e7fe      	b.n	800f05e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	2b02      	cmp	r3, #2
 800f064:	d103      	bne.n	800f06e <xQueueGenericSendFromISR+0x6a>
 800f066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d101      	bne.n	800f072 <xQueueGenericSendFromISR+0x6e>
 800f06e:	2301      	movs	r3, #1
 800f070:	e000      	b.n	800f074 <xQueueGenericSendFromISR+0x70>
 800f072:	2300      	movs	r3, #0
 800f074:	2b00      	cmp	r3, #0
 800f076:	d10a      	bne.n	800f08e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07c:	f383 8811 	msr	BASEPRI, r3
 800f080:	f3bf 8f6f 	isb	sy
 800f084:	f3bf 8f4f 	dsb	sy
 800f088:	623b      	str	r3, [r7, #32]
}
 800f08a:	bf00      	nop
 800f08c:	e7fe      	b.n	800f08c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f08e:	f001 fff3 	bl	8011078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f092:	f3ef 8211 	mrs	r2, BASEPRI
 800f096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09a:	f383 8811 	msr	BASEPRI, r3
 800f09e:	f3bf 8f6f 	isb	sy
 800f0a2:	f3bf 8f4f 	dsb	sy
 800f0a6:	61fa      	str	r2, [r7, #28]
 800f0a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f0aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d302      	bcc.n	800f0c0 <xQueueGenericSendFromISR+0xbc>
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	2b02      	cmp	r3, #2
 800f0be:	d12f      	bne.n	800f120 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f0d0:	683a      	ldr	r2, [r7, #0]
 800f0d2:	68b9      	ldr	r1, [r7, #8]
 800f0d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0d6:	f000 f9b4 	bl	800f442 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f0da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f0de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0e2:	d112      	bne.n	800f10a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d016      	beq.n	800f11a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ee:	3324      	adds	r3, #36	; 0x24
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f000 ffc5 	bl	8010080 <xTaskRemoveFromEventList>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00e      	beq.n	800f11a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00b      	beq.n	800f11a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2201      	movs	r2, #1
 800f106:	601a      	str	r2, [r3, #0]
 800f108:	e007      	b.n	800f11a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f10a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f10e:	3301      	adds	r3, #1
 800f110:	b2db      	uxtb	r3, r3
 800f112:	b25a      	sxtb	r2, r3
 800f114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f11a:	2301      	movs	r3, #1
 800f11c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f11e:	e001      	b.n	800f124 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f120:	2300      	movs	r3, #0
 800f122:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f126:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f12e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f132:	4618      	mov	r0, r3
 800f134:	3740      	adds	r7, #64	; 0x40
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
	...

0800f13c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b08c      	sub	sp, #48	; 0x30
 800f140:	af00      	add	r7, sp, #0
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	60b9      	str	r1, [r7, #8]
 800f146:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f148:	2300      	movs	r3, #0
 800f14a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f152:	2b00      	cmp	r3, #0
 800f154:	d10a      	bne.n	800f16c <xQueueReceive+0x30>
	__asm volatile
 800f156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15a:	f383 8811 	msr	BASEPRI, r3
 800f15e:	f3bf 8f6f 	isb	sy
 800f162:	f3bf 8f4f 	dsb	sy
 800f166:	623b      	str	r3, [r7, #32]
}
 800f168:	bf00      	nop
 800f16a:	e7fe      	b.n	800f16a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d103      	bne.n	800f17a <xQueueReceive+0x3e>
 800f172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f176:	2b00      	cmp	r3, #0
 800f178:	d101      	bne.n	800f17e <xQueueReceive+0x42>
 800f17a:	2301      	movs	r3, #1
 800f17c:	e000      	b.n	800f180 <xQueueReceive+0x44>
 800f17e:	2300      	movs	r3, #0
 800f180:	2b00      	cmp	r3, #0
 800f182:	d10a      	bne.n	800f19a <xQueueReceive+0x5e>
	__asm volatile
 800f184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f188:	f383 8811 	msr	BASEPRI, r3
 800f18c:	f3bf 8f6f 	isb	sy
 800f190:	f3bf 8f4f 	dsb	sy
 800f194:	61fb      	str	r3, [r7, #28]
}
 800f196:	bf00      	nop
 800f198:	e7fe      	b.n	800f198 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f19a:	f001 f933 	bl	8010404 <xTaskGetSchedulerState>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d102      	bne.n	800f1aa <xQueueReceive+0x6e>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d101      	bne.n	800f1ae <xQueueReceive+0x72>
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	e000      	b.n	800f1b0 <xQueueReceive+0x74>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d10a      	bne.n	800f1ca <xQueueReceive+0x8e>
	__asm volatile
 800f1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b8:	f383 8811 	msr	BASEPRI, r3
 800f1bc:	f3bf 8f6f 	isb	sy
 800f1c0:	f3bf 8f4f 	dsb	sy
 800f1c4:	61bb      	str	r3, [r7, #24]
}
 800f1c6:	bf00      	nop
 800f1c8:	e7fe      	b.n	800f1c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1ca:	f001 fe73 	bl	8010eb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d01f      	beq.n	800f21a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f1da:	68b9      	ldr	r1, [r7, #8]
 800f1dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1de:	f000 f99a 	bl	800f516 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e4:	1e5a      	subs	r2, r3, #1
 800f1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ec:	691b      	ldr	r3, [r3, #16]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00f      	beq.n	800f212 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f4:	3310      	adds	r3, #16
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f000 ff42 	bl	8010080 <xTaskRemoveFromEventList>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d007      	beq.n	800f212 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f202:	4b3d      	ldr	r3, [pc, #244]	; (800f2f8 <xQueueReceive+0x1bc>)
 800f204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f208:	601a      	str	r2, [r3, #0]
 800f20a:	f3bf 8f4f 	dsb	sy
 800f20e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f212:	f001 fe7f 	bl	8010f14 <vPortExitCritical>
				return pdPASS;
 800f216:	2301      	movs	r3, #1
 800f218:	e069      	b.n	800f2ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d103      	bne.n	800f228 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f220:	f001 fe78 	bl	8010f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f224:	2300      	movs	r3, #0
 800f226:	e062      	b.n	800f2ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d106      	bne.n	800f23c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f22e:	f107 0310 	add.w	r3, r7, #16
 800f232:	4618      	mov	r0, r3
 800f234:	f000 ff88 	bl	8010148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f238:	2301      	movs	r3, #1
 800f23a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f23c:	f001 fe6a 	bl	8010f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f240:	f000 fcf4 	bl	800fc2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f244:	f001 fe36 	bl	8010eb4 <vPortEnterCritical>
 800f248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f24e:	b25b      	sxtb	r3, r3
 800f250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f254:	d103      	bne.n	800f25e <xQueueReceive+0x122>
 800f256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f258:	2200      	movs	r2, #0
 800f25a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f264:	b25b      	sxtb	r3, r3
 800f266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f26a:	d103      	bne.n	800f274 <xQueueReceive+0x138>
 800f26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26e:	2200      	movs	r2, #0
 800f270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f274:	f001 fe4e 	bl	8010f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f278:	1d3a      	adds	r2, r7, #4
 800f27a:	f107 0310 	add.w	r3, r7, #16
 800f27e:	4611      	mov	r1, r2
 800f280:	4618      	mov	r0, r3
 800f282:	f000 ff77 	bl	8010174 <xTaskCheckForTimeOut>
 800f286:	4603      	mov	r3, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d123      	bne.n	800f2d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f28c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f28e:	f000 f9ba 	bl	800f606 <prvIsQueueEmpty>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d017      	beq.n	800f2c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29a:	3324      	adds	r3, #36	; 0x24
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	4611      	mov	r1, r2
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f000 fe9d 	bl	800ffe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2a8:	f000 f95b 	bl	800f562 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2ac:	f000 fccc 	bl	800fc48 <xTaskResumeAll>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d189      	bne.n	800f1ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f2b6:	4b10      	ldr	r3, [pc, #64]	; (800f2f8 <xQueueReceive+0x1bc>)
 800f2b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2bc:	601a      	str	r2, [r3, #0]
 800f2be:	f3bf 8f4f 	dsb	sy
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	e780      	b.n	800f1ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ca:	f000 f94a 	bl	800f562 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2ce:	f000 fcbb 	bl	800fc48 <xTaskResumeAll>
 800f2d2:	e77a      	b.n	800f1ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2d6:	f000 f944 	bl	800f562 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2da:	f000 fcb5 	bl	800fc48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2e0:	f000 f991 	bl	800f606 <prvIsQueueEmpty>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	f43f af6f 	beq.w	800f1ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f2ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3730      	adds	r7, #48	; 0x30
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	e000ed04 	.word	0xe000ed04

0800f2fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b08e      	sub	sp, #56	; 0x38
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d10a      	bne.n	800f328 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f316:	f383 8811 	msr	BASEPRI, r3
 800f31a:	f3bf 8f6f 	isb	sy
 800f31e:	f3bf 8f4f 	dsb	sy
 800f322:	623b      	str	r3, [r7, #32]
}
 800f324:	bf00      	nop
 800f326:	e7fe      	b.n	800f326 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d103      	bne.n	800f336 <xQueueReceiveFromISR+0x3a>
 800f32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f332:	2b00      	cmp	r3, #0
 800f334:	d101      	bne.n	800f33a <xQueueReceiveFromISR+0x3e>
 800f336:	2301      	movs	r3, #1
 800f338:	e000      	b.n	800f33c <xQueueReceiveFromISR+0x40>
 800f33a:	2300      	movs	r3, #0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d10a      	bne.n	800f356 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	61fb      	str	r3, [r7, #28]
}
 800f352:	bf00      	nop
 800f354:	e7fe      	b.n	800f354 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f356:	f001 fe8f 	bl	8011078 <vPortValidateInterruptPriority>
	__asm volatile
 800f35a:	f3ef 8211 	mrs	r2, BASEPRI
 800f35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f362:	f383 8811 	msr	BASEPRI, r3
 800f366:	f3bf 8f6f 	isb	sy
 800f36a:	f3bf 8f4f 	dsb	sy
 800f36e:	61ba      	str	r2, [r7, #24]
 800f370:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f372:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f374:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f37a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d02f      	beq.n	800f3e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f38c:	68b9      	ldr	r1, [r7, #8]
 800f38e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f390:	f000 f8c1 	bl	800f516 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	1e5a      	subs	r2, r3, #1
 800f398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f39c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f3a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3a4:	d112      	bne.n	800f3cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a8:	691b      	ldr	r3, [r3, #16]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d016      	beq.n	800f3dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b0:	3310      	adds	r3, #16
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 fe64 	bl	8010080 <xTaskRemoveFromEventList>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d00e      	beq.n	800f3dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00b      	beq.n	800f3dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	e007      	b.n	800f3dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	b25a      	sxtb	r2, r3
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	637b      	str	r3, [r7, #52]	; 0x34
 800f3e0:	e001      	b.n	800f3e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	637b      	str	r3, [r7, #52]	; 0x34
 800f3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	f383 8811 	msr	BASEPRI, r3
}
 800f3f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3738      	adds	r7, #56	; 0x38
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d10a      	bne.n	800f424 <vQueueDelete+0x28>
	__asm volatile
 800f40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	60bb      	str	r3, [r7, #8]
}
 800f420:	bf00      	nop
 800f422:	e7fe      	b.n	800f422 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f000 f947 	bl	800f6b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f430:	2b00      	cmp	r3, #0
 800f432:	d102      	bne.n	800f43a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f001 ff03 	bl	8011240 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f43a:	bf00      	nop
 800f43c:	3710      	adds	r7, #16
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b086      	sub	sp, #24
 800f446:	af00      	add	r7, sp, #0
 800f448:	60f8      	str	r0, [r7, #12]
 800f44a:	60b9      	str	r1, [r7, #8]
 800f44c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f44e:	2300      	movs	r3, #0
 800f450:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f456:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d10d      	bne.n	800f47c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d14d      	bne.n	800f504 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	4618      	mov	r0, r3
 800f46e:	f000 ffe7 	bl	8010440 <xTaskPriorityDisinherit>
 800f472:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2200      	movs	r2, #0
 800f478:	609a      	str	r2, [r3, #8]
 800f47a:	e043      	b.n	800f504 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d119      	bne.n	800f4b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	6858      	ldr	r0, [r3, #4]
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f48a:	461a      	mov	r2, r3
 800f48c:	68b9      	ldr	r1, [r7, #8]
 800f48e:	f002 fa7d 	bl	801198c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	685a      	ldr	r2, [r3, #4]
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f49a:	441a      	add	r2, r3
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	685a      	ldr	r2, [r3, #4]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	689b      	ldr	r3, [r3, #8]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d32b      	bcc.n	800f504 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	605a      	str	r2, [r3, #4]
 800f4b4:	e026      	b.n	800f504 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	68d8      	ldr	r0, [r3, #12]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4be:	461a      	mov	r2, r3
 800f4c0:	68b9      	ldr	r1, [r7, #8]
 800f4c2:	f002 fa63 	bl	801198c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	68da      	ldr	r2, [r3, #12]
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ce:	425b      	negs	r3, r3
 800f4d0:	441a      	add	r2, r3
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	68da      	ldr	r2, [r3, #12]
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d207      	bcs.n	800f4f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	689a      	ldr	r2, [r3, #8]
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ea:	425b      	negs	r3, r3
 800f4ec:	441a      	add	r2, r3
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	d105      	bne.n	800f504 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d002      	beq.n	800f504 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	3b01      	subs	r3, #1
 800f502:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	1c5a      	adds	r2, r3, #1
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f50c:	697b      	ldr	r3, [r7, #20]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3718      	adds	r7, #24
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b082      	sub	sp, #8
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f524:	2b00      	cmp	r3, #0
 800f526:	d018      	beq.n	800f55a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	68da      	ldr	r2, [r3, #12]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f530:	441a      	add	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	68da      	ldr	r2, [r3, #12]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d303      	bcc.n	800f54a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	68d9      	ldr	r1, [r3, #12]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f552:	461a      	mov	r2, r3
 800f554:	6838      	ldr	r0, [r7, #0]
 800f556:	f002 fa19 	bl	801198c <memcpy>
	}
}
 800f55a:	bf00      	nop
 800f55c:	3708      	adds	r7, #8
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}

0800f562 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f562:	b580      	push	{r7, lr}
 800f564:	b084      	sub	sp, #16
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f56a:	f001 fca3 	bl	8010eb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f574:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f576:	e011      	b.n	800f59c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d012      	beq.n	800f5a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	3324      	adds	r3, #36	; 0x24
 800f584:	4618      	mov	r0, r3
 800f586:	f000 fd7b 	bl	8010080 <xTaskRemoveFromEventList>
 800f58a:	4603      	mov	r3, r0
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d001      	beq.n	800f594 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f590:	f000 fe52 	bl	8010238 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f594:	7bfb      	ldrb	r3, [r7, #15]
 800f596:	3b01      	subs	r3, #1
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f59c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	dce9      	bgt.n	800f578 <prvUnlockQueue+0x16>
 800f5a4:	e000      	b.n	800f5a8 <prvUnlockQueue+0x46>
					break;
 800f5a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	22ff      	movs	r2, #255	; 0xff
 800f5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f5b0:	f001 fcb0 	bl	8010f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f5b4:	f001 fc7e 	bl	8010eb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f5c0:	e011      	b.n	800f5e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	691b      	ldr	r3, [r3, #16]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d012      	beq.n	800f5f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	3310      	adds	r3, #16
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f000 fd56 	bl	8010080 <xTaskRemoveFromEventList>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d001      	beq.n	800f5de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f5da:	f000 fe2d 	bl	8010238 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f5de:	7bbb      	ldrb	r3, [r7, #14]
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f5e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	dce9      	bgt.n	800f5c2 <prvUnlockQueue+0x60>
 800f5ee:	e000      	b.n	800f5f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f5f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	22ff      	movs	r2, #255	; 0xff
 800f5f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f5fa:	f001 fc8b 	bl	8010f14 <vPortExitCritical>
}
 800f5fe:	bf00      	nop
 800f600:	3710      	adds	r7, #16
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b084      	sub	sp, #16
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f60e:	f001 fc51 	bl	8010eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f616:	2b00      	cmp	r3, #0
 800f618:	d102      	bne.n	800f620 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f61a:	2301      	movs	r3, #1
 800f61c:	60fb      	str	r3, [r7, #12]
 800f61e:	e001      	b.n	800f624 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f620:	2300      	movs	r3, #0
 800f622:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f624:	f001 fc76 	bl	8010f14 <vPortExitCritical>

	return xReturn;
 800f628:	68fb      	ldr	r3, [r7, #12]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3710      	adds	r7, #16
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b084      	sub	sp, #16
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f63a:	f001 fc3b 	bl	8010eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f646:	429a      	cmp	r2, r3
 800f648:	d102      	bne.n	800f650 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f64a:	2301      	movs	r3, #1
 800f64c:	60fb      	str	r3, [r7, #12]
 800f64e:	e001      	b.n	800f654 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f650:	2300      	movs	r3, #0
 800f652:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f654:	f001 fc5e 	bl	8010f14 <vPortExitCritical>

	return xReturn;
 800f658:	68fb      	ldr	r3, [r7, #12]
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3710      	adds	r7, #16
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
	...

0800f664 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f66e:	2300      	movs	r3, #0
 800f670:	60fb      	str	r3, [r7, #12]
 800f672:	e014      	b.n	800f69e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f674:	4a0f      	ldr	r2, [pc, #60]	; (800f6b4 <vQueueAddToRegistry+0x50>)
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10b      	bne.n	800f698 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f680:	490c      	ldr	r1, [pc, #48]	; (800f6b4 <vQueueAddToRegistry+0x50>)
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	683a      	ldr	r2, [r7, #0]
 800f686:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f68a:	4a0a      	ldr	r2, [pc, #40]	; (800f6b4 <vQueueAddToRegistry+0x50>)
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	00db      	lsls	r3, r3, #3
 800f690:	4413      	add	r3, r2
 800f692:	687a      	ldr	r2, [r7, #4]
 800f694:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f696:	e006      	b.n	800f6a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	3301      	adds	r3, #1
 800f69c:	60fb      	str	r3, [r7, #12]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2b07      	cmp	r3, #7
 800f6a2:	d9e7      	bls.n	800f674 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f6a4:	bf00      	nop
 800f6a6:	bf00      	nop
 800f6a8:	3714      	adds	r7, #20
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr
 800f6b2:	bf00      	nop
 800f6b4:	20007c40 	.word	0x20007c40

0800f6b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b085      	sub	sp, #20
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	60fb      	str	r3, [r7, #12]
 800f6c4:	e016      	b.n	800f6f4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f6c6:	4a10      	ldr	r2, [pc, #64]	; (800f708 <vQueueUnregisterQueue+0x50>)
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	00db      	lsls	r3, r3, #3
 800f6cc:	4413      	add	r3, r2
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d10b      	bne.n	800f6ee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f6d6:	4a0c      	ldr	r2, [pc, #48]	; (800f708 <vQueueUnregisterQueue+0x50>)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2100      	movs	r1, #0
 800f6dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f6e0:	4a09      	ldr	r2, [pc, #36]	; (800f708 <vQueueUnregisterQueue+0x50>)
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	00db      	lsls	r3, r3, #3
 800f6e6:	4413      	add	r3, r2
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	605a      	str	r2, [r3, #4]
				break;
 800f6ec:	e006      	b.n	800f6fc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	60fb      	str	r3, [r7, #12]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2b07      	cmp	r3, #7
 800f6f8:	d9e5      	bls.n	800f6c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f6fa:	bf00      	nop
 800f6fc:	bf00      	nop
 800f6fe:	3714      	adds	r7, #20
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr
 800f708:	20007c40 	.word	0x20007c40

0800f70c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b086      	sub	sp, #24
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f71c:	f001 fbca 	bl	8010eb4 <vPortEnterCritical>
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f726:	b25b      	sxtb	r3, r3
 800f728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f72c:	d103      	bne.n	800f736 <vQueueWaitForMessageRestricted+0x2a>
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	2200      	movs	r2, #0
 800f732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f73c:	b25b      	sxtb	r3, r3
 800f73e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f742:	d103      	bne.n	800f74c <vQueueWaitForMessageRestricted+0x40>
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	2200      	movs	r2, #0
 800f748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f74c:	f001 fbe2 	bl	8010f14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f754:	2b00      	cmp	r3, #0
 800f756:	d106      	bne.n	800f766 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	3324      	adds	r3, #36	; 0x24
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	68b9      	ldr	r1, [r7, #8]
 800f760:	4618      	mov	r0, r3
 800f762:	f000 fc61 	bl	8010028 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f766:	6978      	ldr	r0, [r7, #20]
 800f768:	f7ff fefb 	bl	800f562 <prvUnlockQueue>
	}
 800f76c:	bf00      	nop
 800f76e:	3718      	adds	r7, #24
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f774:	b580      	push	{r7, lr}
 800f776:	b08e      	sub	sp, #56	; 0x38
 800f778:	af04      	add	r7, sp, #16
 800f77a:	60f8      	str	r0, [r7, #12]
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	607a      	str	r2, [r7, #4]
 800f780:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f784:	2b00      	cmp	r3, #0
 800f786:	d10a      	bne.n	800f79e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f78c:	f383 8811 	msr	BASEPRI, r3
 800f790:	f3bf 8f6f 	isb	sy
 800f794:	f3bf 8f4f 	dsb	sy
 800f798:	623b      	str	r3, [r7, #32]
}
 800f79a:	bf00      	nop
 800f79c:	e7fe      	b.n	800f79c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d10a      	bne.n	800f7ba <xTaskCreateStatic+0x46>
	__asm volatile
 800f7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a8:	f383 8811 	msr	BASEPRI, r3
 800f7ac:	f3bf 8f6f 	isb	sy
 800f7b0:	f3bf 8f4f 	dsb	sy
 800f7b4:	61fb      	str	r3, [r7, #28]
}
 800f7b6:	bf00      	nop
 800f7b8:	e7fe      	b.n	800f7b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f7ba:	23bc      	movs	r3, #188	; 0xbc
 800f7bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	2bbc      	cmp	r3, #188	; 0xbc
 800f7c2:	d00a      	beq.n	800f7da <xTaskCreateStatic+0x66>
	__asm volatile
 800f7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c8:	f383 8811 	msr	BASEPRI, r3
 800f7cc:	f3bf 8f6f 	isb	sy
 800f7d0:	f3bf 8f4f 	dsb	sy
 800f7d4:	61bb      	str	r3, [r7, #24]
}
 800f7d6:	bf00      	nop
 800f7d8:	e7fe      	b.n	800f7d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f7da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d01e      	beq.n	800f820 <xTaskCreateStatic+0xac>
 800f7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d01b      	beq.n	800f820 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f4:	2202      	movs	r2, #2
 800f7f6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	9303      	str	r3, [sp, #12]
 800f7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f800:	9302      	str	r3, [sp, #8]
 800f802:	f107 0314 	add.w	r3, r7, #20
 800f806:	9301      	str	r3, [sp, #4]
 800f808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	68b9      	ldr	r1, [r7, #8]
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f000 f850 	bl	800f8b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f81a:	f000 f8f3 	bl	800fa04 <prvAddNewTaskToReadyList>
 800f81e:	e001      	b.n	800f824 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f820:	2300      	movs	r3, #0
 800f822:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f824:	697b      	ldr	r3, [r7, #20]
	}
 800f826:	4618      	mov	r0, r3
 800f828:	3728      	adds	r7, #40	; 0x28
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f82e:	b580      	push	{r7, lr}
 800f830:	b08c      	sub	sp, #48	; 0x30
 800f832:	af04      	add	r7, sp, #16
 800f834:	60f8      	str	r0, [r7, #12]
 800f836:	60b9      	str	r1, [r7, #8]
 800f838:	603b      	str	r3, [r7, #0]
 800f83a:	4613      	mov	r3, r2
 800f83c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f83e:	88fb      	ldrh	r3, [r7, #6]
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	4618      	mov	r0, r3
 800f844:	f001 fc58 	bl	80110f8 <pvPortMalloc>
 800f848:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00e      	beq.n	800f86e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f850:	20bc      	movs	r0, #188	; 0xbc
 800f852:	f001 fc51 	bl	80110f8 <pvPortMalloc>
 800f856:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d003      	beq.n	800f866 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	697a      	ldr	r2, [r7, #20]
 800f862:	631a      	str	r2, [r3, #48]	; 0x30
 800f864:	e005      	b.n	800f872 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f866:	6978      	ldr	r0, [r7, #20]
 800f868:	f001 fcea 	bl	8011240 <vPortFree>
 800f86c:	e001      	b.n	800f872 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f86e:	2300      	movs	r3, #0
 800f870:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d017      	beq.n	800f8a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	2200      	movs	r2, #0
 800f87c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f880:	88fa      	ldrh	r2, [r7, #6]
 800f882:	2300      	movs	r3, #0
 800f884:	9303      	str	r3, [sp, #12]
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	9302      	str	r3, [sp, #8]
 800f88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88c:	9301      	str	r3, [sp, #4]
 800f88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f890:	9300      	str	r3, [sp, #0]
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	68b9      	ldr	r1, [r7, #8]
 800f896:	68f8      	ldr	r0, [r7, #12]
 800f898:	f000 f80e 	bl	800f8b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f89c:	69f8      	ldr	r0, [r7, #28]
 800f89e:	f000 f8b1 	bl	800fa04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	61bb      	str	r3, [r7, #24]
 800f8a6:	e002      	b.n	800f8ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f8a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f8ae:	69bb      	ldr	r3, [r7, #24]
	}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3720      	adds	r7, #32
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b088      	sub	sp, #32
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	607a      	str	r2, [r7, #4]
 800f8c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	009b      	lsls	r3, r3, #2
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	21a5      	movs	r1, #165	; 0xa5
 800f8d2:	f002 f869 	bl	80119a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f8e0:	3b01      	subs	r3, #1
 800f8e2:	009b      	lsls	r3, r3, #2
 800f8e4:	4413      	add	r3, r2
 800f8e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f8e8:	69bb      	ldr	r3, [r7, #24]
 800f8ea:	f023 0307 	bic.w	r3, r3, #7
 800f8ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f8f0:	69bb      	ldr	r3, [r7, #24]
 800f8f2:	f003 0307 	and.w	r3, r3, #7
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00a      	beq.n	800f910 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8fe:	f383 8811 	msr	BASEPRI, r3
 800f902:	f3bf 8f6f 	isb	sy
 800f906:	f3bf 8f4f 	dsb	sy
 800f90a:	617b      	str	r3, [r7, #20]
}
 800f90c:	bf00      	nop
 800f90e:	e7fe      	b.n	800f90e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d01f      	beq.n	800f956 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f916:	2300      	movs	r3, #0
 800f918:	61fb      	str	r3, [r7, #28]
 800f91a:	e012      	b.n	800f942 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f91c:	68ba      	ldr	r2, [r7, #8]
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	4413      	add	r3, r2
 800f922:	7819      	ldrb	r1, [r3, #0]
 800f924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	4413      	add	r3, r2
 800f92a:	3334      	adds	r3, #52	; 0x34
 800f92c:	460a      	mov	r2, r1
 800f92e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f930:	68ba      	ldr	r2, [r7, #8]
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	4413      	add	r3, r2
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d006      	beq.n	800f94a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	3301      	adds	r3, #1
 800f940:	61fb      	str	r3, [r7, #28]
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	2b0f      	cmp	r3, #15
 800f946:	d9e9      	bls.n	800f91c <prvInitialiseNewTask+0x64>
 800f948:	e000      	b.n	800f94c <prvInitialiseNewTask+0x94>
			{
				break;
 800f94a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94e:	2200      	movs	r2, #0
 800f950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f954:	e003      	b.n	800f95e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f958:	2200      	movs	r2, #0
 800f95a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f960:	2b37      	cmp	r3, #55	; 0x37
 800f962:	d901      	bls.n	800f968 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f964:	2337      	movs	r3, #55	; 0x37
 800f966:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f96c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f972:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f976:	2200      	movs	r2, #0
 800f978:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f97c:	3304      	adds	r3, #4
 800f97e:	4618      	mov	r0, r3
 800f980:	f7ff f806 	bl	800e990 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f986:	3318      	adds	r3, #24
 800f988:	4618      	mov	r0, r3
 800f98a:	f7ff f801 	bl	800e990 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f992:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f996:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b6:	3354      	adds	r3, #84	; 0x54
 800f9b8:	2260      	movs	r2, #96	; 0x60
 800f9ba:	2100      	movs	r1, #0
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f001 fff3 	bl	80119a8 <memset>
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c4:	4a0c      	ldr	r2, [pc, #48]	; (800f9f8 <prvInitialiseNewTask+0x140>)
 800f9c6:	659a      	str	r2, [r3, #88]	; 0x58
 800f9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ca:	4a0c      	ldr	r2, [pc, #48]	; (800f9fc <prvInitialiseNewTask+0x144>)
 800f9cc:	65da      	str	r2, [r3, #92]	; 0x5c
 800f9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d0:	4a0b      	ldr	r2, [pc, #44]	; (800fa00 <prvInitialiseNewTask+0x148>)
 800f9d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f9d4:	683a      	ldr	r2, [r7, #0]
 800f9d6:	68f9      	ldr	r1, [r7, #12]
 800f9d8:	69b8      	ldr	r0, [r7, #24]
 800f9da:	f001 f941 	bl	8010c60 <pxPortInitialiseStack>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d002      	beq.n	800f9f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9f0:	bf00      	nop
 800f9f2:	3720      	adds	r7, #32
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}
 800f9f8:	08016a98 	.word	0x08016a98
 800f9fc:	08016ab8 	.word	0x08016ab8
 800fa00:	08016a78 	.word	0x08016a78

0800fa04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fa0c:	f001 fa52 	bl	8010eb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fa10:	4b2d      	ldr	r3, [pc, #180]	; (800fac8 <prvAddNewTaskToReadyList+0xc4>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	3301      	adds	r3, #1
 800fa16:	4a2c      	ldr	r2, [pc, #176]	; (800fac8 <prvAddNewTaskToReadyList+0xc4>)
 800fa18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fa1a:	4b2c      	ldr	r3, [pc, #176]	; (800facc <prvAddNewTaskToReadyList+0xc8>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d109      	bne.n	800fa36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fa22:	4a2a      	ldr	r2, [pc, #168]	; (800facc <prvAddNewTaskToReadyList+0xc8>)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fa28:	4b27      	ldr	r3, [pc, #156]	; (800fac8 <prvAddNewTaskToReadyList+0xc4>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d110      	bne.n	800fa52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fa30:	f000 fc26 	bl	8010280 <prvInitialiseTaskLists>
 800fa34:	e00d      	b.n	800fa52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fa36:	4b26      	ldr	r3, [pc, #152]	; (800fad0 <prvAddNewTaskToReadyList+0xcc>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d109      	bne.n	800fa52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fa3e:	4b23      	ldr	r3, [pc, #140]	; (800facc <prvAddNewTaskToReadyList+0xc8>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d802      	bhi.n	800fa52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fa4c:	4a1f      	ldr	r2, [pc, #124]	; (800facc <prvAddNewTaskToReadyList+0xc8>)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fa52:	4b20      	ldr	r3, [pc, #128]	; (800fad4 <prvAddNewTaskToReadyList+0xd0>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	3301      	adds	r3, #1
 800fa58:	4a1e      	ldr	r2, [pc, #120]	; (800fad4 <prvAddNewTaskToReadyList+0xd0>)
 800fa5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fa5c:	4b1d      	ldr	r3, [pc, #116]	; (800fad4 <prvAddNewTaskToReadyList+0xd0>)
 800fa5e:	681a      	ldr	r2, [r3, #0]
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa68:	4b1b      	ldr	r3, [pc, #108]	; (800fad8 <prvAddNewTaskToReadyList+0xd4>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d903      	bls.n	800fa78 <prvAddNewTaskToReadyList+0x74>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa74:	4a18      	ldr	r2, [pc, #96]	; (800fad8 <prvAddNewTaskToReadyList+0xd4>)
 800fa76:	6013      	str	r3, [r2, #0]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa7c:	4613      	mov	r3, r2
 800fa7e:	009b      	lsls	r3, r3, #2
 800fa80:	4413      	add	r3, r2
 800fa82:	009b      	lsls	r3, r3, #2
 800fa84:	4a15      	ldr	r2, [pc, #84]	; (800fadc <prvAddNewTaskToReadyList+0xd8>)
 800fa86:	441a      	add	r2, r3
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	3304      	adds	r3, #4
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	4610      	mov	r0, r2
 800fa90:	f7fe ff8b 	bl	800e9aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fa94:	f001 fa3e 	bl	8010f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fa98:	4b0d      	ldr	r3, [pc, #52]	; (800fad0 <prvAddNewTaskToReadyList+0xcc>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00e      	beq.n	800fabe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800faa0:	4b0a      	ldr	r3, [pc, #40]	; (800facc <prvAddNewTaskToReadyList+0xc8>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faaa:	429a      	cmp	r2, r3
 800faac:	d207      	bcs.n	800fabe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800faae:	4b0c      	ldr	r3, [pc, #48]	; (800fae0 <prvAddNewTaskToReadyList+0xdc>)
 800fab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fab4:	601a      	str	r2, [r3, #0]
 800fab6:	f3bf 8f4f 	dsb	sy
 800faba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fabe:	bf00      	nop
 800fac0:	3708      	adds	r7, #8
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	20008154 	.word	0x20008154
 800facc:	20007c80 	.word	0x20007c80
 800fad0:	20008160 	.word	0x20008160
 800fad4:	20008170 	.word	0x20008170
 800fad8:	2000815c 	.word	0x2000815c
 800fadc:	20007c84 	.word	0x20007c84
 800fae0:	e000ed04 	.word	0xe000ed04

0800fae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800faec:	2300      	movs	r3, #0
 800faee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d017      	beq.n	800fb26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800faf6:	4b13      	ldr	r3, [pc, #76]	; (800fb44 <vTaskDelay+0x60>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d00a      	beq.n	800fb14 <vTaskDelay+0x30>
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	60bb      	str	r3, [r7, #8]
}
 800fb10:	bf00      	nop
 800fb12:	e7fe      	b.n	800fb12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fb14:	f000 f88a 	bl	800fc2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fb18:	2100      	movs	r1, #0
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f000 fcfe 	bl	801051c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fb20:	f000 f892 	bl	800fc48 <xTaskResumeAll>
 800fb24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d107      	bne.n	800fb3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fb2c:	4b06      	ldr	r3, [pc, #24]	; (800fb48 <vTaskDelay+0x64>)
 800fb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb32:	601a      	str	r2, [r3, #0]
 800fb34:	f3bf 8f4f 	dsb	sy
 800fb38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fb3c:	bf00      	nop
 800fb3e:	3710      	adds	r7, #16
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	2000817c 	.word	0x2000817c
 800fb48:	e000ed04 	.word	0xe000ed04

0800fb4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b08a      	sub	sp, #40	; 0x28
 800fb50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fb52:	2300      	movs	r3, #0
 800fb54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fb56:	2300      	movs	r3, #0
 800fb58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fb5a:	463a      	mov	r2, r7
 800fb5c:	1d39      	adds	r1, r7, #4
 800fb5e:	f107 0308 	add.w	r3, r7, #8
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fe fec0 	bl	800e8e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fb68:	6839      	ldr	r1, [r7, #0]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	68ba      	ldr	r2, [r7, #8]
 800fb6e:	9202      	str	r2, [sp, #8]
 800fb70:	9301      	str	r3, [sp, #4]
 800fb72:	2300      	movs	r3, #0
 800fb74:	9300      	str	r3, [sp, #0]
 800fb76:	2300      	movs	r3, #0
 800fb78:	460a      	mov	r2, r1
 800fb7a:	4924      	ldr	r1, [pc, #144]	; (800fc0c <vTaskStartScheduler+0xc0>)
 800fb7c:	4824      	ldr	r0, [pc, #144]	; (800fc10 <vTaskStartScheduler+0xc4>)
 800fb7e:	f7ff fdf9 	bl	800f774 <xTaskCreateStatic>
 800fb82:	4603      	mov	r3, r0
 800fb84:	4a23      	ldr	r2, [pc, #140]	; (800fc14 <vTaskStartScheduler+0xc8>)
 800fb86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fb88:	4b22      	ldr	r3, [pc, #136]	; (800fc14 <vTaskStartScheduler+0xc8>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d002      	beq.n	800fb96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fb90:	2301      	movs	r3, #1
 800fb92:	617b      	str	r3, [r7, #20]
 800fb94:	e001      	b.n	800fb9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fb96:	2300      	movs	r3, #0
 800fb98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d102      	bne.n	800fba6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fba0:	f000 fd10 	bl	80105c4 <xTimerCreateTimerTask>
 800fba4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d11b      	bne.n	800fbe4 <vTaskStartScheduler+0x98>
	__asm volatile
 800fbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb0:	f383 8811 	msr	BASEPRI, r3
 800fbb4:	f3bf 8f6f 	isb	sy
 800fbb8:	f3bf 8f4f 	dsb	sy
 800fbbc:	613b      	str	r3, [r7, #16]
}
 800fbbe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fbc0:	4b15      	ldr	r3, [pc, #84]	; (800fc18 <vTaskStartScheduler+0xcc>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	3354      	adds	r3, #84	; 0x54
 800fbc6:	4a15      	ldr	r2, [pc, #84]	; (800fc1c <vTaskStartScheduler+0xd0>)
 800fbc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fbca:	4b15      	ldr	r3, [pc, #84]	; (800fc20 <vTaskStartScheduler+0xd4>)
 800fbcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fbd2:	4b14      	ldr	r3, [pc, #80]	; (800fc24 <vTaskStartScheduler+0xd8>)
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fbd8:	4b13      	ldr	r3, [pc, #76]	; (800fc28 <vTaskStartScheduler+0xdc>)
 800fbda:	2200      	movs	r2, #0
 800fbdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fbde:	f001 f8c7 	bl	8010d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fbe2:	e00e      	b.n	800fc02 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbea:	d10a      	bne.n	800fc02 <vTaskStartScheduler+0xb6>
	__asm volatile
 800fbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf0:	f383 8811 	msr	BASEPRI, r3
 800fbf4:	f3bf 8f6f 	isb	sy
 800fbf8:	f3bf 8f4f 	dsb	sy
 800fbfc:	60fb      	str	r3, [r7, #12]
}
 800fbfe:	bf00      	nop
 800fc00:	e7fe      	b.n	800fc00 <vTaskStartScheduler+0xb4>
}
 800fc02:	bf00      	nop
 800fc04:	3718      	adds	r7, #24
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	08014778 	.word	0x08014778
 800fc10:	08010251 	.word	0x08010251
 800fc14:	20008178 	.word	0x20008178
 800fc18:	20007c80 	.word	0x20007c80
 800fc1c:	200000b8 	.word	0x200000b8
 800fc20:	20008174 	.word	0x20008174
 800fc24:	20008160 	.word	0x20008160
 800fc28:	20008158 	.word	0x20008158

0800fc2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fc30:	4b04      	ldr	r3, [pc, #16]	; (800fc44 <vTaskSuspendAll+0x18>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	3301      	adds	r3, #1
 800fc36:	4a03      	ldr	r2, [pc, #12]	; (800fc44 <vTaskSuspendAll+0x18>)
 800fc38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fc3a:	bf00      	nop
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr
 800fc44:	2000817c 	.word	0x2000817c

0800fc48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fc52:	2300      	movs	r3, #0
 800fc54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fc56:	4b42      	ldr	r3, [pc, #264]	; (800fd60 <xTaskResumeAll+0x118>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d10a      	bne.n	800fc74 <xTaskResumeAll+0x2c>
	__asm volatile
 800fc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc62:	f383 8811 	msr	BASEPRI, r3
 800fc66:	f3bf 8f6f 	isb	sy
 800fc6a:	f3bf 8f4f 	dsb	sy
 800fc6e:	603b      	str	r3, [r7, #0]
}
 800fc70:	bf00      	nop
 800fc72:	e7fe      	b.n	800fc72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fc74:	f001 f91e 	bl	8010eb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fc78:	4b39      	ldr	r3, [pc, #228]	; (800fd60 <xTaskResumeAll+0x118>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	3b01      	subs	r3, #1
 800fc7e:	4a38      	ldr	r2, [pc, #224]	; (800fd60 <xTaskResumeAll+0x118>)
 800fc80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc82:	4b37      	ldr	r3, [pc, #220]	; (800fd60 <xTaskResumeAll+0x118>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d162      	bne.n	800fd50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fc8a:	4b36      	ldr	r3, [pc, #216]	; (800fd64 <xTaskResumeAll+0x11c>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d05e      	beq.n	800fd50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc92:	e02f      	b.n	800fcf4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc94:	4b34      	ldr	r3, [pc, #208]	; (800fd68 <xTaskResumeAll+0x120>)
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	68db      	ldr	r3, [r3, #12]
 800fc9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	3318      	adds	r3, #24
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7fe fedf 	bl	800ea64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	3304      	adds	r3, #4
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7fe feda 	bl	800ea64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb4:	4b2d      	ldr	r3, [pc, #180]	; (800fd6c <xTaskResumeAll+0x124>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d903      	bls.n	800fcc4 <xTaskResumeAll+0x7c>
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc0:	4a2a      	ldr	r2, [pc, #168]	; (800fd6c <xTaskResumeAll+0x124>)
 800fcc2:	6013      	str	r3, [r2, #0]
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcc8:	4613      	mov	r3, r2
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	4413      	add	r3, r2
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	4a27      	ldr	r2, [pc, #156]	; (800fd70 <xTaskResumeAll+0x128>)
 800fcd2:	441a      	add	r2, r3
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	3304      	adds	r3, #4
 800fcd8:	4619      	mov	r1, r3
 800fcda:	4610      	mov	r0, r2
 800fcdc:	f7fe fe65 	bl	800e9aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fce4:	4b23      	ldr	r3, [pc, #140]	; (800fd74 <xTaskResumeAll+0x12c>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d302      	bcc.n	800fcf4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fcee:	4b22      	ldr	r3, [pc, #136]	; (800fd78 <xTaskResumeAll+0x130>)
 800fcf0:	2201      	movs	r2, #1
 800fcf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fcf4:	4b1c      	ldr	r3, [pc, #112]	; (800fd68 <xTaskResumeAll+0x120>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1cb      	bne.n	800fc94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d001      	beq.n	800fd06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fd02:	f000 fb5f 	bl	80103c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fd06:	4b1d      	ldr	r3, [pc, #116]	; (800fd7c <xTaskResumeAll+0x134>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d010      	beq.n	800fd34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fd12:	f000 f847 	bl	800fda4 <xTaskIncrementTick>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d002      	beq.n	800fd22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fd1c:	4b16      	ldr	r3, [pc, #88]	; (800fd78 <xTaskResumeAll+0x130>)
 800fd1e:	2201      	movs	r2, #1
 800fd20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	3b01      	subs	r3, #1
 800fd26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d1f1      	bne.n	800fd12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fd2e:	4b13      	ldr	r3, [pc, #76]	; (800fd7c <xTaskResumeAll+0x134>)
 800fd30:	2200      	movs	r2, #0
 800fd32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fd34:	4b10      	ldr	r3, [pc, #64]	; (800fd78 <xTaskResumeAll+0x130>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d009      	beq.n	800fd50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fd40:	4b0f      	ldr	r3, [pc, #60]	; (800fd80 <xTaskResumeAll+0x138>)
 800fd42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd46:	601a      	str	r2, [r3, #0]
 800fd48:	f3bf 8f4f 	dsb	sy
 800fd4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fd50:	f001 f8e0 	bl	8010f14 <vPortExitCritical>

	return xAlreadyYielded;
 800fd54:	68bb      	ldr	r3, [r7, #8]
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3710      	adds	r7, #16
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	2000817c 	.word	0x2000817c
 800fd64:	20008154 	.word	0x20008154
 800fd68:	20008114 	.word	0x20008114
 800fd6c:	2000815c 	.word	0x2000815c
 800fd70:	20007c84 	.word	0x20007c84
 800fd74:	20007c80 	.word	0x20007c80
 800fd78:	20008168 	.word	0x20008168
 800fd7c:	20008164 	.word	0x20008164
 800fd80:	e000ed04 	.word	0xe000ed04

0800fd84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fd84:	b480      	push	{r7}
 800fd86:	b083      	sub	sp, #12
 800fd88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fd8a:	4b05      	ldr	r3, [pc, #20]	; (800fda0 <xTaskGetTickCount+0x1c>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fd90:	687b      	ldr	r3, [r7, #4]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	370c      	adds	r7, #12
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr
 800fd9e:	bf00      	nop
 800fda0:	20008158 	.word	0x20008158

0800fda4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b086      	sub	sp, #24
 800fda8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdae:	4b4f      	ldr	r3, [pc, #316]	; (800feec <xTaskIncrementTick+0x148>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	f040 808f 	bne.w	800fed6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fdb8:	4b4d      	ldr	r3, [pc, #308]	; (800fef0 <xTaskIncrementTick+0x14c>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fdc0:	4a4b      	ldr	r2, [pc, #300]	; (800fef0 <xTaskIncrementTick+0x14c>)
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d120      	bne.n	800fe0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fdcc:	4b49      	ldr	r3, [pc, #292]	; (800fef4 <xTaskIncrementTick+0x150>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d00a      	beq.n	800fdec <xTaskIncrementTick+0x48>
	__asm volatile
 800fdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdda:	f383 8811 	msr	BASEPRI, r3
 800fdde:	f3bf 8f6f 	isb	sy
 800fde2:	f3bf 8f4f 	dsb	sy
 800fde6:	603b      	str	r3, [r7, #0]
}
 800fde8:	bf00      	nop
 800fdea:	e7fe      	b.n	800fdea <xTaskIncrementTick+0x46>
 800fdec:	4b41      	ldr	r3, [pc, #260]	; (800fef4 <xTaskIncrementTick+0x150>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	60fb      	str	r3, [r7, #12]
 800fdf2:	4b41      	ldr	r3, [pc, #260]	; (800fef8 <xTaskIncrementTick+0x154>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4a3f      	ldr	r2, [pc, #252]	; (800fef4 <xTaskIncrementTick+0x150>)
 800fdf8:	6013      	str	r3, [r2, #0]
 800fdfa:	4a3f      	ldr	r2, [pc, #252]	; (800fef8 <xTaskIncrementTick+0x154>)
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	6013      	str	r3, [r2, #0]
 800fe00:	4b3e      	ldr	r3, [pc, #248]	; (800fefc <xTaskIncrementTick+0x158>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	3301      	adds	r3, #1
 800fe06:	4a3d      	ldr	r2, [pc, #244]	; (800fefc <xTaskIncrementTick+0x158>)
 800fe08:	6013      	str	r3, [r2, #0]
 800fe0a:	f000 fadb 	bl	80103c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fe0e:	4b3c      	ldr	r3, [pc, #240]	; (800ff00 <xTaskIncrementTick+0x15c>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	693a      	ldr	r2, [r7, #16]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d349      	bcc.n	800feac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe18:	4b36      	ldr	r3, [pc, #216]	; (800fef4 <xTaskIncrementTick+0x150>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d104      	bne.n	800fe2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe22:	4b37      	ldr	r3, [pc, #220]	; (800ff00 <xTaskIncrementTick+0x15c>)
 800fe24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe28:	601a      	str	r2, [r3, #0]
					break;
 800fe2a:	e03f      	b.n	800feac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe2c:	4b31      	ldr	r3, [pc, #196]	; (800fef4 <xTaskIncrementTick+0x150>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	68db      	ldr	r3, [r3, #12]
 800fe32:	68db      	ldr	r3, [r3, #12]
 800fe34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fe3c:	693a      	ldr	r2, [r7, #16]
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d203      	bcs.n	800fe4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fe44:	4a2e      	ldr	r2, [pc, #184]	; (800ff00 <xTaskIncrementTick+0x15c>)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fe4a:	e02f      	b.n	800feac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	3304      	adds	r3, #4
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7fe fe07 	bl	800ea64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d004      	beq.n	800fe68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	3318      	adds	r3, #24
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7fe fdfe 	bl	800ea64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe6c:	4b25      	ldr	r3, [pc, #148]	; (800ff04 <xTaskIncrementTick+0x160>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d903      	bls.n	800fe7c <xTaskIncrementTick+0xd8>
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe78:	4a22      	ldr	r2, [pc, #136]	; (800ff04 <xTaskIncrementTick+0x160>)
 800fe7a:	6013      	str	r3, [r2, #0]
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe80:	4613      	mov	r3, r2
 800fe82:	009b      	lsls	r3, r3, #2
 800fe84:	4413      	add	r3, r2
 800fe86:	009b      	lsls	r3, r3, #2
 800fe88:	4a1f      	ldr	r2, [pc, #124]	; (800ff08 <xTaskIncrementTick+0x164>)
 800fe8a:	441a      	add	r2, r3
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	3304      	adds	r3, #4
 800fe90:	4619      	mov	r1, r3
 800fe92:	4610      	mov	r0, r2
 800fe94:	f7fe fd89 	bl	800e9aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe9c:	4b1b      	ldr	r3, [pc, #108]	; (800ff0c <xTaskIncrementTick+0x168>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d3b8      	bcc.n	800fe18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fea6:	2301      	movs	r3, #1
 800fea8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800feaa:	e7b5      	b.n	800fe18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800feac:	4b17      	ldr	r3, [pc, #92]	; (800ff0c <xTaskIncrementTick+0x168>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb2:	4915      	ldr	r1, [pc, #84]	; (800ff08 <xTaskIncrementTick+0x164>)
 800feb4:	4613      	mov	r3, r2
 800feb6:	009b      	lsls	r3, r3, #2
 800feb8:	4413      	add	r3, r2
 800feba:	009b      	lsls	r3, r3, #2
 800febc:	440b      	add	r3, r1
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d901      	bls.n	800fec8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fec4:	2301      	movs	r3, #1
 800fec6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fec8:	4b11      	ldr	r3, [pc, #68]	; (800ff10 <xTaskIncrementTick+0x16c>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d007      	beq.n	800fee0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fed0:	2301      	movs	r3, #1
 800fed2:	617b      	str	r3, [r7, #20]
 800fed4:	e004      	b.n	800fee0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fed6:	4b0f      	ldr	r3, [pc, #60]	; (800ff14 <xTaskIncrementTick+0x170>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	3301      	adds	r3, #1
 800fedc:	4a0d      	ldr	r2, [pc, #52]	; (800ff14 <xTaskIncrementTick+0x170>)
 800fede:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fee0:	697b      	ldr	r3, [r7, #20]
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3718      	adds	r7, #24
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	2000817c 	.word	0x2000817c
 800fef0:	20008158 	.word	0x20008158
 800fef4:	2000810c 	.word	0x2000810c
 800fef8:	20008110 	.word	0x20008110
 800fefc:	2000816c 	.word	0x2000816c
 800ff00:	20008174 	.word	0x20008174
 800ff04:	2000815c 	.word	0x2000815c
 800ff08:	20007c84 	.word	0x20007c84
 800ff0c:	20007c80 	.word	0x20007c80
 800ff10:	20008168 	.word	0x20008168
 800ff14:	20008164 	.word	0x20008164

0800ff18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b085      	sub	sp, #20
 800ff1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ff1e:	4b2a      	ldr	r3, [pc, #168]	; (800ffc8 <vTaskSwitchContext+0xb0>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d003      	beq.n	800ff2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ff26:	4b29      	ldr	r3, [pc, #164]	; (800ffcc <vTaskSwitchContext+0xb4>)
 800ff28:	2201      	movs	r2, #1
 800ff2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ff2c:	e046      	b.n	800ffbc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ff2e:	4b27      	ldr	r3, [pc, #156]	; (800ffcc <vTaskSwitchContext+0xb4>)
 800ff30:	2200      	movs	r2, #0
 800ff32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff34:	4b26      	ldr	r3, [pc, #152]	; (800ffd0 <vTaskSwitchContext+0xb8>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	60fb      	str	r3, [r7, #12]
 800ff3a:	e010      	b.n	800ff5e <vTaskSwitchContext+0x46>
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d10a      	bne.n	800ff58 <vTaskSwitchContext+0x40>
	__asm volatile
 800ff42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff46:	f383 8811 	msr	BASEPRI, r3
 800ff4a:	f3bf 8f6f 	isb	sy
 800ff4e:	f3bf 8f4f 	dsb	sy
 800ff52:	607b      	str	r3, [r7, #4]
}
 800ff54:	bf00      	nop
 800ff56:	e7fe      	b.n	800ff56 <vTaskSwitchContext+0x3e>
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	3b01      	subs	r3, #1
 800ff5c:	60fb      	str	r3, [r7, #12]
 800ff5e:	491d      	ldr	r1, [pc, #116]	; (800ffd4 <vTaskSwitchContext+0xbc>)
 800ff60:	68fa      	ldr	r2, [r7, #12]
 800ff62:	4613      	mov	r3, r2
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4413      	add	r3, r2
 800ff68:	009b      	lsls	r3, r3, #2
 800ff6a:	440b      	add	r3, r1
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d0e4      	beq.n	800ff3c <vTaskSwitchContext+0x24>
 800ff72:	68fa      	ldr	r2, [r7, #12]
 800ff74:	4613      	mov	r3, r2
 800ff76:	009b      	lsls	r3, r3, #2
 800ff78:	4413      	add	r3, r2
 800ff7a:	009b      	lsls	r3, r3, #2
 800ff7c:	4a15      	ldr	r2, [pc, #84]	; (800ffd4 <vTaskSwitchContext+0xbc>)
 800ff7e:	4413      	add	r3, r2
 800ff80:	60bb      	str	r3, [r7, #8]
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	685a      	ldr	r2, [r3, #4]
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	605a      	str	r2, [r3, #4]
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	685a      	ldr	r2, [r3, #4]
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	3308      	adds	r3, #8
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d104      	bne.n	800ffa2 <vTaskSwitchContext+0x8a>
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	685a      	ldr	r2, [r3, #4]
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	605a      	str	r2, [r3, #4]
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	4a0b      	ldr	r2, [pc, #44]	; (800ffd8 <vTaskSwitchContext+0xc0>)
 800ffaa:	6013      	str	r3, [r2, #0]
 800ffac:	4a08      	ldr	r2, [pc, #32]	; (800ffd0 <vTaskSwitchContext+0xb8>)
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ffb2:	4b09      	ldr	r3, [pc, #36]	; (800ffd8 <vTaskSwitchContext+0xc0>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	3354      	adds	r3, #84	; 0x54
 800ffb8:	4a08      	ldr	r2, [pc, #32]	; (800ffdc <vTaskSwitchContext+0xc4>)
 800ffba:	6013      	str	r3, [r2, #0]
}
 800ffbc:	bf00      	nop
 800ffbe:	3714      	adds	r7, #20
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr
 800ffc8:	2000817c 	.word	0x2000817c
 800ffcc:	20008168 	.word	0x20008168
 800ffd0:	2000815c 	.word	0x2000815c
 800ffd4:	20007c84 	.word	0x20007c84
 800ffd8:	20007c80 	.word	0x20007c80
 800ffdc:	200000b8 	.word	0x200000b8

0800ffe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d10a      	bne.n	8010006 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff4:	f383 8811 	msr	BASEPRI, r3
 800fff8:	f3bf 8f6f 	isb	sy
 800fffc:	f3bf 8f4f 	dsb	sy
 8010000:	60fb      	str	r3, [r7, #12]
}
 8010002:	bf00      	nop
 8010004:	e7fe      	b.n	8010004 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010006:	4b07      	ldr	r3, [pc, #28]	; (8010024 <vTaskPlaceOnEventList+0x44>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	3318      	adds	r3, #24
 801000c:	4619      	mov	r1, r3
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f7fe fcef 	bl	800e9f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010014:	2101      	movs	r1, #1
 8010016:	6838      	ldr	r0, [r7, #0]
 8010018:	f000 fa80 	bl	801051c <prvAddCurrentTaskToDelayedList>
}
 801001c:	bf00      	nop
 801001e:	3710      	adds	r7, #16
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	20007c80 	.word	0x20007c80

08010028 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010028:	b580      	push	{r7, lr}
 801002a:	b086      	sub	sp, #24
 801002c:	af00      	add	r7, sp, #0
 801002e:	60f8      	str	r0, [r7, #12]
 8010030:	60b9      	str	r1, [r7, #8]
 8010032:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d10a      	bne.n	8010050 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801003a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003e:	f383 8811 	msr	BASEPRI, r3
 8010042:	f3bf 8f6f 	isb	sy
 8010046:	f3bf 8f4f 	dsb	sy
 801004a:	617b      	str	r3, [r7, #20]
}
 801004c:	bf00      	nop
 801004e:	e7fe      	b.n	801004e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010050:	4b0a      	ldr	r3, [pc, #40]	; (801007c <vTaskPlaceOnEventListRestricted+0x54>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	3318      	adds	r3, #24
 8010056:	4619      	mov	r1, r3
 8010058:	68f8      	ldr	r0, [r7, #12]
 801005a:	f7fe fca6 	bl	800e9aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d002      	beq.n	801006a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010068:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801006a:	6879      	ldr	r1, [r7, #4]
 801006c:	68b8      	ldr	r0, [r7, #8]
 801006e:	f000 fa55 	bl	801051c <prvAddCurrentTaskToDelayedList>
	}
 8010072:	bf00      	nop
 8010074:	3718      	adds	r7, #24
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	20007c80 	.word	0x20007c80

08010080 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b086      	sub	sp, #24
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d10a      	bne.n	80100ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009a:	f383 8811 	msr	BASEPRI, r3
 801009e:	f3bf 8f6f 	isb	sy
 80100a2:	f3bf 8f4f 	dsb	sy
 80100a6:	60fb      	str	r3, [r7, #12]
}
 80100a8:	bf00      	nop
 80100aa:	e7fe      	b.n	80100aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	3318      	adds	r3, #24
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fe fcd7 	bl	800ea64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100b6:	4b1e      	ldr	r3, [pc, #120]	; (8010130 <xTaskRemoveFromEventList+0xb0>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d11d      	bne.n	80100fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	3304      	adds	r3, #4
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7fe fcce 	bl	800ea64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100cc:	4b19      	ldr	r3, [pc, #100]	; (8010134 <xTaskRemoveFromEventList+0xb4>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d903      	bls.n	80100dc <xTaskRemoveFromEventList+0x5c>
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100d8:	4a16      	ldr	r2, [pc, #88]	; (8010134 <xTaskRemoveFromEventList+0xb4>)
 80100da:	6013      	str	r3, [r2, #0]
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e0:	4613      	mov	r3, r2
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	4413      	add	r3, r2
 80100e6:	009b      	lsls	r3, r3, #2
 80100e8:	4a13      	ldr	r2, [pc, #76]	; (8010138 <xTaskRemoveFromEventList+0xb8>)
 80100ea:	441a      	add	r2, r3
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	3304      	adds	r3, #4
 80100f0:	4619      	mov	r1, r3
 80100f2:	4610      	mov	r0, r2
 80100f4:	f7fe fc59 	bl	800e9aa <vListInsertEnd>
 80100f8:	e005      	b.n	8010106 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	3318      	adds	r3, #24
 80100fe:	4619      	mov	r1, r3
 8010100:	480e      	ldr	r0, [pc, #56]	; (801013c <xTaskRemoveFromEventList+0xbc>)
 8010102:	f7fe fc52 	bl	800e9aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801010a:	4b0d      	ldr	r3, [pc, #52]	; (8010140 <xTaskRemoveFromEventList+0xc0>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010110:	429a      	cmp	r2, r3
 8010112:	d905      	bls.n	8010120 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010114:	2301      	movs	r3, #1
 8010116:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010118:	4b0a      	ldr	r3, [pc, #40]	; (8010144 <xTaskRemoveFromEventList+0xc4>)
 801011a:	2201      	movs	r2, #1
 801011c:	601a      	str	r2, [r3, #0]
 801011e:	e001      	b.n	8010124 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010120:	2300      	movs	r3, #0
 8010122:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010124:	697b      	ldr	r3, [r7, #20]
}
 8010126:	4618      	mov	r0, r3
 8010128:	3718      	adds	r7, #24
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	2000817c 	.word	0x2000817c
 8010134:	2000815c 	.word	0x2000815c
 8010138:	20007c84 	.word	0x20007c84
 801013c:	20008114 	.word	0x20008114
 8010140:	20007c80 	.word	0x20007c80
 8010144:	20008168 	.word	0x20008168

08010148 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010150:	4b06      	ldr	r3, [pc, #24]	; (801016c <vTaskInternalSetTimeOutState+0x24>)
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010158:	4b05      	ldr	r3, [pc, #20]	; (8010170 <vTaskInternalSetTimeOutState+0x28>)
 801015a:	681a      	ldr	r2, [r3, #0]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	605a      	str	r2, [r3, #4]
}
 8010160:	bf00      	nop
 8010162:	370c      	adds	r7, #12
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	2000816c 	.word	0x2000816c
 8010170:	20008158 	.word	0x20008158

08010174 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b088      	sub	sp, #32
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d10a      	bne.n	801019a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010188:	f383 8811 	msr	BASEPRI, r3
 801018c:	f3bf 8f6f 	isb	sy
 8010190:	f3bf 8f4f 	dsb	sy
 8010194:	613b      	str	r3, [r7, #16]
}
 8010196:	bf00      	nop
 8010198:	e7fe      	b.n	8010198 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d10a      	bne.n	80101b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80101a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a4:	f383 8811 	msr	BASEPRI, r3
 80101a8:	f3bf 8f6f 	isb	sy
 80101ac:	f3bf 8f4f 	dsb	sy
 80101b0:	60fb      	str	r3, [r7, #12]
}
 80101b2:	bf00      	nop
 80101b4:	e7fe      	b.n	80101b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80101b6:	f000 fe7d 	bl	8010eb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80101ba:	4b1d      	ldr	r3, [pc, #116]	; (8010230 <xTaskCheckForTimeOut+0xbc>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	69ba      	ldr	r2, [r7, #24]
 80101c6:	1ad3      	subs	r3, r2, r3
 80101c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101d2:	d102      	bne.n	80101da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80101d4:	2300      	movs	r3, #0
 80101d6:	61fb      	str	r3, [r7, #28]
 80101d8:	e023      	b.n	8010222 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	4b15      	ldr	r3, [pc, #84]	; (8010234 <xTaskCheckForTimeOut+0xc0>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d007      	beq.n	80101f6 <xTaskCheckForTimeOut+0x82>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	69ba      	ldr	r2, [r7, #24]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d302      	bcc.n	80101f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80101f0:	2301      	movs	r3, #1
 80101f2:	61fb      	str	r3, [r7, #28]
 80101f4:	e015      	b.n	8010222 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	697a      	ldr	r2, [r7, #20]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d20b      	bcs.n	8010218 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	1ad2      	subs	r2, r2, r3
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f7ff ff9b 	bl	8010148 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010212:	2300      	movs	r3, #0
 8010214:	61fb      	str	r3, [r7, #28]
 8010216:	e004      	b.n	8010222 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	2200      	movs	r2, #0
 801021c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801021e:	2301      	movs	r3, #1
 8010220:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010222:	f000 fe77 	bl	8010f14 <vPortExitCritical>

	return xReturn;
 8010226:	69fb      	ldr	r3, [r7, #28]
}
 8010228:	4618      	mov	r0, r3
 801022a:	3720      	adds	r7, #32
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}
 8010230:	20008158 	.word	0x20008158
 8010234:	2000816c 	.word	0x2000816c

08010238 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010238:	b480      	push	{r7}
 801023a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801023c:	4b03      	ldr	r3, [pc, #12]	; (801024c <vTaskMissedYield+0x14>)
 801023e:	2201      	movs	r2, #1
 8010240:	601a      	str	r2, [r3, #0]
}
 8010242:	bf00      	nop
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr
 801024c:	20008168 	.word	0x20008168

08010250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010258:	f000 f852 	bl	8010300 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801025c:	4b06      	ldr	r3, [pc, #24]	; (8010278 <prvIdleTask+0x28>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b01      	cmp	r3, #1
 8010262:	d9f9      	bls.n	8010258 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010264:	4b05      	ldr	r3, [pc, #20]	; (801027c <prvIdleTask+0x2c>)
 8010266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801026a:	601a      	str	r2, [r3, #0]
 801026c:	f3bf 8f4f 	dsb	sy
 8010270:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010274:	e7f0      	b.n	8010258 <prvIdleTask+0x8>
 8010276:	bf00      	nop
 8010278:	20007c84 	.word	0x20007c84
 801027c:	e000ed04 	.word	0xe000ed04

08010280 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b082      	sub	sp, #8
 8010284:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010286:	2300      	movs	r3, #0
 8010288:	607b      	str	r3, [r7, #4]
 801028a:	e00c      	b.n	80102a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	4613      	mov	r3, r2
 8010290:	009b      	lsls	r3, r3, #2
 8010292:	4413      	add	r3, r2
 8010294:	009b      	lsls	r3, r3, #2
 8010296:	4a12      	ldr	r2, [pc, #72]	; (80102e0 <prvInitialiseTaskLists+0x60>)
 8010298:	4413      	add	r3, r2
 801029a:	4618      	mov	r0, r3
 801029c:	f7fe fb58 	bl	800e950 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	3301      	adds	r3, #1
 80102a4:	607b      	str	r3, [r7, #4]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2b37      	cmp	r3, #55	; 0x37
 80102aa:	d9ef      	bls.n	801028c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80102ac:	480d      	ldr	r0, [pc, #52]	; (80102e4 <prvInitialiseTaskLists+0x64>)
 80102ae:	f7fe fb4f 	bl	800e950 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80102b2:	480d      	ldr	r0, [pc, #52]	; (80102e8 <prvInitialiseTaskLists+0x68>)
 80102b4:	f7fe fb4c 	bl	800e950 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80102b8:	480c      	ldr	r0, [pc, #48]	; (80102ec <prvInitialiseTaskLists+0x6c>)
 80102ba:	f7fe fb49 	bl	800e950 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80102be:	480c      	ldr	r0, [pc, #48]	; (80102f0 <prvInitialiseTaskLists+0x70>)
 80102c0:	f7fe fb46 	bl	800e950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80102c4:	480b      	ldr	r0, [pc, #44]	; (80102f4 <prvInitialiseTaskLists+0x74>)
 80102c6:	f7fe fb43 	bl	800e950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80102ca:	4b0b      	ldr	r3, [pc, #44]	; (80102f8 <prvInitialiseTaskLists+0x78>)
 80102cc:	4a05      	ldr	r2, [pc, #20]	; (80102e4 <prvInitialiseTaskLists+0x64>)
 80102ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80102d0:	4b0a      	ldr	r3, [pc, #40]	; (80102fc <prvInitialiseTaskLists+0x7c>)
 80102d2:	4a05      	ldr	r2, [pc, #20]	; (80102e8 <prvInitialiseTaskLists+0x68>)
 80102d4:	601a      	str	r2, [r3, #0]
}
 80102d6:	bf00      	nop
 80102d8:	3708      	adds	r7, #8
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	bf00      	nop
 80102e0:	20007c84 	.word	0x20007c84
 80102e4:	200080e4 	.word	0x200080e4
 80102e8:	200080f8 	.word	0x200080f8
 80102ec:	20008114 	.word	0x20008114
 80102f0:	20008128 	.word	0x20008128
 80102f4:	20008140 	.word	0x20008140
 80102f8:	2000810c 	.word	0x2000810c
 80102fc:	20008110 	.word	0x20008110

08010300 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b082      	sub	sp, #8
 8010304:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010306:	e019      	b.n	801033c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010308:	f000 fdd4 	bl	8010eb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801030c:	4b10      	ldr	r3, [pc, #64]	; (8010350 <prvCheckTasksWaitingTermination+0x50>)
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	3304      	adds	r3, #4
 8010318:	4618      	mov	r0, r3
 801031a:	f7fe fba3 	bl	800ea64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801031e:	4b0d      	ldr	r3, [pc, #52]	; (8010354 <prvCheckTasksWaitingTermination+0x54>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	3b01      	subs	r3, #1
 8010324:	4a0b      	ldr	r2, [pc, #44]	; (8010354 <prvCheckTasksWaitingTermination+0x54>)
 8010326:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010328:	4b0b      	ldr	r3, [pc, #44]	; (8010358 <prvCheckTasksWaitingTermination+0x58>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	3b01      	subs	r3, #1
 801032e:	4a0a      	ldr	r2, [pc, #40]	; (8010358 <prvCheckTasksWaitingTermination+0x58>)
 8010330:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010332:	f000 fdef 	bl	8010f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 f810 	bl	801035c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801033c:	4b06      	ldr	r3, [pc, #24]	; (8010358 <prvCheckTasksWaitingTermination+0x58>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d1e1      	bne.n	8010308 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010344:	bf00      	nop
 8010346:	bf00      	nop
 8010348:	3708      	adds	r7, #8
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	20008128 	.word	0x20008128
 8010354:	20008154 	.word	0x20008154
 8010358:	2000813c 	.word	0x2000813c

0801035c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	3354      	adds	r3, #84	; 0x54
 8010368:	4618      	mov	r0, r3
 801036a:	f001 ff19 	bl	80121a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010374:	2b00      	cmp	r3, #0
 8010376:	d108      	bne.n	801038a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801037c:	4618      	mov	r0, r3
 801037e:	f000 ff5f 	bl	8011240 <vPortFree>
				vPortFree( pxTCB );
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f000 ff5c 	bl	8011240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010388:	e018      	b.n	80103bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010390:	2b01      	cmp	r3, #1
 8010392:	d103      	bne.n	801039c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f000 ff53 	bl	8011240 <vPortFree>
	}
 801039a:	e00f      	b.n	80103bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80103a2:	2b02      	cmp	r3, #2
 80103a4:	d00a      	beq.n	80103bc <prvDeleteTCB+0x60>
	__asm volatile
 80103a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103aa:	f383 8811 	msr	BASEPRI, r3
 80103ae:	f3bf 8f6f 	isb	sy
 80103b2:	f3bf 8f4f 	dsb	sy
 80103b6:	60fb      	str	r3, [r7, #12]
}
 80103b8:	bf00      	nop
 80103ba:	e7fe      	b.n	80103ba <prvDeleteTCB+0x5e>
	}
 80103bc:	bf00      	nop
 80103be:	3710      	adds	r7, #16
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103ca:	4b0c      	ldr	r3, [pc, #48]	; (80103fc <prvResetNextTaskUnblockTime+0x38>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d104      	bne.n	80103de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80103d4:	4b0a      	ldr	r3, [pc, #40]	; (8010400 <prvResetNextTaskUnblockTime+0x3c>)
 80103d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80103dc:	e008      	b.n	80103f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103de:	4b07      	ldr	r3, [pc, #28]	; (80103fc <prvResetNextTaskUnblockTime+0x38>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	68db      	ldr	r3, [r3, #12]
 80103e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	685b      	ldr	r3, [r3, #4]
 80103ec:	4a04      	ldr	r2, [pc, #16]	; (8010400 <prvResetNextTaskUnblockTime+0x3c>)
 80103ee:	6013      	str	r3, [r2, #0]
}
 80103f0:	bf00      	nop
 80103f2:	370c      	adds	r7, #12
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr
 80103fc:	2000810c 	.word	0x2000810c
 8010400:	20008174 	.word	0x20008174

08010404 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801040a:	4b0b      	ldr	r3, [pc, #44]	; (8010438 <xTaskGetSchedulerState+0x34>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d102      	bne.n	8010418 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010412:	2301      	movs	r3, #1
 8010414:	607b      	str	r3, [r7, #4]
 8010416:	e008      	b.n	801042a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010418:	4b08      	ldr	r3, [pc, #32]	; (801043c <xTaskGetSchedulerState+0x38>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d102      	bne.n	8010426 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010420:	2302      	movs	r3, #2
 8010422:	607b      	str	r3, [r7, #4]
 8010424:	e001      	b.n	801042a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010426:	2300      	movs	r3, #0
 8010428:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801042a:	687b      	ldr	r3, [r7, #4]
	}
 801042c:	4618      	mov	r0, r3
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr
 8010438:	20008160 	.word	0x20008160
 801043c:	2000817c 	.word	0x2000817c

08010440 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010440:	b580      	push	{r7, lr}
 8010442:	b086      	sub	sp, #24
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801044c:	2300      	movs	r3, #0
 801044e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d056      	beq.n	8010504 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010456:	4b2e      	ldr	r3, [pc, #184]	; (8010510 <xTaskPriorityDisinherit+0xd0>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	693a      	ldr	r2, [r7, #16]
 801045c:	429a      	cmp	r2, r3
 801045e:	d00a      	beq.n	8010476 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010464:	f383 8811 	msr	BASEPRI, r3
 8010468:	f3bf 8f6f 	isb	sy
 801046c:	f3bf 8f4f 	dsb	sy
 8010470:	60fb      	str	r3, [r7, #12]
}
 8010472:	bf00      	nop
 8010474:	e7fe      	b.n	8010474 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801047a:	2b00      	cmp	r3, #0
 801047c:	d10a      	bne.n	8010494 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801047e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010482:	f383 8811 	msr	BASEPRI, r3
 8010486:	f3bf 8f6f 	isb	sy
 801048a:	f3bf 8f4f 	dsb	sy
 801048e:	60bb      	str	r3, [r7, #8]
}
 8010490:	bf00      	nop
 8010492:	e7fe      	b.n	8010492 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010498:	1e5a      	subs	r2, r3, #1
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d02c      	beq.n	8010504 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d128      	bne.n	8010504 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	3304      	adds	r3, #4
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7fe fad4 	bl	800ea64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104d4:	4b0f      	ldr	r3, [pc, #60]	; (8010514 <xTaskPriorityDisinherit+0xd4>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d903      	bls.n	80104e4 <xTaskPriorityDisinherit+0xa4>
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e0:	4a0c      	ldr	r2, [pc, #48]	; (8010514 <xTaskPriorityDisinherit+0xd4>)
 80104e2:	6013      	str	r3, [r2, #0]
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104e8:	4613      	mov	r3, r2
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	4413      	add	r3, r2
 80104ee:	009b      	lsls	r3, r3, #2
 80104f0:	4a09      	ldr	r2, [pc, #36]	; (8010518 <xTaskPriorityDisinherit+0xd8>)
 80104f2:	441a      	add	r2, r3
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	3304      	adds	r3, #4
 80104f8:	4619      	mov	r1, r3
 80104fa:	4610      	mov	r0, r2
 80104fc:	f7fe fa55 	bl	800e9aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010500:	2301      	movs	r3, #1
 8010502:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010504:	697b      	ldr	r3, [r7, #20]
	}
 8010506:	4618      	mov	r0, r3
 8010508:	3718      	adds	r7, #24
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	20007c80 	.word	0x20007c80
 8010514:	2000815c 	.word	0x2000815c
 8010518:	20007c84 	.word	0x20007c84

0801051c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010526:	4b21      	ldr	r3, [pc, #132]	; (80105ac <prvAddCurrentTaskToDelayedList+0x90>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801052c:	4b20      	ldr	r3, [pc, #128]	; (80105b0 <prvAddCurrentTaskToDelayedList+0x94>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	3304      	adds	r3, #4
 8010532:	4618      	mov	r0, r3
 8010534:	f7fe fa96 	bl	800ea64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801053e:	d10a      	bne.n	8010556 <prvAddCurrentTaskToDelayedList+0x3a>
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d007      	beq.n	8010556 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010546:	4b1a      	ldr	r3, [pc, #104]	; (80105b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	3304      	adds	r3, #4
 801054c:	4619      	mov	r1, r3
 801054e:	4819      	ldr	r0, [pc, #100]	; (80105b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8010550:	f7fe fa2b 	bl	800e9aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010554:	e026      	b.n	80105a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010556:	68fa      	ldr	r2, [r7, #12]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	4413      	add	r3, r2
 801055c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801055e:	4b14      	ldr	r3, [pc, #80]	; (80105b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	68ba      	ldr	r2, [r7, #8]
 8010564:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010566:	68ba      	ldr	r2, [r7, #8]
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	429a      	cmp	r2, r3
 801056c:	d209      	bcs.n	8010582 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801056e:	4b12      	ldr	r3, [pc, #72]	; (80105b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010570:	681a      	ldr	r2, [r3, #0]
 8010572:	4b0f      	ldr	r3, [pc, #60]	; (80105b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	3304      	adds	r3, #4
 8010578:	4619      	mov	r1, r3
 801057a:	4610      	mov	r0, r2
 801057c:	f7fe fa39 	bl	800e9f2 <vListInsert>
}
 8010580:	e010      	b.n	80105a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010582:	4b0e      	ldr	r3, [pc, #56]	; (80105bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	4b0a      	ldr	r3, [pc, #40]	; (80105b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	3304      	adds	r3, #4
 801058c:	4619      	mov	r1, r3
 801058e:	4610      	mov	r0, r2
 8010590:	f7fe fa2f 	bl	800e9f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010594:	4b0a      	ldr	r3, [pc, #40]	; (80105c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	68ba      	ldr	r2, [r7, #8]
 801059a:	429a      	cmp	r2, r3
 801059c:	d202      	bcs.n	80105a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801059e:	4a08      	ldr	r2, [pc, #32]	; (80105c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	6013      	str	r3, [r2, #0]
}
 80105a4:	bf00      	nop
 80105a6:	3710      	adds	r7, #16
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}
 80105ac:	20008158 	.word	0x20008158
 80105b0:	20007c80 	.word	0x20007c80
 80105b4:	20008140 	.word	0x20008140
 80105b8:	20008110 	.word	0x20008110
 80105bc:	2000810c 	.word	0x2000810c
 80105c0:	20008174 	.word	0x20008174

080105c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b08a      	sub	sp, #40	; 0x28
 80105c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80105ca:	2300      	movs	r3, #0
 80105cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80105ce:	f000 fb07 	bl	8010be0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80105d2:	4b1c      	ldr	r3, [pc, #112]	; (8010644 <xTimerCreateTimerTask+0x80>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d021      	beq.n	801061e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80105da:	2300      	movs	r3, #0
 80105dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80105de:	2300      	movs	r3, #0
 80105e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80105e2:	1d3a      	adds	r2, r7, #4
 80105e4:	f107 0108 	add.w	r1, r7, #8
 80105e8:	f107 030c 	add.w	r3, r7, #12
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fe f995 	bl	800e91c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80105f2:	6879      	ldr	r1, [r7, #4]
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	68fa      	ldr	r2, [r7, #12]
 80105f8:	9202      	str	r2, [sp, #8]
 80105fa:	9301      	str	r3, [sp, #4]
 80105fc:	2302      	movs	r3, #2
 80105fe:	9300      	str	r3, [sp, #0]
 8010600:	2300      	movs	r3, #0
 8010602:	460a      	mov	r2, r1
 8010604:	4910      	ldr	r1, [pc, #64]	; (8010648 <xTimerCreateTimerTask+0x84>)
 8010606:	4811      	ldr	r0, [pc, #68]	; (801064c <xTimerCreateTimerTask+0x88>)
 8010608:	f7ff f8b4 	bl	800f774 <xTaskCreateStatic>
 801060c:	4603      	mov	r3, r0
 801060e:	4a10      	ldr	r2, [pc, #64]	; (8010650 <xTimerCreateTimerTask+0x8c>)
 8010610:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010612:	4b0f      	ldr	r3, [pc, #60]	; (8010650 <xTimerCreateTimerTask+0x8c>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d001      	beq.n	801061e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801061a:	2301      	movs	r3, #1
 801061c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d10a      	bne.n	801063a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010628:	f383 8811 	msr	BASEPRI, r3
 801062c:	f3bf 8f6f 	isb	sy
 8010630:	f3bf 8f4f 	dsb	sy
 8010634:	613b      	str	r3, [r7, #16]
}
 8010636:	bf00      	nop
 8010638:	e7fe      	b.n	8010638 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801063a:	697b      	ldr	r3, [r7, #20]
}
 801063c:	4618      	mov	r0, r3
 801063e:	3718      	adds	r7, #24
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}
 8010644:	200081b0 	.word	0x200081b0
 8010648:	08014780 	.word	0x08014780
 801064c:	08010789 	.word	0x08010789
 8010650:	200081b4 	.word	0x200081b4

08010654 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b08a      	sub	sp, #40	; 0x28
 8010658:	af00      	add	r7, sp, #0
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	607a      	str	r2, [r7, #4]
 8010660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010662:	2300      	movs	r3, #0
 8010664:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d10a      	bne.n	8010682 <xTimerGenericCommand+0x2e>
	__asm volatile
 801066c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010670:	f383 8811 	msr	BASEPRI, r3
 8010674:	f3bf 8f6f 	isb	sy
 8010678:	f3bf 8f4f 	dsb	sy
 801067c:	623b      	str	r3, [r7, #32]
}
 801067e:	bf00      	nop
 8010680:	e7fe      	b.n	8010680 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010682:	4b1a      	ldr	r3, [pc, #104]	; (80106ec <xTimerGenericCommand+0x98>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d02a      	beq.n	80106e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	2b05      	cmp	r3, #5
 801069a:	dc18      	bgt.n	80106ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801069c:	f7ff feb2 	bl	8010404 <xTaskGetSchedulerState>
 80106a0:	4603      	mov	r3, r0
 80106a2:	2b02      	cmp	r3, #2
 80106a4:	d109      	bne.n	80106ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80106a6:	4b11      	ldr	r3, [pc, #68]	; (80106ec <xTimerGenericCommand+0x98>)
 80106a8:	6818      	ldr	r0, [r3, #0]
 80106aa:	f107 0110 	add.w	r1, r7, #16
 80106ae:	2300      	movs	r3, #0
 80106b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106b2:	f7fe fba9 	bl	800ee08 <xQueueGenericSend>
 80106b6:	6278      	str	r0, [r7, #36]	; 0x24
 80106b8:	e012      	b.n	80106e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80106ba:	4b0c      	ldr	r3, [pc, #48]	; (80106ec <xTimerGenericCommand+0x98>)
 80106bc:	6818      	ldr	r0, [r3, #0]
 80106be:	f107 0110 	add.w	r1, r7, #16
 80106c2:	2300      	movs	r3, #0
 80106c4:	2200      	movs	r2, #0
 80106c6:	f7fe fb9f 	bl	800ee08 <xQueueGenericSend>
 80106ca:	6278      	str	r0, [r7, #36]	; 0x24
 80106cc:	e008      	b.n	80106e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80106ce:	4b07      	ldr	r3, [pc, #28]	; (80106ec <xTimerGenericCommand+0x98>)
 80106d0:	6818      	ldr	r0, [r3, #0]
 80106d2:	f107 0110 	add.w	r1, r7, #16
 80106d6:	2300      	movs	r3, #0
 80106d8:	683a      	ldr	r2, [r7, #0]
 80106da:	f7fe fc93 	bl	800f004 <xQueueGenericSendFromISR>
 80106de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80106e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3728      	adds	r7, #40	; 0x28
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	200081b0 	.word	0x200081b0

080106f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b088      	sub	sp, #32
 80106f4:	af02      	add	r7, sp, #8
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106fa:	4b22      	ldr	r3, [pc, #136]	; (8010784 <prvProcessExpiredTimer+0x94>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	68db      	ldr	r3, [r3, #12]
 8010700:	68db      	ldr	r3, [r3, #12]
 8010702:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	3304      	adds	r3, #4
 8010708:	4618      	mov	r0, r3
 801070a:	f7fe f9ab 	bl	800ea64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010714:	f003 0304 	and.w	r3, r3, #4
 8010718:	2b00      	cmp	r3, #0
 801071a:	d022      	beq.n	8010762 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	699a      	ldr	r2, [r3, #24]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	18d1      	adds	r1, r2, r3
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	683a      	ldr	r2, [r7, #0]
 8010728:	6978      	ldr	r0, [r7, #20]
 801072a:	f000 f8d1 	bl	80108d0 <prvInsertTimerInActiveList>
 801072e:	4603      	mov	r3, r0
 8010730:	2b00      	cmp	r3, #0
 8010732:	d01f      	beq.n	8010774 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010734:	2300      	movs	r3, #0
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	2300      	movs	r3, #0
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	2100      	movs	r1, #0
 801073e:	6978      	ldr	r0, [r7, #20]
 8010740:	f7ff ff88 	bl	8010654 <xTimerGenericCommand>
 8010744:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d113      	bne.n	8010774 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801074c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010750:	f383 8811 	msr	BASEPRI, r3
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	60fb      	str	r3, [r7, #12]
}
 801075e:	bf00      	nop
 8010760:	e7fe      	b.n	8010760 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010768:	f023 0301 	bic.w	r3, r3, #1
 801076c:	b2da      	uxtb	r2, r3
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	6a1b      	ldr	r3, [r3, #32]
 8010778:	6978      	ldr	r0, [r7, #20]
 801077a:	4798      	blx	r3
}
 801077c:	bf00      	nop
 801077e:	3718      	adds	r7, #24
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}
 8010784:	200081a8 	.word	0x200081a8

08010788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010790:	f107 0308 	add.w	r3, r7, #8
 8010794:	4618      	mov	r0, r3
 8010796:	f000 f857 	bl	8010848 <prvGetNextExpireTime>
 801079a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	4619      	mov	r1, r3
 80107a0:	68f8      	ldr	r0, [r7, #12]
 80107a2:	f000 f803 	bl	80107ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80107a6:	f000 f8d5 	bl	8010954 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80107aa:	e7f1      	b.n	8010790 <prvTimerTask+0x8>

080107ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b084      	sub	sp, #16
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80107b6:	f7ff fa39 	bl	800fc2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80107ba:	f107 0308 	add.w	r3, r7, #8
 80107be:	4618      	mov	r0, r3
 80107c0:	f000 f866 	bl	8010890 <prvSampleTimeNow>
 80107c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d130      	bne.n	801082e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d10a      	bne.n	80107e8 <prvProcessTimerOrBlockTask+0x3c>
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d806      	bhi.n	80107e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80107da:	f7ff fa35 	bl	800fc48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80107de:	68f9      	ldr	r1, [r7, #12]
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7ff ff85 	bl	80106f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80107e6:	e024      	b.n	8010832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d008      	beq.n	8010800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80107ee:	4b13      	ldr	r3, [pc, #76]	; (801083c <prvProcessTimerOrBlockTask+0x90>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d101      	bne.n	80107fc <prvProcessTimerOrBlockTask+0x50>
 80107f8:	2301      	movs	r3, #1
 80107fa:	e000      	b.n	80107fe <prvProcessTimerOrBlockTask+0x52>
 80107fc:	2300      	movs	r3, #0
 80107fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010800:	4b0f      	ldr	r3, [pc, #60]	; (8010840 <prvProcessTimerOrBlockTask+0x94>)
 8010802:	6818      	ldr	r0, [r3, #0]
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	1ad3      	subs	r3, r2, r3
 801080a:	683a      	ldr	r2, [r7, #0]
 801080c:	4619      	mov	r1, r3
 801080e:	f7fe ff7d 	bl	800f70c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010812:	f7ff fa19 	bl	800fc48 <xTaskResumeAll>
 8010816:	4603      	mov	r3, r0
 8010818:	2b00      	cmp	r3, #0
 801081a:	d10a      	bne.n	8010832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801081c:	4b09      	ldr	r3, [pc, #36]	; (8010844 <prvProcessTimerOrBlockTask+0x98>)
 801081e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010822:	601a      	str	r2, [r3, #0]
 8010824:	f3bf 8f4f 	dsb	sy
 8010828:	f3bf 8f6f 	isb	sy
}
 801082c:	e001      	b.n	8010832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801082e:	f7ff fa0b 	bl	800fc48 <xTaskResumeAll>
}
 8010832:	bf00      	nop
 8010834:	3710      	adds	r7, #16
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}
 801083a:	bf00      	nop
 801083c:	200081ac 	.word	0x200081ac
 8010840:	200081b0 	.word	0x200081b0
 8010844:	e000ed04 	.word	0xe000ed04

08010848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010848:	b480      	push	{r7}
 801084a:	b085      	sub	sp, #20
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010850:	4b0e      	ldr	r3, [pc, #56]	; (801088c <prvGetNextExpireTime+0x44>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d101      	bne.n	801085e <prvGetNextExpireTime+0x16>
 801085a:	2201      	movs	r2, #1
 801085c:	e000      	b.n	8010860 <prvGetNextExpireTime+0x18>
 801085e:	2200      	movs	r2, #0
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d105      	bne.n	8010878 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801086c:	4b07      	ldr	r3, [pc, #28]	; (801088c <prvGetNextExpireTime+0x44>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	60fb      	str	r3, [r7, #12]
 8010876:	e001      	b.n	801087c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010878:	2300      	movs	r3, #0
 801087a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801087c:	68fb      	ldr	r3, [r7, #12]
}
 801087e:	4618      	mov	r0, r3
 8010880:	3714      	adds	r7, #20
 8010882:	46bd      	mov	sp, r7
 8010884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	200081a8 	.word	0x200081a8

08010890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010898:	f7ff fa74 	bl	800fd84 <xTaskGetTickCount>
 801089c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801089e:	4b0b      	ldr	r3, [pc, #44]	; (80108cc <prvSampleTimeNow+0x3c>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	68fa      	ldr	r2, [r7, #12]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d205      	bcs.n	80108b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80108a8:	f000 f936 	bl	8010b18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2201      	movs	r2, #1
 80108b0:	601a      	str	r2, [r3, #0]
 80108b2:	e002      	b.n	80108ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2200      	movs	r2, #0
 80108b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80108ba:	4a04      	ldr	r2, [pc, #16]	; (80108cc <prvSampleTimeNow+0x3c>)
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80108c0:	68fb      	ldr	r3, [r7, #12]
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3710      	adds	r7, #16
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	200081b8 	.word	0x200081b8

080108d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b086      	sub	sp, #24
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	60f8      	str	r0, [r7, #12]
 80108d8:	60b9      	str	r1, [r7, #8]
 80108da:	607a      	str	r2, [r7, #4]
 80108dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80108de:	2300      	movs	r3, #0
 80108e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	68ba      	ldr	r2, [r7, #8]
 80108e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	68fa      	ldr	r2, [r7, #12]
 80108ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80108ee:	68ba      	ldr	r2, [r7, #8]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d812      	bhi.n	801091c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108f6:	687a      	ldr	r2, [r7, #4]
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	1ad2      	subs	r2, r2, r3
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	699b      	ldr	r3, [r3, #24]
 8010900:	429a      	cmp	r2, r3
 8010902:	d302      	bcc.n	801090a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010904:	2301      	movs	r3, #1
 8010906:	617b      	str	r3, [r7, #20]
 8010908:	e01b      	b.n	8010942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801090a:	4b10      	ldr	r3, [pc, #64]	; (801094c <prvInsertTimerInActiveList+0x7c>)
 801090c:	681a      	ldr	r2, [r3, #0]
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	3304      	adds	r3, #4
 8010912:	4619      	mov	r1, r3
 8010914:	4610      	mov	r0, r2
 8010916:	f7fe f86c 	bl	800e9f2 <vListInsert>
 801091a:	e012      	b.n	8010942 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	429a      	cmp	r2, r3
 8010922:	d206      	bcs.n	8010932 <prvInsertTimerInActiveList+0x62>
 8010924:	68ba      	ldr	r2, [r7, #8]
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	429a      	cmp	r2, r3
 801092a:	d302      	bcc.n	8010932 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801092c:	2301      	movs	r3, #1
 801092e:	617b      	str	r3, [r7, #20]
 8010930:	e007      	b.n	8010942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010932:	4b07      	ldr	r3, [pc, #28]	; (8010950 <prvInsertTimerInActiveList+0x80>)
 8010934:	681a      	ldr	r2, [r3, #0]
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	3304      	adds	r3, #4
 801093a:	4619      	mov	r1, r3
 801093c:	4610      	mov	r0, r2
 801093e:	f7fe f858 	bl	800e9f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010942:	697b      	ldr	r3, [r7, #20]
}
 8010944:	4618      	mov	r0, r3
 8010946:	3718      	adds	r7, #24
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	200081ac 	.word	0x200081ac
 8010950:	200081a8 	.word	0x200081a8

08010954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b08e      	sub	sp, #56	; 0x38
 8010958:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801095a:	e0ca      	b.n	8010af2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2b00      	cmp	r3, #0
 8010960:	da18      	bge.n	8010994 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010962:	1d3b      	adds	r3, r7, #4
 8010964:	3304      	adds	r3, #4
 8010966:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801096a:	2b00      	cmp	r3, #0
 801096c:	d10a      	bne.n	8010984 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801096e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010972:	f383 8811 	msr	BASEPRI, r3
 8010976:	f3bf 8f6f 	isb	sy
 801097a:	f3bf 8f4f 	dsb	sy
 801097e:	61fb      	str	r3, [r7, #28]
}
 8010980:	bf00      	nop
 8010982:	e7fe      	b.n	8010982 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801098a:	6850      	ldr	r0, [r2, #4]
 801098c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801098e:	6892      	ldr	r2, [r2, #8]
 8010990:	4611      	mov	r1, r2
 8010992:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2b00      	cmp	r3, #0
 8010998:	f2c0 80aa 	blt.w	8010af0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80109a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a2:	695b      	ldr	r3, [r3, #20]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d004      	beq.n	80109b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109aa:	3304      	adds	r3, #4
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fe f859 	bl	800ea64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80109b2:	463b      	mov	r3, r7
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7ff ff6b 	bl	8010890 <prvSampleTimeNow>
 80109ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2b09      	cmp	r3, #9
 80109c0:	f200 8097 	bhi.w	8010af2 <prvProcessReceivedCommands+0x19e>
 80109c4:	a201      	add	r2, pc, #4	; (adr r2, 80109cc <prvProcessReceivedCommands+0x78>)
 80109c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109ca:	bf00      	nop
 80109cc:	080109f5 	.word	0x080109f5
 80109d0:	080109f5 	.word	0x080109f5
 80109d4:	080109f5 	.word	0x080109f5
 80109d8:	08010a69 	.word	0x08010a69
 80109dc:	08010a7d 	.word	0x08010a7d
 80109e0:	08010ac7 	.word	0x08010ac7
 80109e4:	080109f5 	.word	0x080109f5
 80109e8:	080109f5 	.word	0x080109f5
 80109ec:	08010a69 	.word	0x08010a69
 80109f0:	08010a7d 	.word	0x08010a7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80109f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109fa:	f043 0301 	orr.w	r3, r3, #1
 80109fe:	b2da      	uxtb	r2, r3
 8010a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010a06:	68ba      	ldr	r2, [r7, #8]
 8010a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0a:	699b      	ldr	r3, [r3, #24]
 8010a0c:	18d1      	adds	r1, r2, r3
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a14:	f7ff ff5c 	bl	80108d0 <prvInsertTimerInActiveList>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d069      	beq.n	8010af2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a20:	6a1b      	ldr	r3, [r3, #32]
 8010a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a2c:	f003 0304 	and.w	r3, r3, #4
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d05e      	beq.n	8010af2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010a34:	68ba      	ldr	r2, [r7, #8]
 8010a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a38:	699b      	ldr	r3, [r3, #24]
 8010a3a:	441a      	add	r2, r3
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	9300      	str	r3, [sp, #0]
 8010a40:	2300      	movs	r3, #0
 8010a42:	2100      	movs	r1, #0
 8010a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a46:	f7ff fe05 	bl	8010654 <xTimerGenericCommand>
 8010a4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010a4c:	6a3b      	ldr	r3, [r7, #32]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d14f      	bne.n	8010af2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a56:	f383 8811 	msr	BASEPRI, r3
 8010a5a:	f3bf 8f6f 	isb	sy
 8010a5e:	f3bf 8f4f 	dsb	sy
 8010a62:	61bb      	str	r3, [r7, #24]
}
 8010a64:	bf00      	nop
 8010a66:	e7fe      	b.n	8010a66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a6e:	f023 0301 	bic.w	r3, r3, #1
 8010a72:	b2da      	uxtb	r2, r3
 8010a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010a7a:	e03a      	b.n	8010af2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a82:	f043 0301 	orr.w	r3, r3, #1
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010a8e:	68ba      	ldr	r2, [r7, #8]
 8010a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a96:	699b      	ldr	r3, [r3, #24]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d10a      	bne.n	8010ab2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa0:	f383 8811 	msr	BASEPRI, r3
 8010aa4:	f3bf 8f6f 	isb	sy
 8010aa8:	f3bf 8f4f 	dsb	sy
 8010aac:	617b      	str	r3, [r7, #20]
}
 8010aae:	bf00      	nop
 8010ab0:	e7fe      	b.n	8010ab0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab4:	699a      	ldr	r2, [r3, #24]
 8010ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab8:	18d1      	adds	r1, r2, r3
 8010aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ac0:	f7ff ff06 	bl	80108d0 <prvInsertTimerInActiveList>
					break;
 8010ac4:	e015      	b.n	8010af2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010acc:	f003 0302 	and.w	r3, r3, #2
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d103      	bne.n	8010adc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ad6:	f000 fbb3 	bl	8011240 <vPortFree>
 8010ada:	e00a      	b.n	8010af2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ae2:	f023 0301 	bic.w	r3, r3, #1
 8010ae6:	b2da      	uxtb	r2, r3
 8010ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010aee:	e000      	b.n	8010af2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010af0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010af2:	4b08      	ldr	r3, [pc, #32]	; (8010b14 <prvProcessReceivedCommands+0x1c0>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	1d39      	adds	r1, r7, #4
 8010af8:	2200      	movs	r2, #0
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7fe fb1e 	bl	800f13c <xQueueReceive>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	f47f af2a 	bne.w	801095c <prvProcessReceivedCommands+0x8>
	}
}
 8010b08:	bf00      	nop
 8010b0a:	bf00      	nop
 8010b0c:	3730      	adds	r7, #48	; 0x30
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}
 8010b12:	bf00      	nop
 8010b14:	200081b0 	.word	0x200081b0

08010b18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b088      	sub	sp, #32
 8010b1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010b1e:	e048      	b.n	8010bb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010b20:	4b2d      	ldr	r3, [pc, #180]	; (8010bd8 <prvSwitchTimerLists+0xc0>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b2a:	4b2b      	ldr	r3, [pc, #172]	; (8010bd8 <prvSwitchTimerLists+0xc0>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	68db      	ldr	r3, [r3, #12]
 8010b32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	3304      	adds	r3, #4
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7fd ff93 	bl	800ea64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	6a1b      	ldr	r3, [r3, #32]
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b4c:	f003 0304 	and.w	r3, r3, #4
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d02e      	beq.n	8010bb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	699b      	ldr	r3, [r3, #24]
 8010b58:	693a      	ldr	r2, [r7, #16]
 8010b5a:	4413      	add	r3, r2
 8010b5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010b5e:	68ba      	ldr	r2, [r7, #8]
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d90e      	bls.n	8010b84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	68fa      	ldr	r2, [r7, #12]
 8010b70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b72:	4b19      	ldr	r3, [pc, #100]	; (8010bd8 <prvSwitchTimerLists+0xc0>)
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	3304      	adds	r3, #4
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	4610      	mov	r0, r2
 8010b7e:	f7fd ff38 	bl	800e9f2 <vListInsert>
 8010b82:	e016      	b.n	8010bb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010b84:	2300      	movs	r3, #0
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	2300      	movs	r3, #0
 8010b8a:	693a      	ldr	r2, [r7, #16]
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f7ff fd60 	bl	8010654 <xTimerGenericCommand>
 8010b94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d10a      	bne.n	8010bb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba0:	f383 8811 	msr	BASEPRI, r3
 8010ba4:	f3bf 8f6f 	isb	sy
 8010ba8:	f3bf 8f4f 	dsb	sy
 8010bac:	603b      	str	r3, [r7, #0]
}
 8010bae:	bf00      	nop
 8010bb0:	e7fe      	b.n	8010bb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010bb2:	4b09      	ldr	r3, [pc, #36]	; (8010bd8 <prvSwitchTimerLists+0xc0>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d1b1      	bne.n	8010b20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010bbc:	4b06      	ldr	r3, [pc, #24]	; (8010bd8 <prvSwitchTimerLists+0xc0>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010bc2:	4b06      	ldr	r3, [pc, #24]	; (8010bdc <prvSwitchTimerLists+0xc4>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	4a04      	ldr	r2, [pc, #16]	; (8010bd8 <prvSwitchTimerLists+0xc0>)
 8010bc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010bca:	4a04      	ldr	r2, [pc, #16]	; (8010bdc <prvSwitchTimerLists+0xc4>)
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	6013      	str	r3, [r2, #0]
}
 8010bd0:	bf00      	nop
 8010bd2:	3718      	adds	r7, #24
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	200081a8 	.word	0x200081a8
 8010bdc:	200081ac 	.word	0x200081ac

08010be0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010be6:	f000 f965 	bl	8010eb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010bea:	4b15      	ldr	r3, [pc, #84]	; (8010c40 <prvCheckForValidListAndQueue+0x60>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d120      	bne.n	8010c34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010bf2:	4814      	ldr	r0, [pc, #80]	; (8010c44 <prvCheckForValidListAndQueue+0x64>)
 8010bf4:	f7fd feac 	bl	800e950 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010bf8:	4813      	ldr	r0, [pc, #76]	; (8010c48 <prvCheckForValidListAndQueue+0x68>)
 8010bfa:	f7fd fea9 	bl	800e950 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010bfe:	4b13      	ldr	r3, [pc, #76]	; (8010c4c <prvCheckForValidListAndQueue+0x6c>)
 8010c00:	4a10      	ldr	r2, [pc, #64]	; (8010c44 <prvCheckForValidListAndQueue+0x64>)
 8010c02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010c04:	4b12      	ldr	r3, [pc, #72]	; (8010c50 <prvCheckForValidListAndQueue+0x70>)
 8010c06:	4a10      	ldr	r2, [pc, #64]	; (8010c48 <prvCheckForValidListAndQueue+0x68>)
 8010c08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	9300      	str	r3, [sp, #0]
 8010c0e:	4b11      	ldr	r3, [pc, #68]	; (8010c54 <prvCheckForValidListAndQueue+0x74>)
 8010c10:	4a11      	ldr	r2, [pc, #68]	; (8010c58 <prvCheckForValidListAndQueue+0x78>)
 8010c12:	2110      	movs	r1, #16
 8010c14:	200a      	movs	r0, #10
 8010c16:	f7fd ffb7 	bl	800eb88 <xQueueGenericCreateStatic>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	4a08      	ldr	r2, [pc, #32]	; (8010c40 <prvCheckForValidListAndQueue+0x60>)
 8010c1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010c20:	4b07      	ldr	r3, [pc, #28]	; (8010c40 <prvCheckForValidListAndQueue+0x60>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d005      	beq.n	8010c34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010c28:	4b05      	ldr	r3, [pc, #20]	; (8010c40 <prvCheckForValidListAndQueue+0x60>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	490b      	ldr	r1, [pc, #44]	; (8010c5c <prvCheckForValidListAndQueue+0x7c>)
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7fe fd18 	bl	800f664 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010c34:	f000 f96e 	bl	8010f14 <vPortExitCritical>
}
 8010c38:	bf00      	nop
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	200081b0 	.word	0x200081b0
 8010c44:	20008180 	.word	0x20008180
 8010c48:	20008194 	.word	0x20008194
 8010c4c:	200081a8 	.word	0x200081a8
 8010c50:	200081ac 	.word	0x200081ac
 8010c54:	2000825c 	.word	0x2000825c
 8010c58:	200081bc 	.word	0x200081bc
 8010c5c:	08014788 	.word	0x08014788

08010c60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010c60:	b480      	push	{r7}
 8010c62:	b085      	sub	sp, #20
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	60f8      	str	r0, [r7, #12]
 8010c68:	60b9      	str	r1, [r7, #8]
 8010c6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	3b04      	subs	r3, #4
 8010c70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	3b04      	subs	r3, #4
 8010c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	f023 0201 	bic.w	r2, r3, #1
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	3b04      	subs	r3, #4
 8010c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010c90:	4a0c      	ldr	r2, [pc, #48]	; (8010cc4 <pxPortInitialiseStack+0x64>)
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	3b14      	subs	r3, #20
 8010c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	3b04      	subs	r3, #4
 8010ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f06f 0202 	mvn.w	r2, #2
 8010cae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	3b20      	subs	r3, #32
 8010cb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3714      	adds	r7, #20
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr
 8010cc4:	08010cc9 	.word	0x08010cc9

08010cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010cd2:	4b12      	ldr	r3, [pc, #72]	; (8010d1c <prvTaskExitError+0x54>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010cda:	d00a      	beq.n	8010cf2 <prvTaskExitError+0x2a>
	__asm volatile
 8010cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce0:	f383 8811 	msr	BASEPRI, r3
 8010ce4:	f3bf 8f6f 	isb	sy
 8010ce8:	f3bf 8f4f 	dsb	sy
 8010cec:	60fb      	str	r3, [r7, #12]
}
 8010cee:	bf00      	nop
 8010cf0:	e7fe      	b.n	8010cf0 <prvTaskExitError+0x28>
	__asm volatile
 8010cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf6:	f383 8811 	msr	BASEPRI, r3
 8010cfa:	f3bf 8f6f 	isb	sy
 8010cfe:	f3bf 8f4f 	dsb	sy
 8010d02:	60bb      	str	r3, [r7, #8]
}
 8010d04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010d06:	bf00      	nop
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d0fc      	beq.n	8010d08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010d0e:	bf00      	nop
 8010d10:	bf00      	nop
 8010d12:	3714      	adds	r7, #20
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr
 8010d1c:	200000b4 	.word	0x200000b4

08010d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010d20:	4b07      	ldr	r3, [pc, #28]	; (8010d40 <pxCurrentTCBConst2>)
 8010d22:	6819      	ldr	r1, [r3, #0]
 8010d24:	6808      	ldr	r0, [r1, #0]
 8010d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d2a:	f380 8809 	msr	PSP, r0
 8010d2e:	f3bf 8f6f 	isb	sy
 8010d32:	f04f 0000 	mov.w	r0, #0
 8010d36:	f380 8811 	msr	BASEPRI, r0
 8010d3a:	4770      	bx	lr
 8010d3c:	f3af 8000 	nop.w

08010d40 <pxCurrentTCBConst2>:
 8010d40:	20007c80 	.word	0x20007c80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010d44:	bf00      	nop
 8010d46:	bf00      	nop

08010d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010d48:	4808      	ldr	r0, [pc, #32]	; (8010d6c <prvPortStartFirstTask+0x24>)
 8010d4a:	6800      	ldr	r0, [r0, #0]
 8010d4c:	6800      	ldr	r0, [r0, #0]
 8010d4e:	f380 8808 	msr	MSP, r0
 8010d52:	f04f 0000 	mov.w	r0, #0
 8010d56:	f380 8814 	msr	CONTROL, r0
 8010d5a:	b662      	cpsie	i
 8010d5c:	b661      	cpsie	f
 8010d5e:	f3bf 8f4f 	dsb	sy
 8010d62:	f3bf 8f6f 	isb	sy
 8010d66:	df00      	svc	0
 8010d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010d6a:	bf00      	nop
 8010d6c:	e000ed08 	.word	0xe000ed08

08010d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b086      	sub	sp, #24
 8010d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010d76:	4b46      	ldr	r3, [pc, #280]	; (8010e90 <xPortStartScheduler+0x120>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	4a46      	ldr	r2, [pc, #280]	; (8010e94 <xPortStartScheduler+0x124>)
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	d10a      	bne.n	8010d96 <xPortStartScheduler+0x26>
	__asm volatile
 8010d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d84:	f383 8811 	msr	BASEPRI, r3
 8010d88:	f3bf 8f6f 	isb	sy
 8010d8c:	f3bf 8f4f 	dsb	sy
 8010d90:	613b      	str	r3, [r7, #16]
}
 8010d92:	bf00      	nop
 8010d94:	e7fe      	b.n	8010d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010d96:	4b3e      	ldr	r3, [pc, #248]	; (8010e90 <xPortStartScheduler+0x120>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	4a3f      	ldr	r2, [pc, #252]	; (8010e98 <xPortStartScheduler+0x128>)
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	d10a      	bne.n	8010db6 <xPortStartScheduler+0x46>
	__asm volatile
 8010da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da4:	f383 8811 	msr	BASEPRI, r3
 8010da8:	f3bf 8f6f 	isb	sy
 8010dac:	f3bf 8f4f 	dsb	sy
 8010db0:	60fb      	str	r3, [r7, #12]
}
 8010db2:	bf00      	nop
 8010db4:	e7fe      	b.n	8010db4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010db6:	4b39      	ldr	r3, [pc, #228]	; (8010e9c <xPortStartScheduler+0x12c>)
 8010db8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	b2db      	uxtb	r3, r3
 8010dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	22ff      	movs	r2, #255	; 0xff
 8010dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010dd0:	78fb      	ldrb	r3, [r7, #3]
 8010dd2:	b2db      	uxtb	r3, r3
 8010dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010dd8:	b2da      	uxtb	r2, r3
 8010dda:	4b31      	ldr	r3, [pc, #196]	; (8010ea0 <xPortStartScheduler+0x130>)
 8010ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010dde:	4b31      	ldr	r3, [pc, #196]	; (8010ea4 <xPortStartScheduler+0x134>)
 8010de0:	2207      	movs	r2, #7
 8010de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010de4:	e009      	b.n	8010dfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010de6:	4b2f      	ldr	r3, [pc, #188]	; (8010ea4 <xPortStartScheduler+0x134>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	3b01      	subs	r3, #1
 8010dec:	4a2d      	ldr	r2, [pc, #180]	; (8010ea4 <xPortStartScheduler+0x134>)
 8010dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010df0:	78fb      	ldrb	r3, [r7, #3]
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	005b      	lsls	r3, r3, #1
 8010df6:	b2db      	uxtb	r3, r3
 8010df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010dfa:	78fb      	ldrb	r3, [r7, #3]
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e02:	2b80      	cmp	r3, #128	; 0x80
 8010e04:	d0ef      	beq.n	8010de6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010e06:	4b27      	ldr	r3, [pc, #156]	; (8010ea4 <xPortStartScheduler+0x134>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f1c3 0307 	rsb	r3, r3, #7
 8010e0e:	2b04      	cmp	r3, #4
 8010e10:	d00a      	beq.n	8010e28 <xPortStartScheduler+0xb8>
	__asm volatile
 8010e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e16:	f383 8811 	msr	BASEPRI, r3
 8010e1a:	f3bf 8f6f 	isb	sy
 8010e1e:	f3bf 8f4f 	dsb	sy
 8010e22:	60bb      	str	r3, [r7, #8]
}
 8010e24:	bf00      	nop
 8010e26:	e7fe      	b.n	8010e26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010e28:	4b1e      	ldr	r3, [pc, #120]	; (8010ea4 <xPortStartScheduler+0x134>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	021b      	lsls	r3, r3, #8
 8010e2e:	4a1d      	ldr	r2, [pc, #116]	; (8010ea4 <xPortStartScheduler+0x134>)
 8010e30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010e32:	4b1c      	ldr	r3, [pc, #112]	; (8010ea4 <xPortStartScheduler+0x134>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010e3a:	4a1a      	ldr	r2, [pc, #104]	; (8010ea4 <xPortStartScheduler+0x134>)
 8010e3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	b2da      	uxtb	r2, r3
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010e46:	4b18      	ldr	r3, [pc, #96]	; (8010ea8 <xPortStartScheduler+0x138>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	4a17      	ldr	r2, [pc, #92]	; (8010ea8 <xPortStartScheduler+0x138>)
 8010e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010e50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010e52:	4b15      	ldr	r3, [pc, #84]	; (8010ea8 <xPortStartScheduler+0x138>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	4a14      	ldr	r2, [pc, #80]	; (8010ea8 <xPortStartScheduler+0x138>)
 8010e58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010e5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010e5e:	f000 f8dd 	bl	801101c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010e62:	4b12      	ldr	r3, [pc, #72]	; (8010eac <xPortStartScheduler+0x13c>)
 8010e64:	2200      	movs	r2, #0
 8010e66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010e68:	f000 f8fc 	bl	8011064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010e6c:	4b10      	ldr	r3, [pc, #64]	; (8010eb0 <xPortStartScheduler+0x140>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4a0f      	ldr	r2, [pc, #60]	; (8010eb0 <xPortStartScheduler+0x140>)
 8010e72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010e76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010e78:	f7ff ff66 	bl	8010d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010e7c:	f7ff f84c 	bl	800ff18 <vTaskSwitchContext>
	prvTaskExitError();
 8010e80:	f7ff ff22 	bl	8010cc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010e84:	2300      	movs	r3, #0
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3718      	adds	r7, #24
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
 8010e8e:	bf00      	nop
 8010e90:	e000ed00 	.word	0xe000ed00
 8010e94:	410fc271 	.word	0x410fc271
 8010e98:	410fc270 	.word	0x410fc270
 8010e9c:	e000e400 	.word	0xe000e400
 8010ea0:	200082ac 	.word	0x200082ac
 8010ea4:	200082b0 	.word	0x200082b0
 8010ea8:	e000ed20 	.word	0xe000ed20
 8010eac:	200000b4 	.word	0x200000b4
 8010eb0:	e000ef34 	.word	0xe000ef34

08010eb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	af00      	add	r7, sp, #0
	__asm volatile
 8010eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ebe:	f383 8811 	msr	BASEPRI, r3
 8010ec2:	f3bf 8f6f 	isb	sy
 8010ec6:	f3bf 8f4f 	dsb	sy
 8010eca:	607b      	str	r3, [r7, #4]
}
 8010ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010ece:	4b0f      	ldr	r3, [pc, #60]	; (8010f0c <vPortEnterCritical+0x58>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	4a0d      	ldr	r2, [pc, #52]	; (8010f0c <vPortEnterCritical+0x58>)
 8010ed6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010ed8:	4b0c      	ldr	r3, [pc, #48]	; (8010f0c <vPortEnterCritical+0x58>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d10f      	bne.n	8010f00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010ee0:	4b0b      	ldr	r3, [pc, #44]	; (8010f10 <vPortEnterCritical+0x5c>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d00a      	beq.n	8010f00 <vPortEnterCritical+0x4c>
	__asm volatile
 8010eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eee:	f383 8811 	msr	BASEPRI, r3
 8010ef2:	f3bf 8f6f 	isb	sy
 8010ef6:	f3bf 8f4f 	dsb	sy
 8010efa:	603b      	str	r3, [r7, #0]
}
 8010efc:	bf00      	nop
 8010efe:	e7fe      	b.n	8010efe <vPortEnterCritical+0x4a>
	}
}
 8010f00:	bf00      	nop
 8010f02:	370c      	adds	r7, #12
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr
 8010f0c:	200000b4 	.word	0x200000b4
 8010f10:	e000ed04 	.word	0xe000ed04

08010f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010f14:	b480      	push	{r7}
 8010f16:	b083      	sub	sp, #12
 8010f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010f1a:	4b12      	ldr	r3, [pc, #72]	; (8010f64 <vPortExitCritical+0x50>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d10a      	bne.n	8010f38 <vPortExitCritical+0x24>
	__asm volatile
 8010f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f26:	f383 8811 	msr	BASEPRI, r3
 8010f2a:	f3bf 8f6f 	isb	sy
 8010f2e:	f3bf 8f4f 	dsb	sy
 8010f32:	607b      	str	r3, [r7, #4]
}
 8010f34:	bf00      	nop
 8010f36:	e7fe      	b.n	8010f36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010f38:	4b0a      	ldr	r3, [pc, #40]	; (8010f64 <vPortExitCritical+0x50>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	3b01      	subs	r3, #1
 8010f3e:	4a09      	ldr	r2, [pc, #36]	; (8010f64 <vPortExitCritical+0x50>)
 8010f40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010f42:	4b08      	ldr	r3, [pc, #32]	; (8010f64 <vPortExitCritical+0x50>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d105      	bne.n	8010f56 <vPortExitCritical+0x42>
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	f383 8811 	msr	BASEPRI, r3
}
 8010f54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010f56:	bf00      	nop
 8010f58:	370c      	adds	r7, #12
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f60:	4770      	bx	lr
 8010f62:	bf00      	nop
 8010f64:	200000b4 	.word	0x200000b4
	...

08010f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010f70:	f3ef 8009 	mrs	r0, PSP
 8010f74:	f3bf 8f6f 	isb	sy
 8010f78:	4b15      	ldr	r3, [pc, #84]	; (8010fd0 <pxCurrentTCBConst>)
 8010f7a:	681a      	ldr	r2, [r3, #0]
 8010f7c:	f01e 0f10 	tst.w	lr, #16
 8010f80:	bf08      	it	eq
 8010f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f8a:	6010      	str	r0, [r2, #0]
 8010f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010f94:	f380 8811 	msr	BASEPRI, r0
 8010f98:	f3bf 8f4f 	dsb	sy
 8010f9c:	f3bf 8f6f 	isb	sy
 8010fa0:	f7fe ffba 	bl	800ff18 <vTaskSwitchContext>
 8010fa4:	f04f 0000 	mov.w	r0, #0
 8010fa8:	f380 8811 	msr	BASEPRI, r0
 8010fac:	bc09      	pop	{r0, r3}
 8010fae:	6819      	ldr	r1, [r3, #0]
 8010fb0:	6808      	ldr	r0, [r1, #0]
 8010fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb6:	f01e 0f10 	tst.w	lr, #16
 8010fba:	bf08      	it	eq
 8010fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010fc0:	f380 8809 	msr	PSP, r0
 8010fc4:	f3bf 8f6f 	isb	sy
 8010fc8:	4770      	bx	lr
 8010fca:	bf00      	nop
 8010fcc:	f3af 8000 	nop.w

08010fd0 <pxCurrentTCBConst>:
 8010fd0:	20007c80 	.word	0x20007c80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010fd4:	bf00      	nop
 8010fd6:	bf00      	nop

08010fd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8010fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe2:	f383 8811 	msr	BASEPRI, r3
 8010fe6:	f3bf 8f6f 	isb	sy
 8010fea:	f3bf 8f4f 	dsb	sy
 8010fee:	607b      	str	r3, [r7, #4]
}
 8010ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010ff2:	f7fe fed7 	bl	800fda4 <xTaskIncrementTick>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d003      	beq.n	8011004 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010ffc:	4b06      	ldr	r3, [pc, #24]	; (8011018 <xPortSysTickHandler+0x40>)
 8010ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011002:	601a      	str	r2, [r3, #0]
 8011004:	2300      	movs	r3, #0
 8011006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	f383 8811 	msr	BASEPRI, r3
}
 801100e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011010:	bf00      	nop
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}
 8011018:	e000ed04 	.word	0xe000ed04

0801101c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801101c:	b480      	push	{r7}
 801101e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011020:	4b0b      	ldr	r3, [pc, #44]	; (8011050 <vPortSetupTimerInterrupt+0x34>)
 8011022:	2200      	movs	r2, #0
 8011024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011026:	4b0b      	ldr	r3, [pc, #44]	; (8011054 <vPortSetupTimerInterrupt+0x38>)
 8011028:	2200      	movs	r2, #0
 801102a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801102c:	4b0a      	ldr	r3, [pc, #40]	; (8011058 <vPortSetupTimerInterrupt+0x3c>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	4a0a      	ldr	r2, [pc, #40]	; (801105c <vPortSetupTimerInterrupt+0x40>)
 8011032:	fba2 2303 	umull	r2, r3, r2, r3
 8011036:	099b      	lsrs	r3, r3, #6
 8011038:	4a09      	ldr	r2, [pc, #36]	; (8011060 <vPortSetupTimerInterrupt+0x44>)
 801103a:	3b01      	subs	r3, #1
 801103c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801103e:	4b04      	ldr	r3, [pc, #16]	; (8011050 <vPortSetupTimerInterrupt+0x34>)
 8011040:	2207      	movs	r2, #7
 8011042:	601a      	str	r2, [r3, #0]
}
 8011044:	bf00      	nop
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr
 801104e:	bf00      	nop
 8011050:	e000e010 	.word	0xe000e010
 8011054:	e000e018 	.word	0xe000e018
 8011058:	20000098 	.word	0x20000098
 801105c:	10624dd3 	.word	0x10624dd3
 8011060:	e000e014 	.word	0xe000e014

08011064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011074 <vPortEnableVFP+0x10>
 8011068:	6801      	ldr	r1, [r0, #0]
 801106a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801106e:	6001      	str	r1, [r0, #0]
 8011070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011072:	bf00      	nop
 8011074:	e000ed88 	.word	0xe000ed88

08011078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011078:	b480      	push	{r7}
 801107a:	b085      	sub	sp, #20
 801107c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801107e:	f3ef 8305 	mrs	r3, IPSR
 8011082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	2b0f      	cmp	r3, #15
 8011088:	d914      	bls.n	80110b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801108a:	4a17      	ldr	r2, [pc, #92]	; (80110e8 <vPortValidateInterruptPriority+0x70>)
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	4413      	add	r3, r2
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011094:	4b15      	ldr	r3, [pc, #84]	; (80110ec <vPortValidateInterruptPriority+0x74>)
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	7afa      	ldrb	r2, [r7, #11]
 801109a:	429a      	cmp	r2, r3
 801109c:	d20a      	bcs.n	80110b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801109e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a2:	f383 8811 	msr	BASEPRI, r3
 80110a6:	f3bf 8f6f 	isb	sy
 80110aa:	f3bf 8f4f 	dsb	sy
 80110ae:	607b      	str	r3, [r7, #4]
}
 80110b0:	bf00      	nop
 80110b2:	e7fe      	b.n	80110b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80110b4:	4b0e      	ldr	r3, [pc, #56]	; (80110f0 <vPortValidateInterruptPriority+0x78>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80110bc:	4b0d      	ldr	r3, [pc, #52]	; (80110f4 <vPortValidateInterruptPriority+0x7c>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d90a      	bls.n	80110da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80110c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c8:	f383 8811 	msr	BASEPRI, r3
 80110cc:	f3bf 8f6f 	isb	sy
 80110d0:	f3bf 8f4f 	dsb	sy
 80110d4:	603b      	str	r3, [r7, #0]
}
 80110d6:	bf00      	nop
 80110d8:	e7fe      	b.n	80110d8 <vPortValidateInterruptPriority+0x60>
	}
 80110da:	bf00      	nop
 80110dc:	3714      	adds	r7, #20
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr
 80110e6:	bf00      	nop
 80110e8:	e000e3f0 	.word	0xe000e3f0
 80110ec:	200082ac 	.word	0x200082ac
 80110f0:	e000ed0c 	.word	0xe000ed0c
 80110f4:	200082b0 	.word	0x200082b0

080110f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b088      	sub	sp, #32
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011100:	2300      	movs	r3, #0
 8011102:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8011104:	4b48      	ldr	r3, [pc, #288]	; (8011228 <pvPortMalloc+0x130>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d10a      	bne.n	8011122 <pvPortMalloc+0x2a>
	__asm volatile
 801110c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011110:	f383 8811 	msr	BASEPRI, r3
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	60fb      	str	r3, [r7, #12]
}
 801111e:	bf00      	nop
 8011120:	e7fe      	b.n	8011120 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 8011122:	f7fe fd83 	bl	800fc2c <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011126:	4b41      	ldr	r3, [pc, #260]	; (801122c <pvPortMalloc+0x134>)
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4013      	ands	r3, r2
 801112e:	2b00      	cmp	r3, #0
 8011130:	d172      	bne.n	8011218 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d00d      	beq.n	8011154 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8011138:	2208      	movs	r2, #8
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4413      	add	r3, r2
 801113e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f003 0307 	and.w	r3, r3, #7
 8011146:	2b00      	cmp	r3, #0
 8011148:	d004      	beq.n	8011154 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f023 0307 	bic.w	r3, r3, #7
 8011150:	3308      	adds	r3, #8
 8011152:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d05e      	beq.n	8011218 <pvPortMalloc+0x120>
 801115a:	4b35      	ldr	r3, [pc, #212]	; (8011230 <pvPortMalloc+0x138>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	429a      	cmp	r2, r3
 8011162:	d859      	bhi.n	8011218 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011164:	4b33      	ldr	r3, [pc, #204]	; (8011234 <pvPortMalloc+0x13c>)
 8011166:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 8011168:	4b32      	ldr	r3, [pc, #200]	; (8011234 <pvPortMalloc+0x13c>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801116e:	e004      	b.n	801117a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8011170:	69fb      	ldr	r3, [r7, #28]
 8011172:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	429a      	cmp	r2, r3
 8011182:	d903      	bls.n	801118c <pvPortMalloc+0x94>
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d1f1      	bne.n	8011170 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801118c:	4b26      	ldr	r3, [pc, #152]	; (8011228 <pvPortMalloc+0x130>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	69fa      	ldr	r2, [r7, #28]
 8011192:	429a      	cmp	r2, r3
 8011194:	d040      	beq.n	8011218 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011196:	69bb      	ldr	r3, [r7, #24]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	2208      	movs	r2, #8
 801119c:	4413      	add	r3, r2
 801119e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	69bb      	ldr	r3, [r7, #24]
 80111a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	685a      	ldr	r2, [r3, #4]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	1ad2      	subs	r2, r2, r3
 80111b0:	2308      	movs	r3, #8
 80111b2:	005b      	lsls	r3, r3, #1
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d90f      	bls.n	80111d8 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80111b8:	69fa      	ldr	r2, [r7, #28]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4413      	add	r3, r2
 80111be:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80111c0:	69fb      	ldr	r3, [r7, #28]
 80111c2:	685a      	ldr	r2, [r3, #4]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	1ad2      	subs	r2, r2, r3
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	687a      	ldr	r2, [r7, #4]
 80111d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80111d2:	6938      	ldr	r0, [r7, #16]
 80111d4:	f000 f8a2 	bl	801131c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80111d8:	4b15      	ldr	r3, [pc, #84]	; (8011230 <pvPortMalloc+0x138>)
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	1ad3      	subs	r3, r2, r3
 80111e2:	4a13      	ldr	r2, [pc, #76]	; (8011230 <pvPortMalloc+0x138>)
 80111e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80111e6:	4b12      	ldr	r3, [pc, #72]	; (8011230 <pvPortMalloc+0x138>)
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	4b13      	ldr	r3, [pc, #76]	; (8011238 <pvPortMalloc+0x140>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d203      	bcs.n	80111fa <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80111f2:	4b0f      	ldr	r3, [pc, #60]	; (8011230 <pvPortMalloc+0x138>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	4a10      	ldr	r2, [pc, #64]	; (8011238 <pvPortMalloc+0x140>)
 80111f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80111fa:	69fb      	ldr	r3, [r7, #28]
 80111fc:	685a      	ldr	r2, [r3, #4]
 80111fe:	4b0b      	ldr	r3, [pc, #44]	; (801122c <pvPortMalloc+0x134>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	431a      	orrs	r2, r3
 8011204:	69fb      	ldr	r3, [r7, #28]
 8011206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011208:	69fb      	ldr	r3, [r7, #28]
 801120a:	2200      	movs	r2, #0
 801120c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801120e:	4b0b      	ldr	r3, [pc, #44]	; (801123c <pvPortMalloc+0x144>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	3301      	adds	r3, #1
 8011214:	4a09      	ldr	r2, [pc, #36]	; (801123c <pvPortMalloc+0x144>)
 8011216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011218:	f7fe fd16 	bl	800fc48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 801121c:	697b      	ldr	r3, [r7, #20]
}
 801121e:	4618      	mov	r0, r3
 8011220:	3720      	adds	r7, #32
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop
 8011228:	200082bc 	.word	0x200082bc
 801122c:	200082d0 	.word	0x200082d0
 8011230:	200082c0 	.word	0x200082c0
 8011234:	200082b4 	.word	0x200082b4
 8011238:	200082c4 	.word	0x200082c4
 801123c:	200082c8 	.word	0x200082c8

08011240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b086      	sub	sp, #24
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d04d      	beq.n	80112ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011252:	2308      	movs	r3, #8
 8011254:	425b      	negs	r3, r3
 8011256:	697a      	ldr	r2, [r7, #20]
 8011258:	4413      	add	r3, r2
 801125a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	685a      	ldr	r2, [r3, #4]
 8011264:	4b24      	ldr	r3, [pc, #144]	; (80112f8 <vPortFree+0xb8>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	4013      	ands	r3, r2
 801126a:	2b00      	cmp	r3, #0
 801126c:	d10a      	bne.n	8011284 <vPortFree+0x44>
	__asm volatile
 801126e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011272:	f383 8811 	msr	BASEPRI, r3
 8011276:	f3bf 8f6f 	isb	sy
 801127a:	f3bf 8f4f 	dsb	sy
 801127e:	60fb      	str	r3, [r7, #12]
}
 8011280:	bf00      	nop
 8011282:	e7fe      	b.n	8011282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d00a      	beq.n	80112a2 <vPortFree+0x62>
	__asm volatile
 801128c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011290:	f383 8811 	msr	BASEPRI, r3
 8011294:	f3bf 8f6f 	isb	sy
 8011298:	f3bf 8f4f 	dsb	sy
 801129c:	60bb      	str	r3, [r7, #8]
}
 801129e:	bf00      	nop
 80112a0:	e7fe      	b.n	80112a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80112a2:	693b      	ldr	r3, [r7, #16]
 80112a4:	685a      	ldr	r2, [r3, #4]
 80112a6:	4b14      	ldr	r3, [pc, #80]	; (80112f8 <vPortFree+0xb8>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	4013      	ands	r3, r2
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d01e      	beq.n	80112ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d11a      	bne.n	80112ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80112b8:	693b      	ldr	r3, [r7, #16]
 80112ba:	685a      	ldr	r2, [r3, #4]
 80112bc:	4b0e      	ldr	r3, [pc, #56]	; (80112f8 <vPortFree+0xb8>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	43db      	mvns	r3, r3
 80112c2:	401a      	ands	r2, r3
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80112c8:	f7fe fcb0 	bl	800fc2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80112cc:	693b      	ldr	r3, [r7, #16]
 80112ce:	685a      	ldr	r2, [r3, #4]
 80112d0:	4b0a      	ldr	r3, [pc, #40]	; (80112fc <vPortFree+0xbc>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	4413      	add	r3, r2
 80112d6:	4a09      	ldr	r2, [pc, #36]	; (80112fc <vPortFree+0xbc>)
 80112d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80112da:	6938      	ldr	r0, [r7, #16]
 80112dc:	f000 f81e 	bl	801131c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80112e0:	4b07      	ldr	r3, [pc, #28]	; (8011300 <vPortFree+0xc0>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	3301      	adds	r3, #1
 80112e6:	4a06      	ldr	r2, [pc, #24]	; (8011300 <vPortFree+0xc0>)
 80112e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80112ea:	f7fe fcad 	bl	800fc48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80112ee:	bf00      	nop
 80112f0:	3718      	adds	r7, #24
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
 80112f6:	bf00      	nop
 80112f8:	200082d0 	.word	0x200082d0
 80112fc:	200082c0 	.word	0x200082c0
 8011300:	200082cc 	.word	0x200082cc

08011304 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8011304:	b480      	push	{r7}
 8011306:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8011308:	4b03      	ldr	r3, [pc, #12]	; (8011318 <xPortGetFreeHeapSize+0x14>)
 801130a:	681b      	ldr	r3, [r3, #0]
}
 801130c:	4618      	mov	r0, r3
 801130e:	46bd      	mov	sp, r7
 8011310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011314:	4770      	bx	lr
 8011316:	bf00      	nop
 8011318:	200082c0 	.word	0x200082c0

0801131c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801131c:	b480      	push	{r7}
 801131e:	b085      	sub	sp, #20
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011324:	4b28      	ldr	r3, [pc, #160]	; (80113c8 <prvInsertBlockIntoFreeList+0xac>)
 8011326:	60fb      	str	r3, [r7, #12]
 8011328:	e002      	b.n	8011330 <prvInsertBlockIntoFreeList+0x14>
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	60fb      	str	r3, [r7, #12]
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	687a      	ldr	r2, [r7, #4]
 8011336:	429a      	cmp	r2, r3
 8011338:	d8f7      	bhi.n	801132a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	68ba      	ldr	r2, [r7, #8]
 8011344:	4413      	add	r3, r2
 8011346:	687a      	ldr	r2, [r7, #4]
 8011348:	429a      	cmp	r2, r3
 801134a:	d108      	bne.n	801135e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	685a      	ldr	r2, [r3, #4]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	441a      	add	r2, r3
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	68ba      	ldr	r2, [r7, #8]
 8011368:	441a      	add	r2, r3
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	429a      	cmp	r2, r3
 8011370:	d118      	bne.n	80113a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681a      	ldr	r2, [r3, #0]
 8011376:	4b15      	ldr	r3, [pc, #84]	; (80113cc <prvInsertBlockIntoFreeList+0xb0>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	429a      	cmp	r2, r3
 801137c:	d00d      	beq.n	801139a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	685a      	ldr	r2, [r3, #4]
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	441a      	add	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	681a      	ldr	r2, [r3, #0]
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	601a      	str	r2, [r3, #0]
 8011398:	e008      	b.n	80113ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801139a:	4b0c      	ldr	r3, [pc, #48]	; (80113cc <prvInsertBlockIntoFreeList+0xb0>)
 801139c:	681a      	ldr	r2, [r3, #0]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	601a      	str	r2, [r3, #0]
 80113a2:	e003      	b.n	80113ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681a      	ldr	r2, [r3, #0]
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80113ac:	68fa      	ldr	r2, [r7, #12]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d002      	beq.n	80113ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113ba:	bf00      	nop
 80113bc:	3714      	adds	r7, #20
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr
 80113c6:	bf00      	nop
 80113c8:	200082b4 	.word	0x200082b4
 80113cc:	200082bc 	.word	0x200082bc

080113d0 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 80113d0:	b480      	push	{r7}
 80113d2:	b08f      	sub	sp, #60	; 0x3c
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 80113d8:	2300      	movs	r3, #0
 80113da:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 80113dc:	2300      	movs	r3, #0
 80113de:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 80113e0:	2300      	movs	r3, #0
 80113e2:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 80113e4:	4b5a      	ldr	r3, [pc, #360]	; (8011550 <vPortDefineHeapRegions+0x180>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d00a      	beq.n	8011402 <vPortDefineHeapRegions+0x32>
	__asm volatile
 80113ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f0:	f383 8811 	msr	BASEPRI, r3
 80113f4:	f3bf 8f6f 	isb	sy
 80113f8:	f3bf 8f4f 	dsb	sy
 80113fc:	617b      	str	r3, [r7, #20]
}
 80113fe:	bf00      	nop
 8011400:	e7fe      	b.n	8011400 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8011402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011404:	00db      	lsls	r3, r3, #3
 8011406:	687a      	ldr	r2, [r7, #4]
 8011408:	4413      	add	r3, r2
 801140a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 801140c:	e07d      	b.n	801150a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 801140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 8011414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141c:	f003 0307 	and.w	r3, r3, #7
 8011420:	2b00      	cmp	r3, #0
 8011422:	d00e      	beq.n	8011442 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 8011424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011426:	3307      	adds	r3, #7
 8011428:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 801142a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142c:	f023 0307 	bic.w	r3, r3, #7
 8011430:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 8011432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	461a      	mov	r2, r3
 8011438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143a:	1ad3      	subs	r3, r2, r3
 801143c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801143e:	4413      	add	r3, r2
 8011440:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 8011442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011444:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 8011446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011448:	2b00      	cmp	r3, #0
 801144a:	d106      	bne.n	801145a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 801144c:	69fb      	ldr	r3, [r7, #28]
 801144e:	4a41      	ldr	r2, [pc, #260]	; (8011554 <vPortDefineHeapRegions+0x184>)
 8011450:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 8011452:	4b40      	ldr	r3, [pc, #256]	; (8011554 <vPortDefineHeapRegions+0x184>)
 8011454:	2200      	movs	r2, #0
 8011456:	605a      	str	r2, [r3, #4]
 8011458:	e01f      	b.n	801149a <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 801145a:	4b3d      	ldr	r3, [pc, #244]	; (8011550 <vPortDefineHeapRegions+0x180>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d10a      	bne.n	8011478 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 8011462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011466:	f383 8811 	msr	BASEPRI, r3
 801146a:	f3bf 8f6f 	isb	sy
 801146e:	f3bf 8f4f 	dsb	sy
 8011472:	613b      	str	r3, [r7, #16]
}
 8011474:	bf00      	nop
 8011476:	e7fe      	b.n	8011476 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8011478:	4b35      	ldr	r3, [pc, #212]	; (8011550 <vPortDefineHeapRegions+0x180>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	461a      	mov	r2, r3
 801147e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011480:	4293      	cmp	r3, r2
 8011482:	d80a      	bhi.n	801149a <vPortDefineHeapRegions+0xca>
	__asm volatile
 8011484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011488:	f383 8811 	msr	BASEPRI, r3
 801148c:	f3bf 8f6f 	isb	sy
 8011490:	f3bf 8f4f 	dsb	sy
 8011494:	60fb      	str	r3, [r7, #12]
}
 8011496:	bf00      	nop
 8011498:	e7fe      	b.n	8011498 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 801149a:	4b2d      	ldr	r3, [pc, #180]	; (8011550 <vPortDefineHeapRegions+0x180>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 80114a0:	69fa      	ldr	r2, [r7, #28]
 80114a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114a4:	4413      	add	r3, r2
 80114a6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 80114a8:	2208      	movs	r2, #8
 80114aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ac:	1a9b      	subs	r3, r3, r2
 80114ae:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 80114b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b2:	f023 0307 	bic.w	r3, r3, #7
 80114b6:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 80114b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ba:	4a25      	ldr	r2, [pc, #148]	; (8011550 <vPortDefineHeapRegions+0x180>)
 80114bc:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 80114be:	4b24      	ldr	r3, [pc, #144]	; (8011550 <vPortDefineHeapRegions+0x180>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	2200      	movs	r2, #0
 80114c4:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 80114c6:	4b22      	ldr	r3, [pc, #136]	; (8011550 <vPortDefineHeapRegions+0x180>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	2200      	movs	r2, #0
 80114cc:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 80114ce:	69fb      	ldr	r3, [r7, #28]
 80114d0:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 80114d2:	6a3b      	ldr	r3, [r7, #32]
 80114d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114d6:	1ad2      	subs	r2, r2, r3
 80114d8:	6a3b      	ldr	r3, [r7, #32]
 80114da:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 80114dc:	4b1c      	ldr	r3, [pc, #112]	; (8011550 <vPortDefineHeapRegions+0x180>)
 80114de:	681a      	ldr	r2, [r3, #0]
 80114e0:	6a3b      	ldr	r3, [r7, #32]
 80114e2:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d002      	beq.n	80114f0 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 80114ea:	69bb      	ldr	r3, [r7, #24]
 80114ec:	6a3a      	ldr	r2, [r7, #32]
 80114ee:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 80114f0:	6a3b      	ldr	r3, [r7, #32]
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114f6:	4413      	add	r3, r2
 80114f8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 80114fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114fc:	3301      	adds	r3, #1
 80114fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8011500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011502:	00db      	lsls	r3, r3, #3
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	4413      	add	r3, r2
 8011508:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 801150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	2b00      	cmp	r3, #0
 8011510:	f47f af7d 	bne.w	801140e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8011514:	4a10      	ldr	r2, [pc, #64]	; (8011558 <vPortDefineHeapRegions+0x188>)
 8011516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011518:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 801151a:	4a10      	ldr	r2, [pc, #64]	; (801155c <vPortDefineHeapRegions+0x18c>)
 801151c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 8011520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011522:	2b00      	cmp	r3, #0
 8011524:	d10a      	bne.n	801153c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 8011526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801152a:	f383 8811 	msr	BASEPRI, r3
 801152e:	f3bf 8f6f 	isb	sy
 8011532:	f3bf 8f4f 	dsb	sy
 8011536:	60bb      	str	r3, [r7, #8]
}
 8011538:	bf00      	nop
 801153a:	e7fe      	b.n	801153a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801153c:	4b08      	ldr	r3, [pc, #32]	; (8011560 <vPortDefineHeapRegions+0x190>)
 801153e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011542:	601a      	str	r2, [r3, #0]
}
 8011544:	bf00      	nop
 8011546:	373c      	adds	r7, #60	; 0x3c
 8011548:	46bd      	mov	sp, r7
 801154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154e:	4770      	bx	lr
 8011550:	200082bc 	.word	0x200082bc
 8011554:	200082b4 	.word	0x200082b4
 8011558:	200082c4 	.word	0x200082c4
 801155c:	200082c0 	.word	0x200082c0
 8011560:	200082d0 	.word	0x200082d0

08011564 <__assert_func>:
 8011564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011566:	4614      	mov	r4, r2
 8011568:	461a      	mov	r2, r3
 801156a:	4b09      	ldr	r3, [pc, #36]	; (8011590 <__assert_func+0x2c>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	4605      	mov	r5, r0
 8011570:	68d8      	ldr	r0, [r3, #12]
 8011572:	b14c      	cbz	r4, 8011588 <__assert_func+0x24>
 8011574:	4b07      	ldr	r3, [pc, #28]	; (8011594 <__assert_func+0x30>)
 8011576:	9100      	str	r1, [sp, #0]
 8011578:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801157c:	4906      	ldr	r1, [pc, #24]	; (8011598 <__assert_func+0x34>)
 801157e:	462b      	mov	r3, r5
 8011580:	f000 f8ee 	bl	8011760 <fiprintf>
 8011584:	f001 f8c0 	bl	8012708 <abort>
 8011588:	4b04      	ldr	r3, [pc, #16]	; (801159c <__assert_func+0x38>)
 801158a:	461c      	mov	r4, r3
 801158c:	e7f3      	b.n	8011576 <__assert_func+0x12>
 801158e:	bf00      	nop
 8011590:	200000b8 	.word	0x200000b8
 8011594:	08016a3c 	.word	0x08016a3c
 8011598:	08016a49 	.word	0x08016a49
 801159c:	08016a77 	.word	0x08016a77

080115a0 <atol>:
 80115a0:	220a      	movs	r2, #10
 80115a2:	2100      	movs	r1, #0
 80115a4:	f000 bf9a 	b.w	80124dc <strtol>

080115a8 <__errno>:
 80115a8:	4b01      	ldr	r3, [pc, #4]	; (80115b0 <__errno+0x8>)
 80115aa:	6818      	ldr	r0, [r3, #0]
 80115ac:	4770      	bx	lr
 80115ae:	bf00      	nop
 80115b0:	200000b8 	.word	0x200000b8

080115b4 <std>:
 80115b4:	2300      	movs	r3, #0
 80115b6:	b510      	push	{r4, lr}
 80115b8:	4604      	mov	r4, r0
 80115ba:	e9c0 3300 	strd	r3, r3, [r0]
 80115be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80115c2:	6083      	str	r3, [r0, #8]
 80115c4:	8181      	strh	r1, [r0, #12]
 80115c6:	6643      	str	r3, [r0, #100]	; 0x64
 80115c8:	81c2      	strh	r2, [r0, #14]
 80115ca:	6183      	str	r3, [r0, #24]
 80115cc:	4619      	mov	r1, r3
 80115ce:	2208      	movs	r2, #8
 80115d0:	305c      	adds	r0, #92	; 0x5c
 80115d2:	f000 f9e9 	bl	80119a8 <memset>
 80115d6:	4b05      	ldr	r3, [pc, #20]	; (80115ec <std+0x38>)
 80115d8:	6263      	str	r3, [r4, #36]	; 0x24
 80115da:	4b05      	ldr	r3, [pc, #20]	; (80115f0 <std+0x3c>)
 80115dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80115de:	4b05      	ldr	r3, [pc, #20]	; (80115f4 <std+0x40>)
 80115e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80115e2:	4b05      	ldr	r3, [pc, #20]	; (80115f8 <std+0x44>)
 80115e4:	6224      	str	r4, [r4, #32]
 80115e6:	6323      	str	r3, [r4, #48]	; 0x30
 80115e8:	bd10      	pop	{r4, pc}
 80115ea:	bf00      	nop
 80115ec:	080122b9 	.word	0x080122b9
 80115f0:	080122db 	.word	0x080122db
 80115f4:	08012313 	.word	0x08012313
 80115f8:	08012337 	.word	0x08012337

080115fc <_cleanup_r>:
 80115fc:	4901      	ldr	r1, [pc, #4]	; (8011604 <_cleanup_r+0x8>)
 80115fe:	f000 b8c1 	b.w	8011784 <_fwalk_reent>
 8011602:	bf00      	nop
 8011604:	08012845 	.word	0x08012845

08011608 <__sfmoreglue>:
 8011608:	b570      	push	{r4, r5, r6, lr}
 801160a:	2268      	movs	r2, #104	; 0x68
 801160c:	1e4d      	subs	r5, r1, #1
 801160e:	4355      	muls	r5, r2
 8011610:	460e      	mov	r6, r1
 8011612:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011616:	f000 fa3b 	bl	8011a90 <_malloc_r>
 801161a:	4604      	mov	r4, r0
 801161c:	b140      	cbz	r0, 8011630 <__sfmoreglue+0x28>
 801161e:	2100      	movs	r1, #0
 8011620:	e9c0 1600 	strd	r1, r6, [r0]
 8011624:	300c      	adds	r0, #12
 8011626:	60a0      	str	r0, [r4, #8]
 8011628:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801162c:	f000 f9bc 	bl	80119a8 <memset>
 8011630:	4620      	mov	r0, r4
 8011632:	bd70      	pop	{r4, r5, r6, pc}

08011634 <__sfp_lock_acquire>:
 8011634:	4801      	ldr	r0, [pc, #4]	; (801163c <__sfp_lock_acquire+0x8>)
 8011636:	f000 b996 	b.w	8011966 <__retarget_lock_acquire_recursive>
 801163a:	bf00      	nop
 801163c:	200082d5 	.word	0x200082d5

08011640 <__sfp_lock_release>:
 8011640:	4801      	ldr	r0, [pc, #4]	; (8011648 <__sfp_lock_release+0x8>)
 8011642:	f000 b991 	b.w	8011968 <__retarget_lock_release_recursive>
 8011646:	bf00      	nop
 8011648:	200082d5 	.word	0x200082d5

0801164c <__sinit_lock_acquire>:
 801164c:	4801      	ldr	r0, [pc, #4]	; (8011654 <__sinit_lock_acquire+0x8>)
 801164e:	f000 b98a 	b.w	8011966 <__retarget_lock_acquire_recursive>
 8011652:	bf00      	nop
 8011654:	200082d6 	.word	0x200082d6

08011658 <__sinit_lock_release>:
 8011658:	4801      	ldr	r0, [pc, #4]	; (8011660 <__sinit_lock_release+0x8>)
 801165a:	f000 b985 	b.w	8011968 <__retarget_lock_release_recursive>
 801165e:	bf00      	nop
 8011660:	200082d6 	.word	0x200082d6

08011664 <__sinit>:
 8011664:	b510      	push	{r4, lr}
 8011666:	4604      	mov	r4, r0
 8011668:	f7ff fff0 	bl	801164c <__sinit_lock_acquire>
 801166c:	69a3      	ldr	r3, [r4, #24]
 801166e:	b11b      	cbz	r3, 8011678 <__sinit+0x14>
 8011670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011674:	f7ff bff0 	b.w	8011658 <__sinit_lock_release>
 8011678:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801167c:	6523      	str	r3, [r4, #80]	; 0x50
 801167e:	4b13      	ldr	r3, [pc, #76]	; (80116cc <__sinit+0x68>)
 8011680:	4a13      	ldr	r2, [pc, #76]	; (80116d0 <__sinit+0x6c>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	62a2      	str	r2, [r4, #40]	; 0x28
 8011686:	42a3      	cmp	r3, r4
 8011688:	bf04      	itt	eq
 801168a:	2301      	moveq	r3, #1
 801168c:	61a3      	streq	r3, [r4, #24]
 801168e:	4620      	mov	r0, r4
 8011690:	f000 f820 	bl	80116d4 <__sfp>
 8011694:	6060      	str	r0, [r4, #4]
 8011696:	4620      	mov	r0, r4
 8011698:	f000 f81c 	bl	80116d4 <__sfp>
 801169c:	60a0      	str	r0, [r4, #8]
 801169e:	4620      	mov	r0, r4
 80116a0:	f000 f818 	bl	80116d4 <__sfp>
 80116a4:	2200      	movs	r2, #0
 80116a6:	60e0      	str	r0, [r4, #12]
 80116a8:	2104      	movs	r1, #4
 80116aa:	6860      	ldr	r0, [r4, #4]
 80116ac:	f7ff ff82 	bl	80115b4 <std>
 80116b0:	68a0      	ldr	r0, [r4, #8]
 80116b2:	2201      	movs	r2, #1
 80116b4:	2109      	movs	r1, #9
 80116b6:	f7ff ff7d 	bl	80115b4 <std>
 80116ba:	68e0      	ldr	r0, [r4, #12]
 80116bc:	2202      	movs	r2, #2
 80116be:	2112      	movs	r1, #18
 80116c0:	f7ff ff78 	bl	80115b4 <std>
 80116c4:	2301      	movs	r3, #1
 80116c6:	61a3      	str	r3, [r4, #24]
 80116c8:	e7d2      	b.n	8011670 <__sinit+0xc>
 80116ca:	bf00      	nop
 80116cc:	08016ad8 	.word	0x08016ad8
 80116d0:	080115fd 	.word	0x080115fd

080116d4 <__sfp>:
 80116d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116d6:	4607      	mov	r7, r0
 80116d8:	f7ff ffac 	bl	8011634 <__sfp_lock_acquire>
 80116dc:	4b1e      	ldr	r3, [pc, #120]	; (8011758 <__sfp+0x84>)
 80116de:	681e      	ldr	r6, [r3, #0]
 80116e0:	69b3      	ldr	r3, [r6, #24]
 80116e2:	b913      	cbnz	r3, 80116ea <__sfp+0x16>
 80116e4:	4630      	mov	r0, r6
 80116e6:	f7ff ffbd 	bl	8011664 <__sinit>
 80116ea:	3648      	adds	r6, #72	; 0x48
 80116ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80116f0:	3b01      	subs	r3, #1
 80116f2:	d503      	bpl.n	80116fc <__sfp+0x28>
 80116f4:	6833      	ldr	r3, [r6, #0]
 80116f6:	b30b      	cbz	r3, 801173c <__sfp+0x68>
 80116f8:	6836      	ldr	r6, [r6, #0]
 80116fa:	e7f7      	b.n	80116ec <__sfp+0x18>
 80116fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011700:	b9d5      	cbnz	r5, 8011738 <__sfp+0x64>
 8011702:	4b16      	ldr	r3, [pc, #88]	; (801175c <__sfp+0x88>)
 8011704:	60e3      	str	r3, [r4, #12]
 8011706:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801170a:	6665      	str	r5, [r4, #100]	; 0x64
 801170c:	f000 f92a 	bl	8011964 <__retarget_lock_init_recursive>
 8011710:	f7ff ff96 	bl	8011640 <__sfp_lock_release>
 8011714:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011718:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801171c:	6025      	str	r5, [r4, #0]
 801171e:	61a5      	str	r5, [r4, #24]
 8011720:	2208      	movs	r2, #8
 8011722:	4629      	mov	r1, r5
 8011724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011728:	f000 f93e 	bl	80119a8 <memset>
 801172c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011734:	4620      	mov	r0, r4
 8011736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011738:	3468      	adds	r4, #104	; 0x68
 801173a:	e7d9      	b.n	80116f0 <__sfp+0x1c>
 801173c:	2104      	movs	r1, #4
 801173e:	4638      	mov	r0, r7
 8011740:	f7ff ff62 	bl	8011608 <__sfmoreglue>
 8011744:	4604      	mov	r4, r0
 8011746:	6030      	str	r0, [r6, #0]
 8011748:	2800      	cmp	r0, #0
 801174a:	d1d5      	bne.n	80116f8 <__sfp+0x24>
 801174c:	f7ff ff78 	bl	8011640 <__sfp_lock_release>
 8011750:	230c      	movs	r3, #12
 8011752:	603b      	str	r3, [r7, #0]
 8011754:	e7ee      	b.n	8011734 <__sfp+0x60>
 8011756:	bf00      	nop
 8011758:	08016ad8 	.word	0x08016ad8
 801175c:	ffff0001 	.word	0xffff0001

08011760 <fiprintf>:
 8011760:	b40e      	push	{r1, r2, r3}
 8011762:	b503      	push	{r0, r1, lr}
 8011764:	4601      	mov	r1, r0
 8011766:	ab03      	add	r3, sp, #12
 8011768:	4805      	ldr	r0, [pc, #20]	; (8011780 <fiprintf+0x20>)
 801176a:	f853 2b04 	ldr.w	r2, [r3], #4
 801176e:	6800      	ldr	r0, [r0, #0]
 8011770:	9301      	str	r3, [sp, #4]
 8011772:	f000 fa2b 	bl	8011bcc <_vfiprintf_r>
 8011776:	b002      	add	sp, #8
 8011778:	f85d eb04 	ldr.w	lr, [sp], #4
 801177c:	b003      	add	sp, #12
 801177e:	4770      	bx	lr
 8011780:	200000b8 	.word	0x200000b8

08011784 <_fwalk_reent>:
 8011784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011788:	4606      	mov	r6, r0
 801178a:	4688      	mov	r8, r1
 801178c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011790:	2700      	movs	r7, #0
 8011792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011796:	f1b9 0901 	subs.w	r9, r9, #1
 801179a:	d505      	bpl.n	80117a8 <_fwalk_reent+0x24>
 801179c:	6824      	ldr	r4, [r4, #0]
 801179e:	2c00      	cmp	r4, #0
 80117a0:	d1f7      	bne.n	8011792 <_fwalk_reent+0xe>
 80117a2:	4638      	mov	r0, r7
 80117a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117a8:	89ab      	ldrh	r3, [r5, #12]
 80117aa:	2b01      	cmp	r3, #1
 80117ac:	d907      	bls.n	80117be <_fwalk_reent+0x3a>
 80117ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80117b2:	3301      	adds	r3, #1
 80117b4:	d003      	beq.n	80117be <_fwalk_reent+0x3a>
 80117b6:	4629      	mov	r1, r5
 80117b8:	4630      	mov	r0, r6
 80117ba:	47c0      	blx	r8
 80117bc:	4307      	orrs	r7, r0
 80117be:	3568      	adds	r5, #104	; 0x68
 80117c0:	e7e9      	b.n	8011796 <_fwalk_reent+0x12>
	...

080117c4 <gmtime_r>:
 80117c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117c8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80117cc:	460c      	mov	r4, r1
 80117ce:	4a4f      	ldr	r2, [pc, #316]	; (801190c <gmtime_r+0x148>)
 80117d0:	2300      	movs	r3, #0
 80117d2:	4630      	mov	r0, r6
 80117d4:	4639      	mov	r1, r7
 80117d6:	f7ef f859 	bl	800088c <__aeabi_ldivmod>
 80117da:	4639      	mov	r1, r7
 80117dc:	4605      	mov	r5, r0
 80117de:	4a4b      	ldr	r2, [pc, #300]	; (801190c <gmtime_r+0x148>)
 80117e0:	4630      	mov	r0, r6
 80117e2:	2300      	movs	r3, #0
 80117e4:	f7ef f852 	bl	800088c <__aeabi_ldivmod>
 80117e8:	2a00      	cmp	r2, #0
 80117ea:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80117ee:	bfb7      	itett	lt
 80117f0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80117f4:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 80117f8:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 80117fc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8011800:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8011804:	fbb2 f1f0 	udiv	r1, r2, r0
 8011808:	fb00 2211 	mls	r2, r0, r1, r2
 801180c:	203c      	movs	r0, #60	; 0x3c
 801180e:	60a1      	str	r1, [r4, #8]
 8011810:	fbb2 f1f0 	udiv	r1, r2, r0
 8011814:	fb00 2211 	mls	r2, r0, r1, r2
 8011818:	6061      	str	r1, [r4, #4]
 801181a:	6022      	str	r2, [r4, #0]
 801181c:	2107      	movs	r1, #7
 801181e:	1cda      	adds	r2, r3, #3
 8011820:	fb92 f1f1 	sdiv	r1, r2, r1
 8011824:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8011828:	1a52      	subs	r2, r2, r1
 801182a:	bf48      	it	mi
 801182c:	3207      	addmi	r2, #7
 801182e:	4d38      	ldr	r5, [pc, #224]	; (8011910 <gmtime_r+0x14c>)
 8011830:	4838      	ldr	r0, [pc, #224]	; (8011914 <gmtime_r+0x150>)
 8011832:	61a2      	str	r2, [r4, #24]
 8011834:	2b00      	cmp	r3, #0
 8011836:	bfb7      	itett	lt
 8011838:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 801183c:	fb93 f5f5 	sdivge	r5, r3, r5
 8011840:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8011844:	fb92 f5f5 	sdivlt	r5, r2, r5
 8011848:	fb00 3005 	mla	r0, r0, r5, r3
 801184c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8011850:	fbb0 f2f2 	udiv	r2, r0, r2
 8011854:	4402      	add	r2, r0
 8011856:	f240 53b4 	movw	r3, #1460	; 0x5b4
 801185a:	fbb0 f1f3 	udiv	r1, r0, r3
 801185e:	1a52      	subs	r2, r2, r1
 8011860:	f240 1c6d 	movw	ip, #365	; 0x16d
 8011864:	492c      	ldr	r1, [pc, #176]	; (8011918 <gmtime_r+0x154>)
 8011866:	fbb0 f1f1 	udiv	r1, r0, r1
 801186a:	2764      	movs	r7, #100	; 0x64
 801186c:	1a52      	subs	r2, r2, r1
 801186e:	fbb2 f1fc 	udiv	r1, r2, ip
 8011872:	fbb2 f3f3 	udiv	r3, r2, r3
 8011876:	fbb1 f6f7 	udiv	r6, r1, r7
 801187a:	1af3      	subs	r3, r6, r3
 801187c:	4403      	add	r3, r0
 801187e:	fb0c 3311 	mls	r3, ip, r1, r3
 8011882:	2299      	movs	r2, #153	; 0x99
 8011884:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8011888:	f10e 0e02 	add.w	lr, lr, #2
 801188c:	f103 0c01 	add.w	ip, r3, #1
 8011890:	fbbe f0f2 	udiv	r0, lr, r2
 8011894:	4342      	muls	r2, r0
 8011896:	3202      	adds	r2, #2
 8011898:	f04f 0805 	mov.w	r8, #5
 801189c:	fbb2 f2f8 	udiv	r2, r2, r8
 80118a0:	ebac 0c02 	sub.w	ip, ip, r2
 80118a4:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80118a8:	4596      	cmp	lr, r2
 80118aa:	bf94      	ite	ls
 80118ac:	2202      	movls	r2, #2
 80118ae:	f06f 0209 	mvnhi.w	r2, #9
 80118b2:	4410      	add	r0, r2
 80118b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80118b8:	fb02 1505 	mla	r5, r2, r5, r1
 80118bc:	2801      	cmp	r0, #1
 80118be:	bf98      	it	ls
 80118c0:	3501      	addls	r5, #1
 80118c2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80118c6:	d30d      	bcc.n	80118e4 <gmtime_r+0x120>
 80118c8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80118cc:	61e3      	str	r3, [r4, #28]
 80118ce:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80118d2:	2300      	movs	r3, #0
 80118d4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80118d8:	f8c4 c00c 	str.w	ip, [r4, #12]
 80118dc:	6223      	str	r3, [r4, #32]
 80118de:	4620      	mov	r0, r4
 80118e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e4:	078a      	lsls	r2, r1, #30
 80118e6:	d102      	bne.n	80118ee <gmtime_r+0x12a>
 80118e8:	fb07 1616 	mls	r6, r7, r6, r1
 80118ec:	b95e      	cbnz	r6, 8011906 <gmtime_r+0x142>
 80118ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80118f2:	fbb1 f6f2 	udiv	r6, r1, r2
 80118f6:	fb02 1216 	mls	r2, r2, r6, r1
 80118fa:	fab2 f282 	clz	r2, r2
 80118fe:	0952      	lsrs	r2, r2, #5
 8011900:	333b      	adds	r3, #59	; 0x3b
 8011902:	4413      	add	r3, r2
 8011904:	e7e2      	b.n	80118cc <gmtime_r+0x108>
 8011906:	2201      	movs	r2, #1
 8011908:	e7fa      	b.n	8011900 <gmtime_r+0x13c>
 801190a:	bf00      	nop
 801190c:	00015180 	.word	0x00015180
 8011910:	00023ab1 	.word	0x00023ab1
 8011914:	fffdc54f 	.word	0xfffdc54f
 8011918:	00023ab0 	.word	0x00023ab0

0801191c <__libc_init_array>:
 801191c:	b570      	push	{r4, r5, r6, lr}
 801191e:	4d0d      	ldr	r5, [pc, #52]	; (8011954 <__libc_init_array+0x38>)
 8011920:	4c0d      	ldr	r4, [pc, #52]	; (8011958 <__libc_init_array+0x3c>)
 8011922:	1b64      	subs	r4, r4, r5
 8011924:	10a4      	asrs	r4, r4, #2
 8011926:	2600      	movs	r6, #0
 8011928:	42a6      	cmp	r6, r4
 801192a:	d109      	bne.n	8011940 <__libc_init_array+0x24>
 801192c:	4d0b      	ldr	r5, [pc, #44]	; (801195c <__libc_init_array+0x40>)
 801192e:	4c0c      	ldr	r4, [pc, #48]	; (8011960 <__libc_init_array+0x44>)
 8011930:	f001 fa6c 	bl	8012e0c <_init>
 8011934:	1b64      	subs	r4, r4, r5
 8011936:	10a4      	asrs	r4, r4, #2
 8011938:	2600      	movs	r6, #0
 801193a:	42a6      	cmp	r6, r4
 801193c:	d105      	bne.n	801194a <__libc_init_array+0x2e>
 801193e:	bd70      	pop	{r4, r5, r6, pc}
 8011940:	f855 3b04 	ldr.w	r3, [r5], #4
 8011944:	4798      	blx	r3
 8011946:	3601      	adds	r6, #1
 8011948:	e7ee      	b.n	8011928 <__libc_init_array+0xc>
 801194a:	f855 3b04 	ldr.w	r3, [r5], #4
 801194e:	4798      	blx	r3
 8011950:	3601      	adds	r6, #1
 8011952:	e7f2      	b.n	801193a <__libc_init_array+0x1e>
 8011954:	08016c18 	.word	0x08016c18
 8011958:	08016c18 	.word	0x08016c18
 801195c:	08016c18 	.word	0x08016c18
 8011960:	08016c1c 	.word	0x08016c1c

08011964 <__retarget_lock_init_recursive>:
 8011964:	4770      	bx	lr

08011966 <__retarget_lock_acquire_recursive>:
 8011966:	4770      	bx	lr

08011968 <__retarget_lock_release_recursive>:
 8011968:	4770      	bx	lr
	...

0801196c <malloc>:
 801196c:	4b02      	ldr	r3, [pc, #8]	; (8011978 <malloc+0xc>)
 801196e:	4601      	mov	r1, r0
 8011970:	6818      	ldr	r0, [r3, #0]
 8011972:	f000 b88d 	b.w	8011a90 <_malloc_r>
 8011976:	bf00      	nop
 8011978:	200000b8 	.word	0x200000b8

0801197c <free>:
 801197c:	4b02      	ldr	r3, [pc, #8]	; (8011988 <free+0xc>)
 801197e:	4601      	mov	r1, r0
 8011980:	6818      	ldr	r0, [r3, #0]
 8011982:	f000 b819 	b.w	80119b8 <_free_r>
 8011986:	bf00      	nop
 8011988:	200000b8 	.word	0x200000b8

0801198c <memcpy>:
 801198c:	440a      	add	r2, r1
 801198e:	4291      	cmp	r1, r2
 8011990:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011994:	d100      	bne.n	8011998 <memcpy+0xc>
 8011996:	4770      	bx	lr
 8011998:	b510      	push	{r4, lr}
 801199a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801199e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80119a2:	4291      	cmp	r1, r2
 80119a4:	d1f9      	bne.n	801199a <memcpy+0xe>
 80119a6:	bd10      	pop	{r4, pc}

080119a8 <memset>:
 80119a8:	4402      	add	r2, r0
 80119aa:	4603      	mov	r3, r0
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d100      	bne.n	80119b2 <memset+0xa>
 80119b0:	4770      	bx	lr
 80119b2:	f803 1b01 	strb.w	r1, [r3], #1
 80119b6:	e7f9      	b.n	80119ac <memset+0x4>

080119b8 <_free_r>:
 80119b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119ba:	2900      	cmp	r1, #0
 80119bc:	d044      	beq.n	8011a48 <_free_r+0x90>
 80119be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119c2:	9001      	str	r0, [sp, #4]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	f1a1 0404 	sub.w	r4, r1, #4
 80119ca:	bfb8      	it	lt
 80119cc:	18e4      	addlt	r4, r4, r3
 80119ce:	f001 f807 	bl	80129e0 <__malloc_lock>
 80119d2:	4a1e      	ldr	r2, [pc, #120]	; (8011a4c <_free_r+0x94>)
 80119d4:	9801      	ldr	r0, [sp, #4]
 80119d6:	6813      	ldr	r3, [r2, #0]
 80119d8:	b933      	cbnz	r3, 80119e8 <_free_r+0x30>
 80119da:	6063      	str	r3, [r4, #4]
 80119dc:	6014      	str	r4, [r2, #0]
 80119de:	b003      	add	sp, #12
 80119e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119e4:	f001 b802 	b.w	80129ec <__malloc_unlock>
 80119e8:	42a3      	cmp	r3, r4
 80119ea:	d908      	bls.n	80119fe <_free_r+0x46>
 80119ec:	6825      	ldr	r5, [r4, #0]
 80119ee:	1961      	adds	r1, r4, r5
 80119f0:	428b      	cmp	r3, r1
 80119f2:	bf01      	itttt	eq
 80119f4:	6819      	ldreq	r1, [r3, #0]
 80119f6:	685b      	ldreq	r3, [r3, #4]
 80119f8:	1949      	addeq	r1, r1, r5
 80119fa:	6021      	streq	r1, [r4, #0]
 80119fc:	e7ed      	b.n	80119da <_free_r+0x22>
 80119fe:	461a      	mov	r2, r3
 8011a00:	685b      	ldr	r3, [r3, #4]
 8011a02:	b10b      	cbz	r3, 8011a08 <_free_r+0x50>
 8011a04:	42a3      	cmp	r3, r4
 8011a06:	d9fa      	bls.n	80119fe <_free_r+0x46>
 8011a08:	6811      	ldr	r1, [r2, #0]
 8011a0a:	1855      	adds	r5, r2, r1
 8011a0c:	42a5      	cmp	r5, r4
 8011a0e:	d10b      	bne.n	8011a28 <_free_r+0x70>
 8011a10:	6824      	ldr	r4, [r4, #0]
 8011a12:	4421      	add	r1, r4
 8011a14:	1854      	adds	r4, r2, r1
 8011a16:	42a3      	cmp	r3, r4
 8011a18:	6011      	str	r1, [r2, #0]
 8011a1a:	d1e0      	bne.n	80119de <_free_r+0x26>
 8011a1c:	681c      	ldr	r4, [r3, #0]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	6053      	str	r3, [r2, #4]
 8011a22:	4421      	add	r1, r4
 8011a24:	6011      	str	r1, [r2, #0]
 8011a26:	e7da      	b.n	80119de <_free_r+0x26>
 8011a28:	d902      	bls.n	8011a30 <_free_r+0x78>
 8011a2a:	230c      	movs	r3, #12
 8011a2c:	6003      	str	r3, [r0, #0]
 8011a2e:	e7d6      	b.n	80119de <_free_r+0x26>
 8011a30:	6825      	ldr	r5, [r4, #0]
 8011a32:	1961      	adds	r1, r4, r5
 8011a34:	428b      	cmp	r3, r1
 8011a36:	bf04      	itt	eq
 8011a38:	6819      	ldreq	r1, [r3, #0]
 8011a3a:	685b      	ldreq	r3, [r3, #4]
 8011a3c:	6063      	str	r3, [r4, #4]
 8011a3e:	bf04      	itt	eq
 8011a40:	1949      	addeq	r1, r1, r5
 8011a42:	6021      	streq	r1, [r4, #0]
 8011a44:	6054      	str	r4, [r2, #4]
 8011a46:	e7ca      	b.n	80119de <_free_r+0x26>
 8011a48:	b003      	add	sp, #12
 8011a4a:	bd30      	pop	{r4, r5, pc}
 8011a4c:	200082d8 	.word	0x200082d8

08011a50 <sbrk_aligned>:
 8011a50:	b570      	push	{r4, r5, r6, lr}
 8011a52:	4e0e      	ldr	r6, [pc, #56]	; (8011a8c <sbrk_aligned+0x3c>)
 8011a54:	460c      	mov	r4, r1
 8011a56:	6831      	ldr	r1, [r6, #0]
 8011a58:	4605      	mov	r5, r0
 8011a5a:	b911      	cbnz	r1, 8011a62 <sbrk_aligned+0x12>
 8011a5c:	f000 fbfc 	bl	8012258 <_sbrk_r>
 8011a60:	6030      	str	r0, [r6, #0]
 8011a62:	4621      	mov	r1, r4
 8011a64:	4628      	mov	r0, r5
 8011a66:	f000 fbf7 	bl	8012258 <_sbrk_r>
 8011a6a:	1c43      	adds	r3, r0, #1
 8011a6c:	d00a      	beq.n	8011a84 <sbrk_aligned+0x34>
 8011a6e:	1cc4      	adds	r4, r0, #3
 8011a70:	f024 0403 	bic.w	r4, r4, #3
 8011a74:	42a0      	cmp	r0, r4
 8011a76:	d007      	beq.n	8011a88 <sbrk_aligned+0x38>
 8011a78:	1a21      	subs	r1, r4, r0
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	f000 fbec 	bl	8012258 <_sbrk_r>
 8011a80:	3001      	adds	r0, #1
 8011a82:	d101      	bne.n	8011a88 <sbrk_aligned+0x38>
 8011a84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011a88:	4620      	mov	r0, r4
 8011a8a:	bd70      	pop	{r4, r5, r6, pc}
 8011a8c:	200082dc 	.word	0x200082dc

08011a90 <_malloc_r>:
 8011a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a94:	1ccd      	adds	r5, r1, #3
 8011a96:	f025 0503 	bic.w	r5, r5, #3
 8011a9a:	3508      	adds	r5, #8
 8011a9c:	2d0c      	cmp	r5, #12
 8011a9e:	bf38      	it	cc
 8011aa0:	250c      	movcc	r5, #12
 8011aa2:	2d00      	cmp	r5, #0
 8011aa4:	4607      	mov	r7, r0
 8011aa6:	db01      	blt.n	8011aac <_malloc_r+0x1c>
 8011aa8:	42a9      	cmp	r1, r5
 8011aaa:	d905      	bls.n	8011ab8 <_malloc_r+0x28>
 8011aac:	230c      	movs	r3, #12
 8011aae:	603b      	str	r3, [r7, #0]
 8011ab0:	2600      	movs	r6, #0
 8011ab2:	4630      	mov	r0, r6
 8011ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ab8:	4e2e      	ldr	r6, [pc, #184]	; (8011b74 <_malloc_r+0xe4>)
 8011aba:	f000 ff91 	bl	80129e0 <__malloc_lock>
 8011abe:	6833      	ldr	r3, [r6, #0]
 8011ac0:	461c      	mov	r4, r3
 8011ac2:	bb34      	cbnz	r4, 8011b12 <_malloc_r+0x82>
 8011ac4:	4629      	mov	r1, r5
 8011ac6:	4638      	mov	r0, r7
 8011ac8:	f7ff ffc2 	bl	8011a50 <sbrk_aligned>
 8011acc:	1c43      	adds	r3, r0, #1
 8011ace:	4604      	mov	r4, r0
 8011ad0:	d14d      	bne.n	8011b6e <_malloc_r+0xde>
 8011ad2:	6834      	ldr	r4, [r6, #0]
 8011ad4:	4626      	mov	r6, r4
 8011ad6:	2e00      	cmp	r6, #0
 8011ad8:	d140      	bne.n	8011b5c <_malloc_r+0xcc>
 8011ada:	6823      	ldr	r3, [r4, #0]
 8011adc:	4631      	mov	r1, r6
 8011ade:	4638      	mov	r0, r7
 8011ae0:	eb04 0803 	add.w	r8, r4, r3
 8011ae4:	f000 fbb8 	bl	8012258 <_sbrk_r>
 8011ae8:	4580      	cmp	r8, r0
 8011aea:	d13a      	bne.n	8011b62 <_malloc_r+0xd2>
 8011aec:	6821      	ldr	r1, [r4, #0]
 8011aee:	3503      	adds	r5, #3
 8011af0:	1a6d      	subs	r5, r5, r1
 8011af2:	f025 0503 	bic.w	r5, r5, #3
 8011af6:	3508      	adds	r5, #8
 8011af8:	2d0c      	cmp	r5, #12
 8011afa:	bf38      	it	cc
 8011afc:	250c      	movcc	r5, #12
 8011afe:	4629      	mov	r1, r5
 8011b00:	4638      	mov	r0, r7
 8011b02:	f7ff ffa5 	bl	8011a50 <sbrk_aligned>
 8011b06:	3001      	adds	r0, #1
 8011b08:	d02b      	beq.n	8011b62 <_malloc_r+0xd2>
 8011b0a:	6823      	ldr	r3, [r4, #0]
 8011b0c:	442b      	add	r3, r5
 8011b0e:	6023      	str	r3, [r4, #0]
 8011b10:	e00e      	b.n	8011b30 <_malloc_r+0xa0>
 8011b12:	6822      	ldr	r2, [r4, #0]
 8011b14:	1b52      	subs	r2, r2, r5
 8011b16:	d41e      	bmi.n	8011b56 <_malloc_r+0xc6>
 8011b18:	2a0b      	cmp	r2, #11
 8011b1a:	d916      	bls.n	8011b4a <_malloc_r+0xba>
 8011b1c:	1961      	adds	r1, r4, r5
 8011b1e:	42a3      	cmp	r3, r4
 8011b20:	6025      	str	r5, [r4, #0]
 8011b22:	bf18      	it	ne
 8011b24:	6059      	strne	r1, [r3, #4]
 8011b26:	6863      	ldr	r3, [r4, #4]
 8011b28:	bf08      	it	eq
 8011b2a:	6031      	streq	r1, [r6, #0]
 8011b2c:	5162      	str	r2, [r4, r5]
 8011b2e:	604b      	str	r3, [r1, #4]
 8011b30:	4638      	mov	r0, r7
 8011b32:	f104 060b 	add.w	r6, r4, #11
 8011b36:	f000 ff59 	bl	80129ec <__malloc_unlock>
 8011b3a:	f026 0607 	bic.w	r6, r6, #7
 8011b3e:	1d23      	adds	r3, r4, #4
 8011b40:	1af2      	subs	r2, r6, r3
 8011b42:	d0b6      	beq.n	8011ab2 <_malloc_r+0x22>
 8011b44:	1b9b      	subs	r3, r3, r6
 8011b46:	50a3      	str	r3, [r4, r2]
 8011b48:	e7b3      	b.n	8011ab2 <_malloc_r+0x22>
 8011b4a:	6862      	ldr	r2, [r4, #4]
 8011b4c:	42a3      	cmp	r3, r4
 8011b4e:	bf0c      	ite	eq
 8011b50:	6032      	streq	r2, [r6, #0]
 8011b52:	605a      	strne	r2, [r3, #4]
 8011b54:	e7ec      	b.n	8011b30 <_malloc_r+0xa0>
 8011b56:	4623      	mov	r3, r4
 8011b58:	6864      	ldr	r4, [r4, #4]
 8011b5a:	e7b2      	b.n	8011ac2 <_malloc_r+0x32>
 8011b5c:	4634      	mov	r4, r6
 8011b5e:	6876      	ldr	r6, [r6, #4]
 8011b60:	e7b9      	b.n	8011ad6 <_malloc_r+0x46>
 8011b62:	230c      	movs	r3, #12
 8011b64:	603b      	str	r3, [r7, #0]
 8011b66:	4638      	mov	r0, r7
 8011b68:	f000 ff40 	bl	80129ec <__malloc_unlock>
 8011b6c:	e7a1      	b.n	8011ab2 <_malloc_r+0x22>
 8011b6e:	6025      	str	r5, [r4, #0]
 8011b70:	e7de      	b.n	8011b30 <_malloc_r+0xa0>
 8011b72:	bf00      	nop
 8011b74:	200082d8 	.word	0x200082d8

08011b78 <__sfputc_r>:
 8011b78:	6893      	ldr	r3, [r2, #8]
 8011b7a:	3b01      	subs	r3, #1
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	b410      	push	{r4}
 8011b80:	6093      	str	r3, [r2, #8]
 8011b82:	da08      	bge.n	8011b96 <__sfputc_r+0x1e>
 8011b84:	6994      	ldr	r4, [r2, #24]
 8011b86:	42a3      	cmp	r3, r4
 8011b88:	db01      	blt.n	8011b8e <__sfputc_r+0x16>
 8011b8a:	290a      	cmp	r1, #10
 8011b8c:	d103      	bne.n	8011b96 <__sfputc_r+0x1e>
 8011b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b92:	f000 bce7 	b.w	8012564 <__swbuf_r>
 8011b96:	6813      	ldr	r3, [r2, #0]
 8011b98:	1c58      	adds	r0, r3, #1
 8011b9a:	6010      	str	r0, [r2, #0]
 8011b9c:	7019      	strb	r1, [r3, #0]
 8011b9e:	4608      	mov	r0, r1
 8011ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ba4:	4770      	bx	lr

08011ba6 <__sfputs_r>:
 8011ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ba8:	4606      	mov	r6, r0
 8011baa:	460f      	mov	r7, r1
 8011bac:	4614      	mov	r4, r2
 8011bae:	18d5      	adds	r5, r2, r3
 8011bb0:	42ac      	cmp	r4, r5
 8011bb2:	d101      	bne.n	8011bb8 <__sfputs_r+0x12>
 8011bb4:	2000      	movs	r0, #0
 8011bb6:	e007      	b.n	8011bc8 <__sfputs_r+0x22>
 8011bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bbc:	463a      	mov	r2, r7
 8011bbe:	4630      	mov	r0, r6
 8011bc0:	f7ff ffda 	bl	8011b78 <__sfputc_r>
 8011bc4:	1c43      	adds	r3, r0, #1
 8011bc6:	d1f3      	bne.n	8011bb0 <__sfputs_r+0xa>
 8011bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011bcc <_vfiprintf_r>:
 8011bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd0:	460d      	mov	r5, r1
 8011bd2:	b09d      	sub	sp, #116	; 0x74
 8011bd4:	4614      	mov	r4, r2
 8011bd6:	4698      	mov	r8, r3
 8011bd8:	4606      	mov	r6, r0
 8011bda:	b118      	cbz	r0, 8011be4 <_vfiprintf_r+0x18>
 8011bdc:	6983      	ldr	r3, [r0, #24]
 8011bde:	b90b      	cbnz	r3, 8011be4 <_vfiprintf_r+0x18>
 8011be0:	f7ff fd40 	bl	8011664 <__sinit>
 8011be4:	4b89      	ldr	r3, [pc, #548]	; (8011e0c <_vfiprintf_r+0x240>)
 8011be6:	429d      	cmp	r5, r3
 8011be8:	d11b      	bne.n	8011c22 <_vfiprintf_r+0x56>
 8011bea:	6875      	ldr	r5, [r6, #4]
 8011bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bee:	07d9      	lsls	r1, r3, #31
 8011bf0:	d405      	bmi.n	8011bfe <_vfiprintf_r+0x32>
 8011bf2:	89ab      	ldrh	r3, [r5, #12]
 8011bf4:	059a      	lsls	r2, r3, #22
 8011bf6:	d402      	bmi.n	8011bfe <_vfiprintf_r+0x32>
 8011bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bfa:	f7ff feb4 	bl	8011966 <__retarget_lock_acquire_recursive>
 8011bfe:	89ab      	ldrh	r3, [r5, #12]
 8011c00:	071b      	lsls	r3, r3, #28
 8011c02:	d501      	bpl.n	8011c08 <_vfiprintf_r+0x3c>
 8011c04:	692b      	ldr	r3, [r5, #16]
 8011c06:	b9eb      	cbnz	r3, 8011c44 <_vfiprintf_r+0x78>
 8011c08:	4629      	mov	r1, r5
 8011c0a:	4630      	mov	r0, r6
 8011c0c:	f000 fd0e 	bl	801262c <__swsetup_r>
 8011c10:	b1c0      	cbz	r0, 8011c44 <_vfiprintf_r+0x78>
 8011c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c14:	07dc      	lsls	r4, r3, #31
 8011c16:	d50e      	bpl.n	8011c36 <_vfiprintf_r+0x6a>
 8011c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c1c:	b01d      	add	sp, #116	; 0x74
 8011c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c22:	4b7b      	ldr	r3, [pc, #492]	; (8011e10 <_vfiprintf_r+0x244>)
 8011c24:	429d      	cmp	r5, r3
 8011c26:	d101      	bne.n	8011c2c <_vfiprintf_r+0x60>
 8011c28:	68b5      	ldr	r5, [r6, #8]
 8011c2a:	e7df      	b.n	8011bec <_vfiprintf_r+0x20>
 8011c2c:	4b79      	ldr	r3, [pc, #484]	; (8011e14 <_vfiprintf_r+0x248>)
 8011c2e:	429d      	cmp	r5, r3
 8011c30:	bf08      	it	eq
 8011c32:	68f5      	ldreq	r5, [r6, #12]
 8011c34:	e7da      	b.n	8011bec <_vfiprintf_r+0x20>
 8011c36:	89ab      	ldrh	r3, [r5, #12]
 8011c38:	0598      	lsls	r0, r3, #22
 8011c3a:	d4ed      	bmi.n	8011c18 <_vfiprintf_r+0x4c>
 8011c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c3e:	f7ff fe93 	bl	8011968 <__retarget_lock_release_recursive>
 8011c42:	e7e9      	b.n	8011c18 <_vfiprintf_r+0x4c>
 8011c44:	2300      	movs	r3, #0
 8011c46:	9309      	str	r3, [sp, #36]	; 0x24
 8011c48:	2320      	movs	r3, #32
 8011c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c52:	2330      	movs	r3, #48	; 0x30
 8011c54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011e18 <_vfiprintf_r+0x24c>
 8011c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c5c:	f04f 0901 	mov.w	r9, #1
 8011c60:	4623      	mov	r3, r4
 8011c62:	469a      	mov	sl, r3
 8011c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c68:	b10a      	cbz	r2, 8011c6e <_vfiprintf_r+0xa2>
 8011c6a:	2a25      	cmp	r2, #37	; 0x25
 8011c6c:	d1f9      	bne.n	8011c62 <_vfiprintf_r+0x96>
 8011c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8011c72:	d00b      	beq.n	8011c8c <_vfiprintf_r+0xc0>
 8011c74:	465b      	mov	r3, fp
 8011c76:	4622      	mov	r2, r4
 8011c78:	4629      	mov	r1, r5
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	f7ff ff93 	bl	8011ba6 <__sfputs_r>
 8011c80:	3001      	adds	r0, #1
 8011c82:	f000 80aa 	beq.w	8011dda <_vfiprintf_r+0x20e>
 8011c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c88:	445a      	add	r2, fp
 8011c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8011c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f000 80a2 	beq.w	8011dda <_vfiprintf_r+0x20e>
 8011c96:	2300      	movs	r3, #0
 8011c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ca0:	f10a 0a01 	add.w	sl, sl, #1
 8011ca4:	9304      	str	r3, [sp, #16]
 8011ca6:	9307      	str	r3, [sp, #28]
 8011ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011cac:	931a      	str	r3, [sp, #104]	; 0x68
 8011cae:	4654      	mov	r4, sl
 8011cb0:	2205      	movs	r2, #5
 8011cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cb6:	4858      	ldr	r0, [pc, #352]	; (8011e18 <_vfiprintf_r+0x24c>)
 8011cb8:	f7ee fa92 	bl	80001e0 <memchr>
 8011cbc:	9a04      	ldr	r2, [sp, #16]
 8011cbe:	b9d8      	cbnz	r0, 8011cf8 <_vfiprintf_r+0x12c>
 8011cc0:	06d1      	lsls	r1, r2, #27
 8011cc2:	bf44      	itt	mi
 8011cc4:	2320      	movmi	r3, #32
 8011cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cca:	0713      	lsls	r3, r2, #28
 8011ccc:	bf44      	itt	mi
 8011cce:	232b      	movmi	r3, #43	; 0x2b
 8011cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8011cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8011cda:	d015      	beq.n	8011d08 <_vfiprintf_r+0x13c>
 8011cdc:	9a07      	ldr	r2, [sp, #28]
 8011cde:	4654      	mov	r4, sl
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	f04f 0c0a 	mov.w	ip, #10
 8011ce6:	4621      	mov	r1, r4
 8011ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cec:	3b30      	subs	r3, #48	; 0x30
 8011cee:	2b09      	cmp	r3, #9
 8011cf0:	d94e      	bls.n	8011d90 <_vfiprintf_r+0x1c4>
 8011cf2:	b1b0      	cbz	r0, 8011d22 <_vfiprintf_r+0x156>
 8011cf4:	9207      	str	r2, [sp, #28]
 8011cf6:	e014      	b.n	8011d22 <_vfiprintf_r+0x156>
 8011cf8:	eba0 0308 	sub.w	r3, r0, r8
 8011cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8011d00:	4313      	orrs	r3, r2
 8011d02:	9304      	str	r3, [sp, #16]
 8011d04:	46a2      	mov	sl, r4
 8011d06:	e7d2      	b.n	8011cae <_vfiprintf_r+0xe2>
 8011d08:	9b03      	ldr	r3, [sp, #12]
 8011d0a:	1d19      	adds	r1, r3, #4
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	9103      	str	r1, [sp, #12]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	bfbb      	ittet	lt
 8011d14:	425b      	neglt	r3, r3
 8011d16:	f042 0202 	orrlt.w	r2, r2, #2
 8011d1a:	9307      	strge	r3, [sp, #28]
 8011d1c:	9307      	strlt	r3, [sp, #28]
 8011d1e:	bfb8      	it	lt
 8011d20:	9204      	strlt	r2, [sp, #16]
 8011d22:	7823      	ldrb	r3, [r4, #0]
 8011d24:	2b2e      	cmp	r3, #46	; 0x2e
 8011d26:	d10c      	bne.n	8011d42 <_vfiprintf_r+0x176>
 8011d28:	7863      	ldrb	r3, [r4, #1]
 8011d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8011d2c:	d135      	bne.n	8011d9a <_vfiprintf_r+0x1ce>
 8011d2e:	9b03      	ldr	r3, [sp, #12]
 8011d30:	1d1a      	adds	r2, r3, #4
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	9203      	str	r2, [sp, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	bfb8      	it	lt
 8011d3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011d3e:	3402      	adds	r4, #2
 8011d40:	9305      	str	r3, [sp, #20]
 8011d42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011e28 <_vfiprintf_r+0x25c>
 8011d46:	7821      	ldrb	r1, [r4, #0]
 8011d48:	2203      	movs	r2, #3
 8011d4a:	4650      	mov	r0, sl
 8011d4c:	f7ee fa48 	bl	80001e0 <memchr>
 8011d50:	b140      	cbz	r0, 8011d64 <_vfiprintf_r+0x198>
 8011d52:	2340      	movs	r3, #64	; 0x40
 8011d54:	eba0 000a 	sub.w	r0, r0, sl
 8011d58:	fa03 f000 	lsl.w	r0, r3, r0
 8011d5c:	9b04      	ldr	r3, [sp, #16]
 8011d5e:	4303      	orrs	r3, r0
 8011d60:	3401      	adds	r4, #1
 8011d62:	9304      	str	r3, [sp, #16]
 8011d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d68:	482c      	ldr	r0, [pc, #176]	; (8011e1c <_vfiprintf_r+0x250>)
 8011d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d6e:	2206      	movs	r2, #6
 8011d70:	f7ee fa36 	bl	80001e0 <memchr>
 8011d74:	2800      	cmp	r0, #0
 8011d76:	d03f      	beq.n	8011df8 <_vfiprintf_r+0x22c>
 8011d78:	4b29      	ldr	r3, [pc, #164]	; (8011e20 <_vfiprintf_r+0x254>)
 8011d7a:	bb1b      	cbnz	r3, 8011dc4 <_vfiprintf_r+0x1f8>
 8011d7c:	9b03      	ldr	r3, [sp, #12]
 8011d7e:	3307      	adds	r3, #7
 8011d80:	f023 0307 	bic.w	r3, r3, #7
 8011d84:	3308      	adds	r3, #8
 8011d86:	9303      	str	r3, [sp, #12]
 8011d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d8a:	443b      	add	r3, r7
 8011d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8011d8e:	e767      	b.n	8011c60 <_vfiprintf_r+0x94>
 8011d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d94:	460c      	mov	r4, r1
 8011d96:	2001      	movs	r0, #1
 8011d98:	e7a5      	b.n	8011ce6 <_vfiprintf_r+0x11a>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	3401      	adds	r4, #1
 8011d9e:	9305      	str	r3, [sp, #20]
 8011da0:	4619      	mov	r1, r3
 8011da2:	f04f 0c0a 	mov.w	ip, #10
 8011da6:	4620      	mov	r0, r4
 8011da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dac:	3a30      	subs	r2, #48	; 0x30
 8011dae:	2a09      	cmp	r2, #9
 8011db0:	d903      	bls.n	8011dba <_vfiprintf_r+0x1ee>
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d0c5      	beq.n	8011d42 <_vfiprintf_r+0x176>
 8011db6:	9105      	str	r1, [sp, #20]
 8011db8:	e7c3      	b.n	8011d42 <_vfiprintf_r+0x176>
 8011dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dbe:	4604      	mov	r4, r0
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	e7f0      	b.n	8011da6 <_vfiprintf_r+0x1da>
 8011dc4:	ab03      	add	r3, sp, #12
 8011dc6:	9300      	str	r3, [sp, #0]
 8011dc8:	462a      	mov	r2, r5
 8011dca:	4b16      	ldr	r3, [pc, #88]	; (8011e24 <_vfiprintf_r+0x258>)
 8011dcc:	a904      	add	r1, sp, #16
 8011dce:	4630      	mov	r0, r6
 8011dd0:	f3af 8000 	nop.w
 8011dd4:	4607      	mov	r7, r0
 8011dd6:	1c78      	adds	r0, r7, #1
 8011dd8:	d1d6      	bne.n	8011d88 <_vfiprintf_r+0x1bc>
 8011dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ddc:	07d9      	lsls	r1, r3, #31
 8011dde:	d405      	bmi.n	8011dec <_vfiprintf_r+0x220>
 8011de0:	89ab      	ldrh	r3, [r5, #12]
 8011de2:	059a      	lsls	r2, r3, #22
 8011de4:	d402      	bmi.n	8011dec <_vfiprintf_r+0x220>
 8011de6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011de8:	f7ff fdbe 	bl	8011968 <__retarget_lock_release_recursive>
 8011dec:	89ab      	ldrh	r3, [r5, #12]
 8011dee:	065b      	lsls	r3, r3, #25
 8011df0:	f53f af12 	bmi.w	8011c18 <_vfiprintf_r+0x4c>
 8011df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011df6:	e711      	b.n	8011c1c <_vfiprintf_r+0x50>
 8011df8:	ab03      	add	r3, sp, #12
 8011dfa:	9300      	str	r3, [sp, #0]
 8011dfc:	462a      	mov	r2, r5
 8011dfe:	4b09      	ldr	r3, [pc, #36]	; (8011e24 <_vfiprintf_r+0x258>)
 8011e00:	a904      	add	r1, sp, #16
 8011e02:	4630      	mov	r0, r6
 8011e04:	f000 f880 	bl	8011f08 <_printf_i>
 8011e08:	e7e4      	b.n	8011dd4 <_vfiprintf_r+0x208>
 8011e0a:	bf00      	nop
 8011e0c:	08016a98 	.word	0x08016a98
 8011e10:	08016ab8 	.word	0x08016ab8
 8011e14:	08016a78 	.word	0x08016a78
 8011e18:	08016adc 	.word	0x08016adc
 8011e1c:	08016ae6 	.word	0x08016ae6
 8011e20:	00000000 	.word	0x00000000
 8011e24:	08011ba7 	.word	0x08011ba7
 8011e28:	08016ae2 	.word	0x08016ae2

08011e2c <_printf_common>:
 8011e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e30:	4616      	mov	r6, r2
 8011e32:	4699      	mov	r9, r3
 8011e34:	688a      	ldr	r2, [r1, #8]
 8011e36:	690b      	ldr	r3, [r1, #16]
 8011e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	bfb8      	it	lt
 8011e40:	4613      	movlt	r3, r2
 8011e42:	6033      	str	r3, [r6, #0]
 8011e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e48:	4607      	mov	r7, r0
 8011e4a:	460c      	mov	r4, r1
 8011e4c:	b10a      	cbz	r2, 8011e52 <_printf_common+0x26>
 8011e4e:	3301      	adds	r3, #1
 8011e50:	6033      	str	r3, [r6, #0]
 8011e52:	6823      	ldr	r3, [r4, #0]
 8011e54:	0699      	lsls	r1, r3, #26
 8011e56:	bf42      	ittt	mi
 8011e58:	6833      	ldrmi	r3, [r6, #0]
 8011e5a:	3302      	addmi	r3, #2
 8011e5c:	6033      	strmi	r3, [r6, #0]
 8011e5e:	6825      	ldr	r5, [r4, #0]
 8011e60:	f015 0506 	ands.w	r5, r5, #6
 8011e64:	d106      	bne.n	8011e74 <_printf_common+0x48>
 8011e66:	f104 0a19 	add.w	sl, r4, #25
 8011e6a:	68e3      	ldr	r3, [r4, #12]
 8011e6c:	6832      	ldr	r2, [r6, #0]
 8011e6e:	1a9b      	subs	r3, r3, r2
 8011e70:	42ab      	cmp	r3, r5
 8011e72:	dc26      	bgt.n	8011ec2 <_printf_common+0x96>
 8011e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e78:	1e13      	subs	r3, r2, #0
 8011e7a:	6822      	ldr	r2, [r4, #0]
 8011e7c:	bf18      	it	ne
 8011e7e:	2301      	movne	r3, #1
 8011e80:	0692      	lsls	r2, r2, #26
 8011e82:	d42b      	bmi.n	8011edc <_printf_common+0xb0>
 8011e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e88:	4649      	mov	r1, r9
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	47c0      	blx	r8
 8011e8e:	3001      	adds	r0, #1
 8011e90:	d01e      	beq.n	8011ed0 <_printf_common+0xa4>
 8011e92:	6823      	ldr	r3, [r4, #0]
 8011e94:	68e5      	ldr	r5, [r4, #12]
 8011e96:	6832      	ldr	r2, [r6, #0]
 8011e98:	f003 0306 	and.w	r3, r3, #6
 8011e9c:	2b04      	cmp	r3, #4
 8011e9e:	bf08      	it	eq
 8011ea0:	1aad      	subeq	r5, r5, r2
 8011ea2:	68a3      	ldr	r3, [r4, #8]
 8011ea4:	6922      	ldr	r2, [r4, #16]
 8011ea6:	bf0c      	ite	eq
 8011ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011eac:	2500      	movne	r5, #0
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	bfc4      	itt	gt
 8011eb2:	1a9b      	subgt	r3, r3, r2
 8011eb4:	18ed      	addgt	r5, r5, r3
 8011eb6:	2600      	movs	r6, #0
 8011eb8:	341a      	adds	r4, #26
 8011eba:	42b5      	cmp	r5, r6
 8011ebc:	d11a      	bne.n	8011ef4 <_printf_common+0xc8>
 8011ebe:	2000      	movs	r0, #0
 8011ec0:	e008      	b.n	8011ed4 <_printf_common+0xa8>
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	4652      	mov	r2, sl
 8011ec6:	4649      	mov	r1, r9
 8011ec8:	4638      	mov	r0, r7
 8011eca:	47c0      	blx	r8
 8011ecc:	3001      	adds	r0, #1
 8011ece:	d103      	bne.n	8011ed8 <_printf_common+0xac>
 8011ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed8:	3501      	adds	r5, #1
 8011eda:	e7c6      	b.n	8011e6a <_printf_common+0x3e>
 8011edc:	18e1      	adds	r1, r4, r3
 8011ede:	1c5a      	adds	r2, r3, #1
 8011ee0:	2030      	movs	r0, #48	; 0x30
 8011ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ee6:	4422      	add	r2, r4
 8011ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011ef0:	3302      	adds	r3, #2
 8011ef2:	e7c7      	b.n	8011e84 <_printf_common+0x58>
 8011ef4:	2301      	movs	r3, #1
 8011ef6:	4622      	mov	r2, r4
 8011ef8:	4649      	mov	r1, r9
 8011efa:	4638      	mov	r0, r7
 8011efc:	47c0      	blx	r8
 8011efe:	3001      	adds	r0, #1
 8011f00:	d0e6      	beq.n	8011ed0 <_printf_common+0xa4>
 8011f02:	3601      	adds	r6, #1
 8011f04:	e7d9      	b.n	8011eba <_printf_common+0x8e>
	...

08011f08 <_printf_i>:
 8011f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f0c:	7e0f      	ldrb	r7, [r1, #24]
 8011f0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011f10:	2f78      	cmp	r7, #120	; 0x78
 8011f12:	4691      	mov	r9, r2
 8011f14:	4680      	mov	r8, r0
 8011f16:	460c      	mov	r4, r1
 8011f18:	469a      	mov	sl, r3
 8011f1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011f1e:	d807      	bhi.n	8011f30 <_printf_i+0x28>
 8011f20:	2f62      	cmp	r7, #98	; 0x62
 8011f22:	d80a      	bhi.n	8011f3a <_printf_i+0x32>
 8011f24:	2f00      	cmp	r7, #0
 8011f26:	f000 80d8 	beq.w	80120da <_printf_i+0x1d2>
 8011f2a:	2f58      	cmp	r7, #88	; 0x58
 8011f2c:	f000 80a3 	beq.w	8012076 <_printf_i+0x16e>
 8011f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f38:	e03a      	b.n	8011fb0 <_printf_i+0xa8>
 8011f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f3e:	2b15      	cmp	r3, #21
 8011f40:	d8f6      	bhi.n	8011f30 <_printf_i+0x28>
 8011f42:	a101      	add	r1, pc, #4	; (adr r1, 8011f48 <_printf_i+0x40>)
 8011f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f48:	08011fa1 	.word	0x08011fa1
 8011f4c:	08011fb5 	.word	0x08011fb5
 8011f50:	08011f31 	.word	0x08011f31
 8011f54:	08011f31 	.word	0x08011f31
 8011f58:	08011f31 	.word	0x08011f31
 8011f5c:	08011f31 	.word	0x08011f31
 8011f60:	08011fb5 	.word	0x08011fb5
 8011f64:	08011f31 	.word	0x08011f31
 8011f68:	08011f31 	.word	0x08011f31
 8011f6c:	08011f31 	.word	0x08011f31
 8011f70:	08011f31 	.word	0x08011f31
 8011f74:	080120c1 	.word	0x080120c1
 8011f78:	08011fe5 	.word	0x08011fe5
 8011f7c:	080120a3 	.word	0x080120a3
 8011f80:	08011f31 	.word	0x08011f31
 8011f84:	08011f31 	.word	0x08011f31
 8011f88:	080120e3 	.word	0x080120e3
 8011f8c:	08011f31 	.word	0x08011f31
 8011f90:	08011fe5 	.word	0x08011fe5
 8011f94:	08011f31 	.word	0x08011f31
 8011f98:	08011f31 	.word	0x08011f31
 8011f9c:	080120ab 	.word	0x080120ab
 8011fa0:	682b      	ldr	r3, [r5, #0]
 8011fa2:	1d1a      	adds	r2, r3, #4
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	602a      	str	r2, [r5, #0]
 8011fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	e0a3      	b.n	80120fc <_printf_i+0x1f4>
 8011fb4:	6820      	ldr	r0, [r4, #0]
 8011fb6:	6829      	ldr	r1, [r5, #0]
 8011fb8:	0606      	lsls	r6, r0, #24
 8011fba:	f101 0304 	add.w	r3, r1, #4
 8011fbe:	d50a      	bpl.n	8011fd6 <_printf_i+0xce>
 8011fc0:	680e      	ldr	r6, [r1, #0]
 8011fc2:	602b      	str	r3, [r5, #0]
 8011fc4:	2e00      	cmp	r6, #0
 8011fc6:	da03      	bge.n	8011fd0 <_printf_i+0xc8>
 8011fc8:	232d      	movs	r3, #45	; 0x2d
 8011fca:	4276      	negs	r6, r6
 8011fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fd0:	485e      	ldr	r0, [pc, #376]	; (801214c <_printf_i+0x244>)
 8011fd2:	230a      	movs	r3, #10
 8011fd4:	e019      	b.n	801200a <_printf_i+0x102>
 8011fd6:	680e      	ldr	r6, [r1, #0]
 8011fd8:	602b      	str	r3, [r5, #0]
 8011fda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011fde:	bf18      	it	ne
 8011fe0:	b236      	sxthne	r6, r6
 8011fe2:	e7ef      	b.n	8011fc4 <_printf_i+0xbc>
 8011fe4:	682b      	ldr	r3, [r5, #0]
 8011fe6:	6820      	ldr	r0, [r4, #0]
 8011fe8:	1d19      	adds	r1, r3, #4
 8011fea:	6029      	str	r1, [r5, #0]
 8011fec:	0601      	lsls	r1, r0, #24
 8011fee:	d501      	bpl.n	8011ff4 <_printf_i+0xec>
 8011ff0:	681e      	ldr	r6, [r3, #0]
 8011ff2:	e002      	b.n	8011ffa <_printf_i+0xf2>
 8011ff4:	0646      	lsls	r6, r0, #25
 8011ff6:	d5fb      	bpl.n	8011ff0 <_printf_i+0xe8>
 8011ff8:	881e      	ldrh	r6, [r3, #0]
 8011ffa:	4854      	ldr	r0, [pc, #336]	; (801214c <_printf_i+0x244>)
 8011ffc:	2f6f      	cmp	r7, #111	; 0x6f
 8011ffe:	bf0c      	ite	eq
 8012000:	2308      	moveq	r3, #8
 8012002:	230a      	movne	r3, #10
 8012004:	2100      	movs	r1, #0
 8012006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801200a:	6865      	ldr	r5, [r4, #4]
 801200c:	60a5      	str	r5, [r4, #8]
 801200e:	2d00      	cmp	r5, #0
 8012010:	bfa2      	ittt	ge
 8012012:	6821      	ldrge	r1, [r4, #0]
 8012014:	f021 0104 	bicge.w	r1, r1, #4
 8012018:	6021      	strge	r1, [r4, #0]
 801201a:	b90e      	cbnz	r6, 8012020 <_printf_i+0x118>
 801201c:	2d00      	cmp	r5, #0
 801201e:	d04d      	beq.n	80120bc <_printf_i+0x1b4>
 8012020:	4615      	mov	r5, r2
 8012022:	fbb6 f1f3 	udiv	r1, r6, r3
 8012026:	fb03 6711 	mls	r7, r3, r1, r6
 801202a:	5dc7      	ldrb	r7, [r0, r7]
 801202c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012030:	4637      	mov	r7, r6
 8012032:	42bb      	cmp	r3, r7
 8012034:	460e      	mov	r6, r1
 8012036:	d9f4      	bls.n	8012022 <_printf_i+0x11a>
 8012038:	2b08      	cmp	r3, #8
 801203a:	d10b      	bne.n	8012054 <_printf_i+0x14c>
 801203c:	6823      	ldr	r3, [r4, #0]
 801203e:	07de      	lsls	r6, r3, #31
 8012040:	d508      	bpl.n	8012054 <_printf_i+0x14c>
 8012042:	6923      	ldr	r3, [r4, #16]
 8012044:	6861      	ldr	r1, [r4, #4]
 8012046:	4299      	cmp	r1, r3
 8012048:	bfde      	ittt	le
 801204a:	2330      	movle	r3, #48	; 0x30
 801204c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012050:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012054:	1b52      	subs	r2, r2, r5
 8012056:	6122      	str	r2, [r4, #16]
 8012058:	f8cd a000 	str.w	sl, [sp]
 801205c:	464b      	mov	r3, r9
 801205e:	aa03      	add	r2, sp, #12
 8012060:	4621      	mov	r1, r4
 8012062:	4640      	mov	r0, r8
 8012064:	f7ff fee2 	bl	8011e2c <_printf_common>
 8012068:	3001      	adds	r0, #1
 801206a:	d14c      	bne.n	8012106 <_printf_i+0x1fe>
 801206c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012070:	b004      	add	sp, #16
 8012072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012076:	4835      	ldr	r0, [pc, #212]	; (801214c <_printf_i+0x244>)
 8012078:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801207c:	6829      	ldr	r1, [r5, #0]
 801207e:	6823      	ldr	r3, [r4, #0]
 8012080:	f851 6b04 	ldr.w	r6, [r1], #4
 8012084:	6029      	str	r1, [r5, #0]
 8012086:	061d      	lsls	r5, r3, #24
 8012088:	d514      	bpl.n	80120b4 <_printf_i+0x1ac>
 801208a:	07df      	lsls	r7, r3, #31
 801208c:	bf44      	itt	mi
 801208e:	f043 0320 	orrmi.w	r3, r3, #32
 8012092:	6023      	strmi	r3, [r4, #0]
 8012094:	b91e      	cbnz	r6, 801209e <_printf_i+0x196>
 8012096:	6823      	ldr	r3, [r4, #0]
 8012098:	f023 0320 	bic.w	r3, r3, #32
 801209c:	6023      	str	r3, [r4, #0]
 801209e:	2310      	movs	r3, #16
 80120a0:	e7b0      	b.n	8012004 <_printf_i+0xfc>
 80120a2:	6823      	ldr	r3, [r4, #0]
 80120a4:	f043 0320 	orr.w	r3, r3, #32
 80120a8:	6023      	str	r3, [r4, #0]
 80120aa:	2378      	movs	r3, #120	; 0x78
 80120ac:	4828      	ldr	r0, [pc, #160]	; (8012150 <_printf_i+0x248>)
 80120ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80120b2:	e7e3      	b.n	801207c <_printf_i+0x174>
 80120b4:	0659      	lsls	r1, r3, #25
 80120b6:	bf48      	it	mi
 80120b8:	b2b6      	uxthmi	r6, r6
 80120ba:	e7e6      	b.n	801208a <_printf_i+0x182>
 80120bc:	4615      	mov	r5, r2
 80120be:	e7bb      	b.n	8012038 <_printf_i+0x130>
 80120c0:	682b      	ldr	r3, [r5, #0]
 80120c2:	6826      	ldr	r6, [r4, #0]
 80120c4:	6961      	ldr	r1, [r4, #20]
 80120c6:	1d18      	adds	r0, r3, #4
 80120c8:	6028      	str	r0, [r5, #0]
 80120ca:	0635      	lsls	r5, r6, #24
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	d501      	bpl.n	80120d4 <_printf_i+0x1cc>
 80120d0:	6019      	str	r1, [r3, #0]
 80120d2:	e002      	b.n	80120da <_printf_i+0x1d2>
 80120d4:	0670      	lsls	r0, r6, #25
 80120d6:	d5fb      	bpl.n	80120d0 <_printf_i+0x1c8>
 80120d8:	8019      	strh	r1, [r3, #0]
 80120da:	2300      	movs	r3, #0
 80120dc:	6123      	str	r3, [r4, #16]
 80120de:	4615      	mov	r5, r2
 80120e0:	e7ba      	b.n	8012058 <_printf_i+0x150>
 80120e2:	682b      	ldr	r3, [r5, #0]
 80120e4:	1d1a      	adds	r2, r3, #4
 80120e6:	602a      	str	r2, [r5, #0]
 80120e8:	681d      	ldr	r5, [r3, #0]
 80120ea:	6862      	ldr	r2, [r4, #4]
 80120ec:	2100      	movs	r1, #0
 80120ee:	4628      	mov	r0, r5
 80120f0:	f7ee f876 	bl	80001e0 <memchr>
 80120f4:	b108      	cbz	r0, 80120fa <_printf_i+0x1f2>
 80120f6:	1b40      	subs	r0, r0, r5
 80120f8:	6060      	str	r0, [r4, #4]
 80120fa:	6863      	ldr	r3, [r4, #4]
 80120fc:	6123      	str	r3, [r4, #16]
 80120fe:	2300      	movs	r3, #0
 8012100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012104:	e7a8      	b.n	8012058 <_printf_i+0x150>
 8012106:	6923      	ldr	r3, [r4, #16]
 8012108:	462a      	mov	r2, r5
 801210a:	4649      	mov	r1, r9
 801210c:	4640      	mov	r0, r8
 801210e:	47d0      	blx	sl
 8012110:	3001      	adds	r0, #1
 8012112:	d0ab      	beq.n	801206c <_printf_i+0x164>
 8012114:	6823      	ldr	r3, [r4, #0]
 8012116:	079b      	lsls	r3, r3, #30
 8012118:	d413      	bmi.n	8012142 <_printf_i+0x23a>
 801211a:	68e0      	ldr	r0, [r4, #12]
 801211c:	9b03      	ldr	r3, [sp, #12]
 801211e:	4298      	cmp	r0, r3
 8012120:	bfb8      	it	lt
 8012122:	4618      	movlt	r0, r3
 8012124:	e7a4      	b.n	8012070 <_printf_i+0x168>
 8012126:	2301      	movs	r3, #1
 8012128:	4632      	mov	r2, r6
 801212a:	4649      	mov	r1, r9
 801212c:	4640      	mov	r0, r8
 801212e:	47d0      	blx	sl
 8012130:	3001      	adds	r0, #1
 8012132:	d09b      	beq.n	801206c <_printf_i+0x164>
 8012134:	3501      	adds	r5, #1
 8012136:	68e3      	ldr	r3, [r4, #12]
 8012138:	9903      	ldr	r1, [sp, #12]
 801213a:	1a5b      	subs	r3, r3, r1
 801213c:	42ab      	cmp	r3, r5
 801213e:	dcf2      	bgt.n	8012126 <_printf_i+0x21e>
 8012140:	e7eb      	b.n	801211a <_printf_i+0x212>
 8012142:	2500      	movs	r5, #0
 8012144:	f104 0619 	add.w	r6, r4, #25
 8012148:	e7f5      	b.n	8012136 <_printf_i+0x22e>
 801214a:	bf00      	nop
 801214c:	08016aed 	.word	0x08016aed
 8012150:	08016afe 	.word	0x08016afe

08012154 <iprintf>:
 8012154:	b40f      	push	{r0, r1, r2, r3}
 8012156:	4b0a      	ldr	r3, [pc, #40]	; (8012180 <iprintf+0x2c>)
 8012158:	b513      	push	{r0, r1, r4, lr}
 801215a:	681c      	ldr	r4, [r3, #0]
 801215c:	b124      	cbz	r4, 8012168 <iprintf+0x14>
 801215e:	69a3      	ldr	r3, [r4, #24]
 8012160:	b913      	cbnz	r3, 8012168 <iprintf+0x14>
 8012162:	4620      	mov	r0, r4
 8012164:	f7ff fa7e 	bl	8011664 <__sinit>
 8012168:	ab05      	add	r3, sp, #20
 801216a:	9a04      	ldr	r2, [sp, #16]
 801216c:	68a1      	ldr	r1, [r4, #8]
 801216e:	9301      	str	r3, [sp, #4]
 8012170:	4620      	mov	r0, r4
 8012172:	f7ff fd2b 	bl	8011bcc <_vfiprintf_r>
 8012176:	b002      	add	sp, #8
 8012178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801217c:	b004      	add	sp, #16
 801217e:	4770      	bx	lr
 8012180:	200000b8 	.word	0x200000b8

08012184 <cleanup_glue>:
 8012184:	b538      	push	{r3, r4, r5, lr}
 8012186:	460c      	mov	r4, r1
 8012188:	6809      	ldr	r1, [r1, #0]
 801218a:	4605      	mov	r5, r0
 801218c:	b109      	cbz	r1, 8012192 <cleanup_glue+0xe>
 801218e:	f7ff fff9 	bl	8012184 <cleanup_glue>
 8012192:	4621      	mov	r1, r4
 8012194:	4628      	mov	r0, r5
 8012196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801219a:	f7ff bc0d 	b.w	80119b8 <_free_r>
	...

080121a0 <_reclaim_reent>:
 80121a0:	4b2c      	ldr	r3, [pc, #176]	; (8012254 <_reclaim_reent+0xb4>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	4283      	cmp	r3, r0
 80121a6:	b570      	push	{r4, r5, r6, lr}
 80121a8:	4604      	mov	r4, r0
 80121aa:	d051      	beq.n	8012250 <_reclaim_reent+0xb0>
 80121ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80121ae:	b143      	cbz	r3, 80121c2 <_reclaim_reent+0x22>
 80121b0:	68db      	ldr	r3, [r3, #12]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d14a      	bne.n	801224c <_reclaim_reent+0xac>
 80121b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121b8:	6819      	ldr	r1, [r3, #0]
 80121ba:	b111      	cbz	r1, 80121c2 <_reclaim_reent+0x22>
 80121bc:	4620      	mov	r0, r4
 80121be:	f7ff fbfb 	bl	80119b8 <_free_r>
 80121c2:	6961      	ldr	r1, [r4, #20]
 80121c4:	b111      	cbz	r1, 80121cc <_reclaim_reent+0x2c>
 80121c6:	4620      	mov	r0, r4
 80121c8:	f7ff fbf6 	bl	80119b8 <_free_r>
 80121cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80121ce:	b111      	cbz	r1, 80121d6 <_reclaim_reent+0x36>
 80121d0:	4620      	mov	r0, r4
 80121d2:	f7ff fbf1 	bl	80119b8 <_free_r>
 80121d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80121d8:	b111      	cbz	r1, 80121e0 <_reclaim_reent+0x40>
 80121da:	4620      	mov	r0, r4
 80121dc:	f7ff fbec 	bl	80119b8 <_free_r>
 80121e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80121e2:	b111      	cbz	r1, 80121ea <_reclaim_reent+0x4a>
 80121e4:	4620      	mov	r0, r4
 80121e6:	f7ff fbe7 	bl	80119b8 <_free_r>
 80121ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80121ec:	b111      	cbz	r1, 80121f4 <_reclaim_reent+0x54>
 80121ee:	4620      	mov	r0, r4
 80121f0:	f7ff fbe2 	bl	80119b8 <_free_r>
 80121f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80121f6:	b111      	cbz	r1, 80121fe <_reclaim_reent+0x5e>
 80121f8:	4620      	mov	r0, r4
 80121fa:	f7ff fbdd 	bl	80119b8 <_free_r>
 80121fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012200:	b111      	cbz	r1, 8012208 <_reclaim_reent+0x68>
 8012202:	4620      	mov	r0, r4
 8012204:	f7ff fbd8 	bl	80119b8 <_free_r>
 8012208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801220a:	b111      	cbz	r1, 8012212 <_reclaim_reent+0x72>
 801220c:	4620      	mov	r0, r4
 801220e:	f7ff fbd3 	bl	80119b8 <_free_r>
 8012212:	69a3      	ldr	r3, [r4, #24]
 8012214:	b1e3      	cbz	r3, 8012250 <_reclaim_reent+0xb0>
 8012216:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012218:	4620      	mov	r0, r4
 801221a:	4798      	blx	r3
 801221c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801221e:	b1b9      	cbz	r1, 8012250 <_reclaim_reent+0xb0>
 8012220:	4620      	mov	r0, r4
 8012222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012226:	f7ff bfad 	b.w	8012184 <cleanup_glue>
 801222a:	5949      	ldr	r1, [r1, r5]
 801222c:	b941      	cbnz	r1, 8012240 <_reclaim_reent+0xa0>
 801222e:	3504      	adds	r5, #4
 8012230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012232:	2d80      	cmp	r5, #128	; 0x80
 8012234:	68d9      	ldr	r1, [r3, #12]
 8012236:	d1f8      	bne.n	801222a <_reclaim_reent+0x8a>
 8012238:	4620      	mov	r0, r4
 801223a:	f7ff fbbd 	bl	80119b8 <_free_r>
 801223e:	e7ba      	b.n	80121b6 <_reclaim_reent+0x16>
 8012240:	680e      	ldr	r6, [r1, #0]
 8012242:	4620      	mov	r0, r4
 8012244:	f7ff fbb8 	bl	80119b8 <_free_r>
 8012248:	4631      	mov	r1, r6
 801224a:	e7ef      	b.n	801222c <_reclaim_reent+0x8c>
 801224c:	2500      	movs	r5, #0
 801224e:	e7ef      	b.n	8012230 <_reclaim_reent+0x90>
 8012250:	bd70      	pop	{r4, r5, r6, pc}
 8012252:	bf00      	nop
 8012254:	200000b8 	.word	0x200000b8

08012258 <_sbrk_r>:
 8012258:	b538      	push	{r3, r4, r5, lr}
 801225a:	4d06      	ldr	r5, [pc, #24]	; (8012274 <_sbrk_r+0x1c>)
 801225c:	2300      	movs	r3, #0
 801225e:	4604      	mov	r4, r0
 8012260:	4608      	mov	r0, r1
 8012262:	602b      	str	r3, [r5, #0]
 8012264:	f7f2 faf6 	bl	8004854 <_sbrk>
 8012268:	1c43      	adds	r3, r0, #1
 801226a:	d102      	bne.n	8012272 <_sbrk_r+0x1a>
 801226c:	682b      	ldr	r3, [r5, #0]
 801226e:	b103      	cbz	r3, 8012272 <_sbrk_r+0x1a>
 8012270:	6023      	str	r3, [r4, #0]
 8012272:	bd38      	pop	{r3, r4, r5, pc}
 8012274:	200082e0 	.word	0x200082e0

08012278 <siprintf>:
 8012278:	b40e      	push	{r1, r2, r3}
 801227a:	b500      	push	{lr}
 801227c:	b09c      	sub	sp, #112	; 0x70
 801227e:	ab1d      	add	r3, sp, #116	; 0x74
 8012280:	9002      	str	r0, [sp, #8]
 8012282:	9006      	str	r0, [sp, #24]
 8012284:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012288:	4809      	ldr	r0, [pc, #36]	; (80122b0 <siprintf+0x38>)
 801228a:	9107      	str	r1, [sp, #28]
 801228c:	9104      	str	r1, [sp, #16]
 801228e:	4909      	ldr	r1, [pc, #36]	; (80122b4 <siprintf+0x3c>)
 8012290:	f853 2b04 	ldr.w	r2, [r3], #4
 8012294:	9105      	str	r1, [sp, #20]
 8012296:	6800      	ldr	r0, [r0, #0]
 8012298:	9301      	str	r3, [sp, #4]
 801229a:	a902      	add	r1, sp, #8
 801229c:	f000 fc36 	bl	8012b0c <_svfiprintf_r>
 80122a0:	9b02      	ldr	r3, [sp, #8]
 80122a2:	2200      	movs	r2, #0
 80122a4:	701a      	strb	r2, [r3, #0]
 80122a6:	b01c      	add	sp, #112	; 0x70
 80122a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80122ac:	b003      	add	sp, #12
 80122ae:	4770      	bx	lr
 80122b0:	200000b8 	.word	0x200000b8
 80122b4:	ffff0208 	.word	0xffff0208

080122b8 <__sread>:
 80122b8:	b510      	push	{r4, lr}
 80122ba:	460c      	mov	r4, r1
 80122bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122c0:	f000 fd24 	bl	8012d0c <_read_r>
 80122c4:	2800      	cmp	r0, #0
 80122c6:	bfab      	itete	ge
 80122c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122ca:	89a3      	ldrhlt	r3, [r4, #12]
 80122cc:	181b      	addge	r3, r3, r0
 80122ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122d2:	bfac      	ite	ge
 80122d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80122d6:	81a3      	strhlt	r3, [r4, #12]
 80122d8:	bd10      	pop	{r4, pc}

080122da <__swrite>:
 80122da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122de:	461f      	mov	r7, r3
 80122e0:	898b      	ldrh	r3, [r1, #12]
 80122e2:	05db      	lsls	r3, r3, #23
 80122e4:	4605      	mov	r5, r0
 80122e6:	460c      	mov	r4, r1
 80122e8:	4616      	mov	r6, r2
 80122ea:	d505      	bpl.n	80122f8 <__swrite+0x1e>
 80122ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122f0:	2302      	movs	r3, #2
 80122f2:	2200      	movs	r2, #0
 80122f4:	f000 fae2 	bl	80128bc <_lseek_r>
 80122f8:	89a3      	ldrh	r3, [r4, #12]
 80122fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012302:	81a3      	strh	r3, [r4, #12]
 8012304:	4632      	mov	r2, r6
 8012306:	463b      	mov	r3, r7
 8012308:	4628      	mov	r0, r5
 801230a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801230e:	f000 b97b 	b.w	8012608 <_write_r>

08012312 <__sseek>:
 8012312:	b510      	push	{r4, lr}
 8012314:	460c      	mov	r4, r1
 8012316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801231a:	f000 facf 	bl	80128bc <_lseek_r>
 801231e:	1c43      	adds	r3, r0, #1
 8012320:	89a3      	ldrh	r3, [r4, #12]
 8012322:	bf15      	itete	ne
 8012324:	6560      	strne	r0, [r4, #84]	; 0x54
 8012326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801232a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801232e:	81a3      	strheq	r3, [r4, #12]
 8012330:	bf18      	it	ne
 8012332:	81a3      	strhne	r3, [r4, #12]
 8012334:	bd10      	pop	{r4, pc}

08012336 <__sclose>:
 8012336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801233a:	f000 b9ed 	b.w	8012718 <_close_r>

0801233e <strcat>:
 801233e:	b510      	push	{r4, lr}
 8012340:	4602      	mov	r2, r0
 8012342:	7814      	ldrb	r4, [r2, #0]
 8012344:	4613      	mov	r3, r2
 8012346:	3201      	adds	r2, #1
 8012348:	2c00      	cmp	r4, #0
 801234a:	d1fa      	bne.n	8012342 <strcat+0x4>
 801234c:	3b01      	subs	r3, #1
 801234e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012356:	2a00      	cmp	r2, #0
 8012358:	d1f9      	bne.n	801234e <strcat+0x10>
 801235a:	bd10      	pop	{r4, pc}

0801235c <strchr>:
 801235c:	b2c9      	uxtb	r1, r1
 801235e:	4603      	mov	r3, r0
 8012360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012364:	b11a      	cbz	r2, 801236e <strchr+0x12>
 8012366:	428a      	cmp	r2, r1
 8012368:	d1f9      	bne.n	801235e <strchr+0x2>
 801236a:	4618      	mov	r0, r3
 801236c:	4770      	bx	lr
 801236e:	2900      	cmp	r1, #0
 8012370:	bf18      	it	ne
 8012372:	2300      	movne	r3, #0
 8012374:	e7f9      	b.n	801236a <strchr+0xe>

08012376 <strcpy>:
 8012376:	4603      	mov	r3, r0
 8012378:	f811 2b01 	ldrb.w	r2, [r1], #1
 801237c:	f803 2b01 	strb.w	r2, [r3], #1
 8012380:	2a00      	cmp	r2, #0
 8012382:	d1f9      	bne.n	8012378 <strcpy+0x2>
 8012384:	4770      	bx	lr

08012386 <strncpy>:
 8012386:	b510      	push	{r4, lr}
 8012388:	3901      	subs	r1, #1
 801238a:	4603      	mov	r3, r0
 801238c:	b132      	cbz	r2, 801239c <strncpy+0x16>
 801238e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012392:	f803 4b01 	strb.w	r4, [r3], #1
 8012396:	3a01      	subs	r2, #1
 8012398:	2c00      	cmp	r4, #0
 801239a:	d1f7      	bne.n	801238c <strncpy+0x6>
 801239c:	441a      	add	r2, r3
 801239e:	2100      	movs	r1, #0
 80123a0:	4293      	cmp	r3, r2
 80123a2:	d100      	bne.n	80123a6 <strncpy+0x20>
 80123a4:	bd10      	pop	{r4, pc}
 80123a6:	f803 1b01 	strb.w	r1, [r3], #1
 80123aa:	e7f9      	b.n	80123a0 <strncpy+0x1a>

080123ac <strstr>:
 80123ac:	780a      	ldrb	r2, [r1, #0]
 80123ae:	b570      	push	{r4, r5, r6, lr}
 80123b0:	b96a      	cbnz	r2, 80123ce <strstr+0x22>
 80123b2:	bd70      	pop	{r4, r5, r6, pc}
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d109      	bne.n	80123cc <strstr+0x20>
 80123b8:	460c      	mov	r4, r1
 80123ba:	4605      	mov	r5, r0
 80123bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d0f6      	beq.n	80123b2 <strstr+0x6>
 80123c4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80123c8:	429e      	cmp	r6, r3
 80123ca:	d0f7      	beq.n	80123bc <strstr+0x10>
 80123cc:	3001      	adds	r0, #1
 80123ce:	7803      	ldrb	r3, [r0, #0]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d1ef      	bne.n	80123b4 <strstr+0x8>
 80123d4:	4618      	mov	r0, r3
 80123d6:	e7ec      	b.n	80123b2 <strstr+0x6>

080123d8 <_strtol_l.constprop.0>:
 80123d8:	2b01      	cmp	r3, #1
 80123da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123de:	d001      	beq.n	80123e4 <_strtol_l.constprop.0+0xc>
 80123e0:	2b24      	cmp	r3, #36	; 0x24
 80123e2:	d906      	bls.n	80123f2 <_strtol_l.constprop.0+0x1a>
 80123e4:	f7ff f8e0 	bl	80115a8 <__errno>
 80123e8:	2316      	movs	r3, #22
 80123ea:	6003      	str	r3, [r0, #0]
 80123ec:	2000      	movs	r0, #0
 80123ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80124d8 <_strtol_l.constprop.0+0x100>
 80123f6:	460d      	mov	r5, r1
 80123f8:	462e      	mov	r6, r5
 80123fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8012402:	f017 0708 	ands.w	r7, r7, #8
 8012406:	d1f7      	bne.n	80123f8 <_strtol_l.constprop.0+0x20>
 8012408:	2c2d      	cmp	r4, #45	; 0x2d
 801240a:	d132      	bne.n	8012472 <_strtol_l.constprop.0+0x9a>
 801240c:	782c      	ldrb	r4, [r5, #0]
 801240e:	2701      	movs	r7, #1
 8012410:	1cb5      	adds	r5, r6, #2
 8012412:	2b00      	cmp	r3, #0
 8012414:	d05b      	beq.n	80124ce <_strtol_l.constprop.0+0xf6>
 8012416:	2b10      	cmp	r3, #16
 8012418:	d109      	bne.n	801242e <_strtol_l.constprop.0+0x56>
 801241a:	2c30      	cmp	r4, #48	; 0x30
 801241c:	d107      	bne.n	801242e <_strtol_l.constprop.0+0x56>
 801241e:	782c      	ldrb	r4, [r5, #0]
 8012420:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012424:	2c58      	cmp	r4, #88	; 0x58
 8012426:	d14d      	bne.n	80124c4 <_strtol_l.constprop.0+0xec>
 8012428:	786c      	ldrb	r4, [r5, #1]
 801242a:	2310      	movs	r3, #16
 801242c:	3502      	adds	r5, #2
 801242e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012432:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012436:	f04f 0c00 	mov.w	ip, #0
 801243a:	fbb8 f9f3 	udiv	r9, r8, r3
 801243e:	4666      	mov	r6, ip
 8012440:	fb03 8a19 	mls	sl, r3, r9, r8
 8012444:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012448:	f1be 0f09 	cmp.w	lr, #9
 801244c:	d816      	bhi.n	801247c <_strtol_l.constprop.0+0xa4>
 801244e:	4674      	mov	r4, lr
 8012450:	42a3      	cmp	r3, r4
 8012452:	dd24      	ble.n	801249e <_strtol_l.constprop.0+0xc6>
 8012454:	f1bc 0f00 	cmp.w	ip, #0
 8012458:	db1e      	blt.n	8012498 <_strtol_l.constprop.0+0xc0>
 801245a:	45b1      	cmp	r9, r6
 801245c:	d31c      	bcc.n	8012498 <_strtol_l.constprop.0+0xc0>
 801245e:	d101      	bne.n	8012464 <_strtol_l.constprop.0+0x8c>
 8012460:	45a2      	cmp	sl, r4
 8012462:	db19      	blt.n	8012498 <_strtol_l.constprop.0+0xc0>
 8012464:	fb06 4603 	mla	r6, r6, r3, r4
 8012468:	f04f 0c01 	mov.w	ip, #1
 801246c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012470:	e7e8      	b.n	8012444 <_strtol_l.constprop.0+0x6c>
 8012472:	2c2b      	cmp	r4, #43	; 0x2b
 8012474:	bf04      	itt	eq
 8012476:	782c      	ldrbeq	r4, [r5, #0]
 8012478:	1cb5      	addeq	r5, r6, #2
 801247a:	e7ca      	b.n	8012412 <_strtol_l.constprop.0+0x3a>
 801247c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012480:	f1be 0f19 	cmp.w	lr, #25
 8012484:	d801      	bhi.n	801248a <_strtol_l.constprop.0+0xb2>
 8012486:	3c37      	subs	r4, #55	; 0x37
 8012488:	e7e2      	b.n	8012450 <_strtol_l.constprop.0+0x78>
 801248a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801248e:	f1be 0f19 	cmp.w	lr, #25
 8012492:	d804      	bhi.n	801249e <_strtol_l.constprop.0+0xc6>
 8012494:	3c57      	subs	r4, #87	; 0x57
 8012496:	e7db      	b.n	8012450 <_strtol_l.constprop.0+0x78>
 8012498:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801249c:	e7e6      	b.n	801246c <_strtol_l.constprop.0+0x94>
 801249e:	f1bc 0f00 	cmp.w	ip, #0
 80124a2:	da05      	bge.n	80124b0 <_strtol_l.constprop.0+0xd8>
 80124a4:	2322      	movs	r3, #34	; 0x22
 80124a6:	6003      	str	r3, [r0, #0]
 80124a8:	4646      	mov	r6, r8
 80124aa:	b942      	cbnz	r2, 80124be <_strtol_l.constprop.0+0xe6>
 80124ac:	4630      	mov	r0, r6
 80124ae:	e79e      	b.n	80123ee <_strtol_l.constprop.0+0x16>
 80124b0:	b107      	cbz	r7, 80124b4 <_strtol_l.constprop.0+0xdc>
 80124b2:	4276      	negs	r6, r6
 80124b4:	2a00      	cmp	r2, #0
 80124b6:	d0f9      	beq.n	80124ac <_strtol_l.constprop.0+0xd4>
 80124b8:	f1bc 0f00 	cmp.w	ip, #0
 80124bc:	d000      	beq.n	80124c0 <_strtol_l.constprop.0+0xe8>
 80124be:	1e69      	subs	r1, r5, #1
 80124c0:	6011      	str	r1, [r2, #0]
 80124c2:	e7f3      	b.n	80124ac <_strtol_l.constprop.0+0xd4>
 80124c4:	2430      	movs	r4, #48	; 0x30
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d1b1      	bne.n	801242e <_strtol_l.constprop.0+0x56>
 80124ca:	2308      	movs	r3, #8
 80124cc:	e7af      	b.n	801242e <_strtol_l.constprop.0+0x56>
 80124ce:	2c30      	cmp	r4, #48	; 0x30
 80124d0:	d0a5      	beq.n	801241e <_strtol_l.constprop.0+0x46>
 80124d2:	230a      	movs	r3, #10
 80124d4:	e7ab      	b.n	801242e <_strtol_l.constprop.0+0x56>
 80124d6:	bf00      	nop
 80124d8:	08016b10 	.word	0x08016b10

080124dc <strtol>:
 80124dc:	4613      	mov	r3, r2
 80124de:	460a      	mov	r2, r1
 80124e0:	4601      	mov	r1, r0
 80124e2:	4802      	ldr	r0, [pc, #8]	; (80124ec <strtol+0x10>)
 80124e4:	6800      	ldr	r0, [r0, #0]
 80124e6:	f7ff bf77 	b.w	80123d8 <_strtol_l.constprop.0>
 80124ea:	bf00      	nop
 80124ec:	200000b8 	.word	0x200000b8

080124f0 <_vsniprintf_r>:
 80124f0:	b530      	push	{r4, r5, lr}
 80124f2:	4614      	mov	r4, r2
 80124f4:	2c00      	cmp	r4, #0
 80124f6:	b09b      	sub	sp, #108	; 0x6c
 80124f8:	4605      	mov	r5, r0
 80124fa:	461a      	mov	r2, r3
 80124fc:	da05      	bge.n	801250a <_vsniprintf_r+0x1a>
 80124fe:	238b      	movs	r3, #139	; 0x8b
 8012500:	6003      	str	r3, [r0, #0]
 8012502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012506:	b01b      	add	sp, #108	; 0x6c
 8012508:	bd30      	pop	{r4, r5, pc}
 801250a:	f44f 7302 	mov.w	r3, #520	; 0x208
 801250e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012512:	bf14      	ite	ne
 8012514:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8012518:	4623      	moveq	r3, r4
 801251a:	9302      	str	r3, [sp, #8]
 801251c:	9305      	str	r3, [sp, #20]
 801251e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012522:	9100      	str	r1, [sp, #0]
 8012524:	9104      	str	r1, [sp, #16]
 8012526:	f8ad 300e 	strh.w	r3, [sp, #14]
 801252a:	4669      	mov	r1, sp
 801252c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801252e:	f000 faed 	bl	8012b0c <_svfiprintf_r>
 8012532:	1c43      	adds	r3, r0, #1
 8012534:	bfbc      	itt	lt
 8012536:	238b      	movlt	r3, #139	; 0x8b
 8012538:	602b      	strlt	r3, [r5, #0]
 801253a:	2c00      	cmp	r4, #0
 801253c:	d0e3      	beq.n	8012506 <_vsniprintf_r+0x16>
 801253e:	9b00      	ldr	r3, [sp, #0]
 8012540:	2200      	movs	r2, #0
 8012542:	701a      	strb	r2, [r3, #0]
 8012544:	e7df      	b.n	8012506 <_vsniprintf_r+0x16>
	...

08012548 <vsniprintf>:
 8012548:	b507      	push	{r0, r1, r2, lr}
 801254a:	9300      	str	r3, [sp, #0]
 801254c:	4613      	mov	r3, r2
 801254e:	460a      	mov	r2, r1
 8012550:	4601      	mov	r1, r0
 8012552:	4803      	ldr	r0, [pc, #12]	; (8012560 <vsniprintf+0x18>)
 8012554:	6800      	ldr	r0, [r0, #0]
 8012556:	f7ff ffcb 	bl	80124f0 <_vsniprintf_r>
 801255a:	b003      	add	sp, #12
 801255c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012560:	200000b8 	.word	0x200000b8

08012564 <__swbuf_r>:
 8012564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012566:	460e      	mov	r6, r1
 8012568:	4614      	mov	r4, r2
 801256a:	4605      	mov	r5, r0
 801256c:	b118      	cbz	r0, 8012576 <__swbuf_r+0x12>
 801256e:	6983      	ldr	r3, [r0, #24]
 8012570:	b90b      	cbnz	r3, 8012576 <__swbuf_r+0x12>
 8012572:	f7ff f877 	bl	8011664 <__sinit>
 8012576:	4b21      	ldr	r3, [pc, #132]	; (80125fc <__swbuf_r+0x98>)
 8012578:	429c      	cmp	r4, r3
 801257a:	d12b      	bne.n	80125d4 <__swbuf_r+0x70>
 801257c:	686c      	ldr	r4, [r5, #4]
 801257e:	69a3      	ldr	r3, [r4, #24]
 8012580:	60a3      	str	r3, [r4, #8]
 8012582:	89a3      	ldrh	r3, [r4, #12]
 8012584:	071a      	lsls	r2, r3, #28
 8012586:	d52f      	bpl.n	80125e8 <__swbuf_r+0x84>
 8012588:	6923      	ldr	r3, [r4, #16]
 801258a:	b36b      	cbz	r3, 80125e8 <__swbuf_r+0x84>
 801258c:	6923      	ldr	r3, [r4, #16]
 801258e:	6820      	ldr	r0, [r4, #0]
 8012590:	1ac0      	subs	r0, r0, r3
 8012592:	6963      	ldr	r3, [r4, #20]
 8012594:	b2f6      	uxtb	r6, r6
 8012596:	4283      	cmp	r3, r0
 8012598:	4637      	mov	r7, r6
 801259a:	dc04      	bgt.n	80125a6 <__swbuf_r+0x42>
 801259c:	4621      	mov	r1, r4
 801259e:	4628      	mov	r0, r5
 80125a0:	f000 f950 	bl	8012844 <_fflush_r>
 80125a4:	bb30      	cbnz	r0, 80125f4 <__swbuf_r+0x90>
 80125a6:	68a3      	ldr	r3, [r4, #8]
 80125a8:	3b01      	subs	r3, #1
 80125aa:	60a3      	str	r3, [r4, #8]
 80125ac:	6823      	ldr	r3, [r4, #0]
 80125ae:	1c5a      	adds	r2, r3, #1
 80125b0:	6022      	str	r2, [r4, #0]
 80125b2:	701e      	strb	r6, [r3, #0]
 80125b4:	6963      	ldr	r3, [r4, #20]
 80125b6:	3001      	adds	r0, #1
 80125b8:	4283      	cmp	r3, r0
 80125ba:	d004      	beq.n	80125c6 <__swbuf_r+0x62>
 80125bc:	89a3      	ldrh	r3, [r4, #12]
 80125be:	07db      	lsls	r3, r3, #31
 80125c0:	d506      	bpl.n	80125d0 <__swbuf_r+0x6c>
 80125c2:	2e0a      	cmp	r6, #10
 80125c4:	d104      	bne.n	80125d0 <__swbuf_r+0x6c>
 80125c6:	4621      	mov	r1, r4
 80125c8:	4628      	mov	r0, r5
 80125ca:	f000 f93b 	bl	8012844 <_fflush_r>
 80125ce:	b988      	cbnz	r0, 80125f4 <__swbuf_r+0x90>
 80125d0:	4638      	mov	r0, r7
 80125d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125d4:	4b0a      	ldr	r3, [pc, #40]	; (8012600 <__swbuf_r+0x9c>)
 80125d6:	429c      	cmp	r4, r3
 80125d8:	d101      	bne.n	80125de <__swbuf_r+0x7a>
 80125da:	68ac      	ldr	r4, [r5, #8]
 80125dc:	e7cf      	b.n	801257e <__swbuf_r+0x1a>
 80125de:	4b09      	ldr	r3, [pc, #36]	; (8012604 <__swbuf_r+0xa0>)
 80125e0:	429c      	cmp	r4, r3
 80125e2:	bf08      	it	eq
 80125e4:	68ec      	ldreq	r4, [r5, #12]
 80125e6:	e7ca      	b.n	801257e <__swbuf_r+0x1a>
 80125e8:	4621      	mov	r1, r4
 80125ea:	4628      	mov	r0, r5
 80125ec:	f000 f81e 	bl	801262c <__swsetup_r>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	d0cb      	beq.n	801258c <__swbuf_r+0x28>
 80125f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80125f8:	e7ea      	b.n	80125d0 <__swbuf_r+0x6c>
 80125fa:	bf00      	nop
 80125fc:	08016a98 	.word	0x08016a98
 8012600:	08016ab8 	.word	0x08016ab8
 8012604:	08016a78 	.word	0x08016a78

08012608 <_write_r>:
 8012608:	b538      	push	{r3, r4, r5, lr}
 801260a:	4d07      	ldr	r5, [pc, #28]	; (8012628 <_write_r+0x20>)
 801260c:	4604      	mov	r4, r0
 801260e:	4608      	mov	r0, r1
 8012610:	4611      	mov	r1, r2
 8012612:	2200      	movs	r2, #0
 8012614:	602a      	str	r2, [r5, #0]
 8012616:	461a      	mov	r2, r3
 8012618:	f7ee ff98 	bl	800154c <_write>
 801261c:	1c43      	adds	r3, r0, #1
 801261e:	d102      	bne.n	8012626 <_write_r+0x1e>
 8012620:	682b      	ldr	r3, [r5, #0]
 8012622:	b103      	cbz	r3, 8012626 <_write_r+0x1e>
 8012624:	6023      	str	r3, [r4, #0]
 8012626:	bd38      	pop	{r3, r4, r5, pc}
 8012628:	200082e0 	.word	0x200082e0

0801262c <__swsetup_r>:
 801262c:	4b32      	ldr	r3, [pc, #200]	; (80126f8 <__swsetup_r+0xcc>)
 801262e:	b570      	push	{r4, r5, r6, lr}
 8012630:	681d      	ldr	r5, [r3, #0]
 8012632:	4606      	mov	r6, r0
 8012634:	460c      	mov	r4, r1
 8012636:	b125      	cbz	r5, 8012642 <__swsetup_r+0x16>
 8012638:	69ab      	ldr	r3, [r5, #24]
 801263a:	b913      	cbnz	r3, 8012642 <__swsetup_r+0x16>
 801263c:	4628      	mov	r0, r5
 801263e:	f7ff f811 	bl	8011664 <__sinit>
 8012642:	4b2e      	ldr	r3, [pc, #184]	; (80126fc <__swsetup_r+0xd0>)
 8012644:	429c      	cmp	r4, r3
 8012646:	d10f      	bne.n	8012668 <__swsetup_r+0x3c>
 8012648:	686c      	ldr	r4, [r5, #4]
 801264a:	89a3      	ldrh	r3, [r4, #12]
 801264c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012650:	0719      	lsls	r1, r3, #28
 8012652:	d42c      	bmi.n	80126ae <__swsetup_r+0x82>
 8012654:	06dd      	lsls	r5, r3, #27
 8012656:	d411      	bmi.n	801267c <__swsetup_r+0x50>
 8012658:	2309      	movs	r3, #9
 801265a:	6033      	str	r3, [r6, #0]
 801265c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012660:	81a3      	strh	r3, [r4, #12]
 8012662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012666:	e03e      	b.n	80126e6 <__swsetup_r+0xba>
 8012668:	4b25      	ldr	r3, [pc, #148]	; (8012700 <__swsetup_r+0xd4>)
 801266a:	429c      	cmp	r4, r3
 801266c:	d101      	bne.n	8012672 <__swsetup_r+0x46>
 801266e:	68ac      	ldr	r4, [r5, #8]
 8012670:	e7eb      	b.n	801264a <__swsetup_r+0x1e>
 8012672:	4b24      	ldr	r3, [pc, #144]	; (8012704 <__swsetup_r+0xd8>)
 8012674:	429c      	cmp	r4, r3
 8012676:	bf08      	it	eq
 8012678:	68ec      	ldreq	r4, [r5, #12]
 801267a:	e7e6      	b.n	801264a <__swsetup_r+0x1e>
 801267c:	0758      	lsls	r0, r3, #29
 801267e:	d512      	bpl.n	80126a6 <__swsetup_r+0x7a>
 8012680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012682:	b141      	cbz	r1, 8012696 <__swsetup_r+0x6a>
 8012684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012688:	4299      	cmp	r1, r3
 801268a:	d002      	beq.n	8012692 <__swsetup_r+0x66>
 801268c:	4630      	mov	r0, r6
 801268e:	f7ff f993 	bl	80119b8 <_free_r>
 8012692:	2300      	movs	r3, #0
 8012694:	6363      	str	r3, [r4, #52]	; 0x34
 8012696:	89a3      	ldrh	r3, [r4, #12]
 8012698:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801269c:	81a3      	strh	r3, [r4, #12]
 801269e:	2300      	movs	r3, #0
 80126a0:	6063      	str	r3, [r4, #4]
 80126a2:	6923      	ldr	r3, [r4, #16]
 80126a4:	6023      	str	r3, [r4, #0]
 80126a6:	89a3      	ldrh	r3, [r4, #12]
 80126a8:	f043 0308 	orr.w	r3, r3, #8
 80126ac:	81a3      	strh	r3, [r4, #12]
 80126ae:	6923      	ldr	r3, [r4, #16]
 80126b0:	b94b      	cbnz	r3, 80126c6 <__swsetup_r+0x9a>
 80126b2:	89a3      	ldrh	r3, [r4, #12]
 80126b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80126b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126bc:	d003      	beq.n	80126c6 <__swsetup_r+0x9a>
 80126be:	4621      	mov	r1, r4
 80126c0:	4630      	mov	r0, r6
 80126c2:	f000 f933 	bl	801292c <__smakebuf_r>
 80126c6:	89a0      	ldrh	r0, [r4, #12]
 80126c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126cc:	f010 0301 	ands.w	r3, r0, #1
 80126d0:	d00a      	beq.n	80126e8 <__swsetup_r+0xbc>
 80126d2:	2300      	movs	r3, #0
 80126d4:	60a3      	str	r3, [r4, #8]
 80126d6:	6963      	ldr	r3, [r4, #20]
 80126d8:	425b      	negs	r3, r3
 80126da:	61a3      	str	r3, [r4, #24]
 80126dc:	6923      	ldr	r3, [r4, #16]
 80126de:	b943      	cbnz	r3, 80126f2 <__swsetup_r+0xc6>
 80126e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80126e4:	d1ba      	bne.n	801265c <__swsetup_r+0x30>
 80126e6:	bd70      	pop	{r4, r5, r6, pc}
 80126e8:	0781      	lsls	r1, r0, #30
 80126ea:	bf58      	it	pl
 80126ec:	6963      	ldrpl	r3, [r4, #20]
 80126ee:	60a3      	str	r3, [r4, #8]
 80126f0:	e7f4      	b.n	80126dc <__swsetup_r+0xb0>
 80126f2:	2000      	movs	r0, #0
 80126f4:	e7f7      	b.n	80126e6 <__swsetup_r+0xba>
 80126f6:	bf00      	nop
 80126f8:	200000b8 	.word	0x200000b8
 80126fc:	08016a98 	.word	0x08016a98
 8012700:	08016ab8 	.word	0x08016ab8
 8012704:	08016a78 	.word	0x08016a78

08012708 <abort>:
 8012708:	b508      	push	{r3, lr}
 801270a:	2006      	movs	r0, #6
 801270c:	f000 fb38 	bl	8012d80 <raise>
 8012710:	2001      	movs	r0, #1
 8012712:	f7f2 f843 	bl	800479c <_exit>
	...

08012718 <_close_r>:
 8012718:	b538      	push	{r3, r4, r5, lr}
 801271a:	4d06      	ldr	r5, [pc, #24]	; (8012734 <_close_r+0x1c>)
 801271c:	2300      	movs	r3, #0
 801271e:	4604      	mov	r4, r0
 8012720:	4608      	mov	r0, r1
 8012722:	602b      	str	r3, [r5, #0]
 8012724:	f7f2 f861 	bl	80047ea <_close>
 8012728:	1c43      	adds	r3, r0, #1
 801272a:	d102      	bne.n	8012732 <_close_r+0x1a>
 801272c:	682b      	ldr	r3, [r5, #0]
 801272e:	b103      	cbz	r3, 8012732 <_close_r+0x1a>
 8012730:	6023      	str	r3, [r4, #0]
 8012732:	bd38      	pop	{r3, r4, r5, pc}
 8012734:	200082e0 	.word	0x200082e0

08012738 <__sflush_r>:
 8012738:	898a      	ldrh	r2, [r1, #12]
 801273a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801273e:	4605      	mov	r5, r0
 8012740:	0710      	lsls	r0, r2, #28
 8012742:	460c      	mov	r4, r1
 8012744:	d458      	bmi.n	80127f8 <__sflush_r+0xc0>
 8012746:	684b      	ldr	r3, [r1, #4]
 8012748:	2b00      	cmp	r3, #0
 801274a:	dc05      	bgt.n	8012758 <__sflush_r+0x20>
 801274c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801274e:	2b00      	cmp	r3, #0
 8012750:	dc02      	bgt.n	8012758 <__sflush_r+0x20>
 8012752:	2000      	movs	r0, #0
 8012754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801275a:	2e00      	cmp	r6, #0
 801275c:	d0f9      	beq.n	8012752 <__sflush_r+0x1a>
 801275e:	2300      	movs	r3, #0
 8012760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012764:	682f      	ldr	r7, [r5, #0]
 8012766:	602b      	str	r3, [r5, #0]
 8012768:	d032      	beq.n	80127d0 <__sflush_r+0x98>
 801276a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801276c:	89a3      	ldrh	r3, [r4, #12]
 801276e:	075a      	lsls	r2, r3, #29
 8012770:	d505      	bpl.n	801277e <__sflush_r+0x46>
 8012772:	6863      	ldr	r3, [r4, #4]
 8012774:	1ac0      	subs	r0, r0, r3
 8012776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012778:	b10b      	cbz	r3, 801277e <__sflush_r+0x46>
 801277a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801277c:	1ac0      	subs	r0, r0, r3
 801277e:	2300      	movs	r3, #0
 8012780:	4602      	mov	r2, r0
 8012782:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012784:	6a21      	ldr	r1, [r4, #32]
 8012786:	4628      	mov	r0, r5
 8012788:	47b0      	blx	r6
 801278a:	1c43      	adds	r3, r0, #1
 801278c:	89a3      	ldrh	r3, [r4, #12]
 801278e:	d106      	bne.n	801279e <__sflush_r+0x66>
 8012790:	6829      	ldr	r1, [r5, #0]
 8012792:	291d      	cmp	r1, #29
 8012794:	d82c      	bhi.n	80127f0 <__sflush_r+0xb8>
 8012796:	4a2a      	ldr	r2, [pc, #168]	; (8012840 <__sflush_r+0x108>)
 8012798:	40ca      	lsrs	r2, r1
 801279a:	07d6      	lsls	r6, r2, #31
 801279c:	d528      	bpl.n	80127f0 <__sflush_r+0xb8>
 801279e:	2200      	movs	r2, #0
 80127a0:	6062      	str	r2, [r4, #4]
 80127a2:	04d9      	lsls	r1, r3, #19
 80127a4:	6922      	ldr	r2, [r4, #16]
 80127a6:	6022      	str	r2, [r4, #0]
 80127a8:	d504      	bpl.n	80127b4 <__sflush_r+0x7c>
 80127aa:	1c42      	adds	r2, r0, #1
 80127ac:	d101      	bne.n	80127b2 <__sflush_r+0x7a>
 80127ae:	682b      	ldr	r3, [r5, #0]
 80127b0:	b903      	cbnz	r3, 80127b4 <__sflush_r+0x7c>
 80127b2:	6560      	str	r0, [r4, #84]	; 0x54
 80127b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127b6:	602f      	str	r7, [r5, #0]
 80127b8:	2900      	cmp	r1, #0
 80127ba:	d0ca      	beq.n	8012752 <__sflush_r+0x1a>
 80127bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127c0:	4299      	cmp	r1, r3
 80127c2:	d002      	beq.n	80127ca <__sflush_r+0x92>
 80127c4:	4628      	mov	r0, r5
 80127c6:	f7ff f8f7 	bl	80119b8 <_free_r>
 80127ca:	2000      	movs	r0, #0
 80127cc:	6360      	str	r0, [r4, #52]	; 0x34
 80127ce:	e7c1      	b.n	8012754 <__sflush_r+0x1c>
 80127d0:	6a21      	ldr	r1, [r4, #32]
 80127d2:	2301      	movs	r3, #1
 80127d4:	4628      	mov	r0, r5
 80127d6:	47b0      	blx	r6
 80127d8:	1c41      	adds	r1, r0, #1
 80127da:	d1c7      	bne.n	801276c <__sflush_r+0x34>
 80127dc:	682b      	ldr	r3, [r5, #0]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d0c4      	beq.n	801276c <__sflush_r+0x34>
 80127e2:	2b1d      	cmp	r3, #29
 80127e4:	d001      	beq.n	80127ea <__sflush_r+0xb2>
 80127e6:	2b16      	cmp	r3, #22
 80127e8:	d101      	bne.n	80127ee <__sflush_r+0xb6>
 80127ea:	602f      	str	r7, [r5, #0]
 80127ec:	e7b1      	b.n	8012752 <__sflush_r+0x1a>
 80127ee:	89a3      	ldrh	r3, [r4, #12]
 80127f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127f4:	81a3      	strh	r3, [r4, #12]
 80127f6:	e7ad      	b.n	8012754 <__sflush_r+0x1c>
 80127f8:	690f      	ldr	r7, [r1, #16]
 80127fa:	2f00      	cmp	r7, #0
 80127fc:	d0a9      	beq.n	8012752 <__sflush_r+0x1a>
 80127fe:	0793      	lsls	r3, r2, #30
 8012800:	680e      	ldr	r6, [r1, #0]
 8012802:	bf08      	it	eq
 8012804:	694b      	ldreq	r3, [r1, #20]
 8012806:	600f      	str	r7, [r1, #0]
 8012808:	bf18      	it	ne
 801280a:	2300      	movne	r3, #0
 801280c:	eba6 0807 	sub.w	r8, r6, r7
 8012810:	608b      	str	r3, [r1, #8]
 8012812:	f1b8 0f00 	cmp.w	r8, #0
 8012816:	dd9c      	ble.n	8012752 <__sflush_r+0x1a>
 8012818:	6a21      	ldr	r1, [r4, #32]
 801281a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801281c:	4643      	mov	r3, r8
 801281e:	463a      	mov	r2, r7
 8012820:	4628      	mov	r0, r5
 8012822:	47b0      	blx	r6
 8012824:	2800      	cmp	r0, #0
 8012826:	dc06      	bgt.n	8012836 <__sflush_r+0xfe>
 8012828:	89a3      	ldrh	r3, [r4, #12]
 801282a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801282e:	81a3      	strh	r3, [r4, #12]
 8012830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012834:	e78e      	b.n	8012754 <__sflush_r+0x1c>
 8012836:	4407      	add	r7, r0
 8012838:	eba8 0800 	sub.w	r8, r8, r0
 801283c:	e7e9      	b.n	8012812 <__sflush_r+0xda>
 801283e:	bf00      	nop
 8012840:	20400001 	.word	0x20400001

08012844 <_fflush_r>:
 8012844:	b538      	push	{r3, r4, r5, lr}
 8012846:	690b      	ldr	r3, [r1, #16]
 8012848:	4605      	mov	r5, r0
 801284a:	460c      	mov	r4, r1
 801284c:	b913      	cbnz	r3, 8012854 <_fflush_r+0x10>
 801284e:	2500      	movs	r5, #0
 8012850:	4628      	mov	r0, r5
 8012852:	bd38      	pop	{r3, r4, r5, pc}
 8012854:	b118      	cbz	r0, 801285e <_fflush_r+0x1a>
 8012856:	6983      	ldr	r3, [r0, #24]
 8012858:	b90b      	cbnz	r3, 801285e <_fflush_r+0x1a>
 801285a:	f7fe ff03 	bl	8011664 <__sinit>
 801285e:	4b14      	ldr	r3, [pc, #80]	; (80128b0 <_fflush_r+0x6c>)
 8012860:	429c      	cmp	r4, r3
 8012862:	d11b      	bne.n	801289c <_fflush_r+0x58>
 8012864:	686c      	ldr	r4, [r5, #4]
 8012866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d0ef      	beq.n	801284e <_fflush_r+0xa>
 801286e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012870:	07d0      	lsls	r0, r2, #31
 8012872:	d404      	bmi.n	801287e <_fflush_r+0x3a>
 8012874:	0599      	lsls	r1, r3, #22
 8012876:	d402      	bmi.n	801287e <_fflush_r+0x3a>
 8012878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801287a:	f7ff f874 	bl	8011966 <__retarget_lock_acquire_recursive>
 801287e:	4628      	mov	r0, r5
 8012880:	4621      	mov	r1, r4
 8012882:	f7ff ff59 	bl	8012738 <__sflush_r>
 8012886:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012888:	07da      	lsls	r2, r3, #31
 801288a:	4605      	mov	r5, r0
 801288c:	d4e0      	bmi.n	8012850 <_fflush_r+0xc>
 801288e:	89a3      	ldrh	r3, [r4, #12]
 8012890:	059b      	lsls	r3, r3, #22
 8012892:	d4dd      	bmi.n	8012850 <_fflush_r+0xc>
 8012894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012896:	f7ff f867 	bl	8011968 <__retarget_lock_release_recursive>
 801289a:	e7d9      	b.n	8012850 <_fflush_r+0xc>
 801289c:	4b05      	ldr	r3, [pc, #20]	; (80128b4 <_fflush_r+0x70>)
 801289e:	429c      	cmp	r4, r3
 80128a0:	d101      	bne.n	80128a6 <_fflush_r+0x62>
 80128a2:	68ac      	ldr	r4, [r5, #8]
 80128a4:	e7df      	b.n	8012866 <_fflush_r+0x22>
 80128a6:	4b04      	ldr	r3, [pc, #16]	; (80128b8 <_fflush_r+0x74>)
 80128a8:	429c      	cmp	r4, r3
 80128aa:	bf08      	it	eq
 80128ac:	68ec      	ldreq	r4, [r5, #12]
 80128ae:	e7da      	b.n	8012866 <_fflush_r+0x22>
 80128b0:	08016a98 	.word	0x08016a98
 80128b4:	08016ab8 	.word	0x08016ab8
 80128b8:	08016a78 	.word	0x08016a78

080128bc <_lseek_r>:
 80128bc:	b538      	push	{r3, r4, r5, lr}
 80128be:	4d07      	ldr	r5, [pc, #28]	; (80128dc <_lseek_r+0x20>)
 80128c0:	4604      	mov	r4, r0
 80128c2:	4608      	mov	r0, r1
 80128c4:	4611      	mov	r1, r2
 80128c6:	2200      	movs	r2, #0
 80128c8:	602a      	str	r2, [r5, #0]
 80128ca:	461a      	mov	r2, r3
 80128cc:	f7f1 ffb4 	bl	8004838 <_lseek>
 80128d0:	1c43      	adds	r3, r0, #1
 80128d2:	d102      	bne.n	80128da <_lseek_r+0x1e>
 80128d4:	682b      	ldr	r3, [r5, #0]
 80128d6:	b103      	cbz	r3, 80128da <_lseek_r+0x1e>
 80128d8:	6023      	str	r3, [r4, #0]
 80128da:	bd38      	pop	{r3, r4, r5, pc}
 80128dc:	200082e0 	.word	0x200082e0

080128e0 <__swhatbuf_r>:
 80128e0:	b570      	push	{r4, r5, r6, lr}
 80128e2:	460e      	mov	r6, r1
 80128e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128e8:	2900      	cmp	r1, #0
 80128ea:	b096      	sub	sp, #88	; 0x58
 80128ec:	4614      	mov	r4, r2
 80128ee:	461d      	mov	r5, r3
 80128f0:	da08      	bge.n	8012904 <__swhatbuf_r+0x24>
 80128f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80128f6:	2200      	movs	r2, #0
 80128f8:	602a      	str	r2, [r5, #0]
 80128fa:	061a      	lsls	r2, r3, #24
 80128fc:	d410      	bmi.n	8012920 <__swhatbuf_r+0x40>
 80128fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012902:	e00e      	b.n	8012922 <__swhatbuf_r+0x42>
 8012904:	466a      	mov	r2, sp
 8012906:	f000 fa57 	bl	8012db8 <_fstat_r>
 801290a:	2800      	cmp	r0, #0
 801290c:	dbf1      	blt.n	80128f2 <__swhatbuf_r+0x12>
 801290e:	9a01      	ldr	r2, [sp, #4]
 8012910:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012914:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012918:	425a      	negs	r2, r3
 801291a:	415a      	adcs	r2, r3
 801291c:	602a      	str	r2, [r5, #0]
 801291e:	e7ee      	b.n	80128fe <__swhatbuf_r+0x1e>
 8012920:	2340      	movs	r3, #64	; 0x40
 8012922:	2000      	movs	r0, #0
 8012924:	6023      	str	r3, [r4, #0]
 8012926:	b016      	add	sp, #88	; 0x58
 8012928:	bd70      	pop	{r4, r5, r6, pc}
	...

0801292c <__smakebuf_r>:
 801292c:	898b      	ldrh	r3, [r1, #12]
 801292e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012930:	079d      	lsls	r5, r3, #30
 8012932:	4606      	mov	r6, r0
 8012934:	460c      	mov	r4, r1
 8012936:	d507      	bpl.n	8012948 <__smakebuf_r+0x1c>
 8012938:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801293c:	6023      	str	r3, [r4, #0]
 801293e:	6123      	str	r3, [r4, #16]
 8012940:	2301      	movs	r3, #1
 8012942:	6163      	str	r3, [r4, #20]
 8012944:	b002      	add	sp, #8
 8012946:	bd70      	pop	{r4, r5, r6, pc}
 8012948:	ab01      	add	r3, sp, #4
 801294a:	466a      	mov	r2, sp
 801294c:	f7ff ffc8 	bl	80128e0 <__swhatbuf_r>
 8012950:	9900      	ldr	r1, [sp, #0]
 8012952:	4605      	mov	r5, r0
 8012954:	4630      	mov	r0, r6
 8012956:	f7ff f89b 	bl	8011a90 <_malloc_r>
 801295a:	b948      	cbnz	r0, 8012970 <__smakebuf_r+0x44>
 801295c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012960:	059a      	lsls	r2, r3, #22
 8012962:	d4ef      	bmi.n	8012944 <__smakebuf_r+0x18>
 8012964:	f023 0303 	bic.w	r3, r3, #3
 8012968:	f043 0302 	orr.w	r3, r3, #2
 801296c:	81a3      	strh	r3, [r4, #12]
 801296e:	e7e3      	b.n	8012938 <__smakebuf_r+0xc>
 8012970:	4b0d      	ldr	r3, [pc, #52]	; (80129a8 <__smakebuf_r+0x7c>)
 8012972:	62b3      	str	r3, [r6, #40]	; 0x28
 8012974:	89a3      	ldrh	r3, [r4, #12]
 8012976:	6020      	str	r0, [r4, #0]
 8012978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801297c:	81a3      	strh	r3, [r4, #12]
 801297e:	9b00      	ldr	r3, [sp, #0]
 8012980:	6163      	str	r3, [r4, #20]
 8012982:	9b01      	ldr	r3, [sp, #4]
 8012984:	6120      	str	r0, [r4, #16]
 8012986:	b15b      	cbz	r3, 80129a0 <__smakebuf_r+0x74>
 8012988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801298c:	4630      	mov	r0, r6
 801298e:	f000 fa25 	bl	8012ddc <_isatty_r>
 8012992:	b128      	cbz	r0, 80129a0 <__smakebuf_r+0x74>
 8012994:	89a3      	ldrh	r3, [r4, #12]
 8012996:	f023 0303 	bic.w	r3, r3, #3
 801299a:	f043 0301 	orr.w	r3, r3, #1
 801299e:	81a3      	strh	r3, [r4, #12]
 80129a0:	89a0      	ldrh	r0, [r4, #12]
 80129a2:	4305      	orrs	r5, r0
 80129a4:	81a5      	strh	r5, [r4, #12]
 80129a6:	e7cd      	b.n	8012944 <__smakebuf_r+0x18>
 80129a8:	080115fd 	.word	0x080115fd

080129ac <memmove>:
 80129ac:	4288      	cmp	r0, r1
 80129ae:	b510      	push	{r4, lr}
 80129b0:	eb01 0402 	add.w	r4, r1, r2
 80129b4:	d902      	bls.n	80129bc <memmove+0x10>
 80129b6:	4284      	cmp	r4, r0
 80129b8:	4623      	mov	r3, r4
 80129ba:	d807      	bhi.n	80129cc <memmove+0x20>
 80129bc:	1e43      	subs	r3, r0, #1
 80129be:	42a1      	cmp	r1, r4
 80129c0:	d008      	beq.n	80129d4 <memmove+0x28>
 80129c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80129ca:	e7f8      	b.n	80129be <memmove+0x12>
 80129cc:	4402      	add	r2, r0
 80129ce:	4601      	mov	r1, r0
 80129d0:	428a      	cmp	r2, r1
 80129d2:	d100      	bne.n	80129d6 <memmove+0x2a>
 80129d4:	bd10      	pop	{r4, pc}
 80129d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80129da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80129de:	e7f7      	b.n	80129d0 <memmove+0x24>

080129e0 <__malloc_lock>:
 80129e0:	4801      	ldr	r0, [pc, #4]	; (80129e8 <__malloc_lock+0x8>)
 80129e2:	f7fe bfc0 	b.w	8011966 <__retarget_lock_acquire_recursive>
 80129e6:	bf00      	nop
 80129e8:	200082d4 	.word	0x200082d4

080129ec <__malloc_unlock>:
 80129ec:	4801      	ldr	r0, [pc, #4]	; (80129f4 <__malloc_unlock+0x8>)
 80129ee:	f7fe bfbb 	b.w	8011968 <__retarget_lock_release_recursive>
 80129f2:	bf00      	nop
 80129f4:	200082d4 	.word	0x200082d4

080129f8 <_realloc_r>:
 80129f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129fc:	4680      	mov	r8, r0
 80129fe:	4614      	mov	r4, r2
 8012a00:	460e      	mov	r6, r1
 8012a02:	b921      	cbnz	r1, 8012a0e <_realloc_r+0x16>
 8012a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a08:	4611      	mov	r1, r2
 8012a0a:	f7ff b841 	b.w	8011a90 <_malloc_r>
 8012a0e:	b92a      	cbnz	r2, 8012a1c <_realloc_r+0x24>
 8012a10:	f7fe ffd2 	bl	80119b8 <_free_r>
 8012a14:	4625      	mov	r5, r4
 8012a16:	4628      	mov	r0, r5
 8012a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a1c:	f000 f9ee 	bl	8012dfc <_malloc_usable_size_r>
 8012a20:	4284      	cmp	r4, r0
 8012a22:	4607      	mov	r7, r0
 8012a24:	d802      	bhi.n	8012a2c <_realloc_r+0x34>
 8012a26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012a2a:	d812      	bhi.n	8012a52 <_realloc_r+0x5a>
 8012a2c:	4621      	mov	r1, r4
 8012a2e:	4640      	mov	r0, r8
 8012a30:	f7ff f82e 	bl	8011a90 <_malloc_r>
 8012a34:	4605      	mov	r5, r0
 8012a36:	2800      	cmp	r0, #0
 8012a38:	d0ed      	beq.n	8012a16 <_realloc_r+0x1e>
 8012a3a:	42bc      	cmp	r4, r7
 8012a3c:	4622      	mov	r2, r4
 8012a3e:	4631      	mov	r1, r6
 8012a40:	bf28      	it	cs
 8012a42:	463a      	movcs	r2, r7
 8012a44:	f7fe ffa2 	bl	801198c <memcpy>
 8012a48:	4631      	mov	r1, r6
 8012a4a:	4640      	mov	r0, r8
 8012a4c:	f7fe ffb4 	bl	80119b8 <_free_r>
 8012a50:	e7e1      	b.n	8012a16 <_realloc_r+0x1e>
 8012a52:	4635      	mov	r5, r6
 8012a54:	e7df      	b.n	8012a16 <_realloc_r+0x1e>

08012a56 <__ssputs_r>:
 8012a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a5a:	688e      	ldr	r6, [r1, #8]
 8012a5c:	429e      	cmp	r6, r3
 8012a5e:	4682      	mov	sl, r0
 8012a60:	460c      	mov	r4, r1
 8012a62:	4690      	mov	r8, r2
 8012a64:	461f      	mov	r7, r3
 8012a66:	d838      	bhi.n	8012ada <__ssputs_r+0x84>
 8012a68:	898a      	ldrh	r2, [r1, #12]
 8012a6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012a6e:	d032      	beq.n	8012ad6 <__ssputs_r+0x80>
 8012a70:	6825      	ldr	r5, [r4, #0]
 8012a72:	6909      	ldr	r1, [r1, #16]
 8012a74:	eba5 0901 	sub.w	r9, r5, r1
 8012a78:	6965      	ldr	r5, [r4, #20]
 8012a7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a82:	3301      	adds	r3, #1
 8012a84:	444b      	add	r3, r9
 8012a86:	106d      	asrs	r5, r5, #1
 8012a88:	429d      	cmp	r5, r3
 8012a8a:	bf38      	it	cc
 8012a8c:	461d      	movcc	r5, r3
 8012a8e:	0553      	lsls	r3, r2, #21
 8012a90:	d531      	bpl.n	8012af6 <__ssputs_r+0xa0>
 8012a92:	4629      	mov	r1, r5
 8012a94:	f7fe fffc 	bl	8011a90 <_malloc_r>
 8012a98:	4606      	mov	r6, r0
 8012a9a:	b950      	cbnz	r0, 8012ab2 <__ssputs_r+0x5c>
 8012a9c:	230c      	movs	r3, #12
 8012a9e:	f8ca 3000 	str.w	r3, [sl]
 8012aa2:	89a3      	ldrh	r3, [r4, #12]
 8012aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012aa8:	81a3      	strh	r3, [r4, #12]
 8012aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ab2:	6921      	ldr	r1, [r4, #16]
 8012ab4:	464a      	mov	r2, r9
 8012ab6:	f7fe ff69 	bl	801198c <memcpy>
 8012aba:	89a3      	ldrh	r3, [r4, #12]
 8012abc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ac4:	81a3      	strh	r3, [r4, #12]
 8012ac6:	6126      	str	r6, [r4, #16]
 8012ac8:	6165      	str	r5, [r4, #20]
 8012aca:	444e      	add	r6, r9
 8012acc:	eba5 0509 	sub.w	r5, r5, r9
 8012ad0:	6026      	str	r6, [r4, #0]
 8012ad2:	60a5      	str	r5, [r4, #8]
 8012ad4:	463e      	mov	r6, r7
 8012ad6:	42be      	cmp	r6, r7
 8012ad8:	d900      	bls.n	8012adc <__ssputs_r+0x86>
 8012ada:	463e      	mov	r6, r7
 8012adc:	6820      	ldr	r0, [r4, #0]
 8012ade:	4632      	mov	r2, r6
 8012ae0:	4641      	mov	r1, r8
 8012ae2:	f7ff ff63 	bl	80129ac <memmove>
 8012ae6:	68a3      	ldr	r3, [r4, #8]
 8012ae8:	1b9b      	subs	r3, r3, r6
 8012aea:	60a3      	str	r3, [r4, #8]
 8012aec:	6823      	ldr	r3, [r4, #0]
 8012aee:	4433      	add	r3, r6
 8012af0:	6023      	str	r3, [r4, #0]
 8012af2:	2000      	movs	r0, #0
 8012af4:	e7db      	b.n	8012aae <__ssputs_r+0x58>
 8012af6:	462a      	mov	r2, r5
 8012af8:	f7ff ff7e 	bl	80129f8 <_realloc_r>
 8012afc:	4606      	mov	r6, r0
 8012afe:	2800      	cmp	r0, #0
 8012b00:	d1e1      	bne.n	8012ac6 <__ssputs_r+0x70>
 8012b02:	6921      	ldr	r1, [r4, #16]
 8012b04:	4650      	mov	r0, sl
 8012b06:	f7fe ff57 	bl	80119b8 <_free_r>
 8012b0a:	e7c7      	b.n	8012a9c <__ssputs_r+0x46>

08012b0c <_svfiprintf_r>:
 8012b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b10:	4698      	mov	r8, r3
 8012b12:	898b      	ldrh	r3, [r1, #12]
 8012b14:	061b      	lsls	r3, r3, #24
 8012b16:	b09d      	sub	sp, #116	; 0x74
 8012b18:	4607      	mov	r7, r0
 8012b1a:	460d      	mov	r5, r1
 8012b1c:	4614      	mov	r4, r2
 8012b1e:	d50e      	bpl.n	8012b3e <_svfiprintf_r+0x32>
 8012b20:	690b      	ldr	r3, [r1, #16]
 8012b22:	b963      	cbnz	r3, 8012b3e <_svfiprintf_r+0x32>
 8012b24:	2140      	movs	r1, #64	; 0x40
 8012b26:	f7fe ffb3 	bl	8011a90 <_malloc_r>
 8012b2a:	6028      	str	r0, [r5, #0]
 8012b2c:	6128      	str	r0, [r5, #16]
 8012b2e:	b920      	cbnz	r0, 8012b3a <_svfiprintf_r+0x2e>
 8012b30:	230c      	movs	r3, #12
 8012b32:	603b      	str	r3, [r7, #0]
 8012b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b38:	e0d1      	b.n	8012cde <_svfiprintf_r+0x1d2>
 8012b3a:	2340      	movs	r3, #64	; 0x40
 8012b3c:	616b      	str	r3, [r5, #20]
 8012b3e:	2300      	movs	r3, #0
 8012b40:	9309      	str	r3, [sp, #36]	; 0x24
 8012b42:	2320      	movs	r3, #32
 8012b44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b4c:	2330      	movs	r3, #48	; 0x30
 8012b4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012cf8 <_svfiprintf_r+0x1ec>
 8012b52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b56:	f04f 0901 	mov.w	r9, #1
 8012b5a:	4623      	mov	r3, r4
 8012b5c:	469a      	mov	sl, r3
 8012b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b62:	b10a      	cbz	r2, 8012b68 <_svfiprintf_r+0x5c>
 8012b64:	2a25      	cmp	r2, #37	; 0x25
 8012b66:	d1f9      	bne.n	8012b5c <_svfiprintf_r+0x50>
 8012b68:	ebba 0b04 	subs.w	fp, sl, r4
 8012b6c:	d00b      	beq.n	8012b86 <_svfiprintf_r+0x7a>
 8012b6e:	465b      	mov	r3, fp
 8012b70:	4622      	mov	r2, r4
 8012b72:	4629      	mov	r1, r5
 8012b74:	4638      	mov	r0, r7
 8012b76:	f7ff ff6e 	bl	8012a56 <__ssputs_r>
 8012b7a:	3001      	adds	r0, #1
 8012b7c:	f000 80aa 	beq.w	8012cd4 <_svfiprintf_r+0x1c8>
 8012b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b82:	445a      	add	r2, fp
 8012b84:	9209      	str	r2, [sp, #36]	; 0x24
 8012b86:	f89a 3000 	ldrb.w	r3, [sl]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	f000 80a2 	beq.w	8012cd4 <_svfiprintf_r+0x1c8>
 8012b90:	2300      	movs	r3, #0
 8012b92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b9a:	f10a 0a01 	add.w	sl, sl, #1
 8012b9e:	9304      	str	r3, [sp, #16]
 8012ba0:	9307      	str	r3, [sp, #28]
 8012ba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ba6:	931a      	str	r3, [sp, #104]	; 0x68
 8012ba8:	4654      	mov	r4, sl
 8012baa:	2205      	movs	r2, #5
 8012bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bb0:	4851      	ldr	r0, [pc, #324]	; (8012cf8 <_svfiprintf_r+0x1ec>)
 8012bb2:	f7ed fb15 	bl	80001e0 <memchr>
 8012bb6:	9a04      	ldr	r2, [sp, #16]
 8012bb8:	b9d8      	cbnz	r0, 8012bf2 <_svfiprintf_r+0xe6>
 8012bba:	06d0      	lsls	r0, r2, #27
 8012bbc:	bf44      	itt	mi
 8012bbe:	2320      	movmi	r3, #32
 8012bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bc4:	0711      	lsls	r1, r2, #28
 8012bc6:	bf44      	itt	mi
 8012bc8:	232b      	movmi	r3, #43	; 0x2b
 8012bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bce:	f89a 3000 	ldrb.w	r3, [sl]
 8012bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8012bd4:	d015      	beq.n	8012c02 <_svfiprintf_r+0xf6>
 8012bd6:	9a07      	ldr	r2, [sp, #28]
 8012bd8:	4654      	mov	r4, sl
 8012bda:	2000      	movs	r0, #0
 8012bdc:	f04f 0c0a 	mov.w	ip, #10
 8012be0:	4621      	mov	r1, r4
 8012be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012be6:	3b30      	subs	r3, #48	; 0x30
 8012be8:	2b09      	cmp	r3, #9
 8012bea:	d94e      	bls.n	8012c8a <_svfiprintf_r+0x17e>
 8012bec:	b1b0      	cbz	r0, 8012c1c <_svfiprintf_r+0x110>
 8012bee:	9207      	str	r2, [sp, #28]
 8012bf0:	e014      	b.n	8012c1c <_svfiprintf_r+0x110>
 8012bf2:	eba0 0308 	sub.w	r3, r0, r8
 8012bf6:	fa09 f303 	lsl.w	r3, r9, r3
 8012bfa:	4313      	orrs	r3, r2
 8012bfc:	9304      	str	r3, [sp, #16]
 8012bfe:	46a2      	mov	sl, r4
 8012c00:	e7d2      	b.n	8012ba8 <_svfiprintf_r+0x9c>
 8012c02:	9b03      	ldr	r3, [sp, #12]
 8012c04:	1d19      	adds	r1, r3, #4
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	9103      	str	r1, [sp, #12]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	bfbb      	ittet	lt
 8012c0e:	425b      	neglt	r3, r3
 8012c10:	f042 0202 	orrlt.w	r2, r2, #2
 8012c14:	9307      	strge	r3, [sp, #28]
 8012c16:	9307      	strlt	r3, [sp, #28]
 8012c18:	bfb8      	it	lt
 8012c1a:	9204      	strlt	r2, [sp, #16]
 8012c1c:	7823      	ldrb	r3, [r4, #0]
 8012c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8012c20:	d10c      	bne.n	8012c3c <_svfiprintf_r+0x130>
 8012c22:	7863      	ldrb	r3, [r4, #1]
 8012c24:	2b2a      	cmp	r3, #42	; 0x2a
 8012c26:	d135      	bne.n	8012c94 <_svfiprintf_r+0x188>
 8012c28:	9b03      	ldr	r3, [sp, #12]
 8012c2a:	1d1a      	adds	r2, r3, #4
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	9203      	str	r2, [sp, #12]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	bfb8      	it	lt
 8012c34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012c38:	3402      	adds	r4, #2
 8012c3a:	9305      	str	r3, [sp, #20]
 8012c3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012d08 <_svfiprintf_r+0x1fc>
 8012c40:	7821      	ldrb	r1, [r4, #0]
 8012c42:	2203      	movs	r2, #3
 8012c44:	4650      	mov	r0, sl
 8012c46:	f7ed facb 	bl	80001e0 <memchr>
 8012c4a:	b140      	cbz	r0, 8012c5e <_svfiprintf_r+0x152>
 8012c4c:	2340      	movs	r3, #64	; 0x40
 8012c4e:	eba0 000a 	sub.w	r0, r0, sl
 8012c52:	fa03 f000 	lsl.w	r0, r3, r0
 8012c56:	9b04      	ldr	r3, [sp, #16]
 8012c58:	4303      	orrs	r3, r0
 8012c5a:	3401      	adds	r4, #1
 8012c5c:	9304      	str	r3, [sp, #16]
 8012c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c62:	4826      	ldr	r0, [pc, #152]	; (8012cfc <_svfiprintf_r+0x1f0>)
 8012c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c68:	2206      	movs	r2, #6
 8012c6a:	f7ed fab9 	bl	80001e0 <memchr>
 8012c6e:	2800      	cmp	r0, #0
 8012c70:	d038      	beq.n	8012ce4 <_svfiprintf_r+0x1d8>
 8012c72:	4b23      	ldr	r3, [pc, #140]	; (8012d00 <_svfiprintf_r+0x1f4>)
 8012c74:	bb1b      	cbnz	r3, 8012cbe <_svfiprintf_r+0x1b2>
 8012c76:	9b03      	ldr	r3, [sp, #12]
 8012c78:	3307      	adds	r3, #7
 8012c7a:	f023 0307 	bic.w	r3, r3, #7
 8012c7e:	3308      	adds	r3, #8
 8012c80:	9303      	str	r3, [sp, #12]
 8012c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c84:	4433      	add	r3, r6
 8012c86:	9309      	str	r3, [sp, #36]	; 0x24
 8012c88:	e767      	b.n	8012b5a <_svfiprintf_r+0x4e>
 8012c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c8e:	460c      	mov	r4, r1
 8012c90:	2001      	movs	r0, #1
 8012c92:	e7a5      	b.n	8012be0 <_svfiprintf_r+0xd4>
 8012c94:	2300      	movs	r3, #0
 8012c96:	3401      	adds	r4, #1
 8012c98:	9305      	str	r3, [sp, #20]
 8012c9a:	4619      	mov	r1, r3
 8012c9c:	f04f 0c0a 	mov.w	ip, #10
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ca6:	3a30      	subs	r2, #48	; 0x30
 8012ca8:	2a09      	cmp	r2, #9
 8012caa:	d903      	bls.n	8012cb4 <_svfiprintf_r+0x1a8>
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d0c5      	beq.n	8012c3c <_svfiprintf_r+0x130>
 8012cb0:	9105      	str	r1, [sp, #20]
 8012cb2:	e7c3      	b.n	8012c3c <_svfiprintf_r+0x130>
 8012cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cb8:	4604      	mov	r4, r0
 8012cba:	2301      	movs	r3, #1
 8012cbc:	e7f0      	b.n	8012ca0 <_svfiprintf_r+0x194>
 8012cbe:	ab03      	add	r3, sp, #12
 8012cc0:	9300      	str	r3, [sp, #0]
 8012cc2:	462a      	mov	r2, r5
 8012cc4:	4b0f      	ldr	r3, [pc, #60]	; (8012d04 <_svfiprintf_r+0x1f8>)
 8012cc6:	a904      	add	r1, sp, #16
 8012cc8:	4638      	mov	r0, r7
 8012cca:	f3af 8000 	nop.w
 8012cce:	1c42      	adds	r2, r0, #1
 8012cd0:	4606      	mov	r6, r0
 8012cd2:	d1d6      	bne.n	8012c82 <_svfiprintf_r+0x176>
 8012cd4:	89ab      	ldrh	r3, [r5, #12]
 8012cd6:	065b      	lsls	r3, r3, #25
 8012cd8:	f53f af2c 	bmi.w	8012b34 <_svfiprintf_r+0x28>
 8012cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012cde:	b01d      	add	sp, #116	; 0x74
 8012ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce4:	ab03      	add	r3, sp, #12
 8012ce6:	9300      	str	r3, [sp, #0]
 8012ce8:	462a      	mov	r2, r5
 8012cea:	4b06      	ldr	r3, [pc, #24]	; (8012d04 <_svfiprintf_r+0x1f8>)
 8012cec:	a904      	add	r1, sp, #16
 8012cee:	4638      	mov	r0, r7
 8012cf0:	f7ff f90a 	bl	8011f08 <_printf_i>
 8012cf4:	e7eb      	b.n	8012cce <_svfiprintf_r+0x1c2>
 8012cf6:	bf00      	nop
 8012cf8:	08016adc 	.word	0x08016adc
 8012cfc:	08016ae6 	.word	0x08016ae6
 8012d00:	00000000 	.word	0x00000000
 8012d04:	08012a57 	.word	0x08012a57
 8012d08:	08016ae2 	.word	0x08016ae2

08012d0c <_read_r>:
 8012d0c:	b538      	push	{r3, r4, r5, lr}
 8012d0e:	4d07      	ldr	r5, [pc, #28]	; (8012d2c <_read_r+0x20>)
 8012d10:	4604      	mov	r4, r0
 8012d12:	4608      	mov	r0, r1
 8012d14:	4611      	mov	r1, r2
 8012d16:	2200      	movs	r2, #0
 8012d18:	602a      	str	r2, [r5, #0]
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	f7f1 fd48 	bl	80047b0 <_read>
 8012d20:	1c43      	adds	r3, r0, #1
 8012d22:	d102      	bne.n	8012d2a <_read_r+0x1e>
 8012d24:	682b      	ldr	r3, [r5, #0]
 8012d26:	b103      	cbz	r3, 8012d2a <_read_r+0x1e>
 8012d28:	6023      	str	r3, [r4, #0]
 8012d2a:	bd38      	pop	{r3, r4, r5, pc}
 8012d2c:	200082e0 	.word	0x200082e0

08012d30 <_raise_r>:
 8012d30:	291f      	cmp	r1, #31
 8012d32:	b538      	push	{r3, r4, r5, lr}
 8012d34:	4604      	mov	r4, r0
 8012d36:	460d      	mov	r5, r1
 8012d38:	d904      	bls.n	8012d44 <_raise_r+0x14>
 8012d3a:	2316      	movs	r3, #22
 8012d3c:	6003      	str	r3, [r0, #0]
 8012d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d42:	bd38      	pop	{r3, r4, r5, pc}
 8012d44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012d46:	b112      	cbz	r2, 8012d4e <_raise_r+0x1e>
 8012d48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d4c:	b94b      	cbnz	r3, 8012d62 <_raise_r+0x32>
 8012d4e:	4620      	mov	r0, r4
 8012d50:	f000 f830 	bl	8012db4 <_getpid_r>
 8012d54:	462a      	mov	r2, r5
 8012d56:	4601      	mov	r1, r0
 8012d58:	4620      	mov	r0, r4
 8012d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d5e:	f000 b817 	b.w	8012d90 <_kill_r>
 8012d62:	2b01      	cmp	r3, #1
 8012d64:	d00a      	beq.n	8012d7c <_raise_r+0x4c>
 8012d66:	1c59      	adds	r1, r3, #1
 8012d68:	d103      	bne.n	8012d72 <_raise_r+0x42>
 8012d6a:	2316      	movs	r3, #22
 8012d6c:	6003      	str	r3, [r0, #0]
 8012d6e:	2001      	movs	r0, #1
 8012d70:	e7e7      	b.n	8012d42 <_raise_r+0x12>
 8012d72:	2400      	movs	r4, #0
 8012d74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012d78:	4628      	mov	r0, r5
 8012d7a:	4798      	blx	r3
 8012d7c:	2000      	movs	r0, #0
 8012d7e:	e7e0      	b.n	8012d42 <_raise_r+0x12>

08012d80 <raise>:
 8012d80:	4b02      	ldr	r3, [pc, #8]	; (8012d8c <raise+0xc>)
 8012d82:	4601      	mov	r1, r0
 8012d84:	6818      	ldr	r0, [r3, #0]
 8012d86:	f7ff bfd3 	b.w	8012d30 <_raise_r>
 8012d8a:	bf00      	nop
 8012d8c:	200000b8 	.word	0x200000b8

08012d90 <_kill_r>:
 8012d90:	b538      	push	{r3, r4, r5, lr}
 8012d92:	4d07      	ldr	r5, [pc, #28]	; (8012db0 <_kill_r+0x20>)
 8012d94:	2300      	movs	r3, #0
 8012d96:	4604      	mov	r4, r0
 8012d98:	4608      	mov	r0, r1
 8012d9a:	4611      	mov	r1, r2
 8012d9c:	602b      	str	r3, [r5, #0]
 8012d9e:	f7f1 fced 	bl	800477c <_kill>
 8012da2:	1c43      	adds	r3, r0, #1
 8012da4:	d102      	bne.n	8012dac <_kill_r+0x1c>
 8012da6:	682b      	ldr	r3, [r5, #0]
 8012da8:	b103      	cbz	r3, 8012dac <_kill_r+0x1c>
 8012daa:	6023      	str	r3, [r4, #0]
 8012dac:	bd38      	pop	{r3, r4, r5, pc}
 8012dae:	bf00      	nop
 8012db0:	200082e0 	.word	0x200082e0

08012db4 <_getpid_r>:
 8012db4:	f7f1 bcda 	b.w	800476c <_getpid>

08012db8 <_fstat_r>:
 8012db8:	b538      	push	{r3, r4, r5, lr}
 8012dba:	4d07      	ldr	r5, [pc, #28]	; (8012dd8 <_fstat_r+0x20>)
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	4608      	mov	r0, r1
 8012dc2:	4611      	mov	r1, r2
 8012dc4:	602b      	str	r3, [r5, #0]
 8012dc6:	f7f1 fd1c 	bl	8004802 <_fstat>
 8012dca:	1c43      	adds	r3, r0, #1
 8012dcc:	d102      	bne.n	8012dd4 <_fstat_r+0x1c>
 8012dce:	682b      	ldr	r3, [r5, #0]
 8012dd0:	b103      	cbz	r3, 8012dd4 <_fstat_r+0x1c>
 8012dd2:	6023      	str	r3, [r4, #0]
 8012dd4:	bd38      	pop	{r3, r4, r5, pc}
 8012dd6:	bf00      	nop
 8012dd8:	200082e0 	.word	0x200082e0

08012ddc <_isatty_r>:
 8012ddc:	b538      	push	{r3, r4, r5, lr}
 8012dde:	4d06      	ldr	r5, [pc, #24]	; (8012df8 <_isatty_r+0x1c>)
 8012de0:	2300      	movs	r3, #0
 8012de2:	4604      	mov	r4, r0
 8012de4:	4608      	mov	r0, r1
 8012de6:	602b      	str	r3, [r5, #0]
 8012de8:	f7f1 fd1b 	bl	8004822 <_isatty>
 8012dec:	1c43      	adds	r3, r0, #1
 8012dee:	d102      	bne.n	8012df6 <_isatty_r+0x1a>
 8012df0:	682b      	ldr	r3, [r5, #0]
 8012df2:	b103      	cbz	r3, 8012df6 <_isatty_r+0x1a>
 8012df4:	6023      	str	r3, [r4, #0]
 8012df6:	bd38      	pop	{r3, r4, r5, pc}
 8012df8:	200082e0 	.word	0x200082e0

08012dfc <_malloc_usable_size_r>:
 8012dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e00:	1f18      	subs	r0, r3, #4
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	bfbc      	itt	lt
 8012e06:	580b      	ldrlt	r3, [r1, r0]
 8012e08:	18c0      	addlt	r0, r0, r3
 8012e0a:	4770      	bx	lr

08012e0c <_init>:
 8012e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e0e:	bf00      	nop
 8012e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e12:	bc08      	pop	{r3}
 8012e14:	469e      	mov	lr, r3
 8012e16:	4770      	bx	lr

08012e18 <_fini>:
 8012e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e1a:	bf00      	nop
 8012e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e1e:	bc08      	pop	{r3}
 8012e20:	469e      	mov	lr, r3
 8012e22:	4770      	bx	lr
