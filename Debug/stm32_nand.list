
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002548  0800b0cc  0800b0cc  0001b0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d614  0800d614  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d614  0800d614  0001d614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d61c  0800d61c  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d61c  0800d61c  0001d61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d620  0800d620  0001d620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800d624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          000054dc  200000c8  200000c8  000200c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  200055a4  200055a4  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022361  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004224  00000000  00000000  00042459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  00046680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d7c  00000000  00000000  00048168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb88  00000000  00000000  0004dee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2dd5  00000000  00000000  0006ca6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f841  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001948  00000000  00000000  0014f898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a98  00000000  00000000  001511e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0b4 	.word	0x0800b0b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	0800b0b4 	.word	0x0800b0b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f001 ffb7 	bl	8002bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f87b 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa1f 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9e7 	bl	8001040 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f96f 	bl	8000f54 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8dd 	bl	8000e34 <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 fabd 	bl	80011f8 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9b5 	bl	8000fec <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f931 	bl	8000ee8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(200);
 8000c8c:	20c8      	movs	r0, #200	; 0xc8
 8000c8e:	f001 ffe3 	bl	8002c58 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4826      	ldr	r0, [pc, #152]	; (8000d30 <main+0xd4>)
 8000c98:	f002 fe82 	bl	80039a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4824      	ldr	r0, [pc, #144]	; (8000d34 <main+0xd8>)
 8000ca4:	f002 fe7c 	bl	80039a0 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000ca8:	20c8      	movs	r0, #200	; 0xc8
 8000caa:	f001 ffd5 	bl	8002c58 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	481f      	ldr	r0, [pc, #124]	; (8000d30 <main+0xd4>)
 8000cb4:	f002 fe74 	bl	80039a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	481d      	ldr	r0, [pc, #116]	; (8000d34 <main+0xd8>)
 8000cc0:	f002 fe6e 	bl	80039a0 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <main+0xdc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f004 fdef 	bl	80058b8 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <main+0xe0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4917      	ldr	r1, [pc, #92]	; (8000d40 <main+0xe4>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f005 fa67 	bl	80061b6 <HAL_UART_Receive_IT>

  set_Date(epoch);
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <main+0xe8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fbe5 	bl	80014bc <set_Date>

  ST7789_Reset();
 8000cf2:	f001 f9fb 	bl	80020ec <ST7789_Reset>
  ST7789_Init(back_color);
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <main+0xec>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fa10 	bl	8002120 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d00:	f006 fbbe 	bl	8007480 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000d04:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <main+0xf0>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f006 fcb2 	bl	8007672 <osSemaphoreNew>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <main+0xf4>)
 8000d12:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d14:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <main+0xf8>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	480f      	ldr	r0, [pc, #60]	; (8000d58 <main+0xfc>)
 8000d1a:	f006 fbfd 	bl	8007518 <osThreadNew>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <main+0x100>)
 8000d22:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d24:	f006 fbd2 	bl	80074cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f001 ff95 	bl	8002c58 <HAL_Delay>
 8000d2e:	e7fb      	b.n	8000d28 <main+0xcc>
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020c00 	.word	0x40020c00
 8000d38:	2000001c 	.word	0x2000001c
 8000d3c:	20000020 	.word	0x20000020
 8000d40:	20000b08 	.word	0x20000b08
 8000d44:	20000014 	.word	0x20000014
 8000d48:	20000b0e 	.word	0x20000b0e
 8000d4c:	0800d444 	.word	0x0800d444
 8000d50:	200002ec 	.word	0x200002ec
 8000d54:	0800d420 	.word	0x0800d420
 8000d58:	080018f9 	.word	0x080018f9
 8000d5c:	200002e8 	.word	0x200002e8

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f009 fbc2 	bl	800a4f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <SystemClock_Config+0xd0>)
 8000daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dde:	2307      	movs	r3, #7
 8000de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 ff48 	bl	8003c7c <HAL_RCC_OscConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000df2:	f000 ffe9 	bl	8001dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df6:	230f      	movs	r3, #15
 8000df8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2105      	movs	r1, #5
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 f9a9 	bl	800416c <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e20:	f000 ffd2 	bl	8001dc8 <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3750      	adds	r7, #80	; 0x50
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e4e:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <MX_RTC_Init+0xb0>)
 8000e50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e58:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e5a:	227f      	movs	r2, #127	; 0x7f
 8000e5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e60:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e64:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e78:	4819      	ldr	r0, [pc, #100]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e7a:	f003 fcab 	bl	80047d4 <HAL_RTC_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e84:	f000 ffa0 	bl	8001dc8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000ea4:	f003 fd27 	bl	80048f6 <HAL_RTC_SetTime>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eae:	f000 ff8b 	bl	8001dc8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000eca:	f003 fe2f 	bl	8004b2c <HAL_RTC_SetDate>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000ed4:	f000 ff78 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200000e4 	.word	0x200000e4
 8000ee4:	40002800 	.word	0x40002800

08000ee8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <MX_SPI1_Init+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f34:	220a      	movs	r2, #10
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f3a:	f003 ff7d 	bl	8004e38 <HAL_SPI_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f44:	f000 ff40 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000104 	.word	0x20000104
 8000f50:	40013000 	.word	0x40013000

08000f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f7a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f88:	22f9      	movs	r2, #249	; 0xf9
 8000f8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f9a:	f004 fc3d 	bl	8005818 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fa4:	f000 ff10 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fb6:	f004 fdf7 	bl	8005ba8 <HAL_TIM_ConfigClockSource>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fc0:	f000 ff02 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fd2:	f005 f813 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fdc:	f000 fef4 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200001bc 	.word	0x200001bc

08000fec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <MX_USART3_UART_Init+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001024:	f005 f87a 	bl	800611c <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800102e:	f000 fecb 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000204 	.word	0x20000204
 800103c:	40004800 	.word	0x40004800

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_DMA_Init+0x68>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <MX_DMA_Init+0x68>)
 8001050:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_DMA_Init+0x68>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_DMA_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <MX_DMA_Init+0x68>)
 800106c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_DMA_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 2, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2102      	movs	r1, #2
 8001082:	200e      	movs	r0, #14
 8001084:	f001 fec4 	bl	8002e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001088:	200e      	movs	r0, #14
 800108a:	f001 fedd 	bl	8002e48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	203b      	movs	r0, #59	; 0x3b
 8001094:	f001 febc 	bl	8002e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001098:	203b      	movs	r0, #59	; 0x3b
 800109a:	f001 fed5 	bl	8002e48 <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a47      	ldr	r2, [pc, #284]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <MX_GPIO_Init+0x13c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <MX_GPIO_Init+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a2b      	ldr	r2, [pc, #172]	; (80011e8 <MX_GPIO_Init+0x13c>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	210e      	movs	r1, #14
 800116e:	481f      	ldr	r0, [pc, #124]	; (80011ec <MX_GPIO_Init+0x140>)
 8001170:	f002 fc16 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117a:	481d      	ldr	r0, [pc, #116]	; (80011f0 <MX_GPIO_Init+0x144>)
 800117c:	f002 fc10 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	481b      	ldr	r0, [pc, #108]	; (80011f4 <MX_GPIO_Init+0x148>)
 8001186:	f002 fc0b 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 800118a:	230e      	movs	r3, #14
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001192:	2301      	movs	r3, #1
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001196:	2301      	movs	r3, #1
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4812      	ldr	r0, [pc, #72]	; (80011ec <MX_GPIO_Init+0x140>)
 80011a2:	f002 fa61 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_GPIO_Init+0x144>)
 80011c0:	f002 fa52 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011cc:	2302      	movs	r3, #2
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_GPIO_Init+0x148>)
 80011dc:	f002 fa44 	bl	8003668 <HAL_GPIO_Init>

}
 80011e0:	bf00      	nop
 80011e2:	3730      	adds	r7, #48	; 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40020800 	.word	0x40020800

080011f8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8001218:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <MX_FSMC_Init+0xf8>)
 800121a:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <MX_FSMC_Init+0xfc>)
 800121c:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 800121e:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <MX_FSMC_Init+0xf8>)
 8001220:	2210      	movs	r2, #16
 8001222:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001224:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <MX_FSMC_Init+0xf8>)
 8001226:	2202      	movs	r2, #2
 8001228:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800122a:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <MX_FSMC_Init+0xf8>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <MX_FSMC_Init+0xf8>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001236:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <MX_FSMC_Init+0xf8>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800123c:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <MX_FSMC_Init+0xf8>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <MX_FSMC_Init+0xf8>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <MX_FSMC_Init+0xf8>)
 800124a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <MX_FSMC_Init+0xf8>)
 8001252:	2210      	movs	r2, #16
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 131072;
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <MX_FSMC_Init+0xf8>)
 8001258:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800125c:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <MX_FSMC_Init+0xf8>)
 8001260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <MX_FSMC_Init+0xf8>)
 8001268:	2201      	movs	r2, #1
 800126a:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <MX_FSMC_Init+0xf8>)
 800126e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001272:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_FSMC_Init+0xf8>)
 8001276:	2201      	movs	r2, #1
 8001278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800127c:	23fc      	movs	r3, #252	; 0xfc
 800127e:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8001280:	23fc      	movs	r3, #252	; 0xfc
 8001282:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 8001284:	23fc      	movs	r3, #252	; 0xfc
 8001286:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 8001288:	23fc      	movs	r3, #252	; 0xfc
 800128a:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 800128c:	23fc      	movs	r3, #252	; 0xfc
 800128e:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8001290:	23fc      	movs	r3, #252	; 0xfc
 8001292:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 8001294:	23fc      	movs	r3, #252	; 0xfc
 8001296:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 8001298:	23fc      	movs	r3, #252	; 0xfc
 800129a:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800129c:	463a      	mov	r2, r7
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	4619      	mov	r1, r3
 80012a4:	4812      	ldr	r0, [pc, #72]	; (80012f0 <MX_FSMC_Init+0xf8>)
 80012a6:	f002 fbae 	bl	8003a06 <HAL_NAND_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_FSMC_Init+0xbc>
  {
    Error_Handler( );
 80012b0:	f000 fd8a 	bl	8001dc8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  if (HAL_NAND_Read_IDs(&hnand1, &nandID) == HAL_OK) {
 80012b4:	4910      	ldr	r1, [pc, #64]	; (80012f8 <MX_FSMC_Init+0x100>)
 80012b6:	480e      	ldr	r0, [pc, #56]	; (80012f0 <MX_FSMC_Init+0xf8>)
 80012b8:	f000 f824 	bl	8001304 <HAL_NAND_Read_IDs>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d111      	bne.n	80012e6 <MX_FSMC_Init+0xee>

	  nandState = HAL_NAND_GetState(&hnand1);
 80012c2:	480b      	ldr	r0, [pc, #44]	; (80012f0 <MX_FSMC_Init+0xf8>)
 80012c4:	f002 fccb 	bl	8003c5e <HAL_NAND_GetState>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_FSMC_Init+0x104>)
 80012ce:	701a      	strb	r2, [r3, #0]

	  memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 80012d0:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <MX_FSMC_Init+0x108>)
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_FSMC_Init+0xf8>)
 80012d4:	4615      	mov	r5, r2
 80012d6:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80012da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012e2:	e885 0003 	stmia.w	r5, {r0, r1}

  }


  /* USER CODE END FSMC_Init 2 */
}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002a8 	.word	0x200002a8
 80012f4:	a0000060 	.word	0xa0000060
 80012f8:	20000b10 	.word	0x20000b10
 80012fc:	2000002c 	.word	0x2000002c
 8001300:	20000b18 	.word	0x20000b18

08001304 <HAL_NAND_Read_IDs>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef HAL_NAND_Read_IDs(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  __IO uint32_t data = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  __IO uint32_t data1 = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  uint32_t deviceaddress = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hnand);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_NAND_Read_IDs+0x24>
 8001324:	2302      	movs	r3, #2
 8001326:	e04f      	b.n	80013c8 <HAL_NAND_Read_IDs+0xc4>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d101      	bne.n	8001340 <HAL_NAND_Read_IDs+0x3c>
  {
     return HAL_BUSY;
 800133c:	2302      	movs	r3, #2
 800133e:	e043      	b.n	80013c8 <HAL_NAND_Read_IDs+0xc4>
  }

  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b10      	cmp	r3, #16
 8001346:	d103      	bne.n	8001350 <HAL_NAND_Read_IDs+0x4c>
  {
    deviceaddress = NAND_DEVICE1;
 8001348:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	e002      	b.n	8001356 <HAL_NAND_Read_IDs+0x52>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8001350:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001354:	617b      	str	r3, [r7, #20]
  }

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2202      	movs	r2, #2
 800135a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Send Read ID command sequence */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	2290      	movs	r2, #144	; 0x90
 8001366:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]

  /* Read the electronic signature from NAND flash */
  if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d121      	bne.n	80013be <HAL_NAND_Read_IDs+0xba>
  {
    data = *(__IO uint32_t *)deviceaddress;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	613b      	str	r3, [r7, #16]
    data1 = *((__IO uint32_t *)deviceaddress + 4U);
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3310      	adds	r3, #16
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	60fb      	str	r3, [r7, #12]

    /* Return the data read */
    pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	701a      	strb	r2, [r3, #0]
    pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	b2da      	uxtb	r2, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	705a      	strb	r2, [r3, #1]
    pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	0c1b      	lsrs	r3, r3, #16
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	709a      	strb	r2, [r3, #2]
    pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	0e1b      	lsrs	r3, r3, #24
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	70da      	strb	r2, [r3, #3]
    pNAND_ID->Plane_Id  = ADDR_1ST_CYCLE(data1);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	711a      	strb	r2, [r3, #4]

    hnand->State = HAL_NAND_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Update the NAND controller state */
  //hnand->State = HAL_NAND_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	371c      	adds	r7, #28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <errLedOn>:


//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	if (on)
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d006      	beq.n	80013f2 <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	4807      	ldr	r0, [pc, #28]	; (8001408 <errLedOn+0x34>)
 80013ec:	f002 fad8 	bl	80039a0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 80013f0:	e005      	b.n	80013fe <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <errLedOn+0x34>)
 80013fa:	f002 fad1 	bl	80039a0 <HAL_GPIO_WritePin>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40020c00 	.word	0x40020c00

0800140c <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	return secCounter;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <get_secCounter+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	200002f8 	.word	0x200002f8

08001424 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	secCounter++;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <inc_secCounter+0x18>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a03      	ldr	r2, [pc, #12]	; (800143c <inc_secCounter+0x18>)
 8001430:	6013      	str	r3, [r2, #0]
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	200002f8 	.word	0x200002f8

08001440 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	return msCounter;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <get_msCounter+0x18>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000300 	.word	0x20000300

0800145c <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	msCounter++;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <inc_msCounter+0x20>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	1c50      	adds	r0, r2, #1
 8001468:	f143 0100 	adc.w	r1, r3, #0
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <inc_msCounter+0x20>)
 800146e:	e9c3 0100 	strd	r0, r1, [r3]
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	20000300 	.word	0x20000300

08001480 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8001488:	f7ff ffc0 	bl	800140c <get_secCounter>
 800148c:	4602      	mov	r2, r0
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 80014a2:	f7ff ffb3 	bl	800140c <get_secCounter>
 80014a6:	4602      	mov	r2, r0
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4293      	cmp	r3, r2
 80014ac:	bf94      	ite	ls
 80014ae:	2301      	movls	r3, #1
 80014b0:	2300      	movhi	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b094      	sub	sp, #80	; 0x50
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	struct tm ts;
	time_t ep = (time_t)usec;
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	2000      	movs	r0, #0
 80014c8:	460a      	mov	r2, r1
 80014ca:	4603      	mov	r3, r0
 80014cc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	gmtime_r(&ep, &ts);
 80014d0:	f107 0214 	add.w	r2, r7, #20
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f008 ff24 	bl	800a328 <gmtime_r>

	sDate.WeekDay = ts.tm_wday;
 80014e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	sDate.Month   = ts.tm_mon + 1;
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	3301      	adds	r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	sDate.Date    = ts.tm_mday;
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	sDate.Year    = ts.tm_year;
 80014fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001504:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001508:	2200      	movs	r2, #0
 800150a:	4619      	mov	r1, r3
 800150c:	481a      	ldr	r0, [pc, #104]	; (8001578 <set_Date+0xbc>)
 800150e:	f003 fb0d 	bl	8004b2c <HAL_RTC_SetDate>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <set_Date+0x6a>
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <set_Date+0xc0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	4a16      	ldr	r2, [pc, #88]	; (800157c <set_Date+0xc0>)
 8001522:	6013      	str	r3, [r2, #0]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8001524:	e023      	b.n	800156e <set_Date+0xb2>
		sTime.Hours   = ts.tm_hour + tZone;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <set_Date+0xc4>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		sTime.Minutes = ts.tm_min;
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		sTime.Seconds = ts.tm_sec;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001546:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	480a      	ldr	r0, [pc, #40]	; (8001578 <set_Date+0xbc>)
 8001550:	f003 f9d1 	bl	80048f6 <HAL_RTC_SetTime>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <set_Date+0xac>
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <set_Date+0xc0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	4a06      	ldr	r2, [pc, #24]	; (800157c <set_Date+0xc0>)
 8001564:	6013      	str	r3, [r2, #0]
}
 8001566:	e002      	b.n	800156e <set_Date+0xb2>
			setDate = true;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <set_Date+0xc8>)
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
}
 800156e:	bf00      	nop
 8001570:	3750      	adds	r7, #80	; 0x50
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200000e4 	.word	0x200000e4
 800157c:	200002f4 	.word	0x200002f4
 8001580:	20000b0d 	.word	0x20000b0d
 8001584:	20000b0c 	.word	0x20000b0c

08001588 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b093      	sub	sp, #76	; 0x4c
 800158c:	af04      	add	r7, sp, #16
 800158e:	6078      	str	r0, [r7, #4]
int ret = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8001594:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <sec2str+0x10c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	f083 0301 	eor.w	r3, r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d040      	beq.n	8001624 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 80015a2:	f7ff ff33 	bl	800140c <get_secCounter>
 80015a6:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	4a3b      	ldr	r2, [pc, #236]	; (8001698 <sec2str+0x110>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	0c1b      	lsrs	r3, r3, #16
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	4a38      	ldr	r2, [pc, #224]	; (8001698 <sec2str+0x110>)
 80015b8:	fba2 1203 	umull	r1, r2, r2, r3
 80015bc:	0c12      	lsrs	r2, r2, #16
 80015be:	4937      	ldr	r1, [pc, #220]	; (800169c <sec2str+0x114>)
 80015c0:	fb01 f202 	mul.w	r2, r1, r2
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ca:	4a35      	ldr	r2, [pc, #212]	; (80016a0 <sec2str+0x118>)
 80015cc:	fba2 2303 	umull	r2, r3, r2, r3
 80015d0:	0adb      	lsrs	r3, r3, #11
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80015d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d6:	4a32      	ldr	r2, [pc, #200]	; (80016a0 <sec2str+0x118>)
 80015d8:	fba2 1203 	umull	r1, r2, r2, r3
 80015dc:	0ad2      	lsrs	r2, r2, #11
 80015de:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80015e2:	fb01 f202 	mul.w	r2, r1, r2
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80015ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ec:	4a2d      	ldr	r2, [pc, #180]	; (80016a4 <sec2str+0x11c>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80015f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <sec2str+0x11c>)
 80015fa:	fba3 1302 	umull	r1, r3, r3, r2
 80015fe:	0959      	lsrs	r1, r3, #5
 8001600:	460b      	mov	r3, r1
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a5b      	subs	r3, r3, r1
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu ", day, hour, min, sec);
 800160c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001618:	4923      	ldr	r1, [pc, #140]	; (80016a8 <sec2str+0x120>)
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f009 f8e4 	bl	800a7e8 <siprintf>
 8001620:	6378      	str	r0, [r7, #52]	; 0x34
 8001622:	e032      	b.n	800168a <sec2str+0x102>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	2200      	movs	r2, #0
 800162a:	4619      	mov	r1, r3
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <sec2str+0x124>)
 800162e:	f003 fb24 	bl	8004c7a <HAL_RTC_GetDate>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <sec2str+0xbe>
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <sec2str+0x128>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <sec2str+0x128>)
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e021      	b.n	800168a <sec2str+0x102>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	2200      	movs	r2, #0
 800164c:	4619      	mov	r1, r3
 800164e:	4817      	ldr	r0, [pc, #92]	; (80016ac <sec2str+0x124>)
 8001650:	f003 fa0e 	bl	8004a70 <HAL_RTC_GetTime>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <sec2str+0xe0>
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <sec2str+0x128>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <sec2str+0x128>)
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e010      	b.n	800168a <sec2str+0x102>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
								sDate.Date, sDate.Month,
 8001668:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 800166a:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 800166c:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 800166e:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001670:	7c3b      	ldrb	r3, [r7, #16]
 8001672:	7c7a      	ldrb	r2, [r7, #17]
 8001674:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 8001676:	9102      	str	r1, [sp, #8]
 8001678:	9201      	str	r2, [sp, #4]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	4623      	mov	r3, r4
 800167e:	4602      	mov	r2, r0
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <sec2str+0x12c>)
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f009 f8b0 	bl	800a7e8 <siprintf>
 8001688:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800168a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800168c:	4618      	mov	r0, r3
 800168e:	373c      	adds	r7, #60	; 0x3c
 8001690:	46bd      	mov	sp, r7
 8001692:	bd90      	pop	{r4, r7, pc}
 8001694:	20000b0c 	.word	0x20000b0c
 8001698:	c22e4507 	.word	0xc22e4507
 800169c:	00015180 	.word	0x00015180
 80016a0:	91a2b3c5 	.word	0x91a2b3c5
 80016a4:	88888889 	.word	0x88888889
 80016a8:	0800b170 	.word	0x0800b170
 80016ac:	200000e4 	.word	0x200000e4
 80016b0:	200002f4 	.word	0x200002f4
 80016b4:	0800b188 	.word	0x0800b188

080016b8 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(uint8_t addTime, const char *fmt, ...)
{
 80016b8:	b40e      	push	{r1, r2, r3}
 80016ba:	b590      	push	{r4, r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 80016c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c8:	613b      	str	r3, [r7, #16]
int dl = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 80016ce:	4b29      	ldr	r3, [pc, #164]	; (8001774 <Report+0xbc>)
 80016d0:	60fb      	str	r3, [r7, #12]

	//if (buf) {
	    *buf = '\0';
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
		if (addTime) {
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d012      	beq.n	8001704 <Report+0x4c>
			dl = sec2str(buf);
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff ff52 	bl	8001588 <sec2str>
 80016e4:	6178      	str	r0, [r7, #20]
			strcat(buf, "| ");
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f7fe fd72 	bl	80001d0 <strlen>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a20      	ldr	r2, [pc, #128]	; (8001778 <Report+0xc0>)
 80016f6:	8811      	ldrh	r1, [r2, #0]
 80016f8:	7892      	ldrb	r2, [r2, #2]
 80016fa:	8019      	strh	r1, [r3, #0]
 80016fc:	709a      	strb	r2, [r3, #2]
			dl += 2;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3302      	adds	r3, #2
 8001702:	617b      	str	r3, [r7, #20]
		}

		va_start(args, fmt);
 8001704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001708:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	18d0      	adds	r0, r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	1ad1      	subs	r1, r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171a:	f009 f96f 	bl	800a9fc <vsniprintf>

		uartRdy = false;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <Report+0xc4>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <Report+0xc8>)
 8001726:	681c      	ldr	r4, [r3, #0]
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7fe fd51 	bl	80001d0 <strlen>
 800172e:	4603      	mov	r3, r0
 8001730:	b29b      	uxth	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	68f9      	ldr	r1, [r7, #12]
 8001736:	4620      	mov	r0, r4
 8001738:	f004 fd6e 	bl	8006218 <HAL_UART_Transmit_DMA>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <Report+0x9e>
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <Report+0xcc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <Report+0xcc>)
 800174c:	6013      	str	r3, [r2, #0]
		while (!uartRdy) HAL_Delay(1);
 800174e:	e002      	b.n	8001756 <Report+0x9e>
 8001750:	2001      	movs	r0, #1
 8001752:	f001 fa81 	bl	8002c58 <HAL_Delay>
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <Report+0xc4>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f5      	bne.n	8001750 <Report+0x98>
		va_end(args);

	//	free(buf);
	//}

	return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001770:	b003      	add	sp, #12
 8001772:	4770      	bx	lr
 8001774:	20000308 	.word	0x20000308
 8001778:	0800b1a4 	.word	0x0800b1a4
 800177c:	20000010 	.word	0x20000010
 8001780:	20000020 	.word	0x20000020
 8001784:	200002f4 	.word	0x200002f4

08001788 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a38      	ldr	r2, [pc, #224]	; (8001878 <HAL_UART_RxCpltCallback+0xf0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d169      	bne.n	800186e <HAL_UART_RxCpltCallback+0xe6>
		rxBuf[ruk++] = (char)rxByte;
 800179a:	4b38      	ldr	r3, [pc, #224]	; (800187c <HAL_UART_RxCpltCallback+0xf4>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	b291      	uxth	r1, r2
 80017a2:	4a36      	ldr	r2, [pc, #216]	; (800187c <HAL_UART_RxCpltCallback+0xf4>)
 80017a4:	8011      	strh	r1, [r2, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <HAL_UART_RxCpltCallback+0xf8>)
 80017aa:	7819      	ldrb	r1, [r3, #0]
 80017ac:	4b35      	ldr	r3, [pc, #212]	; (8001884 <HAL_UART_RxCpltCallback+0xfc>)
 80017ae:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 80017b0:	4b33      	ldr	r3, [pc, #204]	; (8001880 <HAL_UART_RxCpltCallback+0xf8>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b0a      	cmp	r3, #10
 80017b6:	d155      	bne.n	8001864 <HAL_UART_RxCpltCallback+0xdc>
			char *uk = NULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
			if (strstr(rxBuf, s_restart)) {
 80017bc:	4b32      	ldr	r3, [pc, #200]	; (8001888 <HAL_UART_RxCpltCallback+0x100>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4830      	ldr	r0, [pc, #192]	; (8001884 <HAL_UART_RxCpltCallback+0xfc>)
 80017c4:	f009 f84b 	bl	800a85e <strstr>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <HAL_UART_RxCpltCallback+0x52>
				flags.restart = 1;
 80017ce:	4a2f      	ldr	r2, [pc, #188]	; (800188c <HAL_UART_RxCpltCallback+0x104>)
 80017d0:	7813      	ldrb	r3, [r2, #0]
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	7013      	strb	r3, [r2, #0]
 80017d8:	e03b      	b.n	8001852 <HAL_UART_RxCpltCallback+0xca>
			} else if ((uk = strstr(rxBuf, s_epoch))) {
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_UART_RxCpltCallback+0x108>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4619      	mov	r1, r3
 80017e0:	4828      	ldr	r0, [pc, #160]	; (8001884 <HAL_UART_RxCpltCallback+0xfc>)
 80017e2:	f009 f83c 	bl	800a85e <strstr>
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d031      	beq.n	8001852 <HAL_UART_RxCpltCallback+0xca>
				uk += strlen(s_epoch);
 80017ee:	4b28      	ldr	r3, [pc, #160]	; (8001890 <HAL_UART_RxCpltCallback+0x108>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fcec 	bl	80001d0 <strlen>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
				if (*uk != '?') {
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b3f      	cmp	r3, #63	; 0x3f
 8001806:	d01c      	beq.n	8001842 <HAL_UART_RxCpltCallback+0xba>
					if (strlen(uk) < 10) setDate = false;
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f7fe fce1 	bl	80001d0 <strlen>
 800180e:	4603      	mov	r3, r0
 8001810:	2b09      	cmp	r3, #9
 8001812:	d803      	bhi.n	800181c <HAL_UART_RxCpltCallback+0x94>
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <HAL_UART_RxCpltCallback+0x10c>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	e01a      	b.n	8001852 <HAL_UART_RxCpltCallback+0xca>
					else {
						uint32_t ep = (uint32_t)atol(uk);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f008 fd71 	bl	800a304 <atol>
 8001822:	4603      	mov	r3, r0
 8001824:	60bb      	str	r3, [r7, #8]
						if (ep > epoch) {
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_UART_RxCpltCallback+0x110>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	429a      	cmp	r2, r3
 800182e:	d910      	bls.n	8001852 <HAL_UART_RxCpltCallback+0xca>
							epoch = ep;
 8001830:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_UART_RxCpltCallback+0x110>)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	6013      	str	r3, [r2, #0]
							flags.time_set = 1;
 8001836:	4a15      	ldr	r2, [pc, #84]	; (800188c <HAL_UART_RxCpltCallback+0x104>)
 8001838:	7813      	ldrb	r3, [r2, #0]
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	7013      	strb	r3, [r2, #0]
 8001840:	e007      	b.n	8001852 <HAL_UART_RxCpltCallback+0xca>
						}
					}
				} else {
					setDate = true;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_UART_RxCpltCallback+0x10c>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
					flags.time_show = 1;
 8001848:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_UART_RxCpltCallback+0x104>)
 800184a:	7813      	ldrb	r3, [r2, #0]
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	7013      	strb	r3, [r2, #0]
				}
			}
			ruk = 0;
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_UART_RxCpltCallback+0xf4>)
 8001854:	2200      	movs	r2, #0
 8001856:	801a      	strh	r2, [r3, #0]
			memset(rxBuf, 0, MAX_UART_BUF);
 8001858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185c:	2100      	movs	r1, #0
 800185e:	4809      	ldr	r0, [pc, #36]	; (8001884 <HAL_UART_RxCpltCallback+0xfc>)
 8001860:	f008 fe4a 	bl	800a4f8 <memset>
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8001864:	2201      	movs	r2, #1
 8001866:	4906      	ldr	r1, [pc, #24]	; (8001880 <HAL_UART_RxCpltCallback+0xf8>)
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f004 fca4 	bl	80061b6 <HAL_UART_Receive_IT>
	}
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40004800 	.word	0x40004800
 800187c:	20000b0a 	.word	0x20000b0a
 8001880:	20000b08 	.word	0x20000b08
 8001884:	20000708 	.word	0x20000708
 8001888:	20000008 	.word	0x20000008
 800188c:	200002f0 	.word	0x200002f0
 8001890:	2000000c 	.word	0x2000000c
 8001894:	20000b0c 	.word	0x20000b0c
 8001898:	20000014 	.word	0x20000014

0800189c <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <HAL_UART_TxCpltCallback+0x24>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d102      	bne.n	80018b4 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_UART_TxCpltCallback+0x28>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
	}
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40004800 	.word	0x40004800
 80018c4:	20000010 	.word	0x20000010

080018c8 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
/**/
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a05      	ldr	r2, [pc, #20]	; (80018ec <HAL_SPI_TxCpltCallback+0x24>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d102      	bne.n	80018e0 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_SPI_TxCpltCallback+0x28>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
	}
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40013000 	.word	0x40013000
 80018f0:	20000011 	.word	0x20000011
 80018f4:	00000000 	.word	0x00000000

080018f8 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	b095      	sub	sp, #84	; 0x54
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	*(uint8_t *)&flags = 0;
 8001900:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <defThread+0x118>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]

	char *stx = (char *)calloc(1, 256);
 8001906:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190a:	2001      	movs	r0, #1
 800190c:	f008 fcfe 	bl	800a30c <calloc>
 8001910:	4603      	mov	r3, r0
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
	if (!stx) devError |= devMEM;
 8001914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <defThread+0x2e>
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <defThread+0x11c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	4a3c      	ldr	r2, [pc, #240]	; (8001a14 <defThread+0x11c>)
 8001924:	6013      	str	r3, [r2, #0]

	HAL_Delay(1000);
 8001926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800192a:	f001 f995 	bl	8002c58 <HAL_Delay>
	Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 800192e:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <defThread+0x120>)
 8001930:	681c      	ldr	r4, [r3, #0]
 8001932:	f008 fbb7 	bl	800a0a4 <xPortGetFreeHeapSize>
 8001936:	4602      	mov	r2, r0
 8001938:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <defThread+0x124>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	9200      	str	r2, [sp, #0]
 8001946:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <defThread+0x128>)
 8001948:	4622      	mov	r2, r4
 800194a:	4936      	ldr	r1, [pc, #216]	; (8001a24 <defThread+0x12c>)
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff feb3 	bl	80016b8 <Report>


	char cid[32];
	if (nandState == HAL_NAND_STATE_READY) {
 8001952:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <defThread+0x130>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d174      	bne.n	8001a44 <defThread+0x14c>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 800195a:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <defThread+0x134>)
 800195c:	785b      	ldrb	r3, [r3, #1]
 800195e:	22f1      	movs	r2, #241	; 0xf1
 8001960:	4293      	cmp	r3, r2
 8001962:	d108      	bne.n	8001976 <defThread+0x7e>
 8001964:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <defThread+0x138>)
 8001966:	6819      	ldr	r1, [r3, #0]
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2220      	movs	r2, #32
 800196e:	4618      	mov	r0, r3
 8001970:	f008 ff62 	bl	800a838 <strncpy>
 8001974:	e006      	b.n	8001984 <defThread+0x8c>
		                               else strcpy(cid, "UNKNOWN");
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	4a2e      	ldr	r2, [pc, #184]	; (8001a34 <defThread+0x13c>)
 800197c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001980:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8001984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001986:	4a2c      	ldr	r2, [pc, #176]	; (8001a38 <defThread+0x140>)
 8001988:	6810      	ldr	r0, [r2, #0]
 800198a:	6018      	str	r0, [r3, #0]
 800198c:	8892      	ldrh	r2, [r2, #4]
 800198e:	809a      	strh	r2, [r3, #4]
		uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <defThread+0x134>)
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8001994:	2300      	movs	r3, #0
 8001996:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800199a:	e015      	b.n	80019c8 <defThread+0xd0>
 800199c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800199e:	f7fe fc17 	bl	80001d0 <strlen>
 80019a2:	4602      	mov	r2, r0
 80019a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a6:	1898      	adds	r0, r3, r2
 80019a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80019ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ae:	4413      	add	r3, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4921      	ldr	r1, [pc, #132]	; (8001a3c <defThread+0x144>)
 80019b6:	f008 ff17 	bl	800a7e8 <siprintf>
 80019ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	3301      	adds	r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80019c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d9e5      	bls.n	800199c <defThread+0xa4>
		sprintf(stx+strlen(stx),
 80019d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019d2:	f7fe fbfd 	bl	80001d0 <strlen>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019da:	1898      	adds	r0, r3, r2
				"\n\tMakerID=%02X\n\tDevice_Id=%02X '%s'\n\tThird_Id=%02X\n\tFourth_Id=%02X\n\tPlane_Id=%02X",
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <defThread+0x134>)
 80019de:	781b      	ldrb	r3, [r3, #0]
		sprintf(stx+strlen(stx),
 80019e0:	461c      	mov	r4, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <defThread+0x134>)
 80019e4:	785b      	ldrb	r3, [r3, #1]
		sprintf(stx+strlen(stx),
 80019e6:	461d      	mov	r5, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <defThread+0x134>)
 80019ea:	789b      	ldrb	r3, [r3, #2]
		sprintf(stx+strlen(stx),
 80019ec:	461a      	mov	r2, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <defThread+0x134>)
 80019f0:	78db      	ldrb	r3, [r3, #3]
		sprintf(stx+strlen(stx),
 80019f2:	4619      	mov	r1, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <defThread+0x134>)
 80019f6:	791b      	ldrb	r3, [r3, #4]
		sprintf(stx+strlen(stx),
 80019f8:	9303      	str	r3, [sp, #12]
 80019fa:	9102      	str	r1, [sp, #8]
 80019fc:	9201      	str	r2, [sp, #4]
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	462b      	mov	r3, r5
 8001a06:	4622      	mov	r2, r4
 8001a08:	490d      	ldr	r1, [pc, #52]	; (8001a40 <defThread+0x148>)
 8001a0a:	f008 feed 	bl	800a7e8 <siprintf>
 8001a0e:	e026      	b.n	8001a5e <defThread+0x166>
 8001a10:	200002f0 	.word	0x200002f0
 8001a14:	200002f4 	.word	0x200002f4
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	0800d454 	.word	0x0800d454
 8001a24:	0800b1a8 	.word	0x0800b1a8
 8001a28:	2000002c 	.word	0x2000002c
 8001a2c:	20000b10 	.word	0x20000b10
 8001a30:	20000030 	.word	0x20000030
 8001a34:	0800b1d4 	.word	0x0800b1d4
 8001a38:	0800b1dc 	.word	0x0800b1dc
 8001a3c:	0800b1e4 	.word	0x0800b1e4
 8001a40:	0800b1ec 	.word	0x0800b1ec
	} else {
			sprintf(stx,
					"NAND: Error nandStatus='%s'(%d)",
					nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8001a44:	4ba8      	ldr	r3, [pc, #672]	; (8001ce8 <defThread+0x3f0>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx,
 8001a4c:	4aa7      	ldr	r2, [pc, #668]	; (8001cec <defThread+0x3f4>)
 8001a4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a52:	4ba5      	ldr	r3, [pc, #660]	; (8001ce8 <defThread+0x3f0>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	49a6      	ldr	r1, [pc, #664]	; (8001cf0 <defThread+0x3f8>)
 8001a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a5a:	f008 fec5 	bl	800a7e8 <siprintf>
	}
	Report(1, "%s%s", stx, eol);
 8001a5e:	4ba5      	ldr	r3, [pc, #660]	; (8001cf4 <defThread+0x3fc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a64:	49a4      	ldr	r1, [pc, #656]	; (8001cf8 <defThread+0x400>)
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff fe26 	bl	80016b8 <Report>
	char stz[128] = {0};
#endif
	//fntKey = &Font_16x26;
	//tFont = &Font_11x18;
	//ipsOn(0);
	uint16_t err_color = BLACK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8001a70:	4ba2      	ldr	r3, [pc, #648]	; (8001cfc <defThread+0x404>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	785b      	ldrb	r3, [r3, #1]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a7c:	9200      	str	r2, [sp, #0]
 8001a7e:	22ef      	movs	r2, #239	; 0xef
 8001a80:	2100      	movs	r1, #0
 8001a82:	2000      	movs	r0, #0
 8001a84:	f000 fc31 	bl	80022ea <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8001a88:	4b9c      	ldr	r3, [pc, #624]	; (8001cfc <defThread+0x404>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	785b      	ldrb	r3, [r3, #1]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001a94:	b299      	uxth	r1, r3
 8001a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	23ef      	movs	r3, #239	; 0xef
 8001a9e:	22ef      	movs	r2, #239	; 0xef
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f000 fc22 	bl	80022ea <ST7789_Fill>

	sprintf(stx, "NAND : %s", cid);
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4994      	ldr	r1, [pc, #592]	; (8001d00 <defThread+0x408>)
 8001aae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ab0:	f008 fe9a 	bl	800a7e8 <siprintf>
	mkLineCenter(stx, ST7789_WIDTH / tFont->width);
 8001ab4:	4b93      	ldr	r3, [pc, #588]	; (8001d04 <defThread+0x40c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	23f0      	movs	r3, #240	; 0xf0
 8001abe:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ac8:	f000 fd1c 	bl	8002504 <mkLineCenter>
	//sprintf(stx+strlen(stx), "Maker:0x%02X\nchipID:0x%02X\n3-rd:0x%02X\n4-th:0x%02X\n5-th:0x%02X",
	//		                 nandID.Maker_Id, nandID.Device_Id, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
	sprintf(stx+strlen(stx),
 8001acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ace:	f7fe fb7f 	bl	80001d0 <strlen>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad6:	189c      	adds	r4, r3, r2
 8001ad8:	4b8b      	ldr	r3, [pc, #556]	; (8001d08 <defThread+0x410>)
 8001ada:	681d      	ldr	r5, [r3, #0]
 8001adc:	4b8a      	ldr	r3, [pc, #552]	; (8001d08 <defThread+0x410>)
 8001ade:	685e      	ldr	r6, [r3, #4]
			"PageSize:%lu\nSpareAreaSize:%lu\nBlockSize:%lu KB\nBlockNbr:%lu\nPlaneNbr:%lu\nPlaneSize:%lu MB",
			chipConf.PageSize,
			chipConf.SpareAreaSize,
			chipConf.BlockSize / 1024,
 8001ae0:	4b89      	ldr	r3, [pc, #548]	; (8001d08 <defThread+0x410>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
	sprintf(stx+strlen(stx),
 8001ae4:	0a9b      	lsrs	r3, r3, #10
 8001ae6:	4a88      	ldr	r2, [pc, #544]	; (8001d08 <defThread+0x410>)
 8001ae8:	68d2      	ldr	r2, [r2, #12]
 8001aea:	4987      	ldr	r1, [pc, #540]	; (8001d08 <defThread+0x410>)
 8001aec:	6909      	ldr	r1, [r1, #16]
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			chipConf.PlaneSize / 1024 / 1024);
 8001aee:	4886      	ldr	r0, [pc, #536]	; (8001d08 <defThread+0x410>)
 8001af0:	6940      	ldr	r0, [r0, #20]
	sprintf(stx+strlen(stx),
 8001af2:	0d00      	lsrs	r0, r0, #20
 8001af4:	9003      	str	r0, [sp, #12]
 8001af6:	9102      	str	r1, [sp, #8]
 8001af8:	9201      	str	r2, [sp, #4]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	4633      	mov	r3, r6
 8001afe:	462a      	mov	r2, r5
 8001b00:	4982      	ldr	r1, [pc, #520]	; (8001d0c <defThread+0x414>)
 8001b02:	4620      	mov	r0, r4
 8001b04:	f008 fe70 	bl	800a7e8 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8001b08:	4b7e      	ldr	r3, [pc, #504]	; (8001d04 <defThread+0x40c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	785b      	ldrb	r3, [r3, #1]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fe32 	bl	8000778 <__aeabi_i2d>
 8001b14:	4604      	mov	r4, r0
 8001b16:	460d      	mov	r5, r1
 8001b18:	4b7a      	ldr	r3, [pc, #488]	; (8001d04 <defThread+0x40c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	785b      	ldrb	r3, [r3, #1]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fe2a 	bl	8000778 <__aeabi_i2d>
 8001b24:	a36e      	add	r3, pc, #440	; (adr r3, 8001ce0 <defThread+0x3e8>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fba9 	bl	8000280 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f7fe fcd3 	bl	80004e0 <__adddf3>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7fe fe83 	bl	800084c <__aeabi_d2uiz>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b298      	uxth	r0, r3
 8001b4a:	4b6e      	ldr	r3, [pc, #440]	; (8001d04 <defThread+0x40c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a70      	ldr	r2, [pc, #448]	; (8001d10 <defThread+0x418>)
 8001b50:	8812      	ldrh	r2, [r2, #0]
 8001b52:	43d2      	mvns	r2, r2
 8001b54:	b292      	uxth	r2, r2
 8001b56:	496e      	ldr	r1, [pc, #440]	; (8001d10 <defThread+0x418>)
 8001b58:	8809      	ldrh	r1, [r1, #0]
 8001b5a:	9102      	str	r1, [sp, #8]
 8001b5c:	9201      	str	r2, [sp, #4]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	9200      	str	r2, [sp, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b66:	4601      	mov	r1, r0
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f000 fc75 	bl	8002458 <ST7789_WriteString>
					   stx,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f000 fa2c 	bl	8001fcc <ipsOn>

	bool led = false;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint32_t tmr = get_tmr(1);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f7ff fc80 	bl	8001480 <get_tmr>
 8001b80:	6378      	str	r0, [r7, #52]	; 0x34

  /* Infinite loop */

  while (1) {

	  if (check_tmr(tmr)) {
 8001b82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b84:	f7ff fc89 	bl	800149a <check_tmr>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d056      	beq.n	8001c3c <defThread+0x344>
		  tmr = get_tmr(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7ff fc76 	bl	8001480 <get_tmr>
 8001b94:	6378      	str	r0, [r7, #52]	; 0x34
		  //
		  sec2str(stx);
 8001b96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b98:	f7ff fcf6 	bl	8001588 <sec2str>
#ifdef SET_SWV
		  strcpy(stz, stx);
#endif
		  ST7789_WriteString(8, 0, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 8001b9c:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <defThread+0x404>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	23f0      	movs	r3, #240	; 0xf0
 8001ba6:	fb93 f3f2 	sdiv	r3, r3, r2
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4619      	mov	r1, r3
 8001bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bb0:	f000 fca8 	bl	8002504 <mkLineCenter>
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <defThread+0x404>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001bbe:	9202      	str	r2, [sp, #8]
 8001bc0:	221f      	movs	r2, #31
 8001bc2:	9201      	str	r2, [sp, #4]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	460a      	mov	r2, r1
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2008      	movs	r0, #8
 8001bd0:	f000 fc42 	bl	8002458 <ST7789_WriteString>

		  sprintf(stx, "Error: 0x%04X", (unsigned int)devError);
 8001bd4:	4b4f      	ldr	r3, [pc, #316]	; (8001d14 <defThread+0x41c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	494f      	ldr	r1, [pc, #316]	; (8001d18 <defThread+0x420>)
 8001bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bde:	f008 fe03 	bl	800a7e8 <siprintf>
		  if (devError) err_color = RED; else err_color = BLACK;
 8001be2:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <defThread+0x41c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <defThread+0x2fa>
 8001bea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001bee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001bf0:	e001      	b.n	8001bf6 <defThread+0x2fe>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	87bb      	strh	r3, [r7, #60]	; 0x3c
		  ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8001bf6:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <defThread+0x404>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	785b      	ldrb	r3, [r3, #1]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001c02:	b29c      	uxth	r4, r3
 8001c04:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <defThread+0x404>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	23f0      	movs	r3, #240	; 0xf0
 8001c0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4619      	mov	r1, r3
 8001c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c18:	f000 fc74 	bl	8002504 <mkLineCenter>
 8001c1c:	4601      	mov	r1, r0
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <defThread+0x404>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c26:	9202      	str	r2, [sp, #8]
 8001c28:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001c2a:	9201      	str	r2, [sp, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	9200      	str	r2, [sp, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	460a      	mov	r2, r1
 8001c34:	4621      	mov	r1, r4
 8001c36:	2000      	movs	r0, #0
 8001c38:	f000 fc0e 	bl	8002458 <ST7789_WriteString>
		  //puts("Second...");
		  printf("[%s] %s%s", __func__, stz, eol);
#endif
	  }

	  if (devError) led = true; else led = false;
 8001c3c:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <defThread+0x41c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <defThread+0x354>
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001c4a:	e002      	b.n	8001c52 <defThread+0x35a>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  errLedOn(led);
 8001c52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fbbc 	bl	80013d4 <errLedOn>

	  if (flags.restart) {
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <defThread+0x424>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <defThread+0x386>
		  flags.restart = 0;
 8001c6a:	4a2c      	ldr	r2, [pc, #176]	; (8001d1c <defThread+0x424>)
 8001c6c:	7813      	ldrb	r3, [r2, #0]
 8001c6e:	f36f 0300 	bfc	r3, #0, #1
 8001c72:	7013      	strb	r3, [r2, #0]
		  break;
 8001c74:	bf00      	nop
	  }

	  osDelay(250);
  }

  if (stx) free(stx);
 8001c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d058      	beq.n	8001d2e <defThread+0x436>
 8001c7c:	e054      	b.n	8001d28 <defThread+0x430>
	  } else if (flags.time_set) {
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <defThread+0x424>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00a      	beq.n	8001ca2 <defThread+0x3aa>
		  flags.time_set = 0;
 8001c8c:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <defThread+0x424>)
 8001c8e:	7813      	ldrb	r3, [r2, #0]
 8001c90:	f36f 0341 	bfc	r3, #1, #1
 8001c94:	7013      	strb	r3, [r2, #0]
		  set_Date(epoch);
 8001c96:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <defThread+0x428>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fc0e 	bl	80014bc <set_Date>
 8001ca0:	e018      	b.n	8001cd4 <defThread+0x3dc>
	  } else if (flags.time_show) {
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <defThread+0x424>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d011      	beq.n	8001cd4 <defThread+0x3dc>
		  flags.time_show = 0;
 8001cb0:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <defThread+0x424>)
 8001cb2:	7813      	ldrb	r3, [r2, #0]
 8001cb4:	f36f 0382 	bfc	r3, #2, #1
 8001cb8:	7013      	strb	r3, [r2, #0]
		  if (stx) {
 8001cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <defThread+0x3dc>
			  sec2str(stx);
 8001cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cc2:	f7ff fc61 	bl	8001588 <sec2str>
			  Report(0, "Current date&time -> %s%s", stx, eol);
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <defThread+0x3fc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ccc:	4915      	ldr	r1, [pc, #84]	; (8001d24 <defThread+0x42c>)
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff fcf2 	bl	80016b8 <Report>
	  osDelay(250);
 8001cd4:	20fa      	movs	r0, #250	; 0xfa
 8001cd6:	f005 fcb1 	bl	800763c <osDelay>
	  if (check_tmr(tmr)) {
 8001cda:	e752      	b.n	8001b82 <defThread+0x28a>
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	33333333 	.word	0x33333333
 8001ce4:	3feb3333 	.word	0x3feb3333
 8001ce8:	2000002c 	.word	0x2000002c
 8001cec:	20000034 	.word	0x20000034
 8001cf0:	0800b240 	.word	0x0800b240
 8001cf4:	20000004 	.word	0x20000004
 8001cf8:	0800b260 	.word	0x0800b260
 8001cfc:	20000024 	.word	0x20000024
 8001d00:	0800b268 	.word	0x0800b268
 8001d04:	20000028 	.word	0x20000028
 8001d08:	20000b18 	.word	0x20000b18
 8001d0c:	0800b274 	.word	0x0800b274
 8001d10:	20000b0e 	.word	0x20000b0e
 8001d14:	200002f4 	.word	0x200002f4
 8001d18:	0800b2d0 	.word	0x0800b2d0
 8001d1c:	200002f0 	.word	0x200002f0
 8001d20:	20000014 	.word	0x20000014
 8001d24:	0800b2e0 	.word	0x0800b2e0
  if (stx) free(stx);
 8001d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d2a:	f008 fbcf 	bl	800a4cc <free>

  Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <defThread+0x468>)
 8001d30:	681c      	ldr	r4, [r3, #0]
 8001d32:	f008 f9b7 	bl	800a0a4 <xPortGetFreeHeapSize>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <defThread+0x46c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	9302      	str	r3, [sp, #8]
 8001d3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	9200      	str	r2, [sp, #0]
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <defThread+0x470>)
 8001d48:	4622      	mov	r2, r4
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <defThread+0x474>)
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7ff fcb3 	bl	80016b8 <Report>
  osDelay(1000);
 8001d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d56:	f005 fc71 	bl	800763c <osDelay>

  NVIC_SystemReset();
 8001d5a:	f7fe ff69 	bl	8000c30 <__NVIC_SystemReset>
 8001d5e:	bf00      	nop
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000004 	.word	0x20000004
 8001d68:	0800d454 	.word	0x0800d454
 8001d6c:	0800b2fc 	.word	0x0800b2fc

08001d70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d102      	bne.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001d82:	f000 ff49 	bl	8002c18 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8001d86:	e016      	b.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d90:	d111      	bne.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8001d92:	f7ff fb55 	bl	8001440 <get_msCounter>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	f002 0403 	and.w	r4, r2, #3
 8001d9e:	2500      	movs	r5, #0
 8001da0:	1ee3      	subs	r3, r4, #3
 8001da2:	432b      	orrs	r3, r5
 8001da4:	d105      	bne.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8001da6:	f7ff fb3d 	bl	8001424 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8001daa:	2180      	movs	r1, #128	; 0x80
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001dae:	f001 fe10 	bl	80039d2 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8001db2:	f7ff fb53 	bl	800145c <inc_msCounter>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	40020800 	.word	0x40020800

08001dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8001de2:	2200      	movs	r2, #0
 8001de4:	2104      	movs	r1, #4
 8001de6:	480b      	ldr	r0, [pc, #44]	; (8001e14 <ST7789_WriteCommand+0x3c>)
 8001de8:	f001 fdda 	bl	80039a0 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <ST7789_WriteCommand+0x40>)
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	2396      	movs	r3, #150	; 0x96
 8001df2:	1df9      	adds	r1, r7, #7
 8001df4:	2201      	movs	r2, #1
 8001df6:	f003 f8a8 	bl	8004f4a <HAL_SPI_Transmit>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <ST7789_WriteCommand+0x34>
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <ST7789_WriteCommand+0x44>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f043 0305 	orr.w	r3, r3, #5
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <ST7789_WriteCommand+0x44>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40020000 	.word	0x40020000
 8001e18:	20000018 	.word	0x20000018
 8001e1c:	200002f4 	.word	0x200002f4

08001e20 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	480e      	ldr	r0, [pc, #56]	; (8001e68 <ST7789_WriteCommands+0x48>)
 8001e30:	f001 fdb6 	bl	80039a0 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8001e34:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <ST7789_WriteCommands+0x4c>)
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	2196      	movs	r1, #150	; 0x96
 8001e3e:	460b      	mov	r3, r1
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f003 f87f 	bl	8004f4a <HAL_SPI_Transmit>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <ST7789_WriteCommands+0x3e>
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <ST7789_WriteCommands+0x50>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f043 0305 	orr.w	r3, r3, #5
 8001e5a:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <ST7789_WriteCommands+0x50>)
 8001e5c:	6013      	str	r3, [r2, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	20000018 	.word	0x20000018
 8001e70:	200002f4 	.word	0x200002f4

08001e74 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8001e82:	2201      	movs	r2, #1
 8001e84:	2104      	movs	r1, #4
 8001e86:	481e      	ldr	r0, [pc, #120]	; (8001f00 <ST7789_WriteData+0x8c>)
 8001e88:	f001 fd8a 	bl	80039a0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8001e8c:	e028      	b.n	8001ee0 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e94:	4293      	cmp	r3, r2
 8001e96:	bf28      	it	cs
 8001e98:	4613      	movcs	r3, r2
 8001e9a:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <ST7789_WriteData+0x90>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <ST7789_WriteData+0x94>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	89ba      	ldrh	r2, [r7, #12]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 f98a 	bl	80051c4 <HAL_SPI_Transmit_DMA>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8001eba:	e002      	b.n	8001ec2 <ST7789_WriteData+0x4e>
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f000 fecb 	bl	8002c58 <HAL_Delay>
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <ST7789_WriteData+0x90>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	f083 0301 	eor.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f5      	bne.n	8001ebc <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8001ed0:	89bb      	ldrh	r3, [r7, #12]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001ed8:	89bb      	ldrh	r3, [r7, #12]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1d3      	bne.n	8001e8e <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <ST7789_WriteData+0x84>
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <ST7789_WriteData+0x98>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f043 0305 	orr.w	r3, r3, #5
 8001ef4:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <ST7789_WriteData+0x98>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40020000 	.word	0x40020000
 8001f04:	20000011 	.word	0x20000011
 8001f08:	20000018 	.word	0x20000018
 8001f0c:	200002f4 	.word	0x200002f4

08001f10 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8001f1e:	2201      	movs	r2, #1
 8001f20:	2104      	movs	r1, #4
 8001f22:	4814      	ldr	r0, [pc, #80]	; (8001f74 <ST7789_WriteDataLine+0x64>)
 8001f24:	f001 fd3c 	bl	80039a0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <ST7789_WriteDataLine+0x68>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <ST7789_WriteDataLine+0x6c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	b292      	uxth	r2, r2
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 f943 	bl	80051c4 <HAL_SPI_Transmit_DMA>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8001f42:	e002      	b.n	8001f4a <ST7789_WriteDataLine+0x3a>
 8001f44:	2001      	movs	r0, #1
 8001f46:	f000 fe87 	bl	8002c58 <HAL_Delay>
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <ST7789_WriteDataLine+0x68>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	f083 0301 	eor.w	r3, r3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f5      	bne.n	8001f44 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <ST7789_WriteDataLine+0x5a>
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <ST7789_WriteDataLine+0x70>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f043 0305 	orr.w	r3, r3, #5
 8001f66:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <ST7789_WriteDataLine+0x70>)
 8001f68:	6013      	str	r3, [r2, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40020000 	.word	0x40020000
 8001f78:	20000011 	.word	0x20000011
 8001f7c:	20000018 	.word	0x20000018
 8001f80:	200002f4 	.word	0x200002f4

08001f84 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2104      	movs	r1, #4
 8001f92:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <ST7789_WriteSmallData+0x3c>)
 8001f94:	f001 fd04 	bl	80039a0 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <ST7789_WriteSmallData+0x40>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	2396      	movs	r3, #150	; 0x96
 8001f9e:	1df9      	adds	r1, r7, #7
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f002 ffd2 	bl	8004f4a <HAL_SPI_Transmit>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <ST7789_WriteSmallData+0x34>
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <ST7789_WriteSmallData+0x44>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f043 0305 	orr.w	r3, r3, #5
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <ST7789_WriteSmallData+0x44>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	20000018 	.word	0x20000018
 8001fc8:	200002f4 	.word	0x200002f4

08001fcc <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <ipsOn+0x18>
 8001fdc:	2029      	movs	r0, #41	; 0x29
 8001fde:	f7ff fefb 	bl	8001dd8 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8001fe2:	e002      	b.n	8001fea <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8001fe4:	2028      	movs	r0, #40	; 0x28
 8001fe6:	f7ff fef7 	bl	8001dd8 <ST7789_WriteCommand>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001ffe:	2036      	movs	r0, #54	; 0x36
 8002000:	f7ff feea 	bl	8001dd8 <ST7789_WriteCommand>
	switch (m) {
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d81a      	bhi.n	8002040 <ST7789_SetRotation+0x4c>
 800200a:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <ST7789_SetRotation+0x1c>)
 800200c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002010:	08002021 	.word	0x08002021
 8002014:	08002029 	.word	0x08002029
 8002018:	08002031 	.word	0x08002031
 800201c:	08002039 	.word	0x08002039
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002020:	20c0      	movs	r0, #192	; 0xc0
 8002022:	f7ff ffaf 	bl	8001f84 <ST7789_WriteSmallData>
		break;
 8002026:	e00c      	b.n	8002042 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002028:	20a0      	movs	r0, #160	; 0xa0
 800202a:	f7ff ffab 	bl	8001f84 <ST7789_WriteSmallData>
		break;
 800202e:	e008      	b.n	8002042 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff ffa7 	bl	8001f84 <ST7789_WriteSmallData>
		break;
 8002036:	e004      	b.n	8002042 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002038:	2060      	movs	r0, #96	; 0x60
 800203a:	f7ff ffa3 	bl	8001f84 <ST7789_WriteSmallData>
		break;
 800203e:	e000      	b.n	8002042 <ST7789_SetRotation+0x4e>
	default:
		break;
 8002040:	bf00      	nop
	}
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop

0800204c <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	4604      	mov	r4, r0
 8002054:	4608      	mov	r0, r1
 8002056:	4611      	mov	r1, r2
 8002058:	461a      	mov	r2, r3
 800205a:	4623      	mov	r3, r4
 800205c:	80fb      	strh	r3, [r7, #6]
 800205e:	4603      	mov	r3, r0
 8002060:	80bb      	strh	r3, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	807b      	strh	r3, [r7, #2]
 8002066:	4613      	mov	r3, r2
 8002068:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	82fb      	strh	r3, [r7, #22]
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8002072:	88bb      	ldrh	r3, [r7, #4]
 8002074:	827b      	strh	r3, [r7, #18]
 8002076:	883b      	ldrh	r3, [r7, #0]
 8002078:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800207a:	202a      	movs	r0, #42	; 0x2a
 800207c:	f7ff feac 	bl	8001dd8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8002080:	8afb      	ldrh	r3, [r7, #22]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	b29b      	uxth	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	733b      	strb	r3, [r7, #12]
 800208a:	8afb      	ldrh	r3, [r7, #22]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	737b      	strb	r3, [r7, #13]
 8002090:	8abb      	ldrh	r3, [r7, #20]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	b29b      	uxth	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	73bb      	strb	r3, [r7, #14]
 800209a:	8abb      	ldrh	r3, [r7, #20]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	2104      	movs	r1, #4
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fee4 	bl	8001e74 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80020ac:	202b      	movs	r0, #43	; 0x2b
 80020ae:	f7ff fe93 	bl	8001dd8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80020b2:	8a7b      	ldrh	r3, [r7, #18]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	723b      	strb	r3, [r7, #8]
 80020bc:	8a7b      	ldrh	r3, [r7, #18]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	727b      	strb	r3, [r7, #9]
 80020c2:	8a3b      	ldrh	r3, [r7, #16]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	72bb      	strb	r3, [r7, #10]
 80020cc:	8a3b      	ldrh	r3, [r7, #16]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	2104      	movs	r1, #4
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fecb 	bl	8001e74 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80020de:	202c      	movs	r0, #44	; 0x2c
 80020e0:	f7ff fe7a 	bl	8001dd8 <ST7789_WriteCommand>
}
 80020e4:	bf00      	nop
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd90      	pop	{r4, r7, pc}

080020ec <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 80020f0:	2014      	movs	r0, #20
 80020f2:	f000 fdb1 	bl	8002c58 <HAL_Delay>
    ST7789_RST_Clr();
 80020f6:	2200      	movs	r2, #0
 80020f8:	2102      	movs	r1, #2
 80020fa:	4808      	ldr	r0, [pc, #32]	; (800211c <ST7789_Reset+0x30>)
 80020fc:	f001 fc50 	bl	80039a0 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8002100:	200a      	movs	r0, #10
 8002102:	f000 fda9 	bl	8002c58 <HAL_Delay>
    ST7789_RST_Set();
 8002106:	2201      	movs	r2, #1
 8002108:	2102      	movs	r1, #2
 800210a:	4804      	ldr	r0, [pc, #16]	; (800211c <ST7789_Reset+0x30>)
 800210c:	f001 fc48 	bl	80039a0 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8002110:	2014      	movs	r0, #20
 8002112:	f000 fda1 	bl	8002c58 <HAL_Delay>
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40020000 	.word	0x40020000

08002120 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b08f      	sub	sp, #60	; 0x3c
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800212a:	203a      	movs	r0, #58	; 0x3a
 800212c:	f7ff fe54 	bl	8001dd8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8002130:	2055      	movs	r0, #85	; 0x55
 8002132:	f7ff ff27 	bl	8001f84 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8002136:	20b2      	movs	r0, #178	; 0xb2
 8002138:	f7ff fe4e 	bl	8001dd8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800213c:	4a3a      	ldr	r2, [pc, #232]	; (8002228 <ST7789_Init+0x108>)
 800213e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002142:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002146:	6018      	str	r0, [r3, #0]
 8002148:	3304      	adds	r3, #4
 800214a:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800214c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002150:	2105      	movs	r1, #5
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fe8e 	bl	8001e74 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8002158:	2002      	movs	r0, #2
 800215a:	f7ff ff4b 	bl	8001ff4 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 800215e:	20b7      	movs	r0, #183	; 0xb7
 8002160:	f7ff fe3a 	bl	8001dd8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8002164:	2035      	movs	r0, #53	; 0x35
 8002166:	f7ff ff0d 	bl	8001f84 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800216a:	20bb      	movs	r0, #187	; 0xbb
 800216c:	f7ff fe34 	bl	8001dd8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8002170:	2019      	movs	r0, #25
 8002172:	f7ff ff07 	bl	8001f84 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8002176:	20c0      	movs	r0, #192	; 0xc0
 8002178:	f7ff fe2e 	bl	8001dd8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 800217c:	202c      	movs	r0, #44	; 0x2c
 800217e:	f7ff ff01 	bl	8001f84 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8002182:	20c2      	movs	r0, #194	; 0xc2
 8002184:	f7ff fe28 	bl	8001dd8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8002188:	2001      	movs	r0, #1
 800218a:	f7ff fefb 	bl	8001f84 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 800218e:	20ff      	movs	r0, #255	; 0xff
 8002190:	f7ff fef8 	bl	8001f84 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8002194:	20c3      	movs	r0, #195	; 0xc3
 8002196:	f7ff fe1f 	bl	8001dd8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800219a:	2012      	movs	r0, #18
 800219c:	f7ff fef2 	bl	8001f84 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 80021a0:	20c4      	movs	r0, #196	; 0xc4
 80021a2:	f7ff fe19 	bl	8001dd8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 80021a6:	2020      	movs	r0, #32
 80021a8:	f7ff feec 	bl	8001f84 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 80021ac:	20c6      	movs	r0, #198	; 0xc6
 80021ae:	f7ff fe13 	bl	8001dd8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 80021b2:	200f      	movs	r0, #15
 80021b4:	f7ff fee6 	bl	8001f84 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 80021b8:	20d0      	movs	r0, #208	; 0xd0
 80021ba:	f7ff fe0d 	bl	8001dd8 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 80021be:	20a4      	movs	r0, #164	; 0xa4
 80021c0:	f7ff fee0 	bl	8001f84 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 80021c4:	20a1      	movs	r0, #161	; 0xa1
 80021c6:	f7ff fedd 	bl	8001f84 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80021ca:	20e0      	movs	r0, #224	; 0xe0
 80021cc:	f7ff fe04 	bl	8001dd8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <ST7789_Init+0x10c>)
 80021d2:	f107 041c 	add.w	r4, r7, #28
 80021d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d8:	c407      	stmia	r4!, {r0, r1, r2}
 80021da:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	210e      	movs	r1, #14
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fe46 	bl	8001e74 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80021e8:	20e1      	movs	r0, #225	; 0xe1
 80021ea:	f7ff fdf5 	bl	8001dd8 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <ST7789_Init+0x110>)
 80021f0:	f107 040c 	add.w	r4, r7, #12
 80021f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021f6:	c407      	stmia	r4!, {r0, r1, r2}
 80021f8:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80021fa:	f107 030c 	add.w	r3, r7, #12
 80021fe:	210e      	movs	r1, #14
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fe37 	bl	8001e74 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <ST7789_Init+0x114>)
 8002208:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 800220a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800220e:	2104      	movs	r1, #4
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fe05 	bl	8001e20 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	4618      	mov	r0, r3
 800221a:	f000 f80d 	bl	8002238 <ST7789_Fill_Color>
}
 800221e:	bf00      	nop
 8002220:	373c      	adds	r7, #60	; 0x3c
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}
 8002226:	bf00      	nop
 8002228:	0800b328 	.word	0x0800b328
 800222c:	0800b330 	.word	0x0800b330
 8002230:	0800b340 	.word	0x0800b340
 8002234:	28131121 	.word	0x28131121

08002238 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b0fc      	sub	sp, #496	; 0x1f0
 800223c:	af00      	add	r7, sp, #0
 800223e:	4602      	mov	r2, r0
 8002240:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002244:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002248:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800224a:	23ef      	movs	r3, #239	; 0xef
 800224c:	22ef      	movs	r2, #239	; 0xef
 800224e:	2100      	movs	r1, #0
 8002250:	2000      	movs	r0, #0
 8002252:	f7ff fefb 	bl	800204c <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8002256:	2300      	movs	r3, #0
 8002258:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 800225c:	2300      	movs	r3, #0
 800225e:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002262:	e024      	b.n	80022ae <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8002264:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002268:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	b29b      	uxth	r3, r3
 8002272:	b21a      	sxth	r2, r3
 8002274:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002278:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	b21b      	sxth	r3, r3
 8002282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002286:	b21b      	sxth	r3, r3
 8002288:	4313      	orrs	r3, r2
 800228a:	b219      	sxth	r1, r3
 800228c:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8002290:	f107 020c 	add.w	r2, r7, #12
 8002294:	4413      	add	r3, r2
 8002296:	b28a      	uxth	r2, r1
 8002298:	801a      	strh	r2, [r3, #0]
		i += 2;
 800229a:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 800229e:	3302      	adds	r3, #2
 80022a0:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 80022a4:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 80022a8:	3301      	adds	r3, #1
 80022aa:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80022ae:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 80022b2:	2bef      	cmp	r3, #239	; 0xef
 80022b4:	d9d6      	bls.n	8002264 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80022bc:	e00b      	b.n	80022d6 <ST7789_Fill_Color+0x9e>
 80022be:	f107 030c 	add.w	r3, r7, #12
 80022c2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fe22 	bl	8001f10 <ST7789_WriteDataLine>
 80022cc:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 80022d0:	3301      	adds	r3, #1
 80022d2:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80022d6:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 80022da:	2bef      	cmp	r3, #239	; 0xef
 80022dc:	d9ef      	bls.n	80022be <ST7789_Fill_Color+0x86>

//#endif
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80022ea:	b590      	push	{r4, r7, lr}
 80022ec:	b085      	sub	sp, #20
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4604      	mov	r4, r0
 80022f2:	4608      	mov	r0, r1
 80022f4:	4611      	mov	r1, r2
 80022f6:	461a      	mov	r2, r3
 80022f8:	4623      	mov	r3, r4
 80022fa:	80fb      	strh	r3, [r7, #6]
 80022fc:	4603      	mov	r3, r0
 80022fe:	80bb      	strh	r3, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	2bef      	cmp	r3, #239	; 0xef
 800230c:	d82b      	bhi.n	8002366 <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 800230e:	883b      	ldrh	r3, [r7, #0]
 8002310:	2bef      	cmp	r3, #239	; 0xef
 8002312:	d828      	bhi.n	8002366 <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 8002314:	8c3b      	ldrh	r3, [r7, #32]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	b29b      	uxth	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	723b      	strb	r3, [r7, #8]
 800231e:	8c3b      	ldrh	r3, [r7, #32]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8002324:	883b      	ldrh	r3, [r7, #0]
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	88b9      	ldrh	r1, [r7, #4]
 800232a:	88f8      	ldrh	r0, [r7, #6]
 800232c:	f7ff fe8e 	bl	800204c <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8002330:	88bb      	ldrh	r3, [r7, #4]
 8002332:	81fb      	strh	r3, [r7, #14]
 8002334:	e012      	b.n	800235c <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	81bb      	strh	r3, [r7, #12]
 800233a:	e008      	b.n	800234e <ST7789_Fill+0x64>
 800233c:	f107 0308 	add.w	r3, r7, #8
 8002340:	2102      	movs	r1, #2
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fd96 	bl	8001e74 <ST7789_WriteData>
 8002348:	89bb      	ldrh	r3, [r7, #12]
 800234a:	3301      	adds	r3, #1
 800234c:	81bb      	strh	r3, [r7, #12]
 800234e:	89ba      	ldrh	r2, [r7, #12]
 8002350:	887b      	ldrh	r3, [r7, #2]
 8002352:	429a      	cmp	r2, r3
 8002354:	d9f2      	bls.n	800233c <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 8002356:	89fb      	ldrh	r3, [r7, #14]
 8002358:	3301      	adds	r3, #1
 800235a:	81fb      	strh	r3, [r7, #14]
 800235c:	89fa      	ldrh	r2, [r7, #14]
 800235e:	883b      	ldrh	r3, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d9e8      	bls.n	8002336 <ST7789_Fill+0x4c>
 8002364:	e000      	b.n	8002368 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8002366:	bf00      	nop
	}
}
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bd90      	pop	{r4, r7, pc}

0800236e <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800236e:	b082      	sub	sp, #8
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b089      	sub	sp, #36	; 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
 8002378:	4603      	mov	r3, r0
 800237a:	80fb      	strh	r3, [r7, #6]
 800237c:	460b      	mov	r3, r1
 800237e:	80bb      	strh	r3, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002384:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002388:	b29a      	uxth	r2, r3
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	4413      	add	r3, r2
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29c      	uxth	r4, r3
 8002394:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002398:	b29a      	uxth	r2, r3
 800239a:	88bb      	ldrh	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	88b9      	ldrh	r1, [r7, #4]
 80023a6:	88f8      	ldrh	r0, [r7, #6]
 80023a8:	4622      	mov	r2, r4
 80023aa:	f7ff fe4f 	bl	800204c <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 80023ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	733b      	strb	r3, [r7, #12]
 80023b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 80023be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	723b      	strb	r3, [r7, #8]
 80023ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e02f      	b.n	800243c <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 80023dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	3b20      	subs	r3, #32
 80023e2:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4619      	mov	r1, r3
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	440b      	add	r3, r1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	e015      	b.n	800242a <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <ST7789_WriteChar+0xa8>
				uk = cdata;
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e002      	b.n	800241c <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 800241c:	2102      	movs	r1, #2
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff fd28 	bl	8001e74 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	3301      	adds	r3, #1
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800242e:	461a      	mov	r2, r3
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4293      	cmp	r3, r2
 8002434:	d3e3      	bcc.n	80023fe <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3301      	adds	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002440:	461a      	mov	r2, r3
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	4293      	cmp	r3, r2
 8002446:	d3c9      	bcc.n	80023dc <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002454:	b002      	add	sp, #8
 8002456:	4770      	bx	lr

08002458 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002458:	b082      	sub	sp, #8
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af04      	add	r7, sp, #16
 8002460:	603a      	str	r2, [r7, #0]
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	4603      	mov	r3, r0
 8002466:	80fb      	strh	r3, [r7, #6]
 8002468:	460b      	mov	r3, r1
 800246a:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d03f      	beq.n	80024f2 <ST7789_WriteString+0x9a>

	while (*str) {
 8002472:	e039      	b.n	80024e8 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	7d3a      	ldrb	r2, [r7, #20]
 8002478:	4413      	add	r3, r2
 800247a:	2bef      	cmp	r3, #239	; 0xef
 800247c:	dd13      	ble.n	80024a6 <ST7789_WriteString+0x4e>
			x = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002482:	7d7b      	ldrb	r3, [r7, #21]
 8002484:	b29a      	uxth	r2, r3
 8002486:	88bb      	ldrh	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 800248c:	88bb      	ldrh	r3, [r7, #4]
 800248e:	7d7a      	ldrb	r2, [r7, #21]
 8002490:	4413      	add	r3, r2
 8002492:	2bef      	cmp	r3, #239	; 0xef
 8002494:	dc2f      	bgt.n	80024f6 <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b20      	cmp	r3, #32
 800249c:	d103      	bne.n	80024a6 <ST7789_WriteString+0x4e>
				str++;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	603b      	str	r3, [r7, #0]
				continue;
 80024a4:	e020      	b.n	80024e8 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b0a      	cmp	r3, #10
 80024ac:	d012      	beq.n	80024d4 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	88b9      	ldrh	r1, [r7, #4]
 80024b4:	88f8      	ldrh	r0, [r7, #6]
 80024b6:	8c3b      	ldrh	r3, [r7, #32]
 80024b8:	9302      	str	r3, [sp, #8]
 80024ba:	8bbb      	ldrh	r3, [r7, #28]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f7ff ff53 	bl	800236e <ST7789_WriteChar>
			x += font.width;
 80024c8:	7d3b      	ldrb	r3, [r7, #20]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	4413      	add	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
 80024d2:	e006      	b.n	80024e2 <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80024d8:	7d7b      	ldrb	r3, [r7, #21]
 80024da:	b29a      	uxth	r2, r3
 80024dc:	88bb      	ldrh	r3, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1c1      	bne.n	8002474 <ST7789_WriteString+0x1c>
 80024f0:	e002      	b.n	80024f8 <ST7789_WriteString+0xa0>
	if (!str) return;
 80024f2:	bf00      	nop
 80024f4:	e000      	b.n	80024f8 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 80024f6:	bf00      	nop
	}
}
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002500:	b002      	add	sp, #8
 8002502:	4770      	bx	lr

08002504 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b0a4      	sub	sp, #144	; 0x90
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	227c      	movs	r2, #124	; 0x7c
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f007 ffeb 	bl	800a4f8 <memset>

	memset(st, 0x20, 127);
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	227f      	movs	r2, #127	; 0x7f
 8002528:	2120      	movs	r1, #32
 800252a:	4618      	mov	r0, r3
 800252c:	f007 ffe4 	bl	800a4f8 <memset>
	int8_t k = strlen(str);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7fd fe4d 	bl	80001d0 <strlen>
 8002536:	4603      	mov	r3, r0
 8002538:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 800253c:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	429a      	cmp	r2, r3
 8002544:	da25      	bge.n	8002592 <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	0fda      	lsrs	r2, r3, #31
 8002550:	4413      	add	r3, r2
 8002552:	105b      	asrs	r3, r3, #1
 8002554:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8002558:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 800255c:	f107 020c 	add.w	r2, r7, #12
 8002560:	4413      	add	r3, r2
 8002562:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	f007 ffb7 	bl	800a4dc <memcpy>
		st[k + n*2 + 1] = '\0';
 800256e:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8002572:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	3301      	adds	r3, #1
 800257c:	3390      	adds	r3, #144	; 0x90
 800257e:	443b      	add	r3, r7
 8002580:	2200      	movs	r2, #0
 8002582:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 8002586:	f107 030c 	add.w	r3, r7, #12
 800258a:	4619      	mov	r1, r3
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f008 f94b 	bl	800a828 <strcpy>
	}

	return str;
 8002592:	687b      	ldr	r3, [r7, #4]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3790      	adds	r7, #144	; 0x90
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_MspInit+0x54>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a11      	ldr	r2, [pc, #68]	; (80025f0 <HAL_MspInit+0x54>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_MspInit+0x54>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_MspInit+0x54>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <HAL_MspInit+0x54>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_MspInit+0x54>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	210f      	movs	r1, #15
 80025de:	f06f 0001 	mvn.w	r0, #1
 80025e2:	f000 fc15 	bl	8002e10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025fc:	f107 0308 	add.w	r3, r7, #8
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a0c      	ldr	r2, [pc, #48]	; (8002640 <HAL_RTC_MspInit+0x4c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d110      	bne.n	8002636 <HAL_RTC_MspInit+0x42>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002614:	2302      	movs	r3, #2
 8002616:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_RTC_MspInit+0x50>)
 800261a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	4618      	mov	r0, r3
 8002622:	f001 fff5 	bl	8004610 <HAL_RCCEx_PeriphCLKConfig>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 800262c:	f7ff fbcc 	bl	8001dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RTC_MspInit+0x54>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40002800 	.word	0x40002800
 8002644:	00190300 	.word	0x00190300
 8002648:	42470e3c 	.word	0x42470e3c

0800264c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a39      	ldr	r2, [pc, #228]	; (8002750 <HAL_SPI_MspInit+0x104>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d16b      	bne.n	8002746 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	4b38      	ldr	r3, [pc, #224]	; (8002754 <HAL_SPI_MspInit+0x108>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4a37      	ldr	r2, [pc, #220]	; (8002754 <HAL_SPI_MspInit+0x108>)
 8002678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	4b35      	ldr	r3, [pc, #212]	; (8002754 <HAL_SPI_MspInit+0x108>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b31      	ldr	r3, [pc, #196]	; (8002754 <HAL_SPI_MspInit+0x108>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a30      	ldr	r2, [pc, #192]	; (8002754 <HAL_SPI_MspInit+0x108>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <HAL_SPI_MspInit+0x108>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 80026a6:	23a0      	movs	r3, #160	; 0xa0
 80026a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026b6:	2305      	movs	r3, #5
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	4825      	ldr	r0, [pc, #148]	; (8002758 <HAL_SPI_MspInit+0x10c>)
 80026c2:	f000 ffd1 	bl	8003668 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80026c6:	4b25      	ldr	r3, [pc, #148]	; (800275c <HAL_SPI_MspInit+0x110>)
 80026c8:	4a25      	ldr	r2, [pc, #148]	; (8002760 <HAL_SPI_MspInit+0x114>)
 80026ca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80026cc:	4b23      	ldr	r3, [pc, #140]	; (800275c <HAL_SPI_MspInit+0x110>)
 80026ce:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80026d2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026d4:	4b21      	ldr	r3, [pc, #132]	; (800275c <HAL_SPI_MspInit+0x110>)
 80026d6:	2240      	movs	r2, #64	; 0x40
 80026d8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_SPI_MspInit+0x110>)
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_SPI_MspInit+0x110>)
 80026e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <HAL_SPI_MspInit+0x110>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_SPI_MspInit+0x110>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_SPI_MspInit+0x110>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80026fa:	4b18      	ldr	r3, [pc, #96]	; (800275c <HAL_SPI_MspInit+0x110>)
 80026fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002700:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_SPI_MspInit+0x110>)
 8002704:	2204      	movs	r2, #4
 8002706:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_SPI_MspInit+0x110>)
 800270a:	2203      	movs	r2, #3
 800270c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_SPI_MspInit+0x110>)
 8002710:	2200      	movs	r2, #0
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_SPI_MspInit+0x110>)
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800271a:	4810      	ldr	r0, [pc, #64]	; (800275c <HAL_SPI_MspInit+0x110>)
 800271c:	f000 fba2 	bl	8002e64 <HAL_DMA_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8002726:	f7ff fb4f 	bl	8001dc8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a0b      	ldr	r2, [pc, #44]	; (800275c <HAL_SPI_MspInit+0x110>)
 800272e:	649a      	str	r2, [r3, #72]	; 0x48
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_SPI_MspInit+0x110>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2103      	movs	r1, #3
 800273a:	2023      	movs	r0, #35	; 0x23
 800273c:	f000 fb68 	bl	8002e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002740:	2023      	movs	r0, #35	; 0x23
 8002742:	f000 fb81 	bl	8002e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40013000 	.word	0x40013000
 8002754:	40023800 	.word	0x40023800
 8002758:	40020000 	.word	0x40020000
 800275c:	2000015c 	.word	0x2000015c
 8002760:	40026458 	.word	0x40026458

08002764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002774:	d115      	bne.n	80027a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <HAL_TIM_Base_MspInit+0x48>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <HAL_TIM_Base_MspInit+0x48>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_TIM_Base_MspInit+0x48>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2101      	movs	r1, #1
 8002796:	201c      	movs	r0, #28
 8002798:	f000 fb3a 	bl	8002e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800279c:	201c      	movs	r0, #28
 800279e:	f000 fb53 	bl	8002e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800

080027b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a35      	ldr	r2, [pc, #212]	; (80028a4 <HAL_UART_MspInit+0xf4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d163      	bne.n	800289a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	4b34      	ldr	r3, [pc, #208]	; (80028a8 <HAL_UART_MspInit+0xf8>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a33      	ldr	r2, [pc, #204]	; (80028a8 <HAL_UART_MspInit+0xf8>)
 80027dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_UART_MspInit+0xf8>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_UART_MspInit+0xf8>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a2c      	ldr	r2, [pc, #176]	; (80028a8 <HAL_UART_MspInit+0xf8>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <HAL_UART_MspInit+0xf8>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 800280a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800280e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800281c:	2307      	movs	r3, #7
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4619      	mov	r1, r3
 8002826:	4821      	ldr	r0, [pc, #132]	; (80028ac <HAL_UART_MspInit+0xfc>)
 8002828:	f000 ff1e 	bl	8003668 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800282c:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_UART_MspInit+0x100>)
 800282e:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <HAL_UART_MspInit+0x104>)
 8002830:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002832:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <HAL_UART_MspInit+0x100>)
 8002834:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002838:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_UART_MspInit+0x100>)
 800283c:	2240      	movs	r2, #64	; 0x40
 800283e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_UART_MspInit+0x100>)
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_UART_MspInit+0x100>)
 8002848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800284c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_UART_MspInit+0x100>)
 8002850:	2200      	movs	r2, #0
 8002852:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_UART_MspInit+0x100>)
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_UART_MspInit+0x100>)
 800285c:	2200      	movs	r2, #0
 800285e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002860:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <HAL_UART_MspInit+0x100>)
 8002862:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002866:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_UART_MspInit+0x100>)
 800286a:	2200      	movs	r2, #0
 800286c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800286e:	4810      	ldr	r0, [pc, #64]	; (80028b0 <HAL_UART_MspInit+0x100>)
 8002870:	f000 faf8 	bl	8002e64 <HAL_DMA_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800287a:	f7ff faa5 	bl	8001dc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <HAL_UART_MspInit+0x100>)
 8002882:	635a      	str	r2, [r3, #52]	; 0x34
 8002884:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <HAL_UART_MspInit+0x100>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 4, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2104      	movs	r1, #4
 800288e:	2027      	movs	r0, #39	; 0x27
 8002890:	f000 fabe 	bl	8002e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002894:	2027      	movs	r0, #39	; 0x27
 8002896:	f000 fad7 	bl	8002e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	; 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40004800 	.word	0x40004800
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020400 	.word	0x40020400
 80028b0:	20000248 	.word	0x20000248
 80028b4:	40026058 	.word	0x40026058

080028b8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80028cc:	4b20      	ldr	r3, [pc, #128]	; (8002950 <HAL_FSMC_MspInit+0x98>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d139      	bne.n	8002948 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 80028d4:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_FSMC_MspInit+0x98>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_FSMC_MspInit+0x9c>)
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	4a1c      	ldr	r2, [pc, #112]	; (8002954 <HAL_FSMC_MspInit+0x9c>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6393      	str	r3, [r2, #56]	; 0x38
 80028ea:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <HAL_FSMC_MspInit+0x9c>)
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80028f6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80028fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002904:	2303      	movs	r3, #3
 8002906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002908:	230c      	movs	r3, #12
 800290a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	4619      	mov	r1, r3
 8002910:	4811      	ldr	r0, [pc, #68]	; (8002958 <HAL_FSMC_MspInit+0xa0>)
 8002912:	f000 fea9 	bl	8003668 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8002916:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 800291a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002928:	230c      	movs	r3, #12
 800292a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	4619      	mov	r1, r3
 8002930:	480a      	ldr	r0, [pc, #40]	; (800295c <HAL_FSMC_MspInit+0xa4>)
 8002932:	f000 fe99 	bl	8003668 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2105      	movs	r1, #5
 800293a:	2030      	movs	r0, #48	; 0x30
 800293c:	f000 fa68 	bl	8002e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8002940:	2030      	movs	r0, #48	; 0x30
 8002942:	f000 fa81 	bl	8002e48 <HAL_NVIC_EnableIRQ>
 8002946:	e000      	b.n	800294a <HAL_FSMC_MspInit+0x92>
    return;
 8002948:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000b30 	.word	0x20000b30
 8002954:	40023800 	.word	0x40023800
 8002958:	40021000 	.word	0x40021000
 800295c:	40020c00 	.word	0x40020c00

08002960 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8002968:	f7ff ffa6 	bl	80028b8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08c      	sub	sp, #48	; 0x30
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002984:	2200      	movs	r2, #0
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	2019      	movs	r0, #25
 800298a:	f000 fa41 	bl	8002e10 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800298e:	2019      	movs	r0, #25
 8002990:	f000 fa5a 	bl	8002e48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <HAL_InitTick+0xa4>)
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <HAL_InitTick+0xa4>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6453      	str	r3, [r2, #68]	; 0x44
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <HAL_InitTick+0xa4>)
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029b0:	f107 0210 	add.w	r2, r7, #16
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 fdf6 	bl	80045ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80029c0:	f001 fde0 	bl	8004584 <HAL_RCC_GetPCLK2Freq>
 80029c4:	4603      	mov	r3, r0
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <HAL_InitTick+0xa8>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9b      	lsrs	r3, r3, #18
 80029d4:	3b01      	subs	r3, #1
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_InitTick+0xac>)
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <HAL_InitTick+0xb0>)
 80029dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_InitTick+0xac>)
 80029e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029e4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80029e6:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <HAL_InitTick+0xac>)
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <HAL_InitTick+0xac>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_InitTick+0xac>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80029f8:	4809      	ldr	r0, [pc, #36]	; (8002a20 <HAL_InitTick+0xac>)
 80029fa:	f002 ff0d 	bl	8005818 <HAL_TIM_Base_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002a04:	4806      	ldr	r0, [pc, #24]	; (8002a20 <HAL_InitTick+0xac>)
 8002a06:	f002 ff57 	bl	80058b8 <HAL_TIM_Base_Start_IT>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	e000      	b.n	8002a10 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3730      	adds	r7, #48	; 0x30
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	431bde83 	.word	0x431bde83
 8002a20:	20000b34 	.word	0x20000b34
 8002a24:	40010000 	.word	0x40010000

08002a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3a:	e7fe      	b.n	8002a3a <HardFault_Handler+0x4>

08002a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a40:	e7fe      	b.n	8002a40 <MemManage_Handler+0x4>

08002a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a46:	e7fe      	b.n	8002a46 <BusFault_Handler+0x4>

08002a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <UsageFault_Handler+0x4>

08002a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <DMA1_Stream3_IRQHandler+0x10>)
 8002a62:	f000 fb97 	bl	8003194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000248 	.word	0x20000248

08002a70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002a76:	f002 ff8f 	bl	8005998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000b34 	.word	0x20000b34

08002a84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a88:	4802      	ldr	r0, [pc, #8]	; (8002a94 <TIM2_IRQHandler+0x10>)
 8002a8a:	f002 ff85 	bl	8005998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200001bc 	.word	0x200001bc

08002a98 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a9c:	4802      	ldr	r0, [pc, #8]	; (8002aa8 <SPI1_IRQHandler+0x10>)
 8002a9e:	f002 fc47 	bl	8005330 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000104 	.word	0x20000104

08002aac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ab0:	4802      	ldr	r0, [pc, #8]	; (8002abc <USART3_IRQHandler+0x10>)
 8002ab2:	f003 fc2f 	bl	8006314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000204 	.word	0x20000204

08002ac0 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8002ac4:	4802      	ldr	r0, [pc, #8]	; (8002ad0 <FSMC_IRQHandler+0x10>)
 8002ac6:	f000 ffec 	bl	8003aa2 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	200002a8 	.word	0x200002a8

08002ad4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002ad8:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <DMA2_Stream3_IRQHandler+0x10>)
 8002ada:	f000 fb5b 	bl	8003194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2000015c 	.word	0x2000015c

08002ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <_sbrk+0x5c>)
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <_sbrk+0x60>)
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <_sbrk+0x64>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <_sbrk+0x64>)
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <_sbrk+0x68>)
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d207      	bcs.n	8002b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b18:	f007 fc00 	bl	800a31c <__errno>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	220c      	movs	r2, #12
 8002b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b26:	e009      	b.n	8002b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <_sbrk+0x64>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <_sbrk+0x64>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <_sbrk+0x64>)
 8002b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20020000 	.word	0x20020000
 8002b48:	00000800 	.word	0x00000800
 8002b4c:	20000b7c 	.word	0x20000b7c
 8002b50:	200055a8 	.word	0x200055a8

08002b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <SystemInit+0x28>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <SystemInit+0x28>)
 8002b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <SystemInit+0x28>)
 8002b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b6e:	609a      	str	r2, [r3, #8]
#endif
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b86:	e003      	b.n	8002b90 <LoopCopyDataInit>

08002b88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b8e:	3104      	adds	r1, #4

08002b90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b90:	480b      	ldr	r0, [pc, #44]	; (8002bc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b98:	d3f6      	bcc.n	8002b88 <CopyDataInit>
  ldr  r2, =_sbss
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b9c:	e002      	b.n	8002ba4 <LoopFillZerobss>

08002b9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ba0:	f842 3b04 	str.w	r3, [r2], #4

08002ba4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ba6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ba8:	d3f9      	bcc.n	8002b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002baa:	f7ff ffd3 	bl	8002b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bae:	f007 fc67 	bl	800a480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bb2:	f7fe f853 	bl	8000c5c <main>
  bx  lr    
 8002bb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002bbc:	0800d624 	.word	0x0800d624
  ldr  r0, =_sdata
 8002bc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bc4:	200000c8 	.word	0x200000c8
  ldr  r2, =_sbss
 8002bc8:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 8002bcc:	200055a4 	.word	0x200055a4

08002bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd0:	e7fe      	b.n	8002bd0 <ADC_IRQHandler>
	...

08002bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_Init+0x40>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_Init+0x40>)
 8002bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_Init+0x40>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_Init+0x40>)
 8002bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_Init+0x40>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <HAL_Init+0x40>)
 8002bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bfc:	2003      	movs	r0, #3
 8002bfe:	f000 f8fc 	bl	8002dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c02:	200f      	movs	r0, #15
 8002c04:	f7ff feb6 	bl	8002974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c08:	f7ff fcc8 	bl	800259c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023c00 	.word	0x40023c00

08002c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_IncTick+0x20>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_IncTick+0x24>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <HAL_IncTick+0x24>)
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	2000004c 	.word	0x2000004c
 8002c3c:	20000b80 	.word	0x20000b80

08002c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return uwTick;
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_GetTick+0x14>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000b80 	.word	0x20000b80

08002c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7ff ffee 	bl	8002c40 <HAL_GetTick>
 8002c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c70:	d005      	beq.n	8002c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_Delay+0x44>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c7e:	bf00      	nop
 8002c80:	f7ff ffde 	bl	8002c40 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d8f7      	bhi.n	8002c80 <HAL_Delay+0x28>
  {
  }
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000004c 	.word	0x2000004c

08002ca0 <__NVIC_SetPriorityGrouping>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd2:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	60d3      	str	r3, [r2, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_GetPriorityGrouping>:
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <__NVIC_GetPriorityGrouping+0x18>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	f003 0307 	and.w	r3, r3, #7
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_EnableIRQ>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	db0b      	blt.n	8002d2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	4907      	ldr	r1, [pc, #28]	; (8002d3c <__NVIC_EnableIRQ+0x38>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2001      	movs	r0, #1
 8002d26:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000e100 	.word	0xe000e100

08002d40 <__NVIC_SetPriority>:
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db0a      	blt.n	8002d6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	490c      	ldr	r1, [pc, #48]	; (8002d8c <__NVIC_SetPriority+0x4c>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	440b      	add	r3, r1
 8002d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d68:	e00a      	b.n	8002d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4908      	ldr	r1, [pc, #32]	; (8002d90 <__NVIC_SetPriority+0x50>)
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3b04      	subs	r3, #4
 8002d78:	0112      	lsls	r2, r2, #4
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	761a      	strb	r2, [r3, #24]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000e100 	.word	0xe000e100
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <NVIC_EncodePriority>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f1c3 0307 	rsb	r3, r3, #7
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	bf28      	it	cs
 8002db2:	2304      	movcs	r3, #4
 8002db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d902      	bls.n	8002dc4 <NVIC_EncodePriority+0x30>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3b03      	subs	r3, #3
 8002dc2:	e000      	b.n	8002dc6 <NVIC_EncodePriority+0x32>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	43d9      	mvns	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	4313      	orrs	r3, r2
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ff4c 	bl	8002ca0 <__NVIC_SetPriorityGrouping>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e22:	f7ff ff61 	bl	8002ce8 <__NVIC_GetPriorityGrouping>
 8002e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	6978      	ldr	r0, [r7, #20]
 8002e2e:	f7ff ffb1 	bl	8002d94 <NVIC_EncodePriority>
 8002e32:	4602      	mov	r2, r0
 8002e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff80 	bl	8002d40 <__NVIC_SetPriority>
}
 8002e40:	bf00      	nop
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff54 	bl	8002d04 <__NVIC_EnableIRQ>
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff fee6 	bl	8002c40 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e099      	b.n	8002fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea0:	e00f      	b.n	8002ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ea2:	f7ff fecd 	bl	8002c40 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d908      	bls.n	8002ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e078      	b.n	8002fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e8      	bne.n	8002ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4b38      	ldr	r3, [pc, #224]	; (8002fbc <HAL_DMA_Init+0x158>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d107      	bne.n	8002f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	4313      	orrs	r3, r2
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d117      	bne.n	8002f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fb01 	bl	8003570 <DMA_CheckFifoParam>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2240      	movs	r2, #64	; 0x40
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f82:	2301      	movs	r3, #1
 8002f84:	e016      	b.n	8002fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fab8 	bl	8003504 <DMA_CalcBaseAndBitshift>
 8002f94:	4603      	mov	r3, r0
 8002f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	223f      	movs	r2, #63	; 0x3f
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	f010803f 	.word	0xf010803f

08002fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_DMA_Start_IT+0x26>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e040      	b.n	8003068 <HAL_DMA_Start_IT+0xa8>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d12f      	bne.n	800305a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fa4a 	bl	80034a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003018:	223f      	movs	r2, #63	; 0x3f
 800301a:	409a      	lsls	r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0216 	orr.w	r2, r2, #22
 800302e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0208 	orr.w	r2, r2, #8
 8003046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e005      	b.n	8003066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003062:	2302      	movs	r3, #2
 8003064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800307e:	f7ff fddf 	bl	8002c40 <HAL_GetTick>
 8003082:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d008      	beq.n	80030a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e052      	b.n	8003148 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0216 	bic.w	r2, r2, #22
 80030b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <HAL_DMA_Abort+0x62>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0208 	bic.w	r2, r2, #8
 80030e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f2:	e013      	b.n	800311c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030f4:	f7ff fda4 	bl	8002c40 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d90c      	bls.n	800311c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2203      	movs	r2, #3
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e015      	b.n	8003148 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e4      	bne.n	80030f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	223f      	movs	r2, #63	; 0x3f
 8003130:	409a      	lsls	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d004      	beq.n	800316e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e00c      	b.n	8003188 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2205      	movs	r2, #5
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031a0:	4b8e      	ldr	r3, [pc, #568]	; (80033dc <HAL_DMA_IRQHandler+0x248>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a8e      	ldr	r2, [pc, #568]	; (80033e0 <HAL_DMA_IRQHandler+0x24c>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	0a9b      	lsrs	r3, r3, #10
 80031ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	2208      	movs	r2, #8
 80031c0:	409a      	lsls	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01a      	beq.n	8003200 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d013      	beq.n	8003200 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0204 	bic.w	r2, r2, #4
 80031e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	2208      	movs	r2, #8
 80031ee:	409a      	lsls	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	2201      	movs	r2, #1
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	2201      	movs	r2, #1
 8003224:	409a      	lsls	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	f043 0202 	orr.w	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323a:	2204      	movs	r2, #4
 800323c:	409a      	lsls	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d012      	beq.n	800326c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00b      	beq.n	800326c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	2204      	movs	r2, #4
 800325a:	409a      	lsls	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f043 0204 	orr.w	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003270:	2210      	movs	r2, #16
 8003272:	409a      	lsls	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d043      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d03c      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328e:	2210      	movs	r2, #16
 8003290:	409a      	lsls	r2, r3
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d018      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d108      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d024      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
 80032c2:	e01f      	b.n	8003304 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01b      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	4798      	blx	r3
 80032d4:	e016      	b.n	8003304 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d107      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0208 	bic.w	r2, r2, #8
 80032f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	2220      	movs	r2, #32
 800330a:	409a      	lsls	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 808f 	beq.w	8003434 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8087 	beq.w	8003434 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	2220      	movs	r2, #32
 800332c:	409a      	lsls	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b05      	cmp	r3, #5
 800333c:	d136      	bne.n	80033ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0216 	bic.w	r2, r2, #22
 800334c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800335c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d103      	bne.n	800336e <HAL_DMA_IRQHandler+0x1da>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0208 	bic.w	r2, r2, #8
 800337c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	223f      	movs	r2, #63	; 0x3f
 8003384:	409a      	lsls	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d07e      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
        }
        return;
 80033aa:	e079      	b.n	80034a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01d      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10d      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d031      	beq.n	8003434 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
 80033d8:	e02c      	b.n	8003434 <HAL_DMA_IRQHandler+0x2a0>
 80033da:	bf00      	nop
 80033dc:	20000044 	.word	0x20000044
 80033e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d023      	beq.n	8003434 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
 80033f4:	e01e      	b.n	8003434 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10f      	bne.n	8003424 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0210 	bic.w	r2, r2, #16
 8003412:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	2b00      	cmp	r3, #0
 800343a:	d032      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d022      	beq.n	800348e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2205      	movs	r2, #5
 800344c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	3301      	adds	r3, #1
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	429a      	cmp	r2, r3
 800346a:	d307      	bcc.n	800347c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f2      	bne.n	8003460 <HAL_DMA_IRQHandler+0x2cc>
 800347a:	e000      	b.n	800347e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800347c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
 800349e:	e000      	b.n	80034a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80034a0:	bf00      	nop
    }
  }
}
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d108      	bne.n	80034e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034e6:	e007      	b.n	80034f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	60da      	str	r2, [r3, #12]
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3b10      	subs	r3, #16
 8003514:	4a14      	ldr	r2, [pc, #80]	; (8003568 <DMA_CalcBaseAndBitshift+0x64>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <DMA_CalcBaseAndBitshift+0x68>)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d909      	bls.n	8003546 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	1d1a      	adds	r2, r3, #4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	659a      	str	r2, [r3, #88]	; 0x58
 8003544:	e007      	b.n	8003556 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800354e:	f023 0303 	bic.w	r3, r3, #3
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	aaaaaaab 	.word	0xaaaaaaab
 800356c:	0800d478 	.word	0x0800d478

08003570 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d11f      	bne.n	80035ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d856      	bhi.n	800363e <DMA_CheckFifoParam+0xce>
 8003590:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <DMA_CheckFifoParam+0x28>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035bb 	.word	0x080035bb
 80035a0:	080035a9 	.word	0x080035a9
 80035a4:	0800363f 	.word	0x0800363f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d046      	beq.n	8003642 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b8:	e043      	b.n	8003642 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035c2:	d140      	bne.n	8003646 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c8:	e03d      	b.n	8003646 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d2:	d121      	bne.n	8003618 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d837      	bhi.n	800364a <DMA_CheckFifoParam+0xda>
 80035da:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <DMA_CheckFifoParam+0x70>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	080035f7 	.word	0x080035f7
 80035e8:	080035f1 	.word	0x080035f1
 80035ec:	08003609 	.word	0x08003609
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
      break;
 80035f4:	e030      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d025      	beq.n	800364e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003606:	e022      	b.n	800364e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003610:	d11f      	bne.n	8003652 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003616:	e01c      	b.n	8003652 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d903      	bls.n	8003626 <DMA_CheckFifoParam+0xb6>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d003      	beq.n	800362c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003624:	e018      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
      break;
 800362a:	e015      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00e      	beq.n	8003656 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e00b      	b.n	8003656 <DMA_CheckFifoParam+0xe6>
      break;
 800363e:	bf00      	nop
 8003640:	e00a      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 8003642:	bf00      	nop
 8003644:	e008      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 8003646:	bf00      	nop
 8003648:	e006      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 800364a:	bf00      	nop
 800364c:	e004      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 800364e:	bf00      	nop
 8003650:	e002      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;   
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <DMA_CheckFifoParam+0xe8>
      break;
 8003656:	bf00      	nop
    }
  } 
  
  return status; 
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	e16b      	b.n	800395c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003684:	2201      	movs	r2, #1
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	429a      	cmp	r2, r3
 800369e:	f040 815a 	bne.w	8003956 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d005      	beq.n	80036ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d130      	bne.n	800371c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	2203      	movs	r2, #3
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f0:	2201      	movs	r2, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	f003 0201 	and.w	r2, r3, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b03      	cmp	r3, #3
 8003726:	d017      	beq.n	8003758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2203      	movs	r2, #3
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d123      	bne.n	80037ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	08da      	lsrs	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3208      	adds	r2, #8
 800376c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	220f      	movs	r2, #15
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	08da      	lsrs	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3208      	adds	r2, #8
 80037a6:	69b9      	ldr	r1, [r7, #24]
 80037a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	2203      	movs	r2, #3
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0203 	and.w	r2, r3, #3
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80b4 	beq.w	8003956 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	4b60      	ldr	r3, [pc, #384]	; (8003974 <HAL_GPIO_Init+0x30c>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	4a5f      	ldr	r2, [pc, #380]	; (8003974 <HAL_GPIO_Init+0x30c>)
 80037f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037fc:	6453      	str	r3, [r2, #68]	; 0x44
 80037fe:	4b5d      	ldr	r3, [pc, #372]	; (8003974 <HAL_GPIO_Init+0x30c>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800380a:	4a5b      	ldr	r2, [pc, #364]	; (8003978 <HAL_GPIO_Init+0x310>)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	089b      	lsrs	r3, r3, #2
 8003810:	3302      	adds	r3, #2
 8003812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	220f      	movs	r2, #15
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a52      	ldr	r2, [pc, #328]	; (800397c <HAL_GPIO_Init+0x314>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d02b      	beq.n	800388e <HAL_GPIO_Init+0x226>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a51      	ldr	r2, [pc, #324]	; (8003980 <HAL_GPIO_Init+0x318>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d025      	beq.n	800388a <HAL_GPIO_Init+0x222>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a50      	ldr	r2, [pc, #320]	; (8003984 <HAL_GPIO_Init+0x31c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01f      	beq.n	8003886 <HAL_GPIO_Init+0x21e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a4f      	ldr	r2, [pc, #316]	; (8003988 <HAL_GPIO_Init+0x320>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d019      	beq.n	8003882 <HAL_GPIO_Init+0x21a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4e      	ldr	r2, [pc, #312]	; (800398c <HAL_GPIO_Init+0x324>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_GPIO_Init+0x216>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <HAL_GPIO_Init+0x328>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00d      	beq.n	800387a <HAL_GPIO_Init+0x212>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a4c      	ldr	r2, [pc, #304]	; (8003994 <HAL_GPIO_Init+0x32c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <HAL_GPIO_Init+0x20e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a4b      	ldr	r2, [pc, #300]	; (8003998 <HAL_GPIO_Init+0x330>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_GPIO_Init+0x20a>
 800386e:	2307      	movs	r3, #7
 8003870:	e00e      	b.n	8003890 <HAL_GPIO_Init+0x228>
 8003872:	2308      	movs	r3, #8
 8003874:	e00c      	b.n	8003890 <HAL_GPIO_Init+0x228>
 8003876:	2306      	movs	r3, #6
 8003878:	e00a      	b.n	8003890 <HAL_GPIO_Init+0x228>
 800387a:	2305      	movs	r3, #5
 800387c:	e008      	b.n	8003890 <HAL_GPIO_Init+0x228>
 800387e:	2304      	movs	r3, #4
 8003880:	e006      	b.n	8003890 <HAL_GPIO_Init+0x228>
 8003882:	2303      	movs	r3, #3
 8003884:	e004      	b.n	8003890 <HAL_GPIO_Init+0x228>
 8003886:	2302      	movs	r3, #2
 8003888:	e002      	b.n	8003890 <HAL_GPIO_Init+0x228>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_GPIO_Init+0x228>
 800388e:	2300      	movs	r3, #0
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	f002 0203 	and.w	r2, r2, #3
 8003896:	0092      	lsls	r2, r2, #2
 8003898:	4093      	lsls	r3, r2
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4313      	orrs	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038a0:	4935      	ldr	r1, [pc, #212]	; (8003978 <HAL_GPIO_Init+0x310>)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	089b      	lsrs	r3, r3, #2
 80038a6:	3302      	adds	r3, #2
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038ae:	4b3b      	ldr	r3, [pc, #236]	; (800399c <HAL_GPIO_Init+0x334>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038d2:	4a32      	ldr	r2, [pc, #200]	; (800399c <HAL_GPIO_Init+0x334>)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038d8:	4b30      	ldr	r3, [pc, #192]	; (800399c <HAL_GPIO_Init+0x334>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <HAL_GPIO_Init+0x334>)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_GPIO_Init+0x334>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003926:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_GPIO_Init+0x334>)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_GPIO_Init+0x334>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003950:	4a12      	ldr	r2, [pc, #72]	; (800399c <HAL_GPIO_Init+0x334>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3301      	adds	r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b0f      	cmp	r3, #15
 8003960:	f67f ae90 	bls.w	8003684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop
 8003968:	3724      	adds	r7, #36	; 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	40013800 	.word	0x40013800
 800397c:	40020000 	.word	0x40020000
 8003980:	40020400 	.word	0x40020400
 8003984:	40020800 	.word	0x40020800
 8003988:	40020c00 	.word	0x40020c00
 800398c:	40021000 	.word	0x40021000
 8003990:	40021400 	.word	0x40021400
 8003994:	40021800 	.word	0x40021800
 8003998:	40021c00 	.word	0x40021c00
 800399c:	40013c00 	.word	0x40013c00

080039a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
 80039ac:	4613      	mov	r3, r2
 80039ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b0:	787b      	ldrb	r3, [r7, #1]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039bc:	e003      	b.n	80039c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039be:	887b      	ldrh	r3, [r7, #2]
 80039c0:	041a      	lsls	r2, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	619a      	str	r2, [r3, #24]
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039e4:	887a      	ldrh	r2, [r7, #2]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4013      	ands	r3, r2
 80039ea:	041a      	lsls	r2, r3, #16
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43d9      	mvns	r1, r3
 80039f0:	887b      	ldrh	r3, [r7, #2]
 80039f2:	400b      	ands	r3, r1
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	619a      	str	r2, [r3, #24]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e03e      	b.n	8003a9a <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7fe ff95 	bl	8002960 <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f003 fc2b 	bl	800729c <FSMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	f003 fc65 	bl	8007320 <FSMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	f003 fc93 	bl	800738c <FSMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d108      	bne.n	8003a80 <HAL_NAND_Init+0x7a>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0204 	orr.w	r2, r2, #4
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e007      	b.n	8003a90 <HAL_NAND_Init+0x8a>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a1a      	ldr	r2, [r3, #32]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0204 	orr.w	r2, r2, #4
 8003a8e:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
*/
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d10a      	bne.n	8003ac8 <HAL_NAND_IRQHandler+0x26>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e009      	b.n	8003adc <HAL_NAND_IRQHandler+0x3a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d017      	beq.n	8003b10 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f8b2 	bl	8003c4a <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Rising edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b10      	cmp	r3, #16
 8003aec:	d108      	bne.n	8003b00 <HAL_NAND_IRQHandler+0x5e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	e007      	b.n	8003b10 <HAL_NAND_IRQHandler+0x6e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt Level flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d10a      	bne.n	8003b2e <HAL_NAND_IRQHandler+0x8c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	bf0c      	ite	eq
 8003b26:	2301      	moveq	r3, #1
 8003b28:	2300      	movne	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	e009      	b.n	8003b42 <HAL_NAND_IRQHandler+0xa0>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d017      	beq.n	8003b76 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f87f 	bl	8003c4a <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Level pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d108      	bne.n	8003b66 <HAL_NAND_IRQHandler+0xc4>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0202 	bic.w	r2, r2, #2
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	e007      	b.n	8003b76 <HAL_NAND_IRQHandler+0xd4>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0202 	bic.w	r2, r2, #2
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Falling edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d10a      	bne.n	8003b94 <HAL_NAND_IRQHandler+0xf2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e009      	b.n	8003ba8 <HAL_NAND_IRQHandler+0x106>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	bf0c      	ite	eq
 8003ba2:	2301      	moveq	r3, #1
 8003ba4:	2300      	movne	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d017      	beq.n	8003bdc <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f84c 	bl	8003c4a <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Falling edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d108      	bne.n	8003bcc <HAL_NAND_IRQHandler+0x12a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0204 	bic.w	r2, r2, #4
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	e007      	b.n	8003bdc <HAL_NAND_IRQHandler+0x13a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0204 	bic.w	r2, r2, #4
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt FIFO empty flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d10a      	bne.n	8003bfa <HAL_NAND_IRQHandler+0x158>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	bf0c      	ite	eq
 8003bf2:	2301      	moveq	r3, #1
 8003bf4:	2300      	movne	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	e009      	b.n	8003c0e <HAL_NAND_IRQHandler+0x16c>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c04:	2b40      	cmp	r3, #64	; 0x40
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d017      	beq.n	8003c42 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f819 	bl	8003c4a <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt FIFO empty pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d108      	bne.n	8003c32 <HAL_NAND_IRQHandler+0x190>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2e:	605a      	str	r2, [r3, #4]
  }
}
 8003c30:	e007      	b.n	8003c42 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hnand);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  return hnand->State;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c6c:	b2db      	uxtb	r3, r3
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e267      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d075      	beq.n	8003d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c9a:	4b88      	ldr	r3, [pc, #544]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ca6:	4b85      	ldr	r3, [pc, #532]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d112      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cb2:	4b82      	ldr	r3, [pc, #520]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc0:	4b7e      	ldr	r3, [pc, #504]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d05b      	beq.n	8003d84 <HAL_RCC_OscConfig+0x108>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d157      	bne.n	8003d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e242      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce0:	d106      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x74>
 8003ce2:	4b76      	ldr	r3, [pc, #472]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a75      	ldr	r2, [pc, #468]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e01d      	b.n	8003d2c <HAL_RCC_OscConfig+0xb0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x98>
 8003cfa:	4b70      	ldr	r3, [pc, #448]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a6f      	ldr	r2, [pc, #444]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b6d      	ldr	r3, [pc, #436]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6c      	ldr	r2, [pc, #432]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0xb0>
 8003d14:	4b69      	ldr	r3, [pc, #420]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a68      	ldr	r2, [pc, #416]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	4b66      	ldr	r3, [pc, #408]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a65      	ldr	r2, [pc, #404]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d013      	beq.n	8003d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fe ff84 	bl	8002c40 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fe ff80 	bl	8002c40 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e207      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b5b      	ldr	r3, [pc, #364]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0xc0>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fe ff70 	bl	8002c40 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fe ff6c 	bl	8002c40 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e1f3      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	4b51      	ldr	r3, [pc, #324]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0xe8>
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d063      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d92:	4b4a      	ldr	r3, [pc, #296]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9e:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d11c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003daa:	4b44      	ldr	r3, [pc, #272]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d116      	bne.n	8003de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	4b41      	ldr	r3, [pc, #260]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_RCC_OscConfig+0x152>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e1c7      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dce:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4937      	ldr	r1, [pc, #220]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	e03a      	b.n	8003e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dec:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <HAL_RCC_OscConfig+0x244>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fe ff25 	bl	8002c40 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dfa:	f7fe ff21 	bl	8002c40 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e1a8      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	4b2b      	ldr	r3, [pc, #172]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e18:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4925      	ldr	r1, [pc, #148]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]
 8003e2c:	e015      	b.n	8003e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e2e:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <HAL_RCC_OscConfig+0x244>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fe ff04 	bl	8002c40 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3c:	f7fe ff00 	bl	8002c40 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e187      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d036      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <HAL_RCC_OscConfig+0x248>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fe fee4 	bl	8002c40 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7fe fee0 	bl	8002c40 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e167      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x200>
 8003e9a:	e01b      	b.n	8003ed4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_RCC_OscConfig+0x248>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea2:	f7fe fecd 	bl	8002c40 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	e00e      	b.n	8003ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eaa:	f7fe fec9 	bl	8002c40 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d907      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e150      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	42470000 	.word	0x42470000
 8003ec4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec8:	4b88      	ldr	r3, [pc, #544]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1ea      	bne.n	8003eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8097 	beq.w	8004010 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee6:	4b81      	ldr	r3, [pc, #516]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	4b7d      	ldr	r3, [pc, #500]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a7c      	ldr	r2, [pc, #496]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b7a      	ldr	r3, [pc, #488]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f12:	4b77      	ldr	r3, [pc, #476]	; (80040f0 <HAL_RCC_OscConfig+0x474>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d118      	bne.n	8003f50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1e:	4b74      	ldr	r3, [pc, #464]	; (80040f0 <HAL_RCC_OscConfig+0x474>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a73      	ldr	r2, [pc, #460]	; (80040f0 <HAL_RCC_OscConfig+0x474>)
 8003f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2a:	f7fe fe89 	bl	8002c40 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f32:	f7fe fe85 	bl	8002c40 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e10c      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	4b6a      	ldr	r3, [pc, #424]	; (80040f0 <HAL_RCC_OscConfig+0x474>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d106      	bne.n	8003f66 <HAL_RCC_OscConfig+0x2ea>
 8003f58:	4b64      	ldr	r3, [pc, #400]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a63      	ldr	r2, [pc, #396]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	; 0x70
 8003f64:	e01c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x324>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b05      	cmp	r3, #5
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x30c>
 8003f6e:	4b5f      	ldr	r3, [pc, #380]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	4a5e      	ldr	r2, [pc, #376]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f74:	f043 0304 	orr.w	r3, r3, #4
 8003f78:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7a:	4b5c      	ldr	r3, [pc, #368]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a5b      	ldr	r2, [pc, #364]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	6713      	str	r3, [r2, #112]	; 0x70
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0x324>
 8003f88:	4b58      	ldr	r3, [pc, #352]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	4a57      	ldr	r2, [pc, #348]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	6713      	str	r3, [r2, #112]	; 0x70
 8003f94:	4b55      	ldr	r3, [pc, #340]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	4a54      	ldr	r2, [pc, #336]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f9a:	f023 0304 	bic.w	r3, r3, #4
 8003f9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d015      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fe fe4a 	bl	8002c40 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fe fe46 	bl	8002c40 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0cb      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc6:	4b49      	ldr	r3, [pc, #292]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0ee      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x334>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd4:	f7fe fe34 	bl	8002c40 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f7fe fe30 	bl	8002c40 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e0b5      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff2:	4b3e      	ldr	r3, [pc, #248]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1ee      	bne.n	8003fdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004004:	4b39      	ldr	r3, [pc, #228]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	4a38      	ldr	r2, [pc, #224]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 800400a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a1 	beq.w	800415c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800401a:	4b34      	ldr	r3, [pc, #208]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b08      	cmp	r3, #8
 8004024:	d05c      	beq.n	80040e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d141      	bne.n	80040b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	4b31      	ldr	r3, [pc, #196]	; (80040f4 <HAL_RCC_OscConfig+0x478>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fe fe04 	bl	8002c40 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403c:	f7fe fe00 	bl	8002c40 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e087      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	4b27      	ldr	r3, [pc, #156]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	019b      	lsls	r3, r3, #6
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	3b01      	subs	r3, #1
 8004074:	041b      	lsls	r3, r3, #16
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	491b      	ldr	r1, [pc, #108]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004084:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <HAL_RCC_OscConfig+0x478>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408a:	f7fe fdd9 	bl	8002c40 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004092:	f7fe fdd5 	bl	8002c40 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e05c      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x416>
 80040b0:	e054      	b.n	800415c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_RCC_OscConfig+0x478>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe fdc2 	bl	8002c40 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fe fdbe 	bl	8002c40 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e045      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_RCC_OscConfig+0x470>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x444>
 80040de:	e03d      	b.n	800415c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d107      	bne.n	80040f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e038      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40007000 	.word	0x40007000
 80040f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040f8:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <HAL_RCC_OscConfig+0x4ec>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d028      	beq.n	8004158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d121      	bne.n	8004158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d11a      	bne.n	8004158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800412e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004130:	4293      	cmp	r3, r2
 8004132:	d111      	bne.n	8004158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	3b01      	subs	r3, #1
 8004142:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004144:	429a      	cmp	r2, r3
 8004146:	d107      	bne.n	8004158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40023800 	.word	0x40023800

0800416c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0cc      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004180:	4b68      	ldr	r3, [pc, #416]	; (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d90c      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b65      	ldr	r3, [pc, #404]	; (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b63      	ldr	r3, [pc, #396]	; (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0b8      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c0:	4b59      	ldr	r3, [pc, #356]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4a58      	ldr	r2, [pc, #352]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d8:	4b53      	ldr	r3, [pc, #332]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a52      	ldr	r2, [pc, #328]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b50      	ldr	r3, [pc, #320]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	494d      	ldr	r1, [pc, #308]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d044      	beq.n	800428c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	4b47      	ldr	r3, [pc, #284]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d119      	bne.n	800424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e07f      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d003      	beq.n	800422a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004226:	2b03      	cmp	r3, #3
 8004228:	d107      	bne.n	800423a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422a:	4b3f      	ldr	r3, [pc, #252]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e06f      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423a:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e067      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800424a:	4b37      	ldr	r3, [pc, #220]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f023 0203 	bic.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4934      	ldr	r1, [pc, #208]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	4313      	orrs	r3, r2
 800425a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800425c:	f7fe fcf0 	bl	8002c40 <HAL_GetTick>
 8004260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004262:	e00a      	b.n	800427a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004264:	f7fe fcec 	bl	8002c40 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e04f      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427a:	4b2b      	ldr	r3, [pc, #172]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 020c 	and.w	r2, r3, #12
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	429a      	cmp	r2, r3
 800428a:	d1eb      	bne.n	8004264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800428c:	4b25      	ldr	r3, [pc, #148]	; (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d20c      	bcs.n	80042b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b22      	ldr	r3, [pc, #136]	; (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e032      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4916      	ldr	r1, [pc, #88]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	490e      	ldr	r1, [pc, #56]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042f2:	f000 f821 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	490a      	ldr	r1, [pc, #40]	; (800432c <HAL_RCC_ClockConfig+0x1c0>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	4a09      	ldr	r2, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fb2e 	bl	8002974 <HAL_InitTick>

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023c00 	.word	0x40023c00
 8004328:	40023800 	.word	0x40023800
 800432c:	0800d460 	.word	0x0800d460
 8004330:	20000044 	.word	0x20000044
 8004334:	20000048 	.word	0x20000048

08004338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800433c:	b094      	sub	sp, #80	; 0x50
 800433e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	647b      	str	r3, [r7, #68]	; 0x44
 8004344:	2300      	movs	r3, #0
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004348:	2300      	movs	r3, #0
 800434a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004350:	4b79      	ldr	r3, [pc, #484]	; (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 030c 	and.w	r3, r3, #12
 8004358:	2b08      	cmp	r3, #8
 800435a:	d00d      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x40>
 800435c:	2b08      	cmp	r3, #8
 800435e:	f200 80e1 	bhi.w	8004524 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x34>
 8004366:	2b04      	cmp	r3, #4
 8004368:	d003      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x3a>
 800436a:	e0db      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800436c:	4b73      	ldr	r3, [pc, #460]	; (800453c <HAL_RCC_GetSysClockFreq+0x204>)
 800436e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004370:	e0db      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004372:	4b73      	ldr	r3, [pc, #460]	; (8004540 <HAL_RCC_GetSysClockFreq+0x208>)
 8004374:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004376:	e0d8      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004378:	4b6f      	ldr	r3, [pc, #444]	; (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004382:	4b6d      	ldr	r3, [pc, #436]	; (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d063      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438e:	4b6a      	ldr	r3, [pc, #424]	; (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	099b      	lsrs	r3, r3, #6
 8004394:	2200      	movs	r2, #0
 8004396:	63bb      	str	r3, [r7, #56]	; 0x38
 8004398:	63fa      	str	r2, [r7, #60]	; 0x3c
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a0:	633b      	str	r3, [r7, #48]	; 0x30
 80043a2:	2300      	movs	r3, #0
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
 80043a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043aa:	4622      	mov	r2, r4
 80043ac:	462b      	mov	r3, r5
 80043ae:	f04f 0000 	mov.w	r0, #0
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	0159      	lsls	r1, r3, #5
 80043b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043bc:	0150      	lsls	r0, r2, #5
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4621      	mov	r1, r4
 80043c4:	1a51      	subs	r1, r2, r1
 80043c6:	6139      	str	r1, [r7, #16]
 80043c8:	4629      	mov	r1, r5
 80043ca:	eb63 0301 	sbc.w	r3, r3, r1
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043dc:	4659      	mov	r1, fp
 80043de:	018b      	lsls	r3, r1, #6
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043e6:	4651      	mov	r1, sl
 80043e8:	018a      	lsls	r2, r1, #6
 80043ea:	4651      	mov	r1, sl
 80043ec:	ebb2 0801 	subs.w	r8, r2, r1
 80043f0:	4659      	mov	r1, fp
 80043f2:	eb63 0901 	sbc.w	r9, r3, r1
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800440a:	4690      	mov	r8, r2
 800440c:	4699      	mov	r9, r3
 800440e:	4623      	mov	r3, r4
 8004410:	eb18 0303 	adds.w	r3, r8, r3
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	462b      	mov	r3, r5
 8004418:	eb49 0303 	adc.w	r3, r9, r3
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800442a:	4629      	mov	r1, r5
 800442c:	024b      	lsls	r3, r1, #9
 800442e:	4621      	mov	r1, r4
 8004430:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004434:	4621      	mov	r1, r4
 8004436:	024a      	lsls	r2, r1, #9
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800443e:	2200      	movs	r2, #0
 8004440:	62bb      	str	r3, [r7, #40]	; 0x28
 8004442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004444:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004448:	f7fc fa70 	bl	800092c <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4613      	mov	r3, r2
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004454:	e058      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004456:	4b38      	ldr	r3, [pc, #224]	; (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	099b      	lsrs	r3, r3, #6
 800445c:	2200      	movs	r2, #0
 800445e:	4618      	mov	r0, r3
 8004460:	4611      	mov	r1, r2
 8004462:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004466:	623b      	str	r3, [r7, #32]
 8004468:	2300      	movs	r3, #0
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
 800446c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004470:	4642      	mov	r2, r8
 8004472:	464b      	mov	r3, r9
 8004474:	f04f 0000 	mov.w	r0, #0
 8004478:	f04f 0100 	mov.w	r1, #0
 800447c:	0159      	lsls	r1, r3, #5
 800447e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004482:	0150      	lsls	r0, r2, #5
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4641      	mov	r1, r8
 800448a:	ebb2 0a01 	subs.w	sl, r2, r1
 800448e:	4649      	mov	r1, r9
 8004490:	eb63 0b01 	sbc.w	fp, r3, r1
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044a8:	ebb2 040a 	subs.w	r4, r2, sl
 80044ac:	eb63 050b 	sbc.w	r5, r3, fp
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	00eb      	lsls	r3, r5, #3
 80044ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044be:	00e2      	lsls	r2, r4, #3
 80044c0:	4614      	mov	r4, r2
 80044c2:	461d      	mov	r5, r3
 80044c4:	4643      	mov	r3, r8
 80044c6:	18e3      	adds	r3, r4, r3
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	464b      	mov	r3, r9
 80044cc:	eb45 0303 	adc.w	r3, r5, r3
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044de:	4629      	mov	r1, r5
 80044e0:	028b      	lsls	r3, r1, #10
 80044e2:	4621      	mov	r1, r4
 80044e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e8:	4621      	mov	r1, r4
 80044ea:	028a      	lsls	r2, r1, #10
 80044ec:	4610      	mov	r0, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f2:	2200      	movs	r2, #0
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	61fa      	str	r2, [r7, #28]
 80044f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044fc:	f7fc fa16 	bl	800092c <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4613      	mov	r3, r2
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	3301      	adds	r3, #1
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004518:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800451a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004522:	e002      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <HAL_RCC_GetSysClockFreq+0x204>)
 8004526:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800452a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800452c:	4618      	mov	r0, r3
 800452e:	3750      	adds	r7, #80	; 0x50
 8004530:	46bd      	mov	sp, r7
 8004532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004536:	bf00      	nop
 8004538:	40023800 	.word	0x40023800
 800453c:	00f42400 	.word	0x00f42400
 8004540:	007a1200 	.word	0x007a1200

08004544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004548:	4b03      	ldr	r3, [pc, #12]	; (8004558 <HAL_RCC_GetHCLKFreq+0x14>)
 800454a:	681b      	ldr	r3, [r3, #0]
}
 800454c:	4618      	mov	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000044 	.word	0x20000044

0800455c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004560:	f7ff fff0 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	0a9b      	lsrs	r3, r3, #10
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4903      	ldr	r1, [pc, #12]	; (8004580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40023800 	.word	0x40023800
 8004580:	0800d470 	.word	0x0800d470

08004584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004588:	f7ff ffdc 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	0b5b      	lsrs	r3, r3, #13
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	4903      	ldr	r1, [pc, #12]	; (80045a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40023800 	.word	0x40023800
 80045a8:	0800d470 	.word	0x0800d470

080045ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	220f      	movs	r2, #15
 80045ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <HAL_RCC_GetClockConfig+0x5c>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 0203 	and.w	r2, r3, #3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <HAL_RCC_GetClockConfig+0x5c>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <HAL_RCC_GetClockConfig+0x5c>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_RCC_GetClockConfig+0x5c>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <HAL_RCC_GetClockConfig+0x60>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0207 	and.w	r2, r3, #7
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	601a      	str	r2, [r3, #0]
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800
 800460c:	40023c00 	.word	0x40023c00

08004610 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d105      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004634:	2b00      	cmp	r3, #0
 8004636:	d035      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004638:	4b62      	ldr	r3, [pc, #392]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800463e:	f7fe faff 	bl	8002c40 <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004646:	f7fe fafb 	bl	8002c40 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e0b0      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004658:	4b5b      	ldr	r3, [pc, #364]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	019a      	lsls	r2, r3, #6
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	071b      	lsls	r3, r3, #28
 8004670:	4955      	ldr	r1, [pc, #340]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004678:	4b52      	ldr	r3, [pc, #328]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800467e:	f7fe fadf 	bl	8002c40 <HAL_GetTick>
 8004682:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004686:	f7fe fadb 	bl	8002c40 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e090      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004698:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8083 	beq.w	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	4b44      	ldr	r3, [pc, #272]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	4a43      	ldr	r2, [pc, #268]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c0:	6413      	str	r3, [r2, #64]	; 0x40
 80046c2:	4b41      	ldr	r3, [pc, #260]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046ce:	4b3f      	ldr	r3, [pc, #252]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a3e      	ldr	r2, [pc, #248]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046da:	f7fe fab1 	bl	8002c40 <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046e2:	f7fe faad 	bl	8002c40 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e062      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046f4:	4b35      	ldr	r3, [pc, #212]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004700:	4b31      	ldr	r3, [pc, #196]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004708:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d02f      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	429a      	cmp	r2, r3
 800471c:	d028      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800471e:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004726:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004728:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800472e:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004734:	4a24      	ldr	r2, [pc, #144]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800473a:	4b23      	ldr	r3, [pc, #140]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b01      	cmp	r3, #1
 8004744:	d114      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004746:	f7fe fa7b 	bl	8002c40 <HAL_GetTick>
 800474a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474c:	e00a      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800474e:	f7fe fa77 	bl	8002c40 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f241 3288 	movw	r2, #5000	; 0x1388
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e02a      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004764:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ee      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800477c:	d10d      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800478e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004792:	490d      	ldr	r1, [pc, #52]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004794:	4313      	orrs	r3, r2
 8004796:	608b      	str	r3, [r1, #8]
 8004798:	e005      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047a4:	6093      	str	r3, [r2, #8]
 80047a6:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b2:	4905      	ldr	r1, [pc, #20]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	42470068 	.word	0x42470068
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40007000 	.word	0x40007000
 80047d0:	42470e40 	.word	0x42470e40

080047d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e083      	b.n	80048ee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	7f5b      	ldrb	r3, [r3, #29]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d105      	bne.n	80047fc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fd fefc 	bl	80025f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	22ca      	movs	r2, #202	; 0xca
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2253      	movs	r2, #83	; 0x53
 8004810:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 faa8 	bl	8004d68 <RTC_EnterInitMode>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	22ff      	movs	r2, #255	; 0xff
 8004824:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2204      	movs	r2, #4
 800482a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e05e      	b.n	80048ee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800483e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004842:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6899      	ldr	r1, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68d2      	ldr	r2, [r2, #12]
 800486a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6919      	ldr	r1, [r3, #16]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	041a      	lsls	r2, r3, #16
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800488e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10e      	bne.n	80048bc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fa3a 	bl	8004d18 <HAL_RTC_WaitForSynchro>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	22ff      	movs	r2, #255	; 0xff
 80048b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2204      	movs	r2, #4
 80048b6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e018      	b.n	80048ee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	22ff      	movs	r2, #255	; 0xff
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80048ec:	2300      	movs	r3, #0
  }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048f6:	b590      	push	{r4, r7, lr}
 80048f8:	b087      	sub	sp, #28
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	7f1b      	ldrb	r3, [r3, #28]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_RTC_SetTime+0x1c>
 800490e:	2302      	movs	r3, #2
 8004910:	e0aa      	b.n	8004a68 <HAL_RTC_SetTime+0x172>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2202      	movs	r2, #2
 800491c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d126      	bne.n	8004972 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d102      	bne.n	8004938 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2200      	movs	r2, #0
 8004936:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fa3f 	bl	8004dc0 <RTC_ByteToBcd2>
 8004942:	4603      	mov	r3, r0
 8004944:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	785b      	ldrb	r3, [r3, #1]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fa38 	bl	8004dc0 <RTC_ByteToBcd2>
 8004950:	4603      	mov	r3, r0
 8004952:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004954:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	789b      	ldrb	r3, [r3, #2]
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fa30 	bl	8004dc0 <RTC_ByteToBcd2>
 8004960:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004962:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	78db      	ldrb	r3, [r3, #3]
 800496a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	e018      	b.n	80049a4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2200      	movs	r2, #0
 8004984:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	785b      	ldrb	r3, [r3, #1]
 8004990:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004992:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004998:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	78db      	ldrb	r3, [r3, #3]
 800499e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	22ca      	movs	r2, #202	; 0xca
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2253      	movs	r2, #83	; 0x53
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f9d7 	bl	8004d68 <RTC_EnterInitMode>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00b      	beq.n	80049d8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	22ff      	movs	r2, #255	; 0xff
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2204      	movs	r2, #4
 80049cc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e047      	b.n	8004a68 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80049e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049f6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6899      	ldr	r1, [r3, #8]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a1e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d111      	bne.n	8004a52 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f972 	bl	8004d18 <HAL_RTC_WaitForSynchro>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	22ff      	movs	r2, #255	; 0xff
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2204      	movs	r2, #4
 8004a46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e00a      	b.n	8004a68 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	22ff      	movs	r2, #255	; 0xff
 8004a58:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004a66:	2300      	movs	r3, #0
  }
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd90      	pop	{r4, r7, pc}

08004a70 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004aa2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	0c1b      	lsrs	r3, r3, #16
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	0a1b      	lsrs	r3, r3, #8
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	0c1b      	lsrs	r3, r3, #16
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d11a      	bne.n	8004b22 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 f983 	bl	8004dfc <RTC_Bcd2ToByte>
 8004af6:	4603      	mov	r3, r0
 8004af8:	461a      	mov	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	785b      	ldrb	r3, [r3, #1]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f97a 	bl	8004dfc <RTC_Bcd2ToByte>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	789b      	ldrb	r3, [r3, #2]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 f971 	bl	8004dfc <RTC_Bcd2ToByte>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b2c:	b590      	push	{r4, r7, lr}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	7f1b      	ldrb	r3, [r3, #28]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_RTC_SetDate+0x1c>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e094      	b.n	8004c72 <HAL_RTC_SetDate+0x146>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2202      	movs	r2, #2
 8004b52:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10e      	bne.n	8004b78 <HAL_RTC_SetDate+0x4c>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d008      	beq.n	8004b78 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	f023 0310 	bic.w	r3, r3, #16
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	330a      	adds	r3, #10
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	78db      	ldrb	r3, [r3, #3]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f91c 	bl	8004dc0 <RTC_ByteToBcd2>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 f915 	bl	8004dc0 <RTC_ByteToBcd2>
 8004b96:	4603      	mov	r3, r0
 8004b98:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b9a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	789b      	ldrb	r3, [r3, #2]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 f90d 	bl	8004dc0 <RTC_ByteToBcd2>
 8004ba6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ba8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	e00e      	b.n	8004bd6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	78db      	ldrb	r3, [r3, #3]
 8004bbc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004bc4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004bca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	22ca      	movs	r2, #202	; 0xca
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2253      	movs	r2, #83	; 0x53
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f8be 	bl	8004d68 <RTC_EnterInitMode>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	22ff      	movs	r2, #255	; 0xff
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e033      	b.n	8004c72 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c28:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d111      	bne.n	8004c5c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f86d 	bl	8004d18 <HAL_RTC_WaitForSynchro>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00b      	beq.n	8004c5c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	22ff      	movs	r2, #255	; 0xff
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e00a      	b.n	8004c72 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	22ff      	movs	r2, #255	; 0xff
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004c70:	2300      	movs	r3, #0
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd90      	pop	{r4, r7, pc}

08004c7a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b086      	sub	sp, #24
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c98:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	0b5b      	lsrs	r3, r3, #13
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d11a      	bne.n	8004d0e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	78db      	ldrb	r3, [r3, #3]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 f88d 	bl	8004dfc <RTC_Bcd2ToByte>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f884 	bl	8004dfc <RTC_Bcd2ToByte>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	789b      	ldrb	r3, [r3, #2]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 f87b 	bl	8004dfc <RTC_Bcd2ToByte>
 8004d06:	4603      	mov	r3, r0
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d32:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d34:	f7fd ff84 	bl	8002c40 <HAL_GetTick>
 8004d38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004d3a:	e009      	b.n	8004d50 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d3c:	f7fd ff80 	bl	8002c40 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d4a:	d901      	bls.n	8004d50 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e007      	b.n	8004d60 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0ee      	beq.n	8004d3c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d119      	bne.n	8004db6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d8a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d8c:	f7fd ff58 	bl	8002c40 <HAL_GetTick>
 8004d90:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d92:	e009      	b.n	8004da8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d94:	f7fd ff54 	bl	8002c40 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004da2:	d901      	bls.n	8004da8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e007      	b.n	8004db8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ee      	beq.n	8004d94 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004dce:	e005      	b.n	8004ddc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	3b0a      	subs	r3, #10
 8004dda:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	2b09      	cmp	r3, #9
 8004de0:	d8f6      	bhi.n	8004dd0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	b2db      	uxtb	r3, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	4413      	add	r3, r2
 8004e2a:	b2db      	uxtb	r3, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e07b      	b.n	8004f42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d108      	bne.n	8004e64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e5a:	d009      	beq.n	8004e70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	61da      	str	r2, [r3, #28]
 8004e62:	e005      	b.n	8004e70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fd fbde 	bl	800264c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef4:	ea42 0103 	orr.w	r1, r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	0c1b      	lsrs	r3, r3, #16
 8004f0e:	f003 0104 	and.w	r1, r3, #4
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	f003 0210 	and.w	r2, r3, #16
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b088      	sub	sp, #32
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	4613      	mov	r3, r2
 8004f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_SPI_Transmit+0x22>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e126      	b.n	80051ba <HAL_SPI_Transmit+0x270>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f74:	f7fd fe64 	bl	8002c40 <HAL_GetTick>
 8004f78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d002      	beq.n	8004f90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f8e:	e10b      	b.n	80051a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_SPI_Transmit+0x52>
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fa0:	e102      	b.n	80051a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	88fa      	ldrh	r2, [r7, #6]
 8004fba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	88fa      	ldrh	r2, [r7, #6]
 8004fc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe8:	d10f      	bne.n	800500a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005008:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b40      	cmp	r3, #64	; 0x40
 8005016:	d007      	beq.n	8005028 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005026:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005030:	d14b      	bne.n	80050ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_SPI_Transmit+0xf6>
 800503a:	8afb      	ldrh	r3, [r7, #22]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d13e      	bne.n	80050be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	881a      	ldrh	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	1c9a      	adds	r2, r3, #2
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005064:	e02b      	b.n	80050be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b02      	cmp	r3, #2
 8005072:	d112      	bne.n	800509a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	881a      	ldrh	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	1c9a      	adds	r2, r3, #2
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	86da      	strh	r2, [r3, #54]	; 0x36
 8005098:	e011      	b.n	80050be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800509a:	f7fd fdd1 	bl	8002c40 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d803      	bhi.n	80050b2 <HAL_SPI_Transmit+0x168>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b0:	d102      	bne.n	80050b8 <HAL_SPI_Transmit+0x16e>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d102      	bne.n	80050be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050bc:	e074      	b.n	80051a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ce      	bne.n	8005066 <HAL_SPI_Transmit+0x11c>
 80050c8:	e04c      	b.n	8005164 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_SPI_Transmit+0x18e>
 80050d2:	8afb      	ldrh	r3, [r7, #22]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d140      	bne.n	800515a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	330c      	adds	r3, #12
 80050e2:	7812      	ldrb	r2, [r2, #0]
 80050e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80050fe:	e02c      	b.n	800515a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b02      	cmp	r3, #2
 800510c:	d113      	bne.n	8005136 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	330c      	adds	r3, #12
 8005118:	7812      	ldrb	r2, [r2, #0]
 800511a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	86da      	strh	r2, [r3, #54]	; 0x36
 8005134:	e011      	b.n	800515a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005136:	f7fd fd83 	bl	8002c40 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d803      	bhi.n	800514e <HAL_SPI_Transmit+0x204>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800514c:	d102      	bne.n	8005154 <HAL_SPI_Transmit+0x20a>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d102      	bne.n	800515a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005158:	e026      	b.n	80051a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1cd      	bne.n	8005100 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	6839      	ldr	r1, [r7, #0]
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 fb13 	bl	8005794 <SPI_EndRxTxTransaction>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005182:	2300      	movs	r3, #0
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	77fb      	strb	r3, [r7, #31]
 80051a4:	e000      	b.n	80051a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80051a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_SPI_Transmit_DMA+0x20>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e09b      	b.n	800531c <HAL_SPI_Transmit_DMA+0x158>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d002      	beq.n	80051fe <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80051f8:	2302      	movs	r3, #2
 80051fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051fc:	e089      	b.n	8005312 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <HAL_SPI_Transmit_DMA+0x46>
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d102      	bne.n	8005210 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800520e:	e080      	b.n	8005312 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2203      	movs	r2, #3
 8005214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	88fa      	ldrh	r2, [r7, #6]
 800522e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005256:	d10f      	bne.n	8005278 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005266:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005276:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527c:	4a29      	ldr	r2, [pc, #164]	; (8005324 <HAL_SPI_Transmit_DMA+0x160>)
 800527e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005284:	4a28      	ldr	r2, [pc, #160]	; (8005328 <HAL_SPI_Transmit_DMA+0x164>)
 8005286:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528c:	4a27      	ldr	r2, [pc, #156]	; (800532c <HAL_SPI_Transmit_DMA+0x168>)
 800528e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005294:	2200      	movs	r2, #0
 8005296:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	4619      	mov	r1, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80052b0:	f7fd fe86 	bl	8002fc0 <HAL_DMA_Start_IT>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052be:	f043 0210 	orr.w	r2, r3, #16
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80052d2:	e01e      	b.n	8005312 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b40      	cmp	r3, #64	; 0x40
 80052e0:	d007      	beq.n	80052f2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0220 	orr.w	r2, r2, #32
 8005300:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0202 	orr.w	r2, r2, #2
 8005310:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	08005601 	.word	0x08005601
 8005328:	08005559 	.word	0x08005559
 800532c:	0800561d 	.word	0x0800561d

08005330 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	099b      	lsrs	r3, r3, #6
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10f      	bne.n	8005374 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	099b      	lsrs	r3, r3, #6
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	4798      	blx	r3
    return;
 8005372:	e0d7      	b.n	8005524 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_SPI_IRQHandler+0x66>
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	09db      	lsrs	r3, r3, #7
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d004      	beq.n	8005396 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	4798      	blx	r3
    return;
 8005394:	e0c6      	b.n	8005524 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10c      	bne.n	80053bc <HAL_SPI_IRQHandler+0x8c>
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	099b      	lsrs	r3, r3, #6
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 80b4 	beq.w	8005524 <HAL_SPI_IRQHandler+0x1f4>
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80ad 	beq.w	8005524 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	099b      	lsrs	r3, r3, #6
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d023      	beq.n	800541e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d011      	beq.n	8005406 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	f043 0204 	orr.w	r2, r3, #4
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	e00b      	b.n	800541e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005406:	2300      	movs	r3, #0
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	693b      	ldr	r3, [r7, #16]
        return;
 800541c:	e082      	b.n	8005524 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d014      	beq.n	8005454 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f043 0201 	orr.w	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	0a1b      	lsrs	r3, r3, #8
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00c      	beq.n	800547a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005464:	f043 0208 	orr.w	r2, r3, #8
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800546c:	2300      	movs	r3, #0
 800546e:	60bb      	str	r3, [r7, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60bb      	str	r3, [r7, #8]
 8005478:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547e:	2b00      	cmp	r3, #0
 8005480:	d04f      	beq.n	8005522 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005490:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_SPI_IRQHandler+0x17e>
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d034      	beq.n	8005518 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0203 	bic.w	r2, r2, #3
 80054bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d011      	beq.n	80054ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ca:	4a18      	ldr	r2, [pc, #96]	; (800552c <HAL_SPI_IRQHandler+0x1fc>)
 80054cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fd fe3c 	bl	8003150 <HAL_DMA_Abort_IT>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d016      	beq.n	8005520 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f6:	4a0d      	ldr	r2, [pc, #52]	; (800552c <HAL_SPI_IRQHandler+0x1fc>)
 80054f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fd fe26 	bl	8003150 <HAL_DMA_Abort_IT>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005516:	e003      	b.n	8005520 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f813 	bl	8005544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800551e:	e000      	b.n	8005522 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005520:	bf00      	nop
    return;
 8005522:	bf00      	nop
  }
}
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	0800565d 	.word	0x0800565d

08005530 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005566:	f7fd fb6b 	bl	8002c40 <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557a:	d03b      	beq.n	80055f4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0220 	bic.w	r2, r2, #32
 800558a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0202 	bic.w	r2, r2, #2
 800559a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	2164      	movs	r1, #100	; 0x64
 80055a0:	6978      	ldr	r0, [r7, #20]
 80055a2:	f000 f8f7 	bl	8005794 <SPI_EndRxTxTransaction>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	f043 0220 	orr.w	r2, r3, #32
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2200      	movs	r2, #0
 80055da:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80055ec:	6978      	ldr	r0, [r7, #20]
 80055ee:	f7ff ffa9 	bl	8005544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80055f2:	e002      	b.n	80055fa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80055f4:	6978      	ldr	r0, [r7, #20]
 80055f6:	f7fc f967 	bl	80018c8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f7ff ff8e 	bl	8005530 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0203 	bic.w	r2, r2, #3
 8005638:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	f043 0210 	orr.w	r2, r3, #16
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f7ff ff78 	bl	8005544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff ff64 	bl	8005544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005694:	f7fd fad4 	bl	8002c40 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	4413      	add	r3, r2
 80056a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056a4:	f7fd facc 	bl	8002c40 <HAL_GetTick>
 80056a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056aa:	4b39      	ldr	r3, [pc, #228]	; (8005790 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	015b      	lsls	r3, r3, #5
 80056b0:	0d1b      	lsrs	r3, r3, #20
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ba:	e054      	b.n	8005766 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056c2:	d050      	beq.n	8005766 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056c4:	f7fd fabc 	bl	8002c40 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d902      	bls.n	80056da <SPI_WaitFlagStateUntilTimeout+0x56>
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d13d      	bne.n	8005756 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056f2:	d111      	bne.n	8005718 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fc:	d004      	beq.n	8005708 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005706:	d107      	bne.n	8005718 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005716:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005720:	d10f      	bne.n	8005742 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005740:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e017      	b.n	8005786 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	3b01      	subs	r3, #1
 8005764:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4013      	ands	r3, r2
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	429a      	cmp	r2, r3
 8005774:	bf0c      	ite	eq
 8005776:	2301      	moveq	r3, #1
 8005778:	2300      	movne	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	429a      	cmp	r2, r3
 8005782:	d19b      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000044 	.word	0x20000044

08005794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057a0:	4b1b      	ldr	r3, [pc, #108]	; (8005810 <SPI_EndRxTxTransaction+0x7c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <SPI_EndRxTxTransaction+0x80>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	0d5b      	lsrs	r3, r3, #21
 80057ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057b0:	fb02 f303 	mul.w	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057be:	d112      	bne.n	80057e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2200      	movs	r2, #0
 80057c8:	2180      	movs	r1, #128	; 0x80
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff ff5a 	bl	8005684 <SPI_WaitFlagStateUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	f043 0220 	orr.w	r2, r3, #32
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e00f      	b.n	8005806 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fc:	2b80      	cmp	r3, #128	; 0x80
 80057fe:	d0f2      	beq.n	80057e6 <SPI_EndRxTxTransaction+0x52>
 8005800:	e000      	b.n	8005804 <SPI_EndRxTxTransaction+0x70>
        break;
 8005802:	bf00      	nop
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20000044 	.word	0x20000044
 8005814:	165e9f81 	.word	0x165e9f81

08005818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e041      	b.n	80058ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fc ff90 	bl	8002764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f000 fa96 	bl	8005d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d001      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e04e      	b.n	800596e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a23      	ldr	r2, [pc, #140]	; (800597c <HAL_TIM_Base_Start_IT+0xc4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d022      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x80>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d01d      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x80>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1f      	ldr	r2, [pc, #124]	; (8005980 <HAL_TIM_Base_Start_IT+0xc8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d018      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x80>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1e      	ldr	r2, [pc, #120]	; (8005984 <HAL_TIM_Base_Start_IT+0xcc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d013      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x80>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1c      	ldr	r2, [pc, #112]	; (8005988 <HAL_TIM_Base_Start_IT+0xd0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00e      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x80>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1b      	ldr	r2, [pc, #108]	; (800598c <HAL_TIM_Base_Start_IT+0xd4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d009      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x80>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a19      	ldr	r2, [pc, #100]	; (8005990 <HAL_TIM_Base_Start_IT+0xd8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x80>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a18      	ldr	r2, [pc, #96]	; (8005994 <HAL_TIM_Base_Start_IT+0xdc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d111      	bne.n	800595c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b06      	cmp	r3, #6
 8005948:	d010      	beq.n	800596c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595a:	e007      	b.n	800596c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40010000 	.word	0x40010000
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800
 8005988:	40000c00 	.word	0x40000c00
 800598c:	40010400 	.word	0x40010400
 8005990:	40014000 	.word	0x40014000
 8005994:	40001800 	.word	0x40001800

08005998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d122      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d11b      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0202 	mvn.w	r2, #2
 80059c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f9b5 	bl	8005d4a <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f9a7 	bl	8005d36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f9b8 	bl	8005d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d122      	bne.n	8005a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d11b      	bne.n	8005a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0204 	mvn.w	r2, #4
 8005a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f98b 	bl	8005d4a <HAL_TIM_IC_CaptureCallback>
 8005a34:	e005      	b.n	8005a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f97d 	bl	8005d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f98e 	bl	8005d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d122      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d11b      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0208 	mvn.w	r2, #8
 8005a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2204      	movs	r2, #4
 8005a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f961 	bl	8005d4a <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f953 	bl	8005d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f964 	bl	8005d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d122      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d11b      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0210 	mvn.w	r2, #16
 8005ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f937 	bl	8005d4a <HAL_TIM_IC_CaptureCallback>
 8005adc:	e005      	b.n	8005aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f929 	bl	8005d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f93a 	bl	8005d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d10e      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d107      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0201 	mvn.w	r2, #1
 8005b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fc f92a 	bl	8001d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b26:	2b80      	cmp	r3, #128	; 0x80
 8005b28:	d10e      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b34:	2b80      	cmp	r3, #128	; 0x80
 8005b36:	d107      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fae0 	bl	8006108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b52:	2b40      	cmp	r3, #64	; 0x40
 8005b54:	d10e      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b60:	2b40      	cmp	r3, #64	; 0x40
 8005b62:	d107      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f8ff 	bl	8005d72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	d10e      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d107      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0220 	mvn.w	r2, #32
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 faaa 	bl	80060f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e0b4      	b.n	8005d2e <HAL_TIM_ConfigClockSource+0x186>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfc:	d03e      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0xd4>
 8005bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c02:	f200 8087 	bhi.w	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0a:	f000 8086 	beq.w	8005d1a <HAL_TIM_ConfigClockSource+0x172>
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c12:	d87f      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c14:	2b70      	cmp	r3, #112	; 0x70
 8005c16:	d01a      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0xa6>
 8005c18:	2b70      	cmp	r3, #112	; 0x70
 8005c1a:	d87b      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c1c:	2b60      	cmp	r3, #96	; 0x60
 8005c1e:	d050      	beq.n	8005cc2 <HAL_TIM_ConfigClockSource+0x11a>
 8005c20:	2b60      	cmp	r3, #96	; 0x60
 8005c22:	d877      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c24:	2b50      	cmp	r3, #80	; 0x50
 8005c26:	d03c      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0xfa>
 8005c28:	2b50      	cmp	r3, #80	; 0x50
 8005c2a:	d873      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c2c:	2b40      	cmp	r3, #64	; 0x40
 8005c2e:	d058      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x13a>
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d86f      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c34:	2b30      	cmp	r3, #48	; 0x30
 8005c36:	d064      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x15a>
 8005c38:	2b30      	cmp	r3, #48	; 0x30
 8005c3a:	d86b      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d060      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x15a>
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d867      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d05c      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x15a>
 8005c48:	2b10      	cmp	r3, #16
 8005c4a:	d05a      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x15a>
 8005c4c:	e062      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6899      	ldr	r1, [r3, #8]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f000 f9ad 	bl	8005fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	609a      	str	r2, [r3, #8]
      break;
 8005c7a:	e04f      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	6899      	ldr	r1, [r3, #8]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f000 f996 	bl	8005fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c9e:	609a      	str	r2, [r3, #8]
      break;
 8005ca0:	e03c      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6859      	ldr	r1, [r3, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f000 f90a 	bl	8005ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2150      	movs	r1, #80	; 0x50
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 f963 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005cc0:	e02c      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6818      	ldr	r0, [r3, #0]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6859      	ldr	r1, [r3, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f000 f929 	bl	8005f26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2160      	movs	r1, #96	; 0x60
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f953 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005ce0:	e01c      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f000 f8ea 	bl	8005ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2140      	movs	r1, #64	; 0x40
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f943 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005d00:	e00c      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f000 f93a 	bl	8005f86 <TIM_ITRx_SetConfig>
      break;
 8005d12:	e003      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
      break;
 8005d18:	e000      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a40      	ldr	r2, [pc, #256]	; (8005e9c <TIM_Base_SetConfig+0x114>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <TIM_Base_SetConfig+0x40>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da6:	d00f      	beq.n	8005dc8 <TIM_Base_SetConfig+0x40>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a3d      	ldr	r2, [pc, #244]	; (8005ea0 <TIM_Base_SetConfig+0x118>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00b      	beq.n	8005dc8 <TIM_Base_SetConfig+0x40>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a3c      	ldr	r2, [pc, #240]	; (8005ea4 <TIM_Base_SetConfig+0x11c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d007      	beq.n	8005dc8 <TIM_Base_SetConfig+0x40>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a3b      	ldr	r2, [pc, #236]	; (8005ea8 <TIM_Base_SetConfig+0x120>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_Base_SetConfig+0x40>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a3a      	ldr	r2, [pc, #232]	; (8005eac <TIM_Base_SetConfig+0x124>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d108      	bne.n	8005dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2f      	ldr	r2, [pc, #188]	; (8005e9c <TIM_Base_SetConfig+0x114>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d02b      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de8:	d027      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a2c      	ldr	r2, [pc, #176]	; (8005ea0 <TIM_Base_SetConfig+0x118>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d023      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a2b      	ldr	r2, [pc, #172]	; (8005ea4 <TIM_Base_SetConfig+0x11c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d01f      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a2a      	ldr	r2, [pc, #168]	; (8005ea8 <TIM_Base_SetConfig+0x120>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d01b      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a29      	ldr	r2, [pc, #164]	; (8005eac <TIM_Base_SetConfig+0x124>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d017      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a28      	ldr	r2, [pc, #160]	; (8005eb0 <TIM_Base_SetConfig+0x128>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a27      	ldr	r2, [pc, #156]	; (8005eb4 <TIM_Base_SetConfig+0x12c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00f      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a26      	ldr	r2, [pc, #152]	; (8005eb8 <TIM_Base_SetConfig+0x130>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00b      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a25      	ldr	r2, [pc, #148]	; (8005ebc <TIM_Base_SetConfig+0x134>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d007      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a24      	ldr	r2, [pc, #144]	; (8005ec0 <TIM_Base_SetConfig+0x138>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d003      	beq.n	8005e3a <TIM_Base_SetConfig+0xb2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a23      	ldr	r2, [pc, #140]	; (8005ec4 <TIM_Base_SetConfig+0x13c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d108      	bne.n	8005e4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <TIM_Base_SetConfig+0x114>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_Base_SetConfig+0xf8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a0c      	ldr	r2, [pc, #48]	; (8005eac <TIM_Base_SetConfig+0x124>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d103      	bne.n	8005e88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	615a      	str	r2, [r3, #20]
}
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00
 8005eac:	40010400 	.word	0x40010400
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40014400 	.word	0x40014400
 8005eb8:	40014800 	.word	0x40014800
 8005ebc:	40001800 	.word	0x40001800
 8005ec0:	40001c00 	.word	0x40001c00
 8005ec4:	40002000 	.word	0x40002000

08005ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f023 0201 	bic.w	r2, r3, #1
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f023 030a 	bic.w	r3, r3, #10
 8005f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	621a      	str	r2, [r3, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b087      	sub	sp, #28
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f023 0210 	bic.w	r2, r3, #16
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	031b      	lsls	r3, r3, #12
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f043 0307 	orr.w	r3, r3, #7
 8005fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	bf00      	nop
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	021a      	lsls	r2, r3, #8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	609a      	str	r2, [r3, #8]
}
 8005ff0:	bf00      	nop
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006010:	2302      	movs	r3, #2
 8006012:	e05a      	b.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a21      	ldr	r2, [pc, #132]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d022      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006060:	d01d      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1d      	ldr	r2, [pc, #116]	; (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d018      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1b      	ldr	r2, [pc, #108]	; (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1a      	ldr	r2, [pc, #104]	; (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00e      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d009      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a17      	ldr	r2, [pc, #92]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a15      	ldr	r2, [pc, #84]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10c      	bne.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40001800 	.word	0x40001800

080060f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e03f      	b.n	80061ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fc fb34 	bl	80027b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2224      	movs	r2, #36	; 0x24
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800615e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fe27 	bl	8006db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695a      	ldr	r2, [r3, #20]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d11d      	bne.n	800620c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_UART_Receive_IT+0x26>
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e016      	b.n	800620e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_UART_Receive_IT+0x38>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e00f      	b.n	800620e <HAL_UART_Receive_IT+0x58>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	461a      	mov	r2, r3
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 fbd9 	bl	80069ba <UART_Start_Receive_IT>
 8006208:	4603      	mov	r3, r0
 800620a:	e000      	b.n	800620e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800620c:	2302      	movs	r3, #2
  }
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08c      	sub	sp, #48	; 0x30
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b20      	cmp	r3, #32
 8006230:	d165      	bne.n	80062fe <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HAL_UART_Transmit_DMA+0x26>
 8006238:	88fb      	ldrh	r3, [r7, #6]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e05e      	b.n	8006300 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_UART_Transmit_DMA+0x38>
 800624c:	2302      	movs	r3, #2
 800624e:	e057      	b.n	8006300 <HAL_UART_Transmit_DMA+0xe8>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2221      	movs	r2, #33	; 0x21
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627c:	4a22      	ldr	r2, [pc, #136]	; (8006308 <HAL_UART_Transmit_DMA+0xf0>)
 800627e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006284:	4a21      	ldr	r2, [pc, #132]	; (800630c <HAL_UART_Transmit_DMA+0xf4>)
 8006286:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628c:	4a20      	ldr	r2, [pc, #128]	; (8006310 <HAL_UART_Transmit_DMA+0xf8>)
 800628e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006294:	2200      	movs	r2, #0
 8006296:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006298:	f107 0308 	add.w	r3, r7, #8
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	6819      	ldr	r1, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3304      	adds	r3, #4
 80062ac:	461a      	mov	r2, r3
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	f7fc fe86 	bl	8002fc0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062bc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	617b      	str	r3, [r7, #20]
   return(result);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3314      	adds	r3, #20
 80062e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062e6:	627a      	str	r2, [r7, #36]	; 0x24
 80062e8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6a39      	ldr	r1, [r7, #32]
 80062ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e5      	bne.n	80062c6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e000      	b.n	8006300 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80062fe:	2302      	movs	r3, #2
  }
}
 8006300:	4618      	mov	r0, r3
 8006302:	3730      	adds	r7, #48	; 0x30
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	08006871 	.word	0x08006871
 800630c:	0800690b 	.word	0x0800690b
 8006310:	08006927 	.word	0x08006927

08006314 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b0ba      	sub	sp, #232	; 0xe8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800633a:	2300      	movs	r3, #0
 800633c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006340:	2300      	movs	r3, #0
 8006342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10f      	bne.n	800637a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <HAL_UART_IRQHandler+0x66>
 8006366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fc62 	bl	8006c3c <UART_Receive_IT>
      return;
 8006378:	e256      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800637a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80de 	beq.w	8006540 <HAL_UART_IRQHandler+0x22c>
 8006384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006394:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80d1 	beq.w	8006540 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <HAL_UART_IRQHandler+0xae>
 80063aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	f043 0201 	orr.w	r2, r3, #1
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00b      	beq.n	80063e6 <HAL_UART_IRQHandler+0xd2>
 80063ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	f043 0202 	orr.w	r2, r3, #2
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <HAL_UART_IRQHandler+0xf6>
 80063f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	f043 0204 	orr.w	r2, r3, #4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d011      	beq.n	800643a <HAL_UART_IRQHandler+0x126>
 8006416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d105      	bne.n	800642e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f043 0208 	orr.w	r2, r3, #8
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 81ed 	beq.w	800681e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d008      	beq.n	8006462 <HAL_UART_IRQHandler+0x14e>
 8006450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fbed 	bl	8006c3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b40      	cmp	r3, #64	; 0x40
 800646e:	bf0c      	ite	eq
 8006470:	2301      	moveq	r3, #1
 8006472:	2300      	movne	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <HAL_UART_IRQHandler+0x17a>
 8006486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d04f      	beq.n	800652e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 faf5 	bl	8006a7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d141      	bne.n	8006526 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3314      	adds	r3, #20
 80064a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3314      	adds	r3, #20
 80064ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1d9      	bne.n	80064a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d013      	beq.n	800651e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	4a7d      	ldr	r2, [pc, #500]	; (80066f0 <HAL_UART_IRQHandler+0x3dc>)
 80064fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	4618      	mov	r0, r3
 8006504:	f7fc fe24 	bl	8003150 <HAL_DMA_Abort_IT>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d016      	beq.n	800653c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006518:	4610      	mov	r0, r2
 800651a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800651c:	e00e      	b.n	800653c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f990 	bl	8006844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	e00a      	b.n	800653c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f98c 	bl	8006844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	e006      	b.n	800653c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f988 	bl	8006844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800653a:	e170      	b.n	800681e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653c:	bf00      	nop
    return;
 800653e:	e16e      	b.n	800681e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006544:	2b01      	cmp	r3, #1
 8006546:	f040 814a 	bne.w	80067de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8143 	beq.w	80067de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 813c 	beq.w	80067de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006566:	2300      	movs	r3, #0
 8006568:	60bb      	str	r3, [r7, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	f040 80b4 	bne.w	80066f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8140 	beq.w	8006822 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065aa:	429a      	cmp	r2, r3
 80065ac:	f080 8139 	bcs.w	8006822 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c2:	f000 8088 	beq.w	80066d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	330c      	adds	r3, #12
 80065cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	330c      	adds	r3, #12
 80065ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800660a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1d9      	bne.n	80065c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3314      	adds	r3, #20
 8006632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006636:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800663a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800663e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e1      	bne.n	8006612 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3314      	adds	r3, #20
 8006654:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800665e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3314      	adds	r3, #20
 800666e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006672:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006674:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006678:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e3      	bne.n	800664e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	330c      	adds	r3, #12
 800669a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a6:	f023 0310 	bic.w	r3, r3, #16
 80066aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80066ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e3      	bne.n	8006694 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fc fccd 	bl	8003070 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066de:	b29b      	uxth	r3, r3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f8b6 	bl	8006858 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066ec:	e099      	b.n	8006822 <HAL_UART_IRQHandler+0x50e>
 80066ee:	bf00      	nop
 80066f0:	08006b45 	.word	0x08006b45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 808b 	beq.w	8006826 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8086 	beq.w	8006826 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	330c      	adds	r3, #12
 8006720:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800672a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006730:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	330c      	adds	r3, #12
 800673a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800673e:	647a      	str	r2, [r7, #68]	; 0x44
 8006740:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800674c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e3      	bne.n	800671a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3314      	adds	r3, #20
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	623b      	str	r3, [r7, #32]
   return(result);
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	f023 0301 	bic.w	r3, r3, #1
 8006768:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3314      	adds	r3, #20
 8006772:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006776:	633a      	str	r2, [r7, #48]	; 0x30
 8006778:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800677c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e3      	bne.n	8006752 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	330c      	adds	r3, #12
 800679e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0310 	bic.w	r3, r3, #16
 80067ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	330c      	adds	r3, #12
 80067b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80067bc:	61fa      	str	r2, [r7, #28]
 80067be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	69b9      	ldr	r1, [r7, #24]
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	617b      	str	r3, [r7, #20]
   return(result);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e3      	bne.n	8006798 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f83e 	bl	8006858 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067dc:	e023      	b.n	8006826 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d009      	beq.n	80067fe <HAL_UART_IRQHandler+0x4ea>
 80067ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f9b8 	bl	8006b6c <UART_Transmit_IT>
    return;
 80067fc:	e014      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00e      	beq.n	8006828 <HAL_UART_IRQHandler+0x514>
 800680a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d008      	beq.n	8006828 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f9f8 	bl	8006c0c <UART_EndTransmit_IT>
    return;
 800681c:	e004      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
    return;
 800681e:	bf00      	nop
 8006820:	e002      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
      return;
 8006822:	bf00      	nop
 8006824:	e000      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
      return;
 8006826:	bf00      	nop
  }
}
 8006828:	37e8      	adds	r7, #232	; 0xe8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop

08006830 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b090      	sub	sp, #64	; 0x40
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006888:	2b00      	cmp	r3, #0
 800688a:	d137      	bne.n	80068fc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800688c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688e:	2200      	movs	r2, #0
 8006890:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3314      	adds	r3, #20
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	623b      	str	r3, [r7, #32]
   return(result);
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80068aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3314      	adds	r3, #20
 80068b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068b2:	633a      	str	r2, [r7, #48]	; 0x30
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e5      	bne.n	8006892 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	330c      	adds	r3, #12
 80068cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
 80068de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	330c      	adds	r3, #12
 80068e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068e6:	61fa      	str	r2, [r7, #28]
 80068e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	69b9      	ldr	r1, [r7, #24]
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	617b      	str	r3, [r7, #20]
   return(result);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e5      	bne.n	80068c6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068fa:	e002      	b.n	8006902 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80068fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80068fe:	f7fa ffcd 	bl	800189c <HAL_UART_TxCpltCallback>
}
 8006902:	bf00      	nop
 8006904:	3740      	adds	r7, #64	; 0x40
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff ff89 	bl	8006830 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800691e:	bf00      	nop
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b80      	cmp	r3, #128	; 0x80
 8006944:	bf0c      	ite	eq
 8006946:	2301      	moveq	r3, #1
 8006948:	2300      	movne	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b21      	cmp	r3, #33	; 0x21
 8006958:	d108      	bne.n	800696c <UART_DMAError+0x46>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2200      	movs	r2, #0
 8006964:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006966:	68b8      	ldr	r0, [r7, #8]
 8006968:	f000 f861 	bl	8006a2e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	bf0c      	ite	eq
 800697a:	2301      	moveq	r3, #1
 800697c:	2300      	movne	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b22      	cmp	r3, #34	; 0x22
 800698c:	d108      	bne.n	80069a0 <UART_DMAError+0x7a>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2200      	movs	r2, #0
 8006998:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800699a:	68b8      	ldr	r0, [r7, #8]
 800699c:	f000 f86f 	bl	8006a7e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	f043 0210 	orr.w	r2, r3, #16
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ac:	68b8      	ldr	r0, [r7, #8]
 80069ae:	f7ff ff49 	bl	8006844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	4613      	mov	r3, r2
 80069c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	88fa      	ldrh	r2, [r7, #6]
 80069d2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	88fa      	ldrh	r2, [r7, #6]
 80069d8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2222      	movs	r2, #34	; 0x22
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069fe:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695a      	ldr	r2, [r3, #20]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0201 	orr.w	r2, r2, #1
 8006a0e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0220 	orr.w	r2, r2, #32
 8006a1e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b089      	sub	sp, #36	; 0x24
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	330c      	adds	r3, #12
 8006a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	330c      	adds	r3, #12
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	61ba      	str	r2, [r7, #24]
 8006a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6979      	ldr	r1, [r7, #20]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	613b      	str	r3, [r7, #16]
   return(result);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e5      	bne.n	8006a36 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006a72:	bf00      	nop
 8006a74:	3724      	adds	r7, #36	; 0x24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b095      	sub	sp, #84	; 0x54
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	330c      	adds	r3, #12
 8006aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006aa6:	643a      	str	r2, [r7, #64]	; 0x40
 8006aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e5      	bne.n	8006a86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3314      	adds	r3, #20
 8006ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f023 0301 	bic.w	r3, r3, #1
 8006ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3314      	adds	r3, #20
 8006ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ada:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e5      	bne.n	8006aba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d119      	bne.n	8006b2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	e853 3f00 	ldrex	r3, [r3]
 8006b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f023 0310 	bic.w	r3, r3, #16
 8006b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	330c      	adds	r3, #12
 8006b14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b16:	61ba      	str	r2, [r7, #24]
 8006b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	6979      	ldr	r1, [r7, #20]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	613b      	str	r3, [r7, #16]
   return(result);
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e5      	bne.n	8006af6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b38:	bf00      	nop
 8006b3a:	3754      	adds	r7, #84	; 0x54
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f7ff fe70 	bl	8006844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b21      	cmp	r3, #33	; 0x21
 8006b7e:	d13e      	bne.n	8006bfe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b88:	d114      	bne.n	8006bb4 <UART_Transmit_IT+0x48>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d110      	bne.n	8006bb4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	881b      	ldrh	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ba6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	1c9a      	adds	r2, r3, #2
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	621a      	str	r2, [r3, #32]
 8006bb2:	e008      	b.n	8006bc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	1c59      	adds	r1, r3, #1
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6211      	str	r1, [r2, #32]
 8006bbe:	781a      	ldrb	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10f      	bne.n	8006bfa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006be8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bf8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	e000      	b.n	8006c00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bfe:	2302      	movs	r3, #2
  }
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7fa fe35 	bl	800189c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08c      	sub	sp, #48	; 0x30
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b22      	cmp	r3, #34	; 0x22
 8006c4e:	f040 80ab 	bne.w	8006da8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5a:	d117      	bne.n	8006c8c <UART_Receive_IT+0x50>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d113      	bne.n	8006c8c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c84:	1c9a      	adds	r2, r3, #2
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	629a      	str	r2, [r3, #40]	; 0x28
 8006c8a:	e026      	b.n	8006cda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9e:	d007      	beq.n	8006cb0 <UART_Receive_IT+0x74>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <UART_Receive_IT+0x82>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	e008      	b.n	8006cd0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d15a      	bne.n	8006da4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0220 	bic.w	r2, r2, #32
 8006cfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	695a      	ldr	r2, [r3, #20]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0201 	bic.w	r2, r2, #1
 8006d1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d135      	bne.n	8006d9a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	613b      	str	r3, [r7, #16]
   return(result);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f023 0310 	bic.w	r3, r3, #16
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	330c      	adds	r3, #12
 8006d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d54:	623a      	str	r2, [r7, #32]
 8006d56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	69f9      	ldr	r1, [r7, #28]
 8006d5a:	6a3a      	ldr	r2, [r7, #32]
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e5      	bne.n	8006d34 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	2b10      	cmp	r3, #16
 8006d74:	d10a      	bne.n	8006d8c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7ff fd60 	bl	8006858 <HAL_UARTEx_RxEventCallback>
 8006d98:	e002      	b.n	8006da0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fa fcf4 	bl	8001788 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e002      	b.n	8006daa <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	e000      	b.n	8006daa <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006da8:	2302      	movs	r3, #2
  }
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3730      	adds	r7, #48	; 0x30
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db8:	b0c0      	sub	sp, #256	; 0x100
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd0:	68d9      	ldr	r1, [r3, #12]
 8006dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	ea40 0301 	orr.w	r3, r0, r1
 8006ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	431a      	orrs	r2, r3
 8006df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e0c:	f021 010c 	bic.w	r1, r1, #12
 8006e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e1a:	430b      	orrs	r3, r1
 8006e1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2e:	6999      	ldr	r1, [r3, #24]
 8006e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	ea40 0301 	orr.w	r3, r0, r1
 8006e3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	4b8f      	ldr	r3, [pc, #572]	; (8007080 <UART_SetConfig+0x2cc>)
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d005      	beq.n	8006e54 <UART_SetConfig+0xa0>
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b8d      	ldr	r3, [pc, #564]	; (8007084 <UART_SetConfig+0x2d0>)
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d104      	bne.n	8006e5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e54:	f7fd fb96 	bl	8004584 <HAL_RCC_GetPCLK2Freq>
 8006e58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e5c:	e003      	b.n	8006e66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e5e:	f7fd fb7d 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8006e62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e70:	f040 810c 	bne.w	800708c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e86:	4622      	mov	r2, r4
 8006e88:	462b      	mov	r3, r5
 8006e8a:	1891      	adds	r1, r2, r2
 8006e8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e8e:	415b      	adcs	r3, r3
 8006e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e96:	4621      	mov	r1, r4
 8006e98:	eb12 0801 	adds.w	r8, r2, r1
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	eb43 0901 	adc.w	r9, r3, r1
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	f04f 0300 	mov.w	r3, #0
 8006eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eb6:	4690      	mov	r8, r2
 8006eb8:	4699      	mov	r9, r3
 8006eba:	4623      	mov	r3, r4
 8006ebc:	eb18 0303 	adds.w	r3, r8, r3
 8006ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ec4:	462b      	mov	r3, r5
 8006ec6:	eb49 0303 	adc.w	r3, r9, r3
 8006eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006eda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	18db      	adds	r3, r3, r3
 8006ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8006ee8:	4613      	mov	r3, r2
 8006eea:	eb42 0303 	adc.w	r3, r2, r3
 8006eee:	657b      	str	r3, [r7, #84]	; 0x54
 8006ef0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ef8:	f7f9 fd18 	bl	800092c <__aeabi_uldivmod>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4b61      	ldr	r3, [pc, #388]	; (8007088 <UART_SetConfig+0x2d4>)
 8006f02:	fba3 2302 	umull	r2, r3, r3, r2
 8006f06:	095b      	lsrs	r3, r3, #5
 8006f08:	011c      	lsls	r4, r3, #4
 8006f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	464b      	mov	r3, r9
 8006f20:	1891      	adds	r1, r2, r2
 8006f22:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f24:	415b      	adcs	r3, r3
 8006f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f2c:	4641      	mov	r1, r8
 8006f2e:	eb12 0a01 	adds.w	sl, r2, r1
 8006f32:	4649      	mov	r1, r9
 8006f34:	eb43 0b01 	adc.w	fp, r3, r1
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f4c:	4692      	mov	sl, r2
 8006f4e:	469b      	mov	fp, r3
 8006f50:	4643      	mov	r3, r8
 8006f52:	eb1a 0303 	adds.w	r3, sl, r3
 8006f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8006f60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	18db      	adds	r3, r3, r3
 8006f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006f7e:	4613      	mov	r3, r2
 8006f80:	eb42 0303 	adc.w	r3, r2, r3
 8006f84:	647b      	str	r3, [r7, #68]	; 0x44
 8006f86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f8e:	f7f9 fccd 	bl	800092c <__aeabi_uldivmod>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	4611      	mov	r1, r2
 8006f98:	4b3b      	ldr	r3, [pc, #236]	; (8007088 <UART_SetConfig+0x2d4>)
 8006f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	2264      	movs	r2, #100	; 0x64
 8006fa2:	fb02 f303 	mul.w	r3, r2, r3
 8006fa6:	1acb      	subs	r3, r1, r3
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006fae:	4b36      	ldr	r3, [pc, #216]	; (8007088 <UART_SetConfig+0x2d4>)
 8006fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fbc:	441c      	add	r4, r3
 8006fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006fcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	1891      	adds	r1, r2, r2
 8006fd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006fd8:	415b      	adcs	r3, r3
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	1851      	adds	r1, r2, r1
 8006fe4:	6339      	str	r1, [r7, #48]	; 0x30
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	414b      	adcs	r3, r1
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ff8:	4659      	mov	r1, fp
 8006ffa:	00cb      	lsls	r3, r1, #3
 8006ffc:	4651      	mov	r1, sl
 8006ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007002:	4651      	mov	r1, sl
 8007004:	00ca      	lsls	r2, r1, #3
 8007006:	4610      	mov	r0, r2
 8007008:	4619      	mov	r1, r3
 800700a:	4603      	mov	r3, r0
 800700c:	4642      	mov	r2, r8
 800700e:	189b      	adds	r3, r3, r2
 8007010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007014:	464b      	mov	r3, r9
 8007016:	460a      	mov	r2, r1
 8007018:	eb42 0303 	adc.w	r3, r2, r3
 800701c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800702c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007034:	460b      	mov	r3, r1
 8007036:	18db      	adds	r3, r3, r3
 8007038:	62bb      	str	r3, [r7, #40]	; 0x28
 800703a:	4613      	mov	r3, r2
 800703c:	eb42 0303 	adc.w	r3, r2, r3
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007046:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800704a:	f7f9 fc6f 	bl	800092c <__aeabi_uldivmod>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4b0d      	ldr	r3, [pc, #52]	; (8007088 <UART_SetConfig+0x2d4>)
 8007054:	fba3 1302 	umull	r1, r3, r3, r2
 8007058:	095b      	lsrs	r3, r3, #5
 800705a:	2164      	movs	r1, #100	; 0x64
 800705c:	fb01 f303 	mul.w	r3, r1, r3
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	3332      	adds	r3, #50	; 0x32
 8007066:	4a08      	ldr	r2, [pc, #32]	; (8007088 <UART_SetConfig+0x2d4>)
 8007068:	fba2 2303 	umull	r2, r3, r2, r3
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	f003 0207 	and.w	r2, r3, #7
 8007072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4422      	add	r2, r4
 800707a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800707c:	e105      	b.n	800728a <UART_SetConfig+0x4d6>
 800707e:	bf00      	nop
 8007080:	40011000 	.word	0x40011000
 8007084:	40011400 	.word	0x40011400
 8007088:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800708c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007090:	2200      	movs	r2, #0
 8007092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007096:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800709a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800709e:	4642      	mov	r2, r8
 80070a0:	464b      	mov	r3, r9
 80070a2:	1891      	adds	r1, r2, r2
 80070a4:	6239      	str	r1, [r7, #32]
 80070a6:	415b      	adcs	r3, r3
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
 80070aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070ae:	4641      	mov	r1, r8
 80070b0:	1854      	adds	r4, r2, r1
 80070b2:	4649      	mov	r1, r9
 80070b4:	eb43 0501 	adc.w	r5, r3, r1
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	f04f 0300 	mov.w	r3, #0
 80070c0:	00eb      	lsls	r3, r5, #3
 80070c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070c6:	00e2      	lsls	r2, r4, #3
 80070c8:	4614      	mov	r4, r2
 80070ca:	461d      	mov	r5, r3
 80070cc:	4643      	mov	r3, r8
 80070ce:	18e3      	adds	r3, r4, r3
 80070d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070d4:	464b      	mov	r3, r9
 80070d6:	eb45 0303 	adc.w	r3, r5, r3
 80070da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	f04f 0300 	mov.w	r3, #0
 80070f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80070fa:	4629      	mov	r1, r5
 80070fc:	008b      	lsls	r3, r1, #2
 80070fe:	4621      	mov	r1, r4
 8007100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007104:	4621      	mov	r1, r4
 8007106:	008a      	lsls	r2, r1, #2
 8007108:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800710c:	f7f9 fc0e 	bl	800092c <__aeabi_uldivmod>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4b60      	ldr	r3, [pc, #384]	; (8007298 <UART_SetConfig+0x4e4>)
 8007116:	fba3 2302 	umull	r2, r3, r3, r2
 800711a:	095b      	lsrs	r3, r3, #5
 800711c:	011c      	lsls	r4, r3, #4
 800711e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007122:	2200      	movs	r2, #0
 8007124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007128:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800712c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007130:	4642      	mov	r2, r8
 8007132:	464b      	mov	r3, r9
 8007134:	1891      	adds	r1, r2, r2
 8007136:	61b9      	str	r1, [r7, #24]
 8007138:	415b      	adcs	r3, r3
 800713a:	61fb      	str	r3, [r7, #28]
 800713c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007140:	4641      	mov	r1, r8
 8007142:	1851      	adds	r1, r2, r1
 8007144:	6139      	str	r1, [r7, #16]
 8007146:	4649      	mov	r1, r9
 8007148:	414b      	adcs	r3, r1
 800714a:	617b      	str	r3, [r7, #20]
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007158:	4659      	mov	r1, fp
 800715a:	00cb      	lsls	r3, r1, #3
 800715c:	4651      	mov	r1, sl
 800715e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007162:	4651      	mov	r1, sl
 8007164:	00ca      	lsls	r2, r1, #3
 8007166:	4610      	mov	r0, r2
 8007168:	4619      	mov	r1, r3
 800716a:	4603      	mov	r3, r0
 800716c:	4642      	mov	r2, r8
 800716e:	189b      	adds	r3, r3, r2
 8007170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007174:	464b      	mov	r3, r9
 8007176:	460a      	mov	r2, r1
 8007178:	eb42 0303 	adc.w	r3, r2, r3
 800717c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	67bb      	str	r3, [r7, #120]	; 0x78
 800718a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	f04f 0300 	mov.w	r3, #0
 8007194:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007198:	4649      	mov	r1, r9
 800719a:	008b      	lsls	r3, r1, #2
 800719c:	4641      	mov	r1, r8
 800719e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071a2:	4641      	mov	r1, r8
 80071a4:	008a      	lsls	r2, r1, #2
 80071a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071aa:	f7f9 fbbf 	bl	800092c <__aeabi_uldivmod>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4b39      	ldr	r3, [pc, #228]	; (8007298 <UART_SetConfig+0x4e4>)
 80071b4:	fba3 1302 	umull	r1, r3, r3, r2
 80071b8:	095b      	lsrs	r3, r3, #5
 80071ba:	2164      	movs	r1, #100	; 0x64
 80071bc:	fb01 f303 	mul.w	r3, r1, r3
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	3332      	adds	r3, #50	; 0x32
 80071c6:	4a34      	ldr	r2, [pc, #208]	; (8007298 <UART_SetConfig+0x4e4>)
 80071c8:	fba2 2303 	umull	r2, r3, r2, r3
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071d2:	441c      	add	r4, r3
 80071d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071d8:	2200      	movs	r2, #0
 80071da:	673b      	str	r3, [r7, #112]	; 0x70
 80071dc:	677a      	str	r2, [r7, #116]	; 0x74
 80071de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80071e2:	4642      	mov	r2, r8
 80071e4:	464b      	mov	r3, r9
 80071e6:	1891      	adds	r1, r2, r2
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	415b      	adcs	r3, r3
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071f2:	4641      	mov	r1, r8
 80071f4:	1851      	adds	r1, r2, r1
 80071f6:	6039      	str	r1, [r7, #0]
 80071f8:	4649      	mov	r1, r9
 80071fa:	414b      	adcs	r3, r1
 80071fc:	607b      	str	r3, [r7, #4]
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	f04f 0300 	mov.w	r3, #0
 8007206:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800720a:	4659      	mov	r1, fp
 800720c:	00cb      	lsls	r3, r1, #3
 800720e:	4651      	mov	r1, sl
 8007210:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007214:	4651      	mov	r1, sl
 8007216:	00ca      	lsls	r2, r1, #3
 8007218:	4610      	mov	r0, r2
 800721a:	4619      	mov	r1, r3
 800721c:	4603      	mov	r3, r0
 800721e:	4642      	mov	r2, r8
 8007220:	189b      	adds	r3, r3, r2
 8007222:	66bb      	str	r3, [r7, #104]	; 0x68
 8007224:	464b      	mov	r3, r9
 8007226:	460a      	mov	r2, r1
 8007228:	eb42 0303 	adc.w	r3, r2, r3
 800722c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800722e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	663b      	str	r3, [r7, #96]	; 0x60
 8007238:	667a      	str	r2, [r7, #100]	; 0x64
 800723a:	f04f 0200 	mov.w	r2, #0
 800723e:	f04f 0300 	mov.w	r3, #0
 8007242:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007246:	4649      	mov	r1, r9
 8007248:	008b      	lsls	r3, r1, #2
 800724a:	4641      	mov	r1, r8
 800724c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007250:	4641      	mov	r1, r8
 8007252:	008a      	lsls	r2, r1, #2
 8007254:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007258:	f7f9 fb68 	bl	800092c <__aeabi_uldivmod>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <UART_SetConfig+0x4e4>)
 8007262:	fba3 1302 	umull	r1, r3, r3, r2
 8007266:	095b      	lsrs	r3, r3, #5
 8007268:	2164      	movs	r1, #100	; 0x64
 800726a:	fb01 f303 	mul.w	r3, r1, r3
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	3332      	adds	r3, #50	; 0x32
 8007274:	4a08      	ldr	r2, [pc, #32]	; (8007298 <UART_SetConfig+0x4e4>)
 8007276:	fba2 2303 	umull	r2, r3, r2, r3
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	f003 020f 	and.w	r2, r3, #15
 8007280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4422      	add	r2, r4
 8007288:	609a      	str	r2, [r3, #8]
}
 800728a:	bf00      	nop
 800728c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007290:	46bd      	mov	sp, r7
 8007292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007296:	bf00      	nop
 8007298:	51eb851f 	.word	0x51eb851f

0800729c <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b10      	cmp	r3, #16
 80072b0:	d103      	bne.n	80072ba <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	e002      	b.n	80072c0 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4b16      	ldr	r3, [pc, #88]	; (800731c <FSMC_NAND_Init+0x80>)
 80072c4:	4013      	ands	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 80072d0:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 80072d6:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 80072dc:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 80072e4:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80072ec:	431a      	orrs	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f043 0308 	orr.w	r3, r3, #8
 80072f6:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b10      	cmp	r3, #16
 80072fe:	d103      	bne.n	8007308 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	e002      	b.n	800730e <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	fff00181 	.word	0xfff00181

08007320 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b10      	cmp	r3, #16
 8007334:	d103      	bne.n	800733e <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e002      	b.n	8007344 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007342:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8007352:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 800735a:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8007362:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b10      	cmp	r3, #16
 800736e:	d103      	bne.n	8007378 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	609a      	str	r2, [r3, #8]
 8007376:	e002      	b.n	800737e <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	371c      	adds	r7, #28
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b10      	cmp	r3, #16
 80073a0:	d103      	bne.n	80073aa <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	e002      	b.n	80073b0 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80073be:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 80073c6:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 80073ce:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b10      	cmp	r3, #16
 80073da:	d103      	bne.n	80073e4 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	60da      	str	r2, [r3, #12]
 80073e2:	e002      	b.n	80073ea <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	371c      	adds	r7, #28
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <__NVIC_SetPriority>:
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	6039      	str	r1, [r7, #0]
 8007402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007408:	2b00      	cmp	r3, #0
 800740a:	db0a      	blt.n	8007422 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	b2da      	uxtb	r2, r3
 8007410:	490c      	ldr	r1, [pc, #48]	; (8007444 <__NVIC_SetPriority+0x4c>)
 8007412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007416:	0112      	lsls	r2, r2, #4
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	440b      	add	r3, r1
 800741c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007420:	e00a      	b.n	8007438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	b2da      	uxtb	r2, r3
 8007426:	4908      	ldr	r1, [pc, #32]	; (8007448 <__NVIC_SetPriority+0x50>)
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	3b04      	subs	r3, #4
 8007430:	0112      	lsls	r2, r2, #4
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	440b      	add	r3, r1
 8007436:	761a      	strb	r2, [r3, #24]
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	e000e100 	.word	0xe000e100
 8007448:	e000ed00 	.word	0xe000ed00

0800744c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <SysTick_Handler+0x1c>)
 8007452:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007454:	f001 fea4 	bl	80091a0 <xTaskGetSchedulerState>
 8007458:	4603      	mov	r3, r0
 800745a:	2b01      	cmp	r3, #1
 800745c:	d001      	beq.n	8007462 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800745e:	f002 fc8b 	bl	8009d78 <xPortSysTickHandler>
  }
}
 8007462:	bf00      	nop
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	e000e010 	.word	0xe000e010

0800746c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007470:	2100      	movs	r1, #0
 8007472:	f06f 0004 	mvn.w	r0, #4
 8007476:	f7ff ffbf 	bl	80073f8 <__NVIC_SetPriority>
#endif
}
 800747a:	bf00      	nop
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007486:	f3ef 8305 	mrs	r3, IPSR
 800748a:	603b      	str	r3, [r7, #0]
  return(result);
 800748c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007492:	f06f 0305 	mvn.w	r3, #5
 8007496:	607b      	str	r3, [r7, #4]
 8007498:	e00f      	b.n	80074ba <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800749a:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <osKernelInitialize+0x44>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d108      	bne.n	80074b4 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 80074a2:	4809      	ldr	r0, [pc, #36]	; (80074c8 <osKernelInitialize+0x48>)
 80074a4:	f002 fe64 	bl	800a170 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 80074a8:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <osKernelInitialize+0x44>)
 80074aa:	2201      	movs	r2, #1
 80074ac:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	607b      	str	r3, [r7, #4]
 80074b2:	e002      	b.n	80074ba <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 80074b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074b8:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074ba:	687b      	ldr	r3, [r7, #4]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20000b84 	.word	0x20000b84
 80074c8:	20000050 	.word	0x20000050

080074cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d2:	f3ef 8305 	mrs	r3, IPSR
 80074d6:	603b      	str	r3, [r7, #0]
  return(result);
 80074d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80074de:	f06f 0305 	mvn.w	r3, #5
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	e010      	b.n	8007508 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80074e6:	4b0b      	ldr	r3, [pc, #44]	; (8007514 <osKernelStart+0x48>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d109      	bne.n	8007502 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80074ee:	f7ff ffbd 	bl	800746c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074f2:	4b08      	ldr	r3, [pc, #32]	; (8007514 <osKernelStart+0x48>)
 80074f4:	2202      	movs	r2, #2
 80074f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074f8:	f001 f9f6 	bl	80088e8 <vTaskStartScheduler>
      stat = osOK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	607b      	str	r3, [r7, #4]
 8007500:	e002      	b.n	8007508 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007506:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007508:	687b      	ldr	r3, [r7, #4]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000b84 	.word	0x20000b84

08007518 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007518:	b580      	push	{r7, lr}
 800751a:	b08e      	sub	sp, #56	; 0x38
 800751c:	af04      	add	r7, sp, #16
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007524:	2300      	movs	r3, #0
 8007526:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007528:	f3ef 8305 	mrs	r3, IPSR
 800752c:	617b      	str	r3, [r7, #20]
  return(result);
 800752e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007530:	2b00      	cmp	r3, #0
 8007532:	d17e      	bne.n	8007632 <osThreadNew+0x11a>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d07b      	beq.n	8007632 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800753a:	2380      	movs	r3, #128	; 0x80
 800753c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800753e:	2318      	movs	r3, #24
 8007540:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800754a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d045      	beq.n	80075de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <osThreadNew+0x48>
        name = attr->name;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <osThreadNew+0x6e>
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	2b38      	cmp	r3, #56	; 0x38
 8007578:	d805      	bhi.n	8007586 <osThreadNew+0x6e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <osThreadNew+0x72>
        return (NULL);
 8007586:	2300      	movs	r3, #0
 8007588:	e054      	b.n	8007634 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	089b      	lsrs	r3, r3, #2
 8007598:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00e      	beq.n	80075c0 <osThreadNew+0xa8>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	2bbb      	cmp	r3, #187	; 0xbb
 80075a8:	d90a      	bls.n	80075c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d006      	beq.n	80075c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <osThreadNew+0xa8>
        mem = 1;
 80075ba:	2301      	movs	r3, #1
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	e010      	b.n	80075e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10c      	bne.n	80075e2 <osThreadNew+0xca>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d108      	bne.n	80075e2 <osThreadNew+0xca>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <osThreadNew+0xca>
          mem = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	e001      	b.n	80075e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d110      	bne.n	800760a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075f0:	9202      	str	r2, [sp, #8]
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	6a3a      	ldr	r2, [r7, #32]
 80075fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 ff86 	bl	8008510 <xTaskCreateStatic>
 8007604:	4603      	mov	r3, r0
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	e013      	b.n	8007632 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d110      	bne.n	8007632 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	b29a      	uxth	r2, r3
 8007614:	f107 0310 	add.w	r3, r7, #16
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 ffd1 	bl	80085ca <xTaskCreate>
 8007628:	4603      	mov	r3, r0
 800762a:	2b01      	cmp	r3, #1
 800762c:	d001      	beq.n	8007632 <osThreadNew+0x11a>
            hTask = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007632:	693b      	ldr	r3, [r7, #16]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3728      	adds	r7, #40	; 0x28
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007644:	f3ef 8305 	mrs	r3, IPSR
 8007648:	60bb      	str	r3, [r7, #8]
  return(result);
 800764a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <osDelay+0x1c>
    stat = osErrorISR;
 8007650:	f06f 0305 	mvn.w	r3, #5
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	e007      	b.n	8007668 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 f90c 	bl	8008880 <vTaskDelay>
    }
  }

  return (stat);
 8007668:	68fb      	ldr	r3, [r7, #12]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007672:	b580      	push	{r7, lr}
 8007674:	b08a      	sub	sp, #40	; 0x28
 8007676:	af02      	add	r7, sp, #8
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800767e:	2300      	movs	r3, #0
 8007680:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007682:	f3ef 8305 	mrs	r3, IPSR
 8007686:	613b      	str	r3, [r7, #16]
  return(result);
 8007688:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800768a:	2b00      	cmp	r3, #0
 800768c:	d175      	bne.n	800777a <osSemaphoreNew+0x108>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d072      	beq.n	800777a <osSemaphoreNew+0x108>
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	429a      	cmp	r2, r3
 800769a:	d86e      	bhi.n	800777a <osSemaphoreNew+0x108>
    mem = -1;
 800769c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d015      	beq.n	80076d4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d006      	beq.n	80076be <osSemaphoreNew+0x4c>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	2b4f      	cmp	r3, #79	; 0x4f
 80076b6:	d902      	bls.n	80076be <osSemaphoreNew+0x4c>
        mem = 1;
 80076b8:	2301      	movs	r3, #1
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	e00c      	b.n	80076d8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d108      	bne.n	80076d8 <osSemaphoreNew+0x66>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d104      	bne.n	80076d8 <osSemaphoreNew+0x66>
          mem = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61bb      	str	r3, [r7, #24]
 80076d2:	e001      	b.n	80076d8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076de:	d04c      	beq.n	800777a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d128      	bne.n	8007738 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d10a      	bne.n	8007702 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	2203      	movs	r2, #3
 80076f2:	9200      	str	r2, [sp, #0]
 80076f4:	2200      	movs	r2, #0
 80076f6:	2100      	movs	r1, #0
 80076f8:	2001      	movs	r0, #1
 80076fa:	f000 f993 	bl	8007a24 <xQueueGenericCreateStatic>
 80076fe:	61f8      	str	r0, [r7, #28]
 8007700:	e005      	b.n	800770e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007702:	2203      	movs	r2, #3
 8007704:	2100      	movs	r1, #0
 8007706:	2001      	movs	r0, #1
 8007708:	f000 fa04 	bl	8007b14 <xQueueGenericCreate>
 800770c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d022      	beq.n	800775a <osSemaphoreNew+0xe8>
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d01f      	beq.n	800775a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800771a:	2300      	movs	r3, #0
 800771c:	2200      	movs	r2, #0
 800771e:	2100      	movs	r1, #0
 8007720:	69f8      	ldr	r0, [r7, #28]
 8007722:	f000 fabf 	bl	8007ca4 <xQueueGenericSend>
 8007726:	4603      	mov	r3, r0
 8007728:	2b01      	cmp	r3, #1
 800772a:	d016      	beq.n	800775a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800772c:	69f8      	ldr	r0, [r7, #28]
 800772e:	f000 fd33 	bl	8008198 <vQueueDelete>
            hSemaphore = NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	e010      	b.n	800775a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d108      	bne.n	8007750 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	461a      	mov	r2, r3
 8007744:	68b9      	ldr	r1, [r7, #8]
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 fa41 	bl	8007bce <xQueueCreateCountingSemaphoreStatic>
 800774c:	61f8      	str	r0, [r7, #28]
 800774e:	e004      	b.n	800775a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fa72 	bl	8007c3c <xQueueCreateCountingSemaphore>
 8007758:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00c      	beq.n	800777a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <osSemaphoreNew+0xfc>
          name = attr->name;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	e001      	b.n	8007772 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007772:	6979      	ldr	r1, [r7, #20]
 8007774:	69f8      	ldr	r0, [r7, #28]
 8007776:	f000 fe43 	bl	8008400 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800777a:	69fb      	ldr	r3, [r7, #28]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3720      	adds	r7, #32
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4a07      	ldr	r2, [pc, #28]	; (80077b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007794:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4a06      	ldr	r2, [pc, #24]	; (80077b4 <vApplicationGetIdleTaskMemory+0x30>)
 800779a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2280      	movs	r2, #128	; 0x80
 80077a0:	601a      	str	r2, [r3, #0]
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20004788 	.word	0x20004788
 80077b4:	20004844 	.word	0x20004844

080077b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4a07      	ldr	r2, [pc, #28]	; (80077e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80077c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	4a06      	ldr	r2, [pc, #24]	; (80077e8 <vApplicationGetTimerTaskMemory+0x30>)
 80077ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077d6:	601a      	str	r2, [r3, #0]
}
 80077d8:	bf00      	nop
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	20004a44 	.word	0x20004a44
 80077e8:	20004b00 	.word	0x20004b00

080077ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f103 0208 	add.w	r2, r3, #8
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007804:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f103 0208 	add.w	r2, r3, #8
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f103 0208 	add.w	r2, r3, #8
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007846:	b480      	push	{r7}
 8007848:	b085      	sub	sp, #20
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	601a      	str	r2, [r3, #0]
}
 8007882:	bf00      	nop
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800788e:	b480      	push	{r7}
 8007890:	b085      	sub	sp, #20
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078a4:	d103      	bne.n	80078ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	e00c      	b.n	80078c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3308      	adds	r3, #8
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	e002      	b.n	80078bc <vListInsert+0x2e>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d2f6      	bcs.n	80078b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	601a      	str	r2, [r3, #0]
}
 80078f4:	bf00      	nop
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6892      	ldr	r2, [r2, #8]
 8007916:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6852      	ldr	r2, [r2, #4]
 8007920:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	429a      	cmp	r2, r3
 800792a:	d103      	bne.n	8007934 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	1e5a      	subs	r2, r3, #1
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10a      	bne.n	800797e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800797a:	bf00      	nop
 800797c:	e7fe      	b.n	800797c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800797e:	f002 f969 	bl	8009c54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800798e:	fb01 f303 	mul.w	r3, r1, r3
 8007992:	441a      	add	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ae:	3b01      	subs	r3, #1
 80079b0:	68f9      	ldr	r1, [r7, #12]
 80079b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079b4:	fb01 f303 	mul.w	r3, r1, r3
 80079b8:	441a      	add	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	22ff      	movs	r2, #255	; 0xff
 80079c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	22ff      	movs	r2, #255	; 0xff
 80079ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d114      	bne.n	80079fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01a      	beq.n	8007a12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3310      	adds	r3, #16
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 fa1b 	bl	8008e1c <xTaskRemoveFromEventList>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d012      	beq.n	8007a12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079ec:	4b0c      	ldr	r3, [pc, #48]	; (8007a20 <xQueueGenericReset+0xcc>)
 80079ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	e009      	b.n	8007a12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3310      	adds	r3, #16
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff fef2 	bl	80077ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3324      	adds	r3, #36	; 0x24
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff feed 	bl	80077ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a12:	f002 f94f 	bl	8009cb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a16:	2301      	movs	r3, #1
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08e      	sub	sp, #56	; 0x38
 8007a28:	af02      	add	r7, sp, #8
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10a      	bne.n	8007a4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a4a:	bf00      	nop
 8007a4c:	e7fe      	b.n	8007a4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10a      	bne.n	8007a6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a66:	bf00      	nop
 8007a68:	e7fe      	b.n	8007a68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <xQueueGenericCreateStatic+0x52>
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <xQueueGenericCreateStatic+0x56>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <xQueueGenericCreateStatic+0x58>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	623b      	str	r3, [r7, #32]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <xQueueGenericCreateStatic+0x7e>
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <xQueueGenericCreateStatic+0x82>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e000      	b.n	8007aa8 <xQueueGenericCreateStatic+0x84>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	61fb      	str	r3, [r7, #28]
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ac2:	2350      	movs	r3, #80	; 0x50
 8007ac4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b50      	cmp	r3, #80	; 0x50
 8007aca:	d00a      	beq.n	8007ae2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	61bb      	str	r3, [r7, #24]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ae2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00d      	beq.n	8007b0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007af6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	4613      	mov	r3, r2
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f83f 	bl	8007b88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3730      	adds	r7, #48	; 0x30
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08a      	sub	sp, #40	; 0x28
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10a      	bne.n	8007b3e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	613b      	str	r3, [r7, #16]
}
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	fb02 f303 	mul.w	r3, r2, r3
 8007b46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	3350      	adds	r3, #80	; 0x50
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f002 f9a3 	bl	8009e98 <pvPortMalloc>
 8007b52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d011      	beq.n	8007b7e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	3350      	adds	r3, #80	; 0x50
 8007b62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b6c:	79fa      	ldrb	r2, [r7, #7]
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	4613      	mov	r3, r2
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f805 	bl	8007b88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
	}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3720      	adds	r7, #32
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
 8007b94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d103      	bne.n	8007ba4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	e002      	b.n	8007baa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	69b8      	ldr	r0, [r7, #24]
 8007bba:	f7ff fecb 	bl	8007954 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	78fa      	ldrb	r2, [r7, #3]
 8007bc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007bc6:	bf00      	nop
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b08a      	sub	sp, #40	; 0x28
 8007bd2:	af02      	add	r7, sp, #8
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10a      	bne.n	8007bf6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	61bb      	str	r3, [r7, #24]
}
 8007bf2:	bf00      	nop
 8007bf4:	e7fe      	b.n	8007bf4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d90a      	bls.n	8007c14 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	617b      	str	r3, [r7, #20]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007c14:	2302      	movs	r3, #2
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff ff00 	bl	8007a24 <xQueueGenericCreateStatic>
 8007c24:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c32:	69fb      	ldr	r3, [r7, #28]
	}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3720      	adds	r7, #32
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	613b      	str	r3, [r7, #16]
}
 8007c5e:	bf00      	nop
 8007c60:	e7fe      	b.n	8007c60 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d90a      	bls.n	8007c80 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	60fb      	str	r3, [r7, #12]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007c80:	2202      	movs	r2, #2
 8007c82:	2100      	movs	r1, #0
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff ff45 	bl	8007b14 <xQueueGenericCreate>
 8007c8a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c98:	697b      	ldr	r3, [r7, #20]
	}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08e      	sub	sp, #56	; 0x38
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <xQueueGenericSend+0x32>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d103      	bne.n	8007ce4 <xQueueGenericSend+0x40>
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <xQueueGenericSend+0x44>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e000      	b.n	8007cea <xQueueGenericSend+0x46>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10a      	bne.n	8007d04 <xQueueGenericSend+0x60>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d103      	bne.n	8007d12 <xQueueGenericSend+0x6e>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d101      	bne.n	8007d16 <xQueueGenericSend+0x72>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e000      	b.n	8007d18 <xQueueGenericSend+0x74>
 8007d16:	2300      	movs	r3, #0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <xQueueGenericSend+0x8e>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	623b      	str	r3, [r7, #32]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d32:	f001 fa35 	bl	80091a0 <xTaskGetSchedulerState>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d102      	bne.n	8007d42 <xQueueGenericSend+0x9e>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <xQueueGenericSend+0xa2>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e000      	b.n	8007d48 <xQueueGenericSend+0xa4>
 8007d46:	2300      	movs	r3, #0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <xQueueGenericSend+0xbe>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	61fb      	str	r3, [r7, #28]
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d62:	f001 ff77 	bl	8009c54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d302      	bcc.n	8007d78 <xQueueGenericSend+0xd4>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d129      	bne.n	8007dcc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	68b9      	ldr	r1, [r7, #8]
 8007d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d7e:	f000 fa2e 	bl	80081de <prvCopyDataToQueue>
 8007d82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d010      	beq.n	8007dae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	3324      	adds	r3, #36	; 0x24
 8007d90:	4618      	mov	r0, r3
 8007d92:	f001 f843 	bl	8008e1c <xTaskRemoveFromEventList>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d013      	beq.n	8007dc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d9c:	4b3f      	ldr	r3, [pc, #252]	; (8007e9c <xQueueGenericSend+0x1f8>)
 8007d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	e00a      	b.n	8007dc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d007      	beq.n	8007dc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007db4:	4b39      	ldr	r3, [pc, #228]	; (8007e9c <xQueueGenericSend+0x1f8>)
 8007db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dba:	601a      	str	r2, [r3, #0]
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007dc4:	f001 ff76 	bl	8009cb4 <vPortExitCritical>
				return pdPASS;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e063      	b.n	8007e94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d103      	bne.n	8007dda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dd2:	f001 ff6f 	bl	8009cb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e05c      	b.n	8007e94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 f87d 	bl	8008ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dea:	2301      	movs	r3, #1
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dee:	f001 ff61 	bl	8009cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007df2:	f000 fde9 	bl	80089c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007df6:	f001 ff2d 	bl	8009c54 <vPortEnterCritical>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e00:	b25b      	sxtb	r3, r3
 8007e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e06:	d103      	bne.n	8007e10 <xQueueGenericSend+0x16c>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e16:	b25b      	sxtb	r3, r3
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e1c:	d103      	bne.n	8007e26 <xQueueGenericSend+0x182>
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e26:	f001 ff45 	bl	8009cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e2a:	1d3a      	adds	r2, r7, #4
 8007e2c:	f107 0314 	add.w	r3, r7, #20
 8007e30:	4611      	mov	r1, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 f86c 	bl	8008f10 <xTaskCheckForTimeOut>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d124      	bne.n	8007e88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e40:	f000 fac5 	bl	80083ce <prvIsQueueFull>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d018      	beq.n	8007e7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	3310      	adds	r3, #16
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	4611      	mov	r1, r2
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 ff92 	bl	8008d7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e5a:	f000 fa50 	bl	80082fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e5e:	f000 fdc1 	bl	80089e4 <xTaskResumeAll>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f47f af7c 	bne.w	8007d62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e6a:	4b0c      	ldr	r3, [pc, #48]	; (8007e9c <xQueueGenericSend+0x1f8>)
 8007e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	e772      	b.n	8007d62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e7e:	f000 fa3e 	bl	80082fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e82:	f000 fdaf 	bl	80089e4 <xTaskResumeAll>
 8007e86:	e76c      	b.n	8007d62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e8a:	f000 fa38 	bl	80082fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e8e:	f000 fda9 	bl	80089e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3738      	adds	r7, #56	; 0x38
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	e000ed04 	.word	0xe000ed04

08007ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b090      	sub	sp, #64	; 0x40
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d103      	bne.n	8007edc <xQueueGenericSendFromISR+0x3c>
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <xQueueGenericSendFromISR+0x40>
 8007edc:	2301      	movs	r3, #1
 8007ede:	e000      	b.n	8007ee2 <xQueueGenericSendFromISR+0x42>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10a      	bne.n	8007efc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d103      	bne.n	8007f0a <xQueueGenericSendFromISR+0x6a>
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d101      	bne.n	8007f0e <xQueueGenericSendFromISR+0x6e>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e000      	b.n	8007f10 <xQueueGenericSendFromISR+0x70>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	623b      	str	r3, [r7, #32]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f2a:	f001 ff75 	bl	8009e18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	61fa      	str	r2, [r7, #28]
 8007f44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d302      	bcc.n	8007f5c <xQueueGenericSendFromISR+0xbc>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d12f      	bne.n	8007fbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	68b9      	ldr	r1, [r7, #8]
 8007f70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f72:	f000 f934 	bl	80081de <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f7e:	d112      	bne.n	8007fa6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d016      	beq.n	8007fb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8a:	3324      	adds	r3, #36	; 0x24
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 ff45 	bl	8008e1c <xTaskRemoveFromEventList>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00e      	beq.n	8007fb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00b      	beq.n	8007fb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	e007      	b.n	8007fb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007faa:	3301      	adds	r3, #1
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	b25a      	sxtb	r2, r3
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007fba:	e001      	b.n	8007fc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3740      	adds	r7, #64	; 0x40
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
	...

08007fd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08c      	sub	sp, #48	; 0x30
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10a      	bne.n	8008008 <xQueueReceive+0x30>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	623b      	str	r3, [r7, #32]
}
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d103      	bne.n	8008016 <xQueueReceive+0x3e>
 800800e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <xQueueReceive+0x42>
 8008016:	2301      	movs	r3, #1
 8008018:	e000      	b.n	800801c <xQueueReceive+0x44>
 800801a:	2300      	movs	r3, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <xQueueReceive+0x5e>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	61fb      	str	r3, [r7, #28]
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008036:	f001 f8b3 	bl	80091a0 <xTaskGetSchedulerState>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d102      	bne.n	8008046 <xQueueReceive+0x6e>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <xQueueReceive+0x72>
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <xQueueReceive+0x74>
 800804a:	2300      	movs	r3, #0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10a      	bne.n	8008066 <xQueueReceive+0x8e>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	61bb      	str	r3, [r7, #24]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008066:	f001 fdf5 	bl	8009c54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	2b00      	cmp	r3, #0
 8008074:	d01f      	beq.n	80080b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008076:	68b9      	ldr	r1, [r7, #8]
 8008078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800807a:	f000 f91a 	bl	80082b2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	1e5a      	subs	r2, r3, #1
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00f      	beq.n	80080ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008090:	3310      	adds	r3, #16
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fec2 	bl	8008e1c <xTaskRemoveFromEventList>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d007      	beq.n	80080ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800809e:	4b3d      	ldr	r3, [pc, #244]	; (8008194 <xQueueReceive+0x1bc>)
 80080a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080ae:	f001 fe01 	bl	8009cb4 <vPortExitCritical>
				return pdPASS;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e069      	b.n	800818a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080bc:	f001 fdfa 	bl	8009cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e062      	b.n	800818a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080ca:	f107 0310 	add.w	r3, r7, #16
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 ff08 	bl	8008ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080d8:	f001 fdec 	bl	8009cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080dc:	f000 fc74 	bl	80089c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080e0:	f001 fdb8 	bl	8009c54 <vPortEnterCritical>
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ea:	b25b      	sxtb	r3, r3
 80080ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080f0:	d103      	bne.n	80080fa <xQueueReceive+0x122>
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008100:	b25b      	sxtb	r3, r3
 8008102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008106:	d103      	bne.n	8008110 <xQueueReceive+0x138>
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008110:	f001 fdd0 	bl	8009cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008114:	1d3a      	adds	r2, r7, #4
 8008116:	f107 0310 	add.w	r3, r7, #16
 800811a:	4611      	mov	r1, r2
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fef7 	bl	8008f10 <xTaskCheckForTimeOut>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d123      	bne.n	8008170 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800812a:	f000 f93a 	bl	80083a2 <prvIsQueueEmpty>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d017      	beq.n	8008164 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	3324      	adds	r3, #36	; 0x24
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fe1d 	bl	8008d7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008144:	f000 f8db 	bl	80082fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008148:	f000 fc4c 	bl	80089e4 <xTaskResumeAll>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d189      	bne.n	8008066 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008152:	4b10      	ldr	r3, [pc, #64]	; (8008194 <xQueueReceive+0x1bc>)
 8008154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	e780      	b.n	8008066 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008166:	f000 f8ca 	bl	80082fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800816a:	f000 fc3b 	bl	80089e4 <xTaskResumeAll>
 800816e:	e77a      	b.n	8008066 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008172:	f000 f8c4 	bl	80082fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008176:	f000 fc35 	bl	80089e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800817a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800817c:	f000 f911 	bl	80083a2 <prvIsQueueEmpty>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	f43f af6f 	beq.w	8008066 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800818a:	4618      	mov	r0, r3
 800818c:	3730      	adds	r7, #48	; 0x30
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	e000ed04 	.word	0xe000ed04

08008198 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <vQueueDelete+0x28>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	60bb      	str	r3, [r7, #8]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 f947 	bl	8008454 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d102      	bne.n	80081d6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f001 ff05 	bl	8009fe0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80081d6:	bf00      	nop
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b086      	sub	sp, #24
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10d      	bne.n	8008218 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d14d      	bne.n	80082a0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	4618      	mov	r0, r3
 800820a:	f000 ffe7 	bl	80091dc <xTaskPriorityDisinherit>
 800820e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	609a      	str	r2, [r3, #8]
 8008216:	e043      	b.n	80082a0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d119      	bne.n	8008252 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6858      	ldr	r0, [r3, #4]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	461a      	mov	r2, r3
 8008228:	68b9      	ldr	r1, [r7, #8]
 800822a:	f002 f957 	bl	800a4dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	441a      	add	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	429a      	cmp	r2, r3
 8008246:	d32b      	bcc.n	80082a0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	605a      	str	r2, [r3, #4]
 8008250:	e026      	b.n	80082a0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	68d8      	ldr	r0, [r3, #12]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	461a      	mov	r2, r3
 800825c:	68b9      	ldr	r1, [r7, #8]
 800825e:	f002 f93d 	bl	800a4dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	425b      	negs	r3, r3
 800826c:	441a      	add	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d207      	bcs.n	800828e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	689a      	ldr	r2, [r3, #8]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008286:	425b      	negs	r3, r3
 8008288:	441a      	add	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d105      	bne.n	80082a0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	3b01      	subs	r3, #1
 800829e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082a8:	697b      	ldr	r3, [r7, #20]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d018      	beq.n	80082f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	441a      	add	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d303      	bcc.n	80082e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68d9      	ldr	r1, [r3, #12]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	461a      	mov	r2, r3
 80082f0:	6838      	ldr	r0, [r7, #0]
 80082f2:	f002 f8f3 	bl	800a4dc <memcpy>
	}
}
 80082f6:	bf00      	nop
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008306:	f001 fca5 	bl	8009c54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008310:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008312:	e011      	b.n	8008338 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	d012      	beq.n	8008342 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3324      	adds	r3, #36	; 0x24
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fd7b 	bl	8008e1c <xTaskRemoveFromEventList>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800832c:	f000 fe52 	bl	8008fd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	3b01      	subs	r3, #1
 8008334:	b2db      	uxtb	r3, r3
 8008336:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800833c:	2b00      	cmp	r3, #0
 800833e:	dce9      	bgt.n	8008314 <prvUnlockQueue+0x16>
 8008340:	e000      	b.n	8008344 <prvUnlockQueue+0x46>
					break;
 8008342:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	22ff      	movs	r2, #255	; 0xff
 8008348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800834c:	f001 fcb2 	bl	8009cb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008350:	f001 fc80 	bl	8009c54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800835a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800835c:	e011      	b.n	8008382 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d012      	beq.n	800838c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3310      	adds	r3, #16
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fd56 	bl	8008e1c <xTaskRemoveFromEventList>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008376:	f000 fe2d 	bl	8008fd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	3b01      	subs	r3, #1
 800837e:	b2db      	uxtb	r3, r3
 8008380:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008382:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008386:	2b00      	cmp	r3, #0
 8008388:	dce9      	bgt.n	800835e <prvUnlockQueue+0x60>
 800838a:	e000      	b.n	800838e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800838c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	22ff      	movs	r2, #255	; 0xff
 8008392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008396:	f001 fc8d 	bl	8009cb4 <vPortExitCritical>
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083aa:	f001 fc53 	bl	8009c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d102      	bne.n	80083bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083b6:	2301      	movs	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	e001      	b.n	80083c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083c0:	f001 fc78 	bl	8009cb4 <vPortExitCritical>

	return xReturn;
 80083c4:	68fb      	ldr	r3, [r7, #12]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083d6:	f001 fc3d 	bl	8009c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d102      	bne.n	80083ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083e6:	2301      	movs	r3, #1
 80083e8:	60fb      	str	r3, [r7, #12]
 80083ea:	e001      	b.n	80083f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083f0:	f001 fc60 	bl	8009cb4 <vPortExitCritical>

	return xReturn;
 80083f4:	68fb      	ldr	r3, [r7, #12]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	e014      	b.n	800843a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008410:	4a0f      	ldr	r2, [pc, #60]	; (8008450 <vQueueAddToRegistry+0x50>)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10b      	bne.n	8008434 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800841c:	490c      	ldr	r1, [pc, #48]	; (8008450 <vQueueAddToRegistry+0x50>)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008426:	4a0a      	ldr	r2, [pc, #40]	; (8008450 <vQueueAddToRegistry+0x50>)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	4413      	add	r3, r2
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008432:	e006      	b.n	8008442 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3301      	adds	r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b07      	cmp	r3, #7
 800843e:	d9e7      	bls.n	8008410 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008440:	bf00      	nop
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	20004f00 	.word	0x20004f00

08008454 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800845c:	2300      	movs	r3, #0
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	e016      	b.n	8008490 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008462:	4a10      	ldr	r2, [pc, #64]	; (80084a4 <vQueueUnregisterQueue+0x50>)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	4413      	add	r3, r2
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	429a      	cmp	r2, r3
 8008470:	d10b      	bne.n	800848a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008472:	4a0c      	ldr	r2, [pc, #48]	; (80084a4 <vQueueUnregisterQueue+0x50>)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2100      	movs	r1, #0
 8008478:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800847c:	4a09      	ldr	r2, [pc, #36]	; (80084a4 <vQueueUnregisterQueue+0x50>)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	4413      	add	r3, r2
 8008484:	2200      	movs	r2, #0
 8008486:	605a      	str	r2, [r3, #4]
				break;
 8008488:	e006      	b.n	8008498 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3301      	adds	r3, #1
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b07      	cmp	r3, #7
 8008494:	d9e5      	bls.n	8008462 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008496:	bf00      	nop
 8008498:	bf00      	nop
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	20004f00 	.word	0x20004f00

080084a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084b8:	f001 fbcc 	bl	8009c54 <vPortEnterCritical>
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084c2:	b25b      	sxtb	r3, r3
 80084c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084c8:	d103      	bne.n	80084d2 <vQueueWaitForMessageRestricted+0x2a>
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084d8:	b25b      	sxtb	r3, r3
 80084da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084de:	d103      	bne.n	80084e8 <vQueueWaitForMessageRestricted+0x40>
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084e8:	f001 fbe4 	bl	8009cb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d106      	bne.n	8008502 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	3324      	adds	r3, #36	; 0x24
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	68b9      	ldr	r1, [r7, #8]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fc61 	bl	8008dc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008502:	6978      	ldr	r0, [r7, #20]
 8008504:	f7ff fefb 	bl	80082fe <prvUnlockQueue>
	}
 8008508:	bf00      	nop
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08e      	sub	sp, #56	; 0x38
 8008514:	af04      	add	r7, sp, #16
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800851e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10a      	bne.n	800853a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	623b      	str	r3, [r7, #32]
}
 8008536:	bf00      	nop
 8008538:	e7fe      	b.n	8008538 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <xTaskCreateStatic+0x46>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	61fb      	str	r3, [r7, #28]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008556:	23bc      	movs	r3, #188	; 0xbc
 8008558:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	2bbc      	cmp	r3, #188	; 0xbc
 800855e:	d00a      	beq.n	8008576 <xTaskCreateStatic+0x66>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	61bb      	str	r3, [r7, #24]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008576:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	2b00      	cmp	r3, #0
 800857c:	d01e      	beq.n	80085bc <xTaskCreateStatic+0xac>
 800857e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008580:	2b00      	cmp	r3, #0
 8008582:	d01b      	beq.n	80085bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800858c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	2202      	movs	r2, #2
 8008592:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008596:	2300      	movs	r3, #0
 8008598:	9303      	str	r3, [sp, #12]
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	9302      	str	r3, [sp, #8]
 800859e:	f107 0314 	add.w	r3, r7, #20
 80085a2:	9301      	str	r3, [sp, #4]
 80085a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 f850 	bl	8008654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085b6:	f000 f8f3 	bl	80087a0 <prvAddNewTaskToReadyList>
 80085ba:	e001      	b.n	80085c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80085bc:	2300      	movs	r3, #0
 80085be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085c0:	697b      	ldr	r3, [r7, #20]
	}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3728      	adds	r7, #40	; 0x28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b08c      	sub	sp, #48	; 0x30
 80085ce:	af04      	add	r7, sp, #16
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	603b      	str	r3, [r7, #0]
 80085d6:	4613      	mov	r3, r2
 80085d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085da:	88fb      	ldrh	r3, [r7, #6]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4618      	mov	r0, r3
 80085e0:	f001 fc5a 	bl	8009e98 <pvPortMalloc>
 80085e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00e      	beq.n	800860a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80085ec:	20bc      	movs	r0, #188	; 0xbc
 80085ee:	f001 fc53 	bl	8009e98 <pvPortMalloc>
 80085f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30
 8008600:	e005      	b.n	800860e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008602:	6978      	ldr	r0, [r7, #20]
 8008604:	f001 fcec 	bl	8009fe0 <vPortFree>
 8008608:	e001      	b.n	800860e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800860a:	2300      	movs	r3, #0
 800860c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d017      	beq.n	8008644 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800861c:	88fa      	ldrh	r2, [r7, #6]
 800861e:	2300      	movs	r3, #0
 8008620:	9303      	str	r3, [sp, #12]
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	9302      	str	r3, [sp, #8]
 8008626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 f80e 	bl	8008654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008638:	69f8      	ldr	r0, [r7, #28]
 800863a:	f000 f8b1 	bl	80087a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800863e:	2301      	movs	r3, #1
 8008640:	61bb      	str	r3, [r7, #24]
 8008642:	e002      	b.n	800864a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008648:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800864a:	69bb      	ldr	r3, [r7, #24]
	}
 800864c:	4618      	mov	r0, r3
 800864e:	3720      	adds	r7, #32
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	461a      	mov	r2, r3
 800866c:	21a5      	movs	r1, #165	; 0xa5
 800866e:	f001 ff43 	bl	800a4f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800867c:	3b01      	subs	r3, #1
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	f023 0307 	bic.w	r3, r3, #7
 800868a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	617b      	str	r3, [r7, #20]
}
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d01f      	beq.n	80086f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086b2:	2300      	movs	r3, #0
 80086b4:	61fb      	str	r3, [r7, #28]
 80086b6:	e012      	b.n	80086de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	4413      	add	r3, r2
 80086be:	7819      	ldrb	r1, [r3, #0]
 80086c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	4413      	add	r3, r2
 80086c6:	3334      	adds	r3, #52	; 0x34
 80086c8:	460a      	mov	r2, r1
 80086ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	4413      	add	r3, r2
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d006      	beq.n	80086e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	3301      	adds	r3, #1
 80086dc:	61fb      	str	r3, [r7, #28]
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	2b0f      	cmp	r3, #15
 80086e2:	d9e9      	bls.n	80086b8 <prvInitialiseNewTask+0x64>
 80086e4:	e000      	b.n	80086e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80086e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086f0:	e003      	b.n	80086fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fc:	2b37      	cmp	r3, #55	; 0x37
 80086fe:	d901      	bls.n	8008704 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008700:	2337      	movs	r3, #55	; 0x37
 8008702:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008708:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800870e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	2200      	movs	r2, #0
 8008714:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	3304      	adds	r3, #4
 800871a:	4618      	mov	r0, r3
 800871c:	f7ff f886 	bl	800782c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008722:	3318      	adds	r3, #24
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff f881 	bl	800782c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800872e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800873a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800873e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008742:	2200      	movs	r2, #0
 8008744:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	2200      	movs	r2, #0
 800874c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	3354      	adds	r3, #84	; 0x54
 8008754:	2260      	movs	r2, #96	; 0x60
 8008756:	2100      	movs	r1, #0
 8008758:	4618      	mov	r0, r3
 800875a:	f001 fecd 	bl	800a4f8 <memset>
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	4a0c      	ldr	r2, [pc, #48]	; (8008794 <prvInitialiseNewTask+0x140>)
 8008762:	659a      	str	r2, [r3, #88]	; 0x58
 8008764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008766:	4a0c      	ldr	r2, [pc, #48]	; (8008798 <prvInitialiseNewTask+0x144>)
 8008768:	65da      	str	r2, [r3, #92]	; 0x5c
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	4a0b      	ldr	r2, [pc, #44]	; (800879c <prvInitialiseNewTask+0x148>)
 800876e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	68f9      	ldr	r1, [r7, #12]
 8008774:	69b8      	ldr	r0, [r7, #24]
 8008776:	f001 f941 	bl	80099fc <pxPortInitialiseStack>
 800877a:	4602      	mov	r2, r0
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008782:	2b00      	cmp	r3, #0
 8008784:	d002      	beq.n	800878c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800878a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800878c:	bf00      	nop
 800878e:	3720      	adds	r7, #32
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	0800d4a0 	.word	0x0800d4a0
 8008798:	0800d4c0 	.word	0x0800d4c0
 800879c:	0800d480 	.word	0x0800d480

080087a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087a8:	f001 fa54 	bl	8009c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087ac:	4b2d      	ldr	r3, [pc, #180]	; (8008864 <prvAddNewTaskToReadyList+0xc4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3301      	adds	r3, #1
 80087b2:	4a2c      	ldr	r2, [pc, #176]	; (8008864 <prvAddNewTaskToReadyList+0xc4>)
 80087b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087b6:	4b2c      	ldr	r3, [pc, #176]	; (8008868 <prvAddNewTaskToReadyList+0xc8>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d109      	bne.n	80087d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087be:	4a2a      	ldr	r2, [pc, #168]	; (8008868 <prvAddNewTaskToReadyList+0xc8>)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087c4:	4b27      	ldr	r3, [pc, #156]	; (8008864 <prvAddNewTaskToReadyList+0xc4>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d110      	bne.n	80087ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80087cc:	f000 fc26 	bl	800901c <prvInitialiseTaskLists>
 80087d0:	e00d      	b.n	80087ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087d2:	4b26      	ldr	r3, [pc, #152]	; (800886c <prvAddNewTaskToReadyList+0xcc>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d109      	bne.n	80087ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80087da:	4b23      	ldr	r3, [pc, #140]	; (8008868 <prvAddNewTaskToReadyList+0xc8>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d802      	bhi.n	80087ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80087e8:	4a1f      	ldr	r2, [pc, #124]	; (8008868 <prvAddNewTaskToReadyList+0xc8>)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80087ee:	4b20      	ldr	r3, [pc, #128]	; (8008870 <prvAddNewTaskToReadyList+0xd0>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3301      	adds	r3, #1
 80087f4:	4a1e      	ldr	r2, [pc, #120]	; (8008870 <prvAddNewTaskToReadyList+0xd0>)
 80087f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087f8:	4b1d      	ldr	r3, [pc, #116]	; (8008870 <prvAddNewTaskToReadyList+0xd0>)
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008804:	4b1b      	ldr	r3, [pc, #108]	; (8008874 <prvAddNewTaskToReadyList+0xd4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	429a      	cmp	r2, r3
 800880a:	d903      	bls.n	8008814 <prvAddNewTaskToReadyList+0x74>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	4a18      	ldr	r2, [pc, #96]	; (8008874 <prvAddNewTaskToReadyList+0xd4>)
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4a15      	ldr	r2, [pc, #84]	; (8008878 <prvAddNewTaskToReadyList+0xd8>)
 8008822:	441a      	add	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3304      	adds	r3, #4
 8008828:	4619      	mov	r1, r3
 800882a:	4610      	mov	r0, r2
 800882c:	f7ff f80b 	bl	8007846 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008830:	f001 fa40 	bl	8009cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008834:	4b0d      	ldr	r3, [pc, #52]	; (800886c <prvAddNewTaskToReadyList+0xcc>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00e      	beq.n	800885a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800883c:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <prvAddNewTaskToReadyList+0xc8>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008846:	429a      	cmp	r2, r3
 8008848:	d207      	bcs.n	800885a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800884a:	4b0c      	ldr	r3, [pc, #48]	; (800887c <prvAddNewTaskToReadyList+0xdc>)
 800884c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800885a:	bf00      	nop
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20005414 	.word	0x20005414
 8008868:	20004f40 	.word	0x20004f40
 800886c:	20005420 	.word	0x20005420
 8008870:	20005430 	.word	0x20005430
 8008874:	2000541c 	.word	0x2000541c
 8008878:	20004f44 	.word	0x20004f44
 800887c:	e000ed04 	.word	0xe000ed04

08008880 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008888:	2300      	movs	r3, #0
 800888a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d017      	beq.n	80088c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008892:	4b13      	ldr	r3, [pc, #76]	; (80088e0 <vTaskDelay+0x60>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <vTaskDelay+0x30>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	60bb      	str	r3, [r7, #8]
}
 80088ac:	bf00      	nop
 80088ae:	e7fe      	b.n	80088ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088b0:	f000 f88a 	bl	80089c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088b4:	2100      	movs	r1, #0
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fcfe 	bl	80092b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088bc:	f000 f892 	bl	80089e4 <xTaskResumeAll>
 80088c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d107      	bne.n	80088d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80088c8:	4b06      	ldr	r3, [pc, #24]	; (80088e4 <vTaskDelay+0x64>)
 80088ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	2000543c 	.word	0x2000543c
 80088e4:	e000ed04 	.word	0xe000ed04

080088e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08a      	sub	sp, #40	; 0x28
 80088ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80088ee:	2300      	movs	r3, #0
 80088f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80088f2:	2300      	movs	r3, #0
 80088f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80088f6:	463a      	mov	r2, r7
 80088f8:	1d39      	adds	r1, r7, #4
 80088fa:	f107 0308 	add.w	r3, r7, #8
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe ff40 	bl	8007784 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	9202      	str	r2, [sp, #8]
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	2300      	movs	r3, #0
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	2300      	movs	r3, #0
 8008914:	460a      	mov	r2, r1
 8008916:	4924      	ldr	r1, [pc, #144]	; (80089a8 <vTaskStartScheduler+0xc0>)
 8008918:	4824      	ldr	r0, [pc, #144]	; (80089ac <vTaskStartScheduler+0xc4>)
 800891a:	f7ff fdf9 	bl	8008510 <xTaskCreateStatic>
 800891e:	4603      	mov	r3, r0
 8008920:	4a23      	ldr	r2, [pc, #140]	; (80089b0 <vTaskStartScheduler+0xc8>)
 8008922:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008924:	4b22      	ldr	r3, [pc, #136]	; (80089b0 <vTaskStartScheduler+0xc8>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800892c:	2301      	movs	r3, #1
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	e001      	b.n	8008936 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008932:	2300      	movs	r3, #0
 8008934:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d102      	bne.n	8008942 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800893c:	f000 fd10 	bl	8009360 <xTimerCreateTimerTask>
 8008940:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d11b      	bne.n	8008980 <vTaskStartScheduler+0x98>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	613b      	str	r3, [r7, #16]
}
 800895a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800895c:	4b15      	ldr	r3, [pc, #84]	; (80089b4 <vTaskStartScheduler+0xcc>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3354      	adds	r3, #84	; 0x54
 8008962:	4a15      	ldr	r2, [pc, #84]	; (80089b8 <vTaskStartScheduler+0xd0>)
 8008964:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008966:	4b15      	ldr	r3, [pc, #84]	; (80089bc <vTaskStartScheduler+0xd4>)
 8008968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800896c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800896e:	4b14      	ldr	r3, [pc, #80]	; (80089c0 <vTaskStartScheduler+0xd8>)
 8008970:	2201      	movs	r2, #1
 8008972:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008974:	4b13      	ldr	r3, [pc, #76]	; (80089c4 <vTaskStartScheduler+0xdc>)
 8008976:	2200      	movs	r2, #0
 8008978:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800897a:	f001 f8c9 	bl	8009b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800897e:	e00e      	b.n	800899e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008986:	d10a      	bne.n	800899e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	60fb      	str	r3, [r7, #12]
}
 800899a:	bf00      	nop
 800899c:	e7fe      	b.n	800899c <vTaskStartScheduler+0xb4>
}
 800899e:	bf00      	nop
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	0800b350 	.word	0x0800b350
 80089ac:	08008fed 	.word	0x08008fed
 80089b0:	20005438 	.word	0x20005438
 80089b4:	20004f40 	.word	0x20004f40
 80089b8:	20000064 	.word	0x20000064
 80089bc:	20005434 	.word	0x20005434
 80089c0:	20005420 	.word	0x20005420
 80089c4:	20005418 	.word	0x20005418

080089c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089c8:	b480      	push	{r7}
 80089ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80089cc:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <vTaskSuspendAll+0x18>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3301      	adds	r3, #1
 80089d2:	4a03      	ldr	r2, [pc, #12]	; (80089e0 <vTaskSuspendAll+0x18>)
 80089d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80089d6:	bf00      	nop
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	2000543c 	.word	0x2000543c

080089e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80089f2:	4b42      	ldr	r3, [pc, #264]	; (8008afc <xTaskResumeAll+0x118>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <xTaskResumeAll+0x2c>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	603b      	str	r3, [r7, #0]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a10:	f001 f920 	bl	8009c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a14:	4b39      	ldr	r3, [pc, #228]	; (8008afc <xTaskResumeAll+0x118>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	4a38      	ldr	r2, [pc, #224]	; (8008afc <xTaskResumeAll+0x118>)
 8008a1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a1e:	4b37      	ldr	r3, [pc, #220]	; (8008afc <xTaskResumeAll+0x118>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d162      	bne.n	8008aec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a26:	4b36      	ldr	r3, [pc, #216]	; (8008b00 <xTaskResumeAll+0x11c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d05e      	beq.n	8008aec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a2e:	e02f      	b.n	8008a90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a30:	4b34      	ldr	r3, [pc, #208]	; (8008b04 <xTaskResumeAll+0x120>)
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	3318      	adds	r3, #24
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fe ff5f 	bl	8007900 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3304      	adds	r3, #4
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe ff5a 	bl	8007900 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a50:	4b2d      	ldr	r3, [pc, #180]	; (8008b08 <xTaskResumeAll+0x124>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d903      	bls.n	8008a60 <xTaskResumeAll+0x7c>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	4a2a      	ldr	r2, [pc, #168]	; (8008b08 <xTaskResumeAll+0x124>)
 8008a5e:	6013      	str	r3, [r2, #0]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a64:	4613      	mov	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4a27      	ldr	r2, [pc, #156]	; (8008b0c <xTaskResumeAll+0x128>)
 8008a6e:	441a      	add	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3304      	adds	r3, #4
 8008a74:	4619      	mov	r1, r3
 8008a76:	4610      	mov	r0, r2
 8008a78:	f7fe fee5 	bl	8007846 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a80:	4b23      	ldr	r3, [pc, #140]	; (8008b10 <xTaskResumeAll+0x12c>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d302      	bcc.n	8008a90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008a8a:	4b22      	ldr	r3, [pc, #136]	; (8008b14 <xTaskResumeAll+0x130>)
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a90:	4b1c      	ldr	r3, [pc, #112]	; (8008b04 <xTaskResumeAll+0x120>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1cb      	bne.n	8008a30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a9e:	f000 fb5f 	bl	8009160 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008aa2:	4b1d      	ldr	r3, [pc, #116]	; (8008b18 <xTaskResumeAll+0x134>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d010      	beq.n	8008ad0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008aae:	f000 f847 	bl	8008b40 <xTaskIncrementTick>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008ab8:	4b16      	ldr	r3, [pc, #88]	; (8008b14 <xTaskResumeAll+0x130>)
 8008aba:	2201      	movs	r2, #1
 8008abc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1f1      	bne.n	8008aae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008aca:	4b13      	ldr	r3, [pc, #76]	; (8008b18 <xTaskResumeAll+0x134>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ad0:	4b10      	ldr	r3, [pc, #64]	; (8008b14 <xTaskResumeAll+0x130>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d009      	beq.n	8008aec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008adc:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <xTaskResumeAll+0x138>)
 8008ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008aec:	f001 f8e2 	bl	8009cb4 <vPortExitCritical>

	return xAlreadyYielded;
 8008af0:	68bb      	ldr	r3, [r7, #8]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	2000543c 	.word	0x2000543c
 8008b00:	20005414 	.word	0x20005414
 8008b04:	200053d4 	.word	0x200053d4
 8008b08:	2000541c 	.word	0x2000541c
 8008b0c:	20004f44 	.word	0x20004f44
 8008b10:	20004f40 	.word	0x20004f40
 8008b14:	20005428 	.word	0x20005428
 8008b18:	20005424 	.word	0x20005424
 8008b1c:	e000ed04 	.word	0xe000ed04

08008b20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b26:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <xTaskGetTickCount+0x1c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b2c:	687b      	ldr	r3, [r7, #4]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	20005418 	.word	0x20005418

08008b40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b46:	2300      	movs	r3, #0
 8008b48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b4a:	4b4f      	ldr	r3, [pc, #316]	; (8008c88 <xTaskIncrementTick+0x148>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f040 808f 	bne.w	8008c72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b54:	4b4d      	ldr	r3, [pc, #308]	; (8008c8c <xTaskIncrementTick+0x14c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b5c:	4a4b      	ldr	r2, [pc, #300]	; (8008c8c <xTaskIncrementTick+0x14c>)
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d120      	bne.n	8008baa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b68:	4b49      	ldr	r3, [pc, #292]	; (8008c90 <xTaskIncrementTick+0x150>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00a      	beq.n	8008b88 <xTaskIncrementTick+0x48>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	603b      	str	r3, [r7, #0]
}
 8008b84:	bf00      	nop
 8008b86:	e7fe      	b.n	8008b86 <xTaskIncrementTick+0x46>
 8008b88:	4b41      	ldr	r3, [pc, #260]	; (8008c90 <xTaskIncrementTick+0x150>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	4b41      	ldr	r3, [pc, #260]	; (8008c94 <xTaskIncrementTick+0x154>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a3f      	ldr	r2, [pc, #252]	; (8008c90 <xTaskIncrementTick+0x150>)
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	4a3f      	ldr	r2, [pc, #252]	; (8008c94 <xTaskIncrementTick+0x154>)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	4b3e      	ldr	r3, [pc, #248]	; (8008c98 <xTaskIncrementTick+0x158>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	4a3d      	ldr	r2, [pc, #244]	; (8008c98 <xTaskIncrementTick+0x158>)
 8008ba4:	6013      	str	r3, [r2, #0]
 8008ba6:	f000 fadb 	bl	8009160 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008baa:	4b3c      	ldr	r3, [pc, #240]	; (8008c9c <xTaskIncrementTick+0x15c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d349      	bcc.n	8008c48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bb4:	4b36      	ldr	r3, [pc, #216]	; (8008c90 <xTaskIncrementTick+0x150>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d104      	bne.n	8008bc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bbe:	4b37      	ldr	r3, [pc, #220]	; (8008c9c <xTaskIncrementTick+0x15c>)
 8008bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bc4:	601a      	str	r2, [r3, #0]
					break;
 8008bc6:	e03f      	b.n	8008c48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc8:	4b31      	ldr	r3, [pc, #196]	; (8008c90 <xTaskIncrementTick+0x150>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d203      	bcs.n	8008be8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008be0:	4a2e      	ldr	r2, [pc, #184]	; (8008c9c <xTaskIncrementTick+0x15c>)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008be6:	e02f      	b.n	8008c48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	3304      	adds	r3, #4
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fe fe87 	bl	8007900 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d004      	beq.n	8008c04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	3318      	adds	r3, #24
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe fe7e 	bl	8007900 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c08:	4b25      	ldr	r3, [pc, #148]	; (8008ca0 <xTaskIncrementTick+0x160>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d903      	bls.n	8008c18 <xTaskIncrementTick+0xd8>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c14:	4a22      	ldr	r2, [pc, #136]	; (8008ca0 <xTaskIncrementTick+0x160>)
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4a1f      	ldr	r2, [pc, #124]	; (8008ca4 <xTaskIncrementTick+0x164>)
 8008c26:	441a      	add	r2, r3
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4610      	mov	r0, r2
 8008c30:	f7fe fe09 	bl	8007846 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c38:	4b1b      	ldr	r3, [pc, #108]	; (8008ca8 <xTaskIncrementTick+0x168>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d3b8      	bcc.n	8008bb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c42:	2301      	movs	r3, #1
 8008c44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c46:	e7b5      	b.n	8008bb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c48:	4b17      	ldr	r3, [pc, #92]	; (8008ca8 <xTaskIncrementTick+0x168>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4e:	4915      	ldr	r1, [pc, #84]	; (8008ca4 <xTaskIncrementTick+0x164>)
 8008c50:	4613      	mov	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	440b      	add	r3, r1
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d901      	bls.n	8008c64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008c60:	2301      	movs	r3, #1
 8008c62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c64:	4b11      	ldr	r3, [pc, #68]	; (8008cac <xTaskIncrementTick+0x16c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d007      	beq.n	8008c7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	e004      	b.n	8008c7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c72:	4b0f      	ldr	r3, [pc, #60]	; (8008cb0 <xTaskIncrementTick+0x170>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3301      	adds	r3, #1
 8008c78:	4a0d      	ldr	r2, [pc, #52]	; (8008cb0 <xTaskIncrementTick+0x170>)
 8008c7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c7c:	697b      	ldr	r3, [r7, #20]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	2000543c 	.word	0x2000543c
 8008c8c:	20005418 	.word	0x20005418
 8008c90:	200053cc 	.word	0x200053cc
 8008c94:	200053d0 	.word	0x200053d0
 8008c98:	2000542c 	.word	0x2000542c
 8008c9c:	20005434 	.word	0x20005434
 8008ca0:	2000541c 	.word	0x2000541c
 8008ca4:	20004f44 	.word	0x20004f44
 8008ca8:	20004f40 	.word	0x20004f40
 8008cac:	20005428 	.word	0x20005428
 8008cb0:	20005424 	.word	0x20005424

08008cb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008cba:	4b2a      	ldr	r3, [pc, #168]	; (8008d64 <vTaskSwitchContext+0xb0>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008cc2:	4b29      	ldr	r3, [pc, #164]	; (8008d68 <vTaskSwitchContext+0xb4>)
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008cc8:	e046      	b.n	8008d58 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008cca:	4b27      	ldr	r3, [pc, #156]	; (8008d68 <vTaskSwitchContext+0xb4>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd0:	4b26      	ldr	r3, [pc, #152]	; (8008d6c <vTaskSwitchContext+0xb8>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	60fb      	str	r3, [r7, #12]
 8008cd6:	e010      	b.n	8008cfa <vTaskSwitchContext+0x46>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <vTaskSwitchContext+0x40>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	607b      	str	r3, [r7, #4]
}
 8008cf0:	bf00      	nop
 8008cf2:	e7fe      	b.n	8008cf2 <vTaskSwitchContext+0x3e>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	60fb      	str	r3, [r7, #12]
 8008cfa:	491d      	ldr	r1, [pc, #116]	; (8008d70 <vTaskSwitchContext+0xbc>)
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	440b      	add	r3, r1
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0e4      	beq.n	8008cd8 <vTaskSwitchContext+0x24>
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	4613      	mov	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4a15      	ldr	r2, [pc, #84]	; (8008d70 <vTaskSwitchContext+0xbc>)
 8008d1a:	4413      	add	r3, r2
 8008d1c:	60bb      	str	r3, [r7, #8]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	605a      	str	r2, [r3, #4]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	3308      	adds	r3, #8
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d104      	bne.n	8008d3e <vTaskSwitchContext+0x8a>
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	605a      	str	r2, [r3, #4]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	4a0b      	ldr	r2, [pc, #44]	; (8008d74 <vTaskSwitchContext+0xc0>)
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	4a08      	ldr	r2, [pc, #32]	; (8008d6c <vTaskSwitchContext+0xb8>)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d4e:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <vTaskSwitchContext+0xc0>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3354      	adds	r3, #84	; 0x54
 8008d54:	4a08      	ldr	r2, [pc, #32]	; (8008d78 <vTaskSwitchContext+0xc4>)
 8008d56:	6013      	str	r3, [r2, #0]
}
 8008d58:	bf00      	nop
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	2000543c 	.word	0x2000543c
 8008d68:	20005428 	.word	0x20005428
 8008d6c:	2000541c 	.word	0x2000541c
 8008d70:	20004f44 	.word	0x20004f44
 8008d74:	20004f40 	.word	0x20004f40
 8008d78:	20000064 	.word	0x20000064

08008d7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10a      	bne.n	8008da2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	60fb      	str	r3, [r7, #12]
}
 8008d9e:	bf00      	nop
 8008da0:	e7fe      	b.n	8008da0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008da2:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <vTaskPlaceOnEventList+0x44>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3318      	adds	r3, #24
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7fe fd6f 	bl	800788e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008db0:	2101      	movs	r1, #1
 8008db2:	6838      	ldr	r0, [r7, #0]
 8008db4:	f000 fa80 	bl	80092b8 <prvAddCurrentTaskToDelayedList>
}
 8008db8:	bf00      	nop
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20004f40 	.word	0x20004f40

08008dc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10a      	bne.n	8008dec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	617b      	str	r3, [r7, #20]
}
 8008de8:	bf00      	nop
 8008dea:	e7fe      	b.n	8008dea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dec:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <vTaskPlaceOnEventListRestricted+0x54>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3318      	adds	r3, #24
 8008df2:	4619      	mov	r1, r3
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f7fe fd26 	bl	8007846 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	68b8      	ldr	r0, [r7, #8]
 8008e0a:	f000 fa55 	bl	80092b8 <prvAddCurrentTaskToDelayedList>
	}
 8008e0e:	bf00      	nop
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	20004f40 	.word	0x20004f40

08008e1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10a      	bne.n	8008e48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	60fb      	str	r3, [r7, #12]
}
 8008e44:	bf00      	nop
 8008e46:	e7fe      	b.n	8008e46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	3318      	adds	r3, #24
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe fd57 	bl	8007900 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e52:	4b1e      	ldr	r3, [pc, #120]	; (8008ecc <xTaskRemoveFromEventList+0xb0>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d11d      	bne.n	8008e96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe fd4e 	bl	8007900 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e68:	4b19      	ldr	r3, [pc, #100]	; (8008ed0 <xTaskRemoveFromEventList+0xb4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d903      	bls.n	8008e78 <xTaskRemoveFromEventList+0x5c>
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	4a16      	ldr	r2, [pc, #88]	; (8008ed0 <xTaskRemoveFromEventList+0xb4>)
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4a13      	ldr	r2, [pc, #76]	; (8008ed4 <xTaskRemoveFromEventList+0xb8>)
 8008e86:	441a      	add	r2, r3
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f7fe fcd9 	bl	8007846 <vListInsertEnd>
 8008e94:	e005      	b.n	8008ea2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	3318      	adds	r3, #24
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	480e      	ldr	r0, [pc, #56]	; (8008ed8 <xTaskRemoveFromEventList+0xbc>)
 8008e9e:	f7fe fcd2 	bl	8007846 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea6:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <xTaskRemoveFromEventList+0xc0>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d905      	bls.n	8008ebc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008eb4:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <xTaskRemoveFromEventList+0xc4>)
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	e001      	b.n	8008ec0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ec0:	697b      	ldr	r3, [r7, #20]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3718      	adds	r7, #24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	2000543c 	.word	0x2000543c
 8008ed0:	2000541c 	.word	0x2000541c
 8008ed4:	20004f44 	.word	0x20004f44
 8008ed8:	200053d4 	.word	0x200053d4
 8008edc:	20004f40 	.word	0x20004f40
 8008ee0:	20005428 	.word	0x20005428

08008ee4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008eec:	4b06      	ldr	r3, [pc, #24]	; (8008f08 <vTaskInternalSetTimeOutState+0x24>)
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ef4:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <vTaskInternalSetTimeOutState+0x28>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	605a      	str	r2, [r3, #4]
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr
 8008f08:	2000542c 	.word	0x2000542c
 8008f0c:	20005418 	.word	0x20005418

08008f10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b088      	sub	sp, #32
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	613b      	str	r3, [r7, #16]
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10a      	bne.n	8008f52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	60fb      	str	r3, [r7, #12]
}
 8008f4e:	bf00      	nop
 8008f50:	e7fe      	b.n	8008f50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008f52:	f000 fe7f 	bl	8009c54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f56:	4b1d      	ldr	r3, [pc, #116]	; (8008fcc <xTaskCheckForTimeOut+0xbc>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f6e:	d102      	bne.n	8008f76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	61fb      	str	r3, [r7, #28]
 8008f74:	e023      	b.n	8008fbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	4b15      	ldr	r3, [pc, #84]	; (8008fd0 <xTaskCheckForTimeOut+0xc0>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d007      	beq.n	8008f92 <xTaskCheckForTimeOut+0x82>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	69ba      	ldr	r2, [r7, #24]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d302      	bcc.n	8008f92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	61fb      	str	r3, [r7, #28]
 8008f90:	e015      	b.n	8008fbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d20b      	bcs.n	8008fb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	1ad2      	subs	r2, r2, r3
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff ff9b 	bl	8008ee4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	61fb      	str	r3, [r7, #28]
 8008fb2:	e004      	b.n	8008fbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008fbe:	f000 fe79 	bl	8009cb4 <vPortExitCritical>

	return xReturn;
 8008fc2:	69fb      	ldr	r3, [r7, #28]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3720      	adds	r7, #32
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20005418 	.word	0x20005418
 8008fd0:	2000542c 	.word	0x2000542c

08008fd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008fd8:	4b03      	ldr	r3, [pc, #12]	; (8008fe8 <vTaskMissedYield+0x14>)
 8008fda:	2201      	movs	r2, #1
 8008fdc:	601a      	str	r2, [r3, #0]
}
 8008fde:	bf00      	nop
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	20005428 	.word	0x20005428

08008fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ff4:	f000 f852 	bl	800909c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ff8:	4b06      	ldr	r3, [pc, #24]	; (8009014 <prvIdleTask+0x28>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d9f9      	bls.n	8008ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009000:	4b05      	ldr	r3, [pc, #20]	; (8009018 <prvIdleTask+0x2c>)
 8009002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009010:	e7f0      	b.n	8008ff4 <prvIdleTask+0x8>
 8009012:	bf00      	nop
 8009014:	20004f44 	.word	0x20004f44
 8009018:	e000ed04 	.word	0xe000ed04

0800901c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009022:	2300      	movs	r3, #0
 8009024:	607b      	str	r3, [r7, #4]
 8009026:	e00c      	b.n	8009042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	4613      	mov	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4a12      	ldr	r2, [pc, #72]	; (800907c <prvInitialiseTaskLists+0x60>)
 8009034:	4413      	add	r3, r2
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe fbd8 	bl	80077ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3301      	adds	r3, #1
 8009040:	607b      	str	r3, [r7, #4]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b37      	cmp	r3, #55	; 0x37
 8009046:	d9ef      	bls.n	8009028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009048:	480d      	ldr	r0, [pc, #52]	; (8009080 <prvInitialiseTaskLists+0x64>)
 800904a:	f7fe fbcf 	bl	80077ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800904e:	480d      	ldr	r0, [pc, #52]	; (8009084 <prvInitialiseTaskLists+0x68>)
 8009050:	f7fe fbcc 	bl	80077ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009054:	480c      	ldr	r0, [pc, #48]	; (8009088 <prvInitialiseTaskLists+0x6c>)
 8009056:	f7fe fbc9 	bl	80077ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800905a:	480c      	ldr	r0, [pc, #48]	; (800908c <prvInitialiseTaskLists+0x70>)
 800905c:	f7fe fbc6 	bl	80077ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009060:	480b      	ldr	r0, [pc, #44]	; (8009090 <prvInitialiseTaskLists+0x74>)
 8009062:	f7fe fbc3 	bl	80077ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009066:	4b0b      	ldr	r3, [pc, #44]	; (8009094 <prvInitialiseTaskLists+0x78>)
 8009068:	4a05      	ldr	r2, [pc, #20]	; (8009080 <prvInitialiseTaskLists+0x64>)
 800906a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800906c:	4b0a      	ldr	r3, [pc, #40]	; (8009098 <prvInitialiseTaskLists+0x7c>)
 800906e:	4a05      	ldr	r2, [pc, #20]	; (8009084 <prvInitialiseTaskLists+0x68>)
 8009070:	601a      	str	r2, [r3, #0]
}
 8009072:	bf00      	nop
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20004f44 	.word	0x20004f44
 8009080:	200053a4 	.word	0x200053a4
 8009084:	200053b8 	.word	0x200053b8
 8009088:	200053d4 	.word	0x200053d4
 800908c:	200053e8 	.word	0x200053e8
 8009090:	20005400 	.word	0x20005400
 8009094:	200053cc 	.word	0x200053cc
 8009098:	200053d0 	.word	0x200053d0

0800909c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090a2:	e019      	b.n	80090d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090a4:	f000 fdd6 	bl	8009c54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a8:	4b10      	ldr	r3, [pc, #64]	; (80090ec <prvCheckTasksWaitingTermination+0x50>)
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3304      	adds	r3, #4
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fe fc23 	bl	8007900 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090ba:	4b0d      	ldr	r3, [pc, #52]	; (80090f0 <prvCheckTasksWaitingTermination+0x54>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3b01      	subs	r3, #1
 80090c0:	4a0b      	ldr	r2, [pc, #44]	; (80090f0 <prvCheckTasksWaitingTermination+0x54>)
 80090c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090c4:	4b0b      	ldr	r3, [pc, #44]	; (80090f4 <prvCheckTasksWaitingTermination+0x58>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3b01      	subs	r3, #1
 80090ca:	4a0a      	ldr	r2, [pc, #40]	; (80090f4 <prvCheckTasksWaitingTermination+0x58>)
 80090cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80090ce:	f000 fdf1 	bl	8009cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f810 	bl	80090f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090d8:	4b06      	ldr	r3, [pc, #24]	; (80090f4 <prvCheckTasksWaitingTermination+0x58>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e1      	bne.n	80090a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80090e0:	bf00      	nop
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	200053e8 	.word	0x200053e8
 80090f0:	20005414 	.word	0x20005414
 80090f4:	200053fc 	.word	0x200053fc

080090f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3354      	adds	r3, #84	; 0x54
 8009104:	4618      	mov	r0, r3
 8009106:	f001 fb03 	bl	800a710 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009110:	2b00      	cmp	r3, #0
 8009112:	d108      	bne.n	8009126 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009118:	4618      	mov	r0, r3
 800911a:	f000 ff61 	bl	8009fe0 <vPortFree>
				vPortFree( pxTCB );
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 ff5e 	bl	8009fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009124:	e018      	b.n	8009158 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800912c:	2b01      	cmp	r3, #1
 800912e:	d103      	bne.n	8009138 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 ff55 	bl	8009fe0 <vPortFree>
	}
 8009136:	e00f      	b.n	8009158 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800913e:	2b02      	cmp	r3, #2
 8009140:	d00a      	beq.n	8009158 <prvDeleteTCB+0x60>
	__asm volatile
 8009142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009146:	f383 8811 	msr	BASEPRI, r3
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	60fb      	str	r3, [r7, #12]
}
 8009154:	bf00      	nop
 8009156:	e7fe      	b.n	8009156 <prvDeleteTCB+0x5e>
	}
 8009158:	bf00      	nop
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009166:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <prvResetNextTaskUnblockTime+0x38>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d104      	bne.n	800917a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009170:	4b0a      	ldr	r3, [pc, #40]	; (800919c <prvResetNextTaskUnblockTime+0x3c>)
 8009172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009176:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009178:	e008      	b.n	800918c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800917a:	4b07      	ldr	r3, [pc, #28]	; (8009198 <prvResetNextTaskUnblockTime+0x38>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	4a04      	ldr	r2, [pc, #16]	; (800919c <prvResetNextTaskUnblockTime+0x3c>)
 800918a:	6013      	str	r3, [r2, #0]
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	200053cc 	.word	0x200053cc
 800919c:	20005434 	.word	0x20005434

080091a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091a6:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <xTaskGetSchedulerState+0x34>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d102      	bne.n	80091b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091ae:	2301      	movs	r3, #1
 80091b0:	607b      	str	r3, [r7, #4]
 80091b2:	e008      	b.n	80091c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091b4:	4b08      	ldr	r3, [pc, #32]	; (80091d8 <xTaskGetSchedulerState+0x38>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d102      	bne.n	80091c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091bc:	2302      	movs	r3, #2
 80091be:	607b      	str	r3, [r7, #4]
 80091c0:	e001      	b.n	80091c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091c2:	2300      	movs	r3, #0
 80091c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091c6:	687b      	ldr	r3, [r7, #4]
	}
 80091c8:	4618      	mov	r0, r3
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	20005420 	.word	0x20005420
 80091d8:	2000543c 	.word	0x2000543c

080091dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80091e8:	2300      	movs	r3, #0
 80091ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d056      	beq.n	80092a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80091f2:	4b2e      	ldr	r3, [pc, #184]	; (80092ac <xTaskPriorityDisinherit+0xd0>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d00a      	beq.n	8009212 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	60fb      	str	r3, [r7, #12]
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10a      	bne.n	8009230 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	60bb      	str	r3, [r7, #8]
}
 800922c:	bf00      	nop
 800922e:	e7fe      	b.n	800922e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009234:	1e5a      	subs	r2, r3, #1
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009242:	429a      	cmp	r2, r3
 8009244:	d02c      	beq.n	80092a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800924a:	2b00      	cmp	r3, #0
 800924c:	d128      	bne.n	80092a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	3304      	adds	r3, #4
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fb54 	bl	8007900 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009270:	4b0f      	ldr	r3, [pc, #60]	; (80092b0 <xTaskPriorityDisinherit+0xd4>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d903      	bls.n	8009280 <xTaskPriorityDisinherit+0xa4>
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	4a0c      	ldr	r2, [pc, #48]	; (80092b0 <xTaskPriorityDisinherit+0xd4>)
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009284:	4613      	mov	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4a09      	ldr	r2, [pc, #36]	; (80092b4 <xTaskPriorityDisinherit+0xd8>)
 800928e:	441a      	add	r2, r3
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	3304      	adds	r3, #4
 8009294:	4619      	mov	r1, r3
 8009296:	4610      	mov	r0, r2
 8009298:	f7fe fad5 	bl	8007846 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800929c:	2301      	movs	r3, #1
 800929e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092a0:	697b      	ldr	r3, [r7, #20]
	}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3718      	adds	r7, #24
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	20004f40 	.word	0x20004f40
 80092b0:	2000541c 	.word	0x2000541c
 80092b4:	20004f44 	.word	0x20004f44

080092b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092c2:	4b21      	ldr	r3, [pc, #132]	; (8009348 <prvAddCurrentTaskToDelayedList+0x90>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092c8:	4b20      	ldr	r3, [pc, #128]	; (800934c <prvAddCurrentTaskToDelayedList+0x94>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3304      	adds	r3, #4
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fe fb16 	bl	8007900 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092da:	d10a      	bne.n	80092f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d007      	beq.n	80092f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092e2:	4b1a      	ldr	r3, [pc, #104]	; (800934c <prvAddCurrentTaskToDelayedList+0x94>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4619      	mov	r1, r3
 80092ea:	4819      	ldr	r0, [pc, #100]	; (8009350 <prvAddCurrentTaskToDelayedList+0x98>)
 80092ec:	f7fe faab 	bl	8007846 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092f0:	e026      	b.n	8009340 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4413      	add	r3, r2
 80092f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80092fa:	4b14      	ldr	r3, [pc, #80]	; (800934c <prvAddCurrentTaskToDelayedList+0x94>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	429a      	cmp	r2, r3
 8009308:	d209      	bcs.n	800931e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800930a:	4b12      	ldr	r3, [pc, #72]	; (8009354 <prvAddCurrentTaskToDelayedList+0x9c>)
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	4b0f      	ldr	r3, [pc, #60]	; (800934c <prvAddCurrentTaskToDelayedList+0x94>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3304      	adds	r3, #4
 8009314:	4619      	mov	r1, r3
 8009316:	4610      	mov	r0, r2
 8009318:	f7fe fab9 	bl	800788e <vListInsert>
}
 800931c:	e010      	b.n	8009340 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800931e:	4b0e      	ldr	r3, [pc, #56]	; (8009358 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	4b0a      	ldr	r3, [pc, #40]	; (800934c <prvAddCurrentTaskToDelayedList+0x94>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3304      	adds	r3, #4
 8009328:	4619      	mov	r1, r3
 800932a:	4610      	mov	r0, r2
 800932c:	f7fe faaf 	bl	800788e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009330:	4b0a      	ldr	r3, [pc, #40]	; (800935c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	429a      	cmp	r2, r3
 8009338:	d202      	bcs.n	8009340 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800933a:	4a08      	ldr	r2, [pc, #32]	; (800935c <prvAddCurrentTaskToDelayedList+0xa4>)
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	6013      	str	r3, [r2, #0]
}
 8009340:	bf00      	nop
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20005418 	.word	0x20005418
 800934c:	20004f40 	.word	0x20004f40
 8009350:	20005400 	.word	0x20005400
 8009354:	200053d0 	.word	0x200053d0
 8009358:	200053cc 	.word	0x200053cc
 800935c:	20005434 	.word	0x20005434

08009360 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08a      	sub	sp, #40	; 0x28
 8009364:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009366:	2300      	movs	r3, #0
 8009368:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800936a:	f000 fb07 	bl	800997c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800936e:	4b1c      	ldr	r3, [pc, #112]	; (80093e0 <xTimerCreateTimerTask+0x80>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d021      	beq.n	80093ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009376:	2300      	movs	r3, #0
 8009378:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800937a:	2300      	movs	r3, #0
 800937c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800937e:	1d3a      	adds	r2, r7, #4
 8009380:	f107 0108 	add.w	r1, r7, #8
 8009384:	f107 030c 	add.w	r3, r7, #12
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe fa15 	bl	80077b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800938e:	6879      	ldr	r1, [r7, #4]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	9202      	str	r2, [sp, #8]
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	2302      	movs	r3, #2
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	2300      	movs	r3, #0
 800939e:	460a      	mov	r2, r1
 80093a0:	4910      	ldr	r1, [pc, #64]	; (80093e4 <xTimerCreateTimerTask+0x84>)
 80093a2:	4811      	ldr	r0, [pc, #68]	; (80093e8 <xTimerCreateTimerTask+0x88>)
 80093a4:	f7ff f8b4 	bl	8008510 <xTaskCreateStatic>
 80093a8:	4603      	mov	r3, r0
 80093aa:	4a10      	ldr	r2, [pc, #64]	; (80093ec <xTimerCreateTimerTask+0x8c>)
 80093ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80093ae:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <xTimerCreateTimerTask+0x8c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093b6:	2301      	movs	r3, #1
 80093b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10a      	bne.n	80093d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	613b      	str	r3, [r7, #16]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80093d6:	697b      	ldr	r3, [r7, #20]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3718      	adds	r7, #24
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	20005470 	.word	0x20005470
 80093e4:	0800b358 	.word	0x0800b358
 80093e8:	08009525 	.word	0x08009525
 80093ec:	20005474 	.word	0x20005474

080093f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08a      	sub	sp, #40	; 0x28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093fe:	2300      	movs	r3, #0
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10a      	bne.n	800941e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	f383 8811 	msr	BASEPRI, r3
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	623b      	str	r3, [r7, #32]
}
 800941a:	bf00      	nop
 800941c:	e7fe      	b.n	800941c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800941e:	4b1a      	ldr	r3, [pc, #104]	; (8009488 <xTimerGenericCommand+0x98>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d02a      	beq.n	800947c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2b05      	cmp	r3, #5
 8009436:	dc18      	bgt.n	800946a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009438:	f7ff feb2 	bl	80091a0 <xTaskGetSchedulerState>
 800943c:	4603      	mov	r3, r0
 800943e:	2b02      	cmp	r3, #2
 8009440:	d109      	bne.n	8009456 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009442:	4b11      	ldr	r3, [pc, #68]	; (8009488 <xTimerGenericCommand+0x98>)
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	f107 0110 	add.w	r1, r7, #16
 800944a:	2300      	movs	r3, #0
 800944c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800944e:	f7fe fc29 	bl	8007ca4 <xQueueGenericSend>
 8009452:	6278      	str	r0, [r7, #36]	; 0x24
 8009454:	e012      	b.n	800947c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009456:	4b0c      	ldr	r3, [pc, #48]	; (8009488 <xTimerGenericCommand+0x98>)
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	f107 0110 	add.w	r1, r7, #16
 800945e:	2300      	movs	r3, #0
 8009460:	2200      	movs	r2, #0
 8009462:	f7fe fc1f 	bl	8007ca4 <xQueueGenericSend>
 8009466:	6278      	str	r0, [r7, #36]	; 0x24
 8009468:	e008      	b.n	800947c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800946a:	4b07      	ldr	r3, [pc, #28]	; (8009488 <xTimerGenericCommand+0x98>)
 800946c:	6818      	ldr	r0, [r3, #0]
 800946e:	f107 0110 	add.w	r1, r7, #16
 8009472:	2300      	movs	r3, #0
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	f7fe fd13 	bl	8007ea0 <xQueueGenericSendFromISR>
 800947a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800947e:	4618      	mov	r0, r3
 8009480:	3728      	adds	r7, #40	; 0x28
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20005470 	.word	0x20005470

0800948c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af02      	add	r7, sp, #8
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009496:	4b22      	ldr	r3, [pc, #136]	; (8009520 <prvProcessExpiredTimer+0x94>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	3304      	adds	r3, #4
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe fa2b 	bl	8007900 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d022      	beq.n	80094fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	699a      	ldr	r2, [r3, #24]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	18d1      	adds	r1, r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	6978      	ldr	r0, [r7, #20]
 80094c6:	f000 f8d1 	bl	800966c <prvInsertTimerInActiveList>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d01f      	beq.n	8009510 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094d0:	2300      	movs	r3, #0
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	2300      	movs	r3, #0
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	2100      	movs	r1, #0
 80094da:	6978      	ldr	r0, [r7, #20]
 80094dc:	f7ff ff88 	bl	80093f0 <xTimerGenericCommand>
 80094e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d113      	bne.n	8009510 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80094e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	60fb      	str	r3, [r7, #12]
}
 80094fa:	bf00      	nop
 80094fc:	e7fe      	b.n	80094fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009504:	f023 0301 	bic.w	r3, r3, #1
 8009508:	b2da      	uxtb	r2, r3
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	6a1b      	ldr	r3, [r3, #32]
 8009514:	6978      	ldr	r0, [r7, #20]
 8009516:	4798      	blx	r3
}
 8009518:	bf00      	nop
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20005468 	.word	0x20005468

08009524 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800952c:	f107 0308 	add.w	r3, r7, #8
 8009530:	4618      	mov	r0, r3
 8009532:	f000 f857 	bl	80095e4 <prvGetNextExpireTime>
 8009536:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	4619      	mov	r1, r3
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f000 f803 	bl	8009548 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009542:	f000 f8d5 	bl	80096f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009546:	e7f1      	b.n	800952c <prvTimerTask+0x8>

08009548 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009552:	f7ff fa39 	bl	80089c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009556:	f107 0308 	add.w	r3, r7, #8
 800955a:	4618      	mov	r0, r3
 800955c:	f000 f866 	bl	800962c <prvSampleTimeNow>
 8009560:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d130      	bne.n	80095ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10a      	bne.n	8009584 <prvProcessTimerOrBlockTask+0x3c>
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	429a      	cmp	r2, r3
 8009574:	d806      	bhi.n	8009584 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009576:	f7ff fa35 	bl	80089e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800957a:	68f9      	ldr	r1, [r7, #12]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7ff ff85 	bl	800948c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009582:	e024      	b.n	80095ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d008      	beq.n	800959c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800958a:	4b13      	ldr	r3, [pc, #76]	; (80095d8 <prvProcessTimerOrBlockTask+0x90>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <prvProcessTimerOrBlockTask+0x50>
 8009594:	2301      	movs	r3, #1
 8009596:	e000      	b.n	800959a <prvProcessTimerOrBlockTask+0x52>
 8009598:	2300      	movs	r3, #0
 800959a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800959c:	4b0f      	ldr	r3, [pc, #60]	; (80095dc <prvProcessTimerOrBlockTask+0x94>)
 800959e:	6818      	ldr	r0, [r3, #0]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	4619      	mov	r1, r3
 80095aa:	f7fe ff7d 	bl	80084a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80095ae:	f7ff fa19 	bl	80089e4 <xTaskResumeAll>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80095b8:	4b09      	ldr	r3, [pc, #36]	; (80095e0 <prvProcessTimerOrBlockTask+0x98>)
 80095ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	f3bf 8f6f 	isb	sy
}
 80095c8:	e001      	b.n	80095ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80095ca:	f7ff fa0b 	bl	80089e4 <xTaskResumeAll>
}
 80095ce:	bf00      	nop
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	2000546c 	.word	0x2000546c
 80095dc:	20005470 	.word	0x20005470
 80095e0:	e000ed04 	.word	0xe000ed04

080095e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095ec:	4b0e      	ldr	r3, [pc, #56]	; (8009628 <prvGetNextExpireTime+0x44>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <prvGetNextExpireTime+0x16>
 80095f6:	2201      	movs	r2, #1
 80095f8:	e000      	b.n	80095fc <prvGetNextExpireTime+0x18>
 80095fa:	2200      	movs	r2, #0
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d105      	bne.n	8009614 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009608:	4b07      	ldr	r3, [pc, #28]	; (8009628 <prvGetNextExpireTime+0x44>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	60fb      	str	r3, [r7, #12]
 8009612:	e001      	b.n	8009618 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009614:	2300      	movs	r3, #0
 8009616:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009618:	68fb      	ldr	r3, [r7, #12]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	20005468 	.word	0x20005468

0800962c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009634:	f7ff fa74 	bl	8008b20 <xTaskGetTickCount>
 8009638:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800963a:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <prvSampleTimeNow+0x3c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	429a      	cmp	r2, r3
 8009642:	d205      	bcs.n	8009650 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009644:	f000 f936 	bl	80098b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	e002      	b.n	8009656 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009656:	4a04      	ldr	r2, [pc, #16]	; (8009668 <prvSampleTimeNow+0x3c>)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800965c:	68fb      	ldr	r3, [r7, #12]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20005478 	.word	0x20005478

0800966c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800967a:	2300      	movs	r3, #0
 800967c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	429a      	cmp	r2, r3
 8009690:	d812      	bhi.n	80096b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	1ad2      	subs	r2, r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	429a      	cmp	r2, r3
 800969e:	d302      	bcc.n	80096a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80096a0:	2301      	movs	r3, #1
 80096a2:	617b      	str	r3, [r7, #20]
 80096a4:	e01b      	b.n	80096de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80096a6:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <prvInsertTimerInActiveList+0x7c>)
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3304      	adds	r3, #4
 80096ae:	4619      	mov	r1, r3
 80096b0:	4610      	mov	r0, r2
 80096b2:	f7fe f8ec 	bl	800788e <vListInsert>
 80096b6:	e012      	b.n	80096de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d206      	bcs.n	80096ce <prvInsertTimerInActiveList+0x62>
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d302      	bcc.n	80096ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80096c8:	2301      	movs	r3, #1
 80096ca:	617b      	str	r3, [r7, #20]
 80096cc:	e007      	b.n	80096de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096ce:	4b07      	ldr	r3, [pc, #28]	; (80096ec <prvInsertTimerInActiveList+0x80>)
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3304      	adds	r3, #4
 80096d6:	4619      	mov	r1, r3
 80096d8:	4610      	mov	r0, r2
 80096da:	f7fe f8d8 	bl	800788e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80096de:	697b      	ldr	r3, [r7, #20]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	2000546c 	.word	0x2000546c
 80096ec:	20005468 	.word	0x20005468

080096f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08e      	sub	sp, #56	; 0x38
 80096f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096f6:	e0ca      	b.n	800988e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	da18      	bge.n	8009730 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80096fe:	1d3b      	adds	r3, r7, #4
 8009700:	3304      	adds	r3, #4
 8009702:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	61fb      	str	r3, [r7, #28]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009726:	6850      	ldr	r0, [r2, #4]
 8009728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800972a:	6892      	ldr	r2, [r2, #8]
 800972c:	4611      	mov	r1, r2
 800972e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	f2c0 80aa 	blt.w	800988c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d004      	beq.n	800974e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	3304      	adds	r3, #4
 8009748:	4618      	mov	r0, r3
 800974a:	f7fe f8d9 	bl	8007900 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800974e:	463b      	mov	r3, r7
 8009750:	4618      	mov	r0, r3
 8009752:	f7ff ff6b 	bl	800962c <prvSampleTimeNow>
 8009756:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b09      	cmp	r3, #9
 800975c:	f200 8097 	bhi.w	800988e <prvProcessReceivedCommands+0x19e>
 8009760:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <prvProcessReceivedCommands+0x78>)
 8009762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009766:	bf00      	nop
 8009768:	08009791 	.word	0x08009791
 800976c:	08009791 	.word	0x08009791
 8009770:	08009791 	.word	0x08009791
 8009774:	08009805 	.word	0x08009805
 8009778:	08009819 	.word	0x08009819
 800977c:	08009863 	.word	0x08009863
 8009780:	08009791 	.word	0x08009791
 8009784:	08009791 	.word	0x08009791
 8009788:	08009805 	.word	0x08009805
 800978c:	08009819 	.word	0x08009819
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009796:	f043 0301 	orr.w	r3, r3, #1
 800979a:	b2da      	uxtb	r2, r3
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	18d1      	adds	r1, r2, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097b0:	f7ff ff5c 	bl	800966c <prvInsertTimerInActiveList>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d069      	beq.n	800988e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d05e      	beq.n	800988e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	441a      	add	r2, r3
 80097d8:	2300      	movs	r3, #0
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	2300      	movs	r3, #0
 80097de:	2100      	movs	r1, #0
 80097e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e2:	f7ff fe05 	bl	80093f0 <xTimerGenericCommand>
 80097e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d14f      	bne.n	800988e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	61bb      	str	r3, [r7, #24]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800980a:	f023 0301 	bic.w	r3, r3, #1
 800980e:	b2da      	uxtb	r2, r3
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009816:	e03a      	b.n	800988e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800981e:	f043 0301 	orr.w	r3, r3, #1
 8009822:	b2da      	uxtb	r2, r3
 8009824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	617b      	str	r3, [r7, #20]
}
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800984e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009850:	699a      	ldr	r2, [r3, #24]
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	18d1      	adds	r1, r2, r3
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800985c:	f7ff ff06 	bl	800966c <prvInsertTimerInActiveList>
					break;
 8009860:	e015      	b.n	800988e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009868:	f003 0302 	and.w	r3, r3, #2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d103      	bne.n	8009878 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009872:	f000 fbb5 	bl	8009fe0 <vPortFree>
 8009876:	e00a      	b.n	800988e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800987e:	f023 0301 	bic.w	r3, r3, #1
 8009882:	b2da      	uxtb	r2, r3
 8009884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800988a:	e000      	b.n	800988e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800988c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800988e:	4b08      	ldr	r3, [pc, #32]	; (80098b0 <prvProcessReceivedCommands+0x1c0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	1d39      	adds	r1, r7, #4
 8009894:	2200      	movs	r2, #0
 8009896:	4618      	mov	r0, r3
 8009898:	f7fe fb9e 	bl	8007fd8 <xQueueReceive>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f47f af2a 	bne.w	80096f8 <prvProcessReceivedCommands+0x8>
	}
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop
 80098a8:	3730      	adds	r7, #48	; 0x30
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	20005470 	.word	0x20005470

080098b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098ba:	e048      	b.n	800994e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098bc:	4b2d      	ldr	r3, [pc, #180]	; (8009974 <prvSwitchTimerLists+0xc0>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c6:	4b2b      	ldr	r3, [pc, #172]	; (8009974 <prvSwitchTimerLists+0xc0>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	3304      	adds	r3, #4
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fe f813 	bl	8007900 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098e8:	f003 0304 	and.w	r3, r3, #4
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d02e      	beq.n	800994e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	4413      	add	r3, r2
 80098f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d90e      	bls.n	8009920 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800990e:	4b19      	ldr	r3, [pc, #100]	; (8009974 <prvSwitchTimerLists+0xc0>)
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3304      	adds	r3, #4
 8009916:	4619      	mov	r1, r3
 8009918:	4610      	mov	r0, r2
 800991a:	f7fd ffb8 	bl	800788e <vListInsert>
 800991e:	e016      	b.n	800994e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009920:	2300      	movs	r3, #0
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	2300      	movs	r3, #0
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	2100      	movs	r1, #0
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f7ff fd60 	bl	80093f0 <xTimerGenericCommand>
 8009930:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10a      	bne.n	800994e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	603b      	str	r3, [r7, #0]
}
 800994a:	bf00      	nop
 800994c:	e7fe      	b.n	800994c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800994e:	4b09      	ldr	r3, [pc, #36]	; (8009974 <prvSwitchTimerLists+0xc0>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1b1      	bne.n	80098bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009958:	4b06      	ldr	r3, [pc, #24]	; (8009974 <prvSwitchTimerLists+0xc0>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800995e:	4b06      	ldr	r3, [pc, #24]	; (8009978 <prvSwitchTimerLists+0xc4>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a04      	ldr	r2, [pc, #16]	; (8009974 <prvSwitchTimerLists+0xc0>)
 8009964:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009966:	4a04      	ldr	r2, [pc, #16]	; (8009978 <prvSwitchTimerLists+0xc4>)
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	6013      	str	r3, [r2, #0]
}
 800996c:	bf00      	nop
 800996e:	3718      	adds	r7, #24
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	20005468 	.word	0x20005468
 8009978:	2000546c 	.word	0x2000546c

0800997c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009982:	f000 f967 	bl	8009c54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009986:	4b15      	ldr	r3, [pc, #84]	; (80099dc <prvCheckForValidListAndQueue+0x60>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d120      	bne.n	80099d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800998e:	4814      	ldr	r0, [pc, #80]	; (80099e0 <prvCheckForValidListAndQueue+0x64>)
 8009990:	f7fd ff2c 	bl	80077ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009994:	4813      	ldr	r0, [pc, #76]	; (80099e4 <prvCheckForValidListAndQueue+0x68>)
 8009996:	f7fd ff29 	bl	80077ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800999a:	4b13      	ldr	r3, [pc, #76]	; (80099e8 <prvCheckForValidListAndQueue+0x6c>)
 800999c:	4a10      	ldr	r2, [pc, #64]	; (80099e0 <prvCheckForValidListAndQueue+0x64>)
 800999e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099a0:	4b12      	ldr	r3, [pc, #72]	; (80099ec <prvCheckForValidListAndQueue+0x70>)
 80099a2:	4a10      	ldr	r2, [pc, #64]	; (80099e4 <prvCheckForValidListAndQueue+0x68>)
 80099a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099a6:	2300      	movs	r3, #0
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	4b11      	ldr	r3, [pc, #68]	; (80099f0 <prvCheckForValidListAndQueue+0x74>)
 80099ac:	4a11      	ldr	r2, [pc, #68]	; (80099f4 <prvCheckForValidListAndQueue+0x78>)
 80099ae:	2110      	movs	r1, #16
 80099b0:	200a      	movs	r0, #10
 80099b2:	f7fe f837 	bl	8007a24 <xQueueGenericCreateStatic>
 80099b6:	4603      	mov	r3, r0
 80099b8:	4a08      	ldr	r2, [pc, #32]	; (80099dc <prvCheckForValidListAndQueue+0x60>)
 80099ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099bc:	4b07      	ldr	r3, [pc, #28]	; (80099dc <prvCheckForValidListAndQueue+0x60>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d005      	beq.n	80099d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099c4:	4b05      	ldr	r3, [pc, #20]	; (80099dc <prvCheckForValidListAndQueue+0x60>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	490b      	ldr	r1, [pc, #44]	; (80099f8 <prvCheckForValidListAndQueue+0x7c>)
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe fd18 	bl	8008400 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099d0:	f000 f970 	bl	8009cb4 <vPortExitCritical>
}
 80099d4:	bf00      	nop
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	20005470 	.word	0x20005470
 80099e0:	20005440 	.word	0x20005440
 80099e4:	20005454 	.word	0x20005454
 80099e8:	20005468 	.word	0x20005468
 80099ec:	2000546c 	.word	0x2000546c
 80099f0:	2000551c 	.word	0x2000551c
 80099f4:	2000547c 	.word	0x2000547c
 80099f8:	0800b360 	.word	0x0800b360

080099fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	3b04      	subs	r3, #4
 8009a0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3b04      	subs	r3, #4
 8009a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f023 0201 	bic.w	r2, r3, #1
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	3b04      	subs	r3, #4
 8009a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a2c:	4a0c      	ldr	r2, [pc, #48]	; (8009a60 <pxPortInitialiseStack+0x64>)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	3b14      	subs	r3, #20
 8009a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3b04      	subs	r3, #4
 8009a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f06f 0202 	mvn.w	r2, #2
 8009a4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	3b20      	subs	r3, #32
 8009a50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a52:	68fb      	ldr	r3, [r7, #12]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	08009a65 	.word	0x08009a65

08009a64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a6e:	4b12      	ldr	r3, [pc, #72]	; (8009ab8 <prvTaskExitError+0x54>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a76:	d00a      	beq.n	8009a8e <prvTaskExitError+0x2a>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	60fb      	str	r3, [r7, #12]
}
 8009a8a:	bf00      	nop
 8009a8c:	e7fe      	b.n	8009a8c <prvTaskExitError+0x28>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	60bb      	str	r3, [r7, #8]
}
 8009aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009aa2:	bf00      	nop
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0fc      	beq.n	8009aa4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009aaa:	bf00      	nop
 8009aac:	bf00      	nop
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	20000060 	.word	0x20000060
 8009abc:	00000000 	.word	0x00000000

08009ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ac0:	4b07      	ldr	r3, [pc, #28]	; (8009ae0 <pxCurrentTCBConst2>)
 8009ac2:	6819      	ldr	r1, [r3, #0]
 8009ac4:	6808      	ldr	r0, [r1, #0]
 8009ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aca:	f380 8809 	msr	PSP, r0
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f04f 0000 	mov.w	r0, #0
 8009ad6:	f380 8811 	msr	BASEPRI, r0
 8009ada:	4770      	bx	lr
 8009adc:	f3af 8000 	nop.w

08009ae0 <pxCurrentTCBConst2>:
 8009ae0:	20004f40 	.word	0x20004f40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop

08009ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ae8:	4808      	ldr	r0, [pc, #32]	; (8009b0c <prvPortStartFirstTask+0x24>)
 8009aea:	6800      	ldr	r0, [r0, #0]
 8009aec:	6800      	ldr	r0, [r0, #0]
 8009aee:	f380 8808 	msr	MSP, r0
 8009af2:	f04f 0000 	mov.w	r0, #0
 8009af6:	f380 8814 	msr	CONTROL, r0
 8009afa:	b662      	cpsie	i
 8009afc:	b661      	cpsie	f
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	df00      	svc	0
 8009b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b0a:	bf00      	nop
 8009b0c:	e000ed08 	.word	0xe000ed08

08009b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b16:	4b46      	ldr	r3, [pc, #280]	; (8009c30 <xPortStartScheduler+0x120>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a46      	ldr	r2, [pc, #280]	; (8009c34 <xPortStartScheduler+0x124>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d10a      	bne.n	8009b36 <xPortStartScheduler+0x26>
	__asm volatile
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	613b      	str	r3, [r7, #16]
}
 8009b32:	bf00      	nop
 8009b34:	e7fe      	b.n	8009b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b36:	4b3e      	ldr	r3, [pc, #248]	; (8009c30 <xPortStartScheduler+0x120>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a3f      	ldr	r2, [pc, #252]	; (8009c38 <xPortStartScheduler+0x128>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d10a      	bne.n	8009b56 <xPortStartScheduler+0x46>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	60fb      	str	r3, [r7, #12]
}
 8009b52:	bf00      	nop
 8009b54:	e7fe      	b.n	8009b54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b56:	4b39      	ldr	r3, [pc, #228]	; (8009c3c <xPortStartScheduler+0x12c>)
 8009b58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	22ff      	movs	r2, #255	; 0xff
 8009b66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	4b31      	ldr	r3, [pc, #196]	; (8009c40 <xPortStartScheduler+0x130>)
 8009b7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b7e:	4b31      	ldr	r3, [pc, #196]	; (8009c44 <xPortStartScheduler+0x134>)
 8009b80:	2207      	movs	r2, #7
 8009b82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b84:	e009      	b.n	8009b9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009b86:	4b2f      	ldr	r3, [pc, #188]	; (8009c44 <xPortStartScheduler+0x134>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	4a2d      	ldr	r2, [pc, #180]	; (8009c44 <xPortStartScheduler+0x134>)
 8009b8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b90:	78fb      	ldrb	r3, [r7, #3]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	005b      	lsls	r3, r3, #1
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b9a:	78fb      	ldrb	r3, [r7, #3]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ba2:	2b80      	cmp	r3, #128	; 0x80
 8009ba4:	d0ef      	beq.n	8009b86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ba6:	4b27      	ldr	r3, [pc, #156]	; (8009c44 <xPortStartScheduler+0x134>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f1c3 0307 	rsb	r3, r3, #7
 8009bae:	2b04      	cmp	r3, #4
 8009bb0:	d00a      	beq.n	8009bc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	60bb      	str	r3, [r7, #8]
}
 8009bc4:	bf00      	nop
 8009bc6:	e7fe      	b.n	8009bc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009bc8:	4b1e      	ldr	r3, [pc, #120]	; (8009c44 <xPortStartScheduler+0x134>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	021b      	lsls	r3, r3, #8
 8009bce:	4a1d      	ldr	r2, [pc, #116]	; (8009c44 <xPortStartScheduler+0x134>)
 8009bd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009bd2:	4b1c      	ldr	r3, [pc, #112]	; (8009c44 <xPortStartScheduler+0x134>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009bda:	4a1a      	ldr	r2, [pc, #104]	; (8009c44 <xPortStartScheduler+0x134>)
 8009bdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	b2da      	uxtb	r2, r3
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009be6:	4b18      	ldr	r3, [pc, #96]	; (8009c48 <xPortStartScheduler+0x138>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a17      	ldr	r2, [pc, #92]	; (8009c48 <xPortStartScheduler+0x138>)
 8009bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009bf2:	4b15      	ldr	r3, [pc, #84]	; (8009c48 <xPortStartScheduler+0x138>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a14      	ldr	r2, [pc, #80]	; (8009c48 <xPortStartScheduler+0x138>)
 8009bf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009bfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009bfe:	f000 f8dd 	bl	8009dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c02:	4b12      	ldr	r3, [pc, #72]	; (8009c4c <xPortStartScheduler+0x13c>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c08:	f000 f8fc 	bl	8009e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c0c:	4b10      	ldr	r3, [pc, #64]	; (8009c50 <xPortStartScheduler+0x140>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a0f      	ldr	r2, [pc, #60]	; (8009c50 <xPortStartScheduler+0x140>)
 8009c12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c18:	f7ff ff66 	bl	8009ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c1c:	f7ff f84a 	bl	8008cb4 <vTaskSwitchContext>
	prvTaskExitError();
 8009c20:	f7ff ff20 	bl	8009a64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	e000ed00 	.word	0xe000ed00
 8009c34:	410fc271 	.word	0x410fc271
 8009c38:	410fc270 	.word	0x410fc270
 8009c3c:	e000e400 	.word	0xe000e400
 8009c40:	2000556c 	.word	0x2000556c
 8009c44:	20005570 	.word	0x20005570
 8009c48:	e000ed20 	.word	0xe000ed20
 8009c4c:	20000060 	.word	0x20000060
 8009c50:	e000ef34 	.word	0xe000ef34

08009c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	607b      	str	r3, [r7, #4]
}
 8009c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c6e:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <vPortEnterCritical+0x58>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3301      	adds	r3, #1
 8009c74:	4a0d      	ldr	r2, [pc, #52]	; (8009cac <vPortEnterCritical+0x58>)
 8009c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c78:	4b0c      	ldr	r3, [pc, #48]	; (8009cac <vPortEnterCritical+0x58>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d10f      	bne.n	8009ca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c80:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <vPortEnterCritical+0x5c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00a      	beq.n	8009ca0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	603b      	str	r3, [r7, #0]
}
 8009c9c:	bf00      	nop
 8009c9e:	e7fe      	b.n	8009c9e <vPortEnterCritical+0x4a>
	}
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	20000060 	.word	0x20000060
 8009cb0:	e000ed04 	.word	0xe000ed04

08009cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009cba:	4b12      	ldr	r3, [pc, #72]	; (8009d04 <vPortExitCritical+0x50>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <vPortExitCritical+0x24>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	607b      	str	r3, [r7, #4]
}
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009cd8:	4b0a      	ldr	r3, [pc, #40]	; (8009d04 <vPortExitCritical+0x50>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	4a09      	ldr	r2, [pc, #36]	; (8009d04 <vPortExitCritical+0x50>)
 8009ce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ce2:	4b08      	ldr	r3, [pc, #32]	; (8009d04 <vPortExitCritical+0x50>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d105      	bne.n	8009cf6 <vPortExitCritical+0x42>
 8009cea:	2300      	movs	r3, #0
 8009cec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	f383 8811 	msr	BASEPRI, r3
}
 8009cf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	20000060 	.word	0x20000060
	...

08009d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d10:	f3ef 8009 	mrs	r0, PSP
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	4b15      	ldr	r3, [pc, #84]	; (8009d70 <pxCurrentTCBConst>)
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	f01e 0f10 	tst.w	lr, #16
 8009d20:	bf08      	it	eq
 8009d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2a:	6010      	str	r0, [r2, #0]
 8009d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d34:	f380 8811 	msr	BASEPRI, r0
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f7fe ffb8 	bl	8008cb4 <vTaskSwitchContext>
 8009d44:	f04f 0000 	mov.w	r0, #0
 8009d48:	f380 8811 	msr	BASEPRI, r0
 8009d4c:	bc09      	pop	{r0, r3}
 8009d4e:	6819      	ldr	r1, [r3, #0]
 8009d50:	6808      	ldr	r0, [r1, #0]
 8009d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d56:	f01e 0f10 	tst.w	lr, #16
 8009d5a:	bf08      	it	eq
 8009d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d60:	f380 8809 	msr	PSP, r0
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	f3af 8000 	nop.w

08009d70 <pxCurrentTCBConst>:
 8009d70:	20004f40 	.word	0x20004f40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop

08009d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	607b      	str	r3, [r7, #4]
}
 8009d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d92:	f7fe fed5 	bl	8008b40 <xTaskIncrementTick>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d9c:	4b06      	ldr	r3, [pc, #24]	; (8009db8 <xPortSysTickHandler+0x40>)
 8009d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	2300      	movs	r3, #0
 8009da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	f383 8811 	msr	BASEPRI, r3
}
 8009dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009db0:	bf00      	nop
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009dc0:	4b0b      	ldr	r3, [pc, #44]	; (8009df0 <vPortSetupTimerInterrupt+0x34>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009dc6:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <vPortSetupTimerInterrupt+0x38>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dcc:	4b0a      	ldr	r3, [pc, #40]	; (8009df8 <vPortSetupTimerInterrupt+0x3c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a0a      	ldr	r2, [pc, #40]	; (8009dfc <vPortSetupTimerInterrupt+0x40>)
 8009dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd6:	099b      	lsrs	r3, r3, #6
 8009dd8:	4a09      	ldr	r2, [pc, #36]	; (8009e00 <vPortSetupTimerInterrupt+0x44>)
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009dde:	4b04      	ldr	r3, [pc, #16]	; (8009df0 <vPortSetupTimerInterrupt+0x34>)
 8009de0:	2207      	movs	r2, #7
 8009de2:	601a      	str	r2, [r3, #0]
}
 8009de4:	bf00      	nop
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	e000e010 	.word	0xe000e010
 8009df4:	e000e018 	.word	0xe000e018
 8009df8:	20000044 	.word	0x20000044
 8009dfc:	10624dd3 	.word	0x10624dd3
 8009e00:	e000e014 	.word	0xe000e014

08009e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e14 <vPortEnableVFP+0x10>
 8009e08:	6801      	ldr	r1, [r0, #0]
 8009e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e0e:	6001      	str	r1, [r0, #0]
 8009e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e12:	bf00      	nop
 8009e14:	e000ed88 	.word	0xe000ed88

08009e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e1e:	f3ef 8305 	mrs	r3, IPSR
 8009e22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2b0f      	cmp	r3, #15
 8009e28:	d914      	bls.n	8009e54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e2a:	4a17      	ldr	r2, [pc, #92]	; (8009e88 <vPortValidateInterruptPriority+0x70>)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4413      	add	r3, r2
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e34:	4b15      	ldr	r3, [pc, #84]	; (8009e8c <vPortValidateInterruptPriority+0x74>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	7afa      	ldrb	r2, [r7, #11]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d20a      	bcs.n	8009e54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	607b      	str	r3, [r7, #4]
}
 8009e50:	bf00      	nop
 8009e52:	e7fe      	b.n	8009e52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e54:	4b0e      	ldr	r3, [pc, #56]	; (8009e90 <vPortValidateInterruptPriority+0x78>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e5c:	4b0d      	ldr	r3, [pc, #52]	; (8009e94 <vPortValidateInterruptPriority+0x7c>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d90a      	bls.n	8009e7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	603b      	str	r3, [r7, #0]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <vPortValidateInterruptPriority+0x60>
	}
 8009e7a:	bf00      	nop
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	e000e3f0 	.word	0xe000e3f0
 8009e8c:	2000556c 	.word	0x2000556c
 8009e90:	e000ed0c 	.word	0xe000ed0c
 8009e94:	20005570 	.word	0x20005570

08009e98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b088      	sub	sp, #32
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8009ea4:	4b48      	ldr	r3, [pc, #288]	; (8009fc8 <pvPortMalloc+0x130>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10a      	bne.n	8009ec2 <pvPortMalloc+0x2a>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	60fb      	str	r3, [r7, #12]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 8009ec2:	f7fe fd81 	bl	80089c8 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ec6:	4b41      	ldr	r3, [pc, #260]	; (8009fcc <pvPortMalloc+0x134>)
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4013      	ands	r3, r2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d172      	bne.n	8009fb8 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00d      	beq.n	8009ef4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8009ed8:	2208      	movs	r2, #8
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4413      	add	r3, r2
 8009ede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f003 0307 	and.w	r3, r3, #7
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d004      	beq.n	8009ef4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f023 0307 	bic.w	r3, r3, #7
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d05e      	beq.n	8009fb8 <pvPortMalloc+0x120>
 8009efa:	4b35      	ldr	r3, [pc, #212]	; (8009fd0 <pvPortMalloc+0x138>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d859      	bhi.n	8009fb8 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f04:	4b33      	ldr	r3, [pc, #204]	; (8009fd4 <pvPortMalloc+0x13c>)
 8009f06:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 8009f08:	4b32      	ldr	r3, [pc, #200]	; (8009fd4 <pvPortMalloc+0x13c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f0e:	e004      	b.n	8009f1a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d903      	bls.n	8009f2c <pvPortMalloc+0x94>
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1f1      	bne.n	8009f10 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f2c:	4b26      	ldr	r3, [pc, #152]	; (8009fc8 <pvPortMalloc+0x130>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	69fa      	ldr	r2, [r7, #28]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d040      	beq.n	8009fb8 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2208      	movs	r2, #8
 8009f3c:	4413      	add	r3, r2
 8009f3e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	1ad2      	subs	r2, r2, r3
 8009f50:	2308      	movs	r3, #8
 8009f52:	005b      	lsls	r3, r3, #1
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d90f      	bls.n	8009f78 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f58:	69fa      	ldr	r2, [r7, #28]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	685a      	ldr	r2, [r3, #4]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	1ad2      	subs	r2, r2, r3
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8009f72:	6938      	ldr	r0, [r7, #16]
 8009f74:	f000 f8a2 	bl	800a0bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f78:	4b15      	ldr	r3, [pc, #84]	; (8009fd0 <pvPortMalloc+0x138>)
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	4a13      	ldr	r2, [pc, #76]	; (8009fd0 <pvPortMalloc+0x138>)
 8009f84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f86:	4b12      	ldr	r3, [pc, #72]	; (8009fd0 <pvPortMalloc+0x138>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	4b13      	ldr	r3, [pc, #76]	; (8009fd8 <pvPortMalloc+0x140>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d203      	bcs.n	8009f9a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f92:	4b0f      	ldr	r3, [pc, #60]	; (8009fd0 <pvPortMalloc+0x138>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a10      	ldr	r2, [pc, #64]	; (8009fd8 <pvPortMalloc+0x140>)
 8009f98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	4b0b      	ldr	r3, [pc, #44]	; (8009fcc <pvPortMalloc+0x134>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	431a      	orrs	r2, r3
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009fae:	4b0b      	ldr	r3, [pc, #44]	; (8009fdc <pvPortMalloc+0x144>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	4a09      	ldr	r2, [pc, #36]	; (8009fdc <pvPortMalloc+0x144>)
 8009fb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009fb8:	f7fe fd14 	bl	80089e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 8009fbc:	697b      	ldr	r3, [r7, #20]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3720      	adds	r7, #32
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	2000557c 	.word	0x2000557c
 8009fcc:	20005590 	.word	0x20005590
 8009fd0:	20005580 	.word	0x20005580
 8009fd4:	20005574 	.word	0x20005574
 8009fd8:	20005584 	.word	0x20005584
 8009fdc:	20005588 	.word	0x20005588

08009fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d04d      	beq.n	800a08e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ff2:	2308      	movs	r3, #8
 8009ff4:	425b      	negs	r3, r3
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	4b24      	ldr	r3, [pc, #144]	; (800a098 <vPortFree+0xb8>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4013      	ands	r3, r2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10a      	bne.n	800a024 <vPortFree+0x44>
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	60fb      	str	r3, [r7, #12]
}
 800a020:	bf00      	nop
 800a022:	e7fe      	b.n	800a022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00a      	beq.n	800a042 <vPortFree+0x62>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	60bb      	str	r3, [r7, #8]
}
 800a03e:	bf00      	nop
 800a040:	e7fe      	b.n	800a040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	4b14      	ldr	r3, [pc, #80]	; (800a098 <vPortFree+0xb8>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4013      	ands	r3, r2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d01e      	beq.n	800a08e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d11a      	bne.n	800a08e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	4b0e      	ldr	r3, [pc, #56]	; (800a098 <vPortFree+0xb8>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	43db      	mvns	r3, r3
 800a062:	401a      	ands	r2, r3
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a068:	f7fe fcae 	bl	80089c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	685a      	ldr	r2, [r3, #4]
 800a070:	4b0a      	ldr	r3, [pc, #40]	; (800a09c <vPortFree+0xbc>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4413      	add	r3, r2
 800a076:	4a09      	ldr	r2, [pc, #36]	; (800a09c <vPortFree+0xbc>)
 800a078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a07a:	6938      	ldr	r0, [r7, #16]
 800a07c:	f000 f81e 	bl	800a0bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a080:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <vPortFree+0xc0>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	3301      	adds	r3, #1
 800a086:	4a06      	ldr	r2, [pc, #24]	; (800a0a0 <vPortFree+0xc0>)
 800a088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a08a:	f7fe fcab 	bl	80089e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a08e:	bf00      	nop
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20005590 	.word	0x20005590
 800a09c:	20005580 	.word	0x20005580
 800a0a0:	2000558c 	.word	0x2000558c

0800a0a4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800a0a8:	4b03      	ldr	r3, [pc, #12]	; (800a0b8 <xPortGetFreeHeapSize+0x14>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	20005580 	.word	0x20005580

0800a0bc <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0c4:	4b28      	ldr	r3, [pc, #160]	; (800a168 <prvInsertBlockIntoFreeList+0xac>)
 800a0c6:	60fb      	str	r3, [r7, #12]
 800a0c8:	e002      	b.n	800a0d0 <prvInsertBlockIntoFreeList+0x14>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d8f7      	bhi.n	800a0ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d108      	bne.n	800a0fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	685a      	ldr	r2, [r3, #4]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	441a      	add	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	441a      	add	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d118      	bne.n	800a144 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	4b15      	ldr	r3, [pc, #84]	; (800a16c <prvInsertBlockIntoFreeList+0xb0>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d00d      	beq.n	800a13a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	441a      	add	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	601a      	str	r2, [r3, #0]
 800a138:	e008      	b.n	800a14c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a13a:	4b0c      	ldr	r3, [pc, #48]	; (800a16c <prvInsertBlockIntoFreeList+0xb0>)
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	e003      	b.n	800a14c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	429a      	cmp	r2, r3
 800a152:	d002      	beq.n	800a15a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a15a:	bf00      	nop
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	20005574 	.word	0x20005574
 800a16c:	2000557c 	.word	0x2000557c

0800a170 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800a170:	b480      	push	{r7}
 800a172:	b08f      	sub	sp, #60	; 0x3c
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800a178:	2300      	movs	r3, #0
 800a17a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800a184:	4b5a      	ldr	r3, [pc, #360]	; (800a2f0 <vPortDefineHeapRegions+0x180>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00a      	beq.n	800a1a2 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	617b      	str	r3, [r7, #20]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	00db      	lsls	r3, r3, #3
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800a1ac:	e07d      	b.n	800a2aa <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	f003 0307 	and.w	r3, r3, #7
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00e      	beq.n	800a1e2 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	3307      	adds	r3, #7
 800a1c8:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	f023 0307 	bic.w	r3, r3, #7
 800a1d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1de:	4413      	add	r3, r2
 800a1e0:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d106      	bne.n	800a1fa <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	4a41      	ldr	r2, [pc, #260]	; (800a2f4 <vPortDefineHeapRegions+0x184>)
 800a1f0:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800a1f2:	4b40      	ldr	r3, [pc, #256]	; (800a2f4 <vPortDefineHeapRegions+0x184>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	605a      	str	r2, [r3, #4]
 800a1f8:	e01f      	b.n	800a23a <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800a1fa:	4b3d      	ldr	r3, [pc, #244]	; (800a2f0 <vPortDefineHeapRegions+0x180>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10a      	bne.n	800a218 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	613b      	str	r3, [r7, #16]
}
 800a214:	bf00      	nop
 800a216:	e7fe      	b.n	800a216 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800a218:	4b35      	ldr	r3, [pc, #212]	; (800a2f0 <vPortDefineHeapRegions+0x180>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	461a      	mov	r2, r3
 800a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a220:	4293      	cmp	r3, r2
 800a222:	d80a      	bhi.n	800a23a <vPortDefineHeapRegions+0xca>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	60fb      	str	r3, [r7, #12]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800a23a:	4b2d      	ldr	r3, [pc, #180]	; (800a2f0 <vPortDefineHeapRegions+0x180>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800a240:	69fa      	ldr	r2, [r7, #28]
 800a242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a244:	4413      	add	r3, r2
 800a246:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800a248:	2208      	movs	r2, #8
 800a24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24c:	1a9b      	subs	r3, r3, r2
 800a24e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	f023 0307 	bic.w	r3, r3, #7
 800a256:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800a258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25a:	4a25      	ldr	r2, [pc, #148]	; (800a2f0 <vPortDefineHeapRegions+0x180>)
 800a25c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800a25e:	4b24      	ldr	r3, [pc, #144]	; (800a2f0 <vPortDefineHeapRegions+0x180>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2200      	movs	r2, #0
 800a264:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800a266:	4b22      	ldr	r3, [pc, #136]	; (800a2f0 <vPortDefineHeapRegions+0x180>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a276:	1ad2      	subs	r2, r2, r3
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800a27c:	4b1c      	ldr	r3, [pc, #112]	; (800a2f0 <vPortDefineHeapRegions+0x180>)
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	6a3b      	ldr	r3, [r7, #32]
 800a282:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d002      	beq.n	800a290 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	6a3a      	ldr	r2, [r7, #32]
 800a28e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a296:	4413      	add	r3, r2
 800a298:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800a29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29c:	3301      	adds	r3, #1
 800a29e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800a2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f47f af7d 	bne.w	800a1ae <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800a2b4:	4a10      	ldr	r2, [pc, #64]	; (800a2f8 <vPortDefineHeapRegions+0x188>)
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800a2ba:	4a10      	ldr	r2, [pc, #64]	; (800a2fc <vPortDefineHeapRegions+0x18c>)
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10a      	bne.n	800a2dc <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	60bb      	str	r3, [r7, #8]
}
 800a2d8:	bf00      	nop
 800a2da:	e7fe      	b.n	800a2da <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2dc:	4b08      	ldr	r3, [pc, #32]	; (800a300 <vPortDefineHeapRegions+0x190>)
 800a2de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a2e2:	601a      	str	r2, [r3, #0]
}
 800a2e4:	bf00      	nop
 800a2e6:	373c      	adds	r7, #60	; 0x3c
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	2000557c 	.word	0x2000557c
 800a2f4:	20005574 	.word	0x20005574
 800a2f8:	20005584 	.word	0x20005584
 800a2fc:	20005580 	.word	0x20005580
 800a300:	20005590 	.word	0x20005590

0800a304 <atol>:
 800a304:	220a      	movs	r2, #10
 800a306:	2100      	movs	r1, #0
 800a308:	f000 bb42 	b.w	800a990 <strtol>

0800a30c <calloc>:
 800a30c:	4b02      	ldr	r3, [pc, #8]	; (800a318 <calloc+0xc>)
 800a30e:	460a      	mov	r2, r1
 800a310:	4601      	mov	r1, r0
 800a312:	6818      	ldr	r0, [r3, #0]
 800a314:	f000 b8f8 	b.w	800a508 <_calloc_r>
 800a318:	20000064 	.word	0x20000064

0800a31c <__errno>:
 800a31c:	4b01      	ldr	r3, [pc, #4]	; (800a324 <__errno+0x8>)
 800a31e:	6818      	ldr	r0, [r3, #0]
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	20000064 	.word	0x20000064

0800a328 <gmtime_r>:
 800a328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a32c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800a330:	460c      	mov	r4, r1
 800a332:	4a4f      	ldr	r2, [pc, #316]	; (800a470 <gmtime_r+0x148>)
 800a334:	2300      	movs	r3, #0
 800a336:	4630      	mov	r0, r6
 800a338:	4639      	mov	r1, r7
 800a33a:	f7f6 faa7 	bl	800088c <__aeabi_ldivmod>
 800a33e:	4639      	mov	r1, r7
 800a340:	4605      	mov	r5, r0
 800a342:	4a4b      	ldr	r2, [pc, #300]	; (800a470 <gmtime_r+0x148>)
 800a344:	4630      	mov	r0, r6
 800a346:	2300      	movs	r3, #0
 800a348:	f7f6 faa0 	bl	800088c <__aeabi_ldivmod>
 800a34c:	2a00      	cmp	r2, #0
 800a34e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800a352:	bfb7      	itett	lt
 800a354:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800a358:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800a35c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800a360:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800a364:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800a368:	fbb2 f1f0 	udiv	r1, r2, r0
 800a36c:	fb00 2211 	mls	r2, r0, r1, r2
 800a370:	203c      	movs	r0, #60	; 0x3c
 800a372:	60a1      	str	r1, [r4, #8]
 800a374:	fbb2 f1f0 	udiv	r1, r2, r0
 800a378:	fb00 2211 	mls	r2, r0, r1, r2
 800a37c:	6061      	str	r1, [r4, #4]
 800a37e:	6022      	str	r2, [r4, #0]
 800a380:	2107      	movs	r1, #7
 800a382:	1cda      	adds	r2, r3, #3
 800a384:	fb92 f1f1 	sdiv	r1, r2, r1
 800a388:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a38c:	1a52      	subs	r2, r2, r1
 800a38e:	bf48      	it	mi
 800a390:	3207      	addmi	r2, #7
 800a392:	4d38      	ldr	r5, [pc, #224]	; (800a474 <gmtime_r+0x14c>)
 800a394:	4838      	ldr	r0, [pc, #224]	; (800a478 <gmtime_r+0x150>)
 800a396:	61a2      	str	r2, [r4, #24]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	bfb7      	itett	lt
 800a39c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800a3a0:	fb93 f5f5 	sdivge	r5, r3, r5
 800a3a4:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800a3a8:	fb92 f5f5 	sdivlt	r5, r2, r5
 800a3ac:	fb00 3005 	mla	r0, r0, r5, r3
 800a3b0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800a3b4:	fbb0 f2f2 	udiv	r2, r0, r2
 800a3b8:	4402      	add	r2, r0
 800a3ba:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800a3be:	fbb0 f1f3 	udiv	r1, r0, r3
 800a3c2:	1a52      	subs	r2, r2, r1
 800a3c4:	f240 1c6d 	movw	ip, #365	; 0x16d
 800a3c8:	492c      	ldr	r1, [pc, #176]	; (800a47c <gmtime_r+0x154>)
 800a3ca:	fbb0 f1f1 	udiv	r1, r0, r1
 800a3ce:	2764      	movs	r7, #100	; 0x64
 800a3d0:	1a52      	subs	r2, r2, r1
 800a3d2:	fbb2 f1fc 	udiv	r1, r2, ip
 800a3d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3da:	fbb1 f6f7 	udiv	r6, r1, r7
 800a3de:	1af3      	subs	r3, r6, r3
 800a3e0:	4403      	add	r3, r0
 800a3e2:	fb0c 3311 	mls	r3, ip, r1, r3
 800a3e6:	2299      	movs	r2, #153	; 0x99
 800a3e8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800a3ec:	f10e 0e02 	add.w	lr, lr, #2
 800a3f0:	f103 0c01 	add.w	ip, r3, #1
 800a3f4:	fbbe f0f2 	udiv	r0, lr, r2
 800a3f8:	4342      	muls	r2, r0
 800a3fa:	3202      	adds	r2, #2
 800a3fc:	f04f 0805 	mov.w	r8, #5
 800a400:	fbb2 f2f8 	udiv	r2, r2, r8
 800a404:	ebac 0c02 	sub.w	ip, ip, r2
 800a408:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800a40c:	4596      	cmp	lr, r2
 800a40e:	bf94      	ite	ls
 800a410:	2202      	movls	r2, #2
 800a412:	f06f 0209 	mvnhi.w	r2, #9
 800a416:	4410      	add	r0, r2
 800a418:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a41c:	fb02 1505 	mla	r5, r2, r5, r1
 800a420:	2801      	cmp	r0, #1
 800a422:	bf98      	it	ls
 800a424:	3501      	addls	r5, #1
 800a426:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a42a:	d30d      	bcc.n	800a448 <gmtime_r+0x120>
 800a42c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a430:	61e3      	str	r3, [r4, #28]
 800a432:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800a436:	2300      	movs	r3, #0
 800a438:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800a43c:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a440:	6223      	str	r3, [r4, #32]
 800a442:	4620      	mov	r0, r4
 800a444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a448:	078a      	lsls	r2, r1, #30
 800a44a:	d102      	bne.n	800a452 <gmtime_r+0x12a>
 800a44c:	fb07 1616 	mls	r6, r7, r6, r1
 800a450:	b95e      	cbnz	r6, 800a46a <gmtime_r+0x142>
 800a452:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a456:	fbb1 f6f2 	udiv	r6, r1, r2
 800a45a:	fb02 1216 	mls	r2, r2, r6, r1
 800a45e:	fab2 f282 	clz	r2, r2
 800a462:	0952      	lsrs	r2, r2, #5
 800a464:	333b      	adds	r3, #59	; 0x3b
 800a466:	4413      	add	r3, r2
 800a468:	e7e2      	b.n	800a430 <gmtime_r+0x108>
 800a46a:	2201      	movs	r2, #1
 800a46c:	e7fa      	b.n	800a464 <gmtime_r+0x13c>
 800a46e:	bf00      	nop
 800a470:	00015180 	.word	0x00015180
 800a474:	00023ab1 	.word	0x00023ab1
 800a478:	fffdc54f 	.word	0xfffdc54f
 800a47c:	00023ab0 	.word	0x00023ab0

0800a480 <__libc_init_array>:
 800a480:	b570      	push	{r4, r5, r6, lr}
 800a482:	4d0d      	ldr	r5, [pc, #52]	; (800a4b8 <__libc_init_array+0x38>)
 800a484:	4c0d      	ldr	r4, [pc, #52]	; (800a4bc <__libc_init_array+0x3c>)
 800a486:	1b64      	subs	r4, r4, r5
 800a488:	10a4      	asrs	r4, r4, #2
 800a48a:	2600      	movs	r6, #0
 800a48c:	42a6      	cmp	r6, r4
 800a48e:	d109      	bne.n	800a4a4 <__libc_init_array+0x24>
 800a490:	4d0b      	ldr	r5, [pc, #44]	; (800a4c0 <__libc_init_array+0x40>)
 800a492:	4c0c      	ldr	r4, [pc, #48]	; (800a4c4 <__libc_init_array+0x44>)
 800a494:	f000 fe0e 	bl	800b0b4 <_init>
 800a498:	1b64      	subs	r4, r4, r5
 800a49a:	10a4      	asrs	r4, r4, #2
 800a49c:	2600      	movs	r6, #0
 800a49e:	42a6      	cmp	r6, r4
 800a4a0:	d105      	bne.n	800a4ae <__libc_init_array+0x2e>
 800a4a2:	bd70      	pop	{r4, r5, r6, pc}
 800a4a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4a8:	4798      	blx	r3
 800a4aa:	3601      	adds	r6, #1
 800a4ac:	e7ee      	b.n	800a48c <__libc_init_array+0xc>
 800a4ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b2:	4798      	blx	r3
 800a4b4:	3601      	adds	r6, #1
 800a4b6:	e7f2      	b.n	800a49e <__libc_init_array+0x1e>
 800a4b8:	0800d61c 	.word	0x0800d61c
 800a4bc:	0800d61c 	.word	0x0800d61c
 800a4c0:	0800d61c 	.word	0x0800d61c
 800a4c4:	0800d620 	.word	0x0800d620

0800a4c8 <__retarget_lock_acquire_recursive>:
 800a4c8:	4770      	bx	lr

0800a4ca <__retarget_lock_release_recursive>:
 800a4ca:	4770      	bx	lr

0800a4cc <free>:
 800a4cc:	4b02      	ldr	r3, [pc, #8]	; (800a4d8 <free+0xc>)
 800a4ce:	4601      	mov	r1, r0
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	f000 b82f 	b.w	800a534 <_free_r>
 800a4d6:	bf00      	nop
 800a4d8:	20000064 	.word	0x20000064

0800a4dc <memcpy>:
 800a4dc:	440a      	add	r2, r1
 800a4de:	4291      	cmp	r1, r2
 800a4e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a4e4:	d100      	bne.n	800a4e8 <memcpy+0xc>
 800a4e6:	4770      	bx	lr
 800a4e8:	b510      	push	{r4, lr}
 800a4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4f2:	4291      	cmp	r1, r2
 800a4f4:	d1f9      	bne.n	800a4ea <memcpy+0xe>
 800a4f6:	bd10      	pop	{r4, pc}

0800a4f8 <memset>:
 800a4f8:	4402      	add	r2, r0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d100      	bne.n	800a502 <memset+0xa>
 800a500:	4770      	bx	lr
 800a502:	f803 1b01 	strb.w	r1, [r3], #1
 800a506:	e7f9      	b.n	800a4fc <memset+0x4>

0800a508 <_calloc_r>:
 800a508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a50a:	fba1 2402 	umull	r2, r4, r1, r2
 800a50e:	b94c      	cbnz	r4, 800a524 <_calloc_r+0x1c>
 800a510:	4611      	mov	r1, r2
 800a512:	9201      	str	r2, [sp, #4]
 800a514:	f000 f87a 	bl	800a60c <_malloc_r>
 800a518:	9a01      	ldr	r2, [sp, #4]
 800a51a:	4605      	mov	r5, r0
 800a51c:	b930      	cbnz	r0, 800a52c <_calloc_r+0x24>
 800a51e:	4628      	mov	r0, r5
 800a520:	b003      	add	sp, #12
 800a522:	bd30      	pop	{r4, r5, pc}
 800a524:	220c      	movs	r2, #12
 800a526:	6002      	str	r2, [r0, #0]
 800a528:	2500      	movs	r5, #0
 800a52a:	e7f8      	b.n	800a51e <_calloc_r+0x16>
 800a52c:	4621      	mov	r1, r4
 800a52e:	f7ff ffe3 	bl	800a4f8 <memset>
 800a532:	e7f4      	b.n	800a51e <_calloc_r+0x16>

0800a534 <_free_r>:
 800a534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a536:	2900      	cmp	r1, #0
 800a538:	d044      	beq.n	800a5c4 <_free_r+0x90>
 800a53a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a53e:	9001      	str	r0, [sp, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	f1a1 0404 	sub.w	r4, r1, #4
 800a546:	bfb8      	it	lt
 800a548:	18e4      	addlt	r4, r4, r3
 800a54a:	f000 fa65 	bl	800aa18 <__malloc_lock>
 800a54e:	4a1e      	ldr	r2, [pc, #120]	; (800a5c8 <_free_r+0x94>)
 800a550:	9801      	ldr	r0, [sp, #4]
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	b933      	cbnz	r3, 800a564 <_free_r+0x30>
 800a556:	6063      	str	r3, [r4, #4]
 800a558:	6014      	str	r4, [r2, #0]
 800a55a:	b003      	add	sp, #12
 800a55c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a560:	f000 ba60 	b.w	800aa24 <__malloc_unlock>
 800a564:	42a3      	cmp	r3, r4
 800a566:	d908      	bls.n	800a57a <_free_r+0x46>
 800a568:	6825      	ldr	r5, [r4, #0]
 800a56a:	1961      	adds	r1, r4, r5
 800a56c:	428b      	cmp	r3, r1
 800a56e:	bf01      	itttt	eq
 800a570:	6819      	ldreq	r1, [r3, #0]
 800a572:	685b      	ldreq	r3, [r3, #4]
 800a574:	1949      	addeq	r1, r1, r5
 800a576:	6021      	streq	r1, [r4, #0]
 800a578:	e7ed      	b.n	800a556 <_free_r+0x22>
 800a57a:	461a      	mov	r2, r3
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	b10b      	cbz	r3, 800a584 <_free_r+0x50>
 800a580:	42a3      	cmp	r3, r4
 800a582:	d9fa      	bls.n	800a57a <_free_r+0x46>
 800a584:	6811      	ldr	r1, [r2, #0]
 800a586:	1855      	adds	r5, r2, r1
 800a588:	42a5      	cmp	r5, r4
 800a58a:	d10b      	bne.n	800a5a4 <_free_r+0x70>
 800a58c:	6824      	ldr	r4, [r4, #0]
 800a58e:	4421      	add	r1, r4
 800a590:	1854      	adds	r4, r2, r1
 800a592:	42a3      	cmp	r3, r4
 800a594:	6011      	str	r1, [r2, #0]
 800a596:	d1e0      	bne.n	800a55a <_free_r+0x26>
 800a598:	681c      	ldr	r4, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	6053      	str	r3, [r2, #4]
 800a59e:	4421      	add	r1, r4
 800a5a0:	6011      	str	r1, [r2, #0]
 800a5a2:	e7da      	b.n	800a55a <_free_r+0x26>
 800a5a4:	d902      	bls.n	800a5ac <_free_r+0x78>
 800a5a6:	230c      	movs	r3, #12
 800a5a8:	6003      	str	r3, [r0, #0]
 800a5aa:	e7d6      	b.n	800a55a <_free_r+0x26>
 800a5ac:	6825      	ldr	r5, [r4, #0]
 800a5ae:	1961      	adds	r1, r4, r5
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf04      	itt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	6063      	str	r3, [r4, #4]
 800a5ba:	bf04      	itt	eq
 800a5bc:	1949      	addeq	r1, r1, r5
 800a5be:	6021      	streq	r1, [r4, #0]
 800a5c0:	6054      	str	r4, [r2, #4]
 800a5c2:	e7ca      	b.n	800a55a <_free_r+0x26>
 800a5c4:	b003      	add	sp, #12
 800a5c6:	bd30      	pop	{r4, r5, pc}
 800a5c8:	20005598 	.word	0x20005598

0800a5cc <sbrk_aligned>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	4e0e      	ldr	r6, [pc, #56]	; (800a608 <sbrk_aligned+0x3c>)
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	6831      	ldr	r1, [r6, #0]
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	b911      	cbnz	r1, 800a5de <sbrk_aligned+0x12>
 800a5d8:	f000 f8f6 	bl	800a7c8 <_sbrk_r>
 800a5dc:	6030      	str	r0, [r6, #0]
 800a5de:	4621      	mov	r1, r4
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f000 f8f1 	bl	800a7c8 <_sbrk_r>
 800a5e6:	1c43      	adds	r3, r0, #1
 800a5e8:	d00a      	beq.n	800a600 <sbrk_aligned+0x34>
 800a5ea:	1cc4      	adds	r4, r0, #3
 800a5ec:	f024 0403 	bic.w	r4, r4, #3
 800a5f0:	42a0      	cmp	r0, r4
 800a5f2:	d007      	beq.n	800a604 <sbrk_aligned+0x38>
 800a5f4:	1a21      	subs	r1, r4, r0
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f000 f8e6 	bl	800a7c8 <_sbrk_r>
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	d101      	bne.n	800a604 <sbrk_aligned+0x38>
 800a600:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a604:	4620      	mov	r0, r4
 800a606:	bd70      	pop	{r4, r5, r6, pc}
 800a608:	2000559c 	.word	0x2000559c

0800a60c <_malloc_r>:
 800a60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a610:	1ccd      	adds	r5, r1, #3
 800a612:	f025 0503 	bic.w	r5, r5, #3
 800a616:	3508      	adds	r5, #8
 800a618:	2d0c      	cmp	r5, #12
 800a61a:	bf38      	it	cc
 800a61c:	250c      	movcc	r5, #12
 800a61e:	2d00      	cmp	r5, #0
 800a620:	4607      	mov	r7, r0
 800a622:	db01      	blt.n	800a628 <_malloc_r+0x1c>
 800a624:	42a9      	cmp	r1, r5
 800a626:	d905      	bls.n	800a634 <_malloc_r+0x28>
 800a628:	230c      	movs	r3, #12
 800a62a:	603b      	str	r3, [r7, #0]
 800a62c:	2600      	movs	r6, #0
 800a62e:	4630      	mov	r0, r6
 800a630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a634:	4e2e      	ldr	r6, [pc, #184]	; (800a6f0 <_malloc_r+0xe4>)
 800a636:	f000 f9ef 	bl	800aa18 <__malloc_lock>
 800a63a:	6833      	ldr	r3, [r6, #0]
 800a63c:	461c      	mov	r4, r3
 800a63e:	bb34      	cbnz	r4, 800a68e <_malloc_r+0x82>
 800a640:	4629      	mov	r1, r5
 800a642:	4638      	mov	r0, r7
 800a644:	f7ff ffc2 	bl	800a5cc <sbrk_aligned>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	4604      	mov	r4, r0
 800a64c:	d14d      	bne.n	800a6ea <_malloc_r+0xde>
 800a64e:	6834      	ldr	r4, [r6, #0]
 800a650:	4626      	mov	r6, r4
 800a652:	2e00      	cmp	r6, #0
 800a654:	d140      	bne.n	800a6d8 <_malloc_r+0xcc>
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	4631      	mov	r1, r6
 800a65a:	4638      	mov	r0, r7
 800a65c:	eb04 0803 	add.w	r8, r4, r3
 800a660:	f000 f8b2 	bl	800a7c8 <_sbrk_r>
 800a664:	4580      	cmp	r8, r0
 800a666:	d13a      	bne.n	800a6de <_malloc_r+0xd2>
 800a668:	6821      	ldr	r1, [r4, #0]
 800a66a:	3503      	adds	r5, #3
 800a66c:	1a6d      	subs	r5, r5, r1
 800a66e:	f025 0503 	bic.w	r5, r5, #3
 800a672:	3508      	adds	r5, #8
 800a674:	2d0c      	cmp	r5, #12
 800a676:	bf38      	it	cc
 800a678:	250c      	movcc	r5, #12
 800a67a:	4629      	mov	r1, r5
 800a67c:	4638      	mov	r0, r7
 800a67e:	f7ff ffa5 	bl	800a5cc <sbrk_aligned>
 800a682:	3001      	adds	r0, #1
 800a684:	d02b      	beq.n	800a6de <_malloc_r+0xd2>
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	442b      	add	r3, r5
 800a68a:	6023      	str	r3, [r4, #0]
 800a68c:	e00e      	b.n	800a6ac <_malloc_r+0xa0>
 800a68e:	6822      	ldr	r2, [r4, #0]
 800a690:	1b52      	subs	r2, r2, r5
 800a692:	d41e      	bmi.n	800a6d2 <_malloc_r+0xc6>
 800a694:	2a0b      	cmp	r2, #11
 800a696:	d916      	bls.n	800a6c6 <_malloc_r+0xba>
 800a698:	1961      	adds	r1, r4, r5
 800a69a:	42a3      	cmp	r3, r4
 800a69c:	6025      	str	r5, [r4, #0]
 800a69e:	bf18      	it	ne
 800a6a0:	6059      	strne	r1, [r3, #4]
 800a6a2:	6863      	ldr	r3, [r4, #4]
 800a6a4:	bf08      	it	eq
 800a6a6:	6031      	streq	r1, [r6, #0]
 800a6a8:	5162      	str	r2, [r4, r5]
 800a6aa:	604b      	str	r3, [r1, #4]
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	f104 060b 	add.w	r6, r4, #11
 800a6b2:	f000 f9b7 	bl	800aa24 <__malloc_unlock>
 800a6b6:	f026 0607 	bic.w	r6, r6, #7
 800a6ba:	1d23      	adds	r3, r4, #4
 800a6bc:	1af2      	subs	r2, r6, r3
 800a6be:	d0b6      	beq.n	800a62e <_malloc_r+0x22>
 800a6c0:	1b9b      	subs	r3, r3, r6
 800a6c2:	50a3      	str	r3, [r4, r2]
 800a6c4:	e7b3      	b.n	800a62e <_malloc_r+0x22>
 800a6c6:	6862      	ldr	r2, [r4, #4]
 800a6c8:	42a3      	cmp	r3, r4
 800a6ca:	bf0c      	ite	eq
 800a6cc:	6032      	streq	r2, [r6, #0]
 800a6ce:	605a      	strne	r2, [r3, #4]
 800a6d0:	e7ec      	b.n	800a6ac <_malloc_r+0xa0>
 800a6d2:	4623      	mov	r3, r4
 800a6d4:	6864      	ldr	r4, [r4, #4]
 800a6d6:	e7b2      	b.n	800a63e <_malloc_r+0x32>
 800a6d8:	4634      	mov	r4, r6
 800a6da:	6876      	ldr	r6, [r6, #4]
 800a6dc:	e7b9      	b.n	800a652 <_malloc_r+0x46>
 800a6de:	230c      	movs	r3, #12
 800a6e0:	603b      	str	r3, [r7, #0]
 800a6e2:	4638      	mov	r0, r7
 800a6e4:	f000 f99e 	bl	800aa24 <__malloc_unlock>
 800a6e8:	e7a1      	b.n	800a62e <_malloc_r+0x22>
 800a6ea:	6025      	str	r5, [r4, #0]
 800a6ec:	e7de      	b.n	800a6ac <_malloc_r+0xa0>
 800a6ee:	bf00      	nop
 800a6f0:	20005598 	.word	0x20005598

0800a6f4 <cleanup_glue>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	6809      	ldr	r1, [r1, #0]
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	b109      	cbz	r1, 800a702 <cleanup_glue+0xe>
 800a6fe:	f7ff fff9 	bl	800a6f4 <cleanup_glue>
 800a702:	4621      	mov	r1, r4
 800a704:	4628      	mov	r0, r5
 800a706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a70a:	f7ff bf13 	b.w	800a534 <_free_r>
	...

0800a710 <_reclaim_reent>:
 800a710:	4b2c      	ldr	r3, [pc, #176]	; (800a7c4 <_reclaim_reent+0xb4>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4283      	cmp	r3, r0
 800a716:	b570      	push	{r4, r5, r6, lr}
 800a718:	4604      	mov	r4, r0
 800a71a:	d051      	beq.n	800a7c0 <_reclaim_reent+0xb0>
 800a71c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a71e:	b143      	cbz	r3, 800a732 <_reclaim_reent+0x22>
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d14a      	bne.n	800a7bc <_reclaim_reent+0xac>
 800a726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a728:	6819      	ldr	r1, [r3, #0]
 800a72a:	b111      	cbz	r1, 800a732 <_reclaim_reent+0x22>
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7ff ff01 	bl	800a534 <_free_r>
 800a732:	6961      	ldr	r1, [r4, #20]
 800a734:	b111      	cbz	r1, 800a73c <_reclaim_reent+0x2c>
 800a736:	4620      	mov	r0, r4
 800a738:	f7ff fefc 	bl	800a534 <_free_r>
 800a73c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a73e:	b111      	cbz	r1, 800a746 <_reclaim_reent+0x36>
 800a740:	4620      	mov	r0, r4
 800a742:	f7ff fef7 	bl	800a534 <_free_r>
 800a746:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a748:	b111      	cbz	r1, 800a750 <_reclaim_reent+0x40>
 800a74a:	4620      	mov	r0, r4
 800a74c:	f7ff fef2 	bl	800a534 <_free_r>
 800a750:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a752:	b111      	cbz	r1, 800a75a <_reclaim_reent+0x4a>
 800a754:	4620      	mov	r0, r4
 800a756:	f7ff feed 	bl	800a534 <_free_r>
 800a75a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a75c:	b111      	cbz	r1, 800a764 <_reclaim_reent+0x54>
 800a75e:	4620      	mov	r0, r4
 800a760:	f7ff fee8 	bl	800a534 <_free_r>
 800a764:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a766:	b111      	cbz	r1, 800a76e <_reclaim_reent+0x5e>
 800a768:	4620      	mov	r0, r4
 800a76a:	f7ff fee3 	bl	800a534 <_free_r>
 800a76e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a770:	b111      	cbz	r1, 800a778 <_reclaim_reent+0x68>
 800a772:	4620      	mov	r0, r4
 800a774:	f7ff fede 	bl	800a534 <_free_r>
 800a778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a77a:	b111      	cbz	r1, 800a782 <_reclaim_reent+0x72>
 800a77c:	4620      	mov	r0, r4
 800a77e:	f7ff fed9 	bl	800a534 <_free_r>
 800a782:	69a3      	ldr	r3, [r4, #24]
 800a784:	b1e3      	cbz	r3, 800a7c0 <_reclaim_reent+0xb0>
 800a786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a788:	4620      	mov	r0, r4
 800a78a:	4798      	blx	r3
 800a78c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a78e:	b1b9      	cbz	r1, 800a7c0 <_reclaim_reent+0xb0>
 800a790:	4620      	mov	r0, r4
 800a792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a796:	f7ff bfad 	b.w	800a6f4 <cleanup_glue>
 800a79a:	5949      	ldr	r1, [r1, r5]
 800a79c:	b941      	cbnz	r1, 800a7b0 <_reclaim_reent+0xa0>
 800a79e:	3504      	adds	r5, #4
 800a7a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7a2:	2d80      	cmp	r5, #128	; 0x80
 800a7a4:	68d9      	ldr	r1, [r3, #12]
 800a7a6:	d1f8      	bne.n	800a79a <_reclaim_reent+0x8a>
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f7ff fec3 	bl	800a534 <_free_r>
 800a7ae:	e7ba      	b.n	800a726 <_reclaim_reent+0x16>
 800a7b0:	680e      	ldr	r6, [r1, #0]
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f7ff febe 	bl	800a534 <_free_r>
 800a7b8:	4631      	mov	r1, r6
 800a7ba:	e7ef      	b.n	800a79c <_reclaim_reent+0x8c>
 800a7bc:	2500      	movs	r5, #0
 800a7be:	e7ef      	b.n	800a7a0 <_reclaim_reent+0x90>
 800a7c0:	bd70      	pop	{r4, r5, r6, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20000064 	.word	0x20000064

0800a7c8 <_sbrk_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	4d06      	ldr	r5, [pc, #24]	; (800a7e4 <_sbrk_r+0x1c>)
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	4608      	mov	r0, r1
 800a7d2:	602b      	str	r3, [r5, #0]
 800a7d4:	f7f8 f988 	bl	8002ae8 <_sbrk>
 800a7d8:	1c43      	adds	r3, r0, #1
 800a7da:	d102      	bne.n	800a7e2 <_sbrk_r+0x1a>
 800a7dc:	682b      	ldr	r3, [r5, #0]
 800a7de:	b103      	cbz	r3, 800a7e2 <_sbrk_r+0x1a>
 800a7e0:	6023      	str	r3, [r4, #0]
 800a7e2:	bd38      	pop	{r3, r4, r5, pc}
 800a7e4:	200055a0 	.word	0x200055a0

0800a7e8 <siprintf>:
 800a7e8:	b40e      	push	{r1, r2, r3}
 800a7ea:	b500      	push	{lr}
 800a7ec:	b09c      	sub	sp, #112	; 0x70
 800a7ee:	ab1d      	add	r3, sp, #116	; 0x74
 800a7f0:	9002      	str	r0, [sp, #8]
 800a7f2:	9006      	str	r0, [sp, #24]
 800a7f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7f8:	4809      	ldr	r0, [pc, #36]	; (800a820 <siprintf+0x38>)
 800a7fa:	9107      	str	r1, [sp, #28]
 800a7fc:	9104      	str	r1, [sp, #16]
 800a7fe:	4909      	ldr	r1, [pc, #36]	; (800a824 <siprintf+0x3c>)
 800a800:	f853 2b04 	ldr.w	r2, [r3], #4
 800a804:	9105      	str	r1, [sp, #20]
 800a806:	6800      	ldr	r0, [r0, #0]
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	a902      	add	r1, sp, #8
 800a80c:	f000 f96c 	bl	800aae8 <_svfiprintf_r>
 800a810:	9b02      	ldr	r3, [sp, #8]
 800a812:	2200      	movs	r2, #0
 800a814:	701a      	strb	r2, [r3, #0]
 800a816:	b01c      	add	sp, #112	; 0x70
 800a818:	f85d eb04 	ldr.w	lr, [sp], #4
 800a81c:	b003      	add	sp, #12
 800a81e:	4770      	bx	lr
 800a820:	20000064 	.word	0x20000064
 800a824:	ffff0208 	.word	0xffff0208

0800a828 <strcpy>:
 800a828:	4603      	mov	r3, r0
 800a82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a82e:	f803 2b01 	strb.w	r2, [r3], #1
 800a832:	2a00      	cmp	r2, #0
 800a834:	d1f9      	bne.n	800a82a <strcpy+0x2>
 800a836:	4770      	bx	lr

0800a838 <strncpy>:
 800a838:	b510      	push	{r4, lr}
 800a83a:	3901      	subs	r1, #1
 800a83c:	4603      	mov	r3, r0
 800a83e:	b132      	cbz	r2, 800a84e <strncpy+0x16>
 800a840:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a844:	f803 4b01 	strb.w	r4, [r3], #1
 800a848:	3a01      	subs	r2, #1
 800a84a:	2c00      	cmp	r4, #0
 800a84c:	d1f7      	bne.n	800a83e <strncpy+0x6>
 800a84e:	441a      	add	r2, r3
 800a850:	2100      	movs	r1, #0
 800a852:	4293      	cmp	r3, r2
 800a854:	d100      	bne.n	800a858 <strncpy+0x20>
 800a856:	bd10      	pop	{r4, pc}
 800a858:	f803 1b01 	strb.w	r1, [r3], #1
 800a85c:	e7f9      	b.n	800a852 <strncpy+0x1a>

0800a85e <strstr>:
 800a85e:	780a      	ldrb	r2, [r1, #0]
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	b96a      	cbnz	r2, 800a880 <strstr+0x22>
 800a864:	bd70      	pop	{r4, r5, r6, pc}
 800a866:	429a      	cmp	r2, r3
 800a868:	d109      	bne.n	800a87e <strstr+0x20>
 800a86a:	460c      	mov	r4, r1
 800a86c:	4605      	mov	r5, r0
 800a86e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0f6      	beq.n	800a864 <strstr+0x6>
 800a876:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a87a:	429e      	cmp	r6, r3
 800a87c:	d0f7      	beq.n	800a86e <strstr+0x10>
 800a87e:	3001      	adds	r0, #1
 800a880:	7803      	ldrb	r3, [r0, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1ef      	bne.n	800a866 <strstr+0x8>
 800a886:	4618      	mov	r0, r3
 800a888:	e7ec      	b.n	800a864 <strstr+0x6>
	...

0800a88c <_strtol_l.constprop.0>:
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a892:	d001      	beq.n	800a898 <_strtol_l.constprop.0+0xc>
 800a894:	2b24      	cmp	r3, #36	; 0x24
 800a896:	d906      	bls.n	800a8a6 <_strtol_l.constprop.0+0x1a>
 800a898:	f7ff fd40 	bl	800a31c <__errno>
 800a89c:	2316      	movs	r3, #22
 800a89e:	6003      	str	r3, [r0, #0]
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a98c <_strtol_l.constprop.0+0x100>
 800a8aa:	460d      	mov	r5, r1
 800a8ac:	462e      	mov	r6, r5
 800a8ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a8b6:	f017 0708 	ands.w	r7, r7, #8
 800a8ba:	d1f7      	bne.n	800a8ac <_strtol_l.constprop.0+0x20>
 800a8bc:	2c2d      	cmp	r4, #45	; 0x2d
 800a8be:	d132      	bne.n	800a926 <_strtol_l.constprop.0+0x9a>
 800a8c0:	782c      	ldrb	r4, [r5, #0]
 800a8c2:	2701      	movs	r7, #1
 800a8c4:	1cb5      	adds	r5, r6, #2
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d05b      	beq.n	800a982 <_strtol_l.constprop.0+0xf6>
 800a8ca:	2b10      	cmp	r3, #16
 800a8cc:	d109      	bne.n	800a8e2 <_strtol_l.constprop.0+0x56>
 800a8ce:	2c30      	cmp	r4, #48	; 0x30
 800a8d0:	d107      	bne.n	800a8e2 <_strtol_l.constprop.0+0x56>
 800a8d2:	782c      	ldrb	r4, [r5, #0]
 800a8d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a8d8:	2c58      	cmp	r4, #88	; 0x58
 800a8da:	d14d      	bne.n	800a978 <_strtol_l.constprop.0+0xec>
 800a8dc:	786c      	ldrb	r4, [r5, #1]
 800a8de:	2310      	movs	r3, #16
 800a8e0:	3502      	adds	r5, #2
 800a8e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a8e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a8ea:	f04f 0c00 	mov.w	ip, #0
 800a8ee:	fbb8 f9f3 	udiv	r9, r8, r3
 800a8f2:	4666      	mov	r6, ip
 800a8f4:	fb03 8a19 	mls	sl, r3, r9, r8
 800a8f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a8fc:	f1be 0f09 	cmp.w	lr, #9
 800a900:	d816      	bhi.n	800a930 <_strtol_l.constprop.0+0xa4>
 800a902:	4674      	mov	r4, lr
 800a904:	42a3      	cmp	r3, r4
 800a906:	dd24      	ble.n	800a952 <_strtol_l.constprop.0+0xc6>
 800a908:	f1bc 0f00 	cmp.w	ip, #0
 800a90c:	db1e      	blt.n	800a94c <_strtol_l.constprop.0+0xc0>
 800a90e:	45b1      	cmp	r9, r6
 800a910:	d31c      	bcc.n	800a94c <_strtol_l.constprop.0+0xc0>
 800a912:	d101      	bne.n	800a918 <_strtol_l.constprop.0+0x8c>
 800a914:	45a2      	cmp	sl, r4
 800a916:	db19      	blt.n	800a94c <_strtol_l.constprop.0+0xc0>
 800a918:	fb06 4603 	mla	r6, r6, r3, r4
 800a91c:	f04f 0c01 	mov.w	ip, #1
 800a920:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a924:	e7e8      	b.n	800a8f8 <_strtol_l.constprop.0+0x6c>
 800a926:	2c2b      	cmp	r4, #43	; 0x2b
 800a928:	bf04      	itt	eq
 800a92a:	782c      	ldrbeq	r4, [r5, #0]
 800a92c:	1cb5      	addeq	r5, r6, #2
 800a92e:	e7ca      	b.n	800a8c6 <_strtol_l.constprop.0+0x3a>
 800a930:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a934:	f1be 0f19 	cmp.w	lr, #25
 800a938:	d801      	bhi.n	800a93e <_strtol_l.constprop.0+0xb2>
 800a93a:	3c37      	subs	r4, #55	; 0x37
 800a93c:	e7e2      	b.n	800a904 <_strtol_l.constprop.0+0x78>
 800a93e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a942:	f1be 0f19 	cmp.w	lr, #25
 800a946:	d804      	bhi.n	800a952 <_strtol_l.constprop.0+0xc6>
 800a948:	3c57      	subs	r4, #87	; 0x57
 800a94a:	e7db      	b.n	800a904 <_strtol_l.constprop.0+0x78>
 800a94c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a950:	e7e6      	b.n	800a920 <_strtol_l.constprop.0+0x94>
 800a952:	f1bc 0f00 	cmp.w	ip, #0
 800a956:	da05      	bge.n	800a964 <_strtol_l.constprop.0+0xd8>
 800a958:	2322      	movs	r3, #34	; 0x22
 800a95a:	6003      	str	r3, [r0, #0]
 800a95c:	4646      	mov	r6, r8
 800a95e:	b942      	cbnz	r2, 800a972 <_strtol_l.constprop.0+0xe6>
 800a960:	4630      	mov	r0, r6
 800a962:	e79e      	b.n	800a8a2 <_strtol_l.constprop.0+0x16>
 800a964:	b107      	cbz	r7, 800a968 <_strtol_l.constprop.0+0xdc>
 800a966:	4276      	negs	r6, r6
 800a968:	2a00      	cmp	r2, #0
 800a96a:	d0f9      	beq.n	800a960 <_strtol_l.constprop.0+0xd4>
 800a96c:	f1bc 0f00 	cmp.w	ip, #0
 800a970:	d000      	beq.n	800a974 <_strtol_l.constprop.0+0xe8>
 800a972:	1e69      	subs	r1, r5, #1
 800a974:	6011      	str	r1, [r2, #0]
 800a976:	e7f3      	b.n	800a960 <_strtol_l.constprop.0+0xd4>
 800a978:	2430      	movs	r4, #48	; 0x30
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1b1      	bne.n	800a8e2 <_strtol_l.constprop.0+0x56>
 800a97e:	2308      	movs	r3, #8
 800a980:	e7af      	b.n	800a8e2 <_strtol_l.constprop.0+0x56>
 800a982:	2c30      	cmp	r4, #48	; 0x30
 800a984:	d0a5      	beq.n	800a8d2 <_strtol_l.constprop.0+0x46>
 800a986:	230a      	movs	r3, #10
 800a988:	e7ab      	b.n	800a8e2 <_strtol_l.constprop.0+0x56>
 800a98a:	bf00      	nop
 800a98c:	0800d4e1 	.word	0x0800d4e1

0800a990 <strtol>:
 800a990:	4613      	mov	r3, r2
 800a992:	460a      	mov	r2, r1
 800a994:	4601      	mov	r1, r0
 800a996:	4802      	ldr	r0, [pc, #8]	; (800a9a0 <strtol+0x10>)
 800a998:	6800      	ldr	r0, [r0, #0]
 800a99a:	f7ff bf77 	b.w	800a88c <_strtol_l.constprop.0>
 800a99e:	bf00      	nop
 800a9a0:	20000064 	.word	0x20000064

0800a9a4 <_vsniprintf_r>:
 800a9a4:	b530      	push	{r4, r5, lr}
 800a9a6:	4614      	mov	r4, r2
 800a9a8:	2c00      	cmp	r4, #0
 800a9aa:	b09b      	sub	sp, #108	; 0x6c
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	da05      	bge.n	800a9be <_vsniprintf_r+0x1a>
 800a9b2:	238b      	movs	r3, #139	; 0x8b
 800a9b4:	6003      	str	r3, [r0, #0]
 800a9b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9ba:	b01b      	add	sp, #108	; 0x6c
 800a9bc:	bd30      	pop	{r4, r5, pc}
 800a9be:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a9c2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a9c6:	bf14      	ite	ne
 800a9c8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a9cc:	4623      	moveq	r3, r4
 800a9ce:	9302      	str	r3, [sp, #8]
 800a9d0:	9305      	str	r3, [sp, #20]
 800a9d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9d6:	9100      	str	r1, [sp, #0]
 800a9d8:	9104      	str	r1, [sp, #16]
 800a9da:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a9de:	4669      	mov	r1, sp
 800a9e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a9e2:	f000 f881 	bl	800aae8 <_svfiprintf_r>
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	bfbc      	itt	lt
 800a9ea:	238b      	movlt	r3, #139	; 0x8b
 800a9ec:	602b      	strlt	r3, [r5, #0]
 800a9ee:	2c00      	cmp	r4, #0
 800a9f0:	d0e3      	beq.n	800a9ba <_vsniprintf_r+0x16>
 800a9f2:	9b00      	ldr	r3, [sp, #0]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	701a      	strb	r2, [r3, #0]
 800a9f8:	e7df      	b.n	800a9ba <_vsniprintf_r+0x16>
	...

0800a9fc <vsniprintf>:
 800a9fc:	b507      	push	{r0, r1, r2, lr}
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	4613      	mov	r3, r2
 800aa02:	460a      	mov	r2, r1
 800aa04:	4601      	mov	r1, r0
 800aa06:	4803      	ldr	r0, [pc, #12]	; (800aa14 <vsniprintf+0x18>)
 800aa08:	6800      	ldr	r0, [r0, #0]
 800aa0a:	f7ff ffcb 	bl	800a9a4 <_vsniprintf_r>
 800aa0e:	b003      	add	sp, #12
 800aa10:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa14:	20000064 	.word	0x20000064

0800aa18 <__malloc_lock>:
 800aa18:	4801      	ldr	r0, [pc, #4]	; (800aa20 <__malloc_lock+0x8>)
 800aa1a:	f7ff bd55 	b.w	800a4c8 <__retarget_lock_acquire_recursive>
 800aa1e:	bf00      	nop
 800aa20:	20005594 	.word	0x20005594

0800aa24 <__malloc_unlock>:
 800aa24:	4801      	ldr	r0, [pc, #4]	; (800aa2c <__malloc_unlock+0x8>)
 800aa26:	f7ff bd50 	b.w	800a4ca <__retarget_lock_release_recursive>
 800aa2a:	bf00      	nop
 800aa2c:	20005594 	.word	0x20005594

0800aa30 <__ssputs_r>:
 800aa30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa34:	688e      	ldr	r6, [r1, #8]
 800aa36:	429e      	cmp	r6, r3
 800aa38:	4682      	mov	sl, r0
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	4690      	mov	r8, r2
 800aa3e:	461f      	mov	r7, r3
 800aa40:	d838      	bhi.n	800aab4 <__ssputs_r+0x84>
 800aa42:	898a      	ldrh	r2, [r1, #12]
 800aa44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa48:	d032      	beq.n	800aab0 <__ssputs_r+0x80>
 800aa4a:	6825      	ldr	r5, [r4, #0]
 800aa4c:	6909      	ldr	r1, [r1, #16]
 800aa4e:	eba5 0901 	sub.w	r9, r5, r1
 800aa52:	6965      	ldr	r5, [r4, #20]
 800aa54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	444b      	add	r3, r9
 800aa60:	106d      	asrs	r5, r5, #1
 800aa62:	429d      	cmp	r5, r3
 800aa64:	bf38      	it	cc
 800aa66:	461d      	movcc	r5, r3
 800aa68:	0553      	lsls	r3, r2, #21
 800aa6a:	d531      	bpl.n	800aad0 <__ssputs_r+0xa0>
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	f7ff fdcd 	bl	800a60c <_malloc_r>
 800aa72:	4606      	mov	r6, r0
 800aa74:	b950      	cbnz	r0, 800aa8c <__ssputs_r+0x5c>
 800aa76:	230c      	movs	r3, #12
 800aa78:	f8ca 3000 	str.w	r3, [sl]
 800aa7c:	89a3      	ldrh	r3, [r4, #12]
 800aa7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa82:	81a3      	strh	r3, [r4, #12]
 800aa84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8c:	6921      	ldr	r1, [r4, #16]
 800aa8e:	464a      	mov	r2, r9
 800aa90:	f7ff fd24 	bl	800a4dc <memcpy>
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa9e:	81a3      	strh	r3, [r4, #12]
 800aaa0:	6126      	str	r6, [r4, #16]
 800aaa2:	6165      	str	r5, [r4, #20]
 800aaa4:	444e      	add	r6, r9
 800aaa6:	eba5 0509 	sub.w	r5, r5, r9
 800aaaa:	6026      	str	r6, [r4, #0]
 800aaac:	60a5      	str	r5, [r4, #8]
 800aaae:	463e      	mov	r6, r7
 800aab0:	42be      	cmp	r6, r7
 800aab2:	d900      	bls.n	800aab6 <__ssputs_r+0x86>
 800aab4:	463e      	mov	r6, r7
 800aab6:	6820      	ldr	r0, [r4, #0]
 800aab8:	4632      	mov	r2, r6
 800aaba:	4641      	mov	r1, r8
 800aabc:	f000 faa8 	bl	800b010 <memmove>
 800aac0:	68a3      	ldr	r3, [r4, #8]
 800aac2:	1b9b      	subs	r3, r3, r6
 800aac4:	60a3      	str	r3, [r4, #8]
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	4433      	add	r3, r6
 800aaca:	6023      	str	r3, [r4, #0]
 800aacc:	2000      	movs	r0, #0
 800aace:	e7db      	b.n	800aa88 <__ssputs_r+0x58>
 800aad0:	462a      	mov	r2, r5
 800aad2:	f000 fab7 	bl	800b044 <_realloc_r>
 800aad6:	4606      	mov	r6, r0
 800aad8:	2800      	cmp	r0, #0
 800aada:	d1e1      	bne.n	800aaa0 <__ssputs_r+0x70>
 800aadc:	6921      	ldr	r1, [r4, #16]
 800aade:	4650      	mov	r0, sl
 800aae0:	f7ff fd28 	bl	800a534 <_free_r>
 800aae4:	e7c7      	b.n	800aa76 <__ssputs_r+0x46>
	...

0800aae8 <_svfiprintf_r>:
 800aae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaec:	4698      	mov	r8, r3
 800aaee:	898b      	ldrh	r3, [r1, #12]
 800aaf0:	061b      	lsls	r3, r3, #24
 800aaf2:	b09d      	sub	sp, #116	; 0x74
 800aaf4:	4607      	mov	r7, r0
 800aaf6:	460d      	mov	r5, r1
 800aaf8:	4614      	mov	r4, r2
 800aafa:	d50e      	bpl.n	800ab1a <_svfiprintf_r+0x32>
 800aafc:	690b      	ldr	r3, [r1, #16]
 800aafe:	b963      	cbnz	r3, 800ab1a <_svfiprintf_r+0x32>
 800ab00:	2140      	movs	r1, #64	; 0x40
 800ab02:	f7ff fd83 	bl	800a60c <_malloc_r>
 800ab06:	6028      	str	r0, [r5, #0]
 800ab08:	6128      	str	r0, [r5, #16]
 800ab0a:	b920      	cbnz	r0, 800ab16 <_svfiprintf_r+0x2e>
 800ab0c:	230c      	movs	r3, #12
 800ab0e:	603b      	str	r3, [r7, #0]
 800ab10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab14:	e0d1      	b.n	800acba <_svfiprintf_r+0x1d2>
 800ab16:	2340      	movs	r3, #64	; 0x40
 800ab18:	616b      	str	r3, [r5, #20]
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab1e:	2320      	movs	r3, #32
 800ab20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab28:	2330      	movs	r3, #48	; 0x30
 800ab2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800acd4 <_svfiprintf_r+0x1ec>
 800ab2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab32:	f04f 0901 	mov.w	r9, #1
 800ab36:	4623      	mov	r3, r4
 800ab38:	469a      	mov	sl, r3
 800ab3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab3e:	b10a      	cbz	r2, 800ab44 <_svfiprintf_r+0x5c>
 800ab40:	2a25      	cmp	r2, #37	; 0x25
 800ab42:	d1f9      	bne.n	800ab38 <_svfiprintf_r+0x50>
 800ab44:	ebba 0b04 	subs.w	fp, sl, r4
 800ab48:	d00b      	beq.n	800ab62 <_svfiprintf_r+0x7a>
 800ab4a:	465b      	mov	r3, fp
 800ab4c:	4622      	mov	r2, r4
 800ab4e:	4629      	mov	r1, r5
 800ab50:	4638      	mov	r0, r7
 800ab52:	f7ff ff6d 	bl	800aa30 <__ssputs_r>
 800ab56:	3001      	adds	r0, #1
 800ab58:	f000 80aa 	beq.w	800acb0 <_svfiprintf_r+0x1c8>
 800ab5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab5e:	445a      	add	r2, fp
 800ab60:	9209      	str	r2, [sp, #36]	; 0x24
 800ab62:	f89a 3000 	ldrb.w	r3, [sl]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 80a2 	beq.w	800acb0 <_svfiprintf_r+0x1c8>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab76:	f10a 0a01 	add.w	sl, sl, #1
 800ab7a:	9304      	str	r3, [sp, #16]
 800ab7c:	9307      	str	r3, [sp, #28]
 800ab7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab82:	931a      	str	r3, [sp, #104]	; 0x68
 800ab84:	4654      	mov	r4, sl
 800ab86:	2205      	movs	r2, #5
 800ab88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab8c:	4851      	ldr	r0, [pc, #324]	; (800acd4 <_svfiprintf_r+0x1ec>)
 800ab8e:	f7f5 fb27 	bl	80001e0 <memchr>
 800ab92:	9a04      	ldr	r2, [sp, #16]
 800ab94:	b9d8      	cbnz	r0, 800abce <_svfiprintf_r+0xe6>
 800ab96:	06d0      	lsls	r0, r2, #27
 800ab98:	bf44      	itt	mi
 800ab9a:	2320      	movmi	r3, #32
 800ab9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aba0:	0711      	lsls	r1, r2, #28
 800aba2:	bf44      	itt	mi
 800aba4:	232b      	movmi	r3, #43	; 0x2b
 800aba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abaa:	f89a 3000 	ldrb.w	r3, [sl]
 800abae:	2b2a      	cmp	r3, #42	; 0x2a
 800abb0:	d015      	beq.n	800abde <_svfiprintf_r+0xf6>
 800abb2:	9a07      	ldr	r2, [sp, #28]
 800abb4:	4654      	mov	r4, sl
 800abb6:	2000      	movs	r0, #0
 800abb8:	f04f 0c0a 	mov.w	ip, #10
 800abbc:	4621      	mov	r1, r4
 800abbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abc2:	3b30      	subs	r3, #48	; 0x30
 800abc4:	2b09      	cmp	r3, #9
 800abc6:	d94e      	bls.n	800ac66 <_svfiprintf_r+0x17e>
 800abc8:	b1b0      	cbz	r0, 800abf8 <_svfiprintf_r+0x110>
 800abca:	9207      	str	r2, [sp, #28]
 800abcc:	e014      	b.n	800abf8 <_svfiprintf_r+0x110>
 800abce:	eba0 0308 	sub.w	r3, r0, r8
 800abd2:	fa09 f303 	lsl.w	r3, r9, r3
 800abd6:	4313      	orrs	r3, r2
 800abd8:	9304      	str	r3, [sp, #16]
 800abda:	46a2      	mov	sl, r4
 800abdc:	e7d2      	b.n	800ab84 <_svfiprintf_r+0x9c>
 800abde:	9b03      	ldr	r3, [sp, #12]
 800abe0:	1d19      	adds	r1, r3, #4
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	9103      	str	r1, [sp, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	bfbb      	ittet	lt
 800abea:	425b      	neglt	r3, r3
 800abec:	f042 0202 	orrlt.w	r2, r2, #2
 800abf0:	9307      	strge	r3, [sp, #28]
 800abf2:	9307      	strlt	r3, [sp, #28]
 800abf4:	bfb8      	it	lt
 800abf6:	9204      	strlt	r2, [sp, #16]
 800abf8:	7823      	ldrb	r3, [r4, #0]
 800abfa:	2b2e      	cmp	r3, #46	; 0x2e
 800abfc:	d10c      	bne.n	800ac18 <_svfiprintf_r+0x130>
 800abfe:	7863      	ldrb	r3, [r4, #1]
 800ac00:	2b2a      	cmp	r3, #42	; 0x2a
 800ac02:	d135      	bne.n	800ac70 <_svfiprintf_r+0x188>
 800ac04:	9b03      	ldr	r3, [sp, #12]
 800ac06:	1d1a      	adds	r2, r3, #4
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	9203      	str	r2, [sp, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	bfb8      	it	lt
 800ac10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ac14:	3402      	adds	r4, #2
 800ac16:	9305      	str	r3, [sp, #20]
 800ac18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ace4 <_svfiprintf_r+0x1fc>
 800ac1c:	7821      	ldrb	r1, [r4, #0]
 800ac1e:	2203      	movs	r2, #3
 800ac20:	4650      	mov	r0, sl
 800ac22:	f7f5 fadd 	bl	80001e0 <memchr>
 800ac26:	b140      	cbz	r0, 800ac3a <_svfiprintf_r+0x152>
 800ac28:	2340      	movs	r3, #64	; 0x40
 800ac2a:	eba0 000a 	sub.w	r0, r0, sl
 800ac2e:	fa03 f000 	lsl.w	r0, r3, r0
 800ac32:	9b04      	ldr	r3, [sp, #16]
 800ac34:	4303      	orrs	r3, r0
 800ac36:	3401      	adds	r4, #1
 800ac38:	9304      	str	r3, [sp, #16]
 800ac3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac3e:	4826      	ldr	r0, [pc, #152]	; (800acd8 <_svfiprintf_r+0x1f0>)
 800ac40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac44:	2206      	movs	r2, #6
 800ac46:	f7f5 facb 	bl	80001e0 <memchr>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d038      	beq.n	800acc0 <_svfiprintf_r+0x1d8>
 800ac4e:	4b23      	ldr	r3, [pc, #140]	; (800acdc <_svfiprintf_r+0x1f4>)
 800ac50:	bb1b      	cbnz	r3, 800ac9a <_svfiprintf_r+0x1b2>
 800ac52:	9b03      	ldr	r3, [sp, #12]
 800ac54:	3307      	adds	r3, #7
 800ac56:	f023 0307 	bic.w	r3, r3, #7
 800ac5a:	3308      	adds	r3, #8
 800ac5c:	9303      	str	r3, [sp, #12]
 800ac5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac60:	4433      	add	r3, r6
 800ac62:	9309      	str	r3, [sp, #36]	; 0x24
 800ac64:	e767      	b.n	800ab36 <_svfiprintf_r+0x4e>
 800ac66:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	2001      	movs	r0, #1
 800ac6e:	e7a5      	b.n	800abbc <_svfiprintf_r+0xd4>
 800ac70:	2300      	movs	r3, #0
 800ac72:	3401      	adds	r4, #1
 800ac74:	9305      	str	r3, [sp, #20]
 800ac76:	4619      	mov	r1, r3
 800ac78:	f04f 0c0a 	mov.w	ip, #10
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac82:	3a30      	subs	r2, #48	; 0x30
 800ac84:	2a09      	cmp	r2, #9
 800ac86:	d903      	bls.n	800ac90 <_svfiprintf_r+0x1a8>
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0c5      	beq.n	800ac18 <_svfiprintf_r+0x130>
 800ac8c:	9105      	str	r1, [sp, #20]
 800ac8e:	e7c3      	b.n	800ac18 <_svfiprintf_r+0x130>
 800ac90:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac94:	4604      	mov	r4, r0
 800ac96:	2301      	movs	r3, #1
 800ac98:	e7f0      	b.n	800ac7c <_svfiprintf_r+0x194>
 800ac9a:	ab03      	add	r3, sp, #12
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	462a      	mov	r2, r5
 800aca0:	4b0f      	ldr	r3, [pc, #60]	; (800ace0 <_svfiprintf_r+0x1f8>)
 800aca2:	a904      	add	r1, sp, #16
 800aca4:	4638      	mov	r0, r7
 800aca6:	f3af 8000 	nop.w
 800acaa:	1c42      	adds	r2, r0, #1
 800acac:	4606      	mov	r6, r0
 800acae:	d1d6      	bne.n	800ac5e <_svfiprintf_r+0x176>
 800acb0:	89ab      	ldrh	r3, [r5, #12]
 800acb2:	065b      	lsls	r3, r3, #25
 800acb4:	f53f af2c 	bmi.w	800ab10 <_svfiprintf_r+0x28>
 800acb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acba:	b01d      	add	sp, #116	; 0x74
 800acbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc0:	ab03      	add	r3, sp, #12
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	462a      	mov	r2, r5
 800acc6:	4b06      	ldr	r3, [pc, #24]	; (800ace0 <_svfiprintf_r+0x1f8>)
 800acc8:	a904      	add	r1, sp, #16
 800acca:	4638      	mov	r0, r7
 800accc:	f000 f87a 	bl	800adc4 <_printf_i>
 800acd0:	e7eb      	b.n	800acaa <_svfiprintf_r+0x1c2>
 800acd2:	bf00      	nop
 800acd4:	0800d5e1 	.word	0x0800d5e1
 800acd8:	0800d5eb 	.word	0x0800d5eb
 800acdc:	00000000 	.word	0x00000000
 800ace0:	0800aa31 	.word	0x0800aa31
 800ace4:	0800d5e7 	.word	0x0800d5e7

0800ace8 <_printf_common>:
 800ace8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acec:	4616      	mov	r6, r2
 800acee:	4699      	mov	r9, r3
 800acf0:	688a      	ldr	r2, [r1, #8]
 800acf2:	690b      	ldr	r3, [r1, #16]
 800acf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acf8:	4293      	cmp	r3, r2
 800acfa:	bfb8      	it	lt
 800acfc:	4613      	movlt	r3, r2
 800acfe:	6033      	str	r3, [r6, #0]
 800ad00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad04:	4607      	mov	r7, r0
 800ad06:	460c      	mov	r4, r1
 800ad08:	b10a      	cbz	r2, 800ad0e <_printf_common+0x26>
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	6033      	str	r3, [r6, #0]
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	0699      	lsls	r1, r3, #26
 800ad12:	bf42      	ittt	mi
 800ad14:	6833      	ldrmi	r3, [r6, #0]
 800ad16:	3302      	addmi	r3, #2
 800ad18:	6033      	strmi	r3, [r6, #0]
 800ad1a:	6825      	ldr	r5, [r4, #0]
 800ad1c:	f015 0506 	ands.w	r5, r5, #6
 800ad20:	d106      	bne.n	800ad30 <_printf_common+0x48>
 800ad22:	f104 0a19 	add.w	sl, r4, #25
 800ad26:	68e3      	ldr	r3, [r4, #12]
 800ad28:	6832      	ldr	r2, [r6, #0]
 800ad2a:	1a9b      	subs	r3, r3, r2
 800ad2c:	42ab      	cmp	r3, r5
 800ad2e:	dc26      	bgt.n	800ad7e <_printf_common+0x96>
 800ad30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad34:	1e13      	subs	r3, r2, #0
 800ad36:	6822      	ldr	r2, [r4, #0]
 800ad38:	bf18      	it	ne
 800ad3a:	2301      	movne	r3, #1
 800ad3c:	0692      	lsls	r2, r2, #26
 800ad3e:	d42b      	bmi.n	800ad98 <_printf_common+0xb0>
 800ad40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad44:	4649      	mov	r1, r9
 800ad46:	4638      	mov	r0, r7
 800ad48:	47c0      	blx	r8
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	d01e      	beq.n	800ad8c <_printf_common+0xa4>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	68e5      	ldr	r5, [r4, #12]
 800ad52:	6832      	ldr	r2, [r6, #0]
 800ad54:	f003 0306 	and.w	r3, r3, #6
 800ad58:	2b04      	cmp	r3, #4
 800ad5a:	bf08      	it	eq
 800ad5c:	1aad      	subeq	r5, r5, r2
 800ad5e:	68a3      	ldr	r3, [r4, #8]
 800ad60:	6922      	ldr	r2, [r4, #16]
 800ad62:	bf0c      	ite	eq
 800ad64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad68:	2500      	movne	r5, #0
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	bfc4      	itt	gt
 800ad6e:	1a9b      	subgt	r3, r3, r2
 800ad70:	18ed      	addgt	r5, r5, r3
 800ad72:	2600      	movs	r6, #0
 800ad74:	341a      	adds	r4, #26
 800ad76:	42b5      	cmp	r5, r6
 800ad78:	d11a      	bne.n	800adb0 <_printf_common+0xc8>
 800ad7a:	2000      	movs	r0, #0
 800ad7c:	e008      	b.n	800ad90 <_printf_common+0xa8>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	4652      	mov	r2, sl
 800ad82:	4649      	mov	r1, r9
 800ad84:	4638      	mov	r0, r7
 800ad86:	47c0      	blx	r8
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d103      	bne.n	800ad94 <_printf_common+0xac>
 800ad8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad94:	3501      	adds	r5, #1
 800ad96:	e7c6      	b.n	800ad26 <_printf_common+0x3e>
 800ad98:	18e1      	adds	r1, r4, r3
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	2030      	movs	r0, #48	; 0x30
 800ad9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ada2:	4422      	add	r2, r4
 800ada4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ada8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800adac:	3302      	adds	r3, #2
 800adae:	e7c7      	b.n	800ad40 <_printf_common+0x58>
 800adb0:	2301      	movs	r3, #1
 800adb2:	4622      	mov	r2, r4
 800adb4:	4649      	mov	r1, r9
 800adb6:	4638      	mov	r0, r7
 800adb8:	47c0      	blx	r8
 800adba:	3001      	adds	r0, #1
 800adbc:	d0e6      	beq.n	800ad8c <_printf_common+0xa4>
 800adbe:	3601      	adds	r6, #1
 800adc0:	e7d9      	b.n	800ad76 <_printf_common+0x8e>
	...

0800adc4 <_printf_i>:
 800adc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adc8:	7e0f      	ldrb	r7, [r1, #24]
 800adca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800adcc:	2f78      	cmp	r7, #120	; 0x78
 800adce:	4691      	mov	r9, r2
 800add0:	4680      	mov	r8, r0
 800add2:	460c      	mov	r4, r1
 800add4:	469a      	mov	sl, r3
 800add6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800adda:	d807      	bhi.n	800adec <_printf_i+0x28>
 800addc:	2f62      	cmp	r7, #98	; 0x62
 800adde:	d80a      	bhi.n	800adf6 <_printf_i+0x32>
 800ade0:	2f00      	cmp	r7, #0
 800ade2:	f000 80d8 	beq.w	800af96 <_printf_i+0x1d2>
 800ade6:	2f58      	cmp	r7, #88	; 0x58
 800ade8:	f000 80a3 	beq.w	800af32 <_printf_i+0x16e>
 800adec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800adf4:	e03a      	b.n	800ae6c <_printf_i+0xa8>
 800adf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adfa:	2b15      	cmp	r3, #21
 800adfc:	d8f6      	bhi.n	800adec <_printf_i+0x28>
 800adfe:	a101      	add	r1, pc, #4	; (adr r1, 800ae04 <_printf_i+0x40>)
 800ae00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae04:	0800ae5d 	.word	0x0800ae5d
 800ae08:	0800ae71 	.word	0x0800ae71
 800ae0c:	0800aded 	.word	0x0800aded
 800ae10:	0800aded 	.word	0x0800aded
 800ae14:	0800aded 	.word	0x0800aded
 800ae18:	0800aded 	.word	0x0800aded
 800ae1c:	0800ae71 	.word	0x0800ae71
 800ae20:	0800aded 	.word	0x0800aded
 800ae24:	0800aded 	.word	0x0800aded
 800ae28:	0800aded 	.word	0x0800aded
 800ae2c:	0800aded 	.word	0x0800aded
 800ae30:	0800af7d 	.word	0x0800af7d
 800ae34:	0800aea1 	.word	0x0800aea1
 800ae38:	0800af5f 	.word	0x0800af5f
 800ae3c:	0800aded 	.word	0x0800aded
 800ae40:	0800aded 	.word	0x0800aded
 800ae44:	0800af9f 	.word	0x0800af9f
 800ae48:	0800aded 	.word	0x0800aded
 800ae4c:	0800aea1 	.word	0x0800aea1
 800ae50:	0800aded 	.word	0x0800aded
 800ae54:	0800aded 	.word	0x0800aded
 800ae58:	0800af67 	.word	0x0800af67
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	1d1a      	adds	r2, r3, #4
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	602a      	str	r2, [r5, #0]
 800ae64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e0a3      	b.n	800afb8 <_printf_i+0x1f4>
 800ae70:	6820      	ldr	r0, [r4, #0]
 800ae72:	6829      	ldr	r1, [r5, #0]
 800ae74:	0606      	lsls	r6, r0, #24
 800ae76:	f101 0304 	add.w	r3, r1, #4
 800ae7a:	d50a      	bpl.n	800ae92 <_printf_i+0xce>
 800ae7c:	680e      	ldr	r6, [r1, #0]
 800ae7e:	602b      	str	r3, [r5, #0]
 800ae80:	2e00      	cmp	r6, #0
 800ae82:	da03      	bge.n	800ae8c <_printf_i+0xc8>
 800ae84:	232d      	movs	r3, #45	; 0x2d
 800ae86:	4276      	negs	r6, r6
 800ae88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae8c:	485e      	ldr	r0, [pc, #376]	; (800b008 <_printf_i+0x244>)
 800ae8e:	230a      	movs	r3, #10
 800ae90:	e019      	b.n	800aec6 <_printf_i+0x102>
 800ae92:	680e      	ldr	r6, [r1, #0]
 800ae94:	602b      	str	r3, [r5, #0]
 800ae96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae9a:	bf18      	it	ne
 800ae9c:	b236      	sxthne	r6, r6
 800ae9e:	e7ef      	b.n	800ae80 <_printf_i+0xbc>
 800aea0:	682b      	ldr	r3, [r5, #0]
 800aea2:	6820      	ldr	r0, [r4, #0]
 800aea4:	1d19      	adds	r1, r3, #4
 800aea6:	6029      	str	r1, [r5, #0]
 800aea8:	0601      	lsls	r1, r0, #24
 800aeaa:	d501      	bpl.n	800aeb0 <_printf_i+0xec>
 800aeac:	681e      	ldr	r6, [r3, #0]
 800aeae:	e002      	b.n	800aeb6 <_printf_i+0xf2>
 800aeb0:	0646      	lsls	r6, r0, #25
 800aeb2:	d5fb      	bpl.n	800aeac <_printf_i+0xe8>
 800aeb4:	881e      	ldrh	r6, [r3, #0]
 800aeb6:	4854      	ldr	r0, [pc, #336]	; (800b008 <_printf_i+0x244>)
 800aeb8:	2f6f      	cmp	r7, #111	; 0x6f
 800aeba:	bf0c      	ite	eq
 800aebc:	2308      	moveq	r3, #8
 800aebe:	230a      	movne	r3, #10
 800aec0:	2100      	movs	r1, #0
 800aec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aec6:	6865      	ldr	r5, [r4, #4]
 800aec8:	60a5      	str	r5, [r4, #8]
 800aeca:	2d00      	cmp	r5, #0
 800aecc:	bfa2      	ittt	ge
 800aece:	6821      	ldrge	r1, [r4, #0]
 800aed0:	f021 0104 	bicge.w	r1, r1, #4
 800aed4:	6021      	strge	r1, [r4, #0]
 800aed6:	b90e      	cbnz	r6, 800aedc <_printf_i+0x118>
 800aed8:	2d00      	cmp	r5, #0
 800aeda:	d04d      	beq.n	800af78 <_printf_i+0x1b4>
 800aedc:	4615      	mov	r5, r2
 800aede:	fbb6 f1f3 	udiv	r1, r6, r3
 800aee2:	fb03 6711 	mls	r7, r3, r1, r6
 800aee6:	5dc7      	ldrb	r7, [r0, r7]
 800aee8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aeec:	4637      	mov	r7, r6
 800aeee:	42bb      	cmp	r3, r7
 800aef0:	460e      	mov	r6, r1
 800aef2:	d9f4      	bls.n	800aede <_printf_i+0x11a>
 800aef4:	2b08      	cmp	r3, #8
 800aef6:	d10b      	bne.n	800af10 <_printf_i+0x14c>
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	07de      	lsls	r6, r3, #31
 800aefc:	d508      	bpl.n	800af10 <_printf_i+0x14c>
 800aefe:	6923      	ldr	r3, [r4, #16]
 800af00:	6861      	ldr	r1, [r4, #4]
 800af02:	4299      	cmp	r1, r3
 800af04:	bfde      	ittt	le
 800af06:	2330      	movle	r3, #48	; 0x30
 800af08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af0c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800af10:	1b52      	subs	r2, r2, r5
 800af12:	6122      	str	r2, [r4, #16]
 800af14:	f8cd a000 	str.w	sl, [sp]
 800af18:	464b      	mov	r3, r9
 800af1a:	aa03      	add	r2, sp, #12
 800af1c:	4621      	mov	r1, r4
 800af1e:	4640      	mov	r0, r8
 800af20:	f7ff fee2 	bl	800ace8 <_printf_common>
 800af24:	3001      	adds	r0, #1
 800af26:	d14c      	bne.n	800afc2 <_printf_i+0x1fe>
 800af28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af2c:	b004      	add	sp, #16
 800af2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af32:	4835      	ldr	r0, [pc, #212]	; (800b008 <_printf_i+0x244>)
 800af34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800af38:	6829      	ldr	r1, [r5, #0]
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800af40:	6029      	str	r1, [r5, #0]
 800af42:	061d      	lsls	r5, r3, #24
 800af44:	d514      	bpl.n	800af70 <_printf_i+0x1ac>
 800af46:	07df      	lsls	r7, r3, #31
 800af48:	bf44      	itt	mi
 800af4a:	f043 0320 	orrmi.w	r3, r3, #32
 800af4e:	6023      	strmi	r3, [r4, #0]
 800af50:	b91e      	cbnz	r6, 800af5a <_printf_i+0x196>
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	f023 0320 	bic.w	r3, r3, #32
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	2310      	movs	r3, #16
 800af5c:	e7b0      	b.n	800aec0 <_printf_i+0xfc>
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	f043 0320 	orr.w	r3, r3, #32
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	2378      	movs	r3, #120	; 0x78
 800af68:	4828      	ldr	r0, [pc, #160]	; (800b00c <_printf_i+0x248>)
 800af6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af6e:	e7e3      	b.n	800af38 <_printf_i+0x174>
 800af70:	0659      	lsls	r1, r3, #25
 800af72:	bf48      	it	mi
 800af74:	b2b6      	uxthmi	r6, r6
 800af76:	e7e6      	b.n	800af46 <_printf_i+0x182>
 800af78:	4615      	mov	r5, r2
 800af7a:	e7bb      	b.n	800aef4 <_printf_i+0x130>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	6826      	ldr	r6, [r4, #0]
 800af80:	6961      	ldr	r1, [r4, #20]
 800af82:	1d18      	adds	r0, r3, #4
 800af84:	6028      	str	r0, [r5, #0]
 800af86:	0635      	lsls	r5, r6, #24
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	d501      	bpl.n	800af90 <_printf_i+0x1cc>
 800af8c:	6019      	str	r1, [r3, #0]
 800af8e:	e002      	b.n	800af96 <_printf_i+0x1d2>
 800af90:	0670      	lsls	r0, r6, #25
 800af92:	d5fb      	bpl.n	800af8c <_printf_i+0x1c8>
 800af94:	8019      	strh	r1, [r3, #0]
 800af96:	2300      	movs	r3, #0
 800af98:	6123      	str	r3, [r4, #16]
 800af9a:	4615      	mov	r5, r2
 800af9c:	e7ba      	b.n	800af14 <_printf_i+0x150>
 800af9e:	682b      	ldr	r3, [r5, #0]
 800afa0:	1d1a      	adds	r2, r3, #4
 800afa2:	602a      	str	r2, [r5, #0]
 800afa4:	681d      	ldr	r5, [r3, #0]
 800afa6:	6862      	ldr	r2, [r4, #4]
 800afa8:	2100      	movs	r1, #0
 800afaa:	4628      	mov	r0, r5
 800afac:	f7f5 f918 	bl	80001e0 <memchr>
 800afb0:	b108      	cbz	r0, 800afb6 <_printf_i+0x1f2>
 800afb2:	1b40      	subs	r0, r0, r5
 800afb4:	6060      	str	r0, [r4, #4]
 800afb6:	6863      	ldr	r3, [r4, #4]
 800afb8:	6123      	str	r3, [r4, #16]
 800afba:	2300      	movs	r3, #0
 800afbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afc0:	e7a8      	b.n	800af14 <_printf_i+0x150>
 800afc2:	6923      	ldr	r3, [r4, #16]
 800afc4:	462a      	mov	r2, r5
 800afc6:	4649      	mov	r1, r9
 800afc8:	4640      	mov	r0, r8
 800afca:	47d0      	blx	sl
 800afcc:	3001      	adds	r0, #1
 800afce:	d0ab      	beq.n	800af28 <_printf_i+0x164>
 800afd0:	6823      	ldr	r3, [r4, #0]
 800afd2:	079b      	lsls	r3, r3, #30
 800afd4:	d413      	bmi.n	800affe <_printf_i+0x23a>
 800afd6:	68e0      	ldr	r0, [r4, #12]
 800afd8:	9b03      	ldr	r3, [sp, #12]
 800afda:	4298      	cmp	r0, r3
 800afdc:	bfb8      	it	lt
 800afde:	4618      	movlt	r0, r3
 800afe0:	e7a4      	b.n	800af2c <_printf_i+0x168>
 800afe2:	2301      	movs	r3, #1
 800afe4:	4632      	mov	r2, r6
 800afe6:	4649      	mov	r1, r9
 800afe8:	4640      	mov	r0, r8
 800afea:	47d0      	blx	sl
 800afec:	3001      	adds	r0, #1
 800afee:	d09b      	beq.n	800af28 <_printf_i+0x164>
 800aff0:	3501      	adds	r5, #1
 800aff2:	68e3      	ldr	r3, [r4, #12]
 800aff4:	9903      	ldr	r1, [sp, #12]
 800aff6:	1a5b      	subs	r3, r3, r1
 800aff8:	42ab      	cmp	r3, r5
 800affa:	dcf2      	bgt.n	800afe2 <_printf_i+0x21e>
 800affc:	e7eb      	b.n	800afd6 <_printf_i+0x212>
 800affe:	2500      	movs	r5, #0
 800b000:	f104 0619 	add.w	r6, r4, #25
 800b004:	e7f5      	b.n	800aff2 <_printf_i+0x22e>
 800b006:	bf00      	nop
 800b008:	0800d5f2 	.word	0x0800d5f2
 800b00c:	0800d603 	.word	0x0800d603

0800b010 <memmove>:
 800b010:	4288      	cmp	r0, r1
 800b012:	b510      	push	{r4, lr}
 800b014:	eb01 0402 	add.w	r4, r1, r2
 800b018:	d902      	bls.n	800b020 <memmove+0x10>
 800b01a:	4284      	cmp	r4, r0
 800b01c:	4623      	mov	r3, r4
 800b01e:	d807      	bhi.n	800b030 <memmove+0x20>
 800b020:	1e43      	subs	r3, r0, #1
 800b022:	42a1      	cmp	r1, r4
 800b024:	d008      	beq.n	800b038 <memmove+0x28>
 800b026:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b02a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b02e:	e7f8      	b.n	800b022 <memmove+0x12>
 800b030:	4402      	add	r2, r0
 800b032:	4601      	mov	r1, r0
 800b034:	428a      	cmp	r2, r1
 800b036:	d100      	bne.n	800b03a <memmove+0x2a>
 800b038:	bd10      	pop	{r4, pc}
 800b03a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b03e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b042:	e7f7      	b.n	800b034 <memmove+0x24>

0800b044 <_realloc_r>:
 800b044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b048:	4680      	mov	r8, r0
 800b04a:	4614      	mov	r4, r2
 800b04c:	460e      	mov	r6, r1
 800b04e:	b921      	cbnz	r1, 800b05a <_realloc_r+0x16>
 800b050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b054:	4611      	mov	r1, r2
 800b056:	f7ff bad9 	b.w	800a60c <_malloc_r>
 800b05a:	b92a      	cbnz	r2, 800b068 <_realloc_r+0x24>
 800b05c:	f7ff fa6a 	bl	800a534 <_free_r>
 800b060:	4625      	mov	r5, r4
 800b062:	4628      	mov	r0, r5
 800b064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b068:	f000 f81b 	bl	800b0a2 <_malloc_usable_size_r>
 800b06c:	4284      	cmp	r4, r0
 800b06e:	4607      	mov	r7, r0
 800b070:	d802      	bhi.n	800b078 <_realloc_r+0x34>
 800b072:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b076:	d812      	bhi.n	800b09e <_realloc_r+0x5a>
 800b078:	4621      	mov	r1, r4
 800b07a:	4640      	mov	r0, r8
 800b07c:	f7ff fac6 	bl	800a60c <_malloc_r>
 800b080:	4605      	mov	r5, r0
 800b082:	2800      	cmp	r0, #0
 800b084:	d0ed      	beq.n	800b062 <_realloc_r+0x1e>
 800b086:	42bc      	cmp	r4, r7
 800b088:	4622      	mov	r2, r4
 800b08a:	4631      	mov	r1, r6
 800b08c:	bf28      	it	cs
 800b08e:	463a      	movcs	r2, r7
 800b090:	f7ff fa24 	bl	800a4dc <memcpy>
 800b094:	4631      	mov	r1, r6
 800b096:	4640      	mov	r0, r8
 800b098:	f7ff fa4c 	bl	800a534 <_free_r>
 800b09c:	e7e1      	b.n	800b062 <_realloc_r+0x1e>
 800b09e:	4635      	mov	r5, r6
 800b0a0:	e7df      	b.n	800b062 <_realloc_r+0x1e>

0800b0a2 <_malloc_usable_size_r>:
 800b0a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0a6:	1f18      	subs	r0, r3, #4
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	bfbc      	itt	lt
 800b0ac:	580b      	ldrlt	r3, [r1, r0]
 800b0ae:	18c0      	addlt	r0, r0, r3
 800b0b0:	4770      	bx	lr
	...

0800b0b4 <_init>:
 800b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b6:	bf00      	nop
 800b0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ba:	bc08      	pop	{r3}
 800b0bc:	469e      	mov	lr, r3
 800b0be:	4770      	bx	lr

0800b0c0 <_fini>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	bf00      	nop
 800b0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0c6:	bc08      	pop	{r3}
 800b0c8:	469e      	mov	lr, r3
 800b0ca:	4770      	bx	lr
