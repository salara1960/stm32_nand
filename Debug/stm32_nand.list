
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b5c  0800d738  0800d738  0001d738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010294  08010294  00030128  2**0
                  CONTENTS
  4 .ARM          00000008  08010294  08010294  00020294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801029c  0801029c  00030128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801029c  0801029c  0002029c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080102a0  080102a0  000202a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  080102a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030128  2**0
                  CONTENTS
 10 .bss          00007900  20000128  20000128  00030128  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20007a28  20007a28  00030128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024181  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004262  00000000  00000000  000542d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b70  00000000  00000000  00058540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005dc6  00000000  00000000  0005a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000207d6  00000000  00000000  0005fe76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3fc9  00000000  00000000  0008064c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164615  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001a30  00000000  00000000  00164668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007cf0  00000000  00000000  00166098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d720 	.word	0x0800d720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	0800d720 	.word	0x0800d720

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f003 ffa7 	bl	8004bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f881 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa2d 	bl	80010c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9f5 	bl	800105c <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f97d 	bl	8000f70 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8e3 	bl	8000e40 <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 facb 	bl	8001214 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9c3 	bl	8001008 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f93f 	bl	8000f04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(150);
 8000c8c:	2096      	movs	r0, #150	; 0x96
 8000c8e:	f003 ffd3 	bl	8004c38 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4828      	ldr	r0, [pc, #160]	; (8000d38 <main+0xdc>)
 8000c98:	f004 fe72 	bl	8005980 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4826      	ldr	r0, [pc, #152]	; (8000d3c <main+0xe0>)
 8000ca4:	f004 fe6c 	bl	8005980 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000ca8:	2096      	movs	r0, #150	; 0x96
 8000caa:	f003 ffc5 	bl	8004c38 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4821      	ldr	r0, [pc, #132]	; (8000d38 <main+0xdc>)
 8000cb4:	f004 fe64 	bl	8005980 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	481f      	ldr	r0, [pc, #124]	; (8000d3c <main+0xe0>)
 8000cc0:	f004 fe5e 	bl	8005980 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <main+0xe4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 ff51 	bl	8007b7c <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <main+0xe8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4919      	ldr	r1, [pc, #100]	; (8000d48 <main+0xec>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f007 fbc9 	bl	800847a <HAL_UART_Receive_IT>

  //set_Date(epoch);

  ST7789_Reset();
 8000ce8:	f003 f9d8 	bl	800409c <ST7789_Reset>
  ST7789_Init(back_color);
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <main+0xf0>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 f9ed 	bl	80040d0 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cf6:	f008 fd4d 	bl	8009794 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <main+0xf4>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f008 fe41 	bl	8009986 <osSemaphoreNew>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <main+0xf8>)
 8000d08:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(s_qcmd), &myQue_attributes);
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <main+0xfc>)
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	2010      	movs	r0, #16
 8000d10:	f008 fec2 	bl	8009a98 <osMessageQueueNew>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <main+0x100>)
 8000d18:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <main+0x104>)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <main+0x108>)
 8000d20:	f008 fd84 	bl	800982c <osThreadNew>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <main+0x10c>)
 8000d28:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d2a:	f008 fd59 	bl	80097e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f003 ff82 	bl	8004c38 <HAL_Delay>
 8000d34:	e7fb      	b.n	8000d2e <main+0xd2>
 8000d36:	bf00      	nop
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	20000078 	.word	0x20000078
 8000d44:	2000007c 	.word	0x2000007c
 8000d48:	20001368 	.word	0x20001368
 8000d4c:	2000136e 	.word	0x2000136e
 8000d50:	08010070 	.word	0x08010070
 8000d54:	20000350 	.word	0x20000350
 8000d58:	08010058 	.word	0x08010058
 8000d5c:	2000034c 	.word	0x2000034c
 8000d60:	08010034 	.word	0x08010034
 8000d64:	08002d39 	.word	0x08002d39
 8000d68:	20000348 	.word	0x20000348

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	; 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2230      	movs	r2, #48	; 0x30
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00b feec 	bl	800cb58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000de0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dea:	2307      	movs	r3, #7
 8000dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	4618      	mov	r0, r3
 8000df4:	f005 f8d8 	bl	8005fa8 <HAL_RCC_OscConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dfe:	f002 ffad 	bl	8003d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	230f      	movs	r3, #15
 8000e04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2302      	movs	r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2105      	movs	r1, #5
 8000e20:	4618      	mov	r0, r3
 8000e22:	f005 fb39 	bl	8006498 <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e2c:	f002 ff96 	bl	8003d5c <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3750      	adds	r7, #80	; 0x50
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e5a:	4a28      	ldr	r2, [pc, #160]	; (8000efc <MX_RTC_Init+0xbc>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e66:	227f      	movs	r2, #127	; 0x7f
 8000e68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e6c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e70:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e86:	f005 fe3b 	bl	8006b00 <HAL_RTC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e90:	f002 ff64 	bl	8003d5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8000e94:	2315      	movs	r3, #21
 8000e96:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8000e98:	2334      	movs	r3, #52	; 0x34
 8000e9a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000eb0:	f005 fe9c 	bl	8006bec <HAL_RTC_SetTime>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eba:	f002 ff4f 	bl	8003d5c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000ed6:	f005 ff81 	bl	8006ddc <HAL_RTC_SetDate>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000ee0:	f002 ff3c 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  set_Date(epoch);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 fa37 	bl	800235c <set_Date>

  /* USER CODE END RTC_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000144 	.word	0x20000144
 8000efc:	40002800 	.word	0x40002800
 8000f00:	2000006c 	.word	0x2000006c

08000f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_SPI1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f56:	f006 f8d1 	bl	80070fc <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f60:	f002 fefc 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000164 	.word	0x20000164
 8000f6c:	40013000 	.word	0x40013000

08000f70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f96:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fa4:	22f9      	movs	r2, #249	; 0xf9
 8000fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_TIM2_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb6:	f006 fd91 	bl	8007adc <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fc0:	f002 fecc 	bl	8003d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fd2:	f006 ff4b 	bl	8007e6c <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fdc:	f002 febe 	bl	8003d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fee:	f007 f967 	bl	80082c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff8:	f002 feb0 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000021c 	.word	0x2000021c

08001008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_USART3_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001014:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001018:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001040:	f007 f9ce 	bl	80083e0 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f002 fe87 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000264 	.word	0x20000264
 8001058:	40004800 	.word	0x40004800

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_DMA_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <MX_DMA_Init+0x68>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_DMA_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_DMA_Init+0x68>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <MX_DMA_Init+0x68>)
 8001088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <MX_DMA_Init+0x68>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	200e      	movs	r0, #14
 80010a0:	f003 fea6 	bl	8004df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010a4:	200e      	movs	r0, #14
 80010a6:	f003 febf 	bl	8004e28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2103      	movs	r1, #3
 80010ae:	203b      	movs	r0, #59	; 0x3b
 80010b0:	f003 fe9e 	bl	8004df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010b4:	203b      	movs	r0, #59	; 0x3b
 80010b6:	f003 feb7 	bl	8004e28 <HAL_NVIC_EnableIRQ>

}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a47      	ldr	r2, [pc, #284]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b45      	ldr	r3, [pc, #276]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a40      	ldr	r2, [pc, #256]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <MX_GPIO_Init+0x13c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <MX_GPIO_Init+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a39      	ldr	r2, [pc, #228]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a32      	ldr	r2, [pc, #200]	; (8001204 <MX_GPIO_Init+0x13c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_GPIO_Init+0x13c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	210e      	movs	r1, #14
 800118a:	481f      	ldr	r0, [pc, #124]	; (8001208 <MX_GPIO_Init+0x140>)
 800118c:	f004 fbf8 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	481d      	ldr	r0, [pc, #116]	; (800120c <MX_GPIO_Init+0x144>)
 8001198:	f004 fbf2 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	481b      	ldr	r0, [pc, #108]	; (8001210 <MX_GPIO_Init+0x148>)
 80011a2:	f004 fbed 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 80011a6:	230e      	movs	r3, #14
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0x140>)
 80011be:	f004 fa43 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0x144>)
 80011dc:	f004 fa34 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e8:	2302      	movs	r3, #2
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_GPIO_Init+0x148>)
 80011f8:	f004 fa26 	bl	8005648 <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40020800 	.word	0x40020800

08001214 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 800121a:	4b58      	ldr	r3, [pc, #352]	; (800137c <MX_FSMC_Init+0x168>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 800123a:	4b51      	ldr	r3, [pc, #324]	; (8001380 <MX_FSMC_Init+0x16c>)
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <MX_FSMC_Init+0x170>)
 800123e:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001240:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001242:	2210      	movs	r2, #16
 8001244:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001246:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001248:	2202      	movs	r2, #2
 800124a:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <MX_FSMC_Init+0x16c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001252:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001258:	4b49      	ldr	r3, [pc, #292]	; (8001380 <MX_FSMC_Init+0x16c>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800125e:	4b48      	ldr	r3, [pc, #288]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001264:	4b46      	ldr	r3, [pc, #280]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <MX_FSMC_Init+0x16c>)
 800126c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 8001272:	4b43      	ldr	r3, [pc, #268]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001274:	2210      	movs	r2, #16
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 131072;
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <MX_FSMC_Init+0x16c>)
 800127a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 8001280:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001286:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <MX_FSMC_Init+0x16c>)
 800128a:	2201      	movs	r2, #1
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8001296:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001298:	2200      	movs	r2, #0
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800129e:	23fc      	movs	r3, #252	; 0xfc
 80012a0:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 80012a2:	23fc      	movs	r3, #252	; 0xfc
 80012a4:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 80012a6:	23fc      	movs	r3, #252	; 0xfc
 80012a8:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 80012aa:	23fc      	movs	r3, #252	; 0xfc
 80012ac:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 80012ae:	23fc      	movs	r3, #252	; 0xfc
 80012b0:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 80012b2:	23fc      	movs	r3, #252	; 0xfc
 80012b4:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 80012b6:	23fc      	movs	r3, #252	; 0xfc
 80012b8:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 80012ba:	23fc      	movs	r3, #252	; 0xfc
 80012bc:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012be:	463a      	mov	r2, r7
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	482e      	ldr	r0, [pc, #184]	; (8001380 <MX_FSMC_Init+0x16c>)
 80012c8:	f004 fb8d 	bl	80059e6 <HAL_NAND_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 80012d2:	f002 fd43 	bl	8003d5c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

    if (HAL_NAND_ECC_Disable(&hnand1) != HAL_OK) devError |= devNAND;
 80012d6:	482a      	ldr	r0, [pc, #168]	; (8001380 <MX_FSMC_Init+0x16c>)
 80012d8:	f004 fe09 	bl	8005eee <HAL_NAND_ECC_Disable>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <MX_FSMC_Init+0xdc>
 80012e2:	4b29      	ldr	r3, [pc, #164]	; (8001388 <MX_FSMC_Init+0x174>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	f043 0320 	orr.w	r3, r3, #32
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <MX_FSMC_Init+0x174>)
 80012ee:	801a      	strh	r2, [r3, #0]
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    if (HAL_NAND_RegisterCallback(&hnand1, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif


    HAL_Delay(100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f003 fca1 	bl	8004c38 <HAL_Delay>

    if (NAND_Read_ID(&hnand1, &nandID) == HAL_OK) {//read ID information from chip
 80012f6:	4925      	ldr	r1, [pc, #148]	; (800138c <MX_FSMC_Init+0x178>)
 80012f8:	4821      	ldr	r0, [pc, #132]	; (8001380 <MX_FSMC_Init+0x16c>)
 80012fa:	f000 f87d 	bl	80013f8 <NAND_Read_ID>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d136      	bne.n	8001372 <MX_FSMC_Init+0x15e>

    	nandState = HAL_NAND_GetState(&hnand1);
 8001304:	481e      	ldr	r0, [pc, #120]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001306:	f004 fe1b 	bl	8005f40 <HAL_NAND_GetState>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <MX_FSMC_Init+0x17c>)
 8001310:	701a      	strb	r2, [r3, #0]

    	memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 8001312:	4a20      	ldr	r2, [pc, #128]	; (8001394 <MX_FSMC_Init+0x180>)
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_FSMC_Init+0x16c>)
 8001316:	4615      	mov	r5, r2
 8001318:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800131c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001320:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001324:	e885 0003 	stmia.w	r5, {r0, r1}

    	total_pages = (chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr;
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_FSMC_Init+0x180>)
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <MX_FSMC_Init+0x180>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	fbb2 f3f3 	udiv	r3, r2, r3
 8001334:	4a17      	ldr	r2, [pc, #92]	; (8001394 <MX_FSMC_Init+0x180>)
 8001336:	68d2      	ldr	r2, [r2, #12]
 8001338:	fb02 f303 	mul.w	r3, r2, r3
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <MX_FSMC_Init+0x184>)
 800133e:	6013      	str	r3, [r2, #0]
    	total_bytes = chipConf.BlockSize * chipConf.BlockNbr;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_FSMC_Init+0x180>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <MX_FSMC_Init+0x180>)
 8001346:	68d2      	ldr	r2, [r2, #12]
 8001348:	fb02 f303 	mul.w	r3, r2, r3
 800134c:	4a13      	ldr	r2, [pc, #76]	; (800139c <MX_FSMC_Init+0x188>)
 800134e:	6013      	str	r3, [r2, #0]

    	if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_FSMC_Init+0x180>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <MX_FSMC_Init+0x14e>
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_FSMC_Init+0x180>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001360:	d907      	bls.n	8001372 <MX_FSMC_Init+0x15e>
    		//rdBuf = (uint8_t *)calloc(1, chipConf.PageSize);
    		//wrBuf = (uint8_t *)calloc(1, chipConf.PageSize);
    		//if (!rdBuf || !wrBuf) devError |= devMEM;
    	} else {
    		devError |= devNAND;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_FSMC_Init+0x174>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_FSMC_Init+0x174>)
 800136e:	801a      	strh	r2, [r3, #0]

    }


  /* USER CODE END FSMC_Init 2 */
}
 8001370:	e7ff      	b.n	8001372 <MX_FSMC_Init+0x15e>
 8001372:	bf00      	nop
 8001374:	3720      	adds	r7, #32
 8001376:	46bd      	mov	sp, r7
 8001378:	bdb0      	pop	{r4, r5, r7, pc}
 800137a:	bf00      	nop
 800137c:	2000138c 	.word	0x2000138c
 8001380:	20000308 	.word	0x20000308
 8001384:	a0000060 	.word	0xa0000060
 8001388:	20000354 	.word	0x20000354
 800138c:	20001390 	.word	0x20001390
 8001390:	2000008d 	.word	0x2000008d
 8001394:	20001398 	.word	0x20001398
 8001398:	20001370 	.word	0x20001370
 800139c:	20001374 	.word	0x20001374

080013a0 <nand_PageToBlock>:

/* USER CODE BEGIN 4 */

//-------------------------------------------------------------------------------------------
uint32_t nand_PageToBlock(const uint32_t page)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    return (page * chipConf.PageSize) / chipConf.BlockSize;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <nand_PageToBlock+0x28>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	fb03 f202 	mul.w	r2, r3, r2
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <nand_PageToBlock+0x28>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20001398 	.word	0x20001398

080013cc <nand_BlockToPage>:
//-------------------------------------------------------------------------------------------
uint32_t nand_BlockToPage(const uint32_t blk)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <nand_BlockToPage+0x28>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	fb03 f202 	mul.w	r2, r3, r2
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <nand_BlockToPage+0x28>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20001398 	.word	0x20001398

080013f8 <NAND_Read_ID>:
//-----------------------------------------------------------------------------

HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d101      	bne.n	8001412 <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 800140e:	2302      	movs	r3, #2
 8001410:	e059      	b.n	80014c6 <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b01      	cmp	r3, #1
 800141c:	d152      	bne.n	80014c4 <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <NAND_Read_ID+0x34>
 8001428:	2302      	movs	r3, #2
 800142a:	e04c      	b.n	80014c6 <NAND_Read_ID+0xce>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <NAND_Read_ID+0xdc>)
 800143e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001442:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <NAND_Read_ID+0xdc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144c:	2290      	movs	r2, #144	; 0x90
 800144e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001450:	f3bf 8f4f 	dsb	sy
}
 8001454:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <NAND_Read_ID+0xdc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d123      	bne.n	80014b8 <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <NAND_Read_ID+0xdc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <NAND_Read_ID+0xdc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3310      	adds	r3, #16
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	b2da      	uxtb	r2, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	0c1b      	lsrs	r3, r3, #16
 8001498:	b2da      	uxtb	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	0e1b      	lsrs	r3, r3, #24
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	711a      	strb	r2, [r3, #4]

	    	hnand->State = HAL_NAND_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e000      	b.n	80014c6 <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20001378 	.word	0x20001378

080014d8 <NAND_Read_Page_8b>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef  NAND_Read_Page_8b(NAND_HandleTypeDef *hnand,
									   NAND_AddressTypeDef *pAddress,
									   uint8_t *pBuffer,
                                       uint32_t NumPageToRead)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b090      	sub	sp, #64	; 0x40
 80014dc:	af04      	add	r7, sp, #16
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
uint32_t numpagesread = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t nbpages = NumPageToRead;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t *buff = pBuffer;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24

	// Check the NAND controller state
	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d101      	bne.n	8001502 <NAND_Read_Page_8b+0x2a>
		return HAL_BUSY;
 80014fe:	2302      	movs	r3, #2
 8001500:	e148      	b.n	8001794 <NAND_Read_Page_8b+0x2bc>
	} else if (hnand->State == HAL_NAND_STATE_READY) {
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b01      	cmp	r3, #1
 800150c:	f040 8141 	bne.w	8001792 <NAND_Read_Page_8b+0x2ba>
		__HAL_LOCK(hnand);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <NAND_Read_Page_8b+0x46>
 800151a:	2302      	movs	r3, #2
 800151c:	e13a      	b.n	8001794 <NAND_Read_Page_8b+0x2bc>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2202      	movs	r2, #2
 800152a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	    uint32_t deviceaddress = devAdr;
 800152e:	4b9b      	ldr	r3, [pc, #620]	; (800179c <NAND_Read_Page_8b+0x2c4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	61bb      	str	r3, [r7, #24]
	    uint32_t nandaddress = pAddress->Page;//ARRAY_ADDRESS(pAddress, hnand);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	623b      	str	r3, [r7, #32]

	    if (dbg > logOn)
 800153a:	4b99      	ldr	r3, [pc, #612]	; (80017a0 <NAND_Read_Page_8b+0x2c8>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	f240 8110 	bls.w	8001764 <NAND_Read_Page_8b+0x28c>
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
	    		  __func__,
				  nandaddress,
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	881b      	ldrh	r3, [r3, #0]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001548:	461a      	mov	r2, r3
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	885b      	ldrh	r3, [r3, #2]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800154e:	4619      	mov	r1, r3
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	889b      	ldrh	r3, [r3, #4]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001554:	4618      	mov	r0, r3
 8001556:	4b93      	ldr	r3, [pc, #588]	; (80017a4 <NAND_Read_Page_8b+0x2cc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	9303      	str	r3, [sp, #12]
 800155c:	9002      	str	r0, [sp, #8]
 800155e:	9101      	str	r1, [sp, #4]
 8001560:	9200      	str	r2, [sp, #0]
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	4a90      	ldr	r2, [pc, #576]	; (80017a8 <NAND_Read_Page_8b+0x2d0>)
 8001566:	4991      	ldr	r1, [pc, #580]	; (80017ac <NAND_Read_Page_8b+0x2d4>)
 8001568:	2001      	movs	r0, #1
 800156a:	f000 fff1 	bl	8002550 <Report>

	    // Page(s) read loop
	    while (nbpages && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 800156e:	e0f9      	b.n	8001764 <NAND_Read_Page_8b+0x28c>
	    	// Send read page command sequence
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800157a:	f3bf 8f4f 	dsb	sy
}
 800157e:	bf00      	nop
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
	    		__DSB();
	    	}
	    	*/
	    	//---------------------------------------------------------------------------------------
	    	if ((hnand->Config.PageSize) <= 512U) {
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001588:	d848      	bhi.n	800161c <NAND_Read_Page_8b+0x144>
	    		if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U) {
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159a:	d21a      	bcs.n	80015d2 <NAND_Read_Page_8b+0xfa>
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015a6:	f3bf 8f4f 	dsb	sy
}
 80015aa:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b2:	6a3a      	ldr	r2, [r7, #32]
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015b8:	f3bf 8f4f 	dsb	sy
}
 80015bc:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	0a1a      	lsrs	r2, r3, #8
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015cc:	f3bf 8f4f 	dsb	sy
}
 80015d0:	e07d      	b.n	80016ce <NAND_Read_Page_8b+0x1f6>
	    			__DSB();
	    		} else {/* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015dc:	f3bf 8f4f 	dsb	sy
}
 80015e0:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	6a3a      	ldr	r2, [r7, #32]
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	0a1a      	lsrs	r2, r3, #8
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001602:	f3bf 8f4f 	dsb	sy
}
 8001606:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	0c1a      	lsrs	r2, r3, #16
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001616:	f3bf 8f4f 	dsb	sy
}
 800161a:	e058      	b.n	80016ce <NAND_Read_Page_8b+0x1f6>
	    			__DSB();
	    	    }
	    	} else {/* (hnand->Config.PageSize) > 512 */
	    		if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U) {
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162c:	d222      	bcs.n	8001674 <NAND_Read_Page_8b+0x19c>
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001638:	f3bf 8f4f 	dsb	sy
}
 800163c:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001648:	f3bf 8f4f 	dsb	sy
}
 800164c:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	6a3a      	ldr	r2, [r7, #32]
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800165a:	f3bf 8f4f 	dsb	sy
}
 800165e:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	0a1a      	lsrs	r2, r3, #8
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800166e:	f3bf 8f4f 	dsb	sy
}
 8001672:	e02c      	b.n	80016ce <NAND_Read_Page_8b+0x1f6>
	    			__DSB();
	    		} else {/* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800167e:	f3bf 8f4f 	dsb	sy
}
 8001682:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800168e:	f3bf 8f4f 	dsb	sy
}
 8001692:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169a:	6a3a      	ldr	r2, [r7, #32]
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016a0:	f3bf 8f4f 	dsb	sy
}
 80016a4:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	0a1a      	lsrs	r2, r3, #8
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016b4:	f3bf 8f4f 	dsb	sy
}
 80016b8:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	0c1a      	lsrs	r2, r3, #16
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016c8:	f3bf 8f4f 	dsb	sy
}
 80016cc:	bf00      	nop
	    			__DSB();
	    	    }
	    	}
	    	//---------------------------------------------------------------------------------------
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	2230      	movs	r2, #48	; 0x30
 80016d6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016d8:	f3bf 8f4f 	dsb	sy
}
 80016dc:	bf00      	nop
	    	__DSB();


	    	if (hnand->Config.ExtraCommandEnable == ENABLE) {
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d123      	bne.n	8001730 <NAND_Read_Page_8b+0x258>
	    		uint32_t tickstart = HAL_GetTick();
 80016e8:	f003 fa9a 	bl	8004c20 <HAL_GetTick>
 80016ec:	6178      	str	r0, [r7, #20]
	    		while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 80016ee:	e011      	b.n	8001714 <NAND_Read_Page_8b+0x23c>
	    			if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 80016f0:	f003 fa96 	bl	8004c20 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fe:	d909      	bls.n	8001714 <NAND_Read_Page_8b+0x23c>
	    				hnand->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2203      	movs	r2, #3
 8001704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    				__HAL_UNLOCK(hnand);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2020 	strb.w	r2, [r3, #32]
	    				return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e03f      	b.n	8001794 <NAND_Read_Page_8b+0x2bc>
	    		while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f004 fc21 	bl	8005f5c <HAL_NAND_Read_Status>
 800171a:	4603      	mov	r3, r0
 800171c:	2b40      	cmp	r3, #64	; 0x40
 800171e:	d1e7      	bne.n	80016f0 <NAND_Read_Page_8b+0x218>
	    			}
	    		}

	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800172a:	f3bf 8f4f 	dsb	sy
}
 800172e:	bf00      	nop
	    		__DSB();
	    	}

	    	// Get Data into Buffer
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	e008      	b.n	8001748 <NAND_Read_Page_8b+0x270>
	    		*buff++ = *(uint8_t *)deviceaddress;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	1c59      	adds	r1, r3, #1
 800173c:	6279      	str	r1, [r7, #36]	; 0x24
 800173e:	7812      	ldrb	r2, [r2, #0]
 8001740:	701a      	strb	r2, [r3, #0]
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3301      	adds	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	429a      	cmp	r2, r3
 8001750:	d3f1      	bcc.n	8001736 <NAND_Read_Page_8b+0x25e>
	    	}

	    	numpagesread++;// Increment read pages number
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	3301      	adds	r3, #1
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	nbpages--;// Decrement pages to read
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175a:	3b01      	subs	r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
	    	nandaddress = (uint32_t)(nandaddress + 1U);// Increment the NAND address
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	3301      	adds	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
	    while (nbpages && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 8001764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001766:	2b00      	cmp	r3, #0
 8001768:	d009      	beq.n	800177e <NAND_Read_Page_8b+0x2a6>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001772:	fb02 f303 	mul.w	r3, r2, r3
 8001776:	6a3a      	ldr	r2, [r7, #32]
 8001778:	429a      	cmp	r2, r3
 800177a:	f4ff aef9 	bcc.w	8001570 <NAND_Read_Page_8b+0x98>
	    }

	    hnand->State = HAL_NAND_STATE_READY;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    __HAL_UNLOCK(hnand);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <NAND_Read_Page_8b+0x2bc>
	    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3730      	adds	r7, #48	; 0x30
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20001378 	.word	0x20001378
 80017a0:	20000070 	.word	0x20000070
 80017a4:	20000004 	.word	0x20000004
 80017a8:	08010080 	.word	0x08010080
 80017ac:	0800d890 	.word	0x0800d890

080017b0 <NAND_Write_Page_8b>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef  NAND_Write_Page_8b(NAND_HandleTypeDef *hnand,
									    NAND_AddressTypeDef *pAddress,
									    uint8_t *pBuffer,
                                        uint32_t NumPageToWrite)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08e      	sub	sp, #56	; 0x38
 80017b4:	af04      	add	r7, sp, #16
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
uint32_t numpageswritten = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t nbpages = NumPageToWrite;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	623b      	str	r3, [r7, #32]

	/* Check the NAND controller state */
	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d101      	bne.n	80017d6 <NAND_Write_Page_8b+0x26>
		return HAL_BUSY;
 80017d2:	2302      	movs	r3, #2
 80017d4:	e146      	b.n	8001a64 <NAND_Write_Page_8b+0x2b4>
	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	f040 813f 	bne.w	8001a62 <NAND_Write_Page_8b+0x2b2>

	    __HAL_LOCK(hnand);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <NAND_Write_Page_8b+0x42>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e138      	b.n	8001a64 <NAND_Write_Page_8b+0x2b4>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2202      	movs	r2, #2
 80017fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	    uint32_t deviceaddress = devAdr;
 8001802:	4b9a      	ldr	r3, [pc, #616]	; (8001a6c <NAND_Write_Page_8b+0x2bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	617b      	str	r3, [r7, #20]
	    uint32_t nandaddress = pAddress->Page;//ARRAY_ADDRESS(pAddress, hnand);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	61fb      	str	r3, [r7, #28]

	    if (dbg > logOn)
 800180e:	4b98      	ldr	r3, [pc, #608]	; (8001a70 <NAND_Write_Page_8b+0x2c0>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	f240 810e 	bls.w	8001a34 <NAND_Write_Page_8b+0x284>
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
	    	      __func__,
	    		  nandaddress,
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	881b      	ldrh	r3, [r3, #0]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800181c:	461a      	mov	r2, r3
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	885b      	ldrh	r3, [r3, #2]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001822:	4619      	mov	r1, r3
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	889b      	ldrh	r3, [r3, #4]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001828:	4618      	mov	r0, r3
 800182a:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <NAND_Write_Page_8b+0x2c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	9303      	str	r3, [sp, #12]
 8001830:	9002      	str	r0, [sp, #8]
 8001832:	9101      	str	r1, [sp, #4]
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4a8f      	ldr	r2, [pc, #572]	; (8001a78 <NAND_Write_Page_8b+0x2c8>)
 800183a:	4990      	ldr	r1, [pc, #576]	; (8001a7c <NAND_Write_Page_8b+0x2cc>)
 800183c:	2001      	movs	r0, #1
 800183e:	f000 fe87 	bl	8002550 <Report>

	    /* Page(s) write loop */
	    while ((nbpages > 0) && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 8001842:	e0f7      	b.n	8001a34 <NAND_Write_Page_8b+0x284>
	    	/* Send write page command sequence */
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800184e:	f3bf 8f4f 	dsb	sy
}
 8001852:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185a:	2280      	movs	r2, #128	; 0x80
 800185c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800185e:	f3bf 8f4f 	dsb	sy
}
 8001862:	bf00      	nop
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
	    		__DSB();
	    	}
	    	*/
	    	//------------------------------------------------------------------------------------------
	    	if ((hnand->Config.PageSize) <= 512U) {
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800186c:	d848      	bhi.n	8001900 <NAND_Write_Page_8b+0x150>
	    		if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U) {
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001876:	fb02 f303 	mul.w	r3, r2, r3
 800187a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187e:	d21a      	bcs.n	80018b6 <NAND_Write_Page_8b+0x106>
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800188a:	f3bf 8f4f 	dsb	sy
}
 800188e:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800189c:	f3bf 8f4f 	dsb	sy
}
 80018a0:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	0a1a      	lsrs	r2, r3, #8
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	e07d      	b.n	80019b2 <NAND_Write_Page_8b+0x202>
	    			__DSB();
	    		} else {/* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018c0:	f3bf 8f4f 	dsb	sy
}
 80018c4:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018d2:	f3bf 8f4f 	dsb	sy
}
 80018d6:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	0a1a      	lsrs	r2, r3, #8
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018e6:	f3bf 8f4f 	dsb	sy
}
 80018ea:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	0c1a      	lsrs	r2, r3, #16
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018fa:	f3bf 8f4f 	dsb	sy
}
 80018fe:	e058      	b.n	80019b2 <NAND_Write_Page_8b+0x202>
	    			__DSB();
	    		}
	    	} else {/* (hnand->Config.PageSize) > 512 */
	    		if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U) {
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d222      	bcs.n	8001958 <NAND_Write_Page_8b+0x1a8>
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800191c:	f3bf 8f4f 	dsb	sy
}
 8001920:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800192c:	f3bf 8f4f 	dsb	sy
}
 8001930:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800193e:	f3bf 8f4f 	dsb	sy
}
 8001942:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	0a1a      	lsrs	r2, r3, #8
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001952:	f3bf 8f4f 	dsb	sy
}
 8001956:	e02c      	b.n	80019b2 <NAND_Write_Page_8b+0x202>
	    			__DSB();
	    		} else {/* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001962:	f3bf 8f4f 	dsb	sy
}
 8001966:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001972:	f3bf 8f4f 	dsb	sy
}
 8001976:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001984:	f3bf 8f4f 	dsb	sy
}
 8001988:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	0a1a      	lsrs	r2, r3, #8
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001998:	f3bf 8f4f 	dsb	sy
}
 800199c:	bf00      	nop
	    			__DSB();
	    			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	0c1a      	lsrs	r2, r3, #16
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ac:	f3bf 8f4f 	dsb	sy
}
 80019b0:	bf00      	nop
	    			__DSB();
	    		}
	    	}
	    	//------------------------------------------------------------------------------------------
	    	// Write data to memory
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	e00b      	b.n	80019d0 <NAND_Write_Page_8b+0x220>
	    		*(__IO uint8_t *)deviceaddress = *(pBuffer + index);
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	441a      	add	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	7812      	ldrb	r2, [r2, #0]
 80019c2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019c4:	f3bf 8f4f 	dsb	sy
}
 80019c8:	bf00      	nop
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	3301      	adds	r3, #1
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3ee      	bcc.n	80019b8 <NAND_Write_Page_8b+0x208>
	    		__DSB();
	    	}

	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	2210      	movs	r2, #16
 80019e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019e4:	f3bf 8f4f 	dsb	sy
}
 80019e8:	bf00      	nop
	    	__DSB();

	    	uint32_t tickstart = HAL_GetTick();
 80019ea:	f003 f919 	bl	8004c20 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]
	    	while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 80019f0:	e011      	b.n	8001a16 <NAND_Write_Page_8b+0x266>
	    		if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 80019f2:	f003 f915 	bl	8004c20 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a00:	d909      	bls.n	8001a16 <NAND_Write_Page_8b+0x266>
	    			hnand->State = HAL_NAND_STATE_ERROR;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2203      	movs	r2, #3
 8001a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    			__HAL_UNLOCK(hnand);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2020 	strb.w	r2, [r3, #32]
	    			return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e026      	b.n	8001a64 <NAND_Write_Page_8b+0x2b4>
	    	while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f004 faa0 	bl	8005f5c <HAL_NAND_Read_Status>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b40      	cmp	r3, #64	; 0x40
 8001a20:	d1e7      	bne.n	80019f2 <NAND_Write_Page_8b+0x242>
	    		}
	    	}

	    	numpageswritten++;// Increment written pages number
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	3301      	adds	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
	    	nbpages--;// Decrement pages to write
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	623b      	str	r3, [r7, #32]
	    	nandaddress = (uint32_t)(nandaddress + 1U);// Increment the NAND address
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3301      	adds	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
	    while ((nbpages > 0) && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <NAND_Write_Page_8b+0x29e>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	f4ff aefb 	bcc.w	8001844 <NAND_Write_Page_8b+0x94>
	    }

	    hnand->State = HAL_NAND_STATE_READY;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    __HAL_UNLOCK(hnand);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <NAND_Write_Page_8b+0x2b4>
	    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20001378 	.word	0x20001378
 8001a70:	20000070 	.word	0x20000070
 8001a74:	20000004 	.word	0x20000004
 8001a78:	08010094 	.word	0x08010094
 8001a7c:	0800d890 	.word	0x0800d890

08001a80 <NAND_Erase_Block>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t prn)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af04      	add	r7, sp, #16
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	71fb      	strb	r3, [r7, #7]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d101      	bne.n	8001a9e <NAND_Erase_Block+0x1e>

		return HAL_BUSY;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e06e      	b.n	8001b7c <NAND_Erase_Block+0xfc>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d167      	bne.n	8001b7a <NAND_Erase_Block+0xfa>

		__HAL_LOCK(hnand);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <NAND_Erase_Block+0x38>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e061      	b.n	8001b7c <NAND_Erase_Block+0xfc>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2020 	strb.w	r2, [r3, #32]
		hnand->State = HAL_NAND_STATE_BUSY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		uint32_t deviceaddress = devAdr;
 8001ac8:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <NAND_Erase_Block+0x104>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = pAddress->Page;//ARRAY_ADDRESS(pAddress, hnand);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	613b      	str	r3, [r7, #16]

		if (prn) {
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d018      	beq.n	8001b0c <NAND_Erase_Block+0x8c>
			if (dbg > logOn)
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <NAND_Erase_Block+0x108>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d914      	bls.n	8001b0c <NAND_Erase_Block+0x8c>
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
			    	      __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	881b      	ldrh	r3, [r3, #0]
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001ae6:	461a      	mov	r2, r3
			    	      __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	885b      	ldrh	r3, [r3, #2]
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001aec:	4619      	mov	r1, r3
			    	      __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	889b      	ldrh	r3, [r3, #4]
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001af2:	4618      	mov	r0, r3
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <NAND_Erase_Block+0x10c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	9303      	str	r3, [sp, #12]
 8001afa:	9002      	str	r0, [sp, #8]
 8001afc:	9101      	str	r1, [sp, #4]
 8001afe:	9200      	str	r2, [sp, #0]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4a23      	ldr	r2, [pc, #140]	; (8001b90 <NAND_Erase_Block+0x110>)
 8001b04:	4923      	ldr	r1, [pc, #140]	; (8001b94 <NAND_Erase_Block+0x114>)
 8001b06:	2001      	movs	r0, #1
 8001b08:	f000 fd22 	bl	8002550 <Report>
		}

		/* Send Erase block command sequence */
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b12:	2260      	movs	r2, #96	; 0x60
 8001b14:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b16:	f3bf 8f4f 	dsb	sy
}
 8001b1a:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b28:	f3bf 8f4f 	dsb	sy
}
 8001b2c:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	0a1a      	lsrs	r2, r3, #8
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b3c:	f3bf 8f4f 	dsb	sy
}
 8001b40:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	0c1a      	lsrs	r2, r3, #16
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b50:	f3bf 8f4f 	dsb	sy
}
 8001b54:	bf00      	nop
		__DSB();

		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	22d0      	movs	r2, #208	; 0xd0
 8001b5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b60:	f3bf 8f4f 	dsb	sy
}
 8001b64:	bf00      	nop
		__DSB();

		hnand->State = HAL_NAND_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(hnand);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2020 	strb.w	r2, [r3, #32]

		return HAL_ERROR;

	}

	return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e000      	b.n	8001b7c <NAND_Erase_Block+0xfc>
		return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20001378 	.word	0x20001378
 8001b88:	20000070 	.word	0x20000070
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	080100a8 	.word	0x080100a8
 8001b94:	0800d890 	.word	0x0800d890

08001b98 <pageIsEmpty>:
//-----------------------------------------------------------------------------
//      Check: page is empty ?
//
bool pageIsEmpty(uint32_t page)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
bool ret = false;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	75fb      	strb	r3, [r7, #23]

	NAND_AddressTypeDef addr = {
		.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),//page,
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <pageIsEmpty+0x94>)
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <pageIsEmpty+0x94>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bb6:	fb01 f202 	mul.w	r2, r1, r2
 8001bba:	1a9b      	subs	r3, r3, r2
	NAND_AddressTypeDef addr = {
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	813b      	strh	r3, [r7, #8]
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	817b      	strh	r3, [r7, #10]
		.Plane = 1,
		.Block = nand_PageToBlock(page)
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fbeb 	bl	80013a0 <nand_PageToBlock>
 8001bca:	4603      	mov	r3, r0
	NAND_AddressTypeDef addr = {
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	81bb      	strh	r3, [r7, #12]
	};

	if (NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) != HAL_OK) {
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <pageIsEmpty+0x98>)
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	f107 0108 	add.w	r1, r7, #8
 8001bd8:	2301      	movs	r3, #1
 8001bda:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <pageIsEmpty+0x9c>)
 8001bdc:	f7ff fc7c 	bl	80014d8 <NAND_Read_Page_8b>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <pageIsEmpty+0x5e>
		devError |= devNAND;
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <pageIsEmpty+0xa0>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	f043 0320 	orr.w	r3, r3, #32
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <pageIsEmpty+0xa0>)
 8001bf2:	801a      	strh	r2, [r3, #0]
 8001bf4:	e014      	b.n	8001c20 <pageIsEmpty+0x88>
	} else {
		ret = true;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	e00a      	b.n	8001c16 <pageIsEmpty+0x7e>
			if (*(uint8_t *)(rdBuf + i) != 0xff) {
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <pageIsEmpty+0x9c>)
 8001c04:	4413      	add	r3, r2
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2bff      	cmp	r3, #255	; 0xff
 8001c0a:	d001      	beq.n	8001c10 <pageIsEmpty+0x78>
				ret = false;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	75fb      	strb	r3, [r7, #23]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	3301      	adds	r3, #1
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <pageIsEmpty+0x94>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d3ef      	bcc.n	8001c00 <pageIsEmpty+0x68>
			}
		}
	}

	return ret;
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20001398 	.word	0x20001398
 8001c30:	20000080 	.word	0x20000080
 8001c34:	200013b0 	.word	0x200013b0
 8001c38:	20000354 	.word	0x20000354

08001c3c <emptyArea>:
//-------------------------------------------------------------------------------------------
int emptyArea(uint32_t addr, uint32_t len, uint8_t *buf, NAND_AddressTypeDef *nan)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b093      	sub	sp, #76	; 0x4c
 8001c40:	af08      	add	r7, sp, #32
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
int ret = -1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t shift = (addr - devAdr) % chipConf.PageSize;
 8001c50:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <emptyArea+0x104>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	4a3a      	ldr	r2, [pc, #232]	; (8001d44 <emptyArea+0x108>)
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c60:	fb01 f202 	mul.w	r2, r1, r2
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
uint32_t dlin = shift + len;
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	623b      	str	r3, [r7, #32]

	if (dlin > chipConf.PageSize)  dlin = chipConf.PageSize - shift;
 8001c70:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <emptyArea+0x108>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a3a      	ldr	r2, [r7, #32]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d904      	bls.n	8001c84 <emptyArea+0x48>
 8001c7a:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <emptyArea+0x108>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	623b      	str	r3, [r7, #32]
	//

	if (dbg > logOn)
 8001c84:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <emptyArea+0x10c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d91c      	bls.n	8001cc6 <emptyArea+0x8a>
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	4413      	add	r3, r2
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	3a01      	subs	r2, #1
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8001c98:	6839      	ldr	r1, [r7, #0]
 8001c9a:	8809      	ldrh	r1, [r1, #0]
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001c9c:	4608      	mov	r0, r1
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	8889      	ldrh	r1, [r1, #4]
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	4929      	ldr	r1, [pc, #164]	; (8001d4c <emptyArea+0x110>)
 8001ca6:	6809      	ldr	r1, [r1, #0]
 8001ca8:	9106      	str	r1, [sp, #24]
 8001caa:	9405      	str	r4, [sp, #20]
 8001cac:	9004      	str	r0, [sp, #16]
 8001cae:	9203      	str	r2, [sp, #12]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	9202      	str	r2, [sp, #8]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	9201      	str	r2, [sp, #4]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <emptyArea+0x114>)
 8001cbe:	4925      	ldr	r1, [pc, #148]	; (8001d54 <emptyArea+0x118>)
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f000 fc45 	bl	8002550 <Report>

	//
	bool rt = false;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	77fb      	strb	r3, [r7, #31]
	if (NAND_Read_Page_8b(nandPort, nan, buf, 1) != HAL_OK) {
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <emptyArea+0x11c>)
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	f7ff fc00 	bl	80014d8 <NAND_Read_Page_8b>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <emptyArea+0xb2>
		devError |= devNAND;
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <emptyArea+0x120>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	f043 0320 	orr.w	r3, r3, #32
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <emptyArea+0x120>)
 8001cea:	801a      	strh	r2, [r3, #0]
 8001cec:	e01e      	b.n	8001d2c <emptyArea+0xf0>
	} else {
		//
		rt = true;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	77fb      	strb	r3, [r7, #31]
		uint8_t byte;
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	e014      	b.n	8001d22 <emptyArea+0xe6>
			byte = *(buf + i);
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	74fb      	strb	r3, [r7, #19]
			if ((i >= shift) && (i < dlin)) {
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d308      	bcc.n	8001d1c <emptyArea+0xe0>
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d204      	bcs.n	8001d1c <emptyArea+0xe0>
				if (byte != 0xff) rt = false;
 8001d12:	7cfb      	ldrb	r3, [r7, #19]
 8001d14:	2bff      	cmp	r3, #255	; 0xff
 8001d16:	d001      	beq.n	8001d1c <emptyArea+0xe0>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	77fb      	strb	r3, [r7, #31]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <emptyArea+0x108>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d3e5      	bcc.n	8001cf8 <emptyArea+0xbc>
			}
		}
		//
	}

	if (rt) ret = shift;
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <emptyArea+0xfa>
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24

	return ret;
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	372c      	adds	r7, #44	; 0x2c
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd90      	pop	{r4, r7, pc}
 8001d40:	20001378 	.word	0x20001378
 8001d44:	20001398 	.word	0x20001398
 8001d48:	20000070 	.word	0x20000070
 8001d4c:	20000004 	.word	0x20000004
 8001d50:	080100bc 	.word	0x080100bc
 8001d54:	0800d8c4 	.word	0x0800d8c4
 8001d58:	20000080 	.word	0x20000080
 8001d5c:	20000354 	.word	0x20000354

08001d60 <areaIsEmpty>:
//
bool areaIsEmpty(uint32_t adr, uint32_t len)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b094      	sub	sp, #80	; 0x50
 8001d64:	af08      	add	r7, sp, #32
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
bool ret = false;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
uint32_t shift = adr - devAdr;
 8001d70:	4b97      	ldr	r3, [pc, #604]	; (8001fd0 <areaIsEmpty+0x270>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	623b      	str	r3, [r7, #32]
uint32_t page = shift / nandPort->Config.PageSize;
 8001d7a:	4b96      	ldr	r3, [pc, #600]	; (8001fd4 <areaIsEmpty+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	6a3a      	ldr	r2, [r7, #32]
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	61fb      	str	r3, [r7, #28]
uint32_t block = nand_PageToBlock(page);
 8001d88:	69f8      	ldr	r0, [r7, #28]
 8001d8a:	f7ff fb09 	bl	80013a0 <nand_PageToBlock>
 8001d8e:	61b8      	str	r0, [r7, #24]


	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 8001d90:	4b90      	ldr	r3, [pc, #576]	; (8001fd4 <areaIsEmpty+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d109      	bne.n	8001db2 <areaIsEmpty+0x52>
		devError |= devNAND;
 8001d9e:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <areaIsEmpty+0x278>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	f043 0320 	orr.w	r3, r3, #32
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b8b      	ldr	r3, [pc, #556]	; (8001fd8 <areaIsEmpty+0x278>)
 8001daa:	801a      	strh	r2, [r3, #0]
		return ret;//HAL_BUSY;
 8001dac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001db0:	e10a      	b.n	8001fc8 <areaIsEmpty+0x268>
	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 8001db2:	4b88      	ldr	r3, [pc, #544]	; (8001fd4 <areaIsEmpty+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	f040 80fa 	bne.w	8001fb6 <areaIsEmpty+0x256>
		//
		shift %= nandPort->Config.PageSize;
 8001dc2:	4b84      	ldr	r3, [pc, #528]	; (8001fd4 <areaIsEmpty+0x274>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dce:	fb01 f202 	mul.w	r2, r1, r2
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	623b      	str	r3, [r7, #32]
		uint32_t dlin = shift + len;
 8001dd6:	6a3a      	ldr	r2, [r7, #32]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (dlin > nandPort->Config.PageSize)  dlin = nandPort->Config.PageSize - shift;
 8001dde:	4b7d      	ldr	r3, [pc, #500]	; (8001fd4 <areaIsEmpty+0x274>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d905      	bls.n	8001df6 <areaIsEmpty+0x96>
 8001dea:	4b7a      	ldr	r3, [pc, #488]	; (8001fd4 <areaIsEmpty+0x274>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
		//
		__HAL_LOCK(nandPort);
 8001df6:	4b77      	ldr	r3, [pc, #476]	; (8001fd4 <areaIsEmpty+0x274>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <areaIsEmpty+0xa6>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0e0      	b.n	8001fc8 <areaIsEmpty+0x268>
 8001e06:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <areaIsEmpty+0x274>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 8001e10:	4b70      	ldr	r3, [pc, #448]	; (8001fd4 <areaIsEmpty+0x274>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2202      	movs	r2, #2
 8001e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		NAND_AddressTypeDef pAddress = {
			.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),//page,
 8001e1a:	4b70      	ldr	r3, [pc, #448]	; (8001fdc <areaIsEmpty+0x27c>)
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <areaIsEmpty+0x27c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e2c:	fb01 f202 	mul.w	r2, r1, r2
 8001e30:	1a9b      	subs	r3, r3, r2
		NAND_AddressTypeDef pAddress = {
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	813b      	strh	r3, [r7, #8]
 8001e36:	2301      	movs	r3, #1
 8001e38:	817b      	strh	r3, [r7, #10]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	81bb      	strh	r3, [r7, #12]
			.Plane = 1,
			.Block = block
		};
		uint32_t deviceaddress = devAdr;
 8001e40:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <areaIsEmpty+0x270>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = ARRAY_ADDRESS(&pAddress, nandPort);
 8001e46:	893b      	ldrh	r3, [r7, #8]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	89bb      	ldrh	r3, [r7, #12]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	897b      	ldrh	r3, [r7, #10]
 8001e50:	4618      	mov	r0, r3
 8001e52:	4b60      	ldr	r3, [pc, #384]	; (8001fd4 <areaIsEmpty+0x274>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	fb00 f303 	mul.w	r3, r0, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a5d      	ldr	r2, [pc, #372]	; (8001fd4 <areaIsEmpty+0x274>)
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e64:	fb02 f303 	mul.w	r3, r2, r3
 8001e68:	440b      	add	r3, r1
 8001e6a:	613b      	str	r3, [r7, #16]

		if (dbg > logOn)
 8001e6c:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <areaIsEmpty+0x280>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d91a      	bls.n	8001eaa <areaIsEmpty+0x14a>
			Report(1, "[%s] nand_adr:0x%X adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
				  __func__, nandaddress, adr, adr + len - 1, len, shift, dlin - 1, page, block, eol);
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	4413      	add	r3, r2
			Report(1, "[%s] nand_adr:0x%X adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e7e:	3a01      	subs	r2, #1
 8001e80:	4958      	ldr	r1, [pc, #352]	; (8001fe4 <areaIsEmpty+0x284>)
 8001e82:	6809      	ldr	r1, [r1, #0]
 8001e84:	9107      	str	r1, [sp, #28]
 8001e86:	69b9      	ldr	r1, [r7, #24]
 8001e88:	9106      	str	r1, [sp, #24]
 8001e8a:	69f9      	ldr	r1, [r7, #28]
 8001e8c:	9105      	str	r1, [sp, #20]
 8001e8e:	9204      	str	r2, [sp, #16]
 8001e90:	6a3a      	ldr	r2, [r7, #32]
 8001e92:	9203      	str	r2, [sp, #12]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	9202      	str	r2, [sp, #8]
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4a51      	ldr	r2, [pc, #324]	; (8001fe8 <areaIsEmpty+0x288>)
 8001ea2:	4952      	ldr	r1, [pc, #328]	; (8001fec <areaIsEmpty+0x28c>)
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f000 fb53 	bl	8002550 <Report>

		/* Page(s) read loop */
		if (nandaddress < ((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr))) {
 8001eaa:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <areaIsEmpty+0x274>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <areaIsEmpty+0x274>)
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d26d      	bcs.n	8001f9c <areaIsEmpty+0x23c>
			/* Send read page command sequence */
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eca:	f3bf 8f4f 	dsb	sy
}
 8001ece:	bf00      	nop
			__DSB();
			//
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eda:	f3bf 8f4f 	dsb	sy
}
 8001ede:	bf00      	nop
			__DSB();
			if ((nandPort->Config.PageSize) > 512U) {
 8001ee0:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <areaIsEmpty+0x274>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eea:	d907      	bls.n	8001efc <areaIsEmpty+0x19c>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ef6:	f3bf 8f4f 	dsb	sy
}
 8001efa:	bf00      	nop
				__DSB();
			}
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f08:	f3bf 8f4f 	dsb	sy
}
 8001f0c:	bf00      	nop
			__DSB();
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	0a1a      	lsrs	r2, r3, #8
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f1c:	f3bf 8f4f 	dsb	sy
}
 8001f20:	bf00      	nop
			__DSB();
			if (((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)) > 65535U) {
 8001f22:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <areaIsEmpty+0x274>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	4a2a      	ldr	r2, [pc, #168]	; (8001fd4 <areaIsEmpty+0x274>)
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f2e:	fb02 f303 	mul.w	r3, r2, r3
 8001f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f36:	d309      	bcc.n	8001f4c <areaIsEmpty+0x1ec>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	0c1a      	lsrs	r2, r3, #16
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f46:	f3bf 8f4f 	dsb	sy
}
 8001f4a:	bf00      	nop
				__DSB();
			}
			//
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f52:	2230      	movs	r2, #48	; 0x30
 8001f54:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f56:	f3bf 8f4f 	dsb	sy
}
 8001f5a:	bf00      	nop
			__DSB();

			ret = true;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint8_t byte;
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	e013      	b.n	8001f90 <areaIsEmpty+0x230>
				byte = *(uint8_t *)deviceaddress;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	73fb      	strb	r3, [r7, #15]
				if ((index >= shift) && (index < dlin)) {
 8001f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d309      	bcc.n	8001f8a <areaIsEmpty+0x22a>
 8001f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d205      	bcs.n	8001f8a <areaIsEmpty+0x22a>
					if (byte != 0xff) ret = false;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	2bff      	cmp	r3, #255	; 0xff
 8001f82:	d002      	beq.n	8001f8a <areaIsEmpty+0x22a>
 8001f84:	2300      	movs	r3, #0
 8001f86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <areaIsEmpty+0x274>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d3e5      	bcc.n	8001f68 <areaIsEmpty+0x208>
				}
			}
		}
		//
		nandPort->State = HAL_NAND_STATE_READY;
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <areaIsEmpty+0x274>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <areaIsEmpty+0x274>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2020 	strb.w	r2, [r3, #32]
		devError |= devNAND;
		return ret;//HAL_ERROR;
	}

	//
	return ret;
 8001fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fb4:	e008      	b.n	8001fc8 <areaIsEmpty+0x268>
		devError |= devNAND;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <areaIsEmpty+0x278>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	f043 0320 	orr.w	r3, r3, #32
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <areaIsEmpty+0x278>)
 8001fc2:	801a      	strh	r2, [r3, #0]
		return ret;//HAL_ERROR;
 8001fc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3730      	adds	r7, #48	; 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20001378 	.word	0x20001378
 8001fd4:	20000080 	.word	0x20000080
 8001fd8:	20000354 	.word	0x20000354
 8001fdc:	20001398 	.word	0x20001398
 8001fe0:	20000070 	.word	0x20000070
 8001fe4:	20000004 	.word	0x20000004
 8001fe8:	080100c8 	.word	0x080100c8
 8001fec:	0800d904 	.word	0x0800d904

08001ff0 <get_qStat>:
}
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	dc18      	bgt.n	8002030 <get_qStat+0x40>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f113 0f06 	cmn.w	r3, #6
 8002004:	db2a      	blt.n	800205c <get_qStat+0x6c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3306      	adds	r3, #6
 800200a:	2b06      	cmp	r3, #6
 800200c:	d826      	bhi.n	800205c <get_qStat+0x6c>
 800200e:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <get_qStat+0x24>)
 8002010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002014:	08002055 	.word	0x08002055
 8002018:	08002051 	.word	0x08002051
 800201c:	0800204d 	.word	0x0800204d
 8002020:	08002049 	.word	0x08002049
 8002024:	08002045 	.word	0x08002045
 8002028:	08002041 	.word	0x08002041
 800202c:	0800203d 	.word	0x0800203d
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002036:	4293      	cmp	r3, r2
 8002038:	d00e      	beq.n	8002058 <get_qStat+0x68>
 800203a:	e00f      	b.n	800205c <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <get_qStat+0x7c>)
 800203e:	e00e      	b.n	800205e <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <get_qStat+0x80>)
 8002042:	e00c      	b.n	800205e <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <get_qStat+0x84>)
 8002046:	e00a      	b.n	800205e <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <get_qStat+0x88>)
 800204a:	e008      	b.n	800205e <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <get_qStat+0x8c>)
 800204e:	e006      	b.n	800205e <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <get_qStat+0x90>)
 8002052:	e004      	b.n	800205e <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <get_qStat+0x94>)
 8002056:	e002      	b.n	800205e <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <get_qStat+0x98>)
 800205a:	e000      	b.n	800205e <get_qStat+0x6e>
	}

	return "UnknownError";
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <get_qStat+0x9c>)
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	0800d954 	.word	0x0800d954
 8002070:	0800d95c 	.word	0x0800d95c
 8002074:	0800d964 	.word	0x0800d964
 8002078:	0800d974 	.word	0x0800d974
 800207c:	0800d984 	.word	0x0800d984
 8002080:	0800d998 	.word	0x0800d998
 8002084:	0800d9a8 	.word	0x0800d9a8
 8002088:	0800d9b4 	.word	0x0800d9b4
 800208c:	0800d9c8 	.word	0x0800d9c8

08002090 <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d00a      	beq.n	80020b6 <get_logName+0x26>
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	dc0a      	bgt.n	80020ba <get_logName+0x2a>
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <get_logName+0x1e>
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d002      	beq.n	80020b2 <get_logName+0x22>
 80020ac:	e005      	b.n	80020ba <get_logName+0x2a>
		case logOff:
			return "logOff";
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <get_logName+0x38>)
 80020b0:	e004      	b.n	80020bc <get_logName+0x2c>
		case logOn:
			return "logOn";
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <get_logName+0x3c>)
 80020b4:	e002      	b.n	80020bc <get_logName+0x2c>
		case logDump:
			return "logDump";
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <get_logName+0x40>)
 80020b8:	e000      	b.n	80020bc <get_logName+0x2c>
	}

	return "???";
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <get_logName+0x44>)
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	0800d9d8 	.word	0x0800d9d8
 80020cc:	0800d9e0 	.word	0x0800d9e0
 80020d0:	0800d9e8 	.word	0x0800d9e8
 80020d4:	0800d9f0 	.word	0x0800d9f0

080020d8 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 80020e4:	2330      	movs	r3, #48	; 0x30
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	2300      	movs	r3, #0
 80020ee:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <hex2bin+0x28>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <hex2bin+0x2c>
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	e0b2      	b.n	800226a <hex2bin+0x192>
    if (len > 8) len = 8;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	2b08      	cmp	r3, #8
 8002108:	d901      	bls.n	800210e <hex2bin+0x36>
 800210a:	2308      	movs	r3, #8
 800210c:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f1c3 0308 	rsb	r3, r3, #8
 8002114:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8002118:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800211c:	f107 0210 	add.w	r2, r7, #16
 8002120:	4413      	add	r3, r2
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4618      	mov	r0, r3
 8002128:	f00a fd08 	bl	800cb3c <memcpy>

    k = j = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002132:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002136:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 800213a:	e090      	b.n	800225e <hex2bin+0x186>
        jk = j + 2;
 800213c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002140:	3302      	adds	r3, #2
 8002142:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8002144:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800214c:	e066      	b.n	800221c <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 800214e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002152:	3328      	adds	r3, #40	; 0x28
 8002154:	443b      	add	r3, r7
 8002156:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800215a:	2b2f      	cmp	r3, #47	; 0x2f
 800215c:	d918      	bls.n	8002190 <hex2bin+0xb8>
 800215e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002162:	3328      	adds	r3, #40	; 0x28
 8002164:	443b      	add	r3, r7
 8002166:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800216a:	2b39      	cmp	r3, #57	; 0x39
 800216c:	d810      	bhi.n	8002190 <hex2bin+0xb8>
 800216e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002172:	3328      	adds	r3, #40	; 0x28
 8002174:	443b      	add	r3, r7
 8002176:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800217a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	3a30      	subs	r2, #48	; 0x30
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	3328      	adds	r3, #40	; 0x28
 8002188:	443b      	add	r3, r7
 800218a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800218e:	e040      	b.n	8002212 <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 8002190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002194:	3328      	adds	r3, #40	; 0x28
 8002196:	443b      	add	r3, r7
 8002198:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800219c:	2b60      	cmp	r3, #96	; 0x60
 800219e:	d918      	bls.n	80021d2 <hex2bin+0xfa>
 80021a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021a4:	3328      	adds	r3, #40	; 0x28
 80021a6:	443b      	add	r3, r7
 80021a8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80021ac:	2b66      	cmp	r3, #102	; 0x66
 80021ae:	d810      	bhi.n	80021d2 <hex2bin+0xfa>
 80021b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021b4:	3328      	adds	r3, #40	; 0x28
 80021b6:	443b      	add	r3, r7
 80021b8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80021bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	3a57      	subs	r2, #87	; 0x57
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	3328      	adds	r3, #40	; 0x28
 80021ca:	443b      	add	r3, r7
 80021cc:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80021d0:	e01f      	b.n	8002212 <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 80021d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021d6:	3328      	adds	r3, #40	; 0x28
 80021d8:	443b      	add	r3, r7
 80021da:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d917      	bls.n	8002212 <hex2bin+0x13a>
 80021e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021e6:	3328      	adds	r3, #40	; 0x28
 80021e8:	443b      	add	r3, r7
 80021ea:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80021ee:	2b46      	cmp	r3, #70	; 0x46
 80021f0:	d80f      	bhi.n	8002212 <hex2bin+0x13a>
 80021f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021f6:	3328      	adds	r3, #40	; 0x28
 80021f8:	443b      	add	r3, r7
 80021fa:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80021fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	3a37      	subs	r2, #55	; 0x37
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	3328      	adds	r3, #40	; 0x28
 800220c:	443b      	add	r3, r7
 800220e:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 8002212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002216:	3301      	adds	r3, #1
 8002218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800221c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002220:	7ffb      	ldrb	r3, [r7, #31]
 8002222:	429a      	cmp	r2, r3
 8002224:	d393      	bcc.n	800214e <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 8002226:	7b3b      	ldrb	r3, [r7, #12]
 8002228:	011a      	lsls	r2, r3, #4
 800222a:	7b7b      	ldrb	r3, [r7, #13]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 8002234:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002238:	f1c3 0303 	rsb	r3, r3, #3
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	4313      	orrs	r3, r2
 8002248:	623b      	str	r3, [r7, #32]
        k++;
 800224a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800224e:	3301      	adds	r3, #1
 8002250:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 8002254:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002258:	3302      	adds	r3, #2
 800225a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 800225e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002262:	2b03      	cmp	r3, #3
 8002264:	f67f af6a 	bls.w	800213c <hex2bin+0x64>
    }

    return ret;
 8002268:	6a3b      	ldr	r3, [r7, #32]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
	if (on)
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800228a:	4807      	ldr	r0, [pc, #28]	; (80022a8 <errLedOn+0x34>)
 800228c:	f003 fb78 	bl	8005980 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 8002290:	e005      	b.n	800229e <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 8002292:	2200      	movs	r2, #0
 8002294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <errLedOn+0x34>)
 800229a:	f003 fb71 	bl	8005980 <HAL_GPIO_WritePin>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40020c00 	.word	0x40020c00

080022ac <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
	return secCounter;
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <get_secCounter+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000358 	.word	0x20000358

080022c4 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
	secCounter++;
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <inc_secCounter+0x18>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a03      	ldr	r2, [pc, #12]	; (80022dc <inc_secCounter+0x18>)
 80022d0:	6013      	str	r3, [r2, #0]
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	20000358 	.word	0x20000358

080022e0 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
	return msCounter;
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <get_msCounter+0x18>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000360 	.word	0x20000360

080022fc <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
	msCounter++;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <inc_msCounter+0x20>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	1c50      	adds	r0, r2, #1
 8002308:	f143 0100 	adc.w	r1, r3, #0
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <inc_msCounter+0x20>)
 800230e:	e9c3 0100 	strd	r0, r1, [r3]
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	20000360 	.word	0x20000360

08002320 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8002328:	f7ff ffc0 	bl	80022ac <get_secCounter>
 800232c:	4602      	mov	r2, r0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8002342:	f7ff ffb3 	bl	80022ac <get_secCounter>
 8002346:	4602      	mov	r2, r0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4293      	cmp	r3, r2
 800234c:	bf94      	ite	ls
 800234e:	2301      	movls	r3, #1
 8002350:	2300      	movhi	r3, #0
 8002352:	b2db      	uxtb	r3, r3
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b094      	sub	sp, #80	; 0x50
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	2000      	movs	r0, #0
 8002368:	460a      	mov	r2, r1
 800236a:	4603      	mov	r3, r0
 800236c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8002370:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002374:	f107 0320 	add.w	r3, r7, #32
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f00a fb0c 	bl	800c998 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8002380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002382:	b2db      	uxtb	r3, r3
 8002384:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8002386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002388:	b2db      	uxtb	r3, r3
 800238a:	3301      	adds	r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8002390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002392:	b2db      	uxtb	r3, r3
 8002394:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8002396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002398:	b2db      	uxtb	r3, r3
 800239a:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 800239c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <set_Date+0xb0>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 80023aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	2200      	movs	r2, #0
 80023bc:	4619      	mov	r1, r3
 80023be:	4814      	ldr	r0, [pc, #80]	; (8002410 <set_Date+0xb4>)
 80023c0:	f004 fc14 	bl	8006bec <HAL_RTC_SetTime>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <set_Date+0x7e>
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <set_Date+0xb8>)
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	f043 0308 	orr.w	r3, r3, #8
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <set_Date+0xb8>)
 80023d6:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 80023d8:	e014      	b.n	8002404 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80023da:	f107 0308 	add.w	r3, r7, #8
 80023de:	2200      	movs	r2, #0
 80023e0:	4619      	mov	r1, r3
 80023e2:	480b      	ldr	r0, [pc, #44]	; (8002410 <set_Date+0xb4>)
 80023e4:	f004 fcfa 	bl	8006ddc <HAL_RTC_SetDate>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <set_Date+0xa2>
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <set_Date+0xb8>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	f043 0308 	orr.w	r3, r3, #8
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <set_Date+0xb8>)
 80023fa:	801a      	strh	r2, [r3, #0]
}
 80023fc:	e002      	b.n	8002404 <set_Date+0xa8>
			setDate = true;
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <set_Date+0xbc>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	3750      	adds	r7, #80	; 0x50
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	2000136d 	.word	0x2000136d
 8002410:	20000144 	.word	0x20000144
 8002414:	20000354 	.word	0x20000354
 8002418:	2000136c 	.word	0x2000136c

0800241c <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b093      	sub	sp, #76	; 0x4c
 8002420:	af04      	add	r7, sp, #16
 8002422:	6078      	str	r0, [r7, #4]
int ret = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8002428:	4b40      	ldr	r3, [pc, #256]	; (800252c <sec2str+0x110>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f083 0301 	eor.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d040      	beq.n	80024b8 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8002436:	f7ff ff39 	bl	80022ac <get_secCounter>
 800243a:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 800243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243e:	4a3c      	ldr	r2, [pc, #240]	; (8002530 <sec2str+0x114>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8002448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244a:	4a39      	ldr	r2, [pc, #228]	; (8002530 <sec2str+0x114>)
 800244c:	fba2 1203 	umull	r1, r2, r2, r3
 8002450:	0c12      	lsrs	r2, r2, #16
 8002452:	4938      	ldr	r1, [pc, #224]	; (8002534 <sec2str+0x118>)
 8002454:	fb01 f202 	mul.w	r2, r1, r2
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 800245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245e:	4a36      	ldr	r2, [pc, #216]	; (8002538 <sec2str+0x11c>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	0adb      	lsrs	r3, r3, #11
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246a:	4a33      	ldr	r2, [pc, #204]	; (8002538 <sec2str+0x11c>)
 800246c:	fba2 1203 	umull	r1, r2, r2, r3
 8002470:	0ad2      	lsrs	r2, r2, #11
 8002472:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002476:	fb01 f202 	mul.w	r2, r1, r2
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	4a2e      	ldr	r2, [pc, #184]	; (800253c <sec2str+0x120>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 800248a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <sec2str+0x120>)
 800248e:	fba3 1302 	umull	r1, r3, r3, r2
 8002492:	0959      	lsrs	r1, r3, #5
 8002494:	460b      	mov	r3, r1
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a5b      	subs	r3, r3, r1
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ac:	4924      	ldr	r1, [pc, #144]	; (8002540 <sec2str+0x124>)
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f00a fc68 	bl	800cd84 <siprintf>
 80024b4:	6378      	str	r0, [r7, #52]	; 0x34
 80024b6:	e034      	b.n	8002522 <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	2200      	movs	r2, #0
 80024be:	4619      	mov	r1, r3
 80024c0:	4820      	ldr	r0, [pc, #128]	; (8002544 <sec2str+0x128>)
 80024c2:	f004 fd0f 	bl	8006ee4 <HAL_RTC_GetDate>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <sec2str+0xc0>
 80024cc:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <sec2str+0x12c>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	f043 0308 	orr.w	r3, r3, #8
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <sec2str+0x12c>)
 80024d8:	801a      	strh	r2, [r3, #0]
 80024da:	e022      	b.n	8002522 <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	2200      	movs	r2, #0
 80024e2:	4619      	mov	r1, r3
 80024e4:	4817      	ldr	r0, [pc, #92]	; (8002544 <sec2str+0x128>)
 80024e6:	f004 fc1b 	bl	8006d20 <HAL_RTC_GetTime>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <sec2str+0xe4>
 80024f0:	4b15      	ldr	r3, [pc, #84]	; (8002548 <sec2str+0x12c>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <sec2str+0x12c>)
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	e010      	b.n	8002522 <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8002500:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8002502:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8002504:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8002506:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002508:	7c3b      	ldrb	r3, [r7, #16]
 800250a:	7c7a      	ldrb	r2, [r7, #17]
 800250c:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800250e:	9102      	str	r1, [sp, #8]
 8002510:	9201      	str	r2, [sp, #4]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	4623      	mov	r3, r4
 8002516:	4602      	mov	r2, r0
 8002518:	490c      	ldr	r1, [pc, #48]	; (800254c <sec2str+0x130>)
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f00a fc32 	bl	800cd84 <siprintf>
 8002520:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8002522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002524:	4618      	mov	r0, r3
 8002526:	373c      	adds	r7, #60	; 0x3c
 8002528:	46bd      	mov	sp, r7
 800252a:	bd90      	pop	{r4, r7, pc}
 800252c:	2000136c 	.word	0x2000136c
 8002530:	c22e4507 	.word	0xc22e4507
 8002534:	00015180 	.word	0x00015180
 8002538:	91a2b3c5 	.word	0x91a2b3c5
 800253c:	88888889 	.word	0x88888889
 8002540:	0800d9f4 	.word	0x0800d9f4
 8002544:	20000144 	.word	0x20000144
 8002548:	20000354 	.word	0x20000354
 800254c:	0800da0c 	.word	0x0800da0c

08002550 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 8002550:	b40e      	push	{r1, r2, r3}
 8002552:	b590      	push	{r4, r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 800255c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002560:	613b      	str	r3, [r7, #16]
int dl = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8002566:	4b27      	ldr	r3, [pc, #156]	; (8002604 <Report+0xb4>)
 8002568:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d010      	beq.n	8002598 <Report+0x48>
		dl = sec2str(buf);
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f7ff ff50 	bl	800241c <sec2str>
 800257c:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f7fd fe26 	bl	80001d0 <strlen>
 8002584:	4603      	mov	r3, r0
 8002586:	461a      	mov	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <Report+0xb8>)
 800258e:	6810      	ldr	r0, [r2, #0]
 8002590:	6018      	str	r0, [r3, #0]
		dl += 3;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3303      	adds	r3, #3
 8002596:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8002598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800259c:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	18d0      	adds	r0, r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	1ad1      	subs	r1, r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ae:	f00a fd0f 	bl	800cfd0 <vsniprintf>

	uartRdy = false;
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <Report+0xbc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <Report+0xc0>)
 80025ba:	681c      	ldr	r4, [r3, #0]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7fd fe07 	bl	80001d0 <strlen>
 80025c2:	4603      	mov	r3, r0
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	68f9      	ldr	r1, [r7, #12]
 80025ca:	4620      	mov	r0, r4
 80025cc:	f005 ff86 	bl	80084dc <HAL_UART_Transmit_DMA>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <Report+0x94>
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <Report+0xc4>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <Report+0xc4>)
 80025e2:	801a      	strh	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 80025e4:	bf00      	nop
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <Report+0xbc>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f8      	bne.n	80025e6 <Report+0x96>

	va_end(args);

	return 0;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002600:	b003      	add	sp, #12
 8002602:	4770      	bx	lr
 8002604:	20000368 	.word	0x20000368
 8002608:	0800da28 	.word	0x0800da28
 800260c:	20000068 	.word	0x20000068
 8002610:	2000007c 	.word	0x2000007c
 8002614:	20000354 	.word	0x20000354

08002618 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b090      	sub	sp, #64	; 0x40
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a98      	ldr	r2, [pc, #608]	; (8002888 <HAL_UART_RxCpltCallback+0x270>)
 8002626:	4293      	cmp	r3, r2
 8002628:	f040 8271 	bne.w	8002b0e <HAL_UART_RxCpltCallback+0x4f6>

		rxBuf[ruk++] = (char)rxByte;
 800262c:	4b97      	ldr	r3, [pc, #604]	; (800288c <HAL_UART_RxCpltCallback+0x274>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	b291      	uxth	r1, r2
 8002634:	4a95      	ldr	r2, [pc, #596]	; (800288c <HAL_UART_RxCpltCallback+0x274>)
 8002636:	8011      	strh	r1, [r2, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4b95      	ldr	r3, [pc, #596]	; (8002890 <HAL_UART_RxCpltCallback+0x278>)
 800263c:	7819      	ldrb	r1, [r3, #0]
 800263e:	4b95      	ldr	r3, [pc, #596]	; (8002894 <HAL_UART_RxCpltCallback+0x27c>)
 8002640:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 8002642:	4b93      	ldr	r3, [pc, #588]	; (8002890 <HAL_UART_RxCpltCallback+0x278>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b0a      	cmp	r3, #10
 8002648:	f040 825c 	bne.w	8002b04 <HAL_UART_RxCpltCallback+0x4ec>
			rxBuf[--ruk] = '\0';
 800264c:	4b8f      	ldr	r3, [pc, #572]	; (800288c <HAL_UART_RxCpltCallback+0x274>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	4b8d      	ldr	r3, [pc, #564]	; (800288c <HAL_UART_RxCpltCallback+0x274>)
 8002656:	801a      	strh	r2, [r3, #0]
 8002658:	4b8c      	ldr	r3, [pc, #560]	; (800288c <HAL_UART_RxCpltCallback+0x274>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b8d      	ldr	r3, [pc, #564]	; (8002894 <HAL_UART_RxCpltCallback+0x27c>)
 8002660:	2100      	movs	r1, #0
 8002662:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8002664:	2300      	movs	r3, #0
 8002666:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8002668:	2300      	movs	r3, #0
 800266a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 800266e:	4b8a      	ldr	r3, [pc, #552]	; (8002898 <HAL_UART_RxCpltCallback+0x280>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8002674:	2300      	movs	r3, #0
 8002676:	83bb      	strh	r3, [r7, #28]
			if (strlen(rxBuf) >= 4) {
 8002678:	4886      	ldr	r0, [pc, #536]	; (8002894 <HAL_UART_RxCpltCallback+0x27c>)
 800267a:	f7fd fda9 	bl	80001d0 <strlen>
 800267e:	4603      	mov	r3, r0
 8002680:	2b03      	cmp	r3, #3
 8002682:	f240 8239 	bls.w	8002af8 <HAL_UART_RxCpltCallback+0x4e0>
				int8_t idx = -1;
 8002686:	23ff      	movs	r3, #255	; 0xff
 8002688:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 800268c:	2300      	movs	r3, #0
 800268e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002692:	e018      	b.n	80026c6 <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8002694:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002698:	4a80      	ldr	r2, [pc, #512]	; (800289c <HAL_UART_RxCpltCallback+0x284>)
 800269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269e:	4619      	mov	r1, r3
 80026a0:	487c      	ldr	r0, [pc, #496]	; (8002894 <HAL_UART_RxCpltCallback+0x27c>)
 80026a2:	f00a fbc6 	bl	800ce32 <strstr>
 80026a6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80026a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_UART_RxCpltCallback+0xa0>
														  //"write:0x0:0xf0:256"
														  //"erase:"
														  //"check:"
														  //"area:"
														  //"save:"
						idx = i;
 80026ae:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80026b2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 80026b6:	e00a      	b.n	80026ce <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 80026b8:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	3301      	adds	r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80026c6:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 80026ca:	2b0b      	cmp	r3, #11
 80026cc:	dde2      	ble.n	8002694 <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 80026ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d0:	4a70      	ldr	r2, [pc, #448]	; (8002894 <HAL_UART_RxCpltCallback+0x27c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	f040 8210 	bne.w	8002af8 <HAL_UART_RxCpltCallback+0x4e0>
 80026d8:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026e0:	f000 820a 	beq.w	8002af8 <HAL_UART_RxCpltCallback+0x4e0>
					nandLen = MAX_LEN_DATA;//256;
 80026e4:	4b6e      	ldr	r3, [pc, #440]	; (80028a0 <HAL_UART_RxCpltCallback+0x288>)
 80026e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ea:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 80026ec:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80026f0:	4a6a      	ldr	r2, [pc, #424]	; (800289c <HAL_UART_RxCpltCallback+0x284>)
 80026f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fd6a 	bl	80001d0 <strlen>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002700:	4413      	add	r3, r2
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 8002704:	2300      	movs	r3, #0
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
 8002708:	2300      	movs	r3, #0
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
 800270c:	2300      	movs	r3, #0
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 8002710:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002714:	2b0b      	cmp	r3, #11
 8002716:	f200 81b2 	bhi.w	8002a7e <HAL_UART_RxCpltCallback+0x466>
 800271a:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <HAL_UART_RxCpltCallback+0x108>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	08002751 	.word	0x08002751
 8002724:	08002759 	.word	0x08002759
 8002728:	080027b1 	.word	0x080027b1
 800272c:	0800282d 	.word	0x0800282d
 8002730:	0800285b 	.word	0x0800285b
 8002734:	080029c9 	.word	0x080029c9
 8002738:	080029ff 	.word	0x080029ff
 800273c:	0800285b 	.word	0x0800285b
 8002740:	0800285b 	.word	0x0800285b
 8002744:	08002a21 	.word	0x08002a21
 8002748:	08002751 	.word	0x08002751
 800274c:	08002751 	.word	0x08002751
						case cmdHelp:
						case cmdInfo:
						case cmdRestart:
							cmd_flag = 1;
 8002750:	4b51      	ldr	r3, [pc, #324]	; (8002898 <HAL_UART_RxCpltCallback+0x280>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
						break;
 8002756:	e192      	b.n	8002a7e <HAL_UART_RxCpltCallback+0x466>
						case cmdEpoch:
							if (strlen(uk) < 10) {
 8002758:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800275a:	f7fd fd39 	bl	80001d0 <strlen>
 800275e:	4603      	mov	r3, r0
 8002760:	2b09      	cmp	r3, #9
 8002762:	d802      	bhi.n	800276a <HAL_UART_RxCpltCallback+0x152>
								qcmd.attr = 1;
 8002764:	2301      	movs	r3, #1
 8002766:	777b      	strb	r3, [r7, #29]
 8002768:	e01e      	b.n	80027a8 <HAL_UART_RxCpltCallback+0x190>
							} else {
								uki = strchr(uk, ':');
 800276a:	213a      	movs	r1, #58	; 0x3a
 800276c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800276e:	f00a fb38 	bl	800cde2 <strchr>
 8002772:	6378      	str	r0, [r7, #52]	; 0x34
								if (uki) {
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00c      	beq.n	8002794 <HAL_UART_RxCpltCallback+0x17c>
									tZone = (uint8_t)atol(uki + 1);
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	3301      	adds	r3, #1
 800277e:	4618      	mov	r0, r3
 8002780:	f00a f900 	bl	800c984 <atol>
 8002784:	4603      	mov	r3, r0
 8002786:	b2da      	uxtb	r2, r3
 8002788:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_UART_RxCpltCallback+0x28c>)
 800278a:	701a      	strb	r2, [r3, #0]
									*uki = '\0';
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	e002      	b.n	800279a <HAL_UART_RxCpltCallback+0x182>
								} else {
									tZone = 0;
 8002794:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <HAL_UART_RxCpltCallback+0x28c>)
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
								}
								epoch = (uint32_t)atol(uk);
 800279a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800279c:	f00a f8f2 	bl	800c984 <atol>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <HAL_UART_RxCpltCallback+0x290>)
 80027a6:	601a      	str	r2, [r3, #0]
							}
							cmd_flag = 1;
 80027a8:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <HAL_UART_RxCpltCallback+0x280>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
						break;
 80027ae:	e166      	b.n	8002a7e <HAL_UART_RxCpltCallback+0x466>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 80027b0:	213a      	movs	r1, #58	; 0x3a
 80027b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027b4:	f00a fb15 	bl	800cde2 <strchr>
 80027b8:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 80027ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00b      	beq.n	80027d8 <HAL_UART_RxCpltCallback+0x1c0>
								nandLen = atol(uki + 1);
 80027c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c2:	3301      	adds	r3, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f00a f8dd 	bl	800c984 <atol>
 80027ca:	4603      	mov	r3, r0
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	4b34      	ldr	r3, [pc, #208]	; (80028a0 <HAL_UART_RxCpltCallback+0x288>)
 80027d0:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 80027d8:	4934      	ldr	r1, [pc, #208]	; (80028ac <HAL_UART_RxCpltCallback+0x294>)
 80027da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027dc:	f00a fb29 	bl	800ce32 <strstr>
 80027e0:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00f      	beq.n	8002808 <HAL_UART_RxCpltCallback+0x1f0>
								uki += 2;
 80027e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ea:	3302      	adds	r3, #2
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 80027ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027f0:	f7fd fcee 	bl	80001d0 <strlen>
 80027f4:	4603      	mov	r3, r0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	4619      	mov	r1, r3
 80027fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027fc:	f7ff fc6c 	bl	80020d8 <hex2bin>
 8002800:	4603      	mov	r3, r0
 8002802:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <HAL_UART_RxCpltCallback+0x298>)
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e006      	b.n	8002816 <HAL_UART_RxCpltCallback+0x1fe>
							} else {
								nandAdr = atol(uk);
 8002808:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800280a:	f00a f8bb 	bl	800c984 <atol>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_UART_RxCpltCallback+0x298>)
 8002814:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 8002816:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <HAL_UART_RxCpltCallback+0x298>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <HAL_UART_RxCpltCallback+0x29c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4413      	add	r3, r2
 8002820:	4a23      	ldr	r2, [pc, #140]	; (80028b0 <HAL_UART_RxCpltCallback+0x298>)
 8002822:	6013      	str	r3, [r2, #0]
							check = true;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 800282a:	e128      	b.n	8002a7e <HAL_UART_RxCpltCallback+0x466>
						case cmdNext://"next";
							if (nandAdr >= devAdr) {
 800282c:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_UART_RxCpltCallback+0x298>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_UART_RxCpltCallback+0x29c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	f0c0 811d 	bcc.w	8002a74 <HAL_UART_RxCpltCallback+0x45c>
								nandLen = 512;
 800283a:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_UART_RxCpltCallback+0x288>)
 800283c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002840:	801a      	strh	r2, [r3, #0]
								nandAdr += nandLen;
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <HAL_UART_RxCpltCallback+0x288>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_UART_RxCpltCallback+0x298>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4413      	add	r3, r2
 800284e:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_UART_RxCpltCallback+0x298>)
 8002850:	6013      	str	r3, [r2, #0]
								check = true;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							}
						break;
 8002858:	e10c      	b.n	8002a74 <HAL_UART_RxCpltCallback+0x45c>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						case cmdArea://"area:'0x0:0x55:256'" //adr:byte:len
						case cmdSave://"save:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 8002860:	4912      	ldr	r1, [pc, #72]	; (80028ac <HAL_UART_RxCpltCallback+0x294>)
 8002862:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002864:	f00a fae5 	bl	800ce32 <strstr>
 8002868:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 800286a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286c:	2b00      	cmp	r3, #0
 800286e:	d023      	beq.n	80028b8 <HAL_UART_RxCpltCallback+0x2a0>
								if (uki == uk) {
 8002870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002874:	429a      	cmp	r2, r3
 8002876:	d121      	bne.n	80028bc <HAL_UART_RxCpltCallback+0x2a4>
									uki += 2;
 8002878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287a:	3302      	adds	r3, #2
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002884:	e01a      	b.n	80028bc <HAL_UART_RxCpltCallback+0x2a4>
 8002886:	bf00      	nop
 8002888:	40004800 	.word	0x40004800
 800288c:	2000136a 	.word	0x2000136a
 8002890:	20001368 	.word	0x20001368
 8002894:	20000b68 	.word	0x20000b68
 8002898:	20000356 	.word	0x20000356
 800289c:	20000008 	.word	0x20000008
 80028a0:	20001380 	.word	0x20001380
 80028a4:	2000136d 	.word	0x2000136d
 80028a8:	2000006c 	.word	0x2000006c
 80028ac:	0800da2c 	.word	0x0800da2c
 80028b0:	2000137c 	.word	0x2000137c
 80028b4:	20001378 	.word	0x20001378
								}
							} else uki = uk;
 80028b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 80028bc:	213a      	movs	r1, #58	; 0x3a
 80028be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80028c0:	f00a fa8f 	bl	800cde2 <strchr>
 80028c4:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80d5 	beq.w	8002a78 <HAL_UART_RxCpltCallback+0x460>
								ukb = uke + 1;
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	3301      	adds	r3, #1
 80028d2:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 80028d4:	f107 030c 	add.w	r3, r7, #12
 80028d8:	2210      	movs	r2, #16
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f00a f93b 	bl	800cb58 <memset>
								memcpy(tmp, uki, uke - uki);
 80028e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028f0:	4618      	mov	r0, r3
 80028f2:	f00a f923 	bl	800cb3c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 80028f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_UART_RxCpltCallback+0x308>
 80028fe:	f107 030c 	add.w	r3, r7, #12
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fc64 	bl	80001d0 <strlen>
 8002908:	4603      	mov	r3, r0
 800290a:	b2da      	uxtb	r2, r3
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fbe0 	bl	80020d8 <hex2bin>
 8002918:	4603      	mov	r3, r0
 800291a:	4a7f      	ldr	r2, [pc, #508]	; (8002b18 <HAL_UART_RxCpltCallback+0x500>)
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e008      	b.n	8002932 <HAL_UART_RxCpltCallback+0x31a>
								    else nandAdr = atol(tmp);
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	4618      	mov	r0, r3
 8002926:	f00a f82d 	bl	800c984 <atol>
 800292a:	4603      	mov	r3, r0
 800292c:	461a      	mov	r2, r3
 800292e:	4b7a      	ldr	r3, [pc, #488]	; (8002b18 <HAL_UART_RxCpltCallback+0x500>)
 8002930:	601a      	str	r2, [r3, #0]
								uki = ukb;
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 8002936:	213a      	movs	r1, #58	; 0x3a
 8002938:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800293a:	f00a fa52 	bl	800cde2 <strchr>
 800293e:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_UART_RxCpltCallback+0x346>
									nandLen = atol(uke + 1);
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	3301      	adds	r3, #1
 800294a:	4618      	mov	r0, r3
 800294c:	f00a f81a 	bl	800c984 <atol>
 8002950:	4603      	mov	r3, r0
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b71      	ldr	r3, [pc, #452]	; (8002b1c <HAL_UART_RxCpltCallback+0x504>)
 8002956:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 800295e:	4970      	ldr	r1, [pc, #448]	; (8002b20 <HAL_UART_RxCpltCallback+0x508>)
 8002960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002962:	f00a fa66 	bl	800ce32 <strstr>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_UART_RxCpltCallback+0x362>
									ukb += 2;
 800296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296e:	3302      	adds	r3, #2
 8002970:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002978:	e002      	b.n	8002980 <HAL_UART_RxCpltCallback+0x368>
								} else hex = false;
 800297a:	2300      	movs	r3, #0
 800297c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 8002980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <HAL_UART_RxCpltCallback+0x38c>
 8002988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800298a:	f7fd fc21 	bl	80001d0 <strlen>
 800298e:	4603      	mov	r3, r0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	4619      	mov	r1, r3
 8002994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002996:	f7ff fb9f 	bl	80020d8 <hex2bin>
 800299a:	4603      	mov	r3, r0
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b61      	ldr	r3, [pc, #388]	; (8002b24 <HAL_UART_RxCpltCallback+0x50c>)
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e006      	b.n	80029b2 <HAL_UART_RxCpltCallback+0x39a>
								    else nandByte = (uint8_t)atol(ukb);
 80029a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029a6:	f009 ffed 	bl	800c984 <atol>
 80029aa:	4603      	mov	r3, r0
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4b5d      	ldr	r3, [pc, #372]	; (8002b24 <HAL_UART_RxCpltCallback+0x50c>)
 80029b0:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 80029b2:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_UART_RxCpltCallback+0x500>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_UART_RxCpltCallback+0x510>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	4a56      	ldr	r2, [pc, #344]	; (8002b18 <HAL_UART_RxCpltCallback+0x500>)
 80029be:	6013      	str	r3, [r2, #0]
								check = true;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							}
						}
						break;
 80029c6:	e057      	b.n	8002a78 <HAL_UART_RxCpltCallback+0x460>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 80029c8:	4958      	ldr	r1, [pc, #352]	; (8002b2c <HAL_UART_RxCpltCallback+0x514>)
 80029ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029cc:	f00a fa31 	bl	800ce32 <strstr>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_UART_RxCpltCallback+0x3c4>
								qcmd.attr = 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	777b      	strb	r3, [r7, #29]
 80029da:	e00c      	b.n	80029f6 <HAL_UART_RxCpltCallback+0x3de>
							} else {
								uint32_t blk = atol(uk);
 80029dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029de:	f009 ffd1 	bl	800c984 <atol>
 80029e2:	4603      	mov	r3, r0
 80029e4:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 80029e6:	4b52      	ldr	r3, [pc, #328]	; (8002b30 <HAL_UART_RxCpltCallback+0x518>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	6a3a      	ldr	r2, [r7, #32]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d202      	bcs.n	80029f6 <HAL_UART_RxCpltCallback+0x3de>
 80029f0:	4a50      	ldr	r2, [pc, #320]	; (8002b34 <HAL_UART_RxCpltCallback+0x51c>)
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	6013      	str	r3, [r2, #0]
							}
							cmd_flag = 1;
 80029f6:	4b50      	ldr	r3, [pc, #320]	; (8002b38 <HAL_UART_RxCpltCallback+0x520>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
						break;
 80029fc:	e03f      	b.n	8002a7e <HAL_UART_RxCpltCallback+0x466>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 80029fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a00:	f009 ffc0 	bl	800c984 <atol>
 8002a04:	4603      	mov	r3, r0
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < total_pages) {//(128K / 2K) * 1024 = 65536
 8002a08:	4b4c      	ldr	r3, [pc, #304]	; (8002b3c <HAL_UART_RxCpltCallback+0x524>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d234      	bcs.n	8002a7c <HAL_UART_RxCpltCallback+0x464>
								nandPage = page;
 8002a12:	4a4b      	ldr	r2, [pc, #300]	; (8002b40 <HAL_UART_RxCpltCallback+0x528>)
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	6013      	str	r3, [r2, #0]
								cmd_flag = 1;
 8002a18:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <HAL_UART_RxCpltCallback+0x520>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8002a1e:	e02d      	b.n	8002a7c <HAL_UART_RxCpltCallback+0x464>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 8002a20:	2303      	movs	r3, #3
 8002a22:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							if (strstr(uk, "off")) {
 8002a26:	4947      	ldr	r1, [pc, #284]	; (8002b44 <HAL_UART_RxCpltCallback+0x52c>)
 8002a28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a2a:	f00a fa02 	bl	800ce32 <strstr>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_UART_RxCpltCallback+0x424>
								lg = logOff;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002a3a:	e014      	b.n	8002a66 <HAL_UART_RxCpltCallback+0x44e>
							} else if (strstr(uk, "on")) {
 8002a3c:	4942      	ldr	r1, [pc, #264]	; (8002b48 <HAL_UART_RxCpltCallback+0x530>)
 8002a3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a40:	f00a f9f7 	bl	800ce32 <strstr>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_UART_RxCpltCallback+0x43a>
								lg = logOn;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002a50:	e009      	b.n	8002a66 <HAL_UART_RxCpltCallback+0x44e>
							} else if (strstr(uk, "dump")) {
 8002a52:	493e      	ldr	r1, [pc, #248]	; (8002b4c <HAL_UART_RxCpltCallback+0x534>)
 8002a54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a56:	f00a f9ec 	bl	800ce32 <strstr>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_UART_RxCpltCallback+0x44e>
								lg = logDump;
 8002a60:	2302      	movs	r3, #2
 8002a62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							}
							qcmd.attr = lg;
 8002a66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a6a:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 8002a6c:	4b32      	ldr	r3, [pc, #200]	; (8002b38 <HAL_UART_RxCpltCallback+0x520>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
						}
						break;
 8002a72:	e004      	b.n	8002a7e <HAL_UART_RxCpltCallback+0x466>
						break;
 8002a74:	bf00      	nop
 8002a76:	e002      	b.n	8002a7e <HAL_UART_RxCpltCallback+0x466>
						break;
 8002a78:	bf00      	nop
 8002a7a:	e000      	b.n	8002a7e <HAL_UART_RxCpltCallback+0x466>
						break;
 8002a7c:	bf00      	nop
					}
					qcmd.cmd = idx;
 8002a7e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002a82:	773b      	strb	r3, [r7, #28]
					if (check) {
 8002a84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_UART_RxCpltCallback+0x4ac>
						if ((nandAdr + nandLen) >= (total_bytes + devAdr)) {
 8002a8c:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_UART_RxCpltCallback+0x504>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <HAL_UART_RxCpltCallback+0x500>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	441a      	add	r2, r3
 8002a98:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_UART_RxCpltCallback+0x538>)
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_UART_RxCpltCallback+0x510>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	440b      	add	r3, r1
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d30b      	bcc.n	8002abe <HAL_UART_RxCpltCallback+0x4a6>
							nandLen = total_bytes - nandAdr - 1;
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <HAL_UART_RxCpltCallback+0x538>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <HAL_UART_RxCpltCallback+0x500>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_UART_RxCpltCallback+0x504>)
 8002abc:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 8002abe:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <HAL_UART_RxCpltCallback+0x520>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
					}
					//
					if (cmd_flag) {
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <HAL_UART_RxCpltCallback+0x520>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <HAL_UART_RxCpltCallback+0x4e0>
						if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8002acc:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_UART_RxCpltCallback+0x53c>)
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	f107 011c 	add.w	r1, r7, #28
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2205      	movs	r2, #5
 8002ad8:	f007 f852 	bl	8009b80 <osMessageQueuePut>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_UART_RxCpltCallback+0x540>)
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_UART_RxCpltCallback+0x540>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <HAL_UART_RxCpltCallback+0x4e0>
 8002aea:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <HAL_UART_RxCpltCallback+0x544>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_UART_RxCpltCallback+0x544>)
 8002af6:	801a      	strh	r2, [r3, #0]
					}
					//
				}
			}
			ruk = 0;
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_UART_RxCpltCallback+0x548>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8002afe:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_UART_RxCpltCallback+0x54c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8002b04:	2201      	movs	r2, #1
 8002b06:	4918      	ldr	r1, [pc, #96]	; (8002b68 <HAL_UART_RxCpltCallback+0x550>)
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f005 fcb6 	bl	800847a <HAL_UART_Receive_IT>
	}
}
 8002b0e:	bf00      	nop
 8002b10:	3740      	adds	r7, #64	; 0x40
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	2000137c 	.word	0x2000137c
 8002b1c:	20001380 	.word	0x20001380
 8002b20:	0800da2c 	.word	0x0800da2c
 8002b24:	2000008c 	.word	0x2000008c
 8002b28:	20001378 	.word	0x20001378
 8002b2c:	0800da30 	.word	0x0800da30
 8002b30:	20001398 	.word	0x20001398
 8002b34:	20001384 	.word	0x20001384
 8002b38:	20000356 	.word	0x20000356
 8002b3c:	20001370 	.word	0x20001370
 8002b40:	20001388 	.word	0x20001388
 8002b44:	0800da34 	.word	0x0800da34
 8002b48:	0800da38 	.word	0x0800da38
 8002b4c:	0800da3c 	.word	0x0800da3c
 8002b50:	20001374 	.word	0x20001374
 8002b54:	2000034c 	.word	0x2000034c
 8002b58:	200023b0 	.word	0x200023b0
 8002b5c:	20000354 	.word	0x20000354
 8002b60:	2000136a 	.word	0x2000136a
 8002b64:	20000b68 	.word	0x20000b68
 8002b68:	20001368 	.word	0x20001368

08002b6c <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a05      	ldr	r2, [pc, #20]	; (8002b90 <HAL_UART_TxCpltCallback+0x24>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d102      	bne.n	8002b84 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_UART_TxCpltCallback+0x28>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
	}
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40004800 	.word	0x40004800
 8002b94:	20000068 	.word	0x20000068

08002b98 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <HAL_SPI_TxCpltCallback+0x24>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d102      	bne.n	8002bb0 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x28>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
	}
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40013000 	.word	0x40013000
 8002bc0:	20000069 	.word	0x20000069

08002bc4 <showBuf>:
	}
}
*/
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08e      	sub	sp, #56	; 0x38
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60ba      	str	r2, [r7, #8]
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	4603      	mov	r3, r0
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8002bd6:	2320      	movs	r3, #32
 8002bd8:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (type == 2) {
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d10e      	bne.n	8002c06 <showBuf+0x42>
		if (rd) {
 8002be8:	7bbb      	ldrb	r3, [r7, #14]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <showBuf+0x3e>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 8002bee:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <showBuf+0x154>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
			max_ind = chipConf.PageSize;
 8002bfa:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <showBuf+0x154>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c00:	e001      	b.n	8002c06 <showBuf+0x42>
		} else ind = max_ind;
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 8002c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d271      	bcs.n	8002cf2 <showBuf+0x12e>
		bool done = false;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 8002c14:	2300      	movs	r3, #0
 8002c16:	623b      	str	r3, [r7, #32]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c2a:	fb01 f202 	mul.w	r2, r1, r2
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <showBuf+0x76>
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	3301      	adds	r3, #1
 8002c38:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 8002c3a:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <showBuf+0x158>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
		while (!done) {
 8002c40:	e046      	b.n	8002cd0 <showBuf+0x10c>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 8002c42:	4836      	ldr	r0, [pc, #216]	; (8002d1c <showBuf+0x158>)
 8002c44:	f7fd fac4 	bl	80001d0 <strlen>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4a34      	ldr	r2, [pc, #208]	; (8002d1c <showBuf+0x158>)
 8002c4c:	4413      	add	r3, r2
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	4933      	ldr	r1, [pc, #204]	; (8002d20 <showBuf+0x15c>)
 8002c52:	4618      	mov	r0, r3
 8002c54:	f00a f896 	bl	800cd84 <siprintf>
			for (int i = 0; i < step; i++) {
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	e01d      	b.n	8002c9a <showBuf+0xd6>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 8002c5e:	482f      	ldr	r0, [pc, #188]	; (8002d1c <showBuf+0x158>)
 8002c60:	f7fd fab6 	bl	80001d0 <strlen>
 8002c64:	4603      	mov	r3, r0
 8002c66:	4a2d      	ldr	r2, [pc, #180]	; (8002d1c <showBuf+0x158>)
 8002c68:	1898      	adds	r0, r3, r2
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	4413      	add	r3, r2
 8002c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c72:	4413      	add	r3, r2
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	492a      	ldr	r1, [pc, #168]	; (8002d24 <showBuf+0x160>)
 8002c7a:	f00a f883 	bl	800cd84 <siprintf>
				ix++;
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	3301      	adds	r3, #1
 8002c82:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 8002c84:	6a3a      	ldr	r2, [r7, #32]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d103      	bne.n	8002c94 <showBuf+0xd0>
					done = true;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 8002c92:	e006      	b.n	8002ca2 <showBuf+0xde>
			for (int i = 0; i < step; i++) {
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	3301      	adds	r3, #1
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	dbdd      	blt.n	8002c5e <showBuf+0x9a>
				}
			}
			strcat(stx, eol);
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <showBuf+0x164>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	481c      	ldr	r0, [pc, #112]	; (8002d1c <showBuf+0x158>)
 8002caa:	f00a f88b 	bl	800cdc4 <strcat>
			adr += step;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	60bb      	str	r3, [r7, #8]
			ind += step;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cba:	4413      	add	r3, r2
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <showBuf+0x10c>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 8002cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cd4:	f083 0301 	eor.w	r3, r3, #1
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1b1      	bne.n	8002c42 <showBuf+0x7e>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 8002cde:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <showBuf+0x168>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d014      	beq.n	8002d10 <showBuf+0x14c>
 8002ce6:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <showBuf+0x158>)
 8002ce8:	4911      	ldr	r1, [pc, #68]	; (8002d30 <showBuf+0x16c>)
 8002cea:	2000      	movs	r0, #0
 8002cec:	f7ff fc30 	bl	8002550 <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 8002cf0:	e00e      	b.n	8002d10 <showBuf+0x14c>
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <showBuf+0x168>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <showBuf+0x14c>
 8002cfa:	7bbb      	ldrb	r3, [r7, #14]
 8002cfc:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <showBuf+0x164>)
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	9201      	str	r2, [sp, #4]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d08:	490a      	ldr	r1, [pc, #40]	; (8002d34 <showBuf+0x170>)
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7ff fc20 	bl	8002550 <Report>
}
 8002d10:	bf00      	nop
 8002d12:	3730      	adds	r7, #48	; 0x30
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20001398 	.word	0x20001398
 8002d1c:	200023b4 	.word	0x200023b4
 8002d20:	0800da44 	.word	0x0800da44
 8002d24:	0800da4c 	.word	0x0800da4c
 8002d28:	20000004 	.word	0x20000004
 8002d2c:	20000070 	.word	0x20000070
 8002d30:	0800da54 	.word	0x0800da54
 8002d34:	0800da58 	.word	0x0800da58

08002d38 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8002d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d3a:	f2ad 4db4 	subw	sp, sp, #1204	; 0x4b4
 8002d3e:	af06      	add	r7, sp, #24
 8002d40:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8002d44:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8002d48:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(500);
 8002d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d4e:	f001 ff73 	bl	8004c38 <HAL_Delay>
	if (dbg != logOff) {
 8002d52:	4b55      	ldr	r3, [pc, #340]	; (8002ea8 <defThread+0x170>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d018      	beq.n	8002d8c <defThread+0x54>
		Report(0, "%s", eol);
 8002d5a:	4b54      	ldr	r3, [pc, #336]	; (8002eac <defThread+0x174>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4953      	ldr	r1, [pc, #332]	; (8002eb0 <defThread+0x178>)
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7ff fbf4 	bl	8002550 <Report>
		Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8002d68:	4b52      	ldr	r3, [pc, #328]	; (8002eb4 <defThread+0x17c>)
 8002d6a:	681c      	ldr	r4, [r3, #0]
 8002d6c:	f009 fcda 	bl	800c724 <xPortGetFreeHeapSize>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b4e      	ldr	r3, [pc, #312]	; (8002eac <defThread+0x174>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	9302      	str	r3, [sp, #8]
 8002d78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	9200      	str	r2, [sp, #0]
 8002d80:	4b4d      	ldr	r3, [pc, #308]	; (8002eb8 <defThread+0x180>)
 8002d82:	4622      	mov	r2, r4
 8002d84:	494d      	ldr	r1, [pc, #308]	; (8002ebc <defThread+0x184>)
 8002d86:	2001      	movs	r0, #1
 8002d88:	f7ff fbe2 	bl	8002550 <Report>
	}

	uint8_t next_block_erase = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	uint32_t iBlk, stik;
	NAND_AddressTypeDef clr = {
 8002d92:	2300      	movs	r3, #0
 8002d94:	f8a7 3444 	strh.w	r3, [r7, #1092]	; 0x444
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f8a7 3446 	strh.w	r3, [r7, #1094]	; 0x446
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
		.Page = 0,
		.Plane = 0,//1,
		.Block = 0
	};
	uint8_t nand_show = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
	bool readed = false;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f887 348a 	strb.w	r3, [r7, #1162]	; 0x48a
	char cid[32];
	uint32_t PageSizeKB = chipConf.PageSize / 1024;
 8002db0:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <defThread+0x188>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0a9b      	lsrs	r3, r3, #10
 8002db6:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
	uint32_t BlockSizeKB = chipConf.BlockSize / 1024;
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <defThread+0x188>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	0a9b      	lsrs	r3, r3, #10
 8002dc0:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
	uint32_t PlaneSizeMB = chipConf.PlaneSize / 1024 / 1024;
 8002dc4:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <defThread+0x188>)
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	0d1b      	lsrs	r3, r3, #20
 8002dca:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
	uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <defThread+0x18c>)
 8002dd0:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
	if (nandState == HAL_NAND_STATE_READY) {
 8002dd4:	4b3c      	ldr	r3, [pc, #240]	; (8002ec8 <defThread+0x190>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	f040 8085 	bne.w	8002ee8 <defThread+0x1b0>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <defThread+0x18c>)
 8002de0:	785b      	ldrb	r3, [r3, #1]
 8002de2:	22f1      	movs	r2, #241	; 0xf1
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d108      	bne.n	8002dfa <defThread+0xc2>
 8002de8:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <defThread+0x194>)
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8002df0:	2220      	movs	r2, #32
 8002df2:	4618      	mov	r0, r3
 8002df4:	f00a f80a 	bl	800ce0c <strncpy>
 8002df8:	e006      	b.n	8002e08 <defThread+0xd0>
		                               else strcpy(cid, "UNKNOWN");
 8002dfa:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8002dfe:	4a34      	ldr	r2, [pc, #208]	; (8002ed0 <defThread+0x198>)
 8002e00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e04:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8002e08:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <defThread+0x19c>)
 8002e0a:	4a33      	ldr	r2, [pc, #204]	; (8002ed8 <defThread+0x1a0>)
 8002e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e10:	6018      	str	r0, [r3, #0]
 8002e12:	3304      	adds	r3, #4
 8002e14:	8019      	strh	r1, [r3, #0]
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8002e16:	2300      	movs	r3, #0
 8002e18:	f887 3489 	strb.w	r3, [r7, #1161]	; 0x489
 8002e1c:	e016      	b.n	8002e4c <defThread+0x114>
 8002e1e:	482d      	ldr	r0, [pc, #180]	; (8002ed4 <defThread+0x19c>)
 8002e20:	f7fd f9d6 	bl	80001d0 <strlen>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4a2b      	ldr	r2, [pc, #172]	; (8002ed4 <defThread+0x19c>)
 8002e28:	1898      	adds	r0, r3, r2
 8002e2a:	f997 3489 	ldrsb.w	r3, [r7, #1161]	; 0x489
 8002e2e:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	4928      	ldr	r1, [pc, #160]	; (8002edc <defThread+0x1a4>)
 8002e3a:	f009 ffa3 	bl	800cd84 <siprintf>
 8002e3e:	f997 3489 	ldrsb.w	r3, [r7, #1161]	; 0x489
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f887 3489 	strb.w	r3, [r7, #1161]	; 0x489
 8002e4c:	f897 3489 	ldrb.w	r3, [r7, #1161]	; 0x489
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d9e4      	bls.n	8002e1e <defThread+0xe6>
		sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8002e54:	481f      	ldr	r0, [pc, #124]	; (8002ed4 <defThread+0x19c>)
 8002e56:	f7fd f9bb 	bl	80001d0 <strlen>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <defThread+0x19c>)
 8002e5e:	1898      	adds	r0, r3, r2
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <defThread+0x18c>)
 8002e62:	785b      	ldrb	r3, [r3, #1]
 8002e64:	461a      	mov	r2, r3
 8002e66:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8002e6a:	491d      	ldr	r1, [pc, #116]	; (8002ee0 <defThread+0x1a8>)
 8002e6c:	f009 ff8a 	bl	800cd84 <siprintf>
		sprintf(stx+strlen(stx), "\tPageSize:%lu KB\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB",
 8002e70:	4818      	ldr	r0, [pc, #96]	; (8002ed4 <defThread+0x19c>)
 8002e72:	f7fd f9ad 	bl	80001d0 <strlen>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <defThread+0x19c>)
 8002e7a:	1898      	adds	r0, r3, r2
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <defThread+0x188>)
 8002e7e:	685c      	ldr	r4, [r3, #4]
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <defThread+0x188>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <defThread+0x188>)
 8002e86:	6912      	ldr	r2, [r2, #16]
 8002e88:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 8002e8c:	9103      	str	r1, [sp, #12]
 8002e8e:	9202      	str	r2, [sp, #8]
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	4623      	mov	r3, r4
 8002e9a:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8002e9e:	4911      	ldr	r1, [pc, #68]	; (8002ee4 <defThread+0x1ac>)
 8002ea0:	f009 ff70 	bl	800cd84 <siprintf>
 8002ea4:	e02d      	b.n	8002f02 <defThread+0x1ca>
 8002ea6:	bf00      	nop
 8002ea8:	20000070 	.word	0x20000070
 8002eac:	20000004 	.word	0x20000004
 8002eb0:	0800da54 	.word	0x0800da54
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	080100d4 	.word	0x080100d4
 8002ebc:	0800da80 	.word	0x0800da80
 8002ec0:	20001398 	.word	0x20001398
 8002ec4:	20001390 	.word	0x20001390
 8002ec8:	2000008d 	.word	0x2000008d
 8002ecc:	20000090 	.word	0x20000090
 8002ed0:	0800daac 	.word	0x0800daac
 8002ed4:	200023b4 	.word	0x200023b4
 8002ed8:	0800dab4 	.word	0x0800dab4
 8002edc:	0800da4c 	.word	0x0800da4c
 8002ee0:	0800dabc 	.word	0x0800dabc
 8002ee4:	0800dad4 	.word	0x0800dad4
					chipConf.BlockNbr,
					chipConf.PlaneNbr,
					PlaneSizeMB);
	} else {
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
					     nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8002ee8:	4bb3      	ldr	r3, [pc, #716]	; (80031b8 <defThread+0x480>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 8002ef0:	4ab2      	ldr	r2, [pc, #712]	; (80031bc <defThread+0x484>)
 8002ef2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ef6:	4bb0      	ldr	r3, [pc, #704]	; (80031b8 <defThread+0x480>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	49b1      	ldr	r1, [pc, #708]	; (80031c0 <defThread+0x488>)
 8002efc:	48b1      	ldr	r0, [pc, #708]	; (80031c4 <defThread+0x48c>)
 8002efe:	f009 ff41 	bl	800cd84 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8002f02:	4bb1      	ldr	r3, [pc, #708]	; (80031c8 <defThread+0x490>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <defThread+0x1e0>
 8002f0a:	4bb0      	ldr	r3, [pc, #704]	; (80031cc <defThread+0x494>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4aad      	ldr	r2, [pc, #692]	; (80031c4 <defThread+0x48c>)
 8002f10:	49af      	ldr	r1, [pc, #700]	; (80031d0 <defThread+0x498>)
 8002f12:	2001      	movs	r0, #1
 8002f14:	f7ff fb1c 	bl	8002550 <Report>


	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8002f1e:	4bad      	ldr	r3, [pc, #692]	; (80031d4 <defThread+0x49c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002f2a:	9200      	str	r2, [sp, #0]
 8002f2c:	22ef      	movs	r2, #239	; 0xef
 8002f2e:	2100      	movs	r1, #0
 8002f30:	2000      	movs	r0, #0
 8002f32:	f001 f9b2 	bl	800429a <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8002f36:	4ba7      	ldr	r3, [pc, #668]	; (80031d4 <defThread+0x49c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002f42:	b299      	uxth	r1, r3
 8002f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	23ef      	movs	r3, #239	; 0xef
 8002f4c:	22ef      	movs	r2, #239	; 0xef
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f001 f9a3 	bl	800429a <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 8002f54:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8002f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5c:	499e      	ldr	r1, [pc, #632]	; (80031d8 <defThread+0x4a0>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f009 ff10 	bl	800cd84 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 8002f64:	4b9d      	ldr	r3, [pc, #628]	; (80031dc <defThread+0x4a4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	23f0      	movs	r3, #240	; 0xf0
 8002f6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 fa9a 	bl	80044b4 <mkLineCenter>
	sprintf(screen+strlen(screen),
 8002f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd f923 	bl	80001d0 <strlen>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f90:	1898      	adds	r0, r3, r2
 8002f92:	4b93      	ldr	r3, [pc, #588]	; (80031e0 <defThread+0x4a8>)
 8002f94:	685c      	ldr	r4, [r3, #4]
 8002f96:	4b92      	ldr	r3, [pc, #584]	; (80031e0 <defThread+0x4a8>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4a91      	ldr	r2, [pc, #580]	; (80031e0 <defThread+0x4a8>)
 8002f9c:	6912      	ldr	r2, [r2, #16]
 8002f9e:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 8002fa2:	9103      	str	r1, [sp, #12]
 8002fa4:	9202      	str	r2, [sp, #8]
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	4623      	mov	r3, r4
 8002fb0:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8002fb4:	498b      	ldr	r1, [pc, #556]	; (80031e4 <defThread+0x4ac>)
 8002fb6:	f009 fee5 	bl	800cd84 <siprintf>
			chipConf.SpareAreaSize,
			BlockSizeKB,
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			PlaneSizeMB);
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 8002fba:	4b8b      	ldr	r3, [pc, #556]	; (80031e8 <defThread+0x4b0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00e      	beq.n	8002fe0 <defThread+0x2a8>
 8002fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd f902 	bl	80001d0 <strlen>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd2:	4413      	add	r3, r2
 8002fd4:	4a84      	ldr	r2, [pc, #528]	; (80031e8 <defThread+0x4b0>)
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	4984      	ldr	r1, [pc, #528]	; (80031ec <defThread+0x4b4>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f009 fed2 	bl	800cd84 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8002fe0:	4b7e      	ldr	r3, [pc, #504]	; (80031dc <defThread+0x4a4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd fbc6 	bl	8000778 <__aeabi_i2d>
 8002fec:	4604      	mov	r4, r0
 8002fee:	460d      	mov	r5, r1
 8002ff0:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <defThread+0x4a4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd fbbe 	bl	8000778 <__aeabi_i2d>
 8002ffc:	a36c      	add	r3, pc, #432	; (adr r3, 80031b0 <defThread+0x478>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	f7fd f93d 	bl	8000280 <__aeabi_dmul>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4620      	mov	r0, r4
 800300c:	4629      	mov	r1, r5
 800300e:	f7fd fa67 	bl	80004e0 <__adddf3>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	f7fd fc17 	bl	800084c <__aeabi_d2uiz>
 800301e:	4603      	mov	r3, r0
 8003020:	b298      	uxth	r0, r3
 8003022:	4b6e      	ldr	r3, [pc, #440]	; (80031dc <defThread+0x4a4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a72      	ldr	r2, [pc, #456]	; (80031f0 <defThread+0x4b8>)
 8003028:	8812      	ldrh	r2, [r2, #0]
 800302a:	43d2      	mvns	r2, r2
 800302c:	b292      	uxth	r2, r2
 800302e:	4970      	ldr	r1, [pc, #448]	; (80031f0 <defThread+0x4b8>)
 8003030:	8809      	ldrh	r1, [r1, #0]
 8003032:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8003036:	9102      	str	r1, [sp, #8]
 8003038:	9201      	str	r2, [sp, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	9200      	str	r2, [sp, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4622      	mov	r2, r4
 8003042:	4601      	mov	r1, r0
 8003044:	2000      	movs	r0, #0
 8003046:	f001 f9df 	bl	8004408 <ST7789_WriteString>
					   screen,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 800304a:	2001      	movs	r0, #1
 800304c:	f000 ff96 	bl	8003f7c <ipsOn>


	bool loop = true;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 3485 	strb.w	r3, [r7, #1157]	; 0x485
	bool led = false;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
	uint32_t tmr = get_tmr(1);
 800305c:	2001      	movs	r0, #1
 800305e:	f7ff f95f 	bl	8002320 <get_tmr>
 8003062:	f8c7 0480 	str.w	r0, [r7, #1152]	; 0x480

	s_qcmd qcmd = {0};
 8003066:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800306a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800306e:	2200      	movs	r2, #0
 8003070:	801a      	strh	r2, [r3, #0]
	uint8_t prio = 0;
 8003072:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003076:	f2a3 4379 	subw	r3, r3, #1145	; 0x479
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
	osStatus_t qs = osOK;
 800307e:	2300      	movs	r3, #0
 8003080:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c

  /* Infinite loop */

	while (loop) {
 8003084:	f000 bdfb 	b.w	8003c7e <defThread+0xf46>

		if (check_tmr(tmr)) {
 8003088:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 800308c:	f7ff f955 	bl	800233a <check_tmr>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 80be 	beq.w	8003214 <defThread+0x4dc>
			tmr = get_tmr(1);
 8003098:	2001      	movs	r0, #1
 800309a:	f7ff f941 	bl	8002320 <get_tmr>
 800309e:	f8c7 0480 	str.w	r0, [r7, #1152]	; 0x480
			//
			sec2str(screen);
 80030a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f9b8 	bl	800241c <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 80030ac:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <defThread+0x49c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	23f0      	movs	r3, #240	; 0xf0
 80030b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f001 f9f6 	bl	80044b4 <mkLineCenter>
 80030c8:	4601      	mov	r1, r0
 80030ca:	4b42      	ldr	r3, [pc, #264]	; (80031d4 <defThread+0x49c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80030d2:	9202      	str	r2, [sp, #8]
 80030d4:	221f      	movs	r2, #31
 80030d6:	9201      	str	r2, [sp, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	9200      	str	r2, [sp, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	460a      	mov	r2, r1
 80030e0:	2100      	movs	r1, #0
 80030e2:	2008      	movs	r0, #8
 80030e4:	f001 f990 	bl	8004408 <ST7789_WriteString>

			sprintf(screen, "Error: 0x%04X", devError);
 80030e8:	4b42      	ldr	r3, [pc, #264]	; (80031f4 <defThread+0x4bc>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f2:	4941      	ldr	r1, [pc, #260]	; (80031f8 <defThread+0x4c0>)
 80030f4:	4618      	mov	r0, r3
 80030f6:	f009 fe45 	bl	800cd84 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 80030fa:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <defThread+0x4bc>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <defThread+0x3d4>
 8003102:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003106:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
 800310a:	e002      	b.n	8003112 <defThread+0x3da>
 800310c:	2300      	movs	r3, #0
 800310e:	f8a7 3486 	strh.w	r3, [r7, #1158]	; 0x486
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <defThread+0x49c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	785b      	ldrb	r3, [r3, #1]
 8003118:	b29b      	uxth	r3, r3
 800311a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800311e:	b29c      	uxth	r4, r3
 8003120:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <defThread+0x49c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	23f0      	movs	r3, #240	; 0xf0
 800312a:	fb93 f3f2 	sdiv	r3, r3, r2
 800312e:	b29a      	uxth	r2, r3
 8003130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f001 f9bc 	bl	80044b4 <mkLineCenter>
 800313c:	4601      	mov	r1, r0
 800313e:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <defThread+0x49c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003146:	9202      	str	r2, [sp, #8]
 8003148:	f8b7 2486 	ldrh.w	r2, [r7, #1158]	; 0x486
 800314c:	9201      	str	r2, [sp, #4]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	9200      	str	r2, [sp, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	460a      	mov	r2, r1
 8003156:	4621      	mov	r1, r4
 8003158:	2000      	movs	r0, #0
 800315a:	f001 f955 	bl	8004408 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 800315e:	4b27      	ldr	r3, [pc, #156]	; (80031fc <defThread+0x4c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d019      	beq.n	800319a <defThread+0x462>
				if (qs != qStat) {
 8003166:	4b25      	ldr	r3, [pc, #148]	; (80031fc <defThread+0x4c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 800316e:	429a      	cmp	r2, r3
 8003170:	d013      	beq.n	800319a <defThread+0x462>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <defThread+0x490>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <defThread+0x45a>
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <defThread+0x4c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe ff36 	bl	8001ff0 <get_qStat>
 8003184:	4602      	mov	r2, r0
 8003186:	4b11      	ldr	r3, [pc, #68]	; (80031cc <defThread+0x494>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	491d      	ldr	r1, [pc, #116]	; (8003200 <defThread+0x4c8>)
 800318c:	2001      	movs	r0, #1
 800318e:	f7ff f9df 	bl	8002550 <Report>
					qs = qStat;
 8003192:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <defThread+0x4c4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
				}
			}

			if (devError) led = true; else led = false;
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <defThread+0x4bc>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d030      	beq.n	8003204 <defThread+0x4cc>
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
 80031a8:	e02f      	b.n	800320a <defThread+0x4d2>
 80031aa:	bf00      	nop
 80031ac:	f3af 8000 	nop.w
 80031b0:	33333333 	.word	0x33333333
 80031b4:	3feb3333 	.word	0x3feb3333
 80031b8:	2000008d 	.word	0x2000008d
 80031bc:	20000094 	.word	0x20000094
 80031c0:	0800db38 	.word	0x0800db38
 80031c4:	200023b4 	.word	0x200023b4
 80031c8:	20000070 	.word	0x20000070
 80031cc:	20000004 	.word	0x20000004
 80031d0:	0800db58 	.word	0x0800db58
 80031d4:	20000084 	.word	0x20000084
 80031d8:	0800db60 	.word	0x0800db60
 80031dc:	20000088 	.word	0x20000088
 80031e0:	20001398 	.word	0x20001398
 80031e4:	0800db6c 	.word	0x0800db6c
 80031e8:	2000138c 	.word	0x2000138c
 80031ec:	0800dbcc 	.word	0x0800dbcc
 80031f0:	2000136e 	.word	0x2000136e
 80031f4:	20000354 	.word	0x20000354
 80031f8:	0800dbdc 	.word	0x0800dbdc
 80031fc:	200023b0 	.word	0x200023b0
 8003200:	0800dbec 	.word	0x0800dbec
 8003204:	2300      	movs	r3, #0
 8003206:	f887 3484 	strb.w	r3, [r7, #1156]	; 0x484
			errLedOn(led);
 800320a:	f897 3484 	ldrb.w	r3, [r7, #1156]	; 0x484
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f830 	bl	8002274 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 8003214:	4bb0      	ldr	r3, [pc, #704]	; (80034d8 <defThread+0x7a0>)
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	f107 021f 	add.w	r2, r7, #31
 800321c:	f107 0120 	add.w	r1, r7, #32
 8003220:	2305      	movs	r3, #5
 8003222:	f006 fd0d 	bl	8009c40 <osMessageQueueGet>
 8003226:	4603      	mov	r3, r0
 8003228:	4aac      	ldr	r2, [pc, #688]	; (80034dc <defThread+0x7a4>)
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4bab      	ldr	r3, [pc, #684]	; (80034dc <defThread+0x7a4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d029      	beq.n	8003288 <defThread+0x550>
			if (qs != qStat) qs = qStat;
 8003234:	4ba9      	ldr	r3, [pc, #676]	; (80034dc <defThread+0x7a4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 800323c:	429a      	cmp	r2, r3
 800323e:	d003      	beq.n	8003248 <defThread+0x510>
 8003240:	4ba6      	ldr	r3, [pc, #664]	; (80034dc <defThread+0x7a4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
			if (qStat != osErrorTimeout) {
 8003248:	4ba4      	ldr	r3, [pc, #656]	; (80034dc <defThread+0x7a4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f113 0f02 	cmn.w	r3, #2
 8003250:	f000 84c1 	beq.w	8003bd6 <defThread+0xe9e>
				devError |= devQUE;
 8003254:	4ba2      	ldr	r3, [pc, #648]	; (80034e0 <defThread+0x7a8>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800325c:	b29a      	uxth	r2, r3
 800325e:	4ba0      	ldr	r3, [pc, #640]	; (80034e0 <defThread+0x7a8>)
 8003260:	801a      	strh	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003262:	4ba0      	ldr	r3, [pc, #640]	; (80034e4 <defThread+0x7ac>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 84b5 	beq.w	8003bd6 <defThread+0xe9e>
 800326c:	4b9b      	ldr	r3, [pc, #620]	; (80034dc <defThread+0x7a4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe febd 	bl	8001ff0 <get_qStat>
 8003276:	4602      	mov	r2, r0
 8003278:	4b9b      	ldr	r3, [pc, #620]	; (80034e8 <defThread+0x7b0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	499b      	ldr	r1, [pc, #620]	; (80034ec <defThread+0x7b4>)
 800327e:	2001      	movs	r0, #1
 8003280:	f7ff f966 	bl	8002550 <Report>
 8003284:	f000 bca7 	b.w	8003bd6 <defThread+0xe9e>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 8003288:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800328c:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	4b96      	ldr	r3, [pc, #600]	; (80034f0 <defThread+0x7b8>)
 8003296:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800329a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800329e:	4995      	ldr	r1, [pc, #596]	; (80034f4 <defThread+0x7bc>)
 80032a0:	4618      	mov	r0, r3
 80032a2:	f009 fd6f 	bl	800cd84 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 80032a6:	4b94      	ldr	r3, [pc, #592]	; (80034f8 <defThread+0x7c0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80032b6:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 80032b8:	4b8f      	ldr	r3, [pc, #572]	; (80034f8 <defThread+0x7c0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	23f0      	movs	r3, #240	; 0xf0
 80032c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 f8f0 	bl	80044b4 <mkLineCenter>
 80032d4:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 80032d6:	4b88      	ldr	r3, [pc, #544]	; (80034f8 <defThread+0x7c0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	9202      	str	r2, [sp, #8]
 80032de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80032e2:	9201      	str	r2, [sp, #4]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	9200      	str	r2, [sp, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	460a      	mov	r2, r1
 80032ec:	4621      	mov	r1, r4
 80032ee:	2000      	movs	r0, #0
 80032f0:	f001 f88a 	bl	8004408 <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			if (dbg > logOn)
 80032f4:	4b7b      	ldr	r3, [pc, #492]	; (80034e4 <defThread+0x7ac>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d91e      	bls.n	800333a <defThread+0x602>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 80032fc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003300:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	4619      	mov	r1, r3
 8003308:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800330c:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003310:	785b      	ldrb	r3, [r3, #1]
 8003312:	4618      	mov	r0, r3
 8003314:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003318:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	4b73      	ldr	r3, [pc, #460]	; (80034f0 <defThread+0x7b8>)
 8003322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003326:	4a70      	ldr	r2, [pc, #448]	; (80034e8 <defThread+0x7b0>)
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	9201      	str	r2, [sp, #4]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	4603      	mov	r3, r0
 8003330:	460a      	mov	r2, r1
 8003332:	4972      	ldr	r1, [pc, #456]	; (80034fc <defThread+0x7c4>)
 8003334:	2001      	movs	r0, #1
 8003336:	f7ff f90b 	bl	8002550 <Report>
			//
			nand_show = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
			switch (qcmd.cmd) {
 8003340:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003344:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b0b      	cmp	r3, #11
 800334c:	f200 8431 	bhi.w	8003bb2 <defThread+0xe7a>
 8003350:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <defThread+0x620>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	080033dd 	.word	0x080033dd
 800335c:	0800349d 	.word	0x0800349d
 8003360:	080035a9 	.word	0x080035a9
 8003364:	08003663 	.word	0x08003663
 8003368:	080037b7 	.word	0x080037b7
 800336c:	0800368d 	.word	0x0800368d
 8003370:	0800374f 	.word	0x0800374f
 8003374:	080037b7 	.word	0x080037b7
 8003378:	080039e7 	.word	0x080039e7
 800337c:	08003539 	.word	0x08003539
 8003380:	080033e5 	.word	0x080033e5
 8003384:	08003389 	.word	0x08003389
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 8003388:	4b57      	ldr	r3, [pc, #348]	; (80034e8 <defThread+0x7b0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	495c      	ldr	r1, [pc, #368]	; (8003500 <defThread+0x7c8>)
 8003390:	485c      	ldr	r0, [pc, #368]	; (8003504 <defThread+0x7cc>)
 8003392:	f009 fcf7 	bl	800cd84 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 8003396:	2300      	movs	r3, #0
 8003398:	f887 347b 	strb.w	r3, [r7, #1147]	; 0x47b
 800339c:	e014      	b.n	80033c8 <defThread+0x690>
 800339e:	4859      	ldr	r0, [pc, #356]	; (8003504 <defThread+0x7cc>)
 80033a0:	f7fc ff16 	bl	80001d0 <strlen>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4a57      	ldr	r2, [pc, #348]	; (8003504 <defThread+0x7cc>)
 80033a8:	1898      	adds	r0, r3, r2
 80033aa:	f897 347b 	ldrb.w	r3, [r7, #1147]	; 0x47b
 80033ae:	4a56      	ldr	r2, [pc, #344]	; (8003508 <defThread+0x7d0>)
 80033b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80033b4:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <defThread+0x7b0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4954      	ldr	r1, [pc, #336]	; (800350c <defThread+0x7d4>)
 80033ba:	f009 fce3 	bl	800cd84 <siprintf>
 80033be:	f897 347b 	ldrb.w	r3, [r7, #1147]	; 0x47b
 80033c2:	3301      	adds	r3, #1
 80033c4:	f887 347b 	strb.w	r3, [r7, #1147]	; 0x47b
 80033c8:	f897 347b 	ldrb.w	r3, [r7, #1147]	; 0x47b
 80033cc:	2b0b      	cmp	r3, #11
 80033ce:	d9e6      	bls.n	800339e <defThread+0x666>
					Report(1, "%s", stx);
 80033d0:	4a4c      	ldr	r2, [pc, #304]	; (8003504 <defThread+0x7cc>)
 80033d2:	494f      	ldr	r1, [pc, #316]	; (8003510 <defThread+0x7d8>)
 80033d4:	2001      	movs	r0, #1
 80033d6:	f7ff f8bb 	bl	8002550 <Report>
				break;
 80033da:	e3ea      	b.n	8003bb2 <defThread+0xe7a>
				case cmdRestart:
					loop = false;
 80033dc:	2300      	movs	r3, #0
 80033de:	f887 3485 	strb.w	r3, [r7, #1157]	; 0x485
		  		break;
 80033e2:	e3e6      	b.n	8003bb2 <defThread+0xe7a>
				case cmdInfo:
					if (dbg != logOff) {
 80033e4:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <defThread+0x7ac>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 83d3 	beq.w	8003b94 <defThread+0xe5c>
						strcpy(stx, "NAND:");
 80033ee:	4b45      	ldr	r3, [pc, #276]	; (8003504 <defThread+0x7cc>)
 80033f0:	4a48      	ldr	r2, [pc, #288]	; (8003514 <defThread+0x7dc>)
 80033f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033f6:	6018      	str	r0, [r3, #0]
 80033f8:	3304      	adds	r3, #4
 80033fa:	8019      	strh	r1, [r3, #0]
						for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 80033fc:	2300      	movs	r3, #0
 80033fe:	f887 347a 	strb.w	r3, [r7, #1146]	; 0x47a
 8003402:	e016      	b.n	8003432 <defThread+0x6fa>
 8003404:	483f      	ldr	r0, [pc, #252]	; (8003504 <defThread+0x7cc>)
 8003406:	f7fc fee3 	bl	80001d0 <strlen>
 800340a:	4603      	mov	r3, r0
 800340c:	4a3d      	ldr	r2, [pc, #244]	; (8003504 <defThread+0x7cc>)
 800340e:	1898      	adds	r0, r3, r2
 8003410:	f997 347a 	ldrsb.w	r3, [r7, #1146]	; 0x47a
 8003414:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8003418:	4413      	add	r3, r2
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	493e      	ldr	r1, [pc, #248]	; (8003518 <defThread+0x7e0>)
 8003420:	f009 fcb0 	bl	800cd84 <siprintf>
 8003424:	f997 347a 	ldrsb.w	r3, [r7, #1146]	; 0x47a
 8003428:	b2db      	uxtb	r3, r3
 800342a:	3301      	adds	r3, #1
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f887 347a 	strb.w	r3, [r7, #1146]	; 0x47a
 8003432:	f897 347a 	ldrb.w	r3, [r7, #1146]	; 0x47a
 8003436:	2b04      	cmp	r3, #4
 8003438:	d9e4      	bls.n	8003404 <defThread+0x6cc>
						sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 800343a:	4832      	ldr	r0, [pc, #200]	; (8003504 <defThread+0x7cc>)
 800343c:	f7fc fec8 	bl	80001d0 <strlen>
 8003440:	4603      	mov	r3, r0
 8003442:	4a30      	ldr	r2, [pc, #192]	; (8003504 <defThread+0x7cc>)
 8003444:	1898      	adds	r0, r3, r2
 8003446:	4b35      	ldr	r3, [pc, #212]	; (800351c <defThread+0x7e4>)
 8003448:	785b      	ldrb	r3, [r3, #1]
 800344a:	461a      	mov	r2, r3
 800344c:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8003450:	4933      	ldr	r1, [pc, #204]	; (8003520 <defThread+0x7e8>)
 8003452:	f009 fc97 	bl	800cd84 <siprintf>
						sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB",
 8003456:	482b      	ldr	r0, [pc, #172]	; (8003504 <defThread+0x7cc>)
 8003458:	f7fc feba 	bl	80001d0 <strlen>
 800345c:	4603      	mov	r3, r0
 800345e:	4a29      	ldr	r2, [pc, #164]	; (8003504 <defThread+0x7cc>)
 8003460:	1898      	adds	r0, r3, r2
 8003462:	4b30      	ldr	r3, [pc, #192]	; (8003524 <defThread+0x7ec>)
 8003464:	681c      	ldr	r4, [r3, #0]
 8003466:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <defThread+0x7ec>)
 8003468:	685d      	ldr	r5, [r3, #4]
 800346a:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <defThread+0x7ec>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	4a2d      	ldr	r2, [pc, #180]	; (8003524 <defThread+0x7ec>)
 8003470:	6912      	ldr	r2, [r2, #16]
 8003472:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 8003476:	9103      	str	r1, [sp, #12]
 8003478:	9202      	str	r2, [sp, #8]
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	462b      	mov	r3, r5
 8003484:	4622      	mov	r2, r4
 8003486:	4928      	ldr	r1, [pc, #160]	; (8003528 <defThread+0x7f0>)
 8003488:	f009 fc7c 	bl	800cd84 <siprintf>
											chipConf.SpareAreaSize,
											BlockSizeKB,
											chipConf.BlockNbr,
											chipConf.PlaneNbr,
											PlaneSizeMB);
						Report(1, "%s%s", stx, eol);
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <defThread+0x7b0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <defThread+0x7cc>)
 8003492:	4926      	ldr	r1, [pc, #152]	; (800352c <defThread+0x7f4>)
 8003494:	2001      	movs	r0, #1
 8003496:	f7ff f85b 	bl	8002550 <Report>
					}
				break;
 800349a:	e37b      	b.n	8003b94 <defThread+0xe5c>
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 800349c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80034a0:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80034a4:	785b      	ldrb	r3, [r3, #1]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d105      	bne.n	80034b6 <defThread+0x77e>
						set_Date(epoch);
 80034aa:	4b21      	ldr	r3, [pc, #132]	; (8003530 <defThread+0x7f8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe ff54 	bl	800235c <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 80034b4:	e370      	b.n	8003b98 <defThread+0xe60>
						sec2str(stx);
 80034b6:	4813      	ldr	r0, [pc, #76]	; (8003504 <defThread+0x7cc>)
 80034b8:	f7fe ffb0 	bl	800241c <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <defThread+0x7ac>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8369 	beq.w	8003b98 <defThread+0xe60>
 80034c6:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <defThread+0x7b0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <defThread+0x7cc>)
 80034cc:	4919      	ldr	r1, [pc, #100]	; (8003534 <defThread+0x7fc>)
 80034ce:	2000      	movs	r0, #0
 80034d0:	f7ff f83e 	bl	8002550 <Report>
				break;
 80034d4:	e360      	b.n	8003b98 <defThread+0xe60>
 80034d6:	bf00      	nop
 80034d8:	2000034c 	.word	0x2000034c
 80034dc:	200023b0 	.word	0x200023b0
 80034e0:	20000354 	.word	0x20000354
 80034e4:	20000070 	.word	0x20000070
 80034e8:	20000004 	.word	0x20000004
 80034ec:	0800dbec 	.word	0x0800dbec
 80034f0:	20000038 	.word	0x20000038
 80034f4:	0800dbf8 	.word	0x0800dbf8
 80034f8:	20000084 	.word	0x20000084
 80034fc:	0800dc00 	.word	0x0800dc00
 8003500:	0800dc18 	.word	0x0800dc18
 8003504:	200023b4 	.word	0x200023b4
 8003508:	20000008 	.word	0x20000008
 800350c:	0800dc34 	.word	0x0800dc34
 8003510:	0800da54 	.word	0x0800da54
 8003514:	0800dab4 	.word	0x0800dab4
 8003518:	0800da4c 	.word	0x0800da4c
 800351c:	20001390 	.word	0x20001390
 8003520:	0800dabc 	.word	0x0800dabc
 8003524:	20001398 	.word	0x20001398
 8003528:	0800dc3c 	.word	0x0800dc3c
 800352c:	0800db58 	.word	0x0800db58
 8003530:	2000006c 	.word	0x2000006c
 8003534:	0800dca0 	.word	0x0800dca0
				case cmdLog:
					if (qcmd.attr < logNone) {
 8003538:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800353c:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003540:	785b      	ldrb	r3, [r3, #1]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d81e      	bhi.n	8003584 <defThread+0x84c>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 8003546:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800354a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe fd9d 	bl	8002090 <get_logName>
 8003556:	4602      	mov	r2, r0
 8003558:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800355c:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003560:	785b      	ldrb	r3, [r3, #1]
 8003562:	4619      	mov	r1, r3
 8003564:	4bab      	ldr	r3, [pc, #684]	; (8003814 <defThread+0xadc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	460b      	mov	r3, r1
 800356c:	49aa      	ldr	r1, [pc, #680]	; (8003818 <defThread+0xae0>)
 800356e:	2001      	movs	r0, #1
 8003570:	f7fe ffee 	bl	8002550 <Report>
						dbg = qcmd.attr;
 8003574:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003578:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800357c:	785a      	ldrb	r2, [r3, #1]
 800357e:	4ba7      	ldr	r3, [pc, #668]	; (800381c <defThread+0xae4>)
 8003580:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 8003582:	e316      	b.n	8003bb2 <defThread+0xe7a>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 8003584:	4ba5      	ldr	r3, [pc, #660]	; (800381c <defThread+0xae4>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe fd81 	bl	8002090 <get_logName>
 800358e:	4602      	mov	r2, r0
 8003590:	4ba2      	ldr	r3, [pc, #648]	; (800381c <defThread+0xae4>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	4619      	mov	r1, r3
 8003596:	4b9f      	ldr	r3, [pc, #636]	; (8003814 <defThread+0xadc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	460b      	mov	r3, r1
 800359e:	49a0      	ldr	r1, [pc, #640]	; (8003820 <defThread+0xae8>)
 80035a0:	2001      	movs	r0, #1
 80035a2:	f7fe ffd5 	bl	8002550 <Report>
				break;
 80035a6:	e304      	b.n	8003bb2 <defThread+0xe7a>
				case cmdRead:
				{
					uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 80035a8:	4b9e      	ldr	r3, [pc, #632]	; (8003824 <defThread+0xaec>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b9e      	ldr	r3, [pc, #632]	; (8003828 <defThread+0xaf0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	1ad2      	subs	r2, r2, r3
 80035b2:	4b9e      	ldr	r3, [pc, #632]	; (800382c <defThread+0xaf4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
					NAND_AddressTypeDef addr = {
 80035be:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80035c8:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80035cc:	801a      	strh	r2, [r3, #0]
 80035ce:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80035d2:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80035d6:	2200      	movs	r2, #0
 80035d8:	805a      	strh	r2, [r3, #2]
						.Page = p,//(p % (chipConf.BlockSize / chipConf.PageSize)),
						.Plane = 0,//1,
						.Block = nand_PageToBlock(p)
 80035da:	f8d7 044c 	ldr.w	r0, [r7, #1100]	; 0x44c
 80035de:	f7fd fedf 	bl	80013a0 <nand_PageToBlock>
 80035e2:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80035ea:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80035ee:	809a      	strh	r2, [r3, #4]
					};
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 80035f0:	4b8a      	ldr	r3, [pc, #552]	; (800381c <defThread+0xae4>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01a      	beq.n	800362e <defThread+0x8f6>
 80035f8:	4b8a      	ldr	r3, [pc, #552]	; (8003824 <defThread+0xaec>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b8c      	ldr	r3, [pc, #560]	; (8003830 <defThread+0xaf8>)
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	461c      	mov	r4, r3
							  	  	  	  	  	  nandAdr, nandLen, addr.Page, addr.Block, eol);
 8003602:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003606:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800360a:	881b      	ldrh	r3, [r3, #0]
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 800360c:	4619      	mov	r1, r3
							  	  	  	  	  	  nandAdr, nandLen, addr.Page, addr.Block, eol);
 800360e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003612:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8003616:	889b      	ldrh	r3, [r3, #4]
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8003618:	4618      	mov	r0, r3
 800361a:	4b7e      	ldr	r3, [pc, #504]	; (8003814 <defThread+0xadc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	9302      	str	r3, [sp, #8]
 8003620:	9001      	str	r0, [sp, #4]
 8003622:	9100      	str	r1, [sp, #0]
 8003624:	4623      	mov	r3, r4
 8003626:	4983      	ldr	r1, [pc, #524]	; (8003834 <defThread+0xafc>)
 8003628:	2001      	movs	r0, #1
 800362a:	f7fe ff91 	bl	8002550 <Report>

					if (NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) == HAL_OK) {
 800362e:	4b82      	ldr	r3, [pc, #520]	; (8003838 <defThread+0xb00>)
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	f107 0118 	add.w	r1, r7, #24
 8003636:	2301      	movs	r3, #1
 8003638:	4a80      	ldr	r2, [pc, #512]	; (800383c <defThread+0xb04>)
 800363a:	f7fd ff4d 	bl	80014d8 <NAND_Read_Page_8b>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <defThread+0x91a>
						nand_show = 1;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
						readed = true;
 800364a:	2301      	movs	r3, #1
 800364c:	f887 348a 	strb.w	r3, [r7, #1162]	; 0x48a
					} else devError |= devNAND;
				}
				break;
 8003650:	e2af      	b.n	8003bb2 <defThread+0xe7a>
					} else devError |= devNAND;
 8003652:	4b7b      	ldr	r3, [pc, #492]	; (8003840 <defThread+0xb08>)
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	f043 0320 	orr.w	r3, r3, #32
 800365a:	b29a      	uxth	r2, r3
 800365c:	4b78      	ldr	r3, [pc, #480]	; (8003840 <defThread+0xb08>)
 800365e:	801a      	strh	r2, [r3, #0]
				break;
 8003660:	e2a7      	b.n	8003bb2 <defThread+0xe7a>
				case cmdNext:
					if (dbg != logOff) Report(1, "Read next nand adr:0x%X len:%lu%s", nandAdr, nandLen, eol);
 8003662:	4b6e      	ldr	r3, [pc, #440]	; (800381c <defThread+0xae4>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <defThread+0x94c>
 800366a:	4b6e      	ldr	r3, [pc, #440]	; (8003824 <defThread+0xaec>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b70      	ldr	r3, [pc, #448]	; (8003830 <defThread+0xaf8>)
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	4619      	mov	r1, r3
 8003674:	4b67      	ldr	r3, [pc, #412]	; (8003814 <defThread+0xadc>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	460b      	mov	r3, r1
 800367c:	4971      	ldr	r1, [pc, #452]	; (8003844 <defThread+0xb0c>)
 800367e:	2001      	movs	r0, #1
 8003680:	f7fe ff66 	bl	8002550 <Report>
					nand_show = 2;
 8003684:	2302      	movs	r3, #2
 8003686:	f887 348b 	strb.w	r3, [r7, #1163]	; 0x48b
				break;
 800368a:	e292      	b.n	8003bb2 <defThread+0xe7a>
				case cmdErase:
					clr.Page = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	f8a7 3444 	strh.w	r3, [r7, #1092]	; 0x444
					clr.Block = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
					clr.Plane = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	f8a7 3446 	strh.w	r3, [r7, #1094]	; 0x446
					if (!qcmd.attr) {
 800369e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80036a2:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80036a6:	785b      	ldrb	r3, [r3, #1]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d13d      	bne.n	8003728 <defThread+0x9f0>
						clr.Page = nand_BlockToPage(nandBlk);
 80036ac:	4b66      	ldr	r3, [pc, #408]	; (8003848 <defThread+0xb10>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fd fe8b 	bl	80013cc <nand_BlockToPage>
 80036b6:	4603      	mov	r3, r0
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f8a7 3444 	strh.w	r3, [r7, #1092]	; 0x444
						clr.Block = nandBlk;
 80036be:	4b62      	ldr	r3, [pc, #392]	; (8003848 <defThread+0xb10>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
						if (NAND_Erase_Block(nandPort, &clr, 1) != HAL_OK) {
 80036c8:	4b5b      	ldr	r3, [pc, #364]	; (8003838 <defThread+0xb00>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f207 4144 	addw	r1, r7, #1092	; 0x444
 80036d0:	2201      	movs	r2, #1
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe f9d4 	bl	8001a80 <NAND_Erase_Block>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d015      	beq.n	800370a <defThread+0x9d2>
							devError |= devNAND;
 80036de:	4b58      	ldr	r3, [pc, #352]	; (8003840 <defThread+0xb08>)
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	f043 0320 	orr.w	r3, r3, #32
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	4b55      	ldr	r3, [pc, #340]	; (8003840 <defThread+0xb08>)
 80036ea:	801a      	strh	r2, [r3, #0]
							if (dbg != logOff) Report(1, "Erase nand block:%lu Error !%s", clr.Block, eol);
 80036ec:	4b4b      	ldr	r3, [pc, #300]	; (800381c <defThread+0xae4>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 8253 	beq.w	8003b9c <defThread+0xe64>
 80036f6:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b45      	ldr	r3, [pc, #276]	; (8003814 <defThread+0xadc>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4952      	ldr	r1, [pc, #328]	; (800384c <defThread+0xb14>)
 8003702:	2001      	movs	r0, #1
 8003704:	f7fe ff24 	bl	8002550 <Report>
						iBlk = 0;
						next_block_erase = 1;
						if (dbg != logOff) Report(1, "Erase chip ");
						stik = HAL_GetTick();
					}
				break;
 8003708:	e248      	b.n	8003b9c <defThread+0xe64>
							if (dbg != logOff) Report(1, "Erase nand block:%lu Ok !%s", clr.Block, eol);
 800370a:	4b44      	ldr	r3, [pc, #272]	; (800381c <defThread+0xae4>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8244 	beq.w	8003b9c <defThread+0xe64>
 8003714:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 8003718:	461a      	mov	r2, r3
 800371a:	4b3e      	ldr	r3, [pc, #248]	; (8003814 <defThread+0xadc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	494c      	ldr	r1, [pc, #304]	; (8003850 <defThread+0xb18>)
 8003720:	2001      	movs	r0, #1
 8003722:	f7fe ff15 	bl	8002550 <Report>
				break;
 8003726:	e239      	b.n	8003b9c <defThread+0xe64>
						iBlk = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
						next_block_erase = 1;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
						if (dbg != logOff) Report(1, "Erase chip ");
 8003734:	4b39      	ldr	r3, [pc, #228]	; (800381c <defThread+0xae4>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <defThread+0xa0c>
 800373c:	4945      	ldr	r1, [pc, #276]	; (8003854 <defThread+0xb1c>)
 800373e:	2001      	movs	r0, #1
 8003740:	f7fe ff06 	bl	8002550 <Report>
						stik = HAL_GetTick();
 8003744:	f001 fa6c 	bl	8004c20 <HAL_GetTick>
 8003748:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
				break;
 800374c:	e226      	b.n	8003b9c <defThread+0xe64>
				case cmdCheck:
				{
					uint32_t b = nand_PageToBlock(nandPage);
 800374e:	4b42      	ldr	r3, [pc, #264]	; (8003858 <defThread+0xb20>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd fe24 	bl	80013a0 <nand_PageToBlock>
 8003758:	f8c7 045c 	str.w	r0, [r7, #1116]	; 0x45c
					if (!pageIsEmpty(nandPage)) {
 800375c:	4b3e      	ldr	r3, [pc, #248]	; (8003858 <defThread+0xb20>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe fa19 	bl	8001b98 <pageIsEmpty>
 8003766:	4603      	mov	r3, r0
 8003768:	f083 0301 	eor.w	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d010      	beq.n	8003794 <defThread+0xa5c>
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu Not empty%s", nandPage, b, eol);
 8003772:	4b2a      	ldr	r3, [pc, #168]	; (800381c <defThread+0xae4>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8212 	beq.w	8003ba0 <defThread+0xe68>
 800377c:	4b36      	ldr	r3, [pc, #216]	; (8003858 <defThread+0xb20>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <defThread+0xadc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800378a:	4934      	ldr	r1, [pc, #208]	; (800385c <defThread+0xb24>)
 800378c:	2001      	movs	r0, #1
 800378e:	f7fe fedf 	bl	8002550 <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
					}
				}
				break;
 8003792:	e205      	b.n	8003ba0 <defThread+0xe68>
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
 8003794:	4b21      	ldr	r3, [pc, #132]	; (800381c <defThread+0xae4>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8201 	beq.w	8003ba0 <defThread+0xe68>
 800379e:	4b2e      	ldr	r3, [pc, #184]	; (8003858 <defThread+0xb20>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <defThread+0xadc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80037ac:	492c      	ldr	r1, [pc, #176]	; (8003860 <defThread+0xb28>)
 80037ae:	2001      	movs	r0, #1
 80037b0:	f7fe fece 	bl	8002550 <Report>
				break;
 80037b4:	e1f4      	b.n	8003ba0 <defThread+0xe68>
				case cmdWrite:
				case cmdArea:
				{
					//
					if (qcmd.cmd == cmdArea) {
 80037b6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80037ba:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b07      	cmp	r3, #7
 80037c2:	d153      	bne.n	800386c <defThread+0xb34>
						if (!areaIsEmpty(nandAdr, nandLen)) {
 80037c4:	4b17      	ldr	r3, [pc, #92]	; (8003824 <defThread+0xaec>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a19      	ldr	r2, [pc, #100]	; (8003830 <defThread+0xaf8>)
 80037ca:	8812      	ldrh	r2, [r2, #0]
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fac6 	bl	8001d60 <areaIsEmpty>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f083 0301 	eor.w	r3, r3, #1
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00c      	beq.n	80037fa <defThread+0xac2>
							if (dbg != logOff) Report(1, "Area Not empty%s", eol);
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <defThread+0xae4>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 81dd 	beq.w	8003ba4 <defThread+0xe6c>
 80037ea:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <defThread+0xadc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	491c      	ldr	r1, [pc, #112]	; (8003864 <defThread+0xb2c>)
 80037f2:	2001      	movs	r0, #1
 80037f4:	f7fe feac 	bl	8002550 <Report>
						} else {
							if (dbg != logOff) Report(1, "Area is Empty%s", eol);
						}
						break;
 80037f8:	e1d4      	b.n	8003ba4 <defThread+0xe6c>
							if (dbg != logOff) Report(1, "Area is Empty%s", eol);
 80037fa:	4b08      	ldr	r3, [pc, #32]	; (800381c <defThread+0xae4>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 81d0 	beq.w	8003ba4 <defThread+0xe6c>
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <defThread+0xadc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	4917      	ldr	r1, [pc, #92]	; (8003868 <defThread+0xb30>)
 800380c:	2001      	movs	r0, #1
 800380e:	f7fe fe9f 	bl	8002550 <Report>
 8003812:	e1ce      	b.n	8003bb2 <defThread+0xe7a>
 8003814:	20000004 	.word	0x20000004
 8003818:	0800dcbc 	.word	0x0800dcbc
 800381c:	20000070 	.word	0x20000070
 8003820:	0800dcd8 	.word	0x0800dcd8
 8003824:	2000137c 	.word	0x2000137c
 8003828:	20001378 	.word	0x20001378
 800382c:	20001398 	.word	0x20001398
 8003830:	20001380 	.word	0x20001380
 8003834:	0800dcf8 	.word	0x0800dcf8
 8003838:	20000080 	.word	0x20000080
 800383c:	200013b0 	.word	0x200013b0
 8003840:	20000354 	.word	0x20000354
 8003844:	0800dd28 	.word	0x0800dd28
 8003848:	20001384 	.word	0x20001384
 800384c:	0800dd4c 	.word	0x0800dd4c
 8003850:	0800dd6c 	.word	0x0800dd6c
 8003854:	0800dd88 	.word	0x0800dd88
 8003858:	20001388 	.word	0x20001388
 800385c:	0800dd94 	.word	0x0800dd94
 8003860:	0800ddb8 	.word	0x0800ddb8
 8003864:	0800dddc 	.word	0x0800dddc
 8003868:	0800ddf0 	.word	0x0800ddf0
					}
					//
					uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 800386c:	4b87      	ldr	r3, [pc, #540]	; (8003a8c <defThread+0xd54>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b87      	ldr	r3, [pc, #540]	; (8003a90 <defThread+0xd58>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1ad2      	subs	r2, r2, r3
 8003876:	4b87      	ldr	r3, [pc, #540]	; (8003a94 <defThread+0xd5c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	fbb2 f3f3 	udiv	r3, r2, r3
 800387e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
					uint32_t b = nand_PageToBlock(p);
 8003882:	f8d7 0458 	ldr.w	r0, [r7, #1112]	; 0x458
 8003886:	f7fd fd8b 	bl	80013a0 <nand_PageToBlock>
 800388a:	f8c7 0454 	str.w	r0, [r7, #1108]	; 0x454
					NAND_AddressTypeDef addr = {
 800388e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003892:	b29a      	uxth	r2, r3
 8003894:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003898:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80038a2:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80038a6:	2200      	movs	r2, #0
 80038a8:	805a      	strh	r2, [r3, #2]
 80038aa:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80038b4:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80038b8:	809a      	strh	r2, [r3, #4]
						.Page = p,//(p % (chipConf.BlockSize / chipConf.PageSize)),
						.Plane = 0,//1,
						.Block = b
					};
					if (!pageIsEmpty(p)) {//nandPage)) {
 80038ba:	f8d7 0458 	ldr.w	r0, [r7, #1112]	; 0x458
 80038be:	f7fe f96b 	bl	8001b98 <pageIsEmpty>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f083 0301 	eor.w	r3, r3, #1
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01c      	beq.n	8003908 <defThread+0xbd0>
						if (NAND_Erase_Block(nandPort, &addr, 1) != HAL_OK) devError |= devNAND;
 80038ce:	4b72      	ldr	r3, [pc, #456]	; (8003a98 <defThread+0xd60>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f107 0110 	add.w	r1, r7, #16
 80038d6:	2201      	movs	r2, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe f8d1 	bl	8001a80 <NAND_Erase_Block>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d006      	beq.n	80038f2 <defThread+0xbba>
 80038e4:	4b6d      	ldr	r3, [pc, #436]	; (8003a9c <defThread+0xd64>)
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	f043 0320 	orr.w	r3, r3, #32
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	4b6b      	ldr	r3, [pc, #428]	; (8003a9c <defThread+0xd64>)
 80038f0:	801a      	strh	r2, [r3, #0]
						sprintf(stx, "Erase nand block:%u done", addr.Block);
 80038f2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80038f6:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80038fa:	889b      	ldrh	r3, [r3, #4]
 80038fc:	461a      	mov	r2, r3
 80038fe:	4968      	ldr	r1, [pc, #416]	; (8003aa0 <defThread+0xd68>)
 8003900:	4868      	ldr	r0, [pc, #416]	; (8003aa4 <defThread+0xd6c>)
 8003902:	f009 fa3f 	bl	800cd84 <siprintf>
 8003906:	e009      	b.n	800391c <defThread+0xbe4>
					} else {
						sprintf(stx, "Block:%u is Empty", addr.Block);
 8003908:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800390c:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8003910:	889b      	ldrh	r3, [r3, #4]
 8003912:	461a      	mov	r2, r3
 8003914:	4964      	ldr	r1, [pc, #400]	; (8003aa8 <defThread+0xd70>)
 8003916:	4863      	ldr	r0, [pc, #396]	; (8003aa4 <defThread+0xd6c>)
 8003918:	f009 fa34 	bl	800cd84 <siprintf>
					}
					if (dbg != logOff) Report(1, "%s%s", stx, eol);
 800391c:	4b63      	ldr	r3, [pc, #396]	; (8003aac <defThread+0xd74>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <defThread+0xbfa>
 8003924:	4b62      	ldr	r3, [pc, #392]	; (8003ab0 <defThread+0xd78>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a5e      	ldr	r2, [pc, #376]	; (8003aa4 <defThread+0xd6c>)
 800392a:	4962      	ldr	r1, [pc, #392]	; (8003ab4 <defThread+0xd7c>)
 800392c:	2001      	movs	r0, #1
 800392e:	f7fe fe0f 	bl	8002550 <Report>
					memset(wrBuf, 0xff, chipConf.PageSize);
 8003932:	4b58      	ldr	r3, [pc, #352]	; (8003a94 <defThread+0xd5c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	21ff      	movs	r1, #255	; 0xff
 800393a:	485f      	ldr	r0, [pc, #380]	; (8003ab8 <defThread+0xd80>)
 800393c:	f009 f90c 	bl	800cb58 <memset>
					uint32_t ofs = (nandAdr - devAdr) % chipConf.PageSize;
 8003940:	4b52      	ldr	r3, [pc, #328]	; (8003a8c <defThread+0xd54>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b52      	ldr	r3, [pc, #328]	; (8003a90 <defThread+0xd58>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	4a52      	ldr	r2, [pc, #328]	; (8003a94 <defThread+0xd5c>)
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003952:	fb01 f202 	mul.w	r2, r1, r2
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
					memset(wrBuf + ofs, nandByte, nandLen);
 800395c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8003960:	4a55      	ldr	r2, [pc, #340]	; (8003ab8 <defThread+0xd80>)
 8003962:	4413      	add	r3, r2
 8003964:	4a55      	ldr	r2, [pc, #340]	; (8003abc <defThread+0xd84>)
 8003966:	7812      	ldrb	r2, [r2, #0]
 8003968:	4611      	mov	r1, r2
 800396a:	4a55      	ldr	r2, [pc, #340]	; (8003ac0 <defThread+0xd88>)
 800396c:	8812      	ldrh	r2, [r2, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f009 f8f2 	bl	800cb58 <memset>
					//showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
					if (NAND_Write_Page_8b(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
 8003974:	4b48      	ldr	r3, [pc, #288]	; (8003a98 <defThread+0xd60>)
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	f107 0110 	add.w	r1, r7, #16
 800397c:	2301      	movs	r3, #1
 800397e:	4a4e      	ldr	r2, [pc, #312]	; (8003ab8 <defThread+0xd80>)
 8003980:	f7fd ff16 	bl	80017b0 <NAND_Write_Page_8b>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d006      	beq.n	8003998 <defThread+0xc60>
 800398a:	4b44      	ldr	r3, [pc, #272]	; (8003a9c <defThread+0xd64>)
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	f043 0320 	orr.w	r3, r3, #32
 8003992:	b29a      	uxth	r2, r3
 8003994:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <defThread+0xd64>)
 8003996:	801a      	strh	r2, [r3, #0]
					if (dbg != logOff) Report(1, "Write nand adr:0x%X ofs:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 8003998:	4b44      	ldr	r3, [pc, #272]	; (8003aac <defThread+0xd74>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8103 	beq.w	8003ba8 <defThread+0xe70>
 80039a2:	4b3a      	ldr	r3, [pc, #232]	; (8003a8c <defThread+0xd54>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b45      	ldr	r3, [pc, #276]	; (8003abc <defThread+0xd84>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	4619      	mov	r1, r3
 80039ac:	4b44      	ldr	r3, [pc, #272]	; (8003ac0 <defThread+0xd88>)
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
												nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 80039b2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80039b6:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80039ba:	881b      	ldrh	r3, [r3, #0]
					if (dbg != logOff) Report(1, "Write nand adr:0x%X ofs:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 80039bc:	461c      	mov	r4, r3
												nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 80039be:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80039c2:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80039c6:	889b      	ldrh	r3, [r3, #4]
					if (dbg != logOff) Report(1, "Write nand adr:0x%X ofs:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 80039c8:	461d      	mov	r5, r3
 80039ca:	4b39      	ldr	r3, [pc, #228]	; (8003ab0 <defThread+0xd78>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	9304      	str	r3, [sp, #16]
 80039d0:	9503      	str	r5, [sp, #12]
 80039d2:	9402      	str	r4, [sp, #8]
 80039d4:	9001      	str	r0, [sp, #4]
 80039d6:	9100      	str	r1, [sp, #0]
 80039d8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80039dc:	4939      	ldr	r1, [pc, #228]	; (8003ac4 <defThread+0xd8c>)
 80039de:	2001      	movs	r0, #1
 80039e0:	f7fe fdb6 	bl	8002550 <Report>
				}
				break;
 80039e4:	e0e0      	b.n	8003ba8 <defThread+0xe70>
				case cmdSave:
				{
					uint32_t page = (nandAdr - devAdr) / chipConf.PageSize;
 80039e6:	4b29      	ldr	r3, [pc, #164]	; (8003a8c <defThread+0xd54>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <defThread+0xd58>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	1ad2      	subs	r2, r2, r3
 80039f0:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <defThread+0xd5c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
					NAND_AddressTypeDef nans = {
						.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),
 80039fc:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <defThread+0xd5c>)
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <defThread+0xd5c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a08:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8003a0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a10:	fb01 f202 	mul.w	r2, r1, r2
 8003a14:	1a9b      	subs	r3, r3, r2
					NAND_AddressTypeDef nans = {
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003a1c:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003a20:	801a      	strh	r2, [r3, #0]
 8003a22:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003a26:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	805a      	strh	r2, [r3, #2]
						.Plane = 0,//1,
						.Block = nand_PageToBlock(page)
 8003a2e:	f8d7 0464 	ldr.w	r0, [r7, #1124]	; 0x464
 8003a32:	f7fd fcb5 	bl	80013a0 <nand_PageToBlock>
 8003a36:	4603      	mov	r3, r0
					NAND_AddressTypeDef nans = {
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003a3e:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003a42:	809a      	strh	r2, [r3, #4]
					};
					int shift = emptyArea(nandAdr, nandLen, wrBuf, &nans);
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <defThread+0xd54>)
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <defThread+0xd88>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f107 0308 	add.w	r3, r7, #8
 8003a52:	4a19      	ldr	r2, [pc, #100]	; (8003ab8 <defThread+0xd80>)
 8003a54:	f7fe f8f2 	bl	8001c3c <emptyArea>
 8003a58:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
					if (shift == -1) {
 8003a5c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a64:	d132      	bne.n	8003acc <defThread+0xd94>
						if (dbg != logOff) if (dbg != logOff) Report(1, "Area Not empty. Process not alow%s", eol);
 8003a66:	4b11      	ldr	r3, [pc, #68]	; (8003aac <defThread+0xd74>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 809e 	beq.w	8003bac <defThread+0xe74>
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <defThread+0xd74>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8099 	beq.w	8003bac <defThread+0xe74>
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <defThread+0xd78>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4911      	ldr	r1, [pc, #68]	; (8003ac8 <defThread+0xd90>)
 8003a82:	2001      	movs	r0, #1
 8003a84:	f7fe fd64 	bl	8002550 <Report>
 8003a88:	e093      	b.n	8003bb2 <defThread+0xe7a>
 8003a8a:	bf00      	nop
 8003a8c:	2000137c 	.word	0x2000137c
 8003a90:	20001378 	.word	0x20001378
 8003a94:	20001398 	.word	0x20001398
 8003a98:	20000080 	.word	0x20000080
 8003a9c:	20000354 	.word	0x20000354
 8003aa0:	0800de00 	.word	0x0800de00
 8003aa4:	200023b4 	.word	0x200023b4
 8003aa8:	0800de1c 	.word	0x0800de1c
 8003aac:	20000070 	.word	0x20000070
 8003ab0:	20000004 	.word	0x20000004
 8003ab4:	0800db58 	.word	0x0800db58
 8003ab8:	20001bb0 	.word	0x20001bb0
 8003abc:	2000008c 	.word	0x2000008c
 8003ac0:	20001380 	.word	0x20001380
 8003ac4:	0800de30 	.word	0x0800de30
 8003ac8:	0800de78 	.word	0x0800de78
						break;
					} else {
						memset(wrBuf + shift, nandByte, nandLen);
 8003acc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003ad0:	4a7b      	ldr	r2, [pc, #492]	; (8003cc0 <defThread+0xf88>)
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4a7b      	ldr	r2, [pc, #492]	; (8003cc4 <defThread+0xf8c>)
 8003ad6:	7812      	ldrb	r2, [r2, #0]
 8003ad8:	4611      	mov	r1, r2
 8003ada:	4a7b      	ldr	r2, [pc, #492]	; (8003cc8 <defThread+0xf90>)
 8003adc:	8812      	ldrh	r2, [r2, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f009 f83a 	bl	800cb58 <memset>
						if (HAL_NAND_Write_Page_8b(nandPort, &nans, wrBuf, 1) != HAL_OK) devError |= devNAND;
 8003ae4:	4b79      	ldr	r3, [pc, #484]	; (8003ccc <defThread+0xf94>)
 8003ae6:	6818      	ldr	r0, [r3, #0]
 8003ae8:	f107 0108 	add.w	r1, r7, #8
 8003aec:	2301      	movs	r3, #1
 8003aee:	4a74      	ldr	r2, [pc, #464]	; (8003cc0 <defThread+0xf88>)
 8003af0:	f002 f8a5 	bl	8005c3e <HAL_NAND_Write_Page_8b>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d006      	beq.n	8003b08 <defThread+0xdd0>
 8003afa:	4b75      	ldr	r3, [pc, #468]	; (8003cd0 <defThread+0xf98>)
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	f043 0320 	orr.w	r3, r3, #32
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	4b72      	ldr	r3, [pc, #456]	; (8003cd0 <defThread+0xf98>)
 8003b06:	801a      	strh	r2, [r3, #0]
						//showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
						if (dbg != logOff)
 8003b08:	4b72      	ldr	r3, [pc, #456]	; (8003cd4 <defThread+0xf9c>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d04f      	beq.n	8003bb0 <defThread+0xe78>
							Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
									  ARRAY_ADDRESS(&nans, nandPort),
 8003b10:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003b14:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003b20:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003b24:	889b      	ldrh	r3, [r3, #4]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003b2c:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003b30:	885b      	ldrh	r3, [r3, #2]
 8003b32:	4618      	mov	r0, r3
 8003b34:	4b65      	ldr	r3, [pc, #404]	; (8003ccc <defThread+0xf94>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	fb00 f303 	mul.w	r3, r0, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a62      	ldr	r2, [pc, #392]	; (8003ccc <defThread+0xf94>)
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
							Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 8003b4a:	18ca      	adds	r2, r1, r3
 8003b4c:	4b62      	ldr	r3, [pc, #392]	; (8003cd8 <defThread+0xfa0>)
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	4b5c      	ldr	r3, [pc, #368]	; (8003cc4 <defThread+0xf8c>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	4b5c      	ldr	r3, [pc, #368]	; (8003cc8 <defThread+0xf90>)
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	461c      	mov	r4, r3
									  nandAdr,
									  shift,
									  nandByte,
									  nandLen,
									  nans.Page,
 8003b5c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003b60:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003b64:	881b      	ldrh	r3, [r3, #0]
							Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 8003b66:	461d      	mov	r5, r3
									  nans.Block,
 8003b68:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003b6c:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8003b70:	889b      	ldrh	r3, [r3, #4]
							Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 8003b72:	461e      	mov	r6, r3
 8003b74:	4b59      	ldr	r3, [pc, #356]	; (8003cdc <defThread+0xfa4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	9305      	str	r3, [sp, #20]
 8003b7a:	9604      	str	r6, [sp, #16]
 8003b7c:	9503      	str	r5, [sp, #12]
 8003b7e:	9402      	str	r4, [sp, #8]
 8003b80:	9001      	str	r0, [sp, #4]
 8003b82:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4955      	ldr	r1, [pc, #340]	; (8003ce0 <defThread+0xfa8>)
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f7fe fcdf 	bl	8002550 <Report>
									  eol);
					}
				}
				break;
 8003b92:	e00d      	b.n	8003bb0 <defThread+0xe78>
				break;
 8003b94:	bf00      	nop
 8003b96:	e00c      	b.n	8003bb2 <defThread+0xe7a>
				break;
 8003b98:	bf00      	nop
 8003b9a:	e00a      	b.n	8003bb2 <defThread+0xe7a>
				break;
 8003b9c:	bf00      	nop
 8003b9e:	e008      	b.n	8003bb2 <defThread+0xe7a>
				break;
 8003ba0:	bf00      	nop
 8003ba2:	e006      	b.n	8003bb2 <defThread+0xe7a>
						break;
 8003ba4:	bf00      	nop
 8003ba6:	e004      	b.n	8003bb2 <defThread+0xe7a>
				break;
 8003ba8:	bf00      	nop
 8003baa:	e002      	b.n	8003bb2 <defThread+0xe7a>
						break;
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <defThread+0xe7a>
				break;
 8003bb0:	bf00      	nop
			}
			if (nand_show) {
 8003bb2:	f897 348b 	ldrb.w	r3, [r7, #1163]	; 0x48b
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00d      	beq.n	8003bd6 <defThread+0xe9e>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 8003bba:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <defThread+0xfa0>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <defThread+0xf90>)
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	461c      	mov	r4, r3
 8003bc4:	f897 148a 	ldrb.w	r1, [r7, #1162]	; 0x48a
 8003bc8:	f897 048b 	ldrb.w	r0, [r7, #1163]	; 0x48b
 8003bcc:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <defThread+0xfac>)
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	4623      	mov	r3, r4
 8003bd2:	f7fe fff7 	bl	8002bc4 <showBuf>
			}
		}

		// Erase all blocks (chipConf.BlockNbr)
		if (next_block_erase) {
 8003bd6:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04c      	beq.n	8003c78 <defThread+0xf40>
			clr.Block = iBlk++;
 8003bde:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	f8c7 2490 	str.w	r2, [r7, #1168]	; 0x490
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
			if (NAND_Erase_Block(nandPort, &clr, 0) != HAL_OK) {
 8003bee:	4b37      	ldr	r3, [pc, #220]	; (8003ccc <defThread+0xf94>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f207 4144 	addw	r1, r7, #1092	; 0x444
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fd ff41 	bl	8001a80 <NAND_Erase_Block>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <defThread+0xee2>
				devError |= devNAND;
 8003c04:	4b32      	ldr	r3, [pc, #200]	; (8003cd0 <defThread+0xf98>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	f043 0320 	orr.w	r3, r3, #32
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <defThread+0xf98>)
 8003c10:	801a      	strh	r2, [r3, #0]
				next_block_erase = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
 8003c18:	e012      	b.n	8003c40 <defThread+0xf08>
			} else {
				if (!(iBlk % 16)) Report(0, ".");
 8003c1a:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d103      	bne.n	8003c2e <defThread+0xef6>
 8003c26:	4930      	ldr	r1, [pc, #192]	; (8003ce8 <defThread+0xfb0>)
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f7fe fc91 	bl	8002550 <Report>
				if (iBlk >= chipConf.BlockNbr) next_block_erase = 0;
 8003c2e:	4b2f      	ldr	r3, [pc, #188]	; (8003cec <defThread+0xfb4>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <defThread+0xf08>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
			}
			if (!next_block_erase) {
 8003c40:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d117      	bne.n	8003c78 <defThread+0xf40>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <defThread+0xf9c>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <defThread+0xf40>
 8003c50:	f000 ffe6 	bl	8004c20 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	4a24      	ldr	r2, [pc, #144]	; (8003cf0 <defThread+0xfb8>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	099a      	lsrs	r2, r3, #6
 8003c64:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <defThread+0xfa4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 8003c70:	4920      	ldr	r1, [pc, #128]	; (8003cf4 <defThread+0xfbc>)
 8003c72:	2000      	movs	r0, #0
 8003c74:	f7fe fc6c 	bl	8002550 <Report>
			}
		}
		//
		osDelay(5);
 8003c78:	2005      	movs	r0, #5
 8003c7a:	f005 fe69 	bl	8009950 <osDelay>
	while (loop) {
 8003c7e:	f897 3485 	ldrb.w	r3, [r7, #1157]	; 0x485
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f47f aa00 	bne.w	8003088 <defThread+0x350>
	}



	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <defThread+0xf9c>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d011      	beq.n	8003cb4 <defThread+0xf7c>
 8003c90:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <defThread+0xfc0>)
 8003c92:	681c      	ldr	r4, [r3, #0]
 8003c94:	f008 fd46 	bl	800c724 <xPortGetFreeHeapSize>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <defThread+0xfa4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	9302      	str	r3, [sp, #8]
 8003ca0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	9200      	str	r2, [sp, #0]
 8003ca8:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <defThread+0xfc4>)
 8003caa:	4622      	mov	r2, r4
 8003cac:	4914      	ldr	r1, [pc, #80]	; (8003d00 <defThread+0xfc8>)
 8003cae:	2001      	movs	r0, #1
 8003cb0:	f7fe fc4e 	bl	8002550 <Report>
	osDelay(250);
 8003cb4:	20fa      	movs	r0, #250	; 0xfa
 8003cb6:	f005 fe4b 	bl	8009950 <osDelay>

	NVIC_SystemReset();
 8003cba:	f7fc ffb9 	bl	8000c30 <__NVIC_SystemReset>
 8003cbe:	bf00      	nop
 8003cc0:	20001bb0 	.word	0x20001bb0
 8003cc4:	2000008c 	.word	0x2000008c
 8003cc8:	20001380 	.word	0x20001380
 8003ccc:	20000080 	.word	0x20000080
 8003cd0:	20000354 	.word	0x20000354
 8003cd4:	20000070 	.word	0x20000070
 8003cd8:	2000137c 	.word	0x2000137c
 8003cdc:	20000004 	.word	0x20000004
 8003ce0:	0800de9c 	.word	0x0800de9c
 8003ce4:	200013b0 	.word	0x200013b0
 8003ce8:	0800def4 	.word	0x0800def4
 8003cec:	20001398 	.word	0x20001398
 8003cf0:	10624dd3 	.word	0x10624dd3
 8003cf4:	0800def8 	.word	0x0800def8
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	080100d4 	.word	0x080100d4
 8003d00:	0800df10 	.word	0x0800df10

08003d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	b5b0      	push	{r4, r5, r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a10      	ldr	r2, [pc, #64]	; (8003d54 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d102      	bne.n	8003d1c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8003d16:	f000 ff6f 	bl	8004bf8 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8003d1a:	e016      	b.n	8003d4a <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d24:	d111      	bne.n	8003d4a <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8003d26:	f7fe fadb 	bl	80022e0 <get_msCounter>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	f002 0403 	and.w	r4, r2, #3
 8003d32:	2500      	movs	r5, #0
 8003d34:	1ee3      	subs	r3, r4, #3
 8003d36:	432b      	orrs	r3, r5
 8003d38:	d105      	bne.n	8003d46 <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8003d3a:	f7fe fac3 	bl	80022c4 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	4805      	ldr	r0, [pc, #20]	; (8003d58 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003d42:	f001 fe36 	bl	80059b2 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8003d46:	f7fe fad9 	bl	80022fc <inc_msCounter>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bdb0      	pop	{r4, r5, r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40010000 	.word	0x40010000
 8003d58:	40020800 	.word	0x40020800

08003d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	devError |= devSYS;
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <Error_Handler+0x1c>)
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <Error_Handler+0x1c>)
 8003d6c:	801a      	strh	r2, [r3, #0]
	errLedOn(true);
 8003d6e:	2001      	movs	r0, #1
 8003d70:	f7fe fa80 	bl	8002274 <errLedOn>

  /* USER CODE END Error_Handler_Debug */
}
 8003d74:	bf00      	nop
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000354 	.word	0x20000354

08003d7c <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8003d86:	2200      	movs	r2, #0
 8003d88:	2104      	movs	r1, #4
 8003d8a:	480c      	ldr	r0, [pc, #48]	; (8003dbc <ST7789_WriteCommand+0x40>)
 8003d8c:	f001 fdf8 	bl	8005980 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <ST7789_WriteCommand+0x44>)
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	2396      	movs	r3, #150	; 0x96
 8003d96:	1df9      	adds	r1, r7, #7
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f003 fa38 	bl	800720e <HAL_SPI_Transmit>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d006      	beq.n	8003db2 <ST7789_WriteCommand+0x36>
 8003da4:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <ST7789_WriteCommand+0x48>)
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	f043 0310 	orr.w	r3, r3, #16
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <ST7789_WriteCommand+0x48>)
 8003db0:	801a      	strh	r2, [r3, #0]
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40020000 	.word	0x40020000
 8003dc0:	20000074 	.word	0x20000074
 8003dc4:	20000354 	.word	0x20000354

08003dc8 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	480e      	ldr	r0, [pc, #56]	; (8003e10 <ST7789_WriteCommands+0x48>)
 8003dd8:	f001 fdd2 	bl	8005980 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <ST7789_WriteCommands+0x4c>)
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	2196      	movs	r1, #150	; 0x96
 8003de6:	460b      	mov	r3, r1
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	f003 fa0d 	bl	800720e <HAL_SPI_Transmit>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d006      	beq.n	8003e08 <ST7789_WriteCommands+0x40>
 8003dfa:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <ST7789_WriteCommands+0x50>)
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	f043 0310 	orr.w	r3, r3, #16
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <ST7789_WriteCommands+0x50>)
 8003e06:	801a      	strh	r2, [r3, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40020000 	.word	0x40020000
 8003e14:	20000074 	.word	0x20000074
 8003e18:	20000354 	.word	0x20000354

08003e1c <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	2104      	movs	r1, #4
 8003e2e:	481f      	ldr	r0, [pc, #124]	; (8003eac <ST7789_WriteData+0x90>)
 8003e30:	f001 fda6 	bl	8005980 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8003e34:	e028      	b.n	8003e88 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	bf28      	it	cs
 8003e40:	4613      	movcs	r3, r2
 8003e42:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003e44:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <ST7789_WriteData+0x94>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8003e4a:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <ST7789_WriteData+0x98>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	89ba      	ldrh	r2, [r7, #12]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f003 fb18 	bl	8007488 <HAL_SPI_Transmit_DMA>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003e62:	e002      	b.n	8003e6a <ST7789_WriteData+0x4e>
 8003e64:	2001      	movs	r0, #1
 8003e66:	f000 fee7 	bl	8004c38 <HAL_Delay>
 8003e6a:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <ST7789_WriteData+0x94>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	f083 0301 	eor.w	r3, r3, #1
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f5      	bne.n	8003e64 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8003e78:	89bb      	ldrh	r3, [r7, #12]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8003e80:	89bb      	ldrh	r3, [r7, #12]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1d3      	bne.n	8003e36 <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d006      	beq.n	8003ea2 <ST7789_WriteData+0x86>
 8003e94:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <ST7789_WriteData+0x9c>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	f043 0310 	orr.w	r3, r3, #16
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <ST7789_WriteData+0x9c>)
 8003ea0:	801a      	strh	r2, [r3, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40020000 	.word	0x40020000
 8003eb0:	20000069 	.word	0x20000069
 8003eb4:	20000074 	.word	0x20000074
 8003eb8:	20000354 	.word	0x20000354

08003ebc <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003eca:	2201      	movs	r2, #1
 8003ecc:	2104      	movs	r1, #4
 8003ece:	4814      	ldr	r0, [pc, #80]	; (8003f20 <ST7789_WriteDataLine+0x64>)
 8003ed0:	f001 fd56 	bl	8005980 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003ed4:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <ST7789_WriteDataLine+0x68>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8003eda:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <ST7789_WriteDataLine+0x6c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	b292      	uxth	r2, r2
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f003 facf 	bl	8007488 <HAL_SPI_Transmit_DMA>
 8003eea:	4603      	mov	r3, r0
 8003eec:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003eee:	e002      	b.n	8003ef6 <ST7789_WriteDataLine+0x3a>
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	f000 fea1 	bl	8004c38 <HAL_Delay>
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <ST7789_WriteDataLine+0x68>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	f083 0301 	eor.w	r3, r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f5      	bne.n	8003ef0 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d006      	beq.n	8003f18 <ST7789_WriteDataLine+0x5c>
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <ST7789_WriteDataLine+0x70>)
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	f043 0310 	orr.w	r3, r3, #16
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <ST7789_WriteDataLine+0x70>)
 8003f16:	801a      	strh	r2, [r3, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40020000 	.word	0x40020000
 8003f24:	20000069 	.word	0x20000069
 8003f28:	20000074 	.word	0x20000074
 8003f2c:	20000354 	.word	0x20000354

08003f30 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	2104      	movs	r1, #4
 8003f3e:	480c      	ldr	r0, [pc, #48]	; (8003f70 <ST7789_WriteSmallData+0x40>)
 8003f40:	f001 fd1e 	bl	8005980 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <ST7789_WriteSmallData+0x44>)
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	2396      	movs	r3, #150	; 0x96
 8003f4a:	1df9      	adds	r1, r7, #7
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f003 f95e 	bl	800720e <HAL_SPI_Transmit>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <ST7789_WriteSmallData+0x36>
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <ST7789_WriteSmallData+0x48>)
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	f043 0310 	orr.w	r3, r3, #16
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <ST7789_WriteSmallData+0x48>)
 8003f64:	801a      	strh	r2, [r3, #0]
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40020000 	.word	0x40020000
 8003f74:	20000074 	.word	0x20000074
 8003f78:	20000354 	.word	0x20000354

08003f7c <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <ipsOn+0x18>
 8003f8c:	2029      	movs	r0, #41	; 0x29
 8003f8e:	f7ff fef5 	bl	8003d7c <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8003f92:	e002      	b.n	8003f9a <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8003f94:	2028      	movs	r0, #40	; 0x28
 8003f96:	f7ff fef1 	bl	8003d7c <ST7789_WriteCommand>
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8003fae:	2036      	movs	r0, #54	; 0x36
 8003fb0:	f7ff fee4 	bl	8003d7c <ST7789_WriteCommand>
	switch (m) {
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d81a      	bhi.n	8003ff0 <ST7789_SetRotation+0x4c>
 8003fba:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <ST7789_SetRotation+0x1c>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003fd1 	.word	0x08003fd1
 8003fc4:	08003fd9 	.word	0x08003fd9
 8003fc8:	08003fe1 	.word	0x08003fe1
 8003fcc:	08003fe9 	.word	0x08003fe9
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8003fd0:	20c0      	movs	r0, #192	; 0xc0
 8003fd2:	f7ff ffad 	bl	8003f30 <ST7789_WriteSmallData>
		break;
 8003fd6:	e00c      	b.n	8003ff2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003fd8:	20a0      	movs	r0, #160	; 0xa0
 8003fda:	f7ff ffa9 	bl	8003f30 <ST7789_WriteSmallData>
		break;
 8003fde:	e008      	b.n	8003ff2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f7ff ffa5 	bl	8003f30 <ST7789_WriteSmallData>
		break;
 8003fe6:	e004      	b.n	8003ff2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003fe8:	2060      	movs	r0, #96	; 0x60
 8003fea:	f7ff ffa1 	bl	8003f30 <ST7789_WriteSmallData>
		break;
 8003fee:	e000      	b.n	8003ff2 <ST7789_SetRotation+0x4e>
	default:
		break;
 8003ff0:	bf00      	nop
	}
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop

08003ffc <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	4604      	mov	r4, r0
 8004004:	4608      	mov	r0, r1
 8004006:	4611      	mov	r1, r2
 8004008:	461a      	mov	r2, r3
 800400a:	4623      	mov	r3, r4
 800400c:	80fb      	strh	r3, [r7, #6]
 800400e:	4603      	mov	r3, r0
 8004010:	80bb      	strh	r3, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	807b      	strh	r3, [r7, #2]
 8004016:	4613      	mov	r3, r2
 8004018:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	82fb      	strh	r3, [r7, #22]
 800401e:	887b      	ldrh	r3, [r7, #2]
 8004020:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8004022:	88bb      	ldrh	r3, [r7, #4]
 8004024:	827b      	strh	r3, [r7, #18]
 8004026:	883b      	ldrh	r3, [r7, #0]
 8004028:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800402a:	202a      	movs	r0, #42	; 0x2a
 800402c:	f7ff fea6 	bl	8003d7c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8004030:	8afb      	ldrh	r3, [r7, #22]
 8004032:	0a1b      	lsrs	r3, r3, #8
 8004034:	b29b      	uxth	r3, r3
 8004036:	b2db      	uxtb	r3, r3
 8004038:	733b      	strb	r3, [r7, #12]
 800403a:	8afb      	ldrh	r3, [r7, #22]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	737b      	strb	r3, [r7, #13]
 8004040:	8abb      	ldrh	r3, [r7, #20]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	b29b      	uxth	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	73bb      	strb	r3, [r7, #14]
 800404a:	8abb      	ldrh	r3, [r7, #20]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8004050:	f107 030c 	add.w	r3, r7, #12
 8004054:	2104      	movs	r1, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fee0 	bl	8003e1c <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800405c:	202b      	movs	r0, #43	; 0x2b
 800405e:	f7ff fe8d 	bl	8003d7c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8004062:	8a7b      	ldrh	r3, [r7, #18]
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	b29b      	uxth	r3, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	723b      	strb	r3, [r7, #8]
 800406c:	8a7b      	ldrh	r3, [r7, #18]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	727b      	strb	r3, [r7, #9]
 8004072:	8a3b      	ldrh	r3, [r7, #16]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	b29b      	uxth	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	72bb      	strb	r3, [r7, #10]
 800407c:	8a3b      	ldrh	r3, [r7, #16]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8004082:	f107 0308 	add.w	r3, r7, #8
 8004086:	2104      	movs	r1, #4
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fec7 	bl	8003e1c <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 800408e:	202c      	movs	r0, #44	; 0x2c
 8004090:	f7ff fe74 	bl	8003d7c <ST7789_WriteCommand>
}
 8004094:	bf00      	nop
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	bd90      	pop	{r4, r7, pc}

0800409c <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 80040a0:	2014      	movs	r0, #20
 80040a2:	f000 fdc9 	bl	8004c38 <HAL_Delay>
    ST7789_RST_Clr();
 80040a6:	2200      	movs	r2, #0
 80040a8:	2102      	movs	r1, #2
 80040aa:	4808      	ldr	r0, [pc, #32]	; (80040cc <ST7789_Reset+0x30>)
 80040ac:	f001 fc68 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 80040b0:	200a      	movs	r0, #10
 80040b2:	f000 fdc1 	bl	8004c38 <HAL_Delay>
    ST7789_RST_Set();
 80040b6:	2201      	movs	r2, #1
 80040b8:	2102      	movs	r1, #2
 80040ba:	4804      	ldr	r0, [pc, #16]	; (80040cc <ST7789_Reset+0x30>)
 80040bc:	f001 fc60 	bl	8005980 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 80040c0:	2014      	movs	r0, #20
 80040c2:	f000 fdb9 	bl	8004c38 <HAL_Delay>
}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40020000 	.word	0x40020000

080040d0 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b08f      	sub	sp, #60	; 0x3c
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80040da:	203a      	movs	r0, #58	; 0x3a
 80040dc:	f7ff fe4e 	bl	8003d7c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 80040e0:	2055      	movs	r0, #85	; 0x55
 80040e2:	f7ff ff25 	bl	8003f30 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80040e6:	20b2      	movs	r0, #178	; 0xb2
 80040e8:	f7ff fe48 	bl	8003d7c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80040ec:	4a3a      	ldr	r2, [pc, #232]	; (80041d8 <ST7789_Init+0x108>)
 80040ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040f6:	6018      	str	r0, [r3, #0]
 80040f8:	3304      	adds	r3, #4
 80040fa:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80040fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004100:	2105      	movs	r1, #5
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fe8a 	bl	8003e1c <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8004108:	2003      	movs	r0, #3
 800410a:	f7ff ff4b 	bl	8003fa4 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 800410e:	20b7      	movs	r0, #183	; 0xb7
 8004110:	f7ff fe34 	bl	8003d7c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8004114:	2035      	movs	r0, #53	; 0x35
 8004116:	f7ff ff0b 	bl	8003f30 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800411a:	20bb      	movs	r0, #187	; 0xbb
 800411c:	f7ff fe2e 	bl	8003d7c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8004120:	2019      	movs	r0, #25
 8004122:	f7ff ff05 	bl	8003f30 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8004126:	20c0      	movs	r0, #192	; 0xc0
 8004128:	f7ff fe28 	bl	8003d7c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 800412c:	202c      	movs	r0, #44	; 0x2c
 800412e:	f7ff feff 	bl	8003f30 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8004132:	20c2      	movs	r0, #194	; 0xc2
 8004134:	f7ff fe22 	bl	8003d7c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8004138:	2001      	movs	r0, #1
 800413a:	f7ff fef9 	bl	8003f30 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 800413e:	20ff      	movs	r0, #255	; 0xff
 8004140:	f7ff fef6 	bl	8003f30 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8004144:	20c3      	movs	r0, #195	; 0xc3
 8004146:	f7ff fe19 	bl	8003d7c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800414a:	2012      	movs	r0, #18
 800414c:	f7ff fef0 	bl	8003f30 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8004150:	20c4      	movs	r0, #196	; 0xc4
 8004152:	f7ff fe13 	bl	8003d7c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8004156:	2020      	movs	r0, #32
 8004158:	f7ff feea 	bl	8003f30 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 800415c:	20c6      	movs	r0, #198	; 0xc6
 800415e:	f7ff fe0d 	bl	8003d7c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8004162:	200f      	movs	r0, #15
 8004164:	f7ff fee4 	bl	8003f30 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8004168:	20d0      	movs	r0, #208	; 0xd0
 800416a:	f7ff fe07 	bl	8003d7c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 800416e:	20a4      	movs	r0, #164	; 0xa4
 8004170:	f7ff fede 	bl	8003f30 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8004174:	20a1      	movs	r0, #161	; 0xa1
 8004176:	f7ff fedb 	bl	8003f30 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800417a:	20e0      	movs	r0, #224	; 0xe0
 800417c:	f7ff fdfe 	bl	8003d7c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8004180:	4b16      	ldr	r3, [pc, #88]	; (80041dc <ST7789_Init+0x10c>)
 8004182:	f107 041c 	add.w	r4, r7, #28
 8004186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004188:	c407      	stmia	r4!, {r0, r1, r2}
 800418a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800418c:	f107 031c 	add.w	r3, r7, #28
 8004190:	210e      	movs	r1, #14
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fe42 	bl	8003e1c <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8004198:	20e1      	movs	r0, #225	; 0xe1
 800419a:	f7ff fdef 	bl	8003d7c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <ST7789_Init+0x110>)
 80041a0:	f107 040c 	add.w	r4, r7, #12
 80041a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041a6:	c407      	stmia	r4!, {r0, r1, r2}
 80041a8:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80041aa:	f107 030c 	add.w	r3, r7, #12
 80041ae:	210e      	movs	r1, #14
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff fe33 	bl	8003e1c <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <ST7789_Init+0x114>)
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 80041ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041be:	2104      	movs	r1, #4
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fe01 	bl	8003dc8 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 f80d 	bl	80041e8 <ST7789_Fill_Color>
}
 80041ce:	bf00      	nop
 80041d0:	373c      	adds	r7, #60	; 0x3c
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd90      	pop	{r4, r7, pc}
 80041d6:	bf00      	nop
 80041d8:	0800df3c 	.word	0x0800df3c
 80041dc:	0800df44 	.word	0x0800df44
 80041e0:	0800df54 	.word	0x0800df54
 80041e4:	28131121 	.word	0x28131121

080041e8 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b0fc      	sub	sp, #496	; 0x1f0
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4602      	mov	r2, r0
 80041f0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80041f4:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80041f8:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80041fa:	23ef      	movs	r3, #239	; 0xef
 80041fc:	22ef      	movs	r2, #239	; 0xef
 80041fe:	2100      	movs	r1, #0
 8004200:	2000      	movs	r0, #0
 8004202:	f7ff fefb 	bl	8003ffc <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8004206:	2300      	movs	r3, #0
 8004208:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 800420c:	2300      	movs	r3, #0
 800420e:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004212:	e024      	b.n	800425e <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8004214:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004218:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	b29b      	uxth	r3, r3
 8004222:	b21a      	sxth	r2, r3
 8004224:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004228:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	b21b      	sxth	r3, r3
 8004232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004236:	b21b      	sxth	r3, r3
 8004238:	4313      	orrs	r3, r2
 800423a:	b219      	sxth	r1, r3
 800423c:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004240:	f107 020c 	add.w	r2, r7, #12
 8004244:	4413      	add	r3, r2
 8004246:	b28a      	uxth	r2, r1
 8004248:	801a      	strh	r2, [r3, #0]
		i += 2;
 800424a:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 800424e:	3302      	adds	r3, #2
 8004250:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8004254:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004258:	3301      	adds	r3, #1
 800425a:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800425e:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004262:	2bef      	cmp	r3, #239	; 0xef
 8004264:	d9d6      	bls.n	8004214 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 8004266:	2300      	movs	r3, #0
 8004268:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800426c:	e00b      	b.n	8004286 <ST7789_Fill_Color+0x9e>
 800426e:	f107 030c 	add.w	r3, r7, #12
 8004272:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fe20 	bl	8003ebc <ST7789_WriteDataLine>
 800427c:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004280:	3301      	adds	r3, #1
 8004282:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004286:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800428a:	2bef      	cmp	r3, #239	; 0xef
 800428c:	d9ef      	bls.n	800426e <ST7789_Fill_Color+0x86>

//#endif
}
 800428e:	bf00      	nop
 8004290:	bf00      	nop
 8004292:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800429a:	b590      	push	{r4, r7, lr}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	4604      	mov	r4, r0
 80042a2:	4608      	mov	r0, r1
 80042a4:	4611      	mov	r1, r2
 80042a6:	461a      	mov	r2, r3
 80042a8:	4623      	mov	r3, r4
 80042aa:	80fb      	strh	r3, [r7, #6]
 80042ac:	4603      	mov	r3, r0
 80042ae:	80bb      	strh	r3, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	807b      	strh	r3, [r7, #2]
 80042b4:	4613      	mov	r3, r2
 80042b6:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 80042b8:	887b      	ldrh	r3, [r7, #2]
 80042ba:	2bef      	cmp	r3, #239	; 0xef
 80042bc:	d82b      	bhi.n	8004316 <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80042be:	883b      	ldrh	r3, [r7, #0]
 80042c0:	2bef      	cmp	r3, #239	; 0xef
 80042c2:	d828      	bhi.n	8004316 <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 80042c4:	8c3b      	ldrh	r3, [r7, #32]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	723b      	strb	r3, [r7, #8]
 80042ce:	8c3b      	ldrh	r3, [r7, #32]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80042d4:	883b      	ldrh	r3, [r7, #0]
 80042d6:	887a      	ldrh	r2, [r7, #2]
 80042d8:	88b9      	ldrh	r1, [r7, #4]
 80042da:	88f8      	ldrh	r0, [r7, #6]
 80042dc:	f7ff fe8e 	bl	8003ffc <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 80042e0:	88bb      	ldrh	r3, [r7, #4]
 80042e2:	81fb      	strh	r3, [r7, #14]
 80042e4:	e012      	b.n	800430c <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	81bb      	strh	r3, [r7, #12]
 80042ea:	e008      	b.n	80042fe <ST7789_Fill+0x64>
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	2102      	movs	r1, #2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fd92 	bl	8003e1c <ST7789_WriteData>
 80042f8:	89bb      	ldrh	r3, [r7, #12]
 80042fa:	3301      	adds	r3, #1
 80042fc:	81bb      	strh	r3, [r7, #12]
 80042fe:	89ba      	ldrh	r2, [r7, #12]
 8004300:	887b      	ldrh	r3, [r7, #2]
 8004302:	429a      	cmp	r2, r3
 8004304:	d9f2      	bls.n	80042ec <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 8004306:	89fb      	ldrh	r3, [r7, #14]
 8004308:	3301      	adds	r3, #1
 800430a:	81fb      	strh	r3, [r7, #14]
 800430c:	89fa      	ldrh	r2, [r7, #14]
 800430e:	883b      	ldrh	r3, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d9e8      	bls.n	80042e6 <ST7789_Fill+0x4c>
 8004314:	e000      	b.n	8004318 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8004316:	bf00      	nop
	}
}
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	bd90      	pop	{r4, r7, pc}

0800431e <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800431e:	b082      	sub	sp, #8
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	637b      	str	r3, [r7, #52]	; 0x34
 8004328:	4603      	mov	r3, r0
 800432a:	80fb      	strh	r3, [r7, #6]
 800432c:	460b      	mov	r3, r1
 800432e:	80bb      	strh	r3, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8004334:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004338:	b29a      	uxth	r2, r3
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	4413      	add	r3, r2
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29c      	uxth	r4, r3
 8004344:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004348:	b29a      	uxth	r2, r3
 800434a:	88bb      	ldrh	r3, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29b      	uxth	r3, r3
 8004354:	88b9      	ldrh	r1, [r7, #4]
 8004356:	88f8      	ldrh	r0, [r7, #6]
 8004358:	4622      	mov	r2, r4
 800435a:	f7ff fe4f 	bl	8003ffc <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 800435e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004360:	0a1b      	lsrs	r3, r3, #8
 8004362:	b29b      	uxth	r3, r3
 8004364:	b2db      	uxtb	r3, r3
 8004366:	733b      	strb	r3, [r7, #12]
 8004368:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800436a:	b2db      	uxtb	r3, r3
 800436c:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 800436e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	b29b      	uxth	r3, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	723b      	strb	r3, [r7, #8]
 800437a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800437e:	b2db      	uxtb	r3, r3
 8004380:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	e02f      	b.n	80043ec <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 800438c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	3b20      	subs	r3, #32
 8004392:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4619      	mov	r1, r3
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	440b      	add	r3, r1
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	4413      	add	r3, r2
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	e015      	b.n	80043da <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <ST7789_WriteChar+0xa8>
				uk = cdata;
 80043be:	f107 030c 	add.w	r3, r7, #12
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e002      	b.n	80043cc <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 80043c6:	f107 0308 	add.w	r3, r7, #8
 80043ca:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 80043cc:	2102      	movs	r1, #2
 80043ce:	6978      	ldr	r0, [r7, #20]
 80043d0:	f7ff fd24 	bl	8003e1c <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	3301      	adds	r3, #1
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80043de:	461a      	mov	r2, r3
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d3e3      	bcc.n	80043ae <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3301      	adds	r3, #1
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80043f0:	461a      	mov	r2, r3
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d3c9      	bcc.n	800438c <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	3724      	adds	r7, #36	; 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004404:	b002      	add	sp, #8
 8004406:	4770      	bx	lr

08004408 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004408:	b082      	sub	sp, #8
 800440a:	b580      	push	{r7, lr}
 800440c:	b086      	sub	sp, #24
 800440e:	af04      	add	r7, sp, #16
 8004410:	603a      	str	r2, [r7, #0]
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	4603      	mov	r3, r0
 8004416:	80fb      	strh	r3, [r7, #6]
 8004418:	460b      	mov	r3, r1
 800441a:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03f      	beq.n	80044a2 <ST7789_WriteString+0x9a>

	while (*str) {
 8004422:	e039      	b.n	8004498 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	7d3a      	ldrb	r2, [r7, #20]
 8004428:	4413      	add	r3, r2
 800442a:	2bef      	cmp	r3, #239	; 0xef
 800442c:	dd13      	ble.n	8004456 <ST7789_WriteString+0x4e>
			x = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004432:	7d7b      	ldrb	r3, [r7, #21]
 8004434:	b29a      	uxth	r2, r3
 8004436:	88bb      	ldrh	r3, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 800443c:	88bb      	ldrh	r3, [r7, #4]
 800443e:	7d7a      	ldrb	r2, [r7, #21]
 8004440:	4413      	add	r3, r2
 8004442:	2bef      	cmp	r3, #239	; 0xef
 8004444:	dc2f      	bgt.n	80044a6 <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b20      	cmp	r3, #32
 800444c:	d103      	bne.n	8004456 <ST7789_WriteString+0x4e>
				str++;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	603b      	str	r3, [r7, #0]
				continue;
 8004454:	e020      	b.n	8004498 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b0a      	cmp	r3, #10
 800445c:	d012      	beq.n	8004484 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781a      	ldrb	r2, [r3, #0]
 8004462:	88b9      	ldrh	r1, [r7, #4]
 8004464:	88f8      	ldrh	r0, [r7, #6]
 8004466:	8c3b      	ldrh	r3, [r7, #32]
 8004468:	9302      	str	r3, [sp, #8]
 800446a:	8bbb      	ldrh	r3, [r7, #28]
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f7ff ff53 	bl	800431e <ST7789_WriteChar>
			x += font.width;
 8004478:	7d3b      	ldrb	r3, [r7, #20]
 800447a:	b29a      	uxth	r2, r3
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	4413      	add	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
 8004482:	e006      	b.n	8004492 <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004488:	7d7b      	ldrb	r3, [r7, #21]
 800448a:	b29a      	uxth	r2, r3
 800448c:	88bb      	ldrh	r3, [r7, #4]
 800448e:	4413      	add	r3, r2
 8004490:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	603b      	str	r3, [r7, #0]
	while (*str) {
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1c1      	bne.n	8004424 <ST7789_WriteString+0x1c>
 80044a0:	e002      	b.n	80044a8 <ST7789_WriteString+0xa0>
	if (!str) return;
 80044a2:	bf00      	nop
 80044a4:	e000      	b.n	80044a8 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 80044a6:	bf00      	nop
	}
}
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044b0:	b002      	add	sp, #8
 80044b2:	4770      	bx	lr

080044b4 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b0a4      	sub	sp, #144	; 0x90
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	f107 0310 	add.w	r3, r7, #16
 80044c8:	227c      	movs	r2, #124	; 0x7c
 80044ca:	2100      	movs	r1, #0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f008 fb43 	bl	800cb58 <memset>

	memset(st, 0x20, 127);
 80044d2:	f107 030c 	add.w	r3, r7, #12
 80044d6:	227f      	movs	r2, #127	; 0x7f
 80044d8:	2120      	movs	r1, #32
 80044da:	4618      	mov	r0, r3
 80044dc:	f008 fb3c 	bl	800cb58 <memset>
	int8_t k = strlen(str);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fb fe75 	bl	80001d0 <strlen>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 80044ec:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80044f0:	887b      	ldrh	r3, [r7, #2]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	da25      	bge.n	8004542 <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 80044f6:	887a      	ldrh	r2, [r7, #2]
 80044f8:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	0fda      	lsrs	r2, r3, #31
 8004500:	4413      	add	r3, r2
 8004502:	105b      	asrs	r3, r3, #1
 8004504:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8004508:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 800450c:	f107 020c 	add.w	r2, r7, #12
 8004510:	4413      	add	r3, r2
 8004512:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4618      	mov	r0, r3
 800451a:	f008 fb0f 	bl	800cb3c <memcpy>
		st[k + n*2 + 1] = '\0';
 800451e:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004522:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	4413      	add	r3, r2
 800452a:	3301      	adds	r3, #1
 800452c:	3390      	adds	r3, #144	; 0x90
 800452e:	443b      	add	r3, r7
 8004530:	2200      	movs	r2, #0
 8004532:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 8004536:	f107 030c 	add.w	r3, r7, #12
 800453a:	4619      	mov	r1, r3
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f008 fc5d 	bl	800cdfc <strcpy>
	}

	return str;
 8004542:	687b      	ldr	r3, [r7, #4]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3790      	adds	r7, #144	; 0x90
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <HAL_MspInit+0x74>)
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	4a19      	ldr	r2, [pc, #100]	; (80045c0 <HAL_MspInit+0x74>)
 800455c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004560:	6453      	str	r3, [r2, #68]	; 0x44
 8004562:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <HAL_MspInit+0x74>)
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800456a:	607b      	str	r3, [r7, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <HAL_MspInit+0x74>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <HAL_MspInit+0x74>)
 8004578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457c:	6413      	str	r3, [r2, #64]	; 0x40
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_MspInit+0x74>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800458a:	2200      	movs	r2, #0
 800458c:	210f      	movs	r1, #15
 800458e:	f06f 0001 	mvn.w	r0, #1
 8004592:	f000 fc2d 	bl	8004df0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004596:	2200      	movs	r2, #0
 8004598:	2105      	movs	r1, #5
 800459a:	2005      	movs	r0, #5
 800459c:	f000 fc28 	bl	8004df0 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80045a0:	2005      	movs	r0, #5
 80045a2:	f000 fc41 	bl	8004e28 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80045a6:	2200      	movs	r2, #0
 80045a8:	2105      	movs	r1, #5
 80045aa:	2005      	movs	r0, #5
 80045ac:	f000 fc20 	bl	8004df0 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80045b0:	2005      	movs	r0, #5
 80045b2:	f000 fc39 	bl	8004e28 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045b6:	bf00      	nop
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40023800 	.word	0x40023800

080045c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045cc:	f107 0308 	add.w	r3, r7, #8
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a0c      	ldr	r2, [pc, #48]	; (8004610 <HAL_RTC_MspInit+0x4c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d110      	bne.n	8004606 <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80045e4:	2302      	movs	r3, #2
 80045e6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <HAL_RTC_MspInit+0x50>)
 80045ea:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045ec:	f107 0308 	add.w	r3, r7, #8
 80045f0:	4618      	mov	r0, r3
 80045f2:	f002 f9a3 	bl	800693c <HAL_RCCEx_PeriphCLKConfig>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 80045fc:	f7ff fbae 	bl	8003d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RTC_MspInit+0x54>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004606:	bf00      	nop
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40002800 	.word	0x40002800
 8004614:	00190300 	.word	0x00190300
 8004618:	42470e3c 	.word	0x42470e3c

0800461c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08a      	sub	sp, #40	; 0x28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004624:	f107 0314 	add.w	r3, r7, #20
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a39      	ldr	r2, [pc, #228]	; (8004720 <HAL_SPI_MspInit+0x104>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d16b      	bne.n	8004716 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	4b38      	ldr	r3, [pc, #224]	; (8004724 <HAL_SPI_MspInit+0x108>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	4a37      	ldr	r2, [pc, #220]	; (8004724 <HAL_SPI_MspInit+0x108>)
 8004648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800464c:	6453      	str	r3, [r2, #68]	; 0x44
 800464e:	4b35      	ldr	r3, [pc, #212]	; (8004724 <HAL_SPI_MspInit+0x108>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	4b31      	ldr	r3, [pc, #196]	; (8004724 <HAL_SPI_MspInit+0x108>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	4a30      	ldr	r2, [pc, #192]	; (8004724 <HAL_SPI_MspInit+0x108>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6313      	str	r3, [r2, #48]	; 0x30
 800466a:	4b2e      	ldr	r3, [pc, #184]	; (8004724 <HAL_SPI_MspInit+0x108>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 8004676:	23a0      	movs	r3, #160	; 0xa0
 8004678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467a:	2302      	movs	r3, #2
 800467c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004682:	2303      	movs	r3, #3
 8004684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004686:	2305      	movs	r3, #5
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800468a:	f107 0314 	add.w	r3, r7, #20
 800468e:	4619      	mov	r1, r3
 8004690:	4825      	ldr	r0, [pc, #148]	; (8004728 <HAL_SPI_MspInit+0x10c>)
 8004692:	f000 ffd9 	bl	8005648 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8004696:	4b25      	ldr	r3, [pc, #148]	; (800472c <HAL_SPI_MspInit+0x110>)
 8004698:	4a25      	ldr	r2, [pc, #148]	; (8004730 <HAL_SPI_MspInit+0x114>)
 800469a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800469c:	4b23      	ldr	r3, [pc, #140]	; (800472c <HAL_SPI_MspInit+0x110>)
 800469e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80046a2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046a4:	4b21      	ldr	r3, [pc, #132]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046a6:	2240      	movs	r2, #64	; 0x40
 80046a8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046aa:	4b20      	ldr	r3, [pc, #128]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046b0:	4b1e      	ldr	r3, [pc, #120]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046b6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046b8:	4b1c      	ldr	r3, [pc, #112]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046be:	4b1b      	ldr	r3, [pc, #108]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80046ca:	4b18      	ldr	r3, [pc, #96]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046d0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80046d2:	4b16      	ldr	r3, [pc, #88]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046d4:	2204      	movs	r2, #4
 80046d6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80046d8:	4b14      	ldr	r3, [pc, #80]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046da:	2203      	movs	r2, #3
 80046dc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80046ea:	4810      	ldr	r0, [pc, #64]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046ec:	f000 fbaa 	bl	8004e44 <HAL_DMA_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80046f6:	f7ff fb31 	bl	8003d5c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a0b      	ldr	r2, [pc, #44]	; (800472c <HAL_SPI_MspInit+0x110>)
 80046fe:	649a      	str	r2, [r3, #72]	; 0x48
 8004700:	4a0a      	ldr	r2, [pc, #40]	; (800472c <HAL_SPI_MspInit+0x110>)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8004706:	2200      	movs	r2, #0
 8004708:	2102      	movs	r1, #2
 800470a:	2023      	movs	r0, #35	; 0x23
 800470c:	f000 fb70 	bl	8004df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004710:	2023      	movs	r0, #35	; 0x23
 8004712:	f000 fb89 	bl	8004e28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004716:	bf00      	nop
 8004718:	3728      	adds	r7, #40	; 0x28
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40013000 	.word	0x40013000
 8004724:	40023800 	.word	0x40023800
 8004728:	40020000 	.word	0x40020000
 800472c:	200001bc 	.word	0x200001bc
 8004730:	40026458 	.word	0x40026458

08004734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d115      	bne.n	8004772 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	4b0c      	ldr	r3, [pc, #48]	; (800477c <HAL_TIM_Base_MspInit+0x48>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	4a0b      	ldr	r2, [pc, #44]	; (800477c <HAL_TIM_Base_MspInit+0x48>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	6413      	str	r3, [r2, #64]	; 0x40
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <HAL_TIM_Base_MspInit+0x48>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004762:	2200      	movs	r2, #0
 8004764:	2101      	movs	r1, #1
 8004766:	201c      	movs	r0, #28
 8004768:	f000 fb42 	bl	8004df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800476c:	201c      	movs	r0, #28
 800476e:	f000 fb5b 	bl	8004e28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004772:	bf00      	nop
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800

08004780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	609a      	str	r2, [r3, #8]
 8004794:	60da      	str	r2, [r3, #12]
 8004796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a35      	ldr	r2, [pc, #212]	; (8004874 <HAL_UART_MspInit+0xf4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d163      	bne.n	800486a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	4b34      	ldr	r3, [pc, #208]	; (8004878 <HAL_UART_MspInit+0xf8>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	4a33      	ldr	r2, [pc, #204]	; (8004878 <HAL_UART_MspInit+0xf8>)
 80047ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b0:	6413      	str	r3, [r2, #64]	; 0x40
 80047b2:	4b31      	ldr	r3, [pc, #196]	; (8004878 <HAL_UART_MspInit+0xf8>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <HAL_UART_MspInit+0xf8>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	4a2c      	ldr	r2, [pc, #176]	; (8004878 <HAL_UART_MspInit+0xf8>)
 80047c8:	f043 0302 	orr.w	r3, r3, #2
 80047cc:	6313      	str	r3, [r2, #48]	; 0x30
 80047ce:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <HAL_UART_MspInit+0xf8>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 80047da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80047de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e0:	2302      	movs	r3, #2
 80047e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e8:	2303      	movs	r3, #3
 80047ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80047ec:	2307      	movs	r3, #7
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047f0:	f107 0314 	add.w	r3, r7, #20
 80047f4:	4619      	mov	r1, r3
 80047f6:	4821      	ldr	r0, [pc, #132]	; (800487c <HAL_UART_MspInit+0xfc>)
 80047f8:	f000 ff26 	bl	8005648 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80047fc:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_UART_MspInit+0x100>)
 80047fe:	4a21      	ldr	r2, [pc, #132]	; (8004884 <HAL_UART_MspInit+0x104>)
 8004800:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004802:	4b1f      	ldr	r3, [pc, #124]	; (8004880 <HAL_UART_MspInit+0x100>)
 8004804:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004808:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800480a:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <HAL_UART_MspInit+0x100>)
 800480c:	2240      	movs	r2, #64	; 0x40
 800480e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004810:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <HAL_UART_MspInit+0x100>)
 8004812:	2200      	movs	r2, #0
 8004814:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <HAL_UART_MspInit+0x100>)
 8004818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800481c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800481e:	4b18      	ldr	r3, [pc, #96]	; (8004880 <HAL_UART_MspInit+0x100>)
 8004820:	2200      	movs	r2, #0
 8004822:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004824:	4b16      	ldr	r3, [pc, #88]	; (8004880 <HAL_UART_MspInit+0x100>)
 8004826:	2200      	movs	r2, #0
 8004828:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800482a:	4b15      	ldr	r3, [pc, #84]	; (8004880 <HAL_UART_MspInit+0x100>)
 800482c:	2200      	movs	r2, #0
 800482e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <HAL_UART_MspInit+0x100>)
 8004832:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004836:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004838:	4b11      	ldr	r3, [pc, #68]	; (8004880 <HAL_UART_MspInit+0x100>)
 800483a:	2200      	movs	r2, #0
 800483c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800483e:	4810      	ldr	r0, [pc, #64]	; (8004880 <HAL_UART_MspInit+0x100>)
 8004840:	f000 fb00 	bl	8004e44 <HAL_DMA_Init>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800484a:	f7ff fa87 	bl	8003d5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <HAL_UART_MspInit+0x100>)
 8004852:	635a      	str	r2, [r3, #52]	; 0x34
 8004854:	4a0a      	ldr	r2, [pc, #40]	; (8004880 <HAL_UART_MspInit+0x100>)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800485a:	2200      	movs	r2, #0
 800485c:	2105      	movs	r1, #5
 800485e:	2027      	movs	r0, #39	; 0x27
 8004860:	f000 fac6 	bl	8004df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004864:	2027      	movs	r0, #39	; 0x27
 8004866:	f000 fadf 	bl	8004e28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800486a:	bf00      	nop
 800486c:	3728      	adds	r7, #40	; 0x28
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40004800 	.word	0x40004800
 8004878:	40023800 	.word	0x40023800
 800487c:	40020400 	.word	0x40020400
 8004880:	200002a8 	.word	0x200002a8
 8004884:	40026058 	.word	0x40026058

08004888 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800488e:	1d3b      	adds	r3, r7, #4
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	60da      	str	r2, [r3, #12]
 800489a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800489c:	4b20      	ldr	r3, [pc, #128]	; (8004920 <HAL_FSMC_MspInit+0x98>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d139      	bne.n	8004918 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 80048a4:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <HAL_FSMC_MspInit+0x98>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <HAL_FSMC_MspInit+0x9c>)
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <HAL_FSMC_MspInit+0x9c>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6393      	str	r3, [r2, #56]	; 0x38
 80048ba:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <HAL_FSMC_MspInit+0x9c>)
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80048c6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80048ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048cc:	2302      	movs	r3, #2
 80048ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d4:	2303      	movs	r3, #3
 80048d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80048d8:	230c      	movs	r3, #12
 80048da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048dc:	1d3b      	adds	r3, r7, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4811      	ldr	r0, [pc, #68]	; (8004928 <HAL_FSMC_MspInit+0xa0>)
 80048e2:	f000 feb1 	bl	8005648 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 80048e6:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 80048ea:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ec:	2302      	movs	r3, #2
 80048ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f4:	2303      	movs	r3, #3
 80048f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80048f8:	230c      	movs	r3, #12
 80048fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048fc:	1d3b      	adds	r3, r7, #4
 80048fe:	4619      	mov	r1, r3
 8004900:	480a      	ldr	r0, [pc, #40]	; (800492c <HAL_FSMC_MspInit+0xa4>)
 8004902:	f000 fea1 	bl	8005648 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 8004906:	2200      	movs	r2, #0
 8004908:	2105      	movs	r1, #5
 800490a:	2030      	movs	r0, #48	; 0x30
 800490c:	f000 fa70 	bl	8004df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004910:	2030      	movs	r0, #48	; 0x30
 8004912:	f000 fa89 	bl	8004e28 <HAL_NVIC_EnableIRQ>
 8004916:	e000      	b.n	800491a <HAL_FSMC_MspInit+0x92>
    return;
 8004918:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20002bb4 	.word	0x20002bb4
 8004924:	40023800 	.word	0x40023800
 8004928:	40021000 	.word	0x40021000
 800492c:	40020c00 	.word	0x40020c00

08004930 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8004938:	f7ff ffa6 	bl	8004888 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08c      	sub	sp, #48	; 0x30
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004954:	2200      	movs	r2, #0
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	2019      	movs	r0, #25
 800495a:	f000 fa49 	bl	8004df0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800495e:	2019      	movs	r0, #25
 8004960:	f000 fa62 	bl	8004e28 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <HAL_InitTick+0xa4>)
 800496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496c:	4a1e      	ldr	r2, [pc, #120]	; (80049e8 <HAL_InitTick+0xa4>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6453      	str	r3, [r2, #68]	; 0x44
 8004974:	4b1c      	ldr	r3, [pc, #112]	; (80049e8 <HAL_InitTick+0xa4>)
 8004976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004980:	f107 0210 	add.w	r2, r7, #16
 8004984:	f107 0314 	add.w	r3, r7, #20
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f001 ffa4 	bl	80068d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004990:	f001 ff8e 	bl	80068b0 <HAL_RCC_GetPCLK2Freq>
 8004994:	4603      	mov	r3, r0
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499c:	4a13      	ldr	r2, [pc, #76]	; (80049ec <HAL_InitTick+0xa8>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	0c9b      	lsrs	r3, r3, #18
 80049a4:	3b01      	subs	r3, #1
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <HAL_InitTick+0xac>)
 80049aa:	4a12      	ldr	r2, [pc, #72]	; (80049f4 <HAL_InitTick+0xb0>)
 80049ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80049ae:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <HAL_InitTick+0xac>)
 80049b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80049b6:	4a0e      	ldr	r2, [pc, #56]	; (80049f0 <HAL_InitTick+0xac>)
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80049bc:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <HAL_InitTick+0xac>)
 80049be:	2200      	movs	r2, #0
 80049c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_InitTick+0xac>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80049c8:	4809      	ldr	r0, [pc, #36]	; (80049f0 <HAL_InitTick+0xac>)
 80049ca:	f003 f887 	bl	8007adc <HAL_TIM_Base_Init>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80049d4:	4806      	ldr	r0, [pc, #24]	; (80049f0 <HAL_InitTick+0xac>)
 80049d6:	f003 f8d1 	bl	8007b7c <HAL_TIM_Base_Start_IT>
 80049da:	4603      	mov	r3, r0
 80049dc:	e000      	b.n	80049e0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3730      	adds	r7, #48	; 0x30
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40023800 	.word	0x40023800
 80049ec:	431bde83 	.word	0x431bde83
 80049f0:	20002bb8 	.word	0x20002bb8
 80049f4:	40010000 	.word	0x40010000

080049f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80049fc:	bf00      	nop
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a06:	b480      	push	{r7}
 8004a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a0a:	e7fe      	b.n	8004a0a <HardFault_Handler+0x4>

08004a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a10:	e7fe      	b.n	8004a10 <MemManage_Handler+0x4>

08004a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a12:	b480      	push	{r7}
 8004a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a16:	e7fe      	b.n	8004a16 <BusFault_Handler+0x4>

08004a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a1c:	e7fe      	b.n	8004a1c <UsageFault_Handler+0x4>

08004a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a22:	bf00      	nop
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004a30:	bf00      	nop
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
	...

08004a3c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004a40:	4802      	ldr	r0, [pc, #8]	; (8004a4c <DMA1_Stream3_IRQHandler+0x10>)
 8004a42:	f000 fb97 	bl	8005174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	200002a8 	.word	0x200002a8

08004a50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a54:	4802      	ldr	r0, [pc, #8]	; (8004a60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a56:	f003 f901 	bl	8007c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20002bb8 	.word	0x20002bb8

08004a64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a68:	4802      	ldr	r0, [pc, #8]	; (8004a74 <TIM2_IRQHandler+0x10>)
 8004a6a:	f003 f8f7 	bl	8007c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	2000021c 	.word	0x2000021c

08004a78 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004a7c:	4802      	ldr	r0, [pc, #8]	; (8004a88 <SPI1_IRQHandler+0x10>)
 8004a7e:	f002 fdb9 	bl	80075f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000164 	.word	0x20000164

08004a8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004a90:	4802      	ldr	r0, [pc, #8]	; (8004a9c <USART3_IRQHandler+0x10>)
 8004a92:	f003 fda1 	bl	80085d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004a96:	bf00      	nop
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000264 	.word	0x20000264

08004aa0 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8004aa4:	4802      	ldr	r0, [pc, #8]	; (8004ab0 <FSMC_IRQHandler+0x10>)
 8004aa6:	f000 ffec 	bl	8005a82 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000308 	.word	0x20000308

08004ab4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004ab8:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <DMA2_Stream3_IRQHandler+0x10>)
 8004aba:	f000 fb5b 	bl	8005174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	200001bc 	.word	0x200001bc

08004ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <_sbrk+0x5c>)
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <_sbrk+0x60>)
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004adc:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <_sbrk+0x64>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d102      	bne.n	8004aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ae4:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <_sbrk+0x64>)
 8004ae6:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <_sbrk+0x68>)
 8004ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004aea:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <_sbrk+0x64>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d207      	bcs.n	8004b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004af8:	f007 ff48 	bl	800c98c <__errno>
 8004afc:	4603      	mov	r3, r0
 8004afe:	220c      	movs	r2, #12
 8004b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b06:	e009      	b.n	8004b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b08:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <_sbrk+0x64>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b0e:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <_sbrk+0x64>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4413      	add	r3, r2
 8004b16:	4a05      	ldr	r2, [pc, #20]	; (8004b2c <_sbrk+0x64>)
 8004b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20020000 	.word	0x20020000
 8004b28:	00000800 	.word	0x00000800
 8004b2c:	20002c00 	.word	0x20002c00
 8004b30:	20007a28 	.word	0x20007a28

08004b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <SystemInit+0x28>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	4a07      	ldr	r2, [pc, #28]	; (8004b5c <SystemInit+0x28>)
 8004b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <SystemInit+0x28>)
 8004b4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b4e:	609a      	str	r2, [r3, #8]
#endif
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	e000ed00 	.word	0xe000ed00

08004b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b66:	e003      	b.n	8004b70 <LoopCopyDataInit>

08004b68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004b6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b6e:	3104      	adds	r1, #4

08004b70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b70:	480b      	ldr	r0, [pc, #44]	; (8004ba0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004b72:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004b74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b78:	d3f6      	bcc.n	8004b68 <CopyDataInit>
  ldr  r2, =_sbss
 8004b7a:	4a0b      	ldr	r2, [pc, #44]	; (8004ba8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004b7c:	e002      	b.n	8004b84 <LoopFillZerobss>

08004b7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b80:	f842 3b04 	str.w	r3, [r2], #4

08004b84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b84:	4b09      	ldr	r3, [pc, #36]	; (8004bac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004b86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b88:	d3f9      	bcc.n	8004b7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004b8a:	f7ff ffd3 	bl	8004b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b8e:	f007 ffaf 	bl	800caf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b92:	f7fc f863 	bl	8000c5c <main>
  bx  lr    
 8004b96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004b9c:	080102a4 	.word	0x080102a4
  ldr  r0, =_sdata
 8004ba0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ba4:	20000128 	.word	0x20000128
  ldr  r2, =_sbss
 8004ba8:	20000128 	.word	0x20000128
  ldr  r3, = _ebss
 8004bac:	20007a28 	.word	0x20007a28

08004bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bb0:	e7fe      	b.n	8004bb0 <ADC_IRQHandler>
	...

08004bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <HAL_Init+0x40>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a0d      	ldr	r2, [pc, #52]	; (8004bf4 <HAL_Init+0x40>)
 8004bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <HAL_Init+0x40>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a0a      	ldr	r2, [pc, #40]	; (8004bf4 <HAL_Init+0x40>)
 8004bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bd0:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <HAL_Init+0x40>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a07      	ldr	r2, [pc, #28]	; (8004bf4 <HAL_Init+0x40>)
 8004bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bdc:	2003      	movs	r0, #3
 8004bde:	f000 f8fc 	bl	8004dda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004be2:	200f      	movs	r0, #15
 8004be4:	f7ff feae 	bl	8004944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004be8:	f7ff fcb0 	bl	800454c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023c00 	.word	0x40023c00

08004bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_IncTick+0x20>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <HAL_IncTick+0x24>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4413      	add	r3, r2
 8004c08:	4a04      	ldr	r2, [pc, #16]	; (8004c1c <HAL_IncTick+0x24>)
 8004c0a:	6013      	str	r3, [r2, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	200000ac 	.word	0x200000ac
 8004c1c:	20002c04 	.word	0x20002c04

08004c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return uwTick;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <HAL_GetTick+0x14>)
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20002c04 	.word	0x20002c04

08004c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c40:	f7ff ffee 	bl	8004c20 <HAL_GetTick>
 8004c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c50:	d005      	beq.n	8004c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c52:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <HAL_Delay+0x44>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c5e:	bf00      	nop
 8004c60:	f7ff ffde 	bl	8004c20 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d8f7      	bhi.n	8004c60 <HAL_Delay+0x28>
  {
  }
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200000ac 	.word	0x200000ac

08004c80 <__NVIC_SetPriorityGrouping>:
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c90:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cb2:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	60d3      	str	r3, [r2, #12]
}
 8004cb8:	bf00      	nop
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	e000ed00 	.word	0xe000ed00

08004cc8 <__NVIC_GetPriorityGrouping>:
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ccc:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	0a1b      	lsrs	r3, r3, #8
 8004cd2:	f003 0307 	and.w	r3, r3, #7
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	e000ed00 	.word	0xe000ed00

08004ce4 <__NVIC_EnableIRQ>:
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	db0b      	blt.n	8004d0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	f003 021f 	and.w	r2, r3, #31
 8004cfc:	4907      	ldr	r1, [pc, #28]	; (8004d1c <__NVIC_EnableIRQ+0x38>)
 8004cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	2001      	movs	r0, #1
 8004d06:	fa00 f202 	lsl.w	r2, r0, r2
 8004d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	e000e100 	.word	0xe000e100

08004d20 <__NVIC_SetPriority>:
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	6039      	str	r1, [r7, #0]
 8004d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	db0a      	blt.n	8004d4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	490c      	ldr	r1, [pc, #48]	; (8004d6c <__NVIC_SetPriority+0x4c>)
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	0112      	lsls	r2, r2, #4
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	440b      	add	r3, r1
 8004d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d48:	e00a      	b.n	8004d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	4908      	ldr	r1, [pc, #32]	; (8004d70 <__NVIC_SetPriority+0x50>)
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	3b04      	subs	r3, #4
 8004d58:	0112      	lsls	r2, r2, #4
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	761a      	strb	r2, [r3, #24]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	e000e100 	.word	0xe000e100
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <NVIC_EncodePriority>:
{
 8004d74:	b480      	push	{r7}
 8004d76:	b089      	sub	sp, #36	; 0x24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f1c3 0307 	rsb	r3, r3, #7
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	bf28      	it	cs
 8004d92:	2304      	movcs	r3, #4
 8004d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	2b06      	cmp	r3, #6
 8004d9c:	d902      	bls.n	8004da4 <NVIC_EncodePriority+0x30>
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3b03      	subs	r3, #3
 8004da2:	e000      	b.n	8004da6 <NVIC_EncodePriority+0x32>
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43da      	mvns	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	401a      	ands	r2, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc6:	43d9      	mvns	r1, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dcc:	4313      	orrs	r3, r2
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3724      	adds	r7, #36	; 0x24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff ff4c 	bl	8004c80 <__NVIC_SetPriorityGrouping>
}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e02:	f7ff ff61 	bl	8004cc8 <__NVIC_GetPriorityGrouping>
 8004e06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	6978      	ldr	r0, [r7, #20]
 8004e0e:	f7ff ffb1 	bl	8004d74 <NVIC_EncodePriority>
 8004e12:	4602      	mov	r2, r0
 8004e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff ff80 	bl	8004d20 <__NVIC_SetPriority>
}
 8004e20:	bf00      	nop
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff ff54 	bl	8004ce4 <__NVIC_EnableIRQ>
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e50:	f7ff fee6 	bl	8004c20 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e099      	b.n	8004f94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e80:	e00f      	b.n	8004ea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e82:	f7ff fecd 	bl	8004c20 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b05      	cmp	r3, #5
 8004e8e:	d908      	bls.n	8004ea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2203      	movs	r2, #3
 8004e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e078      	b.n	8004f94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e8      	bne.n	8004e82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4b38      	ldr	r3, [pc, #224]	; (8004f9c <HAL_DMA_Init+0x158>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d107      	bne.n	8004f0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	4313      	orrs	r3, r2
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0307 	bic.w	r3, r3, #7
 8004f22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d117      	bne.n	8004f66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00e      	beq.n	8004f66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fb01 	bl	8005550 <DMA_CheckFifoParam>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2240      	movs	r2, #64	; 0x40
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f62:	2301      	movs	r3, #1
 8004f64:	e016      	b.n	8004f94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fab8 	bl	80054e4 <DMA_CalcBaseAndBitshift>
 8004f74:	4603      	mov	r3, r0
 8004f76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7c:	223f      	movs	r2, #63	; 0x3f
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	f010803f 	.word	0xf010803f

08004fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_DMA_Start_IT+0x26>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e040      	b.n	8005048 <HAL_DMA_Start_IT+0xa8>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d12f      	bne.n	800503a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 fa4a 	bl	8005488 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff8:	223f      	movs	r2, #63	; 0x3f
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0216 	orr.w	r2, r2, #22
 800500e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0208 	orr.w	r2, r2, #8
 8005026:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e005      	b.n	8005046 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005042:	2302      	movs	r3, #2
 8005044:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005046:	7dfb      	ldrb	r3, [r7, #23]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800505e:	f7ff fddf 	bl	8004c20 <HAL_GetTick>
 8005062:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d008      	beq.n	8005082 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2280      	movs	r2, #128	; 0x80
 8005074:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e052      	b.n	8005128 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0216 	bic.w	r2, r2, #22
 8005090:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695a      	ldr	r2, [r3, #20]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <HAL_DMA_Abort+0x62>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0208 	bic.w	r2, r2, #8
 80050c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050d2:	e013      	b.n	80050fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050d4:	f7ff fda4 	bl	8004c20 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b05      	cmp	r3, #5
 80050e0:	d90c      	bls.n	80050fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2203      	movs	r2, #3
 80050ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e015      	b.n	8005128 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e4      	bne.n	80050d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510e:	223f      	movs	r2, #63	; 0x3f
 8005110:	409a      	lsls	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d004      	beq.n	800514e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2280      	movs	r2, #128	; 0x80
 8005148:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e00c      	b.n	8005168 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2205      	movs	r2, #5
 8005152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005180:	4b8e      	ldr	r3, [pc, #568]	; (80053bc <HAL_DMA_IRQHandler+0x248>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a8e      	ldr	r2, [pc, #568]	; (80053c0 <HAL_DMA_IRQHandler+0x24c>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	0a9b      	lsrs	r3, r3, #10
 800518c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005192:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519e:	2208      	movs	r2, #8
 80051a0:	409a      	lsls	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d01a      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d013      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0204 	bic.w	r2, r2, #4
 80051c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051cc:	2208      	movs	r2, #8
 80051ce:	409a      	lsls	r2, r3
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d8:	f043 0201 	orr.w	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e4:	2201      	movs	r2, #1
 80051e6:	409a      	lsls	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d012      	beq.n	8005216 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005202:	2201      	movs	r2, #1
 8005204:	409a      	lsls	r2, r3
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	f043 0202 	orr.w	r2, r3, #2
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521a:	2204      	movs	r2, #4
 800521c:	409a      	lsls	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4013      	ands	r3, r2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d012      	beq.n	800524c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00b      	beq.n	800524c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005238:	2204      	movs	r2, #4
 800523a:	409a      	lsls	r2, r3
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005244:	f043 0204 	orr.w	r2, r3, #4
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005250:	2210      	movs	r2, #16
 8005252:	409a      	lsls	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4013      	ands	r3, r2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d043      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d03c      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526e:	2210      	movs	r2, #16
 8005270:	409a      	lsls	r2, r3
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d018      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d108      	bne.n	80052a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d024      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	4798      	blx	r3
 80052a2:	e01f      	b.n	80052e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	4798      	blx	r3
 80052b4:	e016      	b.n	80052e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d107      	bne.n	80052d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0208 	bic.w	r2, r2, #8
 80052d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e8:	2220      	movs	r2, #32
 80052ea:	409a      	lsls	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 808f 	beq.w	8005414 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 8087 	beq.w	8005414 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530a:	2220      	movs	r2, #32
 800530c:	409a      	lsls	r2, r3
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b05      	cmp	r3, #5
 800531c:	d136      	bne.n	800538c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0216 	bic.w	r2, r2, #22
 800532c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800533c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <HAL_DMA_IRQHandler+0x1da>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534a:	2b00      	cmp	r3, #0
 800534c:	d007      	beq.n	800535e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0208 	bic.w	r2, r2, #8
 800535c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005362:	223f      	movs	r2, #63	; 0x3f
 8005364:	409a      	lsls	r2, r3
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537e:	2b00      	cmp	r3, #0
 8005380:	d07e      	beq.n	8005480 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	4798      	blx	r3
        }
        return;
 800538a:	e079      	b.n	8005480 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01d      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10d      	bne.n	80053c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d031      	beq.n	8005414 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	4798      	blx	r3
 80053b8:	e02c      	b.n	8005414 <HAL_DMA_IRQHandler+0x2a0>
 80053ba:	bf00      	nop
 80053bc:	200000a4 	.word	0x200000a4
 80053c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d023      	beq.n	8005414 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	4798      	blx	r3
 80053d4:	e01e      	b.n	8005414 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10f      	bne.n	8005404 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0210 	bic.w	r2, r2, #16
 80053f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005418:	2b00      	cmp	r3, #0
 800541a:	d032      	beq.n	8005482 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d022      	beq.n	800546e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2205      	movs	r2, #5
 800542c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	3301      	adds	r3, #1
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	429a      	cmp	r2, r3
 800544a:	d307      	bcc.n	800545c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f2      	bne.n	8005440 <HAL_DMA_IRQHandler+0x2cc>
 800545a:	e000      	b.n	800545e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800545c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	4798      	blx	r3
 800547e:	e000      	b.n	8005482 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005480:	bf00      	nop
    }
  }
}
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d108      	bne.n	80054c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054c6:	e007      	b.n	80054d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	60da      	str	r2, [r3, #12]
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	3b10      	subs	r3, #16
 80054f4:	4a14      	ldr	r2, [pc, #80]	; (8005548 <DMA_CalcBaseAndBitshift+0x64>)
 80054f6:	fba2 2303 	umull	r2, r3, r2, r3
 80054fa:	091b      	lsrs	r3, r3, #4
 80054fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054fe:	4a13      	ldr	r2, [pc, #76]	; (800554c <DMA_CalcBaseAndBitshift+0x68>)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b03      	cmp	r3, #3
 8005510:	d909      	bls.n	8005526 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800551a:	f023 0303 	bic.w	r3, r3, #3
 800551e:	1d1a      	adds	r2, r3, #4
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	659a      	str	r2, [r3, #88]	; 0x58
 8005524:	e007      	b.n	8005536 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	aaaaaaab 	.word	0xaaaaaaab
 800554c:	080100f8 	.word	0x080100f8

08005550 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d11f      	bne.n	80055aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b03      	cmp	r3, #3
 800556e:	d856      	bhi.n	800561e <DMA_CheckFifoParam+0xce>
 8005570:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <DMA_CheckFifoParam+0x28>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	08005589 	.word	0x08005589
 800557c:	0800559b 	.word	0x0800559b
 8005580:	08005589 	.word	0x08005589
 8005584:	0800561f 	.word	0x0800561f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d046      	beq.n	8005622 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005598:	e043      	b.n	8005622 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055a2:	d140      	bne.n	8005626 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055a8:	e03d      	b.n	8005626 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b2:	d121      	bne.n	80055f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d837      	bhi.n	800562a <DMA_CheckFifoParam+0xda>
 80055ba:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <DMA_CheckFifoParam+0x70>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055d1 	.word	0x080055d1
 80055c4:	080055d7 	.word	0x080055d7
 80055c8:	080055d1 	.word	0x080055d1
 80055cc:	080055e9 	.word	0x080055e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	73fb      	strb	r3, [r7, #15]
      break;
 80055d4:	e030      	b.n	8005638 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d025      	beq.n	800562e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055e6:	e022      	b.n	800562e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055f0:	d11f      	bne.n	8005632 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055f6:	e01c      	b.n	8005632 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d903      	bls.n	8005606 <DMA_CheckFifoParam+0xb6>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b03      	cmp	r3, #3
 8005602:	d003      	beq.n	800560c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005604:	e018      	b.n	8005638 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
      break;
 800560a:	e015      	b.n	8005638 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00e      	beq.n	8005636 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	73fb      	strb	r3, [r7, #15]
      break;
 800561c:	e00b      	b.n	8005636 <DMA_CheckFifoParam+0xe6>
      break;
 800561e:	bf00      	nop
 8005620:	e00a      	b.n	8005638 <DMA_CheckFifoParam+0xe8>
      break;
 8005622:	bf00      	nop
 8005624:	e008      	b.n	8005638 <DMA_CheckFifoParam+0xe8>
      break;
 8005626:	bf00      	nop
 8005628:	e006      	b.n	8005638 <DMA_CheckFifoParam+0xe8>
      break;
 800562a:	bf00      	nop
 800562c:	e004      	b.n	8005638 <DMA_CheckFifoParam+0xe8>
      break;
 800562e:	bf00      	nop
 8005630:	e002      	b.n	8005638 <DMA_CheckFifoParam+0xe8>
      break;   
 8005632:	bf00      	nop
 8005634:	e000      	b.n	8005638 <DMA_CheckFifoParam+0xe8>
      break;
 8005636:	bf00      	nop
    }
  } 
  
  return status; 
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop

08005648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005648:	b480      	push	{r7}
 800564a:	b089      	sub	sp, #36	; 0x24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800565a:	2300      	movs	r3, #0
 800565c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	e16b      	b.n	800593c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005664:	2201      	movs	r2, #1
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4013      	ands	r3, r2
 8005676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	429a      	cmp	r2, r3
 800567e:	f040 815a 	bne.w	8005936 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b01      	cmp	r3, #1
 800568c:	d005      	beq.n	800569a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005696:	2b02      	cmp	r3, #2
 8005698:	d130      	bne.n	80056fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	2203      	movs	r2, #3
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	43db      	mvns	r3, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4013      	ands	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056d0:	2201      	movs	r2, #1
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	091b      	lsrs	r3, r3, #4
 80056e6:	f003 0201 	and.w	r2, r3, #1
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	2b03      	cmp	r3, #3
 8005706:	d017      	beq.n	8005738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	2203      	movs	r2, #3
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4013      	ands	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4313      	orrs	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d123      	bne.n	800578c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	08da      	lsrs	r2, r3, #3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3208      	adds	r2, #8
 800574c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	220f      	movs	r2, #15
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	43db      	mvns	r3, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4013      	ands	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4313      	orrs	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	08da      	lsrs	r2, r3, #3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3208      	adds	r2, #8
 8005786:	69b9      	ldr	r1, [r7, #24]
 8005788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	2203      	movs	r2, #3
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4013      	ands	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 0203 	and.w	r2, r3, #3
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80b4 	beq.w	8005936 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	4b60      	ldr	r3, [pc, #384]	; (8005954 <HAL_GPIO_Init+0x30c>)
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	4a5f      	ldr	r2, [pc, #380]	; (8005954 <HAL_GPIO_Init+0x30c>)
 80057d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057dc:	6453      	str	r3, [r2, #68]	; 0x44
 80057de:	4b5d      	ldr	r3, [pc, #372]	; (8005954 <HAL_GPIO_Init+0x30c>)
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057ea:	4a5b      	ldr	r2, [pc, #364]	; (8005958 <HAL_GPIO_Init+0x310>)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	089b      	lsrs	r3, r3, #2
 80057f0:	3302      	adds	r3, #2
 80057f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	220f      	movs	r2, #15
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43db      	mvns	r3, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4013      	ands	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a52      	ldr	r2, [pc, #328]	; (800595c <HAL_GPIO_Init+0x314>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d02b      	beq.n	800586e <HAL_GPIO_Init+0x226>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a51      	ldr	r2, [pc, #324]	; (8005960 <HAL_GPIO_Init+0x318>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d025      	beq.n	800586a <HAL_GPIO_Init+0x222>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a50      	ldr	r2, [pc, #320]	; (8005964 <HAL_GPIO_Init+0x31c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d01f      	beq.n	8005866 <HAL_GPIO_Init+0x21e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a4f      	ldr	r2, [pc, #316]	; (8005968 <HAL_GPIO_Init+0x320>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d019      	beq.n	8005862 <HAL_GPIO_Init+0x21a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a4e      	ldr	r2, [pc, #312]	; (800596c <HAL_GPIO_Init+0x324>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d013      	beq.n	800585e <HAL_GPIO_Init+0x216>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a4d      	ldr	r2, [pc, #308]	; (8005970 <HAL_GPIO_Init+0x328>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00d      	beq.n	800585a <HAL_GPIO_Init+0x212>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a4c      	ldr	r2, [pc, #304]	; (8005974 <HAL_GPIO_Init+0x32c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <HAL_GPIO_Init+0x20e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a4b      	ldr	r2, [pc, #300]	; (8005978 <HAL_GPIO_Init+0x330>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d101      	bne.n	8005852 <HAL_GPIO_Init+0x20a>
 800584e:	2307      	movs	r3, #7
 8005850:	e00e      	b.n	8005870 <HAL_GPIO_Init+0x228>
 8005852:	2308      	movs	r3, #8
 8005854:	e00c      	b.n	8005870 <HAL_GPIO_Init+0x228>
 8005856:	2306      	movs	r3, #6
 8005858:	e00a      	b.n	8005870 <HAL_GPIO_Init+0x228>
 800585a:	2305      	movs	r3, #5
 800585c:	e008      	b.n	8005870 <HAL_GPIO_Init+0x228>
 800585e:	2304      	movs	r3, #4
 8005860:	e006      	b.n	8005870 <HAL_GPIO_Init+0x228>
 8005862:	2303      	movs	r3, #3
 8005864:	e004      	b.n	8005870 <HAL_GPIO_Init+0x228>
 8005866:	2302      	movs	r3, #2
 8005868:	e002      	b.n	8005870 <HAL_GPIO_Init+0x228>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_GPIO_Init+0x228>
 800586e:	2300      	movs	r3, #0
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	f002 0203 	and.w	r2, r2, #3
 8005876:	0092      	lsls	r2, r2, #2
 8005878:	4093      	lsls	r3, r2
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005880:	4935      	ldr	r1, [pc, #212]	; (8005958 <HAL_GPIO_Init+0x310>)
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	089b      	lsrs	r3, r3, #2
 8005886:	3302      	adds	r3, #2
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800588e:	4b3b      	ldr	r3, [pc, #236]	; (800597c <HAL_GPIO_Init+0x334>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	43db      	mvns	r3, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4013      	ands	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058b2:	4a32      	ldr	r2, [pc, #200]	; (800597c <HAL_GPIO_Init+0x334>)
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058b8:	4b30      	ldr	r3, [pc, #192]	; (800597c <HAL_GPIO_Init+0x334>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4013      	ands	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058dc:	4a27      	ldr	r2, [pc, #156]	; (800597c <HAL_GPIO_Init+0x334>)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058e2:	4b26      	ldr	r3, [pc, #152]	; (800597c <HAL_GPIO_Init+0x334>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	43db      	mvns	r3, r3
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	4013      	ands	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005906:	4a1d      	ldr	r2, [pc, #116]	; (800597c <HAL_GPIO_Init+0x334>)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800590c:	4b1b      	ldr	r3, [pc, #108]	; (800597c <HAL_GPIO_Init+0x334>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	43db      	mvns	r3, r3
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	4013      	ands	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005930:	4a12      	ldr	r2, [pc, #72]	; (800597c <HAL_GPIO_Init+0x334>)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3301      	adds	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	2b0f      	cmp	r3, #15
 8005940:	f67f ae90 	bls.w	8005664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	3724      	adds	r7, #36	; 0x24
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40023800 	.word	0x40023800
 8005958:	40013800 	.word	0x40013800
 800595c:	40020000 	.word	0x40020000
 8005960:	40020400 	.word	0x40020400
 8005964:	40020800 	.word	0x40020800
 8005968:	40020c00 	.word	0x40020c00
 800596c:	40021000 	.word	0x40021000
 8005970:	40021400 	.word	0x40021400
 8005974:	40021800 	.word	0x40021800
 8005978:	40021c00 	.word	0x40021c00
 800597c:	40013c00 	.word	0x40013c00

08005980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	807b      	strh	r3, [r7, #2]
 800598c:	4613      	mov	r3, r2
 800598e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005990:	787b      	ldrb	r3, [r7, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800599c:	e003      	b.n	80059a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	041a      	lsls	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	619a      	str	r2, [r3, #24]
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059c4:	887a      	ldrh	r2, [r7, #2]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4013      	ands	r3, r2
 80059ca:	041a      	lsls	r2, r3, #16
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	43d9      	mvns	r1, r3
 80059d0:	887b      	ldrh	r3, [r7, #2]
 80059d2:	400b      	ands	r3, r1
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	619a      	str	r2, [r3, #24]
}
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e03e      	b.n	8005a7a <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d106      	bne.n	8005a16 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7fe ff8d 	bl	8004930 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4610      	mov	r0, r2
 8005a22:	f003 fda1 	bl	8009568 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6818      	ldr	r0, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	f003 fde5 	bl	8009600 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	f003 fe12 	bl	800966a <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b10      	cmp	r3, #16
 8005a4c:	d108      	bne.n	8005a60 <HAL_NAND_Init+0x7a>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f042 0204 	orr.w	r2, r2, #4
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	e007      	b.n	8005a70 <HAL_NAND_Init+0x8a>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6a1a      	ldr	r2, [r3, #32]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0204 	orr.w	r2, r2, #4
 8005a6e:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b10      	cmp	r3, #16
 8005a90:	d10a      	bne.n	8005aa8 <HAL_NAND_IRQHandler+0x26>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	bf0c      	ite	eq
 8005aa0:	2301      	moveq	r3, #1
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	e009      	b.n	8005abc <HAL_NAND_IRQHandler+0x3a>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	bf0c      	ite	eq
 8005ab6:	2301      	moveq	r3, #1
 8005ab8:	2300      	movne	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d017      	beq.n	8005af0 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f8b2 	bl	8005c2a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b10      	cmp	r3, #16
 8005acc:	d108      	bne.n	8005ae0 <HAL_NAND_IRQHandler+0x5e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	605a      	str	r2, [r3, #4]
 8005ade:	e007      	b.n	8005af0 <HAL_NAND_IRQHandler+0x6e>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d10a      	bne.n	8005b0e <HAL_NAND_IRQHandler+0x8c>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	bf0c      	ite	eq
 8005b06:	2301      	moveq	r3, #1
 8005b08:	2300      	movne	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	e009      	b.n	8005b22 <HAL_NAND_IRQHandler+0xa0>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	bf0c      	ite	eq
 8005b1c:	2301      	moveq	r3, #1
 8005b1e:	2300      	movne	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d017      	beq.n	8005b56 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f87f 	bl	8005c2a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b10      	cmp	r3, #16
 8005b32:	d108      	bne.n	8005b46 <HAL_NAND_IRQHandler+0xc4>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0202 	bic.w	r2, r2, #2
 8005b42:	605a      	str	r2, [r3, #4]
 8005b44:	e007      	b.n	8005b56 <HAL_NAND_IRQHandler+0xd4>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0202 	bic.w	r2, r2, #2
 8005b54:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d10a      	bne.n	8005b74 <HAL_NAND_IRQHandler+0xf2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	bf0c      	ite	eq
 8005b6c:	2301      	moveq	r3, #1
 8005b6e:	2300      	movne	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	e009      	b.n	8005b88 <HAL_NAND_IRQHandler+0x106>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	bf0c      	ite	eq
 8005b82:	2301      	moveq	r3, #1
 8005b84:	2300      	movne	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d017      	beq.n	8005bbc <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f84c 	bl	8005c2a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b10      	cmp	r3, #16
 8005b98:	d108      	bne.n	8005bac <HAL_NAND_IRQHandler+0x12a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0204 	bic.w	r2, r2, #4
 8005ba8:	605a      	str	r2, [r3, #4]
 8005baa:	e007      	b.n	8005bbc <HAL_NAND_IRQHandler+0x13a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0204 	bic.w	r2, r2, #4
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d10a      	bne.n	8005bda <HAL_NAND_IRQHandler+0x158>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bce:	2b40      	cmp	r3, #64	; 0x40
 8005bd0:	bf0c      	ite	eq
 8005bd2:	2301      	moveq	r3, #1
 8005bd4:	2300      	movne	r3, #0
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	e009      	b.n	8005bee <HAL_NAND_IRQHandler+0x16c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	bf0c      	ite	eq
 8005be8:	2301      	moveq	r3, #1
 8005bea:	2300      	movne	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d017      	beq.n	8005c22 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f819 	bl	8005c2a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d108      	bne.n	8005c12 <HAL_NAND_IRQHandler+0x190>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c0e:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8005c10:	e007      	b.n	8005c22 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c20:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005c22:	bf00      	nop
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer,
                                         uint32_t NumPageToWrite)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b08c      	sub	sp, #48	; 0x30
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d101      	bne.n	8005c68 <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
 8005c66:	e13e      	b.n	8005ee6 <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	f040 8137 	bne.w	8005ee4 <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_NAND_Write_Page_8b+0x46>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e130      	b.n	8005ee6 <HAL_NAND_Write_Page_8b+0x2a8>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    else
    {
      deviceaddress = NAND_DEVICE2;
    }
#else
    deviceaddress = NAND_DEVICE;
 8005c94:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005c98:	61bb      	str	r3, [r7, #24]
#endif

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	889b      	ldrh	r3, [r3, #4]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	885b      	ldrh	r3, [r3, #2]
 8005caa:	4618      	mov	r0, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	fb00 f303 	mul.w	r3, r0, r3
 8005cb4:	4413      	add	r3, r2
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	440b      	add	r3, r1
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005cc2:	e0f8      	b.n	8005eb6 <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cca:	2200      	movs	r2, #0
 8005ccc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cce:	f3bf 8f4f 	dsb	sy
}
 8005cd2:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cda:	2280      	movs	r2, #128	; 0x80
 8005cdc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cde:	f3bf 8f4f 	dsb	sy
}
 8005ce2:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cec:	d848      	bhi.n	8005d80 <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cf6:	fb02 f303 	mul.w	r3, r2, r3
 8005cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfe:	d21a      	bcs.n	8005d36 <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d0a:	f3bf 8f4f 	dsb	sy
}
 8005d0e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d1c:	f3bf 8f4f 	dsb	sy
}
 8005d20:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	0a1a      	lsrs	r2, r3, #8
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d30:	f3bf 8f4f 	dsb	sy
}
 8005d34:	e07d      	b.n	8005e32 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d40:	f3bf 8f4f 	dsb	sy
}
 8005d44:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d52:	f3bf 8f4f 	dsb	sy
}
 8005d56:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	0a1a      	lsrs	r2, r3, #8
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d66:	f3bf 8f4f 	dsb	sy
}
 8005d6a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	0c1a      	lsrs	r2, r3, #16
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d7a:	f3bf 8f4f 	dsb	sy
}
 8005d7e:	e058      	b.n	8005e32 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d88:	fb02 f303 	mul.w	r3, r2, r3
 8005d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d90:	d222      	bcs.n	8005dd8 <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d9c:	f3bf 8f4f 	dsb	sy
}
 8005da0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da8:	2200      	movs	r2, #0
 8005daa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dac:	f3bf 8f4f 	dsb	sy
}
 8005db0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dbe:	f3bf 8f4f 	dsb	sy
}
 8005dc2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	0a1a      	lsrs	r2, r3, #8
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dd2:	f3bf 8f4f 	dsb	sy
}
 8005dd6:	e02c      	b.n	8005e32 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005de2:	f3bf 8f4f 	dsb	sy
}
 8005de6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dee:	2200      	movs	r2, #0
 8005df0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005df2:	f3bf 8f4f 	dsb	sy
}
 8005df6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e04:	f3bf 8f4f 	dsb	sy
}
 8005e08:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	0a1a      	lsrs	r2, r3, #8
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e18:	f3bf 8f4f 	dsb	sy
}
 8005e1c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	0c1a      	lsrs	r2, r3, #16
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e2c:	f3bf 8f4f 	dsb	sy
}
 8005e30:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005e32:	2300      	movs	r3, #0
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e36:	e00c      	b.n	8005e52 <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	7812      	ldrb	r2, [r2, #0]
 8005e3e:	701a      	strb	r2, [r3, #0]
        buff++;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	3301      	adds	r3, #1
 8005e44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e46:	f3bf 8f4f 	dsb	sy
}
 8005e4a:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	3301      	adds	r3, #1
 8005e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d3ed      	bcc.n	8005e38 <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e62:	2210      	movs	r2, #16
 8005e64:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e66:	f3bf 8f4f 	dsb	sy
}
 8005e6a:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8005e6c:	f7fe fed8 	bl	8004c20 <HAL_GetTick>
 8005e70:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005e72:	e011      	b.n	8005e98 <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8005e74:	f7fe fed4 	bl	8004c20 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e82:	d909      	bls.n	8005e98 <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2203      	movs	r2, #3
 8005e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e026      	b.n	8005ee6 <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f85f 	bl	8005f5c <HAL_NAND_Read_Status>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	d1e7      	bne.n	8005e74 <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Decrement pages to write */
      nbpages--;
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d009      	beq.n	8005ed0 <HAL_NAND_Write_Page_8b+0x292>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ec4:	fb02 f303 	mul.w	r3, r2, r3
 8005ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	f4ff aefa 	bcc.w	8005cc4 <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3730      	adds	r7, #48	; 0x30
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_NAND_ECC_Disable>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_ECC_Disable(NAND_HandleTypeDef *hnand)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d101      	bne.n	8005f06 <HAL_NAND_ECC_Disable+0x18>
  {
    return HAL_BUSY;
 8005f02:	2302      	movs	r3, #2
 8005f04:	e018      	b.n	8005f38 <HAL_NAND_ECC_Disable+0x4a>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d111      	bne.n	8005f36 <HAL_NAND_ECC_Disable+0x48>
  {
    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable ECC feature */
    (void)FMC_NAND_ECC_Disable(hnand->Instance, hnand->Init.NandBank);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	4619      	mov	r1, r3
 8005f24:	4610      	mov	r0, r2
 8005f26:	f003 fbd5 	bl	80096d4 <FSMC_NAND_ECC_Disable>

    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e000      	b.n	8005f38 <HAL_NAND_ECC_Disable+0x4a>
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  return hnand->State;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f4e:	b2db      	uxtb	r3, r3
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 8005f64:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005f68:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f70:	2270      	movs	r2, #112	; 0x70
 8005f72:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e007      	b.n	8005f9a <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8005f94:	2340      	movs	r3, #64	; 0x40
 8005f96:	e000      	b.n	8005f9a <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8005f98:	2300      	movs	r3, #0
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
	...

08005fa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e267      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d075      	beq.n	80060b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fc6:	4b88      	ldr	r3, [pc, #544]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 030c 	and.w	r3, r3, #12
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d00c      	beq.n	8005fec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fd2:	4b85      	ldr	r3, [pc, #532]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d112      	bne.n	8006004 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fde:	4b82      	ldr	r3, [pc, #520]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fea:	d10b      	bne.n	8006004 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fec:	4b7e      	ldr	r3, [pc, #504]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d05b      	beq.n	80060b0 <HAL_RCC_OscConfig+0x108>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d157      	bne.n	80060b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e242      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600c:	d106      	bne.n	800601c <HAL_RCC_OscConfig+0x74>
 800600e:	4b76      	ldr	r3, [pc, #472]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a75      	ldr	r2, [pc, #468]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	e01d      	b.n	8006058 <HAL_RCC_OscConfig+0xb0>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006024:	d10c      	bne.n	8006040 <HAL_RCC_OscConfig+0x98>
 8006026:	4b70      	ldr	r3, [pc, #448]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a6f      	ldr	r2, [pc, #444]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 800602c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	4b6d      	ldr	r3, [pc, #436]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a6c      	ldr	r2, [pc, #432]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	e00b      	b.n	8006058 <HAL_RCC_OscConfig+0xb0>
 8006040:	4b69      	ldr	r3, [pc, #420]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a68      	ldr	r2, [pc, #416]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	4b66      	ldr	r3, [pc, #408]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a65      	ldr	r2, [pc, #404]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d013      	beq.n	8006088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006060:	f7fe fdde 	bl	8004c20 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006068:	f7fe fdda 	bl	8004c20 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b64      	cmp	r3, #100	; 0x64
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e207      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607a:	4b5b      	ldr	r3, [pc, #364]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0f0      	beq.n	8006068 <HAL_RCC_OscConfig+0xc0>
 8006086:	e014      	b.n	80060b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006088:	f7fe fdca 	bl	8004c20 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006090:	f7fe fdc6 	bl	8004c20 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b64      	cmp	r3, #100	; 0x64
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e1f3      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060a2:	4b51      	ldr	r3, [pc, #324]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f0      	bne.n	8006090 <HAL_RCC_OscConfig+0xe8>
 80060ae:	e000      	b.n	80060b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d063      	beq.n	8006186 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060be:	4b4a      	ldr	r3, [pc, #296]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00b      	beq.n	80060e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ca:	4b47      	ldr	r3, [pc, #284]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d11c      	bne.n	8006110 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060d6:	4b44      	ldr	r3, [pc, #272]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d116      	bne.n	8006110 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060e2:	4b41      	ldr	r3, [pc, #260]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <HAL_RCC_OscConfig+0x152>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d001      	beq.n	80060fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e1c7      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060fa:	4b3b      	ldr	r3, [pc, #236]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	4937      	ldr	r1, [pc, #220]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 800610a:	4313      	orrs	r3, r2
 800610c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800610e:	e03a      	b.n	8006186 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d020      	beq.n	800615a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006118:	4b34      	ldr	r3, [pc, #208]	; (80061ec <HAL_RCC_OscConfig+0x244>)
 800611a:	2201      	movs	r2, #1
 800611c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611e:	f7fe fd7f 	bl	8004c20 <HAL_GetTick>
 8006122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006124:	e008      	b.n	8006138 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006126:	f7fe fd7b 	bl	8004c20 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b02      	cmp	r3, #2
 8006132:	d901      	bls.n	8006138 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e1a8      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006138:	4b2b      	ldr	r3, [pc, #172]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0f0      	beq.n	8006126 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006144:	4b28      	ldr	r3, [pc, #160]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	4925      	ldr	r1, [pc, #148]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006154:	4313      	orrs	r3, r2
 8006156:	600b      	str	r3, [r1, #0]
 8006158:	e015      	b.n	8006186 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800615a:	4b24      	ldr	r3, [pc, #144]	; (80061ec <HAL_RCC_OscConfig+0x244>)
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006160:	f7fe fd5e 	bl	8004c20 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006168:	f7fe fd5a 	bl	8004c20 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e187      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800617a:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f0      	bne.n	8006168 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d036      	beq.n	8006200 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d016      	beq.n	80061c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800619a:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <HAL_RCC_OscConfig+0x248>)
 800619c:	2201      	movs	r2, #1
 800619e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a0:	f7fe fd3e 	bl	8004c20 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061a8:	f7fe fd3a 	bl	8004c20 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e167      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ba:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80061bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0f0      	beq.n	80061a8 <HAL_RCC_OscConfig+0x200>
 80061c6:	e01b      	b.n	8006200 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c8:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <HAL_RCC_OscConfig+0x248>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ce:	f7fe fd27 	bl	8004c20 <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061d4:	e00e      	b.n	80061f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061d6:	f7fe fd23 	bl	8004c20 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d907      	bls.n	80061f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e150      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
 80061e8:	40023800 	.word	0x40023800
 80061ec:	42470000 	.word	0x42470000
 80061f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061f4:	4b88      	ldr	r3, [pc, #544]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80061f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1ea      	bne.n	80061d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8097 	beq.w	800633c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800620e:	2300      	movs	r3, #0
 8006210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006212:	4b81      	ldr	r3, [pc, #516]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10f      	bne.n	800623e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800621e:	2300      	movs	r3, #0
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	4b7d      	ldr	r3, [pc, #500]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	4a7c      	ldr	r2, [pc, #496]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622c:	6413      	str	r3, [r2, #64]	; 0x40
 800622e:	4b7a      	ldr	r3, [pc, #488]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006236:	60bb      	str	r3, [r7, #8]
 8006238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623e:	4b77      	ldr	r3, [pc, #476]	; (800641c <HAL_RCC_OscConfig+0x474>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d118      	bne.n	800627c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800624a:	4b74      	ldr	r3, [pc, #464]	; (800641c <HAL_RCC_OscConfig+0x474>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a73      	ldr	r2, [pc, #460]	; (800641c <HAL_RCC_OscConfig+0x474>)
 8006250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006256:	f7fe fce3 	bl	8004c20 <HAL_GetTick>
 800625a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625c:	e008      	b.n	8006270 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800625e:	f7fe fcdf 	bl	8004c20 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d901      	bls.n	8006270 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e10c      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006270:	4b6a      	ldr	r3, [pc, #424]	; (800641c <HAL_RCC_OscConfig+0x474>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0f0      	beq.n	800625e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d106      	bne.n	8006292 <HAL_RCC_OscConfig+0x2ea>
 8006284:	4b64      	ldr	r3, [pc, #400]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006288:	4a63      	ldr	r2, [pc, #396]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	6713      	str	r3, [r2, #112]	; 0x70
 8006290:	e01c      	b.n	80062cc <HAL_RCC_OscConfig+0x324>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	2b05      	cmp	r3, #5
 8006298:	d10c      	bne.n	80062b4 <HAL_RCC_OscConfig+0x30c>
 800629a:	4b5f      	ldr	r3, [pc, #380]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	4a5e      	ldr	r2, [pc, #376]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062a0:	f043 0304 	orr.w	r3, r3, #4
 80062a4:	6713      	str	r3, [r2, #112]	; 0x70
 80062a6:	4b5c      	ldr	r3, [pc, #368]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	4a5b      	ldr	r2, [pc, #364]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062ac:	f043 0301 	orr.w	r3, r3, #1
 80062b0:	6713      	str	r3, [r2, #112]	; 0x70
 80062b2:	e00b      	b.n	80062cc <HAL_RCC_OscConfig+0x324>
 80062b4:	4b58      	ldr	r3, [pc, #352]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b8:	4a57      	ldr	r2, [pc, #348]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	6713      	str	r3, [r2, #112]	; 0x70
 80062c0:	4b55      	ldr	r3, [pc, #340]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c4:	4a54      	ldr	r2, [pc, #336]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062c6:	f023 0304 	bic.w	r3, r3, #4
 80062ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d015      	beq.n	8006300 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d4:	f7fe fca4 	bl	8004c20 <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062da:	e00a      	b.n	80062f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062dc:	f7fe fca0 	bl	8004c20 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e0cb      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f2:	4b49      	ldr	r3, [pc, #292]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0ee      	beq.n	80062dc <HAL_RCC_OscConfig+0x334>
 80062fe:	e014      	b.n	800632a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006300:	f7fe fc8e 	bl	8004c20 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006306:	e00a      	b.n	800631e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006308:	f7fe fc8a 	bl	8004c20 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	; 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e0b5      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800631e:	4b3e      	ldr	r3, [pc, #248]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1ee      	bne.n	8006308 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d105      	bne.n	800633c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006330:	4b39      	ldr	r3, [pc, #228]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	4a38      	ldr	r2, [pc, #224]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800633a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80a1 	beq.w	8006488 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006346:	4b34      	ldr	r3, [pc, #208]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 030c 	and.w	r3, r3, #12
 800634e:	2b08      	cmp	r3, #8
 8006350:	d05c      	beq.n	800640c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d141      	bne.n	80063de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800635a:	4b31      	ldr	r3, [pc, #196]	; (8006420 <HAL_RCC_OscConfig+0x478>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006360:	f7fe fc5e 	bl	8004c20 <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006368:	f7fe fc5a 	bl	8004c20 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e087      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800637a:	4b27      	ldr	r3, [pc, #156]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f0      	bne.n	8006368 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69da      	ldr	r2, [r3, #28]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	019b      	lsls	r3, r3, #6
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	3b01      	subs	r3, #1
 80063a0:	041b      	lsls	r3, r3, #16
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	061b      	lsls	r3, r3, #24
 80063aa:	491b      	ldr	r1, [pc, #108]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063b0:	4b1b      	ldr	r3, [pc, #108]	; (8006420 <HAL_RCC_OscConfig+0x478>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b6:	f7fe fc33 	bl	8004c20 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063be:	f7fe fc2f 	bl	8004c20 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e05c      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d0:	4b11      	ldr	r3, [pc, #68]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0f0      	beq.n	80063be <HAL_RCC_OscConfig+0x416>
 80063dc:	e054      	b.n	8006488 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063de:	4b10      	ldr	r3, [pc, #64]	; (8006420 <HAL_RCC_OscConfig+0x478>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e4:	f7fe fc1c 	bl	8004c20 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fe fc18 	bl	8004c20 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e045      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fe:	4b06      	ldr	r3, [pc, #24]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0x444>
 800640a:	e03d      	b.n	8006488 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d107      	bne.n	8006424 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e038      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
 8006418:	40023800 	.word	0x40023800
 800641c:	40007000 	.word	0x40007000
 8006420:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006424:	4b1b      	ldr	r3, [pc, #108]	; (8006494 <HAL_RCC_OscConfig+0x4ec>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d028      	beq.n	8006484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800643c:	429a      	cmp	r2, r3
 800643e:	d121      	bne.n	8006484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644a:	429a      	cmp	r2, r3
 800644c:	d11a      	bne.n	8006484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006454:	4013      	ands	r3, r2
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800645a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800645c:	4293      	cmp	r3, r2
 800645e:	d111      	bne.n	8006484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	3b01      	subs	r3, #1
 800646e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006470:	429a      	cmp	r2, r3
 8006472:	d107      	bne.n	8006484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006480:	429a      	cmp	r2, r3
 8006482:	d001      	beq.n	8006488 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40023800 	.word	0x40023800

08006498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e0cc      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064ac:	4b68      	ldr	r3, [pc, #416]	; (8006650 <HAL_RCC_ClockConfig+0x1b8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d90c      	bls.n	80064d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ba:	4b65      	ldr	r3, [pc, #404]	; (8006650 <HAL_RCC_ClockConfig+0x1b8>)
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c2:	4b63      	ldr	r3, [pc, #396]	; (8006650 <HAL_RCC_ClockConfig+0x1b8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d001      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0b8      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d020      	beq.n	8006522 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064ec:	4b59      	ldr	r3, [pc, #356]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	4a58      	ldr	r2, [pc, #352]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006504:	4b53      	ldr	r3, [pc, #332]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	4a52      	ldr	r2, [pc, #328]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 800650a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800650e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006510:	4b50      	ldr	r3, [pc, #320]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	494d      	ldr	r1, [pc, #308]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	4313      	orrs	r3, r2
 8006520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d044      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d107      	bne.n	8006546 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006536:	4b47      	ldr	r3, [pc, #284]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d119      	bne.n	8006576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e07f      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d003      	beq.n	8006556 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006552:	2b03      	cmp	r3, #3
 8006554:	d107      	bne.n	8006566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006556:	4b3f      	ldr	r3, [pc, #252]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e06f      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006566:	4b3b      	ldr	r3, [pc, #236]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e067      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006576:	4b37      	ldr	r3, [pc, #220]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f023 0203 	bic.w	r2, r3, #3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	4934      	ldr	r1, [pc, #208]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006584:	4313      	orrs	r3, r2
 8006586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006588:	f7fe fb4a 	bl	8004c20 <HAL_GetTick>
 800658c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658e:	e00a      	b.n	80065a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006590:	f7fe fb46 	bl	8004c20 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f241 3288 	movw	r2, #5000	; 0x1388
 800659e:	4293      	cmp	r3, r2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e04f      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065a6:	4b2b      	ldr	r3, [pc, #172]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 020c 	and.w	r2, r3, #12
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d1eb      	bne.n	8006590 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065b8:	4b25      	ldr	r3, [pc, #148]	; (8006650 <HAL_RCC_ClockConfig+0x1b8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d20c      	bcs.n	80065e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c6:	4b22      	ldr	r3, [pc, #136]	; (8006650 <HAL_RCC_ClockConfig+0x1b8>)
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ce:	4b20      	ldr	r3, [pc, #128]	; (8006650 <HAL_RCC_ClockConfig+0x1b8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d001      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e032      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065ec:	4b19      	ldr	r3, [pc, #100]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	4916      	ldr	r1, [pc, #88]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800660a:	4b12      	ldr	r3, [pc, #72]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	490e      	ldr	r1, [pc, #56]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 800661a:	4313      	orrs	r3, r2
 800661c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800661e:	f000 f821 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 8006622:	4602      	mov	r2, r0
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	091b      	lsrs	r3, r3, #4
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	490a      	ldr	r1, [pc, #40]	; (8006658 <HAL_RCC_ClockConfig+0x1c0>)
 8006630:	5ccb      	ldrb	r3, [r1, r3]
 8006632:	fa22 f303 	lsr.w	r3, r2, r3
 8006636:	4a09      	ldr	r2, [pc, #36]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 8006638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800663a:	4b09      	ldr	r3, [pc, #36]	; (8006660 <HAL_RCC_ClockConfig+0x1c8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe f980 	bl	8004944 <HAL_InitTick>

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40023c00 	.word	0x40023c00
 8006654:	40023800 	.word	0x40023800
 8006658:	080100e0 	.word	0x080100e0
 800665c:	200000a4 	.word	0x200000a4
 8006660:	200000a8 	.word	0x200000a8

08006664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006668:	b094      	sub	sp, #80	; 0x50
 800666a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	647b      	str	r3, [r7, #68]	; 0x44
 8006670:	2300      	movs	r3, #0
 8006672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006674:	2300      	movs	r3, #0
 8006676:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800667c:	4b79      	ldr	r3, [pc, #484]	; (8006864 <HAL_RCC_GetSysClockFreq+0x200>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 030c 	and.w	r3, r3, #12
 8006684:	2b08      	cmp	r3, #8
 8006686:	d00d      	beq.n	80066a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006688:	2b08      	cmp	r3, #8
 800668a:	f200 80e1 	bhi.w	8006850 <HAL_RCC_GetSysClockFreq+0x1ec>
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <HAL_RCC_GetSysClockFreq+0x34>
 8006692:	2b04      	cmp	r3, #4
 8006694:	d003      	beq.n	800669e <HAL_RCC_GetSysClockFreq+0x3a>
 8006696:	e0db      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006698:	4b73      	ldr	r3, [pc, #460]	; (8006868 <HAL_RCC_GetSysClockFreq+0x204>)
 800669a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800669c:	e0db      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800669e:	4b73      	ldr	r3, [pc, #460]	; (800686c <HAL_RCC_GetSysClockFreq+0x208>)
 80066a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066a2:	e0d8      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066a4:	4b6f      	ldr	r3, [pc, #444]	; (8006864 <HAL_RCC_GetSysClockFreq+0x200>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066ae:	4b6d      	ldr	r3, [pc, #436]	; (8006864 <HAL_RCC_GetSysClockFreq+0x200>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d063      	beq.n	8006782 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ba:	4b6a      	ldr	r3, [pc, #424]	; (8006864 <HAL_RCC_GetSysClockFreq+0x200>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	099b      	lsrs	r3, r3, #6
 80066c0:	2200      	movs	r2, #0
 80066c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80066c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066cc:	633b      	str	r3, [r7, #48]	; 0x30
 80066ce:	2300      	movs	r3, #0
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
 80066d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80066d6:	4622      	mov	r2, r4
 80066d8:	462b      	mov	r3, r5
 80066da:	f04f 0000 	mov.w	r0, #0
 80066de:	f04f 0100 	mov.w	r1, #0
 80066e2:	0159      	lsls	r1, r3, #5
 80066e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066e8:	0150      	lsls	r0, r2, #5
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4621      	mov	r1, r4
 80066f0:	1a51      	subs	r1, r2, r1
 80066f2:	6139      	str	r1, [r7, #16]
 80066f4:	4629      	mov	r1, r5
 80066f6:	eb63 0301 	sbc.w	r3, r3, r1
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006708:	4659      	mov	r1, fp
 800670a:	018b      	lsls	r3, r1, #6
 800670c:	4651      	mov	r1, sl
 800670e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006712:	4651      	mov	r1, sl
 8006714:	018a      	lsls	r2, r1, #6
 8006716:	4651      	mov	r1, sl
 8006718:	ebb2 0801 	subs.w	r8, r2, r1
 800671c:	4659      	mov	r1, fp
 800671e:	eb63 0901 	sbc.w	r9, r3, r1
 8006722:	f04f 0200 	mov.w	r2, #0
 8006726:	f04f 0300 	mov.w	r3, #0
 800672a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800672e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006736:	4690      	mov	r8, r2
 8006738:	4699      	mov	r9, r3
 800673a:	4623      	mov	r3, r4
 800673c:	eb18 0303 	adds.w	r3, r8, r3
 8006740:	60bb      	str	r3, [r7, #8]
 8006742:	462b      	mov	r3, r5
 8006744:	eb49 0303 	adc.w	r3, r9, r3
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006756:	4629      	mov	r1, r5
 8006758:	024b      	lsls	r3, r1, #9
 800675a:	4621      	mov	r1, r4
 800675c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006760:	4621      	mov	r1, r4
 8006762:	024a      	lsls	r2, r1, #9
 8006764:	4610      	mov	r0, r2
 8006766:	4619      	mov	r1, r3
 8006768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676a:	2200      	movs	r2, #0
 800676c:	62bb      	str	r3, [r7, #40]	; 0x28
 800676e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006770:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006774:	f7fa f8da 	bl	800092c <__aeabi_uldivmod>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4613      	mov	r3, r2
 800677e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006780:	e058      	b.n	8006834 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006782:	4b38      	ldr	r3, [pc, #224]	; (8006864 <HAL_RCC_GetSysClockFreq+0x200>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	099b      	lsrs	r3, r3, #6
 8006788:	2200      	movs	r2, #0
 800678a:	4618      	mov	r0, r3
 800678c:	4611      	mov	r1, r2
 800678e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006792:	623b      	str	r3, [r7, #32]
 8006794:	2300      	movs	r3, #0
 8006796:	627b      	str	r3, [r7, #36]	; 0x24
 8006798:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800679c:	4642      	mov	r2, r8
 800679e:	464b      	mov	r3, r9
 80067a0:	f04f 0000 	mov.w	r0, #0
 80067a4:	f04f 0100 	mov.w	r1, #0
 80067a8:	0159      	lsls	r1, r3, #5
 80067aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067ae:	0150      	lsls	r0, r2, #5
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4641      	mov	r1, r8
 80067b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80067ba:	4649      	mov	r1, r9
 80067bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067d4:	ebb2 040a 	subs.w	r4, r2, sl
 80067d8:	eb63 050b 	sbc.w	r5, r3, fp
 80067dc:	f04f 0200 	mov.w	r2, #0
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	00eb      	lsls	r3, r5, #3
 80067e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ea:	00e2      	lsls	r2, r4, #3
 80067ec:	4614      	mov	r4, r2
 80067ee:	461d      	mov	r5, r3
 80067f0:	4643      	mov	r3, r8
 80067f2:	18e3      	adds	r3, r4, r3
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	464b      	mov	r3, r9
 80067f8:	eb45 0303 	adc.w	r3, r5, r3
 80067fc:	607b      	str	r3, [r7, #4]
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	e9d7 4500 	ldrd	r4, r5, [r7]
 800680a:	4629      	mov	r1, r5
 800680c:	028b      	lsls	r3, r1, #10
 800680e:	4621      	mov	r1, r4
 8006810:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006814:	4621      	mov	r1, r4
 8006816:	028a      	lsls	r2, r1, #10
 8006818:	4610      	mov	r0, r2
 800681a:	4619      	mov	r1, r3
 800681c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800681e:	2200      	movs	r2, #0
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	61fa      	str	r2, [r7, #28]
 8006824:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006828:	f7fa f880 	bl	800092c <__aeabi_uldivmod>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4613      	mov	r3, r2
 8006832:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006834:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <HAL_RCC_GetSysClockFreq+0x200>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	0c1b      	lsrs	r3, r3, #16
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	3301      	adds	r3, #1
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006844:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006848:	fbb2 f3f3 	udiv	r3, r2, r3
 800684c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800684e:	e002      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006850:	4b05      	ldr	r3, [pc, #20]	; (8006868 <HAL_RCC_GetSysClockFreq+0x204>)
 8006852:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006858:	4618      	mov	r0, r3
 800685a:	3750      	adds	r7, #80	; 0x50
 800685c:	46bd      	mov	sp, r7
 800685e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006862:	bf00      	nop
 8006864:	40023800 	.word	0x40023800
 8006868:	00f42400 	.word	0x00f42400
 800686c:	007a1200 	.word	0x007a1200

08006870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006874:	4b03      	ldr	r3, [pc, #12]	; (8006884 <HAL_RCC_GetHCLKFreq+0x14>)
 8006876:	681b      	ldr	r3, [r3, #0]
}
 8006878:	4618      	mov	r0, r3
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	200000a4 	.word	0x200000a4

08006888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800688c:	f7ff fff0 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 8006890:	4602      	mov	r2, r0
 8006892:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	0a9b      	lsrs	r3, r3, #10
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	4903      	ldr	r1, [pc, #12]	; (80068ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800689e:	5ccb      	ldrb	r3, [r1, r3]
 80068a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40023800 	.word	0x40023800
 80068ac:	080100f0 	.word	0x080100f0

080068b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068b4:	f7ff ffdc 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 80068b8:	4602      	mov	r2, r0
 80068ba:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	0b5b      	lsrs	r3, r3, #13
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	4903      	ldr	r1, [pc, #12]	; (80068d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068c6:	5ccb      	ldrb	r3, [r1, r3]
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40023800 	.word	0x40023800
 80068d4:	080100f0 	.word	0x080100f0

080068d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	220f      	movs	r2, #15
 80068e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068e8:	4b12      	ldr	r3, [pc, #72]	; (8006934 <HAL_RCC_GetClockConfig+0x5c>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f003 0203 	and.w	r2, r3, #3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80068f4:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <HAL_RCC_GetClockConfig+0x5c>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006900:	4b0c      	ldr	r3, [pc, #48]	; (8006934 <HAL_RCC_GetClockConfig+0x5c>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800690c:	4b09      	ldr	r3, [pc, #36]	; (8006934 <HAL_RCC_GetClockConfig+0x5c>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	08db      	lsrs	r3, r3, #3
 8006912:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800691a:	4b07      	ldr	r3, [pc, #28]	; (8006938 <HAL_RCC_GetClockConfig+0x60>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0207 	and.w	r2, r3, #7
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	601a      	str	r2, [r3, #0]
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40023800 	.word	0x40023800
 8006938:	40023c00 	.word	0x40023c00

0800693c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	d105      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006960:	2b00      	cmp	r3, #0
 8006962:	d035      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006964:	4b62      	ldr	r3, [pc, #392]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800696a:	f7fe f959 	bl	8004c20 <HAL_GetTick>
 800696e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006970:	e008      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006972:	f7fe f955 	bl	8004c20 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e0b0      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006984:	4b5b      	ldr	r3, [pc, #364]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f0      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	019a      	lsls	r2, r3, #6
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	071b      	lsls	r3, r3, #28
 800699c:	4955      	ldr	r1, [pc, #340]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069a4:	4b52      	ldr	r3, [pc, #328]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069aa:	f7fe f939 	bl	8004c20 <HAL_GetTick>
 80069ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069b0:	e008      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069b2:	f7fe f935 	bl	8004c20 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e090      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069c4:	4b4b      	ldr	r3, [pc, #300]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0f0      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8083 	beq.w	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	4b44      	ldr	r3, [pc, #272]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	4a43      	ldr	r2, [pc, #268]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ec:	6413      	str	r3, [r2, #64]	; 0x40
 80069ee:	4b41      	ldr	r3, [pc, #260]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069fa:	4b3f      	ldr	r3, [pc, #252]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a3e      	ldr	r2, [pc, #248]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a06:	f7fe f90b 	bl	8004c20 <HAL_GetTick>
 8006a0a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a0e:	f7fe f907 	bl	8004c20 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e062      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a20:	4b35      	ldr	r3, [pc, #212]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0f0      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a2c:	4b31      	ldr	r3, [pc, #196]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a34:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d02f      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d028      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a4a:	4b2a      	ldr	r3, [pc, #168]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a52:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a54:	4b29      	ldr	r3, [pc, #164]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a56:	2201      	movs	r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a5a:	4b28      	ldr	r3, [pc, #160]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a60:	4a24      	ldr	r2, [pc, #144]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a66:	4b23      	ldr	r3, [pc, #140]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d114      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a72:	f7fe f8d5 	bl	8004c20 <HAL_GetTick>
 8006a76:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a78:	e00a      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a7a:	f7fe f8d1 	bl	8004c20 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e02a      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a90:	4b18      	ldr	r3, [pc, #96]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0ee      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aa8:	d10d      	bne.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006aaa:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006abe:	490d      	ldr	r1, [pc, #52]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	608b      	str	r3, [r1, #8]
 8006ac4:	e005      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	4a0a      	ldr	r2, [pc, #40]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006acc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ad0:	6093      	str	r3, [r2, #8]
 8006ad2:	4b08      	ldr	r3, [pc, #32]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ad4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ade:	4905      	ldr	r1, [pc, #20]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	42470068 	.word	0x42470068
 8006af4:	40023800 	.word	0x40023800
 8006af8:	40007000 	.word	0x40007000
 8006afc:	42470e40 	.word	0x42470e40

08006b00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e066      	b.n	8006be4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	7f5b      	ldrb	r3, [r3, #29]
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fd fd4c 	bl	80045c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	22ca      	movs	r2, #202	; 0xca
 8006b38:	625a      	str	r2, [r3, #36]	; 0x24
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2253      	movs	r2, #83	; 0x53
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa45 	bl	8006fd2 <RTC_EnterInitMode>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d12c      	bne.n	8006bac <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6812      	ldr	r2, [r2, #0]
 8006b5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b64:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6899      	ldr	r1, [r3, #8]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	68d2      	ldr	r2, [r2, #12]
 8006b8c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6919      	ldr	r1, [r3, #16]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	041a      	lsls	r2, r3, #16
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fa4c 	bl	8007040 <RTC_ExitInitMode>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d113      	bne.n	8006bda <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	22ff      	movs	r2, #255	; 0xff
 8006be0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006bec:	b590      	push	{r4, r7, lr}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	7f1b      	ldrb	r3, [r3, #28]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_RTC_SetTime+0x1c>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e087      	b.n	8006d18 <HAL_RTC_SetTime+0x12c>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2202      	movs	r2, #2
 8006c12:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d126      	bne.n	8006c68 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d102      	bne.n	8006c2e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fa29 	bl	800708a <RTC_ByteToBcd2>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	785b      	ldrb	r3, [r3, #1]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fa22 	bl	800708a <RTC_ByteToBcd2>
 8006c46:	4603      	mov	r3, r0
 8006c48:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c4a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	789b      	ldrb	r3, [r3, #2]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fa1a 	bl	800708a <RTC_ByteToBcd2>
 8006c56:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c58:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	78db      	ldrb	r3, [r3, #3]
 8006c60:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	e018      	b.n	8006c9a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c88:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006c8e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	78db      	ldrb	r3, [r3, #3]
 8006c94:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	22ca      	movs	r2, #202	; 0xca
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2253      	movs	r2, #83	; 0x53
 8006ca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 f991 	bl	8006fd2 <RTC_EnterInitMode>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006cb4:	7cfb      	ldrb	r3, [r7, #19]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d120      	bne.n	8006cfc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006cc4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006cc8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cd8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6899      	ldr	r1, [r3, #8]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 f9a4 	bl	8007040 <RTC_ExitInitMode>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006cfc:	7cfb      	ldrb	r3, [r7, #19]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d102      	bne.n	8006d08 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	22ff      	movs	r2, #255	; 0xff
 8006d0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	771a      	strb	r2, [r3, #28]

  return status;
 8006d16:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd90      	pop	{r4, r7, pc}

08006d20 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006d52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	0c1b      	lsrs	r3, r3, #16
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	0a1b      	lsrs	r3, r3, #8
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	0d9b      	lsrs	r3, r3, #22
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d11a      	bne.n	8006dd2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 f98f 	bl	80070c4 <RTC_Bcd2ToByte>
 8006da6:	4603      	mov	r3, r0
 8006da8:	461a      	mov	r2, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	785b      	ldrb	r3, [r3, #1]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 f986 	bl	80070c4 <RTC_Bcd2ToByte>
 8006db8:	4603      	mov	r3, r0
 8006dba:	461a      	mov	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	789b      	ldrb	r3, [r3, #2]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f97d 	bl	80070c4 <RTC_Bcd2ToByte>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	461a      	mov	r2, r3
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ddc:	b590      	push	{r4, r7, lr}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	7f1b      	ldrb	r3, [r3, #28]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_RTC_SetDate+0x1c>
 8006df4:	2302      	movs	r3, #2
 8006df6:	e071      	b.n	8006edc <HAL_RTC_SetDate+0x100>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2202      	movs	r2, #2
 8006e02:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10e      	bne.n	8006e28 <HAL_RTC_SetDate+0x4c>
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	f003 0310 	and.w	r3, r3, #16
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d008      	beq.n	8006e28 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	785b      	ldrb	r3, [r3, #1]
 8006e1a:	f023 0310 	bic.w	r3, r3, #16
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	330a      	adds	r3, #10
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d11c      	bne.n	8006e68 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	78db      	ldrb	r3, [r3, #3]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f929 	bl	800708a <RTC_ByteToBcd2>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	785b      	ldrb	r3, [r3, #1]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 f922 	bl	800708a <RTC_ByteToBcd2>
 8006e46:	4603      	mov	r3, r0
 8006e48:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e4a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	789b      	ldrb	r3, [r3, #2]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 f91a 	bl	800708a <RTC_ByteToBcd2>
 8006e56:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e58:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e62:	4313      	orrs	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	e00e      	b.n	8006e86 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	78db      	ldrb	r3, [r3, #3]
 8006e6c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	785b      	ldrb	r3, [r3, #1]
 8006e72:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e74:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006e7a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	22ca      	movs	r2, #202	; 0xca
 8006e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2253      	movs	r2, #83	; 0x53
 8006e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f89b 	bl	8006fd2 <RTC_EnterInitMode>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006ea0:	7cfb      	ldrb	r3, [r7, #19]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10c      	bne.n	8006ec0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006eb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006eb4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 f8c2 	bl	8007040 <RTC_ExitInitMode>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006ec0:	7cfb      	ldrb	r3, [r7, #19]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d102      	bne.n	8006ecc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	22ff      	movs	r2, #255	; 0xff
 8006ed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	771a      	strb	r2, [r3, #28]

  return status;
 8006eda:	7cfb      	ldrb	r3, [r7, #19]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd90      	pop	{r4, r7, pc}

08006ee4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006efe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	0c1b      	lsrs	r3, r3, #16
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	0a1b      	lsrs	r3, r3, #8
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	0b5b      	lsrs	r3, r3, #13
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d11a      	bne.n	8006f78 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	78db      	ldrb	r3, [r3, #3]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 f8bc 	bl	80070c4 <RTC_Bcd2ToByte>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 f8b3 	bl	80070c4 <RTC_Bcd2ToByte>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	461a      	mov	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	789b      	ldrb	r3, [r3, #2]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 f8aa 	bl	80070c4 <RTC_Bcd2ToByte>
 8006f70:	4603      	mov	r3, r0
 8006f72:	461a      	mov	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f9c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f9e:	f7fd fe3f 	bl	8004c20 <HAL_GetTick>
 8006fa2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fa4:	e009      	b.n	8006fba <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fa6:	f7fd fe3b 	bl	8004c20 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fb4:	d901      	bls.n	8006fba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e007      	b.n	8006fca <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f003 0320 	and.w	r3, r3, #32
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0ee      	beq.n	8006fa6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d122      	bne.n	8007036 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ffe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007000:	f7fd fe0e 	bl	8004c20 <HAL_GetTick>
 8007004:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007006:	e00c      	b.n	8007022 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007008:	f7fd fe0a 	bl	8004c20 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007016:	d904      	bls.n	8007022 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2204      	movs	r2, #4
 800701c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	d102      	bne.n	8007036 <RTC_EnterInitMode+0x64>
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d1e8      	bne.n	8007008 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800705a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff ff89 	bl	8006f82 <HAL_RTC_WaitForSynchro>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d004      	beq.n	8007080 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2204      	movs	r2, #4
 800707a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007080:	7bfb      	ldrb	r3, [r7, #15]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800708a:	b480      	push	{r7}
 800708c:	b085      	sub	sp, #20
 800708e:	af00      	add	r7, sp, #0
 8007090:	4603      	mov	r3, r0
 8007092:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007098:	e005      	b.n	80070a6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	3301      	adds	r3, #1
 800709e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	3b0a      	subs	r3, #10
 80070a4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	2b09      	cmp	r3, #9
 80070aa:	d8f6      	bhi.n	800709a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	b2db      	uxtb	r3, r3
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	091b      	lsrs	r3, r3, #4
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	461a      	mov	r2, r3
 80070da:	0092      	lsls	r2, r2, #2
 80070dc:	4413      	add	r3, r2
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	4413      	add	r3, r2
 80070ee:	b2db      	uxtb	r3, r3
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e07b      	b.n	8007206 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	2b00      	cmp	r3, #0
 8007114:	d108      	bne.n	8007128 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800711e:	d009      	beq.n	8007134 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	61da      	str	r2, [r3, #28]
 8007126:	e005      	b.n	8007134 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fd fa64 	bl	800461c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800716a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b8:	ea42 0103 	orr.w	r1, r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	0c1b      	lsrs	r3, r3, #16
 80071d2:	f003 0104 	and.w	r1, r3, #4
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	f003 0210 	and.w	r2, r3, #16
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69da      	ldr	r2, [r3, #28]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b088      	sub	sp, #32
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	603b      	str	r3, [r7, #0]
 800721a:	4613      	mov	r3, r2
 800721c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_SPI_Transmit+0x22>
 800722c:	2302      	movs	r3, #2
 800722e:	e126      	b.n	800747e <HAL_SPI_Transmit+0x270>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007238:	f7fd fcf2 	bl	8004c20 <HAL_GetTick>
 800723c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b01      	cmp	r3, #1
 800724c:	d002      	beq.n	8007254 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800724e:	2302      	movs	r3, #2
 8007250:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007252:	e10b      	b.n	800746c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <HAL_SPI_Transmit+0x52>
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d102      	bne.n	8007266 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007264:	e102      	b.n	800746c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2203      	movs	r2, #3
 800726a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	88fa      	ldrh	r2, [r7, #6]
 800727e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	88fa      	ldrh	r2, [r7, #6]
 8007284:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ac:	d10f      	bne.n	80072ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b40      	cmp	r3, #64	; 0x40
 80072da:	d007      	beq.n	80072ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f4:	d14b      	bne.n	800738e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_SPI_Transmit+0xf6>
 80072fe:	8afb      	ldrh	r3, [r7, #22]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d13e      	bne.n	8007382 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	881a      	ldrh	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007314:	1c9a      	adds	r2, r3, #2
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007328:	e02b      	b.n	8007382 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b02      	cmp	r3, #2
 8007336:	d112      	bne.n	800735e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733c:	881a      	ldrh	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	1c9a      	adds	r2, r3, #2
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	86da      	strh	r2, [r3, #54]	; 0x36
 800735c:	e011      	b.n	8007382 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800735e:	f7fd fc5f 	bl	8004c20 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d803      	bhi.n	8007376 <HAL_SPI_Transmit+0x168>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007374:	d102      	bne.n	800737c <HAL_SPI_Transmit+0x16e>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d102      	bne.n	8007382 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007380:	e074      	b.n	800746c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1ce      	bne.n	800732a <HAL_SPI_Transmit+0x11c>
 800738c:	e04c      	b.n	8007428 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <HAL_SPI_Transmit+0x18e>
 8007396:	8afb      	ldrh	r3, [r7, #22]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d140      	bne.n	800741e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	330c      	adds	r3, #12
 80073a6:	7812      	ldrb	r2, [r2, #0]
 80073a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80073c2:	e02c      	b.n	800741e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d113      	bne.n	80073fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	330c      	adds	r3, #12
 80073dc:	7812      	ldrb	r2, [r2, #0]
 80073de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80073f8:	e011      	b.n	800741e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073fa:	f7fd fc11 	bl	8004c20 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d803      	bhi.n	8007412 <HAL_SPI_Transmit+0x204>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007410:	d102      	bne.n	8007418 <HAL_SPI_Transmit+0x20a>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800741c:	e026      	b.n	800746c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1cd      	bne.n	80073c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fb13 	bl	8007a58 <SPI_EndRxTxTransaction>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2220      	movs	r2, #32
 800743c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007446:	2300      	movs	r3, #0
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	613b      	str	r3, [r7, #16]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	77fb      	strb	r3, [r7, #31]
 8007468:	e000      	b.n	800746c <HAL_SPI_Transmit+0x25e>
  }

error:
 800746a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800747c:	7ffb      	ldrb	r3, [r7, #31]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	4613      	mov	r3, r2
 8007494:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_SPI_Transmit_DMA+0x20>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e09b      	b.n	80075e0 <HAL_SPI_Transmit_DMA+0x158>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d002      	beq.n	80074c2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80074bc:	2302      	movs	r3, #2
 80074be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074c0:	e089      	b.n	80075d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <HAL_SPI_Transmit_DMA+0x46>
 80074c8:	88fb      	ldrh	r3, [r7, #6]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d102      	bne.n	80074d4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074d2:	e080      	b.n	80075d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2203      	movs	r2, #3
 80074d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	88fa      	ldrh	r2, [r7, #6]
 80074ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	88fa      	ldrh	r2, [r7, #6]
 80074f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800751a:	d10f      	bne.n	800753c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800752a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800753a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007540:	4a29      	ldr	r2, [pc, #164]	; (80075e8 <HAL_SPI_Transmit_DMA+0x160>)
 8007542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007548:	4a28      	ldr	r2, [pc, #160]	; (80075ec <HAL_SPI_Transmit_DMA+0x164>)
 800754a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007550:	4a27      	ldr	r2, [pc, #156]	; (80075f0 <HAL_SPI_Transmit_DMA+0x168>)
 8007552:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007558:	2200      	movs	r2, #0
 800755a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	4619      	mov	r1, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	330c      	adds	r3, #12
 800756c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007572:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007574:	f7fd fd14 	bl	8004fa0 <HAL_DMA_Start_IT>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00c      	beq.n	8007598 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007582:	f043 0210 	orr.w	r2, r3, #16
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007596:	e01e      	b.n	80075d6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	d007      	beq.n	80075b6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075b4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f042 0220 	orr.w	r2, r2, #32
 80075c4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f042 0202 	orr.w	r2, r2, #2
 80075d4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	080078c5 	.word	0x080078c5
 80075ec:	0800781d 	.word	0x0800781d
 80075f0:	080078e1 	.word	0x080078e1

080075f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	099b      	lsrs	r3, r3, #6
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10f      	bne.n	8007638 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	099b      	lsrs	r3, r3, #6
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
    return;
 8007636:	e0d7      	b.n	80077e8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	085b      	lsrs	r3, r3, #1
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <HAL_SPI_IRQHandler+0x66>
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	09db      	lsrs	r3, r3, #7
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d004      	beq.n	800765a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
    return;
 8007658:	e0c6      	b.n	80077e8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10c      	bne.n	8007680 <HAL_SPI_IRQHandler+0x8c>
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	099b      	lsrs	r3, r3, #6
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d106      	bne.n	8007680 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	0a1b      	lsrs	r3, r3, #8
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 80b4 	beq.w	80077e8 <HAL_SPI_IRQHandler+0x1f4>
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80ad 	beq.w	80077e8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	099b      	lsrs	r3, r3, #6
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d023      	beq.n	80076e2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d011      	beq.n	80076ca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076aa:	f043 0204 	orr.w	r2, r3, #4
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076b2:	2300      	movs	r3, #0
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	e00b      	b.n	80076e2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	613b      	str	r3, [r7, #16]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	613b      	str	r3, [r7, #16]
 80076de:	693b      	ldr	r3, [r7, #16]
        return;
 80076e0:	e082      	b.n	80077e8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d014      	beq.n	8007718 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f2:	f043 0201 	orr.w	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	0a1b      	lsrs	r3, r3, #8
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00c      	beq.n	800773e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007728:	f043 0208 	orr.w	r2, r3, #8
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007730:	2300      	movs	r3, #0
 8007732:	60bb      	str	r3, [r7, #8]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	60bb      	str	r3, [r7, #8]
 800773c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007742:	2b00      	cmp	r3, #0
 8007744:	d04f      	beq.n	80077e6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007754:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <HAL_SPI_IRQHandler+0x17e>
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d034      	beq.n	80077dc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0203 	bic.w	r2, r2, #3
 8007780:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d011      	beq.n	80077ae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778e:	4a18      	ldr	r2, [pc, #96]	; (80077f0 <HAL_SPI_IRQHandler+0x1fc>)
 8007790:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007796:	4618      	mov	r0, r3
 8007798:	f7fd fcca 	bl	8005130 <HAL_DMA_Abort_IT>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d016      	beq.n	80077e4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ba:	4a0d      	ldr	r2, [pc, #52]	; (80077f0 <HAL_SPI_IRQHandler+0x1fc>)
 80077bc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fd fcb4 	bl	8005130 <HAL_DMA_Abort_IT>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80077da:	e003      	b.n	80077e4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f813 	bl	8007808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80077e2:	e000      	b.n	80077e6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80077e4:	bf00      	nop
    return;
 80077e6:	bf00      	nop
  }
}
 80077e8:	3720      	adds	r7, #32
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	08007921 	.word	0x08007921

080077f4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800782a:	f7fd f9f9 	bl	8004c20 <HAL_GetTick>
 800782e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783e:	d03b      	beq.n	80078b8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0220 	bic.w	r2, r2, #32
 800784e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0202 	bic.w	r2, r2, #2
 800785e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	2164      	movs	r1, #100	; 0x64
 8007864:	6978      	ldr	r0, [r7, #20]
 8007866:	f000 f8f7 	bl	8007a58 <SPI_EndRxTxTransaction>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007874:	f043 0220 	orr.w	r2, r3, #32
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007884:	2300      	movs	r3, #0
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2200      	movs	r2, #0
 800789e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80078b0:	6978      	ldr	r0, [r7, #20]
 80078b2:	f7ff ffa9 	bl	8007808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80078b6:	e002      	b.n	80078be <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80078b8:	6978      	ldr	r0, [r7, #20]
 80078ba:	f7fb f96d 	bl	8002b98 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7ff ff8e 	bl	80077f4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078d8:	bf00      	nop
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0203 	bic.w	r2, r2, #3
 80078fc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007902:	f043 0210 	orr.w	r2, r3, #16
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f7ff ff78 	bl	8007808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007918:	bf00      	nop
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f7ff ff64 	bl	8007808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007940:	bf00      	nop
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	4613      	mov	r3, r2
 8007956:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007958:	f7fd f962 	bl	8004c20 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	1a9b      	subs	r3, r3, r2
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	4413      	add	r3, r2
 8007966:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007968:	f7fd f95a 	bl	8004c20 <HAL_GetTick>
 800796c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800796e:	4b39      	ldr	r3, [pc, #228]	; (8007a54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	015b      	lsls	r3, r3, #5
 8007974:	0d1b      	lsrs	r3, r3, #20
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	fb02 f303 	mul.w	r3, r2, r3
 800797c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800797e:	e054      	b.n	8007a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007986:	d050      	beq.n	8007a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007988:	f7fd f94a 	bl	8004c20 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	429a      	cmp	r2, r3
 8007996:	d902      	bls.n	800799e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d13d      	bne.n	8007a1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079b6:	d111      	bne.n	80079dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c0:	d004      	beq.n	80079cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ca:	d107      	bne.n	80079dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e4:	d10f      	bne.n	8007a06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e017      	b.n	8007a4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	4013      	ands	r3, r2
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	bf0c      	ite	eq
 8007a3a:	2301      	moveq	r3, #1
 8007a3c:	2300      	movne	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d19b      	bne.n	8007980 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3720      	adds	r7, #32
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	200000a4 	.word	0x200000a4

08007a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a64:	4b1b      	ldr	r3, [pc, #108]	; (8007ad4 <SPI_EndRxTxTransaction+0x7c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a1b      	ldr	r2, [pc, #108]	; (8007ad8 <SPI_EndRxTxTransaction+0x80>)
 8007a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6e:	0d5b      	lsrs	r3, r3, #21
 8007a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a74:	fb02 f303 	mul.w	r3, r2, r3
 8007a78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a82:	d112      	bne.n	8007aaa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2180      	movs	r1, #128	; 0x80
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7ff ff5a 	bl	8007948 <SPI_WaitFlagStateUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d016      	beq.n	8007ac8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9e:	f043 0220 	orr.w	r2, r3, #32
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e00f      	b.n	8007aca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac0:	2b80      	cmp	r3, #128	; 0x80
 8007ac2:	d0f2      	beq.n	8007aaa <SPI_EndRxTxTransaction+0x52>
 8007ac4:	e000      	b.n	8007ac8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007ac6:	bf00      	nop
  }

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200000a4 	.word	0x200000a4
 8007ad8:	165e9f81 	.word	0x165e9f81

08007adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e041      	b.n	8007b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d106      	bne.n	8007b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7fc fe16 	bl	8004734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f000 fa96 	bl	800804c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d001      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e04e      	b.n	8007c32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f042 0201 	orr.w	r2, r2, #1
 8007baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a23      	ldr	r2, [pc, #140]	; (8007c40 <HAL_TIM_Base_Start_IT+0xc4>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d022      	beq.n	8007bfc <HAL_TIM_Base_Start_IT+0x80>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bbe:	d01d      	beq.n	8007bfc <HAL_TIM_Base_Start_IT+0x80>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a1f      	ldr	r2, [pc, #124]	; (8007c44 <HAL_TIM_Base_Start_IT+0xc8>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d018      	beq.n	8007bfc <HAL_TIM_Base_Start_IT+0x80>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1e      	ldr	r2, [pc, #120]	; (8007c48 <HAL_TIM_Base_Start_IT+0xcc>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <HAL_TIM_Base_Start_IT+0x80>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a1c      	ldr	r2, [pc, #112]	; (8007c4c <HAL_TIM_Base_Start_IT+0xd0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00e      	beq.n	8007bfc <HAL_TIM_Base_Start_IT+0x80>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a1b      	ldr	r2, [pc, #108]	; (8007c50 <HAL_TIM_Base_Start_IT+0xd4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d009      	beq.n	8007bfc <HAL_TIM_Base_Start_IT+0x80>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a19      	ldr	r2, [pc, #100]	; (8007c54 <HAL_TIM_Base_Start_IT+0xd8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d004      	beq.n	8007bfc <HAL_TIM_Base_Start_IT+0x80>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a18      	ldr	r2, [pc, #96]	; (8007c58 <HAL_TIM_Base_Start_IT+0xdc>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d111      	bne.n	8007c20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b06      	cmp	r3, #6
 8007c0c:	d010      	beq.n	8007c30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f042 0201 	orr.w	r2, r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1e:	e007      	b.n	8007c30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f042 0201 	orr.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	40010000 	.word	0x40010000
 8007c44:	40000400 	.word	0x40000400
 8007c48:	40000800 	.word	0x40000800
 8007c4c:	40000c00 	.word	0x40000c00
 8007c50:	40010400 	.word	0x40010400
 8007c54:	40014000 	.word	0x40014000
 8007c58:	40001800 	.word	0x40001800

08007c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d122      	bne.n	8007cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d11b      	bne.n	8007cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f06f 0202 	mvn.w	r2, #2
 8007c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f9b5 	bl	800800e <HAL_TIM_IC_CaptureCallback>
 8007ca4:	e005      	b.n	8007cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f9a7 	bl	8007ffa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f9b8 	bl	8008022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d122      	bne.n	8007d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d11b      	bne.n	8007d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f06f 0204 	mvn.w	r2, #4
 8007cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f98b 	bl	800800e <HAL_TIM_IC_CaptureCallback>
 8007cf8:	e005      	b.n	8007d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f97d 	bl	8007ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f98e 	bl	8008022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d122      	bne.n	8007d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d11b      	bne.n	8007d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f06f 0208 	mvn.w	r2, #8
 8007d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2204      	movs	r2, #4
 8007d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f961 	bl	800800e <HAL_TIM_IC_CaptureCallback>
 8007d4c:	e005      	b.n	8007d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f953 	bl	8007ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f964 	bl	8008022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	f003 0310 	and.w	r3, r3, #16
 8007d6a:	2b10      	cmp	r3, #16
 8007d6c:	d122      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b10      	cmp	r3, #16
 8007d7a:	d11b      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f06f 0210 	mvn.w	r2, #16
 8007d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2208      	movs	r2, #8
 8007d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f937 	bl	800800e <HAL_TIM_IC_CaptureCallback>
 8007da0:	e005      	b.n	8007dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f929 	bl	8007ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f93a 	bl	8008022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d10e      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d107      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f06f 0201 	mvn.w	r2, #1
 8007dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7fb ff92 	bl	8003d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dea:	2b80      	cmp	r3, #128	; 0x80
 8007dec:	d10e      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df8:	2b80      	cmp	r3, #128	; 0x80
 8007dfa:	d107      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fae0 	bl	80083cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e16:	2b40      	cmp	r3, #64	; 0x40
 8007e18:	d10e      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	2b40      	cmp	r3, #64	; 0x40
 8007e26:	d107      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f8ff 	bl	8008036 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b20      	cmp	r3, #32
 8007e44:	d10e      	bne.n	8007e64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f003 0320 	and.w	r3, r3, #32
 8007e50:	2b20      	cmp	r3, #32
 8007e52:	d107      	bne.n	8007e64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0220 	mvn.w	r2, #32
 8007e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 faaa 	bl	80083b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_TIM_ConfigClockSource+0x1c>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e0b4      	b.n	8007ff2 <HAL_TIM_ConfigClockSource+0x186>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ec0:	d03e      	beq.n	8007f40 <HAL_TIM_ConfigClockSource+0xd4>
 8007ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ec6:	f200 8087 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ece:	f000 8086 	beq.w	8007fde <HAL_TIM_ConfigClockSource+0x172>
 8007ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ed6:	d87f      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ed8:	2b70      	cmp	r3, #112	; 0x70
 8007eda:	d01a      	beq.n	8007f12 <HAL_TIM_ConfigClockSource+0xa6>
 8007edc:	2b70      	cmp	r3, #112	; 0x70
 8007ede:	d87b      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee0:	2b60      	cmp	r3, #96	; 0x60
 8007ee2:	d050      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x11a>
 8007ee4:	2b60      	cmp	r3, #96	; 0x60
 8007ee6:	d877      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee8:	2b50      	cmp	r3, #80	; 0x50
 8007eea:	d03c      	beq.n	8007f66 <HAL_TIM_ConfigClockSource+0xfa>
 8007eec:	2b50      	cmp	r3, #80	; 0x50
 8007eee:	d873      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef0:	2b40      	cmp	r3, #64	; 0x40
 8007ef2:	d058      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8007ef4:	2b40      	cmp	r3, #64	; 0x40
 8007ef6:	d86f      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef8:	2b30      	cmp	r3, #48	; 0x30
 8007efa:	d064      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8007efc:	2b30      	cmp	r3, #48	; 0x30
 8007efe:	d86b      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	d060      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d867      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d05c      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f0c:	2b10      	cmp	r3, #16
 8007f0e:	d05a      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f10:	e062      	b.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	6899      	ldr	r1, [r3, #8]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f000 f9ad 	bl	8008280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	609a      	str	r2, [r3, #8]
      break;
 8007f3e:	e04f      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	6899      	ldr	r1, [r3, #8]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f000 f996 	bl	8008280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f62:	609a      	str	r2, [r3, #8]
      break;
 8007f64:	e03c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6859      	ldr	r1, [r3, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f000 f90a 	bl	800818c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2150      	movs	r1, #80	; 0x50
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 f963 	bl	800824a <TIM_ITRx_SetConfig>
      break;
 8007f84:	e02c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6859      	ldr	r1, [r3, #4]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	461a      	mov	r2, r3
 8007f94:	f000 f929 	bl	80081ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2160      	movs	r1, #96	; 0x60
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f953 	bl	800824a <TIM_ITRx_SetConfig>
      break;
 8007fa4:	e01c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6859      	ldr	r1, [r3, #4]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f000 f8ea 	bl	800818c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2140      	movs	r1, #64	; 0x40
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 f943 	bl	800824a <TIM_ITRx_SetConfig>
      break;
 8007fc4:	e00c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	f000 f93a 	bl	800824a <TIM_ITRx_SetConfig>
      break;
 8007fd6:	e003      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
      break;
 8007fdc:	e000      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
	...

0800804c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a40      	ldr	r2, [pc, #256]	; (8008160 <TIM_Base_SetConfig+0x114>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d013      	beq.n	800808c <TIM_Base_SetConfig+0x40>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806a:	d00f      	beq.n	800808c <TIM_Base_SetConfig+0x40>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a3d      	ldr	r2, [pc, #244]	; (8008164 <TIM_Base_SetConfig+0x118>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00b      	beq.n	800808c <TIM_Base_SetConfig+0x40>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a3c      	ldr	r2, [pc, #240]	; (8008168 <TIM_Base_SetConfig+0x11c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d007      	beq.n	800808c <TIM_Base_SetConfig+0x40>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a3b      	ldr	r2, [pc, #236]	; (800816c <TIM_Base_SetConfig+0x120>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d003      	beq.n	800808c <TIM_Base_SetConfig+0x40>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a3a      	ldr	r2, [pc, #232]	; (8008170 <TIM_Base_SetConfig+0x124>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d108      	bne.n	800809e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a2f      	ldr	r2, [pc, #188]	; (8008160 <TIM_Base_SetConfig+0x114>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d02b      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ac:	d027      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a2c      	ldr	r2, [pc, #176]	; (8008164 <TIM_Base_SetConfig+0x118>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d023      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a2b      	ldr	r2, [pc, #172]	; (8008168 <TIM_Base_SetConfig+0x11c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d01f      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a2a      	ldr	r2, [pc, #168]	; (800816c <TIM_Base_SetConfig+0x120>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d01b      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a29      	ldr	r2, [pc, #164]	; (8008170 <TIM_Base_SetConfig+0x124>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d017      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a28      	ldr	r2, [pc, #160]	; (8008174 <TIM_Base_SetConfig+0x128>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d013      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a27      	ldr	r2, [pc, #156]	; (8008178 <TIM_Base_SetConfig+0x12c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d00f      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a26      	ldr	r2, [pc, #152]	; (800817c <TIM_Base_SetConfig+0x130>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00b      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a25      	ldr	r2, [pc, #148]	; (8008180 <TIM_Base_SetConfig+0x134>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d007      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a24      	ldr	r2, [pc, #144]	; (8008184 <TIM_Base_SetConfig+0x138>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d003      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a23      	ldr	r2, [pc, #140]	; (8008188 <TIM_Base_SetConfig+0x13c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d108      	bne.n	8008110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4313      	orrs	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	4313      	orrs	r3, r2
 800811c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a0a      	ldr	r2, [pc, #40]	; (8008160 <TIM_Base_SetConfig+0x114>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d003      	beq.n	8008144 <TIM_Base_SetConfig+0xf8>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a0c      	ldr	r2, [pc, #48]	; (8008170 <TIM_Base_SetConfig+0x124>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d103      	bne.n	800814c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	615a      	str	r2, [r3, #20]
}
 8008152:	bf00      	nop
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	40010000 	.word	0x40010000
 8008164:	40000400 	.word	0x40000400
 8008168:	40000800 	.word	0x40000800
 800816c:	40000c00 	.word	0x40000c00
 8008170:	40010400 	.word	0x40010400
 8008174:	40014000 	.word	0x40014000
 8008178:	40014400 	.word	0x40014400
 800817c:	40014800 	.word	0x40014800
 8008180:	40001800 	.word	0x40001800
 8008184:	40001c00 	.word	0x40001c00
 8008188:	40002000 	.word	0x40002000

0800818c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	f023 0201 	bic.w	r2, r3, #1
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f023 030a 	bic.w	r3, r3, #10
 80081c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	621a      	str	r2, [r3, #32]
}
 80081de:	bf00      	nop
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b087      	sub	sp, #28
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f023 0210 	bic.w	r2, r3, #16
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	031b      	lsls	r3, r3, #12
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	4313      	orrs	r3, r2
 800821e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008226:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	011b      	lsls	r3, r3, #4
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	4313      	orrs	r3, r2
 8008230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	621a      	str	r2, [r3, #32]
}
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800824a:	b480      	push	{r7}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	f043 0307 	orr.w	r3, r3, #7
 800826c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	609a      	str	r2, [r3, #8]
}
 8008274:	bf00      	nop
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800829a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	021a      	lsls	r2, r3, #8
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	431a      	orrs	r2, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	609a      	str	r2, [r3, #8]
}
 80082b4:	bf00      	nop
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d101      	bne.n	80082d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e05a      	b.n	800838e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2202      	movs	r2, #2
 80082e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a21      	ldr	r2, [pc, #132]	; (800839c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d022      	beq.n	8008362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008324:	d01d      	beq.n	8008362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a1d      	ldr	r2, [pc, #116]	; (80083a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d018      	beq.n	8008362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a1b      	ldr	r2, [pc, #108]	; (80083a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d013      	beq.n	8008362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a1a      	ldr	r2, [pc, #104]	; (80083a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00e      	beq.n	8008362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a18      	ldr	r2, [pc, #96]	; (80083ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d009      	beq.n	8008362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a17      	ldr	r2, [pc, #92]	; (80083b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d004      	beq.n	8008362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a15      	ldr	r2, [pc, #84]	; (80083b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d10c      	bne.n	800837c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	4313      	orrs	r3, r2
 8008372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	40010000 	.word	0x40010000
 80083a0:	40000400 	.word	0x40000400
 80083a4:	40000800 	.word	0x40000800
 80083a8:	40000c00 	.word	0x40000c00
 80083ac:	40010400 	.word	0x40010400
 80083b0:	40014000 	.word	0x40014000
 80083b4:	40001800 	.word	0x40001800

080083b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e03f      	b.n	8008472 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d106      	bne.n	800840c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7fc f9ba 	bl	8004780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2224      	movs	r2, #36	; 0x24
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fe2b 	bl	8009080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	691a      	ldr	r2, [r3, #16]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	695a      	ldr	r2, [r3, #20]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2220      	movs	r2, #32
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2220      	movs	r2, #32
 800846c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	4613      	mov	r3, r2
 8008486:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b20      	cmp	r3, #32
 8008492:	d11d      	bne.n	80084d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <HAL_UART_Receive_IT+0x26>
 800849a:	88fb      	ldrh	r3, [r7, #6]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e016      	b.n	80084d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d101      	bne.n	80084b2 <HAL_UART_Receive_IT+0x38>
 80084ae:	2302      	movs	r3, #2
 80084b0:	e00f      	b.n	80084d2 <HAL_UART_Receive_IT+0x58>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	461a      	mov	r2, r3
 80084c4:	68b9      	ldr	r1, [r7, #8]
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 fbd9 	bl	8008c7e <UART_Start_Receive_IT>
 80084cc:	4603      	mov	r3, r0
 80084ce:	e000      	b.n	80084d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80084d0:	2302      	movs	r3, #2
  }
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
	...

080084dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08c      	sub	sp, #48	; 0x30
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	4613      	mov	r3, r2
 80084e8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b20      	cmp	r3, #32
 80084f4:	d165      	bne.n	80085c2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <HAL_UART_Transmit_DMA+0x26>
 80084fc:	88fb      	ldrh	r3, [r7, #6]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e05e      	b.n	80085c4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_UART_Transmit_DMA+0x38>
 8008510:	2302      	movs	r3, #2
 8008512:	e057      	b.n	80085c4 <HAL_UART_Transmit_DMA+0xe8>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	88fa      	ldrh	r2, [r7, #6]
 8008526:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	88fa      	ldrh	r2, [r7, #6]
 800852c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2221      	movs	r2, #33	; 0x21
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008540:	4a22      	ldr	r2, [pc, #136]	; (80085cc <HAL_UART_Transmit_DMA+0xf0>)
 8008542:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008548:	4a21      	ldr	r2, [pc, #132]	; (80085d0 <HAL_UART_Transmit_DMA+0xf4>)
 800854a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008550:	4a20      	ldr	r2, [pc, #128]	; (80085d4 <HAL_UART_Transmit_DMA+0xf8>)
 8008552:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008558:	2200      	movs	r2, #0
 800855a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800855c:	f107 0308 	add.w	r3, r7, #8
 8008560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008568:	6819      	ldr	r1, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3304      	adds	r3, #4
 8008570:	461a      	mov	r2, r3
 8008572:	88fb      	ldrh	r3, [r7, #6]
 8008574:	f7fc fd14 	bl	8004fa0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008580:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3314      	adds	r3, #20
 8008590:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	e853 3f00 	ldrex	r3, [r3]
 8008598:	617b      	str	r3, [r7, #20]
   return(result);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3314      	adds	r3, #20
 80085a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085aa:	627a      	str	r2, [r7, #36]	; 0x24
 80085ac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ae:	6a39      	ldr	r1, [r7, #32]
 80085b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b2:	e841 2300 	strex	r3, r2, [r1]
 80085b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e5      	bne.n	800858a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	e000      	b.n	80085c4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80085c2:	2302      	movs	r3, #2
  }
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3730      	adds	r7, #48	; 0x30
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	08008b35 	.word	0x08008b35
 80085d0:	08008bcf 	.word	0x08008bcf
 80085d4:	08008beb 	.word	0x08008beb

080085d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b0ba      	sub	sp, #232	; 0xe8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80085fe:	2300      	movs	r3, #0
 8008600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008604:	2300      	movs	r3, #0
 8008606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800860a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800860e:	f003 030f 	and.w	r3, r3, #15
 8008612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10f      	bne.n	800863e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800861e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008622:	f003 0320 	and.w	r3, r3, #32
 8008626:	2b00      	cmp	r3, #0
 8008628:	d009      	beq.n	800863e <HAL_UART_IRQHandler+0x66>
 800862a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fc66 	bl	8008f08 <UART_Receive_IT>
      return;
 800863c:	e256      	b.n	8008aec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800863e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 80de 	beq.w	8008804 <HAL_UART_IRQHandler+0x22c>
 8008648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	d106      	bne.n	8008662 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008658:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 80d1 	beq.w	8008804 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00b      	beq.n	8008686 <HAL_UART_IRQHandler+0xae>
 800866e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008676:	2b00      	cmp	r3, #0
 8008678:	d005      	beq.n	8008686 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	f043 0201 	orr.w	r2, r3, #1
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800868a:	f003 0304 	and.w	r3, r3, #4
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00b      	beq.n	80086aa <HAL_UART_IRQHandler+0xd2>
 8008692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008696:	f003 0301 	and.w	r3, r3, #1
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a2:	f043 0202 	orr.w	r2, r3, #2
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00b      	beq.n	80086ce <HAL_UART_IRQHandler+0xf6>
 80086b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	f043 0204 	orr.w	r2, r3, #4
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d011      	beq.n	80086fe <HAL_UART_IRQHandler+0x126>
 80086da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086de:	f003 0320 	and.w	r3, r3, #32
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d105      	bne.n	80086f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f6:	f043 0208 	orr.w	r2, r3, #8
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 81ed 	beq.w	8008ae2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b00      	cmp	r3, #0
 8008712:	d008      	beq.n	8008726 <HAL_UART_IRQHandler+0x14e>
 8008714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008718:	f003 0320 	and.w	r3, r3, #32
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fbf1 	bl	8008f08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008730:	2b40      	cmp	r3, #64	; 0x40
 8008732:	bf0c      	ite	eq
 8008734:	2301      	moveq	r3, #1
 8008736:	2300      	movne	r3, #0
 8008738:	b2db      	uxtb	r3, r3
 800873a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	f003 0308 	and.w	r3, r3, #8
 8008746:	2b00      	cmp	r3, #0
 8008748:	d103      	bne.n	8008752 <HAL_UART_IRQHandler+0x17a>
 800874a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800874e:	2b00      	cmp	r3, #0
 8008750:	d04f      	beq.n	80087f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 faf9 	bl	8008d4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008762:	2b40      	cmp	r3, #64	; 0x40
 8008764:	d141      	bne.n	80087ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3314      	adds	r3, #20
 800876c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008774:	e853 3f00 	ldrex	r3, [r3]
 8008778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800877c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3314      	adds	r3, #20
 800878e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008792:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800879e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1d9      	bne.n	8008766 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d013      	beq.n	80087e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087be:	4a7d      	ldr	r2, [pc, #500]	; (80089b4 <HAL_UART_IRQHandler+0x3dc>)
 80087c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fc fcb2 	bl	8005130 <HAL_DMA_Abort_IT>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d016      	beq.n	8008800 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e0:	e00e      	b.n	8008800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f990 	bl	8008b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e8:	e00a      	b.n	8008800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f98c 	bl	8008b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f0:	e006      	b.n	8008800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f988 	bl	8008b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80087fe:	e170      	b.n	8008ae2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008800:	bf00      	nop
    return;
 8008802:	e16e      	b.n	8008ae2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008808:	2b01      	cmp	r3, #1
 800880a:	f040 814a 	bne.w	8008aa2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800880e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008812:	f003 0310 	and.w	r3, r3, #16
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 8143 	beq.w	8008aa2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800881c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 813c 	beq.w	8008aa2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800882a:	2300      	movs	r3, #0
 800882c:	60bb      	str	r3, [r7, #8]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	60bb      	str	r3, [r7, #8]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	60bb      	str	r3, [r7, #8]
 800883e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884a:	2b40      	cmp	r3, #64	; 0x40
 800884c:	f040 80b4 	bne.w	80089b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800885c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 8140 	beq.w	8008ae6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800886a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800886e:	429a      	cmp	r2, r3
 8008870:	f080 8139 	bcs.w	8008ae6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800887a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008886:	f000 8088 	beq.w	800899a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	330c      	adds	r3, #12
 8008890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	330c      	adds	r3, #12
 80088b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80088b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1d9      	bne.n	800888a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3314      	adds	r3, #20
 80088dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088e8:	f023 0301 	bic.w	r3, r3, #1
 80088ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3314      	adds	r3, #20
 80088f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008900:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008902:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800890c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1e1      	bne.n	80088d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3314      	adds	r3, #20
 8008918:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800891c:	e853 3f00 	ldrex	r3, [r3]
 8008920:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3314      	adds	r3, #20
 8008932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008936:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008938:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800893c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e3      	bne.n	8008912 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2220      	movs	r2, #32
 800894e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	330c      	adds	r3, #12
 800895e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008962:	e853 3f00 	ldrex	r3, [r3]
 8008966:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800896a:	f023 0310 	bic.w	r3, r3, #16
 800896e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	330c      	adds	r3, #12
 8008978:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800897c:	65ba      	str	r2, [r7, #88]	; 0x58
 800897e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008982:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800898a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e3      	bne.n	8008958 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008994:	4618      	mov	r0, r3
 8008996:	f7fc fb5b 	bl	8005050 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f8b6 	bl	8008b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089b0:	e099      	b.n	8008ae6 <HAL_UART_IRQHandler+0x50e>
 80089b2:	bf00      	nop
 80089b4:	08008e11 	.word	0x08008e11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 808b 	beq.w	8008aea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80089d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 8086 	beq.w	8008aea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	330c      	adds	r3, #12
 80089e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	330c      	adds	r3, #12
 80089fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a02:	647a      	str	r2, [r7, #68]	; 0x44
 8008a04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a0a:	e841 2300 	strex	r3, r2, [r1]
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1e3      	bne.n	80089de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3314      	adds	r3, #20
 8008a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	623b      	str	r3, [r7, #32]
   return(result);
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	f023 0301 	bic.w	r3, r3, #1
 8008a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3314      	adds	r3, #20
 8008a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8008a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e3      	bne.n	8008a16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	330c      	adds	r3, #12
 8008a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f023 0310 	bic.w	r3, r3, #16
 8008a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	330c      	adds	r3, #12
 8008a7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a80:	61fa      	str	r2, [r7, #28]
 8008a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	69b9      	ldr	r1, [r7, #24]
 8008a86:	69fa      	ldr	r2, [r7, #28]
 8008a88:	e841 2300 	strex	r3, r2, [r1]
 8008a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e3      	bne.n	8008a5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f83e 	bl	8008b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008aa0:	e023      	b.n	8008aea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d009      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x4ea>
 8008aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f9bc 	bl	8008e38 <UART_Transmit_IT>
    return;
 8008ac0:	e014      	b.n	8008aec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00e      	beq.n	8008aec <HAL_UART_IRQHandler+0x514>
 8008ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f9fc 	bl	8008ed8 <UART_EndTransmit_IT>
    return;
 8008ae0:	e004      	b.n	8008aec <HAL_UART_IRQHandler+0x514>
    return;
 8008ae2:	bf00      	nop
 8008ae4:	e002      	b.n	8008aec <HAL_UART_IRQHandler+0x514>
      return;
 8008ae6:	bf00      	nop
 8008ae8:	e000      	b.n	8008aec <HAL_UART_IRQHandler+0x514>
      return;
 8008aea:	bf00      	nop
  }
}
 8008aec:	37e8      	adds	r7, #232	; 0xe8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop

08008af4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b090      	sub	sp, #64	; 0x40
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d137      	bne.n	8008bc0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b52:	2200      	movs	r2, #0
 8008b54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3314      	adds	r3, #20
 8008b5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	e853 3f00 	ldrex	r3, [r3]
 8008b64:	623b      	str	r3, [r7, #32]
   return(result);
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3314      	adds	r3, #20
 8008b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b76:	633a      	str	r2, [r7, #48]	; 0x30
 8008b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7e:	e841 2300 	strex	r3, r2, [r1]
 8008b82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1e5      	bne.n	8008b56 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	330c      	adds	r3, #12
 8008b90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	330c      	adds	r3, #12
 8008ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008baa:	61fa      	str	r2, [r7, #28]
 8008bac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bae:	69b9      	ldr	r1, [r7, #24]
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	e841 2300 	strex	r3, r2, [r1]
 8008bb6:	617b      	str	r3, [r7, #20]
   return(result);
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1e5      	bne.n	8008b8a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bbe:	e002      	b.n	8008bc6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008bc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008bc2:	f7f9 ffd3 	bl	8002b6c <HAL_UART_TxCpltCallback>
}
 8008bc6:	bf00      	nop
 8008bc8:	3740      	adds	r7, #64	; 0x40
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bda:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f7ff ff89 	bl	8008af4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c06:	2b80      	cmp	r3, #128	; 0x80
 8008c08:	bf0c      	ite	eq
 8008c0a:	2301      	moveq	r3, #1
 8008c0c:	2300      	movne	r3, #0
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b21      	cmp	r3, #33	; 0x21
 8008c1c:	d108      	bne.n	8008c30 <UART_DMAError+0x46>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d005      	beq.n	8008c30 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2200      	movs	r2, #0
 8008c28:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008c2a:	68b8      	ldr	r0, [r7, #8]
 8008c2c:	f000 f865 	bl	8008cfa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3a:	2b40      	cmp	r3, #64	; 0x40
 8008c3c:	bf0c      	ite	eq
 8008c3e:	2301      	moveq	r3, #1
 8008c40:	2300      	movne	r3, #0
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b22      	cmp	r3, #34	; 0x22
 8008c50:	d108      	bne.n	8008c64 <UART_DMAError+0x7a>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d005      	beq.n	8008c64 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008c5e:	68b8      	ldr	r0, [r7, #8]
 8008c60:	f000 f873 	bl	8008d4a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c68:	f043 0210 	orr.w	r2, r3, #16
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c70:	68b8      	ldr	r0, [r7, #8]
 8008c72:	f7ff ff49 	bl	8008b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c76:	bf00      	nop
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	88fa      	ldrh	r2, [r7, #6]
 8008c96:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	88fa      	ldrh	r2, [r7, #6]
 8008c9c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2222      	movs	r2, #34	; 0x22
 8008ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d007      	beq.n	8008ccc <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	695a      	ldr	r2, [r3, #20]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f042 0201 	orr.w	r2, r2, #1
 8008cda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0220 	orr.w	r2, r2, #32
 8008cea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b089      	sub	sp, #36	; 0x24
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	330c      	adds	r3, #12
 8008d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	e853 3f00 	ldrex	r3, [r3]
 8008d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d18:	61fb      	str	r3, [r7, #28]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	330c      	adds	r3, #12
 8008d20:	69fa      	ldr	r2, [r7, #28]
 8008d22:	61ba      	str	r2, [r7, #24]
 8008d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d26:	6979      	ldr	r1, [r7, #20]
 8008d28:	69ba      	ldr	r2, [r7, #24]
 8008d2a:	e841 2300 	strex	r3, r2, [r1]
 8008d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1e5      	bne.n	8008d02 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008d3e:	bf00      	nop
 8008d40:	3724      	adds	r7, #36	; 0x24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b095      	sub	sp, #84	; 0x54
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	330c      	adds	r3, #12
 8008d58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	330c      	adds	r3, #12
 8008d70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d72:	643a      	str	r2, [r7, #64]	; 0x40
 8008d74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e5      	bne.n	8008d52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3314      	adds	r3, #20
 8008d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	f023 0301 	bic.w	r3, r3, #1
 8008d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3314      	adds	r3, #20
 8008da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008da8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e5      	bne.n	8008d86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d119      	bne.n	8008df6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	330c      	adds	r3, #12
 8008dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	e853 3f00 	ldrex	r3, [r3]
 8008dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f023 0310 	bic.w	r3, r3, #16
 8008dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	330c      	adds	r3, #12
 8008de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008de2:	61ba      	str	r2, [r7, #24]
 8008de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	6979      	ldr	r1, [r7, #20]
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	e841 2300 	strex	r3, r2, [r1]
 8008dee:	613b      	str	r3, [r7, #16]
   return(result);
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e5      	bne.n	8008dc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e04:	bf00      	nop
 8008e06:	3754      	adds	r7, #84	; 0x54
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7ff fe6c 	bl	8008b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e30:	bf00      	nop
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b21      	cmp	r3, #33	; 0x21
 8008e4a:	d13e      	bne.n	8008eca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e54:	d114      	bne.n	8008e80 <UART_Transmit_IT+0x48>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d110      	bne.n	8008e80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	1c9a      	adds	r2, r3, #2
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	621a      	str	r2, [r3, #32]
 8008e7e:	e008      	b.n	8008e92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a1b      	ldr	r3, [r3, #32]
 8008e84:	1c59      	adds	r1, r3, #1
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	6211      	str	r1, [r2, #32]
 8008e8a:	781a      	ldrb	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10f      	bne.n	8008ec6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008eb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68da      	ldr	r2, [r3, #12]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ec4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e000      	b.n	8008ecc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008eca:	2302      	movs	r3, #2
  }
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7f9 fe37 	bl	8002b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08c      	sub	sp, #48	; 0x30
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b22      	cmp	r3, #34	; 0x22
 8008f1a:	f040 80ab 	bne.w	8009074 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f26:	d117      	bne.n	8008f58 <UART_Receive_IT+0x50>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d113      	bne.n	8008f58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f30:	2300      	movs	r3, #0
 8008f32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f38:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f50:	1c9a      	adds	r2, r3, #2
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	629a      	str	r2, [r3, #40]	; 0x28
 8008f56:	e026      	b.n	8008fa6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f6a:	d007      	beq.n	8008f7c <UART_Receive_IT+0x74>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <UART_Receive_IT+0x82>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d106      	bne.n	8008f8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f86:	701a      	strb	r2, [r3, #0]
 8008f88:	e008      	b.n	8008f9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	3b01      	subs	r3, #1
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d15a      	bne.n	8009070 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 0220 	bic.w	r2, r2, #32
 8008fc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68da      	ldr	r2, [r3, #12]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	695a      	ldr	r2, [r3, #20]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 0201 	bic.w	r2, r2, #1
 8008fe8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2220      	movs	r2, #32
 8008fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d135      	bne.n	8009066 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	330c      	adds	r3, #12
 8009006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	613b      	str	r3, [r7, #16]
   return(result);
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	f023 0310 	bic.w	r3, r3, #16
 8009016:	627b      	str	r3, [r7, #36]	; 0x24
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	330c      	adds	r3, #12
 800901e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009020:	623a      	str	r2, [r7, #32]
 8009022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009024:	69f9      	ldr	r1, [r7, #28]
 8009026:	6a3a      	ldr	r2, [r7, #32]
 8009028:	e841 2300 	strex	r3, r2, [r1]
 800902c:	61bb      	str	r3, [r7, #24]
   return(result);
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e5      	bne.n	8009000 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0310 	and.w	r3, r3, #16
 800903e:	2b10      	cmp	r3, #16
 8009040:	d10a      	bne.n	8009058 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	60fb      	str	r3, [r7, #12]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f7ff fd5c 	bl	8008b1c <HAL_UARTEx_RxEventCallback>
 8009064:	e002      	b.n	800906c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7f9 fad6 	bl	8002618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	e002      	b.n	8009076 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	e000      	b.n	8009076 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009074:	2302      	movs	r3, #2
  }
}
 8009076:	4618      	mov	r0, r3
 8009078:	3730      	adds	r7, #48	; 0x30
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009084:	b0c0      	sub	sp, #256	; 0x100
 8009086:	af00      	add	r7, sp, #0
 8009088:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800908c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800909c:	68d9      	ldr	r1, [r3, #12]
 800909e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	ea40 0301 	orr.w	r3, r0, r1
 80090a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ae:	689a      	ldr	r2, [r3, #8]
 80090b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	431a      	orrs	r2, r3
 80090b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	431a      	orrs	r2, r3
 80090c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80090d8:	f021 010c 	bic.w	r1, r1, #12
 80090dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090e6:	430b      	orrs	r3, r1
 80090e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80090f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fa:	6999      	ldr	r1, [r3, #24]
 80090fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	ea40 0301 	orr.w	r3, r0, r1
 8009106:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	4b8f      	ldr	r3, [pc, #572]	; (800934c <UART_SetConfig+0x2cc>)
 8009110:	429a      	cmp	r2, r3
 8009112:	d005      	beq.n	8009120 <UART_SetConfig+0xa0>
 8009114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	4b8d      	ldr	r3, [pc, #564]	; (8009350 <UART_SetConfig+0x2d0>)
 800911c:	429a      	cmp	r2, r3
 800911e:	d104      	bne.n	800912a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009120:	f7fd fbc6 	bl	80068b0 <HAL_RCC_GetPCLK2Freq>
 8009124:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009128:	e003      	b.n	8009132 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800912a:	f7fd fbad 	bl	8006888 <HAL_RCC_GetPCLK1Freq>
 800912e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800913c:	f040 810c 	bne.w	8009358 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009144:	2200      	movs	r2, #0
 8009146:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800914a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800914e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009152:	4622      	mov	r2, r4
 8009154:	462b      	mov	r3, r5
 8009156:	1891      	adds	r1, r2, r2
 8009158:	65b9      	str	r1, [r7, #88]	; 0x58
 800915a:	415b      	adcs	r3, r3
 800915c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800915e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009162:	4621      	mov	r1, r4
 8009164:	eb12 0801 	adds.w	r8, r2, r1
 8009168:	4629      	mov	r1, r5
 800916a:	eb43 0901 	adc.w	r9, r3, r1
 800916e:	f04f 0200 	mov.w	r2, #0
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800917a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800917e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009182:	4690      	mov	r8, r2
 8009184:	4699      	mov	r9, r3
 8009186:	4623      	mov	r3, r4
 8009188:	eb18 0303 	adds.w	r3, r8, r3
 800918c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009190:	462b      	mov	r3, r5
 8009192:	eb49 0303 	adc.w	r3, r9, r3
 8009196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800919a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80091aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80091ae:	460b      	mov	r3, r1
 80091b0:	18db      	adds	r3, r3, r3
 80091b2:	653b      	str	r3, [r7, #80]	; 0x50
 80091b4:	4613      	mov	r3, r2
 80091b6:	eb42 0303 	adc.w	r3, r2, r3
 80091ba:	657b      	str	r3, [r7, #84]	; 0x54
 80091bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80091c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80091c4:	f7f7 fbb2 	bl	800092c <__aeabi_uldivmod>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4b61      	ldr	r3, [pc, #388]	; (8009354 <UART_SetConfig+0x2d4>)
 80091ce:	fba3 2302 	umull	r2, r3, r3, r2
 80091d2:	095b      	lsrs	r3, r3, #5
 80091d4:	011c      	lsls	r4, r3, #4
 80091d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091da:	2200      	movs	r2, #0
 80091dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80091e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80091e8:	4642      	mov	r2, r8
 80091ea:	464b      	mov	r3, r9
 80091ec:	1891      	adds	r1, r2, r2
 80091ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80091f0:	415b      	adcs	r3, r3
 80091f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80091f8:	4641      	mov	r1, r8
 80091fa:	eb12 0a01 	adds.w	sl, r2, r1
 80091fe:	4649      	mov	r1, r9
 8009200:	eb43 0b01 	adc.w	fp, r3, r1
 8009204:	f04f 0200 	mov.w	r2, #0
 8009208:	f04f 0300 	mov.w	r3, #0
 800920c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009210:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009218:	4692      	mov	sl, r2
 800921a:	469b      	mov	fp, r3
 800921c:	4643      	mov	r3, r8
 800921e:	eb1a 0303 	adds.w	r3, sl, r3
 8009222:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009226:	464b      	mov	r3, r9
 8009228:	eb4b 0303 	adc.w	r3, fp, r3
 800922c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800923c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009240:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009244:	460b      	mov	r3, r1
 8009246:	18db      	adds	r3, r3, r3
 8009248:	643b      	str	r3, [r7, #64]	; 0x40
 800924a:	4613      	mov	r3, r2
 800924c:	eb42 0303 	adc.w	r3, r2, r3
 8009250:	647b      	str	r3, [r7, #68]	; 0x44
 8009252:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009256:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800925a:	f7f7 fb67 	bl	800092c <__aeabi_uldivmod>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4611      	mov	r1, r2
 8009264:	4b3b      	ldr	r3, [pc, #236]	; (8009354 <UART_SetConfig+0x2d4>)
 8009266:	fba3 2301 	umull	r2, r3, r3, r1
 800926a:	095b      	lsrs	r3, r3, #5
 800926c:	2264      	movs	r2, #100	; 0x64
 800926e:	fb02 f303 	mul.w	r3, r2, r3
 8009272:	1acb      	subs	r3, r1, r3
 8009274:	00db      	lsls	r3, r3, #3
 8009276:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800927a:	4b36      	ldr	r3, [pc, #216]	; (8009354 <UART_SetConfig+0x2d4>)
 800927c:	fba3 2302 	umull	r2, r3, r3, r2
 8009280:	095b      	lsrs	r3, r3, #5
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009288:	441c      	add	r4, r3
 800928a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800928e:	2200      	movs	r2, #0
 8009290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009294:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009298:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800929c:	4642      	mov	r2, r8
 800929e:	464b      	mov	r3, r9
 80092a0:	1891      	adds	r1, r2, r2
 80092a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80092a4:	415b      	adcs	r3, r3
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092ac:	4641      	mov	r1, r8
 80092ae:	1851      	adds	r1, r2, r1
 80092b0:	6339      	str	r1, [r7, #48]	; 0x30
 80092b2:	4649      	mov	r1, r9
 80092b4:	414b      	adcs	r3, r1
 80092b6:	637b      	str	r3, [r7, #52]	; 0x34
 80092b8:	f04f 0200 	mov.w	r2, #0
 80092bc:	f04f 0300 	mov.w	r3, #0
 80092c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80092c4:	4659      	mov	r1, fp
 80092c6:	00cb      	lsls	r3, r1, #3
 80092c8:	4651      	mov	r1, sl
 80092ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092ce:	4651      	mov	r1, sl
 80092d0:	00ca      	lsls	r2, r1, #3
 80092d2:	4610      	mov	r0, r2
 80092d4:	4619      	mov	r1, r3
 80092d6:	4603      	mov	r3, r0
 80092d8:	4642      	mov	r2, r8
 80092da:	189b      	adds	r3, r3, r2
 80092dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092e0:	464b      	mov	r3, r9
 80092e2:	460a      	mov	r2, r1
 80092e4:	eb42 0303 	adc.w	r3, r2, r3
 80092e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80092f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80092fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009300:	460b      	mov	r3, r1
 8009302:	18db      	adds	r3, r3, r3
 8009304:	62bb      	str	r3, [r7, #40]	; 0x28
 8009306:	4613      	mov	r3, r2
 8009308:	eb42 0303 	adc.w	r3, r2, r3
 800930c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800930e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009312:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009316:	f7f7 fb09 	bl	800092c <__aeabi_uldivmod>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <UART_SetConfig+0x2d4>)
 8009320:	fba3 1302 	umull	r1, r3, r3, r2
 8009324:	095b      	lsrs	r3, r3, #5
 8009326:	2164      	movs	r1, #100	; 0x64
 8009328:	fb01 f303 	mul.w	r3, r1, r3
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	3332      	adds	r3, #50	; 0x32
 8009332:	4a08      	ldr	r2, [pc, #32]	; (8009354 <UART_SetConfig+0x2d4>)
 8009334:	fba2 2303 	umull	r2, r3, r2, r3
 8009338:	095b      	lsrs	r3, r3, #5
 800933a:	f003 0207 	and.w	r2, r3, #7
 800933e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4422      	add	r2, r4
 8009346:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009348:	e105      	b.n	8009556 <UART_SetConfig+0x4d6>
 800934a:	bf00      	nop
 800934c:	40011000 	.word	0x40011000
 8009350:	40011400 	.word	0x40011400
 8009354:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800935c:	2200      	movs	r2, #0
 800935e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009362:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009366:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800936a:	4642      	mov	r2, r8
 800936c:	464b      	mov	r3, r9
 800936e:	1891      	adds	r1, r2, r2
 8009370:	6239      	str	r1, [r7, #32]
 8009372:	415b      	adcs	r3, r3
 8009374:	627b      	str	r3, [r7, #36]	; 0x24
 8009376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800937a:	4641      	mov	r1, r8
 800937c:	1854      	adds	r4, r2, r1
 800937e:	4649      	mov	r1, r9
 8009380:	eb43 0501 	adc.w	r5, r3, r1
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	f04f 0300 	mov.w	r3, #0
 800938c:	00eb      	lsls	r3, r5, #3
 800938e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009392:	00e2      	lsls	r2, r4, #3
 8009394:	4614      	mov	r4, r2
 8009396:	461d      	mov	r5, r3
 8009398:	4643      	mov	r3, r8
 800939a:	18e3      	adds	r3, r4, r3
 800939c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093a0:	464b      	mov	r3, r9
 80093a2:	eb45 0303 	adc.w	r3, r5, r3
 80093a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80093aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80093b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80093ba:	f04f 0200 	mov.w	r2, #0
 80093be:	f04f 0300 	mov.w	r3, #0
 80093c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80093c6:	4629      	mov	r1, r5
 80093c8:	008b      	lsls	r3, r1, #2
 80093ca:	4621      	mov	r1, r4
 80093cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093d0:	4621      	mov	r1, r4
 80093d2:	008a      	lsls	r2, r1, #2
 80093d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80093d8:	f7f7 faa8 	bl	800092c <__aeabi_uldivmod>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4b60      	ldr	r3, [pc, #384]	; (8009564 <UART_SetConfig+0x4e4>)
 80093e2:	fba3 2302 	umull	r2, r3, r3, r2
 80093e6:	095b      	lsrs	r3, r3, #5
 80093e8:	011c      	lsls	r4, r3, #4
 80093ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ee:	2200      	movs	r2, #0
 80093f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80093f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80093f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80093fc:	4642      	mov	r2, r8
 80093fe:	464b      	mov	r3, r9
 8009400:	1891      	adds	r1, r2, r2
 8009402:	61b9      	str	r1, [r7, #24]
 8009404:	415b      	adcs	r3, r3
 8009406:	61fb      	str	r3, [r7, #28]
 8009408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800940c:	4641      	mov	r1, r8
 800940e:	1851      	adds	r1, r2, r1
 8009410:	6139      	str	r1, [r7, #16]
 8009412:	4649      	mov	r1, r9
 8009414:	414b      	adcs	r3, r1
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	f04f 0200 	mov.w	r2, #0
 800941c:	f04f 0300 	mov.w	r3, #0
 8009420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009424:	4659      	mov	r1, fp
 8009426:	00cb      	lsls	r3, r1, #3
 8009428:	4651      	mov	r1, sl
 800942a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800942e:	4651      	mov	r1, sl
 8009430:	00ca      	lsls	r2, r1, #3
 8009432:	4610      	mov	r0, r2
 8009434:	4619      	mov	r1, r3
 8009436:	4603      	mov	r3, r0
 8009438:	4642      	mov	r2, r8
 800943a:	189b      	adds	r3, r3, r2
 800943c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009440:	464b      	mov	r3, r9
 8009442:	460a      	mov	r2, r1
 8009444:	eb42 0303 	adc.w	r3, r2, r3
 8009448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800944c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	67bb      	str	r3, [r7, #120]	; 0x78
 8009456:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009458:	f04f 0200 	mov.w	r2, #0
 800945c:	f04f 0300 	mov.w	r3, #0
 8009460:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009464:	4649      	mov	r1, r9
 8009466:	008b      	lsls	r3, r1, #2
 8009468:	4641      	mov	r1, r8
 800946a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800946e:	4641      	mov	r1, r8
 8009470:	008a      	lsls	r2, r1, #2
 8009472:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009476:	f7f7 fa59 	bl	800092c <__aeabi_uldivmod>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4b39      	ldr	r3, [pc, #228]	; (8009564 <UART_SetConfig+0x4e4>)
 8009480:	fba3 1302 	umull	r1, r3, r3, r2
 8009484:	095b      	lsrs	r3, r3, #5
 8009486:	2164      	movs	r1, #100	; 0x64
 8009488:	fb01 f303 	mul.w	r3, r1, r3
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	011b      	lsls	r3, r3, #4
 8009490:	3332      	adds	r3, #50	; 0x32
 8009492:	4a34      	ldr	r2, [pc, #208]	; (8009564 <UART_SetConfig+0x4e4>)
 8009494:	fba2 2303 	umull	r2, r3, r2, r3
 8009498:	095b      	lsrs	r3, r3, #5
 800949a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800949e:	441c      	add	r4, r3
 80094a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094a4:	2200      	movs	r2, #0
 80094a6:	673b      	str	r3, [r7, #112]	; 0x70
 80094a8:	677a      	str	r2, [r7, #116]	; 0x74
 80094aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80094ae:	4642      	mov	r2, r8
 80094b0:	464b      	mov	r3, r9
 80094b2:	1891      	adds	r1, r2, r2
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	415b      	adcs	r3, r3
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094be:	4641      	mov	r1, r8
 80094c0:	1851      	adds	r1, r2, r1
 80094c2:	6039      	str	r1, [r7, #0]
 80094c4:	4649      	mov	r1, r9
 80094c6:	414b      	adcs	r3, r1
 80094c8:	607b      	str	r3, [r7, #4]
 80094ca:	f04f 0200 	mov.w	r2, #0
 80094ce:	f04f 0300 	mov.w	r3, #0
 80094d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094d6:	4659      	mov	r1, fp
 80094d8:	00cb      	lsls	r3, r1, #3
 80094da:	4651      	mov	r1, sl
 80094dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094e0:	4651      	mov	r1, sl
 80094e2:	00ca      	lsls	r2, r1, #3
 80094e4:	4610      	mov	r0, r2
 80094e6:	4619      	mov	r1, r3
 80094e8:	4603      	mov	r3, r0
 80094ea:	4642      	mov	r2, r8
 80094ec:	189b      	adds	r3, r3, r2
 80094ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80094f0:	464b      	mov	r3, r9
 80094f2:	460a      	mov	r2, r1
 80094f4:	eb42 0303 	adc.w	r3, r2, r3
 80094f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	663b      	str	r3, [r7, #96]	; 0x60
 8009504:	667a      	str	r2, [r7, #100]	; 0x64
 8009506:	f04f 0200 	mov.w	r2, #0
 800950a:	f04f 0300 	mov.w	r3, #0
 800950e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009512:	4649      	mov	r1, r9
 8009514:	008b      	lsls	r3, r1, #2
 8009516:	4641      	mov	r1, r8
 8009518:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800951c:	4641      	mov	r1, r8
 800951e:	008a      	lsls	r2, r1, #2
 8009520:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009524:	f7f7 fa02 	bl	800092c <__aeabi_uldivmod>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <UART_SetConfig+0x4e4>)
 800952e:	fba3 1302 	umull	r1, r3, r3, r2
 8009532:	095b      	lsrs	r3, r3, #5
 8009534:	2164      	movs	r1, #100	; 0x64
 8009536:	fb01 f303 	mul.w	r3, r1, r3
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	011b      	lsls	r3, r3, #4
 800953e:	3332      	adds	r3, #50	; 0x32
 8009540:	4a08      	ldr	r2, [pc, #32]	; (8009564 <UART_SetConfig+0x4e4>)
 8009542:	fba2 2303 	umull	r2, r3, r2, r3
 8009546:	095b      	lsrs	r3, r3, #5
 8009548:	f003 020f 	and.w	r2, r3, #15
 800954c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4422      	add	r2, r4
 8009554:	609a      	str	r2, [r3, #8]
}
 8009556:	bf00      	nop
 8009558:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800955c:	46bd      	mov	sp, r7
 800955e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009562:	bf00      	nop
 8009564:	51eb851f 	.word	0x51eb851f

08009568 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b10      	cmp	r3, #16
 8009578:	d11c      	bne.n	80095b4 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	4b1f      	ldr	r3, [pc, #124]	; (80095fc <FSMC_NAND_Init+0x94>)
 8009580:	4013      	ands	r3, r2
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	6851      	ldr	r1, [r2, #4]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	6892      	ldr	r2, [r2, #8]
 800958a:	4311      	orrs	r1, r2
 800958c:	683a      	ldr	r2, [r7, #0]
 800958e:	68d2      	ldr	r2, [r2, #12]
 8009590:	4311      	orrs	r1, r2
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	6912      	ldr	r2, [r2, #16]
 8009596:	4311      	orrs	r1, r2
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	6952      	ldr	r2, [r2, #20]
 800959c:	0252      	lsls	r2, r2, #9
 800959e:	4311      	orrs	r1, r2
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	6992      	ldr	r2, [r2, #24]
 80095a4:	0352      	lsls	r2, r2, #13
 80095a6:	430a      	orrs	r2, r1
 80095a8:	4313      	orrs	r3, r2
 80095aa:	f043 0208 	orr.w	r2, r3, #8
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	e01b      	b.n	80095ec <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1a      	ldr	r2, [r3, #32]
 80095b8:	4b10      	ldr	r3, [pc, #64]	; (80095fc <FSMC_NAND_Init+0x94>)
 80095ba:	4013      	ands	r3, r2
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	6851      	ldr	r1, [r2, #4]
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	6892      	ldr	r2, [r2, #8]
 80095c4:	4311      	orrs	r1, r2
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	68d2      	ldr	r2, [r2, #12]
 80095ca:	4311      	orrs	r1, r2
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	6912      	ldr	r2, [r2, #16]
 80095d0:	4311      	orrs	r1, r2
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	6952      	ldr	r2, [r2, #20]
 80095d6:	0252      	lsls	r2, r2, #9
 80095d8:	4311      	orrs	r1, r2
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	6992      	ldr	r2, [r2, #24]
 80095de:	0352      	lsls	r2, r2, #13
 80095e0:	430a      	orrs	r2, r1
 80095e2:	4313      	orrs	r3, r2
 80095e4:	f043 0208 	orr.w	r2, r3, #8
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	fff00181 	.word	0xfff00181

08009600 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b10      	cmp	r3, #16
 8009610:	d112      	bne.n	8009638 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	021b      	lsls	r3, r3, #8
 8009620:	431a      	orrs	r2, r3
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	041b      	lsls	r3, r3, #16
 8009628:	431a      	orrs	r2, r3
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	061b      	lsls	r3, r3, #24
 8009630:	431a      	orrs	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	609a      	str	r2, [r3, #8]
 8009636:	e011      	b.n	800965c <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	021b      	lsls	r3, r3, #8
 8009646:	431a      	orrs	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	041b      	lsls	r3, r3, #16
 800964e:	431a      	orrs	r2, r3
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	061b      	lsls	r3, r3, #24
 8009656:	431a      	orrs	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800966a:	b480      	push	{r7}
 800966c:	b085      	sub	sp, #20
 800966e:	af00      	add	r7, sp, #0
 8009670:	60f8      	str	r0, [r7, #12]
 8009672:	60b9      	str	r1, [r7, #8]
 8009674:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b10      	cmp	r3, #16
 800967a:	d112      	bne.n	80096a2 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	021b      	lsls	r3, r3, #8
 800968a:	431a      	orrs	r2, r3
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	041b      	lsls	r3, r3, #16
 8009692:	431a      	orrs	r2, r3
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	061b      	lsls	r3, r3, #24
 800969a:	431a      	orrs	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	60da      	str	r2, [r3, #12]
 80096a0:	e011      	b.n	80096c6 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	021b      	lsls	r3, r3, #8
 80096b0:	431a      	orrs	r2, r3
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	041b      	lsls	r3, r3, #16
 80096b8:	431a      	orrs	r2, r3
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	061b      	lsls	r3, r3, #24
 80096c0:	431a      	orrs	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NAND_DEVICE(Device));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Disable ECC feature */
  if (Bank == FSMC_NAND_BANK2)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d106      	bne.n	80096f2 <FSMC_NAND_ECC_Disable+0x1e>
  {
    CLEAR_BIT(Device->PCR2, FSMC_PCR2_ECCEN);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	e005      	b.n	80096fe <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    CLEAR_BIT(Device->PCR3, FSMC_PCR2_ECCEN);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	621a      	str	r2, [r3, #32]
  }

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <__NVIC_SetPriority>:
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	4603      	mov	r3, r0
 8009714:	6039      	str	r1, [r7, #0]
 8009716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800971c:	2b00      	cmp	r3, #0
 800971e:	db0a      	blt.n	8009736 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	b2da      	uxtb	r2, r3
 8009724:	490c      	ldr	r1, [pc, #48]	; (8009758 <__NVIC_SetPriority+0x4c>)
 8009726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800972a:	0112      	lsls	r2, r2, #4
 800972c:	b2d2      	uxtb	r2, r2
 800972e:	440b      	add	r3, r1
 8009730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009734:	e00a      	b.n	800974c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	b2da      	uxtb	r2, r3
 800973a:	4908      	ldr	r1, [pc, #32]	; (800975c <__NVIC_SetPriority+0x50>)
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	f003 030f 	and.w	r3, r3, #15
 8009742:	3b04      	subs	r3, #4
 8009744:	0112      	lsls	r2, r2, #4
 8009746:	b2d2      	uxtb	r2, r2
 8009748:	440b      	add	r3, r1
 800974a:	761a      	strb	r2, [r3, #24]
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	e000e100 	.word	0xe000e100
 800975c:	e000ed00 	.word	0xe000ed00

08009760 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009760:	b580      	push	{r7, lr}
 8009762:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009764:	4b05      	ldr	r3, [pc, #20]	; (800977c <SysTick_Handler+0x1c>)
 8009766:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009768:	f002 f856 	bl	800b818 <xTaskGetSchedulerState>
 800976c:	4603      	mov	r3, r0
 800976e:	2b01      	cmp	r3, #1
 8009770:	d001      	beq.n	8009776 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009772:	f002 fe41 	bl	800c3f8 <xPortSysTickHandler>
  }
}
 8009776:	bf00      	nop
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	e000e010 	.word	0xe000e010

08009780 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009784:	2100      	movs	r1, #0
 8009786:	f06f 0004 	mvn.w	r0, #4
 800978a:	f7ff ffbf 	bl	800970c <__NVIC_SetPriority>
#endif
}
 800978e:	bf00      	nop
 8009790:	bd80      	pop	{r7, pc}
	...

08009794 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800979a:	f3ef 8305 	mrs	r3, IPSR
 800979e:	603b      	str	r3, [r7, #0]
  return(result);
 80097a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80097a6:	f06f 0305 	mvn.w	r3, #5
 80097aa:	607b      	str	r3, [r7, #4]
 80097ac:	e00f      	b.n	80097ce <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 80097ae:	4b0a      	ldr	r3, [pc, #40]	; (80097d8 <osKernelInitialize+0x44>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d108      	bne.n	80097c8 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 80097b6:	4809      	ldr	r0, [pc, #36]	; (80097dc <osKernelInitialize+0x48>)
 80097b8:	f003 f81a 	bl	800c7f0 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 80097bc:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <osKernelInitialize+0x44>)
 80097be:	2201      	movs	r2, #1
 80097c0:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	607b      	str	r3, [r7, #4]
 80097c6:	e002      	b.n	80097ce <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 80097c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097cc:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80097ce:	687b      	ldr	r3, [r7, #4]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	20002c08 	.word	0x20002c08
 80097dc:	200000b0 	.word	0x200000b0

080097e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097e6:	f3ef 8305 	mrs	r3, IPSR
 80097ea:	603b      	str	r3, [r7, #0]
  return(result);
 80097ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80097f2:	f06f 0305 	mvn.w	r3, #5
 80097f6:	607b      	str	r3, [r7, #4]
 80097f8:	e010      	b.n	800981c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80097fa:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <osKernelStart+0x48>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d109      	bne.n	8009816 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009802:	f7ff ffbd 	bl	8009780 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009806:	4b08      	ldr	r3, [pc, #32]	; (8009828 <osKernelStart+0x48>)
 8009808:	2202      	movs	r2, #2
 800980a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800980c:	f001 fba8 	bl	800af60 <vTaskStartScheduler>
      stat = osOK;
 8009810:	2300      	movs	r3, #0
 8009812:	607b      	str	r3, [r7, #4]
 8009814:	e002      	b.n	800981c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800981a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800981c:	687b      	ldr	r3, [r7, #4]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20002c08 	.word	0x20002c08

0800982c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800982c:	b580      	push	{r7, lr}
 800982e:	b08e      	sub	sp, #56	; 0x38
 8009830:	af04      	add	r7, sp, #16
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009838:	2300      	movs	r3, #0
 800983a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800983c:	f3ef 8305 	mrs	r3, IPSR
 8009840:	617b      	str	r3, [r7, #20]
  return(result);
 8009842:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009844:	2b00      	cmp	r3, #0
 8009846:	d17e      	bne.n	8009946 <osThreadNew+0x11a>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d07b      	beq.n	8009946 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800984e:	2380      	movs	r3, #128	; 0x80
 8009850:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009852:	2318      	movs	r3, #24
 8009854:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009856:	2300      	movs	r3, #0
 8009858:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800985a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800985e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d045      	beq.n	80098f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <osThreadNew+0x48>
        name = attr->name;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d002      	beq.n	8009882 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d008      	beq.n	800989a <osThreadNew+0x6e>
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	2b38      	cmp	r3, #56	; 0x38
 800988c:	d805      	bhi.n	800989a <osThreadNew+0x6e>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f003 0301 	and.w	r3, r3, #1
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <osThreadNew+0x72>
        return (NULL);
 800989a:	2300      	movs	r3, #0
 800989c:	e054      	b.n	8009948 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	089b      	lsrs	r3, r3, #2
 80098ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00e      	beq.n	80098d4 <osThreadNew+0xa8>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	2bbb      	cmp	r3, #187	; 0xbb
 80098bc:	d90a      	bls.n	80098d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d006      	beq.n	80098d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <osThreadNew+0xa8>
        mem = 1;
 80098ce:	2301      	movs	r3, #1
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	e010      	b.n	80098f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10c      	bne.n	80098f6 <osThreadNew+0xca>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d108      	bne.n	80098f6 <osThreadNew+0xca>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d104      	bne.n	80098f6 <osThreadNew+0xca>
          mem = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	61bb      	str	r3, [r7, #24]
 80098f0:	e001      	b.n	80098f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d110      	bne.n	800991e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009904:	9202      	str	r2, [sp, #8]
 8009906:	9301      	str	r3, [sp, #4]
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	6a3a      	ldr	r2, [r7, #32]
 8009910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f001 f938 	bl	800ab88 <xTaskCreateStatic>
 8009918:	4603      	mov	r3, r0
 800991a:	613b      	str	r3, [r7, #16]
 800991c:	e013      	b.n	8009946 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d110      	bne.n	8009946 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	b29a      	uxth	r2, r3
 8009928:	f107 0310 	add.w	r3, r7, #16
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f001 f983 	bl	800ac42 <xTaskCreate>
 800993c:	4603      	mov	r3, r0
 800993e:	2b01      	cmp	r3, #1
 8009940:	d001      	beq.n	8009946 <osThreadNew+0x11a>
            hTask = NULL;
 8009942:	2300      	movs	r3, #0
 8009944:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009946:	693b      	ldr	r3, [r7, #16]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3728      	adds	r7, #40	; 0x28
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009958:	f3ef 8305 	mrs	r3, IPSR
 800995c:	60bb      	str	r3, [r7, #8]
  return(result);
 800995e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <osDelay+0x1c>
    stat = osErrorISR;
 8009964:	f06f 0305 	mvn.w	r3, #5
 8009968:	60fb      	str	r3, [r7, #12]
 800996a:	e007      	b.n	800997c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 fabe 	bl	800aef8 <vTaskDelay>
    }
  }

  return (stat);
 800997c:	68fb      	ldr	r3, [r7, #12]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009986:	b580      	push	{r7, lr}
 8009988:	b08a      	sub	sp, #40	; 0x28
 800998a:	af02      	add	r7, sp, #8
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009996:	f3ef 8305 	mrs	r3, IPSR
 800999a:	613b      	str	r3, [r7, #16]
  return(result);
 800999c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d175      	bne.n	8009a8e <osSemaphoreNew+0x108>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d072      	beq.n	8009a8e <osSemaphoreNew+0x108>
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d86e      	bhi.n	8009a8e <osSemaphoreNew+0x108>
    mem = -1;
 80099b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d015      	beq.n	80099e8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d006      	beq.n	80099d2 <osSemaphoreNew+0x4c>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	2b4f      	cmp	r3, #79	; 0x4f
 80099ca:	d902      	bls.n	80099d2 <osSemaphoreNew+0x4c>
        mem = 1;
 80099cc:	2301      	movs	r3, #1
 80099ce:	61bb      	str	r3, [r7, #24]
 80099d0:	e00c      	b.n	80099ec <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d108      	bne.n	80099ec <osSemaphoreNew+0x66>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d104      	bne.n	80099ec <osSemaphoreNew+0x66>
          mem = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	e001      	b.n	80099ec <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099f2:	d04c      	beq.n	8009a8e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d128      	bne.n	8009a4c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d10a      	bne.n	8009a16 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	2203      	movs	r2, #3
 8009a06:	9200      	str	r2, [sp, #0]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	2001      	movs	r0, #1
 8009a0e:	f000 fac5 	bl	8009f9c <xQueueGenericCreateStatic>
 8009a12:	61f8      	str	r0, [r7, #28]
 8009a14:	e005      	b.n	8009a22 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009a16:	2203      	movs	r2, #3
 8009a18:	2100      	movs	r1, #0
 8009a1a:	2001      	movs	r0, #1
 8009a1c:	f000 fb36 	bl	800a08c <xQueueGenericCreate>
 8009a20:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d022      	beq.n	8009a6e <osSemaphoreNew+0xe8>
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d01f      	beq.n	8009a6e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009a2e:	2300      	movs	r3, #0
 8009a30:	2200      	movs	r2, #0
 8009a32:	2100      	movs	r1, #0
 8009a34:	69f8      	ldr	r0, [r7, #28]
 8009a36:	f000 fbf1 	bl	800a21c <xQueueGenericSend>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d016      	beq.n	8009a6e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009a40:	69f8      	ldr	r0, [r7, #28]
 8009a42:	f000 fee5 	bl	800a810 <vQueueDelete>
            hSemaphore = NULL;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61fb      	str	r3, [r7, #28]
 8009a4a:	e010      	b.n	8009a6e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d108      	bne.n	8009a64 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	461a      	mov	r2, r3
 8009a58:	68b9      	ldr	r1, [r7, #8]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 fb73 	bl	800a146 <xQueueCreateCountingSemaphoreStatic>
 8009a60:	61f8      	str	r0, [r7, #28]
 8009a62:	e004      	b.n	8009a6e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 fba4 	bl	800a1b4 <xQueueCreateCountingSemaphore>
 8009a6c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00c      	beq.n	8009a8e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	617b      	str	r3, [r7, #20]
 8009a80:	e001      	b.n	8009a86 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009a82:	2300      	movs	r3, #0
 8009a84:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009a86:	6979      	ldr	r1, [r7, #20]
 8009a88:	69f8      	ldr	r0, [r7, #28]
 8009a8a:	f000 fff5 	bl	800aa78 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009a8e:	69fb      	ldr	r3, [r7, #28]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3720      	adds	r7, #32
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	; 0x28
 8009a9c:	af02      	add	r7, sp, #8
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aa8:	f3ef 8305 	mrs	r3, IPSR
 8009aac:	613b      	str	r3, [r7, #16]
  return(result);
 8009aae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d15f      	bne.n	8009b74 <osMessageQueueNew+0xdc>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d05c      	beq.n	8009b74 <osMessageQueueNew+0xdc>
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d059      	beq.n	8009b74 <osMessageQueueNew+0xdc>
    mem = -1;
 8009ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ac4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d029      	beq.n	8009b20 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d012      	beq.n	8009afa <osMessageQueueNew+0x62>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	2b4f      	cmp	r3, #79	; 0x4f
 8009ada:	d90e      	bls.n	8009afa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00a      	beq.n	8009afa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	695a      	ldr	r2, [r3, #20]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	68b9      	ldr	r1, [r7, #8]
 8009aec:	fb01 f303 	mul.w	r3, r1, r3
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d302      	bcc.n	8009afa <osMessageQueueNew+0x62>
        mem = 1;
 8009af4:	2301      	movs	r3, #1
 8009af6:	61bb      	str	r3, [r7, #24]
 8009af8:	e014      	b.n	8009b24 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d110      	bne.n	8009b24 <osMessageQueueNew+0x8c>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10c      	bne.n	8009b24 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d108      	bne.n	8009b24 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	695b      	ldr	r3, [r3, #20]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d104      	bne.n	8009b24 <osMessageQueueNew+0x8c>
          mem = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	61bb      	str	r3, [r7, #24]
 8009b1e:	e001      	b.n	8009b24 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d10b      	bne.n	8009b42 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	691a      	ldr	r2, [r3, #16]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	2100      	movs	r1, #0
 8009b34:	9100      	str	r1, [sp, #0]
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 fa2f 	bl	8009f9c <xQueueGenericCreateStatic>
 8009b3e:	61f8      	str	r0, [r7, #28]
 8009b40:	e008      	b.n	8009b54 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d105      	bne.n	8009b54 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009b48:	2200      	movs	r2, #0
 8009b4a:	68b9      	ldr	r1, [r7, #8]
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 fa9d 	bl	800a08c <xQueueGenericCreate>
 8009b52:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00c      	beq.n	8009b74 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d003      	beq.n	8009b68 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	617b      	str	r3, [r7, #20]
 8009b66:	e001      	b.n	8009b6c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009b6c:	6979      	ldr	r1, [r7, #20]
 8009b6e:	69f8      	ldr	r0, [r7, #28]
 8009b70:	f000 ff82 	bl	800aa78 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009b74:	69fb      	ldr	r3, [r7, #28]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3720      	adds	r7, #32
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
	...

08009b80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b088      	sub	sp, #32
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b98:	f3ef 8305 	mrs	r3, IPSR
 8009b9c:	617b      	str	r3, [r7, #20]
  return(result);
 8009b9e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d028      	beq.n	8009bf6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d005      	beq.n	8009bb6 <osMessageQueuePut+0x36>
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <osMessageQueuePut+0x36>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009bb6:	f06f 0303 	mvn.w	r3, #3
 8009bba:	61fb      	str	r3, [r7, #28]
 8009bbc:	e038      	b.n	8009c30 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009bc2:	f107 0210 	add.w	r2, r7, #16
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	68b9      	ldr	r1, [r7, #8]
 8009bca:	69b8      	ldr	r0, [r7, #24]
 8009bcc:	f000 fc24 	bl	800a418 <xQueueGenericSendFromISR>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d003      	beq.n	8009bde <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009bd6:	f06f 0302 	mvn.w	r3, #2
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	e028      	b.n	8009c30 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d025      	beq.n	8009c30 <osMessageQueuePut+0xb0>
 8009be4:	4b15      	ldr	r3, [pc, #84]	; (8009c3c <osMessageQueuePut+0xbc>)
 8009be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bea:	601a      	str	r2, [r3, #0]
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	e01c      	b.n	8009c30 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <osMessageQueuePut+0x82>
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d103      	bne.n	8009c0a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009c02:	f06f 0303 	mvn.w	r3, #3
 8009c06:	61fb      	str	r3, [r7, #28]
 8009c08:	e012      	b.n	8009c30 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	68b9      	ldr	r1, [r7, #8]
 8009c10:	69b8      	ldr	r0, [r7, #24]
 8009c12:	f000 fb03 	bl	800a21c <xQueueGenericSend>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d009      	beq.n	8009c30 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009c22:	f06f 0301 	mvn.w	r3, #1
 8009c26:	61fb      	str	r3, [r7, #28]
 8009c28:	e002      	b.n	8009c30 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009c2a:	f06f 0302 	mvn.w	r3, #2
 8009c2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009c30:	69fb      	ldr	r3, [r7, #28]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3720      	adds	r7, #32
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	e000ed04 	.word	0xe000ed04

08009c40 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b088      	sub	sp, #32
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
 8009c4c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c56:	f3ef 8305 	mrs	r3, IPSR
 8009c5a:	617b      	str	r3, [r7, #20]
  return(result);
 8009c5c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d028      	beq.n	8009cb4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d005      	beq.n	8009c74 <osMessageQueueGet+0x34>
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <osMessageQueueGet+0x34>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d003      	beq.n	8009c7c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009c74:	f06f 0303 	mvn.w	r3, #3
 8009c78:	61fb      	str	r3, [r7, #28]
 8009c7a:	e037      	b.n	8009cec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009c80:	f107 0310 	add.w	r3, r7, #16
 8009c84:	461a      	mov	r2, r3
 8009c86:	68b9      	ldr	r1, [r7, #8]
 8009c88:	69b8      	ldr	r0, [r7, #24]
 8009c8a:	f000 fd41 	bl	800a710 <xQueueReceiveFromISR>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d003      	beq.n	8009c9c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009c94:	f06f 0302 	mvn.w	r3, #2
 8009c98:	61fb      	str	r3, [r7, #28]
 8009c9a:	e027      	b.n	8009cec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d024      	beq.n	8009cec <osMessageQueueGet+0xac>
 8009ca2:	4b15      	ldr	r3, [pc, #84]	; (8009cf8 <osMessageQueueGet+0xb8>)
 8009ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	e01b      	b.n	8009cec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <osMessageQueueGet+0x80>
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d103      	bne.n	8009cc8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009cc0:	f06f 0303 	mvn.w	r3, #3
 8009cc4:	61fb      	str	r3, [r7, #28]
 8009cc6:	e011      	b.n	8009cec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	68b9      	ldr	r1, [r7, #8]
 8009ccc:	69b8      	ldr	r0, [r7, #24]
 8009cce:	f000 fc3f 	bl	800a550 <xQueueReceive>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d009      	beq.n	8009cec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009cde:	f06f 0301 	mvn.w	r3, #1
 8009ce2:	61fb      	str	r3, [r7, #28]
 8009ce4:	e002      	b.n	8009cec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009ce6:	f06f 0302 	mvn.w	r3, #2
 8009cea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009cec:	69fb      	ldr	r3, [r7, #28]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3720      	adds	r7, #32
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	e000ed04 	.word	0xe000ed04

08009cfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4a07      	ldr	r2, [pc, #28]	; (8009d28 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	4a06      	ldr	r2, [pc, #24]	; (8009d2c <vApplicationGetIdleTaskMemory+0x30>)
 8009d12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2280      	movs	r2, #128	; 0x80
 8009d18:	601a      	str	r2, [r3, #0]
}
 8009d1a:	bf00      	nop
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	20006c0c 	.word	0x20006c0c
 8009d2c:	20006cc8 	.word	0x20006cc8

08009d30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4a07      	ldr	r2, [pc, #28]	; (8009d5c <vApplicationGetTimerTaskMemory+0x2c>)
 8009d40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	4a06      	ldr	r2, [pc, #24]	; (8009d60 <vApplicationGetTimerTaskMemory+0x30>)
 8009d46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d4e:	601a      	str	r2, [r3, #0]
}
 8009d50:	bf00      	nop
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	20006ec8 	.word	0x20006ec8
 8009d60:	20006f84 	.word	0x20006f84

08009d64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f103 0208 	add.w	r2, r3, #8
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f103 0208 	add.w	r2, r3, #8
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f103 0208 	add.w	r2, r3, #8
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009db2:	bf00      	nop
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b085      	sub	sp, #20
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	689a      	ldr	r2, [r3, #8]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	1c5a      	adds	r2, r3, #1
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	601a      	str	r2, [r3, #0]
}
 8009dfa:	bf00      	nop
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e06:	b480      	push	{r7}
 8009e08:	b085      	sub	sp, #20
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e1c:	d103      	bne.n	8009e26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	e00c      	b.n	8009e40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	3308      	adds	r3, #8
 8009e2a:	60fb      	str	r3, [r7, #12]
 8009e2c:	e002      	b.n	8009e34 <vListInsert+0x2e>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	60fb      	str	r3, [r7, #12]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d2f6      	bcs.n	8009e2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	683a      	ldr	r2, [r7, #0]
 8009e5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	601a      	str	r2, [r3, #0]
}
 8009e6c:	bf00      	nop
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	6892      	ldr	r2, [r2, #8]
 8009e8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	6852      	ldr	r2, [r2, #4]
 8009e98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d103      	bne.n	8009eac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	1e5a      	subs	r2, r3, #1
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10a      	bne.n	8009ef6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ef2:	bf00      	nop
 8009ef4:	e7fe      	b.n	8009ef4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ef6:	f002 f9ed 	bl	800c2d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f02:	68f9      	ldr	r1, [r7, #12]
 8009f04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f06:	fb01 f303 	mul.w	r3, r1, r3
 8009f0a:	441a      	add	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f26:	3b01      	subs	r3, #1
 8009f28:	68f9      	ldr	r1, [r7, #12]
 8009f2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f2c:	fb01 f303 	mul.w	r3, r1, r3
 8009f30:	441a      	add	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	22ff      	movs	r2, #255	; 0xff
 8009f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	22ff      	movs	r2, #255	; 0xff
 8009f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d114      	bne.n	8009f76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d01a      	beq.n	8009f8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3310      	adds	r3, #16
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 fa9b 	bl	800b494 <xTaskRemoveFromEventList>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d012      	beq.n	8009f8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f64:	4b0c      	ldr	r3, [pc, #48]	; (8009f98 <xQueueGenericReset+0xcc>)
 8009f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f6a:	601a      	str	r2, [r3, #0]
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	e009      	b.n	8009f8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3310      	adds	r3, #16
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7ff fef2 	bl	8009d64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3324      	adds	r3, #36	; 0x24
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7ff feed 	bl	8009d64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f8a:	f002 f9d3 	bl	800c334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f8e:	2301      	movs	r3, #1
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08e      	sub	sp, #56	; 0x38
 8009fa0:	af02      	add	r7, sp, #8
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10a      	bne.n	8009fc6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fc2:	bf00      	nop
 8009fc4:	e7fe      	b.n	8009fc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <xQueueGenericCreateStatic+0x52>
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <xQueueGenericCreateStatic+0x56>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e000      	b.n	8009ff4 <xQueueGenericCreateStatic+0x58>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	623b      	str	r3, [r7, #32]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <xQueueGenericCreateStatic+0x7e>
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <xQueueGenericCreateStatic+0x82>
 800a01a:	2301      	movs	r3, #1
 800a01c:	e000      	b.n	800a020 <xQueueGenericCreateStatic+0x84>
 800a01e:	2300      	movs	r3, #0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10a      	bne.n	800a03a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	61fb      	str	r3, [r7, #28]
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a03a:	2350      	movs	r3, #80	; 0x50
 800a03c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b50      	cmp	r3, #80	; 0x50
 800a042:	d00a      	beq.n	800a05a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	61bb      	str	r3, [r7, #24]
}
 800a056:	bf00      	nop
 800a058:	e7fe      	b.n	800a058 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a05a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00d      	beq.n	800a082 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a06e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	4613      	mov	r3, r2
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	68b9      	ldr	r1, [r7, #8]
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f000 f83f 	bl	800a100 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a084:	4618      	mov	r0, r3
 800a086:	3730      	adds	r7, #48	; 0x30
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08a      	sub	sp, #40	; 0x28
 800a090:	af02      	add	r7, sp, #8
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	4613      	mov	r3, r2
 800a098:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	613b      	str	r3, [r7, #16]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	fb02 f303 	mul.w	r3, r2, r3
 800a0be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	3350      	adds	r3, #80	; 0x50
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f002 fa27 	bl	800c518 <pvPortMalloc>
 800a0ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d011      	beq.n	800a0f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	3350      	adds	r3, #80	; 0x50
 800a0da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0e4:	79fa      	ldrb	r2, [r7, #7]
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 f805 	bl	800a100 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
	}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3720      	adds	r7, #32
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d103      	bne.n	800a11c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	69ba      	ldr	r2, [r7, #24]
 800a118:	601a      	str	r2, [r3, #0]
 800a11a:	e002      	b.n	800a122 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a12e:	2101      	movs	r1, #1
 800a130:	69b8      	ldr	r0, [r7, #24]
 800a132:	f7ff fecb 	bl	8009ecc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	78fa      	ldrb	r2, [r7, #3]
 800a13a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a13e:	bf00      	nop
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a146:	b580      	push	{r7, lr}
 800a148:	b08a      	sub	sp, #40	; 0x28
 800a14a:	af02      	add	r7, sp, #8
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10a      	bne.n	800a16e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	61bb      	str	r3, [r7, #24]
}
 800a16a:	bf00      	nop
 800a16c:	e7fe      	b.n	800a16c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	429a      	cmp	r2, r3
 800a174:	d90a      	bls.n	800a18c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17a:	f383 8811 	msr	BASEPRI, r3
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	617b      	str	r3, [r7, #20]
}
 800a188:	bf00      	nop
 800a18a:	e7fe      	b.n	800a18a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a18c:	2302      	movs	r3, #2
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	2100      	movs	r1, #0
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f7ff ff00 	bl	8009f9c <xQueueGenericCreateStatic>
 800a19c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a1aa:	69fb      	ldr	r3, [r7, #28]
	}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3720      	adds	r7, #32
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	613b      	str	r3, [r7, #16]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d90a      	bls.n	800a1f8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	60fb      	str	r3, [r7, #12]
}
 800a1f4:	bf00      	nop
 800a1f6:	e7fe      	b.n	800a1f6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7ff ff45 	bl	800a08c <xQueueGenericCreate>
 800a202:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a210:	697b      	ldr	r3, [r7, #20]
	}
 800a212:	4618      	mov	r0, r3
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08e      	sub	sp, #56	; 0x38
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a22a:	2300      	movs	r3, #0
 800a22c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a234:	2b00      	cmp	r3, #0
 800a236:	d10a      	bne.n	800a24e <xQueueGenericSend+0x32>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a24a:	bf00      	nop
 800a24c:	e7fe      	b.n	800a24c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d103      	bne.n	800a25c <xQueueGenericSend+0x40>
 800a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <xQueueGenericSend+0x44>
 800a25c:	2301      	movs	r3, #1
 800a25e:	e000      	b.n	800a262 <xQueueGenericSend+0x46>
 800a260:	2300      	movs	r3, #0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10a      	bne.n	800a27c <xQueueGenericSend+0x60>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d103      	bne.n	800a28a <xQueueGenericSend+0x6e>
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a286:	2b01      	cmp	r3, #1
 800a288:	d101      	bne.n	800a28e <xQueueGenericSend+0x72>
 800a28a:	2301      	movs	r3, #1
 800a28c:	e000      	b.n	800a290 <xQueueGenericSend+0x74>
 800a28e:	2300      	movs	r3, #0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10a      	bne.n	800a2aa <xQueueGenericSend+0x8e>
	__asm volatile
 800a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a298:	f383 8811 	msr	BASEPRI, r3
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	623b      	str	r3, [r7, #32]
}
 800a2a6:	bf00      	nop
 800a2a8:	e7fe      	b.n	800a2a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2aa:	f001 fab5 	bl	800b818 <xTaskGetSchedulerState>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d102      	bne.n	800a2ba <xQueueGenericSend+0x9e>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <xQueueGenericSend+0xa2>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e000      	b.n	800a2c0 <xQueueGenericSend+0xa4>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10a      	bne.n	800a2da <xQueueGenericSend+0xbe>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	61fb      	str	r3, [r7, #28]
}
 800a2d6:	bf00      	nop
 800a2d8:	e7fe      	b.n	800a2d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2da:	f001 fffb 	bl	800c2d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d302      	bcc.n	800a2f0 <xQueueGenericSend+0xd4>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d129      	bne.n	800a344 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	68b9      	ldr	r1, [r7, #8]
 800a2f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2f6:	f000 faae 	bl	800a856 <prvCopyDataToQueue>
 800a2fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	2b00      	cmp	r3, #0
 800a302:	d010      	beq.n	800a326 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a306:	3324      	adds	r3, #36	; 0x24
 800a308:	4618      	mov	r0, r3
 800a30a:	f001 f8c3 	bl	800b494 <xTaskRemoveFromEventList>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d013      	beq.n	800a33c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a314:	4b3f      	ldr	r3, [pc, #252]	; (800a414 <xQueueGenericSend+0x1f8>)
 800a316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	e00a      	b.n	800a33c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d007      	beq.n	800a33c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a32c:	4b39      	ldr	r3, [pc, #228]	; (800a414 <xQueueGenericSend+0x1f8>)
 800a32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a33c:	f001 fffa 	bl	800c334 <vPortExitCritical>
				return pdPASS;
 800a340:	2301      	movs	r3, #1
 800a342:	e063      	b.n	800a40c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d103      	bne.n	800a352 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a34a:	f001 fff3 	bl	800c334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	e05c      	b.n	800a40c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a354:	2b00      	cmp	r3, #0
 800a356:	d106      	bne.n	800a366 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a358:	f107 0314 	add.w	r3, r7, #20
 800a35c:	4618      	mov	r0, r3
 800a35e:	f001 f8fd 	bl	800b55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a362:	2301      	movs	r3, #1
 800a364:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a366:	f001 ffe5 	bl	800c334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a36a:	f000 fe69 	bl	800b040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a36e:	f001 ffb1 	bl	800c2d4 <vPortEnterCritical>
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a378:	b25b      	sxtb	r3, r3
 800a37a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a37e:	d103      	bne.n	800a388 <xQueueGenericSend+0x16c>
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a38e:	b25b      	sxtb	r3, r3
 800a390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a394:	d103      	bne.n	800a39e <xQueueGenericSend+0x182>
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a39e:	f001 ffc9 	bl	800c334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3a2:	1d3a      	adds	r2, r7, #4
 800a3a4:	f107 0314 	add.w	r3, r7, #20
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f001 f8ec 	bl	800b588 <xTaskCheckForTimeOut>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d124      	bne.n	800a400 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a3b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3b8:	f000 fb45 	bl	800aa46 <prvIsQueueFull>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d018      	beq.n	800a3f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	3310      	adds	r3, #16
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 f812 	bl	800b3f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3d2:	f000 fad0 	bl	800a976 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a3d6:	f000 fe41 	bl	800b05c <xTaskResumeAll>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f47f af7c 	bne.w	800a2da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a3e2:	4b0c      	ldr	r3, [pc, #48]	; (800a414 <xQueueGenericSend+0x1f8>)
 800a3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	e772      	b.n	800a2da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a3f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3f6:	f000 fabe 	bl	800a976 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3fa:	f000 fe2f 	bl	800b05c <xTaskResumeAll>
 800a3fe:	e76c      	b.n	800a2da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a402:	f000 fab8 	bl	800a976 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a406:	f000 fe29 	bl	800b05c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a40a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3738      	adds	r7, #56	; 0x38
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	e000ed04 	.word	0xe000ed04

0800a418 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b090      	sub	sp, #64	; 0x40
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10a      	bne.n	800a446 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a442:	bf00      	nop
 800a444:	e7fe      	b.n	800a444 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d103      	bne.n	800a454 <xQueueGenericSendFromISR+0x3c>
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <xQueueGenericSendFromISR+0x40>
 800a454:	2301      	movs	r3, #1
 800a456:	e000      	b.n	800a45a <xQueueGenericSendFromISR+0x42>
 800a458:	2300      	movs	r3, #0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10a      	bne.n	800a474 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a470:	bf00      	nop
 800a472:	e7fe      	b.n	800a472 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	2b02      	cmp	r3, #2
 800a478:	d103      	bne.n	800a482 <xQueueGenericSendFromISR+0x6a>
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d101      	bne.n	800a486 <xQueueGenericSendFromISR+0x6e>
 800a482:	2301      	movs	r3, #1
 800a484:	e000      	b.n	800a488 <xQueueGenericSendFromISR+0x70>
 800a486:	2300      	movs	r3, #0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	623b      	str	r3, [r7, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4a2:	f001 fff9 	bl	800c498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a4a6:	f3ef 8211 	mrs	r2, BASEPRI
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	61fa      	str	r2, [r7, #28]
 800a4bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a4be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d302      	bcc.n	800a4d4 <xQueueGenericSendFromISR+0xbc>
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d12f      	bne.n	800a534 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	68b9      	ldr	r1, [r7, #8]
 800a4e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4ea:	f000 f9b4 	bl	800a856 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4f6:	d112      	bne.n	800a51e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d016      	beq.n	800a52e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a502:	3324      	adds	r3, #36	; 0x24
 800a504:	4618      	mov	r0, r3
 800a506:	f000 ffc5 	bl	800b494 <xTaskRemoveFromEventList>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00e      	beq.n	800a52e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00b      	beq.n	800a52e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	e007      	b.n	800a52e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a51e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a522:	3301      	adds	r3, #1
 800a524:	b2db      	uxtb	r3, r3
 800a526:	b25a      	sxtb	r2, r3
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a52e:	2301      	movs	r3, #1
 800a530:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a532:	e001      	b.n	800a538 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a534:	2300      	movs	r3, #0
 800a536:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a542:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a546:	4618      	mov	r0, r3
 800a548:	3740      	adds	r7, #64	; 0x40
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
	...

0800a550 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b08c      	sub	sp, #48	; 0x30
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a55c:	2300      	movs	r3, #0
 800a55e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10a      	bne.n	800a580 <xQueueReceive+0x30>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	623b      	str	r3, [r7, #32]
}
 800a57c:	bf00      	nop
 800a57e:	e7fe      	b.n	800a57e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d103      	bne.n	800a58e <xQueueReceive+0x3e>
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <xQueueReceive+0x42>
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <xQueueReceive+0x44>
 800a592:	2300      	movs	r3, #0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10a      	bne.n	800a5ae <xQueueReceive+0x5e>
	__asm volatile
 800a598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59c:	f383 8811 	msr	BASEPRI, r3
 800a5a0:	f3bf 8f6f 	isb	sy
 800a5a4:	f3bf 8f4f 	dsb	sy
 800a5a8:	61fb      	str	r3, [r7, #28]
}
 800a5aa:	bf00      	nop
 800a5ac:	e7fe      	b.n	800a5ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5ae:	f001 f933 	bl	800b818 <xTaskGetSchedulerState>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d102      	bne.n	800a5be <xQueueReceive+0x6e>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d101      	bne.n	800a5c2 <xQueueReceive+0x72>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e000      	b.n	800a5c4 <xQueueReceive+0x74>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <xQueueReceive+0x8e>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	61bb      	str	r3, [r7, #24]
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5de:	f001 fe79 	bl	800c2d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d01f      	beq.n	800a62e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f2:	f000 f99a 	bl	800a92a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f8:	1e5a      	subs	r2, r3, #1
 800a5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00f      	beq.n	800a626 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a608:	3310      	adds	r3, #16
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 ff42 	bl	800b494 <xTaskRemoveFromEventList>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d007      	beq.n	800a626 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a616:	4b3d      	ldr	r3, [pc, #244]	; (800a70c <xQueueReceive+0x1bc>)
 800a618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a626:	f001 fe85 	bl	800c334 <vPortExitCritical>
				return pdPASS;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e069      	b.n	800a702 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d103      	bne.n	800a63c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a634:	f001 fe7e 	bl	800c334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a638:	2300      	movs	r3, #0
 800a63a:	e062      	b.n	800a702 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d106      	bne.n	800a650 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a642:	f107 0310 	add.w	r3, r7, #16
 800a646:	4618      	mov	r0, r3
 800a648:	f000 ff88 	bl	800b55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a64c:	2301      	movs	r3, #1
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a650:	f001 fe70 	bl	800c334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a654:	f000 fcf4 	bl	800b040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a658:	f001 fe3c 	bl	800c2d4 <vPortEnterCritical>
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a662:	b25b      	sxtb	r3, r3
 800a664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a668:	d103      	bne.n	800a672 <xQueueReceive+0x122>
 800a66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a678:	b25b      	sxtb	r3, r3
 800a67a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a67e:	d103      	bne.n	800a688 <xQueueReceive+0x138>
 800a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a688:	f001 fe54 	bl	800c334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a68c:	1d3a      	adds	r2, r7, #4
 800a68e:	f107 0310 	add.w	r3, r7, #16
 800a692:	4611      	mov	r1, r2
 800a694:	4618      	mov	r0, r3
 800a696:	f000 ff77 	bl	800b588 <xTaskCheckForTimeOut>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d123      	bne.n	800a6e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6a2:	f000 f9ba 	bl	800aa1a <prvIsQueueEmpty>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d017      	beq.n	800a6dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	3324      	adds	r3, #36	; 0x24
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f000 fe9d 	bl	800b3f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6bc:	f000 f95b 	bl	800a976 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a6c0:	f000 fccc 	bl	800b05c <xTaskResumeAll>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d189      	bne.n	800a5de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a6ca:	4b10      	ldr	r3, [pc, #64]	; (800a70c <xQueueReceive+0x1bc>)
 800a6cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	e780      	b.n	800a5de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6de:	f000 f94a 	bl	800a976 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6e2:	f000 fcbb 	bl	800b05c <xTaskResumeAll>
 800a6e6:	e77a      	b.n	800a5de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a6e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ea:	f000 f944 	bl	800a976 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6ee:	f000 fcb5 	bl	800b05c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6f4:	f000 f991 	bl	800aa1a <prvIsQueueEmpty>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f43f af6f 	beq.w	800a5de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a700:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a702:	4618      	mov	r0, r3
 800a704:	3730      	adds	r7, #48	; 0x30
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	e000ed04 	.word	0xe000ed04

0800a710 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08e      	sub	sp, #56	; 0x38
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10a      	bne.n	800a73c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	623b      	str	r3, [r7, #32]
}
 800a738:	bf00      	nop
 800a73a:	e7fe      	b.n	800a73a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d103      	bne.n	800a74a <xQueueReceiveFromISR+0x3a>
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	2b00      	cmp	r3, #0
 800a748:	d101      	bne.n	800a74e <xQueueReceiveFromISR+0x3e>
 800a74a:	2301      	movs	r3, #1
 800a74c:	e000      	b.n	800a750 <xQueueReceiveFromISR+0x40>
 800a74e:	2300      	movs	r3, #0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10a      	bne.n	800a76a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	61fb      	str	r3, [r7, #28]
}
 800a766:	bf00      	nop
 800a768:	e7fe      	b.n	800a768 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a76a:	f001 fe95 	bl	800c498 <vPortValidateInterruptPriority>
	__asm volatile
 800a76e:	f3ef 8211 	mrs	r2, BASEPRI
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	61ba      	str	r2, [r7, #24]
 800a784:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a786:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a788:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	2b00      	cmp	r3, #0
 800a794:	d02f      	beq.n	800a7f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a79c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7a0:	68b9      	ldr	r1, [r7, #8]
 800a7a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7a4:	f000 f8c1 	bl	800a92a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7aa:	1e5a      	subs	r2, r3, #1
 800a7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a7b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7b8:	d112      	bne.n	800a7e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d016      	beq.n	800a7f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	3310      	adds	r3, #16
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 fe64 	bl	800b494 <xTaskRemoveFromEventList>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00e      	beq.n	800a7f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00b      	beq.n	800a7f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	e007      	b.n	800a7f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a7e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	b25a      	sxtb	r2, r3
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a7f4:	e001      	b.n	800a7fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f383 8811 	msr	BASEPRI, r3
}
 800a804:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3738      	adds	r7, #56	; 0x38
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10a      	bne.n	800a838 <vQueueDelete+0x28>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	60bb      	str	r3, [r7, #8]
}
 800a834:	bf00      	nop
 800a836:	e7fe      	b.n	800a836 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f000 f947 	bl	800aacc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a844:	2b00      	cmp	r3, #0
 800a846:	d102      	bne.n	800a84e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f001 ff09 	bl	800c660 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a84e:	bf00      	nop
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b086      	sub	sp, #24
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	60f8      	str	r0, [r7, #12]
 800a85e:	60b9      	str	r1, [r7, #8]
 800a860:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a862:	2300      	movs	r3, #0
 800a864:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10d      	bne.n	800a890 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d14d      	bne.n	800a918 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	4618      	mov	r0, r3
 800a882:	f000 ffe7 	bl	800b854 <xTaskPriorityDisinherit>
 800a886:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	609a      	str	r2, [r3, #8]
 800a88e:	e043      	b.n	800a918 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d119      	bne.n	800a8ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6858      	ldr	r0, [r3, #4]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89e:	461a      	mov	r2, r3
 800a8a0:	68b9      	ldr	r1, [r7, #8]
 800a8a2:	f002 f94b 	bl	800cb3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	441a      	add	r2, r3
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d32b      	bcc.n	800a918 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	605a      	str	r2, [r3, #4]
 800a8c8:	e026      	b.n	800a918 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	68d8      	ldr	r0, [r3, #12]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	f002 f931 	bl	800cb3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	68da      	ldr	r2, [r3, #12]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e2:	425b      	negs	r3, r3
 800a8e4:	441a      	add	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	68da      	ldr	r2, [r3, #12]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d207      	bcs.n	800a906 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	689a      	ldr	r2, [r3, #8]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fe:	425b      	negs	r3, r3
 800a900:	441a      	add	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d105      	bne.n	800a918 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	3b01      	subs	r3, #1
 800a916:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	1c5a      	adds	r2, r3, #1
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a920:	697b      	ldr	r3, [r7, #20]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3718      	adds	r7, #24
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d018      	beq.n	800a96e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68da      	ldr	r2, [r3, #12]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a944:	441a      	add	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68da      	ldr	r2, [r3, #12]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	429a      	cmp	r2, r3
 800a954:	d303      	bcc.n	800a95e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68d9      	ldr	r1, [r3, #12]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a966:	461a      	mov	r2, r3
 800a968:	6838      	ldr	r0, [r7, #0]
 800a96a:	f002 f8e7 	bl	800cb3c <memcpy>
	}
}
 800a96e:	bf00      	nop
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b084      	sub	sp, #16
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a97e:	f001 fca9 	bl	800c2d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a988:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a98a:	e011      	b.n	800a9b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	2b00      	cmp	r3, #0
 800a992:	d012      	beq.n	800a9ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	3324      	adds	r3, #36	; 0x24
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 fd7b 	bl	800b494 <xTaskRemoveFromEventList>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9a4:	f000 fe52 	bl	800b64c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	dce9      	bgt.n	800a98c <prvUnlockQueue+0x16>
 800a9b8:	e000      	b.n	800a9bc <prvUnlockQueue+0x46>
					break;
 800a9ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	22ff      	movs	r2, #255	; 0xff
 800a9c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a9c4:	f001 fcb6 	bl	800c334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9c8:	f001 fc84 	bl	800c2d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9d4:	e011      	b.n	800a9fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d012      	beq.n	800aa04 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	3310      	adds	r3, #16
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 fd56 	bl	800b494 <xTaskRemoveFromEventList>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9ee:	f000 fe2d 	bl	800b64c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	dce9      	bgt.n	800a9d6 <prvUnlockQueue+0x60>
 800aa02:	e000      	b.n	800aa06 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa04:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	22ff      	movs	r2, #255	; 0xff
 800aa0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa0e:	f001 fc91 	bl	800c334 <vPortExitCritical>
}
 800aa12:	bf00      	nop
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa22:	f001 fc57 	bl	800c2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d102      	bne.n	800aa34 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	e001      	b.n	800aa38 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa34:	2300      	movs	r3, #0
 800aa36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa38:	f001 fc7c 	bl	800c334 <vPortExitCritical>

	return xReturn;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b084      	sub	sp, #16
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa4e:	f001 fc41 	bl	800c2d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d102      	bne.n	800aa64 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	60fb      	str	r3, [r7, #12]
 800aa62:	e001      	b.n	800aa68 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa64:	2300      	movs	r3, #0
 800aa66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa68:	f001 fc64 	bl	800c334 <vPortExitCritical>

	return xReturn;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
	...

0800aa78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa82:	2300      	movs	r3, #0
 800aa84:	60fb      	str	r3, [r7, #12]
 800aa86:	e014      	b.n	800aab2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa88:	4a0f      	ldr	r2, [pc, #60]	; (800aac8 <vQueueAddToRegistry+0x50>)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10b      	bne.n	800aaac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa94:	490c      	ldr	r1, [pc, #48]	; (800aac8 <vQueueAddToRegistry+0x50>)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa9e:	4a0a      	ldr	r2, [pc, #40]	; (800aac8 <vQueueAddToRegistry+0x50>)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	4413      	add	r3, r2
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aaaa:	e006      	b.n	800aaba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	3301      	adds	r3, #1
 800aab0:	60fb      	str	r3, [r7, #12]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b07      	cmp	r3, #7
 800aab6:	d9e7      	bls.n	800aa88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aab8:	bf00      	nop
 800aaba:	bf00      	nop
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	20007384 	.word	0x20007384

0800aacc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aad4:	2300      	movs	r3, #0
 800aad6:	60fb      	str	r3, [r7, #12]
 800aad8:	e016      	b.n	800ab08 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aada:	4a10      	ldr	r2, [pc, #64]	; (800ab1c <vQueueUnregisterQueue+0x50>)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	00db      	lsls	r3, r3, #3
 800aae0:	4413      	add	r3, r2
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d10b      	bne.n	800ab02 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aaea:	4a0c      	ldr	r2, [pc, #48]	; (800ab1c <vQueueUnregisterQueue+0x50>)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2100      	movs	r1, #0
 800aaf0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aaf4:	4a09      	ldr	r2, [pc, #36]	; (800ab1c <vQueueUnregisterQueue+0x50>)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	00db      	lsls	r3, r3, #3
 800aafa:	4413      	add	r3, r2
 800aafc:	2200      	movs	r2, #0
 800aafe:	605a      	str	r2, [r3, #4]
				break;
 800ab00:	e006      	b.n	800ab10 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3301      	adds	r3, #1
 800ab06:	60fb      	str	r3, [r7, #12]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2b07      	cmp	r3, #7
 800ab0c:	d9e5      	bls.n	800aada <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ab0e:	bf00      	nop
 800ab10:	bf00      	nop
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	20007384 	.word	0x20007384

0800ab20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab30:	f001 fbd0 	bl	800c2d4 <vPortEnterCritical>
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab3a:	b25b      	sxtb	r3, r3
 800ab3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab40:	d103      	bne.n	800ab4a <vQueueWaitForMessageRestricted+0x2a>
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab50:	b25b      	sxtb	r3, r3
 800ab52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab56:	d103      	bne.n	800ab60 <vQueueWaitForMessageRestricted+0x40>
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab60:	f001 fbe8 	bl	800c334 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d106      	bne.n	800ab7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	3324      	adds	r3, #36	; 0x24
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	68b9      	ldr	r1, [r7, #8]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 fc61 	bl	800b43c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab7a:	6978      	ldr	r0, [r7, #20]
 800ab7c:	f7ff fefb 	bl	800a976 <prvUnlockQueue>
	}
 800ab80:	bf00      	nop
 800ab82:	3718      	adds	r7, #24
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08e      	sub	sp, #56	; 0x38
 800ab8c:	af04      	add	r7, sp, #16
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10a      	bne.n	800abb2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	623b      	str	r3, [r7, #32]
}
 800abae:	bf00      	nop
 800abb0:	e7fe      	b.n	800abb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800abb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10a      	bne.n	800abce <xTaskCreateStatic+0x46>
	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	61fb      	str	r3, [r7, #28]
}
 800abca:	bf00      	nop
 800abcc:	e7fe      	b.n	800abcc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abce:	23bc      	movs	r3, #188	; 0xbc
 800abd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2bbc      	cmp	r3, #188	; 0xbc
 800abd6:	d00a      	beq.n	800abee <xTaskCreateStatic+0x66>
	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	61bb      	str	r3, [r7, #24]
}
 800abea:	bf00      	nop
 800abec:	e7fe      	b.n	800abec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800abee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d01e      	beq.n	800ac34 <xTaskCreateStatic+0xac>
 800abf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d01b      	beq.n	800ac34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac08:	2202      	movs	r2, #2
 800ac0a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac0e:	2300      	movs	r3, #0
 800ac10:	9303      	str	r3, [sp, #12]
 800ac12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac14:	9302      	str	r3, [sp, #8]
 800ac16:	f107 0314 	add.w	r3, r7, #20
 800ac1a:	9301      	str	r3, [sp, #4]
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	68b9      	ldr	r1, [r7, #8]
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f000 f850 	bl	800accc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac2e:	f000 f8f3 	bl	800ae18 <prvAddNewTaskToReadyList>
 800ac32:	e001      	b.n	800ac38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ac34:	2300      	movs	r3, #0
 800ac36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac38:	697b      	ldr	r3, [r7, #20]
	}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3728      	adds	r7, #40	; 0x28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b08c      	sub	sp, #48	; 0x30
 800ac46:	af04      	add	r7, sp, #16
 800ac48:	60f8      	str	r0, [r7, #12]
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	603b      	str	r3, [r7, #0]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac52:	88fb      	ldrh	r3, [r7, #6]
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4618      	mov	r0, r3
 800ac58:	f001 fc5e 	bl	800c518 <pvPortMalloc>
 800ac5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00e      	beq.n	800ac82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac64:	20bc      	movs	r0, #188	; 0xbc
 800ac66:	f001 fc57 	bl	800c518 <pvPortMalloc>
 800ac6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	631a      	str	r2, [r3, #48]	; 0x30
 800ac78:	e005      	b.n	800ac86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac7a:	6978      	ldr	r0, [r7, #20]
 800ac7c:	f001 fcf0 	bl	800c660 <vPortFree>
 800ac80:	e001      	b.n	800ac86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d017      	beq.n	800acbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac94:	88fa      	ldrh	r2, [r7, #6]
 800ac96:	2300      	movs	r3, #0
 800ac98:	9303      	str	r3, [sp, #12]
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	9302      	str	r3, [sp, #8]
 800ac9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	68b9      	ldr	r1, [r7, #8]
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f000 f80e 	bl	800accc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acb0:	69f8      	ldr	r0, [r7, #28]
 800acb2:	f000 f8b1 	bl	800ae18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acb6:	2301      	movs	r3, #1
 800acb8:	61bb      	str	r3, [r7, #24]
 800acba:	e002      	b.n	800acc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800acbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800acc2:	69bb      	ldr	r3, [r7, #24]
	}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3720      	adds	r7, #32
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
 800acd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	461a      	mov	r2, r3
 800ace4:	21a5      	movs	r1, #165	; 0xa5
 800ace6:	f001 ff37 	bl	800cb58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800acf4:	3b01      	subs	r3, #1
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	f023 0307 	bic.w	r3, r3, #7
 800ad02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	f003 0307 	and.w	r3, r3, #7
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00a      	beq.n	800ad24 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	617b      	str	r3, [r7, #20]
}
 800ad20:	bf00      	nop
 800ad22:	e7fe      	b.n	800ad22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d01f      	beq.n	800ad6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	61fb      	str	r3, [r7, #28]
 800ad2e:	e012      	b.n	800ad56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	4413      	add	r3, r2
 800ad36:	7819      	ldrb	r1, [r3, #0]
 800ad38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	3334      	adds	r3, #52	; 0x34
 800ad40:	460a      	mov	r2, r1
 800ad42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	4413      	add	r3, r2
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d006      	beq.n	800ad5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	3301      	adds	r3, #1
 800ad54:	61fb      	str	r3, [r7, #28]
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	2b0f      	cmp	r3, #15
 800ad5a:	d9e9      	bls.n	800ad30 <prvInitialiseNewTask+0x64>
 800ad5c:	e000      	b.n	800ad60 <prvInitialiseNewTask+0x94>
			{
				break;
 800ad5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad68:	e003      	b.n	800ad72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad74:	2b37      	cmp	r3, #55	; 0x37
 800ad76:	d901      	bls.n	800ad7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad78:	2337      	movs	r3, #55	; 0x37
 800ad7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	3304      	adds	r3, #4
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7ff f806 	bl	8009da4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9a:	3318      	adds	r3, #24
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7ff f801 	bl	8009da4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ada6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800adae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	2200      	movs	r2, #0
 800adbc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adca:	3354      	adds	r3, #84	; 0x54
 800adcc:	2260      	movs	r2, #96	; 0x60
 800adce:	2100      	movs	r1, #0
 800add0:	4618      	mov	r0, r3
 800add2:	f001 fec1 	bl	800cb58 <memset>
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	4a0c      	ldr	r2, [pc, #48]	; (800ae0c <prvInitialiseNewTask+0x140>)
 800adda:	659a      	str	r2, [r3, #88]	; 0x58
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	4a0c      	ldr	r2, [pc, #48]	; (800ae10 <prvInitialiseNewTask+0x144>)
 800ade0:	65da      	str	r2, [r3, #92]	; 0x5c
 800ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade4:	4a0b      	ldr	r2, [pc, #44]	; (800ae14 <prvInitialiseNewTask+0x148>)
 800ade6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	68f9      	ldr	r1, [r7, #12]
 800adec:	69b8      	ldr	r0, [r7, #24]
 800adee:	f001 f941 	bl	800c074 <pxPortInitialiseStack>
 800adf2:	4602      	mov	r2, r0
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d002      	beq.n	800ae04 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800adfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae04:	bf00      	nop
 800ae06:	3720      	adds	r7, #32
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	08010120 	.word	0x08010120
 800ae10:	08010140 	.word	0x08010140
 800ae14:	08010100 	.word	0x08010100

0800ae18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae20:	f001 fa58 	bl	800c2d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae24:	4b2d      	ldr	r3, [pc, #180]	; (800aedc <prvAddNewTaskToReadyList+0xc4>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	4a2c      	ldr	r2, [pc, #176]	; (800aedc <prvAddNewTaskToReadyList+0xc4>)
 800ae2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae2e:	4b2c      	ldr	r3, [pc, #176]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d109      	bne.n	800ae4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae36:	4a2a      	ldr	r2, [pc, #168]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae3c:	4b27      	ldr	r3, [pc, #156]	; (800aedc <prvAddNewTaskToReadyList+0xc4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d110      	bne.n	800ae66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae44:	f000 fc26 	bl	800b694 <prvInitialiseTaskLists>
 800ae48:	e00d      	b.n	800ae66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae4a:	4b26      	ldr	r3, [pc, #152]	; (800aee4 <prvAddNewTaskToReadyList+0xcc>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d109      	bne.n	800ae66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae52:	4b23      	ldr	r3, [pc, #140]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d802      	bhi.n	800ae66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae60:	4a1f      	ldr	r2, [pc, #124]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae66:	4b20      	ldr	r3, [pc, #128]	; (800aee8 <prvAddNewTaskToReadyList+0xd0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	4a1e      	ldr	r2, [pc, #120]	; (800aee8 <prvAddNewTaskToReadyList+0xd0>)
 800ae6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae70:	4b1d      	ldr	r3, [pc, #116]	; (800aee8 <prvAddNewTaskToReadyList+0xd0>)
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7c:	4b1b      	ldr	r3, [pc, #108]	; (800aeec <prvAddNewTaskToReadyList+0xd4>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d903      	bls.n	800ae8c <prvAddNewTaskToReadyList+0x74>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae88:	4a18      	ldr	r2, [pc, #96]	; (800aeec <prvAddNewTaskToReadyList+0xd4>)
 800ae8a:	6013      	str	r3, [r2, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4a15      	ldr	r2, [pc, #84]	; (800aef0 <prvAddNewTaskToReadyList+0xd8>)
 800ae9a:	441a      	add	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f7fe ff8b 	bl	8009dbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aea8:	f001 fa44 	bl	800c334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aeac:	4b0d      	ldr	r3, [pc, #52]	; (800aee4 <prvAddNewTaskToReadyList+0xcc>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00e      	beq.n	800aed2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aeb4:	4b0a      	ldr	r3, [pc, #40]	; (800aee0 <prvAddNewTaskToReadyList+0xc8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d207      	bcs.n	800aed2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aec2:	4b0c      	ldr	r3, [pc, #48]	; (800aef4 <prvAddNewTaskToReadyList+0xdc>)
 800aec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aed2:	bf00      	nop
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	20007898 	.word	0x20007898
 800aee0:	200073c4 	.word	0x200073c4
 800aee4:	200078a4 	.word	0x200078a4
 800aee8:	200078b4 	.word	0x200078b4
 800aeec:	200078a0 	.word	0x200078a0
 800aef0:	200073c8 	.word	0x200073c8
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af00:	2300      	movs	r3, #0
 800af02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d017      	beq.n	800af3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af0a:	4b13      	ldr	r3, [pc, #76]	; (800af58 <vTaskDelay+0x60>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00a      	beq.n	800af28 <vTaskDelay+0x30>
	__asm volatile
 800af12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	60bb      	str	r3, [r7, #8]
}
 800af24:	bf00      	nop
 800af26:	e7fe      	b.n	800af26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af28:	f000 f88a 	bl	800b040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af2c:	2100      	movs	r1, #0
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fcfe 	bl	800b930 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af34:	f000 f892 	bl	800b05c <xTaskResumeAll>
 800af38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d107      	bne.n	800af50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800af40:	4b06      	ldr	r3, [pc, #24]	; (800af5c <vTaskDelay+0x64>)
 800af42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	f3bf 8f4f 	dsb	sy
 800af4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af50:	bf00      	nop
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	200078c0 	.word	0x200078c0
 800af5c:	e000ed04 	.word	0xe000ed04

0800af60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b08a      	sub	sp, #40	; 0x28
 800af64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af6a:	2300      	movs	r3, #0
 800af6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af6e:	463a      	mov	r2, r7
 800af70:	1d39      	adds	r1, r7, #4
 800af72:	f107 0308 	add.w	r3, r7, #8
 800af76:	4618      	mov	r0, r3
 800af78:	f7fe fec0 	bl	8009cfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	9202      	str	r2, [sp, #8]
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	2300      	movs	r3, #0
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	2300      	movs	r3, #0
 800af8c:	460a      	mov	r2, r1
 800af8e:	4924      	ldr	r1, [pc, #144]	; (800b020 <vTaskStartScheduler+0xc0>)
 800af90:	4824      	ldr	r0, [pc, #144]	; (800b024 <vTaskStartScheduler+0xc4>)
 800af92:	f7ff fdf9 	bl	800ab88 <xTaskCreateStatic>
 800af96:	4603      	mov	r3, r0
 800af98:	4a23      	ldr	r2, [pc, #140]	; (800b028 <vTaskStartScheduler+0xc8>)
 800af9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af9c:	4b22      	ldr	r3, [pc, #136]	; (800b028 <vTaskStartScheduler+0xc8>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800afa4:	2301      	movs	r3, #1
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e001      	b.n	800afae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afaa:	2300      	movs	r3, #0
 800afac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d102      	bne.n	800afba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800afb4:	f000 fd10 	bl	800b9d8 <xTimerCreateTimerTask>
 800afb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d11b      	bne.n	800aff8 <vTaskStartScheduler+0x98>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	613b      	str	r3, [r7, #16]
}
 800afd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800afd4:	4b15      	ldr	r3, [pc, #84]	; (800b02c <vTaskStartScheduler+0xcc>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3354      	adds	r3, #84	; 0x54
 800afda:	4a15      	ldr	r2, [pc, #84]	; (800b030 <vTaskStartScheduler+0xd0>)
 800afdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afde:	4b15      	ldr	r3, [pc, #84]	; (800b034 <vTaskStartScheduler+0xd4>)
 800afe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afe4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afe6:	4b14      	ldr	r3, [pc, #80]	; (800b038 <vTaskStartScheduler+0xd8>)
 800afe8:	2201      	movs	r2, #1
 800afea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afec:	4b13      	ldr	r3, [pc, #76]	; (800b03c <vTaskStartScheduler+0xdc>)
 800afee:	2200      	movs	r2, #0
 800aff0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aff2:	f001 f8cd 	bl	800c190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aff6:	e00e      	b.n	800b016 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800affe:	d10a      	bne.n	800b016 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	60fb      	str	r3, [r7, #12]
}
 800b012:	bf00      	nop
 800b014:	e7fe      	b.n	800b014 <vTaskStartScheduler+0xb4>
}
 800b016:	bf00      	nop
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	0800df64 	.word	0x0800df64
 800b024:	0800b665 	.word	0x0800b665
 800b028:	200078bc 	.word	0x200078bc
 800b02c:	200073c4 	.word	0x200073c4
 800b030:	200000c4 	.word	0x200000c4
 800b034:	200078b8 	.word	0x200078b8
 800b038:	200078a4 	.word	0x200078a4
 800b03c:	2000789c 	.word	0x2000789c

0800b040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b040:	b480      	push	{r7}
 800b042:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b044:	4b04      	ldr	r3, [pc, #16]	; (800b058 <vTaskSuspendAll+0x18>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	3301      	adds	r3, #1
 800b04a:	4a03      	ldr	r2, [pc, #12]	; (800b058 <vTaskSuspendAll+0x18>)
 800b04c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b04e:	bf00      	nop
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	200078c0 	.word	0x200078c0

0800b05c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b066:	2300      	movs	r3, #0
 800b068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b06a:	4b42      	ldr	r3, [pc, #264]	; (800b174 <xTaskResumeAll+0x118>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10a      	bne.n	800b088 <xTaskResumeAll+0x2c>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	603b      	str	r3, [r7, #0]
}
 800b084:	bf00      	nop
 800b086:	e7fe      	b.n	800b086 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b088:	f001 f924 	bl	800c2d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b08c:	4b39      	ldr	r3, [pc, #228]	; (800b174 <xTaskResumeAll+0x118>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	3b01      	subs	r3, #1
 800b092:	4a38      	ldr	r2, [pc, #224]	; (800b174 <xTaskResumeAll+0x118>)
 800b094:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b096:	4b37      	ldr	r3, [pc, #220]	; (800b174 <xTaskResumeAll+0x118>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d162      	bne.n	800b164 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b09e:	4b36      	ldr	r3, [pc, #216]	; (800b178 <xTaskResumeAll+0x11c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d05e      	beq.n	800b164 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0a6:	e02f      	b.n	800b108 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0a8:	4b34      	ldr	r3, [pc, #208]	; (800b17c <xTaskResumeAll+0x120>)
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3318      	adds	r3, #24
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fe fedf 	bl	8009e78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3304      	adds	r3, #4
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe feda 	bl	8009e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c8:	4b2d      	ldr	r3, [pc, #180]	; (800b180 <xTaskResumeAll+0x124>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d903      	bls.n	800b0d8 <xTaskResumeAll+0x7c>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d4:	4a2a      	ldr	r2, [pc, #168]	; (800b180 <xTaskResumeAll+0x124>)
 800b0d6:	6013      	str	r3, [r2, #0]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0dc:	4613      	mov	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4413      	add	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4a27      	ldr	r2, [pc, #156]	; (800b184 <xTaskResumeAll+0x128>)
 800b0e6:	441a      	add	r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	f7fe fe65 	bl	8009dbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f8:	4b23      	ldr	r3, [pc, #140]	; (800b188 <xTaskResumeAll+0x12c>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d302      	bcc.n	800b108 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b102:	4b22      	ldr	r3, [pc, #136]	; (800b18c <xTaskResumeAll+0x130>)
 800b104:	2201      	movs	r2, #1
 800b106:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b108:	4b1c      	ldr	r3, [pc, #112]	; (800b17c <xTaskResumeAll+0x120>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1cb      	bne.n	800b0a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b116:	f000 fb5f 	bl	800b7d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b11a:	4b1d      	ldr	r3, [pc, #116]	; (800b190 <xTaskResumeAll+0x134>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d010      	beq.n	800b148 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b126:	f000 f847 	bl	800b1b8 <xTaskIncrementTick>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b130:	4b16      	ldr	r3, [pc, #88]	; (800b18c <xTaskResumeAll+0x130>)
 800b132:	2201      	movs	r2, #1
 800b134:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	3b01      	subs	r3, #1
 800b13a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1f1      	bne.n	800b126 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b142:	4b13      	ldr	r3, [pc, #76]	; (800b190 <xTaskResumeAll+0x134>)
 800b144:	2200      	movs	r2, #0
 800b146:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b148:	4b10      	ldr	r3, [pc, #64]	; (800b18c <xTaskResumeAll+0x130>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d009      	beq.n	800b164 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b150:	2301      	movs	r3, #1
 800b152:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b154:	4b0f      	ldr	r3, [pc, #60]	; (800b194 <xTaskResumeAll+0x138>)
 800b156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b15a:	601a      	str	r2, [r3, #0]
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b164:	f001 f8e6 	bl	800c334 <vPortExitCritical>

	return xAlreadyYielded;
 800b168:	68bb      	ldr	r3, [r7, #8]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	200078c0 	.word	0x200078c0
 800b178:	20007898 	.word	0x20007898
 800b17c:	20007858 	.word	0x20007858
 800b180:	200078a0 	.word	0x200078a0
 800b184:	200073c8 	.word	0x200073c8
 800b188:	200073c4 	.word	0x200073c4
 800b18c:	200078ac 	.word	0x200078ac
 800b190:	200078a8 	.word	0x200078a8
 800b194:	e000ed04 	.word	0xe000ed04

0800b198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b19e:	4b05      	ldr	r3, [pc, #20]	; (800b1b4 <xTaskGetTickCount+0x1c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b1a4:	687b      	ldr	r3, [r7, #4]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	2000789c 	.word	0x2000789c

0800b1b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1c2:	4b4f      	ldr	r3, [pc, #316]	; (800b300 <xTaskIncrementTick+0x148>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f040 808f 	bne.w	800b2ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1cc:	4b4d      	ldr	r3, [pc, #308]	; (800b304 <xTaskIncrementTick+0x14c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1d4:	4a4b      	ldr	r2, [pc, #300]	; (800b304 <xTaskIncrementTick+0x14c>)
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d120      	bne.n	800b222 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1e0:	4b49      	ldr	r3, [pc, #292]	; (800b308 <xTaskIncrementTick+0x150>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <xTaskIncrementTick+0x48>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	603b      	str	r3, [r7, #0]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <xTaskIncrementTick+0x46>
 800b200:	4b41      	ldr	r3, [pc, #260]	; (800b308 <xTaskIncrementTick+0x150>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	60fb      	str	r3, [r7, #12]
 800b206:	4b41      	ldr	r3, [pc, #260]	; (800b30c <xTaskIncrementTick+0x154>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a3f      	ldr	r2, [pc, #252]	; (800b308 <xTaskIncrementTick+0x150>)
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	4a3f      	ldr	r2, [pc, #252]	; (800b30c <xTaskIncrementTick+0x154>)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	4b3e      	ldr	r3, [pc, #248]	; (800b310 <xTaskIncrementTick+0x158>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3301      	adds	r3, #1
 800b21a:	4a3d      	ldr	r2, [pc, #244]	; (800b310 <xTaskIncrementTick+0x158>)
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	f000 fadb 	bl	800b7d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b222:	4b3c      	ldr	r3, [pc, #240]	; (800b314 <xTaskIncrementTick+0x15c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d349      	bcc.n	800b2c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b22c:	4b36      	ldr	r3, [pc, #216]	; (800b308 <xTaskIncrementTick+0x150>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d104      	bne.n	800b240 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b236:	4b37      	ldr	r3, [pc, #220]	; (800b314 <xTaskIncrementTick+0x15c>)
 800b238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b23c:	601a      	str	r2, [r3, #0]
					break;
 800b23e:	e03f      	b.n	800b2c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b240:	4b31      	ldr	r3, [pc, #196]	; (800b308 <xTaskIncrementTick+0x150>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d203      	bcs.n	800b260 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b258:	4a2e      	ldr	r2, [pc, #184]	; (800b314 <xTaskIncrementTick+0x15c>)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b25e:	e02f      	b.n	800b2c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	3304      	adds	r3, #4
 800b264:	4618      	mov	r0, r3
 800b266:	f7fe fe07 	bl	8009e78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d004      	beq.n	800b27c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	3318      	adds	r3, #24
 800b276:	4618      	mov	r0, r3
 800b278:	f7fe fdfe 	bl	8009e78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b280:	4b25      	ldr	r3, [pc, #148]	; (800b318 <xTaskIncrementTick+0x160>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	429a      	cmp	r2, r3
 800b286:	d903      	bls.n	800b290 <xTaskIncrementTick+0xd8>
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28c:	4a22      	ldr	r2, [pc, #136]	; (800b318 <xTaskIncrementTick+0x160>)
 800b28e:	6013      	str	r3, [r2, #0]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b294:	4613      	mov	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4413      	add	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	4a1f      	ldr	r2, [pc, #124]	; (800b31c <xTaskIncrementTick+0x164>)
 800b29e:	441a      	add	r2, r3
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4610      	mov	r0, r2
 800b2a8:	f7fe fd89 	bl	8009dbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b0:	4b1b      	ldr	r3, [pc, #108]	; (800b320 <xTaskIncrementTick+0x168>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d3b8      	bcc.n	800b22c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2be:	e7b5      	b.n	800b22c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2c0:	4b17      	ldr	r3, [pc, #92]	; (800b320 <xTaskIncrementTick+0x168>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c6:	4915      	ldr	r1, [pc, #84]	; (800b31c <xTaskIncrementTick+0x164>)
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	440b      	add	r3, r1
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d901      	bls.n	800b2dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2dc:	4b11      	ldr	r3, [pc, #68]	; (800b324 <xTaskIncrementTick+0x16c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d007      	beq.n	800b2f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	617b      	str	r3, [r7, #20]
 800b2e8:	e004      	b.n	800b2f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2ea:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <xTaskIncrementTick+0x170>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	4a0d      	ldr	r2, [pc, #52]	; (800b328 <xTaskIncrementTick+0x170>)
 800b2f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2f4:	697b      	ldr	r3, [r7, #20]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	200078c0 	.word	0x200078c0
 800b304:	2000789c 	.word	0x2000789c
 800b308:	20007850 	.word	0x20007850
 800b30c:	20007854 	.word	0x20007854
 800b310:	200078b0 	.word	0x200078b0
 800b314:	200078b8 	.word	0x200078b8
 800b318:	200078a0 	.word	0x200078a0
 800b31c:	200073c8 	.word	0x200073c8
 800b320:	200073c4 	.word	0x200073c4
 800b324:	200078ac 	.word	0x200078ac
 800b328:	200078a8 	.word	0x200078a8

0800b32c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b332:	4b2a      	ldr	r3, [pc, #168]	; (800b3dc <vTaskSwitchContext+0xb0>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b33a:	4b29      	ldr	r3, [pc, #164]	; (800b3e0 <vTaskSwitchContext+0xb4>)
 800b33c:	2201      	movs	r2, #1
 800b33e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b340:	e046      	b.n	800b3d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b342:	4b27      	ldr	r3, [pc, #156]	; (800b3e0 <vTaskSwitchContext+0xb4>)
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b348:	4b26      	ldr	r3, [pc, #152]	; (800b3e4 <vTaskSwitchContext+0xb8>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	60fb      	str	r3, [r7, #12]
 800b34e:	e010      	b.n	800b372 <vTaskSwitchContext+0x46>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10a      	bne.n	800b36c <vTaskSwitchContext+0x40>
	__asm volatile
 800b356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	607b      	str	r3, [r7, #4]
}
 800b368:	bf00      	nop
 800b36a:	e7fe      	b.n	800b36a <vTaskSwitchContext+0x3e>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3b01      	subs	r3, #1
 800b370:	60fb      	str	r3, [r7, #12]
 800b372:	491d      	ldr	r1, [pc, #116]	; (800b3e8 <vTaskSwitchContext+0xbc>)
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	4613      	mov	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	440b      	add	r3, r1
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d0e4      	beq.n	800b350 <vTaskSwitchContext+0x24>
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	4613      	mov	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4a15      	ldr	r2, [pc, #84]	; (800b3e8 <vTaskSwitchContext+0xbc>)
 800b392:	4413      	add	r3, r2
 800b394:	60bb      	str	r3, [r7, #8]
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	605a      	str	r2, [r3, #4]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d104      	bne.n	800b3b6 <vTaskSwitchContext+0x8a>
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	605a      	str	r2, [r3, #4]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	4a0b      	ldr	r2, [pc, #44]	; (800b3ec <vTaskSwitchContext+0xc0>)
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	4a08      	ldr	r2, [pc, #32]	; (800b3e4 <vTaskSwitchContext+0xb8>)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b3c6:	4b09      	ldr	r3, [pc, #36]	; (800b3ec <vTaskSwitchContext+0xc0>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	3354      	adds	r3, #84	; 0x54
 800b3cc:	4a08      	ldr	r2, [pc, #32]	; (800b3f0 <vTaskSwitchContext+0xc4>)
 800b3ce:	6013      	str	r3, [r2, #0]
}
 800b3d0:	bf00      	nop
 800b3d2:	3714      	adds	r7, #20
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr
 800b3dc:	200078c0 	.word	0x200078c0
 800b3e0:	200078ac 	.word	0x200078ac
 800b3e4:	200078a0 	.word	0x200078a0
 800b3e8:	200073c8 	.word	0x200073c8
 800b3ec:	200073c4 	.word	0x200073c4
 800b3f0:	200000c4 	.word	0x200000c4

0800b3f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10a      	bne.n	800b41a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	60fb      	str	r3, [r7, #12]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b41a:	4b07      	ldr	r3, [pc, #28]	; (800b438 <vTaskPlaceOnEventList+0x44>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	3318      	adds	r3, #24
 800b420:	4619      	mov	r1, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7fe fcef 	bl	8009e06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b428:	2101      	movs	r1, #1
 800b42a:	6838      	ldr	r0, [r7, #0]
 800b42c:	f000 fa80 	bl	800b930 <prvAddCurrentTaskToDelayedList>
}
 800b430:	bf00      	nop
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	200073c4 	.word	0x200073c4

0800b43c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10a      	bne.n	800b464 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	617b      	str	r3, [r7, #20]
}
 800b460:	bf00      	nop
 800b462:	e7fe      	b.n	800b462 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b464:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <vTaskPlaceOnEventListRestricted+0x54>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	3318      	adds	r3, #24
 800b46a:	4619      	mov	r1, r3
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f7fe fca6 	bl	8009dbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b47c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b47e:	6879      	ldr	r1, [r7, #4]
 800b480:	68b8      	ldr	r0, [r7, #8]
 800b482:	f000 fa55 	bl	800b930 <prvAddCurrentTaskToDelayedList>
	}
 800b486:	bf00      	nop
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	200073c4 	.word	0x200073c4

0800b494 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10a      	bne.n	800b4c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	60fb      	str	r3, [r7, #12]
}
 800b4bc:	bf00      	nop
 800b4be:	e7fe      	b.n	800b4be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	3318      	adds	r3, #24
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fe fcd7 	bl	8009e78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4ca:	4b1e      	ldr	r3, [pc, #120]	; (800b544 <xTaskRemoveFromEventList+0xb0>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d11d      	bne.n	800b50e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fe fcce 	bl	8009e78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e0:	4b19      	ldr	r3, [pc, #100]	; (800b548 <xTaskRemoveFromEventList+0xb4>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d903      	bls.n	800b4f0 <xTaskRemoveFromEventList+0x5c>
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ec:	4a16      	ldr	r2, [pc, #88]	; (800b548 <xTaskRemoveFromEventList+0xb4>)
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	4413      	add	r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4a13      	ldr	r2, [pc, #76]	; (800b54c <xTaskRemoveFromEventList+0xb8>)
 800b4fe:	441a      	add	r2, r3
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	3304      	adds	r3, #4
 800b504:	4619      	mov	r1, r3
 800b506:	4610      	mov	r0, r2
 800b508:	f7fe fc59 	bl	8009dbe <vListInsertEnd>
 800b50c:	e005      	b.n	800b51a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	3318      	adds	r3, #24
 800b512:	4619      	mov	r1, r3
 800b514:	480e      	ldr	r0, [pc, #56]	; (800b550 <xTaskRemoveFromEventList+0xbc>)
 800b516:	f7fe fc52 	bl	8009dbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51e:	4b0d      	ldr	r3, [pc, #52]	; (800b554 <xTaskRemoveFromEventList+0xc0>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b524:	429a      	cmp	r2, r3
 800b526:	d905      	bls.n	800b534 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b528:	2301      	movs	r3, #1
 800b52a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b52c:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <xTaskRemoveFromEventList+0xc4>)
 800b52e:	2201      	movs	r2, #1
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	e001      	b.n	800b538 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b534:	2300      	movs	r3, #0
 800b536:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b538:	697b      	ldr	r3, [r7, #20]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3718      	adds	r7, #24
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	200078c0 	.word	0x200078c0
 800b548:	200078a0 	.word	0x200078a0
 800b54c:	200073c8 	.word	0x200073c8
 800b550:	20007858 	.word	0x20007858
 800b554:	200073c4 	.word	0x200073c4
 800b558:	200078ac 	.word	0x200078ac

0800b55c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b564:	4b06      	ldr	r3, [pc, #24]	; (800b580 <vTaskInternalSetTimeOutState+0x24>)
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b56c:	4b05      	ldr	r3, [pc, #20]	; (800b584 <vTaskInternalSetTimeOutState+0x28>)
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	605a      	str	r2, [r3, #4]
}
 800b574:	bf00      	nop
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	200078b0 	.word	0x200078b0
 800b584:	2000789c 	.word	0x2000789c

0800b588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b088      	sub	sp, #32
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10a      	bne.n	800b5ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	613b      	str	r3, [r7, #16]
}
 800b5aa:	bf00      	nop
 800b5ac:	e7fe      	b.n	800b5ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10a      	bne.n	800b5ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	60fb      	str	r3, [r7, #12]
}
 800b5c6:	bf00      	nop
 800b5c8:	e7fe      	b.n	800b5c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b5ca:	f000 fe83 	bl	800c2d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5ce:	4b1d      	ldr	r3, [pc, #116]	; (800b644 <xTaskCheckForTimeOut+0xbc>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	69ba      	ldr	r2, [r7, #24]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5e6:	d102      	bne.n	800b5ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	61fb      	str	r3, [r7, #28]
 800b5ec:	e023      	b.n	800b636 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4b15      	ldr	r3, [pc, #84]	; (800b648 <xTaskCheckForTimeOut+0xc0>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d007      	beq.n	800b60a <xTaskCheckForTimeOut+0x82>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	69ba      	ldr	r2, [r7, #24]
 800b600:	429a      	cmp	r2, r3
 800b602:	d302      	bcc.n	800b60a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b604:	2301      	movs	r3, #1
 800b606:	61fb      	str	r3, [r7, #28]
 800b608:	e015      	b.n	800b636 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	429a      	cmp	r2, r3
 800b612:	d20b      	bcs.n	800b62c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	1ad2      	subs	r2, r2, r3
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff ff9b 	bl	800b55c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b626:	2300      	movs	r3, #0
 800b628:	61fb      	str	r3, [r7, #28]
 800b62a:	e004      	b.n	800b636 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	2200      	movs	r2, #0
 800b630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b632:	2301      	movs	r3, #1
 800b634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b636:	f000 fe7d 	bl	800c334 <vPortExitCritical>

	return xReturn;
 800b63a:	69fb      	ldr	r3, [r7, #28]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3720      	adds	r7, #32
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	2000789c 	.word	0x2000789c
 800b648:	200078b0 	.word	0x200078b0

0800b64c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b650:	4b03      	ldr	r3, [pc, #12]	; (800b660 <vTaskMissedYield+0x14>)
 800b652:	2201      	movs	r2, #1
 800b654:	601a      	str	r2, [r3, #0]
}
 800b656:	bf00      	nop
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	200078ac 	.word	0x200078ac

0800b664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b66c:	f000 f852 	bl	800b714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b670:	4b06      	ldr	r3, [pc, #24]	; (800b68c <prvIdleTask+0x28>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d9f9      	bls.n	800b66c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <prvIdleTask+0x2c>)
 800b67a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b688:	e7f0      	b.n	800b66c <prvIdleTask+0x8>
 800b68a:	bf00      	nop
 800b68c:	200073c8 	.word	0x200073c8
 800b690:	e000ed04 	.word	0xe000ed04

0800b694 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b69a:	2300      	movs	r3, #0
 800b69c:	607b      	str	r3, [r7, #4]
 800b69e:	e00c      	b.n	800b6ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4a12      	ldr	r2, [pc, #72]	; (800b6f4 <prvInitialiseTaskLists+0x60>)
 800b6ac:	4413      	add	r3, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe fb58 	bl	8009d64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	607b      	str	r3, [r7, #4]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b37      	cmp	r3, #55	; 0x37
 800b6be:	d9ef      	bls.n	800b6a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6c0:	480d      	ldr	r0, [pc, #52]	; (800b6f8 <prvInitialiseTaskLists+0x64>)
 800b6c2:	f7fe fb4f 	bl	8009d64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6c6:	480d      	ldr	r0, [pc, #52]	; (800b6fc <prvInitialiseTaskLists+0x68>)
 800b6c8:	f7fe fb4c 	bl	8009d64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6cc:	480c      	ldr	r0, [pc, #48]	; (800b700 <prvInitialiseTaskLists+0x6c>)
 800b6ce:	f7fe fb49 	bl	8009d64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6d2:	480c      	ldr	r0, [pc, #48]	; (800b704 <prvInitialiseTaskLists+0x70>)
 800b6d4:	f7fe fb46 	bl	8009d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6d8:	480b      	ldr	r0, [pc, #44]	; (800b708 <prvInitialiseTaskLists+0x74>)
 800b6da:	f7fe fb43 	bl	8009d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6de:	4b0b      	ldr	r3, [pc, #44]	; (800b70c <prvInitialiseTaskLists+0x78>)
 800b6e0:	4a05      	ldr	r2, [pc, #20]	; (800b6f8 <prvInitialiseTaskLists+0x64>)
 800b6e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6e4:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <prvInitialiseTaskLists+0x7c>)
 800b6e6:	4a05      	ldr	r2, [pc, #20]	; (800b6fc <prvInitialiseTaskLists+0x68>)
 800b6e8:	601a      	str	r2, [r3, #0]
}
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	200073c8 	.word	0x200073c8
 800b6f8:	20007828 	.word	0x20007828
 800b6fc:	2000783c 	.word	0x2000783c
 800b700:	20007858 	.word	0x20007858
 800b704:	2000786c 	.word	0x2000786c
 800b708:	20007884 	.word	0x20007884
 800b70c:	20007850 	.word	0x20007850
 800b710:	20007854 	.word	0x20007854

0800b714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b71a:	e019      	b.n	800b750 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b71c:	f000 fdda 	bl	800c2d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b720:	4b10      	ldr	r3, [pc, #64]	; (800b764 <prvCheckTasksWaitingTermination+0x50>)
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3304      	adds	r3, #4
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fe fba3 	bl	8009e78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b732:	4b0d      	ldr	r3, [pc, #52]	; (800b768 <prvCheckTasksWaitingTermination+0x54>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3b01      	subs	r3, #1
 800b738:	4a0b      	ldr	r2, [pc, #44]	; (800b768 <prvCheckTasksWaitingTermination+0x54>)
 800b73a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b73c:	4b0b      	ldr	r3, [pc, #44]	; (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3b01      	subs	r3, #1
 800b742:	4a0a      	ldr	r2, [pc, #40]	; (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b744:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b746:	f000 fdf5 	bl	800c334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f810 	bl	800b770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b750:	4b06      	ldr	r3, [pc, #24]	; (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1e1      	bne.n	800b71c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b758:	bf00      	nop
 800b75a:	bf00      	nop
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	2000786c 	.word	0x2000786c
 800b768:	20007898 	.word	0x20007898
 800b76c:	20007880 	.word	0x20007880

0800b770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	3354      	adds	r3, #84	; 0x54
 800b77c:	4618      	mov	r0, r3
 800b77e:	f001 fa95 	bl	800ccac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d108      	bne.n	800b79e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b790:	4618      	mov	r0, r3
 800b792:	f000 ff65 	bl	800c660 <vPortFree>
				vPortFree( pxTCB );
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 ff62 	bl	800c660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b79c:	e018      	b.n	800b7d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d103      	bne.n	800b7b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 ff59 	bl	800c660 <vPortFree>
	}
 800b7ae:	e00f      	b.n	800b7d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d00a      	beq.n	800b7d0 <prvDeleteTCB+0x60>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	60fb      	str	r3, [r7, #12]
}
 800b7cc:	bf00      	nop
 800b7ce:	e7fe      	b.n	800b7ce <prvDeleteTCB+0x5e>
	}
 800b7d0:	bf00      	nop
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7de:	4b0c      	ldr	r3, [pc, #48]	; (800b810 <prvResetNextTaskUnblockTime+0x38>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d104      	bne.n	800b7f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7e8:	4b0a      	ldr	r3, [pc, #40]	; (800b814 <prvResetNextTaskUnblockTime+0x3c>)
 800b7ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7f0:	e008      	b.n	800b804 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f2:	4b07      	ldr	r3, [pc, #28]	; (800b810 <prvResetNextTaskUnblockTime+0x38>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	4a04      	ldr	r2, [pc, #16]	; (800b814 <prvResetNextTaskUnblockTime+0x3c>)
 800b802:	6013      	str	r3, [r2, #0]
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	20007850 	.word	0x20007850
 800b814:	200078b8 	.word	0x200078b8

0800b818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b81e:	4b0b      	ldr	r3, [pc, #44]	; (800b84c <xTaskGetSchedulerState+0x34>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d102      	bne.n	800b82c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b826:	2301      	movs	r3, #1
 800b828:	607b      	str	r3, [r7, #4]
 800b82a:	e008      	b.n	800b83e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b82c:	4b08      	ldr	r3, [pc, #32]	; (800b850 <xTaskGetSchedulerState+0x38>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d102      	bne.n	800b83a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b834:	2302      	movs	r3, #2
 800b836:	607b      	str	r3, [r7, #4]
 800b838:	e001      	b.n	800b83e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b83a:	2300      	movs	r3, #0
 800b83c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b83e:	687b      	ldr	r3, [r7, #4]
	}
 800b840:	4618      	mov	r0, r3
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	200078a4 	.word	0x200078a4
 800b850:	200078c0 	.word	0x200078c0

0800b854 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b860:	2300      	movs	r3, #0
 800b862:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d056      	beq.n	800b918 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b86a:	4b2e      	ldr	r3, [pc, #184]	; (800b924 <xTaskPriorityDisinherit+0xd0>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	693a      	ldr	r2, [r7, #16]
 800b870:	429a      	cmp	r2, r3
 800b872:	d00a      	beq.n	800b88a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b878:	f383 8811 	msr	BASEPRI, r3
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	60fb      	str	r3, [r7, #12]
}
 800b886:	bf00      	nop
 800b888:	e7fe      	b.n	800b888 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d10a      	bne.n	800b8a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	60bb      	str	r3, [r7, #8]
}
 800b8a4:	bf00      	nop
 800b8a6:	e7fe      	b.n	800b8a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ac:	1e5a      	subs	r2, r3, #1
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d02c      	beq.n	800b918 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d128      	bne.n	800b918 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fe fad4 	bl	8009e78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e8:	4b0f      	ldr	r3, [pc, #60]	; (800b928 <xTaskPriorityDisinherit+0xd4>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d903      	bls.n	800b8f8 <xTaskPriorityDisinherit+0xa4>
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f4:	4a0c      	ldr	r2, [pc, #48]	; (800b928 <xTaskPriorityDisinherit+0xd4>)
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4413      	add	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4a09      	ldr	r2, [pc, #36]	; (800b92c <xTaskPriorityDisinherit+0xd8>)
 800b906:	441a      	add	r2, r3
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	3304      	adds	r3, #4
 800b90c:	4619      	mov	r1, r3
 800b90e:	4610      	mov	r0, r2
 800b910:	f7fe fa55 	bl	8009dbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b914:	2301      	movs	r3, #1
 800b916:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b918:	697b      	ldr	r3, [r7, #20]
	}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	200073c4 	.word	0x200073c4
 800b928:	200078a0 	.word	0x200078a0
 800b92c:	200073c8 	.word	0x200073c8

0800b930 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b93a:	4b21      	ldr	r3, [pc, #132]	; (800b9c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b940:	4b20      	ldr	r3, [pc, #128]	; (800b9c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	3304      	adds	r3, #4
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe fa96 	bl	8009e78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b952:	d10a      	bne.n	800b96a <prvAddCurrentTaskToDelayedList+0x3a>
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d007      	beq.n	800b96a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b95a:	4b1a      	ldr	r3, [pc, #104]	; (800b9c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	3304      	adds	r3, #4
 800b960:	4619      	mov	r1, r3
 800b962:	4819      	ldr	r0, [pc, #100]	; (800b9c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b964:	f7fe fa2b 	bl	8009dbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b968:	e026      	b.n	800b9b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4413      	add	r3, r2
 800b970:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b972:	4b14      	ldr	r3, [pc, #80]	; (800b9c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d209      	bcs.n	800b996 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b982:	4b12      	ldr	r3, [pc, #72]	; (800b9cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	4b0f      	ldr	r3, [pc, #60]	; (800b9c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	3304      	adds	r3, #4
 800b98c:	4619      	mov	r1, r3
 800b98e:	4610      	mov	r0, r2
 800b990:	f7fe fa39 	bl	8009e06 <vListInsert>
}
 800b994:	e010      	b.n	800b9b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b996:	4b0e      	ldr	r3, [pc, #56]	; (800b9d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	4b0a      	ldr	r3, [pc, #40]	; (800b9c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	3304      	adds	r3, #4
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	f7fe fa2f 	bl	8009e06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9a8:	4b0a      	ldr	r3, [pc, #40]	; (800b9d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d202      	bcs.n	800b9b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b9b2:	4a08      	ldr	r2, [pc, #32]	; (800b9d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	6013      	str	r3, [r2, #0]
}
 800b9b8:	bf00      	nop
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	2000789c 	.word	0x2000789c
 800b9c4:	200073c4 	.word	0x200073c4
 800b9c8:	20007884 	.word	0x20007884
 800b9cc:	20007854 	.word	0x20007854
 800b9d0:	20007850 	.word	0x20007850
 800b9d4:	200078b8 	.word	0x200078b8

0800b9d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b08a      	sub	sp, #40	; 0x28
 800b9dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b9e2:	f000 fb07 	bl	800bff4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b9e6:	4b1c      	ldr	r3, [pc, #112]	; (800ba58 <xTimerCreateTimerTask+0x80>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d021      	beq.n	800ba32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b9f6:	1d3a      	adds	r2, r7, #4
 800b9f8:	f107 0108 	add.w	r1, r7, #8
 800b9fc:	f107 030c 	add.w	r3, r7, #12
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7fe f995 	bl	8009d30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba06:	6879      	ldr	r1, [r7, #4]
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	9202      	str	r2, [sp, #8]
 800ba0e:	9301      	str	r3, [sp, #4]
 800ba10:	2302      	movs	r3, #2
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	2300      	movs	r3, #0
 800ba16:	460a      	mov	r2, r1
 800ba18:	4910      	ldr	r1, [pc, #64]	; (800ba5c <xTimerCreateTimerTask+0x84>)
 800ba1a:	4811      	ldr	r0, [pc, #68]	; (800ba60 <xTimerCreateTimerTask+0x88>)
 800ba1c:	f7ff f8b4 	bl	800ab88 <xTaskCreateStatic>
 800ba20:	4603      	mov	r3, r0
 800ba22:	4a10      	ldr	r2, [pc, #64]	; (800ba64 <xTimerCreateTimerTask+0x8c>)
 800ba24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba26:	4b0f      	ldr	r3, [pc, #60]	; (800ba64 <xTimerCreateTimerTask+0x8c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d001      	beq.n	800ba32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10a      	bne.n	800ba4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	613b      	str	r3, [r7, #16]
}
 800ba4a:	bf00      	nop
 800ba4c:	e7fe      	b.n	800ba4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba4e:	697b      	ldr	r3, [r7, #20]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	200078f4 	.word	0x200078f4
 800ba5c:	0800df6c 	.word	0x0800df6c
 800ba60:	0800bb9d 	.word	0x0800bb9d
 800ba64:	200078f8 	.word	0x200078f8

0800ba68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b08a      	sub	sp, #40	; 0x28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba76:	2300      	movs	r3, #0
 800ba78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10a      	bne.n	800ba96 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	623b      	str	r3, [r7, #32]
}
 800ba92:	bf00      	nop
 800ba94:	e7fe      	b.n	800ba94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba96:	4b1a      	ldr	r3, [pc, #104]	; (800bb00 <xTimerGenericCommand+0x98>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d02a      	beq.n	800baf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	2b05      	cmp	r3, #5
 800baae:	dc18      	bgt.n	800bae2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bab0:	f7ff feb2 	bl	800b818 <xTaskGetSchedulerState>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d109      	bne.n	800bace <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800baba:	4b11      	ldr	r3, [pc, #68]	; (800bb00 <xTimerGenericCommand+0x98>)
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	f107 0110 	add.w	r1, r7, #16
 800bac2:	2300      	movs	r3, #0
 800bac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bac6:	f7fe fba9 	bl	800a21c <xQueueGenericSend>
 800baca:	6278      	str	r0, [r7, #36]	; 0x24
 800bacc:	e012      	b.n	800baf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bace:	4b0c      	ldr	r3, [pc, #48]	; (800bb00 <xTimerGenericCommand+0x98>)
 800bad0:	6818      	ldr	r0, [r3, #0]
 800bad2:	f107 0110 	add.w	r1, r7, #16
 800bad6:	2300      	movs	r3, #0
 800bad8:	2200      	movs	r2, #0
 800bada:	f7fe fb9f 	bl	800a21c <xQueueGenericSend>
 800bade:	6278      	str	r0, [r7, #36]	; 0x24
 800bae0:	e008      	b.n	800baf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bae2:	4b07      	ldr	r3, [pc, #28]	; (800bb00 <xTimerGenericCommand+0x98>)
 800bae4:	6818      	ldr	r0, [r3, #0]
 800bae6:	f107 0110 	add.w	r1, r7, #16
 800baea:	2300      	movs	r3, #0
 800baec:	683a      	ldr	r2, [r7, #0]
 800baee:	f7fe fc93 	bl	800a418 <xQueueGenericSendFromISR>
 800baf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3728      	adds	r7, #40	; 0x28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	200078f4 	.word	0x200078f4

0800bb04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b088      	sub	sp, #32
 800bb08:	af02      	add	r7, sp, #8
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb0e:	4b22      	ldr	r3, [pc, #136]	; (800bb98 <prvProcessExpiredTimer+0x94>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7fe f9ab 	bl	8009e78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb28:	f003 0304 	and.w	r3, r3, #4
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d022      	beq.n	800bb76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	699a      	ldr	r2, [r3, #24]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	18d1      	adds	r1, r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	6978      	ldr	r0, [r7, #20]
 800bb3e:	f000 f8d1 	bl	800bce4 <prvInsertTimerInActiveList>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d01f      	beq.n	800bb88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb48:	2300      	movs	r3, #0
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	2100      	movs	r1, #0
 800bb52:	6978      	ldr	r0, [r7, #20]
 800bb54:	f7ff ff88 	bl	800ba68 <xTimerGenericCommand>
 800bb58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d113      	bne.n	800bb88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	60fb      	str	r3, [r7, #12]
}
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb7c:	f023 0301 	bic.w	r3, r3, #1
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	6a1b      	ldr	r3, [r3, #32]
 800bb8c:	6978      	ldr	r0, [r7, #20]
 800bb8e:	4798      	blx	r3
}
 800bb90:	bf00      	nop
 800bb92:	3718      	adds	r7, #24
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	200078ec 	.word	0x200078ec

0800bb9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bba4:	f107 0308 	add.w	r3, r7, #8
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f000 f857 	bl	800bc5c <prvGetNextExpireTime>
 800bbae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f000 f803 	bl	800bbc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbba:	f000 f8d5 	bl	800bd68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbbe:	e7f1      	b.n	800bba4 <prvTimerTask+0x8>

0800bbc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbca:	f7ff fa39 	bl	800b040 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbce:	f107 0308 	add.w	r3, r7, #8
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 f866 	bl	800bca4 <prvSampleTimeNow>
 800bbd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d130      	bne.n	800bc42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10a      	bne.n	800bbfc <prvProcessTimerOrBlockTask+0x3c>
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d806      	bhi.n	800bbfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bbee:	f7ff fa35 	bl	800b05c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bbf2:	68f9      	ldr	r1, [r7, #12]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7ff ff85 	bl	800bb04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bbfa:	e024      	b.n	800bc46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d008      	beq.n	800bc14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc02:	4b13      	ldr	r3, [pc, #76]	; (800bc50 <prvProcessTimerOrBlockTask+0x90>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <prvProcessTimerOrBlockTask+0x50>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e000      	b.n	800bc12 <prvProcessTimerOrBlockTask+0x52>
 800bc10:	2300      	movs	r3, #0
 800bc12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc14:	4b0f      	ldr	r3, [pc, #60]	; (800bc54 <prvProcessTimerOrBlockTask+0x94>)
 800bc16:	6818      	ldr	r0, [r3, #0]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	683a      	ldr	r2, [r7, #0]
 800bc20:	4619      	mov	r1, r3
 800bc22:	f7fe ff7d 	bl	800ab20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc26:	f7ff fa19 	bl	800b05c <xTaskResumeAll>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10a      	bne.n	800bc46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc30:	4b09      	ldr	r3, [pc, #36]	; (800bc58 <prvProcessTimerOrBlockTask+0x98>)
 800bc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc36:	601a      	str	r2, [r3, #0]
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	f3bf 8f6f 	isb	sy
}
 800bc40:	e001      	b.n	800bc46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc42:	f7ff fa0b 	bl	800b05c <xTaskResumeAll>
}
 800bc46:	bf00      	nop
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	200078f0 	.word	0x200078f0
 800bc54:	200078f4 	.word	0x200078f4
 800bc58:	e000ed04 	.word	0xe000ed04

0800bc5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc64:	4b0e      	ldr	r3, [pc, #56]	; (800bca0 <prvGetNextExpireTime+0x44>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <prvGetNextExpireTime+0x16>
 800bc6e:	2201      	movs	r2, #1
 800bc70:	e000      	b.n	800bc74 <prvGetNextExpireTime+0x18>
 800bc72:	2200      	movs	r2, #0
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d105      	bne.n	800bc8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc80:	4b07      	ldr	r3, [pc, #28]	; (800bca0 <prvGetNextExpireTime+0x44>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	60fb      	str	r3, [r7, #12]
 800bc8a:	e001      	b.n	800bc90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc90:	68fb      	ldr	r3, [r7, #12]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	200078ec 	.word	0x200078ec

0800bca4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bcac:	f7ff fa74 	bl	800b198 <xTaskGetTickCount>
 800bcb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcb2:	4b0b      	ldr	r3, [pc, #44]	; (800bce0 <prvSampleTimeNow+0x3c>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d205      	bcs.n	800bcc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bcbc:	f000 f936 	bl	800bf2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	601a      	str	r2, [r3, #0]
 800bcc6:	e002      	b.n	800bcce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcce:	4a04      	ldr	r2, [pc, #16]	; (800bce0 <prvSampleTimeNow+0x3c>)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	200078fc 	.word	0x200078fc

0800bce4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
 800bcf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	68ba      	ldr	r2, [r7, #8]
 800bcfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d812      	bhi.n	800bd30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	1ad2      	subs	r2, r2, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	699b      	ldr	r3, [r3, #24]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d302      	bcc.n	800bd1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	617b      	str	r3, [r7, #20]
 800bd1c:	e01b      	b.n	800bd56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd1e:	4b10      	ldr	r3, [pc, #64]	; (800bd60 <prvInsertTimerInActiveList+0x7c>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	3304      	adds	r3, #4
 800bd26:	4619      	mov	r1, r3
 800bd28:	4610      	mov	r0, r2
 800bd2a:	f7fe f86c 	bl	8009e06 <vListInsert>
 800bd2e:	e012      	b.n	800bd56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d206      	bcs.n	800bd46 <prvInsertTimerInActiveList+0x62>
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d302      	bcc.n	800bd46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd40:	2301      	movs	r3, #1
 800bd42:	617b      	str	r3, [r7, #20]
 800bd44:	e007      	b.n	800bd56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd46:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <prvInsertTimerInActiveList+0x80>)
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4610      	mov	r0, r2
 800bd52:	f7fe f858 	bl	8009e06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd56:	697b      	ldr	r3, [r7, #20]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	200078f0 	.word	0x200078f0
 800bd64:	200078ec 	.word	0x200078ec

0800bd68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08e      	sub	sp, #56	; 0x38
 800bd6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd6e:	e0ca      	b.n	800bf06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	da18      	bge.n	800bda8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd76:	1d3b      	adds	r3, r7, #4
 800bd78:	3304      	adds	r3, #4
 800bd7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10a      	bne.n	800bd98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	61fb      	str	r3, [r7, #28]
}
 800bd94:	bf00      	nop
 800bd96:	e7fe      	b.n	800bd96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd9e:	6850      	ldr	r0, [r2, #4]
 800bda0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bda2:	6892      	ldr	r2, [r2, #8]
 800bda4:	4611      	mov	r1, r2
 800bda6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f2c0 80aa 	blt.w	800bf04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	695b      	ldr	r3, [r3, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d004      	beq.n	800bdc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe f859 	bl	8009e78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdc6:	463b      	mov	r3, r7
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff ff6b 	bl	800bca4 <prvSampleTimeNow>
 800bdce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2b09      	cmp	r3, #9
 800bdd4:	f200 8097 	bhi.w	800bf06 <prvProcessReceivedCommands+0x19e>
 800bdd8:	a201      	add	r2, pc, #4	; (adr r2, 800bde0 <prvProcessReceivedCommands+0x78>)
 800bdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdde:	bf00      	nop
 800bde0:	0800be09 	.word	0x0800be09
 800bde4:	0800be09 	.word	0x0800be09
 800bde8:	0800be09 	.word	0x0800be09
 800bdec:	0800be7d 	.word	0x0800be7d
 800bdf0:	0800be91 	.word	0x0800be91
 800bdf4:	0800bedb 	.word	0x0800bedb
 800bdf8:	0800be09 	.word	0x0800be09
 800bdfc:	0800be09 	.word	0x0800be09
 800be00:	0800be7d 	.word	0x0800be7d
 800be04:	0800be91 	.word	0x0800be91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be0e:	f043 0301 	orr.w	r3, r3, #1
 800be12:	b2da      	uxtb	r2, r3
 800be14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	18d1      	adds	r1, r2, r3
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be28:	f7ff ff5c 	bl	800bce4 <prvInsertTimerInActiveList>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d069      	beq.n	800bf06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be34:	6a1b      	ldr	r3, [r3, #32]
 800be36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be40:	f003 0304 	and.w	r3, r3, #4
 800be44:	2b00      	cmp	r3, #0
 800be46:	d05e      	beq.n	800bf06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4c:	699b      	ldr	r3, [r3, #24]
 800be4e:	441a      	add	r2, r3
 800be50:	2300      	movs	r3, #0
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	2300      	movs	r3, #0
 800be56:	2100      	movs	r1, #0
 800be58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be5a:	f7ff fe05 	bl	800ba68 <xTimerGenericCommand>
 800be5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d14f      	bne.n	800bf06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	61bb      	str	r3, [r7, #24]
}
 800be78:	bf00      	nop
 800be7a:	e7fe      	b.n	800be7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be82:	f023 0301 	bic.w	r3, r3, #1
 800be86:	b2da      	uxtb	r2, r3
 800be88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800be8e:	e03a      	b.n	800bf06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be96:	f043 0301 	orr.w	r3, r3, #1
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10a      	bne.n	800bec6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	617b      	str	r3, [r7, #20]
}
 800bec2:	bf00      	nop
 800bec4:	e7fe      	b.n	800bec4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec8:	699a      	ldr	r2, [r3, #24]
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	18d1      	adds	r1, r2, r3
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bed4:	f7ff ff06 	bl	800bce4 <prvInsertTimerInActiveList>
					break;
 800bed8:	e015      	b.n	800bf06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bedc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d103      	bne.n	800bef0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beea:	f000 fbb9 	bl	800c660 <vPortFree>
 800beee:	e00a      	b.n	800bf06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bef6:	f023 0301 	bic.w	r3, r3, #1
 800befa:	b2da      	uxtb	r2, r3
 800befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf02:	e000      	b.n	800bf06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bf04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf06:	4b08      	ldr	r3, [pc, #32]	; (800bf28 <prvProcessReceivedCommands+0x1c0>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	1d39      	adds	r1, r7, #4
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fe fb1e 	bl	800a550 <xQueueReceive>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f47f af2a 	bne.w	800bd70 <prvProcessReceivedCommands+0x8>
	}
}
 800bf1c:	bf00      	nop
 800bf1e:	bf00      	nop
 800bf20:	3730      	adds	r7, #48	; 0x30
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	200078f4 	.word	0x200078f4

0800bf2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf32:	e048      	b.n	800bfc6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf34:	4b2d      	ldr	r3, [pc, #180]	; (800bfec <prvSwitchTimerLists+0xc0>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf3e:	4b2b      	ldr	r3, [pc, #172]	; (800bfec <prvSwitchTimerLists+0xc0>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7fd ff93 	bl	8009e78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6a1b      	ldr	r3, [r3, #32]
 800bf56:	68f8      	ldr	r0, [r7, #12]
 800bf58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d02e      	beq.n	800bfc6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	699b      	ldr	r3, [r3, #24]
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	4413      	add	r3, r2
 800bf70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d90e      	bls.n	800bf98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf86:	4b19      	ldr	r3, [pc, #100]	; (800bfec <prvSwitchTimerLists+0xc0>)
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	4619      	mov	r1, r3
 800bf90:	4610      	mov	r0, r2
 800bf92:	f7fd ff38 	bl	8009e06 <vListInsert>
 800bf96:	e016      	b.n	800bfc6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf98:	2300      	movs	r3, #0
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	693a      	ldr	r2, [r7, #16]
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f7ff fd60 	bl	800ba68 <xTimerGenericCommand>
 800bfa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10a      	bne.n	800bfc6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	603b      	str	r3, [r7, #0]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfc6:	4b09      	ldr	r3, [pc, #36]	; (800bfec <prvSwitchTimerLists+0xc0>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1b1      	bne.n	800bf34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bfd0:	4b06      	ldr	r3, [pc, #24]	; (800bfec <prvSwitchTimerLists+0xc0>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bfd6:	4b06      	ldr	r3, [pc, #24]	; (800bff0 <prvSwitchTimerLists+0xc4>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a04      	ldr	r2, [pc, #16]	; (800bfec <prvSwitchTimerLists+0xc0>)
 800bfdc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bfde:	4a04      	ldr	r2, [pc, #16]	; (800bff0 <prvSwitchTimerLists+0xc4>)
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	6013      	str	r3, [r2, #0]
}
 800bfe4:	bf00      	nop
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	200078ec 	.word	0x200078ec
 800bff0:	200078f0 	.word	0x200078f0

0800bff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bffa:	f000 f96b 	bl	800c2d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bffe:	4b15      	ldr	r3, [pc, #84]	; (800c054 <prvCheckForValidListAndQueue+0x60>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d120      	bne.n	800c048 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c006:	4814      	ldr	r0, [pc, #80]	; (800c058 <prvCheckForValidListAndQueue+0x64>)
 800c008:	f7fd feac 	bl	8009d64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c00c:	4813      	ldr	r0, [pc, #76]	; (800c05c <prvCheckForValidListAndQueue+0x68>)
 800c00e:	f7fd fea9 	bl	8009d64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c012:	4b13      	ldr	r3, [pc, #76]	; (800c060 <prvCheckForValidListAndQueue+0x6c>)
 800c014:	4a10      	ldr	r2, [pc, #64]	; (800c058 <prvCheckForValidListAndQueue+0x64>)
 800c016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c018:	4b12      	ldr	r3, [pc, #72]	; (800c064 <prvCheckForValidListAndQueue+0x70>)
 800c01a:	4a10      	ldr	r2, [pc, #64]	; (800c05c <prvCheckForValidListAndQueue+0x68>)
 800c01c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c01e:	2300      	movs	r3, #0
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	4b11      	ldr	r3, [pc, #68]	; (800c068 <prvCheckForValidListAndQueue+0x74>)
 800c024:	4a11      	ldr	r2, [pc, #68]	; (800c06c <prvCheckForValidListAndQueue+0x78>)
 800c026:	2110      	movs	r1, #16
 800c028:	200a      	movs	r0, #10
 800c02a:	f7fd ffb7 	bl	8009f9c <xQueueGenericCreateStatic>
 800c02e:	4603      	mov	r3, r0
 800c030:	4a08      	ldr	r2, [pc, #32]	; (800c054 <prvCheckForValidListAndQueue+0x60>)
 800c032:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c034:	4b07      	ldr	r3, [pc, #28]	; (800c054 <prvCheckForValidListAndQueue+0x60>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d005      	beq.n	800c048 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c03c:	4b05      	ldr	r3, [pc, #20]	; (800c054 <prvCheckForValidListAndQueue+0x60>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	490b      	ldr	r1, [pc, #44]	; (800c070 <prvCheckForValidListAndQueue+0x7c>)
 800c042:	4618      	mov	r0, r3
 800c044:	f7fe fd18 	bl	800aa78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c048:	f000 f974 	bl	800c334 <vPortExitCritical>
}
 800c04c:	bf00      	nop
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	200078f4 	.word	0x200078f4
 800c058:	200078c4 	.word	0x200078c4
 800c05c:	200078d8 	.word	0x200078d8
 800c060:	200078ec 	.word	0x200078ec
 800c064:	200078f0 	.word	0x200078f0
 800c068:	200079a0 	.word	0x200079a0
 800c06c:	20007900 	.word	0x20007900
 800c070:	0800df74 	.word	0x0800df74

0800c074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3b04      	subs	r3, #4
 800c084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3b04      	subs	r3, #4
 800c092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	f023 0201 	bic.w	r2, r3, #1
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3b04      	subs	r3, #4
 800c0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0a4:	4a0c      	ldr	r2, [pc, #48]	; (800c0d8 <pxPortInitialiseStack+0x64>)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	3b14      	subs	r3, #20
 800c0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3b04      	subs	r3, #4
 800c0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f06f 0202 	mvn.w	r2, #2
 800c0c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	3b20      	subs	r3, #32
 800c0c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	0800c0dd 	.word	0x0800c0dd

0800c0dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0e6:	4b12      	ldr	r3, [pc, #72]	; (800c130 <prvTaskExitError+0x54>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0ee:	d00a      	beq.n	800c106 <prvTaskExitError+0x2a>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	60fb      	str	r3, [r7, #12]
}
 800c102:	bf00      	nop
 800c104:	e7fe      	b.n	800c104 <prvTaskExitError+0x28>
	__asm volatile
 800c106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10a:	f383 8811 	msr	BASEPRI, r3
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	f3bf 8f4f 	dsb	sy
 800c116:	60bb      	str	r3, [r7, #8]
}
 800c118:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c11a:	bf00      	nop
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d0fc      	beq.n	800c11c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr
 800c130:	200000c0 	.word	0x200000c0
	...

0800c140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c140:	4b07      	ldr	r3, [pc, #28]	; (800c160 <pxCurrentTCBConst2>)
 800c142:	6819      	ldr	r1, [r3, #0]
 800c144:	6808      	ldr	r0, [r1, #0]
 800c146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14a:	f380 8809 	msr	PSP, r0
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f04f 0000 	mov.w	r0, #0
 800c156:	f380 8811 	msr	BASEPRI, r0
 800c15a:	4770      	bx	lr
 800c15c:	f3af 8000 	nop.w

0800c160 <pxCurrentTCBConst2>:
 800c160:	200073c4 	.word	0x200073c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop

0800c168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c168:	4808      	ldr	r0, [pc, #32]	; (800c18c <prvPortStartFirstTask+0x24>)
 800c16a:	6800      	ldr	r0, [r0, #0]
 800c16c:	6800      	ldr	r0, [r0, #0]
 800c16e:	f380 8808 	msr	MSP, r0
 800c172:	f04f 0000 	mov.w	r0, #0
 800c176:	f380 8814 	msr	CONTROL, r0
 800c17a:	b662      	cpsie	i
 800c17c:	b661      	cpsie	f
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	df00      	svc	0
 800c188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c18a:	bf00      	nop
 800c18c:	e000ed08 	.word	0xe000ed08

0800c190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c196:	4b46      	ldr	r3, [pc, #280]	; (800c2b0 <xPortStartScheduler+0x120>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a46      	ldr	r2, [pc, #280]	; (800c2b4 <xPortStartScheduler+0x124>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d10a      	bne.n	800c1b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	613b      	str	r3, [r7, #16]
}
 800c1b2:	bf00      	nop
 800c1b4:	e7fe      	b.n	800c1b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1b6:	4b3e      	ldr	r3, [pc, #248]	; (800c2b0 <xPortStartScheduler+0x120>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a3f      	ldr	r2, [pc, #252]	; (800c2b8 <xPortStartScheduler+0x128>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d10a      	bne.n	800c1d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	60fb      	str	r3, [r7, #12]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1d6:	4b39      	ldr	r3, [pc, #228]	; (800c2bc <xPortStartScheduler+0x12c>)
 800c1d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	22ff      	movs	r2, #255	; 0xff
 800c1e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1f0:	78fb      	ldrb	r3, [r7, #3]
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	4b31      	ldr	r3, [pc, #196]	; (800c2c0 <xPortStartScheduler+0x130>)
 800c1fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1fe:	4b31      	ldr	r3, [pc, #196]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c200:	2207      	movs	r2, #7
 800c202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c204:	e009      	b.n	800c21a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c206:	4b2f      	ldr	r3, [pc, #188]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3b01      	subs	r3, #1
 800c20c:	4a2d      	ldr	r2, [pc, #180]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c20e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c210:	78fb      	ldrb	r3, [r7, #3]
 800c212:	b2db      	uxtb	r3, r3
 800c214:	005b      	lsls	r3, r3, #1
 800c216:	b2db      	uxtb	r3, r3
 800c218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c21a:	78fb      	ldrb	r3, [r7, #3]
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c222:	2b80      	cmp	r3, #128	; 0x80
 800c224:	d0ef      	beq.n	800c206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c226:	4b27      	ldr	r3, [pc, #156]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f1c3 0307 	rsb	r3, r3, #7
 800c22e:	2b04      	cmp	r3, #4
 800c230:	d00a      	beq.n	800c248 <xPortStartScheduler+0xb8>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	60bb      	str	r3, [r7, #8]
}
 800c244:	bf00      	nop
 800c246:	e7fe      	b.n	800c246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c248:	4b1e      	ldr	r3, [pc, #120]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	021b      	lsls	r3, r3, #8
 800c24e:	4a1d      	ldr	r2, [pc, #116]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c252:	4b1c      	ldr	r3, [pc, #112]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c25a:	4a1a      	ldr	r2, [pc, #104]	; (800c2c4 <xPortStartScheduler+0x134>)
 800c25c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	b2da      	uxtb	r2, r3
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c266:	4b18      	ldr	r3, [pc, #96]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a17      	ldr	r2, [pc, #92]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c26c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c272:	4b15      	ldr	r3, [pc, #84]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a14      	ldr	r2, [pc, #80]	; (800c2c8 <xPortStartScheduler+0x138>)
 800c278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c27c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c27e:	f000 f8dd 	bl	800c43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c282:	4b12      	ldr	r3, [pc, #72]	; (800c2cc <xPortStartScheduler+0x13c>)
 800c284:	2200      	movs	r2, #0
 800c286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c288:	f000 f8fc 	bl	800c484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c28c:	4b10      	ldr	r3, [pc, #64]	; (800c2d0 <xPortStartScheduler+0x140>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a0f      	ldr	r2, [pc, #60]	; (800c2d0 <xPortStartScheduler+0x140>)
 800c292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c298:	f7ff ff66 	bl	800c168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c29c:	f7ff f846 	bl	800b32c <vTaskSwitchContext>
	prvTaskExitError();
 800c2a0:	f7ff ff1c 	bl	800c0dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3718      	adds	r7, #24
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	e000ed00 	.word	0xe000ed00
 800c2b4:	410fc271 	.word	0x410fc271
 800c2b8:	410fc270 	.word	0x410fc270
 800c2bc:	e000e400 	.word	0xe000e400
 800c2c0:	200079f0 	.word	0x200079f0
 800c2c4:	200079f4 	.word	0x200079f4
 800c2c8:	e000ed20 	.word	0xe000ed20
 800c2cc:	200000c0 	.word	0x200000c0
 800c2d0:	e000ef34 	.word	0xe000ef34

0800c2d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	607b      	str	r3, [r7, #4]
}
 800c2ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2ee:	4b0f      	ldr	r3, [pc, #60]	; (800c32c <vPortEnterCritical+0x58>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	4a0d      	ldr	r2, [pc, #52]	; (800c32c <vPortEnterCritical+0x58>)
 800c2f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2f8:	4b0c      	ldr	r3, [pc, #48]	; (800c32c <vPortEnterCritical+0x58>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d10f      	bne.n	800c320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c300:	4b0b      	ldr	r3, [pc, #44]	; (800c330 <vPortEnterCritical+0x5c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	b2db      	uxtb	r3, r3
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00a      	beq.n	800c320 <vPortEnterCritical+0x4c>
	__asm volatile
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	603b      	str	r3, [r7, #0]
}
 800c31c:	bf00      	nop
 800c31e:	e7fe      	b.n	800c31e <vPortEnterCritical+0x4a>
	}
}
 800c320:	bf00      	nop
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	200000c0 	.word	0x200000c0
 800c330:	e000ed04 	.word	0xe000ed04

0800c334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c33a:	4b12      	ldr	r3, [pc, #72]	; (800c384 <vPortExitCritical+0x50>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10a      	bne.n	800c358 <vPortExitCritical+0x24>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	607b      	str	r3, [r7, #4]
}
 800c354:	bf00      	nop
 800c356:	e7fe      	b.n	800c356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c358:	4b0a      	ldr	r3, [pc, #40]	; (800c384 <vPortExitCritical+0x50>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	3b01      	subs	r3, #1
 800c35e:	4a09      	ldr	r2, [pc, #36]	; (800c384 <vPortExitCritical+0x50>)
 800c360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c362:	4b08      	ldr	r3, [pc, #32]	; (800c384 <vPortExitCritical+0x50>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d105      	bne.n	800c376 <vPortExitCritical+0x42>
 800c36a:	2300      	movs	r3, #0
 800c36c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	f383 8811 	msr	BASEPRI, r3
}
 800c374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c376:	bf00      	nop
 800c378:	370c      	adds	r7, #12
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	200000c0 	.word	0x200000c0
	...

0800c390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c390:	f3ef 8009 	mrs	r0, PSP
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	4b15      	ldr	r3, [pc, #84]	; (800c3f0 <pxCurrentTCBConst>)
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	f01e 0f10 	tst.w	lr, #16
 800c3a0:	bf08      	it	eq
 800c3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3aa:	6010      	str	r0, [r2, #0]
 800c3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c3b4:	f380 8811 	msr	BASEPRI, r0
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	f7fe ffb4 	bl	800b32c <vTaskSwitchContext>
 800c3c4:	f04f 0000 	mov.w	r0, #0
 800c3c8:	f380 8811 	msr	BASEPRI, r0
 800c3cc:	bc09      	pop	{r0, r3}
 800c3ce:	6819      	ldr	r1, [r3, #0]
 800c3d0:	6808      	ldr	r0, [r1, #0]
 800c3d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d6:	f01e 0f10 	tst.w	lr, #16
 800c3da:	bf08      	it	eq
 800c3dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3e0:	f380 8809 	msr	PSP, r0
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	f3af 8000 	nop.w

0800c3f0 <pxCurrentTCBConst>:
 800c3f0:	200073c4 	.word	0x200073c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3f4:	bf00      	nop
 800c3f6:	bf00      	nop

0800c3f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	607b      	str	r3, [r7, #4]
}
 800c410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c412:	f7fe fed1 	bl	800b1b8 <xTaskIncrementTick>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d003      	beq.n	800c424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c41c:	4b06      	ldr	r3, [pc, #24]	; (800c438 <xPortSysTickHandler+0x40>)
 800c41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	2300      	movs	r3, #0
 800c426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	f383 8811 	msr	BASEPRI, r3
}
 800c42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c430:	bf00      	nop
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	e000ed04 	.word	0xe000ed04

0800c43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c43c:	b480      	push	{r7}
 800c43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c440:	4b0b      	ldr	r3, [pc, #44]	; (800c470 <vPortSetupTimerInterrupt+0x34>)
 800c442:	2200      	movs	r2, #0
 800c444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c446:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <vPortSetupTimerInterrupt+0x38>)
 800c448:	2200      	movs	r2, #0
 800c44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c44c:	4b0a      	ldr	r3, [pc, #40]	; (800c478 <vPortSetupTimerInterrupt+0x3c>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a0a      	ldr	r2, [pc, #40]	; (800c47c <vPortSetupTimerInterrupt+0x40>)
 800c452:	fba2 2303 	umull	r2, r3, r2, r3
 800c456:	099b      	lsrs	r3, r3, #6
 800c458:	4a09      	ldr	r2, [pc, #36]	; (800c480 <vPortSetupTimerInterrupt+0x44>)
 800c45a:	3b01      	subs	r3, #1
 800c45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c45e:	4b04      	ldr	r3, [pc, #16]	; (800c470 <vPortSetupTimerInterrupt+0x34>)
 800c460:	2207      	movs	r2, #7
 800c462:	601a      	str	r2, [r3, #0]
}
 800c464:	bf00      	nop
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	e000e010 	.word	0xe000e010
 800c474:	e000e018 	.word	0xe000e018
 800c478:	200000a4 	.word	0x200000a4
 800c47c:	10624dd3 	.word	0x10624dd3
 800c480:	e000e014 	.word	0xe000e014

0800c484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c494 <vPortEnableVFP+0x10>
 800c488:	6801      	ldr	r1, [r0, #0]
 800c48a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c48e:	6001      	str	r1, [r0, #0]
 800c490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c492:	bf00      	nop
 800c494:	e000ed88 	.word	0xe000ed88

0800c498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c49e:	f3ef 8305 	mrs	r3, IPSR
 800c4a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2b0f      	cmp	r3, #15
 800c4a8:	d914      	bls.n	800c4d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4aa:	4a17      	ldr	r2, [pc, #92]	; (800c508 <vPortValidateInterruptPriority+0x70>)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4b4:	4b15      	ldr	r3, [pc, #84]	; (800c50c <vPortValidateInterruptPriority+0x74>)
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	7afa      	ldrb	r2, [r7, #11]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d20a      	bcs.n	800c4d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	607b      	str	r3, [r7, #4]
}
 800c4d0:	bf00      	nop
 800c4d2:	e7fe      	b.n	800c4d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4d4:	4b0e      	ldr	r3, [pc, #56]	; (800c510 <vPortValidateInterruptPriority+0x78>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c4dc:	4b0d      	ldr	r3, [pc, #52]	; (800c514 <vPortValidateInterruptPriority+0x7c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d90a      	bls.n	800c4fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	603b      	str	r3, [r7, #0]
}
 800c4f6:	bf00      	nop
 800c4f8:	e7fe      	b.n	800c4f8 <vPortValidateInterruptPriority+0x60>
	}
 800c4fa:	bf00      	nop
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	e000e3f0 	.word	0xe000e3f0
 800c50c:	200079f0 	.word	0x200079f0
 800c510:	e000ed0c 	.word	0xe000ed0c
 800c514:	200079f4 	.word	0x200079f4

0800c518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b088      	sub	sp, #32
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c520:	2300      	movs	r3, #0
 800c522:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800c524:	4b48      	ldr	r3, [pc, #288]	; (800c648 <pvPortMalloc+0x130>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10a      	bne.n	800c542 <pvPortMalloc+0x2a>
	__asm volatile
 800c52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	60fb      	str	r3, [r7, #12]
}
 800c53e:	bf00      	nop
 800c540:	e7fe      	b.n	800c540 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800c542:	f7fe fd7d 	bl	800b040 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c546:	4b41      	ldr	r3, [pc, #260]	; (800c64c <pvPortMalloc+0x134>)
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4013      	ands	r3, r2
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d172      	bne.n	800c638 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00d      	beq.n	800c574 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800c558:	2208      	movs	r2, #8
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4413      	add	r3, r2
 800c55e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f003 0307 	and.w	r3, r3, #7
 800c566:	2b00      	cmp	r3, #0
 800c568:	d004      	beq.n	800c574 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f023 0307 	bic.w	r3, r3, #7
 800c570:	3308      	adds	r3, #8
 800c572:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d05e      	beq.n	800c638 <pvPortMalloc+0x120>
 800c57a:	4b35      	ldr	r3, [pc, #212]	; (800c650 <pvPortMalloc+0x138>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	429a      	cmp	r2, r3
 800c582:	d859      	bhi.n	800c638 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c584:	4b33      	ldr	r3, [pc, #204]	; (800c654 <pvPortMalloc+0x13c>)
 800c586:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800c588:	4b32      	ldr	r3, [pc, #200]	; (800c654 <pvPortMalloc+0x13c>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c58e:	e004      	b.n	800c59a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d903      	bls.n	800c5ac <pvPortMalloc+0x94>
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d1f1      	bne.n	800c590 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5ac:	4b26      	ldr	r3, [pc, #152]	; (800c648 <pvPortMalloc+0x130>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	69fa      	ldr	r2, [r7, #28]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d040      	beq.n	800c638 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2208      	movs	r2, #8
 800c5bc:	4413      	add	r3, r2
 800c5be:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	1ad2      	subs	r2, r2, r3
 800c5d0:	2308      	movs	r3, #8
 800c5d2:	005b      	lsls	r3, r3, #1
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d90f      	bls.n	800c5f8 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5d8:	69fa      	ldr	r2, [r7, #28]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4413      	add	r3, r2
 800c5de:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	685a      	ldr	r2, [r3, #4]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	1ad2      	subs	r2, r2, r3
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800c5f2:	6938      	ldr	r0, [r7, #16]
 800c5f4:	f000 f8a2 	bl	800c73c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5f8:	4b15      	ldr	r3, [pc, #84]	; (800c650 <pvPortMalloc+0x138>)
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	4a13      	ldr	r2, [pc, #76]	; (800c650 <pvPortMalloc+0x138>)
 800c604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c606:	4b12      	ldr	r3, [pc, #72]	; (800c650 <pvPortMalloc+0x138>)
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	4b13      	ldr	r3, [pc, #76]	; (800c658 <pvPortMalloc+0x140>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d203      	bcs.n	800c61a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c612:	4b0f      	ldr	r3, [pc, #60]	; (800c650 <pvPortMalloc+0x138>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4a10      	ldr	r2, [pc, #64]	; (800c658 <pvPortMalloc+0x140>)
 800c618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	685a      	ldr	r2, [r3, #4]
 800c61e:	4b0b      	ldr	r3, [pc, #44]	; (800c64c <pvPortMalloc+0x134>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	431a      	orrs	r2, r3
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c62e:	4b0b      	ldr	r3, [pc, #44]	; (800c65c <pvPortMalloc+0x144>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3301      	adds	r3, #1
 800c634:	4a09      	ldr	r2, [pc, #36]	; (800c65c <pvPortMalloc+0x144>)
 800c636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c638:	f7fe fd10 	bl	800b05c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800c63c:	697b      	ldr	r3, [r7, #20]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3720      	adds	r7, #32
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	20007a00 	.word	0x20007a00
 800c64c:	20007a14 	.word	0x20007a14
 800c650:	20007a04 	.word	0x20007a04
 800c654:	200079f8 	.word	0x200079f8
 800c658:	20007a08 	.word	0x20007a08
 800c65c:	20007a0c 	.word	0x20007a0c

0800c660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d04d      	beq.n	800c70e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c672:	2308      	movs	r3, #8
 800c674:	425b      	negs	r3, r3
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	4413      	add	r3, r2
 800c67a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	685a      	ldr	r2, [r3, #4]
 800c684:	4b24      	ldr	r3, [pc, #144]	; (800c718 <vPortFree+0xb8>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4013      	ands	r3, r2
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10a      	bne.n	800c6a4 <vPortFree+0x44>
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	60fb      	str	r3, [r7, #12]
}
 800c6a0:	bf00      	nop
 800c6a2:	e7fe      	b.n	800c6a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00a      	beq.n	800c6c2 <vPortFree+0x62>
	__asm volatile
 800c6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b0:	f383 8811 	msr	BASEPRI, r3
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	60bb      	str	r3, [r7, #8]
}
 800c6be:	bf00      	nop
 800c6c0:	e7fe      	b.n	800c6c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	685a      	ldr	r2, [r3, #4]
 800c6c6:	4b14      	ldr	r3, [pc, #80]	; (800c718 <vPortFree+0xb8>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d01e      	beq.n	800c70e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d11a      	bne.n	800c70e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	4b0e      	ldr	r3, [pc, #56]	; (800c718 <vPortFree+0xb8>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	43db      	mvns	r3, r3
 800c6e2:	401a      	ands	r2, r3
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6e8:	f7fe fcaa 	bl	800b040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	685a      	ldr	r2, [r3, #4]
 800c6f0:	4b0a      	ldr	r3, [pc, #40]	; (800c71c <vPortFree+0xbc>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	4a09      	ldr	r2, [pc, #36]	; (800c71c <vPortFree+0xbc>)
 800c6f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6fa:	6938      	ldr	r0, [r7, #16]
 800c6fc:	f000 f81e 	bl	800c73c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c700:	4b07      	ldr	r3, [pc, #28]	; (800c720 <vPortFree+0xc0>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	3301      	adds	r3, #1
 800c706:	4a06      	ldr	r2, [pc, #24]	; (800c720 <vPortFree+0xc0>)
 800c708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c70a:	f7fe fca7 	bl	800b05c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c70e:	bf00      	nop
 800c710:	3718      	adds	r7, #24
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	20007a14 	.word	0x20007a14
 800c71c:	20007a04 	.word	0x20007a04
 800c720:	20007a10 	.word	0x20007a10

0800c724 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800c724:	b480      	push	{r7}
 800c726:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800c728:	4b03      	ldr	r3, [pc, #12]	; (800c738 <xPortGetFreeHeapSize+0x14>)
 800c72a:	681b      	ldr	r3, [r3, #0]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	20007a04 	.word	0x20007a04

0800c73c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c744:	4b28      	ldr	r3, [pc, #160]	; (800c7e8 <prvInsertBlockIntoFreeList+0xac>)
 800c746:	60fb      	str	r3, [r7, #12]
 800c748:	e002      	b.n	800c750 <prvInsertBlockIntoFreeList+0x14>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	60fb      	str	r3, [r7, #12]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	429a      	cmp	r2, r3
 800c758:	d8f7      	bhi.n	800c74a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	4413      	add	r3, r2
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d108      	bne.n	800c77e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	685a      	ldr	r2, [r3, #4]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	441a      	add	r2, r3
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	441a      	add	r2, r3
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d118      	bne.n	800c7c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	4b15      	ldr	r3, [pc, #84]	; (800c7ec <prvInsertBlockIntoFreeList+0xb0>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d00d      	beq.n	800c7ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685a      	ldr	r2, [r3, #4]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	441a      	add	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	601a      	str	r2, [r3, #0]
 800c7b8:	e008      	b.n	800c7cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c7ba:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <prvInsertBlockIntoFreeList+0xb0>)
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	e003      	b.n	800c7cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d002      	beq.n	800c7da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7da:	bf00      	nop
 800c7dc:	3714      	adds	r7, #20
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	200079f8 	.word	0x200079f8
 800c7ec:	20007a00 	.word	0x20007a00

0800c7f0 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b08f      	sub	sp, #60	; 0x3c
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800c800:	2300      	movs	r3, #0
 800c802:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800c804:	4b5a      	ldr	r3, [pc, #360]	; (800c970 <vPortDefineHeapRegions+0x180>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00a      	beq.n	800c822 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800c80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c810:	f383 8811 	msr	BASEPRI, r3
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	617b      	str	r3, [r7, #20]
}
 800c81e:	bf00      	nop
 800c820:	e7fe      	b.n	800c820 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c824:	00db      	lsls	r3, r3, #3
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	4413      	add	r3, r2
 800c82a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800c82c:	e07d      	b.n	800c92a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800c82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800c834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	f003 0307 	and.w	r3, r3, #7
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00e      	beq.n	800c862 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c846:	3307      	adds	r3, #7
 800c848:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84c:	f023 0307 	bic.w	r3, r3, #7
 800c850:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800c852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85a:	1ad3      	subs	r3, r2, r3
 800c85c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c85e:	4413      	add	r3, r2
 800c860:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800c862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c864:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800c866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d106      	bne.n	800c87a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	4a41      	ldr	r2, [pc, #260]	; (800c974 <vPortDefineHeapRegions+0x184>)
 800c870:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800c872:	4b40      	ldr	r3, [pc, #256]	; (800c974 <vPortDefineHeapRegions+0x184>)
 800c874:	2200      	movs	r2, #0
 800c876:	605a      	str	r2, [r3, #4]
 800c878:	e01f      	b.n	800c8ba <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800c87a:	4b3d      	ldr	r3, [pc, #244]	; (800c970 <vPortDefineHeapRegions+0x180>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10a      	bne.n	800c898 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800c882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c886:	f383 8811 	msr	BASEPRI, r3
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	613b      	str	r3, [r7, #16]
}
 800c894:	bf00      	nop
 800c896:	e7fe      	b.n	800c896 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800c898:	4b35      	ldr	r3, [pc, #212]	; (800c970 <vPortDefineHeapRegions+0x180>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	461a      	mov	r2, r3
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d80a      	bhi.n	800c8ba <vPortDefineHeapRegions+0xca>
	__asm volatile
 800c8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a8:	f383 8811 	msr	BASEPRI, r3
 800c8ac:	f3bf 8f6f 	isb	sy
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	60fb      	str	r3, [r7, #12]
}
 800c8b6:	bf00      	nop
 800c8b8:	e7fe      	b.n	800c8b8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800c8ba:	4b2d      	ldr	r3, [pc, #180]	; (800c970 <vPortDefineHeapRegions+0x180>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800c8c0:	69fa      	ldr	r2, [r7, #28]
 800c8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c4:	4413      	add	r3, r2
 800c8c6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800c8c8:	2208      	movs	r2, #8
 800c8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8cc:	1a9b      	subs	r3, r3, r2
 800c8ce:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d2:	f023 0307 	bic.w	r3, r3, #7
 800c8d6:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800c8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8da:	4a25      	ldr	r2, [pc, #148]	; (800c970 <vPortDefineHeapRegions+0x180>)
 800c8dc:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800c8de:	4b24      	ldr	r3, [pc, #144]	; (800c970 <vPortDefineHeapRegions+0x180>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800c8e6:	4b22      	ldr	r3, [pc, #136]	; (800c970 <vPortDefineHeapRegions+0x180>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800c8ee:	69fb      	ldr	r3, [r7, #28]
 800c8f0:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800c8f2:	6a3b      	ldr	r3, [r7, #32]
 800c8f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8f6:	1ad2      	subs	r2, r2, r3
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800c8fc:	4b1c      	ldr	r3, [pc, #112]	; (800c970 <vPortDefineHeapRegions+0x180>)
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	6a3b      	ldr	r3, [r7, #32]
 800c902:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d002      	beq.n	800c910 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	6a3a      	ldr	r2, [r7, #32]
 800c90e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c916:	4413      	add	r3, r2
 800c918:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800c91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91c:	3301      	adds	r3, #1
 800c91e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	00db      	lsls	r3, r3, #3
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	4413      	add	r3, r2
 800c928:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	f47f af7d 	bne.w	800c82e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800c934:	4a10      	ldr	r2, [pc, #64]	; (800c978 <vPortDefineHeapRegions+0x188>)
 800c936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c938:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800c93a:	4a10      	ldr	r2, [pc, #64]	; (800c97c <vPortDefineHeapRegions+0x18c>)
 800c93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800c940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10a      	bne.n	800c95c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	60bb      	str	r3, [r7, #8]
}
 800c958:	bf00      	nop
 800c95a:	e7fe      	b.n	800c95a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c95c:	4b08      	ldr	r3, [pc, #32]	; (800c980 <vPortDefineHeapRegions+0x190>)
 800c95e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c962:	601a      	str	r2, [r3, #0]
}
 800c964:	bf00      	nop
 800c966:	373c      	adds	r7, #60	; 0x3c
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	20007a00 	.word	0x20007a00
 800c974:	200079f8 	.word	0x200079f8
 800c978:	20007a08 	.word	0x20007a08
 800c97c:	20007a04 	.word	0x20007a04
 800c980:	20007a14 	.word	0x20007a14

0800c984 <atol>:
 800c984:	220a      	movs	r2, #10
 800c986:	2100      	movs	r1, #0
 800c988:	f000 baec 	b.w	800cf64 <strtol>

0800c98c <__errno>:
 800c98c:	4b01      	ldr	r3, [pc, #4]	; (800c994 <__errno+0x8>)
 800c98e:	6818      	ldr	r0, [r3, #0]
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	200000c4 	.word	0x200000c4

0800c998 <gmtime_r>:
 800c998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c99c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c9a0:	460c      	mov	r4, r1
 800c9a2:	4a4f      	ldr	r2, [pc, #316]	; (800cae0 <gmtime_r+0x148>)
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	4639      	mov	r1, r7
 800c9aa:	f7f3 ff6f 	bl	800088c <__aeabi_ldivmod>
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	4605      	mov	r5, r0
 800c9b2:	4a4b      	ldr	r2, [pc, #300]	; (800cae0 <gmtime_r+0x148>)
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	f7f3 ff68 	bl	800088c <__aeabi_ldivmod>
 800c9bc:	2a00      	cmp	r2, #0
 800c9be:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800c9c2:	bfb7      	itett	lt
 800c9c4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800c9c8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800c9cc:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800c9d0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800c9d4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800c9d8:	fbb2 f1f0 	udiv	r1, r2, r0
 800c9dc:	fb00 2211 	mls	r2, r0, r1, r2
 800c9e0:	203c      	movs	r0, #60	; 0x3c
 800c9e2:	60a1      	str	r1, [r4, #8]
 800c9e4:	fbb2 f1f0 	udiv	r1, r2, r0
 800c9e8:	fb00 2211 	mls	r2, r0, r1, r2
 800c9ec:	6061      	str	r1, [r4, #4]
 800c9ee:	6022      	str	r2, [r4, #0]
 800c9f0:	2107      	movs	r1, #7
 800c9f2:	1cda      	adds	r2, r3, #3
 800c9f4:	fb92 f1f1 	sdiv	r1, r2, r1
 800c9f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c9fc:	1a52      	subs	r2, r2, r1
 800c9fe:	bf48      	it	mi
 800ca00:	3207      	addmi	r2, #7
 800ca02:	4d38      	ldr	r5, [pc, #224]	; (800cae4 <gmtime_r+0x14c>)
 800ca04:	4838      	ldr	r0, [pc, #224]	; (800cae8 <gmtime_r+0x150>)
 800ca06:	61a2      	str	r2, [r4, #24]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	bfb7      	itett	lt
 800ca0c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800ca10:	fb93 f5f5 	sdivge	r5, r3, r5
 800ca14:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800ca18:	fb92 f5f5 	sdivlt	r5, r2, r5
 800ca1c:	fb00 3005 	mla	r0, r0, r5, r3
 800ca20:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800ca24:	fbb0 f2f2 	udiv	r2, r0, r2
 800ca28:	4402      	add	r2, r0
 800ca2a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800ca2e:	fbb0 f1f3 	udiv	r1, r0, r3
 800ca32:	1a52      	subs	r2, r2, r1
 800ca34:	f240 1c6d 	movw	ip, #365	; 0x16d
 800ca38:	492c      	ldr	r1, [pc, #176]	; (800caec <gmtime_r+0x154>)
 800ca3a:	fbb0 f1f1 	udiv	r1, r0, r1
 800ca3e:	2764      	movs	r7, #100	; 0x64
 800ca40:	1a52      	subs	r2, r2, r1
 800ca42:	fbb2 f1fc 	udiv	r1, r2, ip
 800ca46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca4a:	fbb1 f6f7 	udiv	r6, r1, r7
 800ca4e:	1af3      	subs	r3, r6, r3
 800ca50:	4403      	add	r3, r0
 800ca52:	fb0c 3311 	mls	r3, ip, r1, r3
 800ca56:	2299      	movs	r2, #153	; 0x99
 800ca58:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800ca5c:	f10e 0e02 	add.w	lr, lr, #2
 800ca60:	f103 0c01 	add.w	ip, r3, #1
 800ca64:	fbbe f0f2 	udiv	r0, lr, r2
 800ca68:	4342      	muls	r2, r0
 800ca6a:	3202      	adds	r2, #2
 800ca6c:	f04f 0805 	mov.w	r8, #5
 800ca70:	fbb2 f2f8 	udiv	r2, r2, r8
 800ca74:	ebac 0c02 	sub.w	ip, ip, r2
 800ca78:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800ca7c:	4596      	cmp	lr, r2
 800ca7e:	bf94      	ite	ls
 800ca80:	2202      	movls	r2, #2
 800ca82:	f06f 0209 	mvnhi.w	r2, #9
 800ca86:	4410      	add	r0, r2
 800ca88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ca8c:	fb02 1505 	mla	r5, r2, r5, r1
 800ca90:	2801      	cmp	r0, #1
 800ca92:	bf98      	it	ls
 800ca94:	3501      	addls	r5, #1
 800ca96:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800ca9a:	d30d      	bcc.n	800cab8 <gmtime_r+0x120>
 800ca9c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800caa0:	61e3      	str	r3, [r4, #28]
 800caa2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800caa6:	2300      	movs	r3, #0
 800caa8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800caac:	f8c4 c00c 	str.w	ip, [r4, #12]
 800cab0:	6223      	str	r3, [r4, #32]
 800cab2:	4620      	mov	r0, r4
 800cab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab8:	078a      	lsls	r2, r1, #30
 800caba:	d102      	bne.n	800cac2 <gmtime_r+0x12a>
 800cabc:	fb07 1616 	mls	r6, r7, r6, r1
 800cac0:	b95e      	cbnz	r6, 800cada <gmtime_r+0x142>
 800cac2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cac6:	fbb1 f6f2 	udiv	r6, r1, r2
 800caca:	fb02 1216 	mls	r2, r2, r6, r1
 800cace:	fab2 f282 	clz	r2, r2
 800cad2:	0952      	lsrs	r2, r2, #5
 800cad4:	333b      	adds	r3, #59	; 0x3b
 800cad6:	4413      	add	r3, r2
 800cad8:	e7e2      	b.n	800caa0 <gmtime_r+0x108>
 800cada:	2201      	movs	r2, #1
 800cadc:	e7fa      	b.n	800cad4 <gmtime_r+0x13c>
 800cade:	bf00      	nop
 800cae0:	00015180 	.word	0x00015180
 800cae4:	00023ab1 	.word	0x00023ab1
 800cae8:	fffdc54f 	.word	0xfffdc54f
 800caec:	00023ab0 	.word	0x00023ab0

0800caf0 <__libc_init_array>:
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	4d0d      	ldr	r5, [pc, #52]	; (800cb28 <__libc_init_array+0x38>)
 800caf4:	4c0d      	ldr	r4, [pc, #52]	; (800cb2c <__libc_init_array+0x3c>)
 800caf6:	1b64      	subs	r4, r4, r5
 800caf8:	10a4      	asrs	r4, r4, #2
 800cafa:	2600      	movs	r6, #0
 800cafc:	42a6      	cmp	r6, r4
 800cafe:	d109      	bne.n	800cb14 <__libc_init_array+0x24>
 800cb00:	4d0b      	ldr	r5, [pc, #44]	; (800cb30 <__libc_init_array+0x40>)
 800cb02:	4c0c      	ldr	r4, [pc, #48]	; (800cb34 <__libc_init_array+0x44>)
 800cb04:	f000 fe0c 	bl	800d720 <_init>
 800cb08:	1b64      	subs	r4, r4, r5
 800cb0a:	10a4      	asrs	r4, r4, #2
 800cb0c:	2600      	movs	r6, #0
 800cb0e:	42a6      	cmp	r6, r4
 800cb10:	d105      	bne.n	800cb1e <__libc_init_array+0x2e>
 800cb12:	bd70      	pop	{r4, r5, r6, pc}
 800cb14:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb18:	4798      	blx	r3
 800cb1a:	3601      	adds	r6, #1
 800cb1c:	e7ee      	b.n	800cafc <__libc_init_array+0xc>
 800cb1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb22:	4798      	blx	r3
 800cb24:	3601      	adds	r6, #1
 800cb26:	e7f2      	b.n	800cb0e <__libc_init_array+0x1e>
 800cb28:	0801029c 	.word	0x0801029c
 800cb2c:	0801029c 	.word	0x0801029c
 800cb30:	0801029c 	.word	0x0801029c
 800cb34:	080102a0 	.word	0x080102a0

0800cb38 <__retarget_lock_acquire_recursive>:
 800cb38:	4770      	bx	lr

0800cb3a <__retarget_lock_release_recursive>:
 800cb3a:	4770      	bx	lr

0800cb3c <memcpy>:
 800cb3c:	440a      	add	r2, r1
 800cb3e:	4291      	cmp	r1, r2
 800cb40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cb44:	d100      	bne.n	800cb48 <memcpy+0xc>
 800cb46:	4770      	bx	lr
 800cb48:	b510      	push	{r4, lr}
 800cb4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb52:	4291      	cmp	r1, r2
 800cb54:	d1f9      	bne.n	800cb4a <memcpy+0xe>
 800cb56:	bd10      	pop	{r4, pc}

0800cb58 <memset>:
 800cb58:	4402      	add	r2, r0
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d100      	bne.n	800cb62 <memset+0xa>
 800cb60:	4770      	bx	lr
 800cb62:	f803 1b01 	strb.w	r1, [r3], #1
 800cb66:	e7f9      	b.n	800cb5c <memset+0x4>

0800cb68 <sbrk_aligned>:
 800cb68:	b570      	push	{r4, r5, r6, lr}
 800cb6a:	4e0e      	ldr	r6, [pc, #56]	; (800cba4 <sbrk_aligned+0x3c>)
 800cb6c:	460c      	mov	r4, r1
 800cb6e:	6831      	ldr	r1, [r6, #0]
 800cb70:	4605      	mov	r5, r0
 800cb72:	b911      	cbnz	r1, 800cb7a <sbrk_aligned+0x12>
 800cb74:	f000 f8f6 	bl	800cd64 <_sbrk_r>
 800cb78:	6030      	str	r0, [r6, #0]
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	f000 f8f1 	bl	800cd64 <_sbrk_r>
 800cb82:	1c43      	adds	r3, r0, #1
 800cb84:	d00a      	beq.n	800cb9c <sbrk_aligned+0x34>
 800cb86:	1cc4      	adds	r4, r0, #3
 800cb88:	f024 0403 	bic.w	r4, r4, #3
 800cb8c:	42a0      	cmp	r0, r4
 800cb8e:	d007      	beq.n	800cba0 <sbrk_aligned+0x38>
 800cb90:	1a21      	subs	r1, r4, r0
 800cb92:	4628      	mov	r0, r5
 800cb94:	f000 f8e6 	bl	800cd64 <_sbrk_r>
 800cb98:	3001      	adds	r0, #1
 800cb9a:	d101      	bne.n	800cba0 <sbrk_aligned+0x38>
 800cb9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cba0:	4620      	mov	r0, r4
 800cba2:	bd70      	pop	{r4, r5, r6, pc}
 800cba4:	20007a20 	.word	0x20007a20

0800cba8 <_malloc_r>:
 800cba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbac:	1ccd      	adds	r5, r1, #3
 800cbae:	f025 0503 	bic.w	r5, r5, #3
 800cbb2:	3508      	adds	r5, #8
 800cbb4:	2d0c      	cmp	r5, #12
 800cbb6:	bf38      	it	cc
 800cbb8:	250c      	movcc	r5, #12
 800cbba:	2d00      	cmp	r5, #0
 800cbbc:	4607      	mov	r7, r0
 800cbbe:	db01      	blt.n	800cbc4 <_malloc_r+0x1c>
 800cbc0:	42a9      	cmp	r1, r5
 800cbc2:	d905      	bls.n	800cbd0 <_malloc_r+0x28>
 800cbc4:	230c      	movs	r3, #12
 800cbc6:	603b      	str	r3, [r7, #0]
 800cbc8:	2600      	movs	r6, #0
 800cbca:	4630      	mov	r0, r6
 800cbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbd0:	4e2e      	ldr	r6, [pc, #184]	; (800cc8c <_malloc_r+0xe4>)
 800cbd2:	f000 fa0b 	bl	800cfec <__malloc_lock>
 800cbd6:	6833      	ldr	r3, [r6, #0]
 800cbd8:	461c      	mov	r4, r3
 800cbda:	bb34      	cbnz	r4, 800cc2a <_malloc_r+0x82>
 800cbdc:	4629      	mov	r1, r5
 800cbde:	4638      	mov	r0, r7
 800cbe0:	f7ff ffc2 	bl	800cb68 <sbrk_aligned>
 800cbe4:	1c43      	adds	r3, r0, #1
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	d14d      	bne.n	800cc86 <_malloc_r+0xde>
 800cbea:	6834      	ldr	r4, [r6, #0]
 800cbec:	4626      	mov	r6, r4
 800cbee:	2e00      	cmp	r6, #0
 800cbf0:	d140      	bne.n	800cc74 <_malloc_r+0xcc>
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	4631      	mov	r1, r6
 800cbf6:	4638      	mov	r0, r7
 800cbf8:	eb04 0803 	add.w	r8, r4, r3
 800cbfc:	f000 f8b2 	bl	800cd64 <_sbrk_r>
 800cc00:	4580      	cmp	r8, r0
 800cc02:	d13a      	bne.n	800cc7a <_malloc_r+0xd2>
 800cc04:	6821      	ldr	r1, [r4, #0]
 800cc06:	3503      	adds	r5, #3
 800cc08:	1a6d      	subs	r5, r5, r1
 800cc0a:	f025 0503 	bic.w	r5, r5, #3
 800cc0e:	3508      	adds	r5, #8
 800cc10:	2d0c      	cmp	r5, #12
 800cc12:	bf38      	it	cc
 800cc14:	250c      	movcc	r5, #12
 800cc16:	4629      	mov	r1, r5
 800cc18:	4638      	mov	r0, r7
 800cc1a:	f7ff ffa5 	bl	800cb68 <sbrk_aligned>
 800cc1e:	3001      	adds	r0, #1
 800cc20:	d02b      	beq.n	800cc7a <_malloc_r+0xd2>
 800cc22:	6823      	ldr	r3, [r4, #0]
 800cc24:	442b      	add	r3, r5
 800cc26:	6023      	str	r3, [r4, #0]
 800cc28:	e00e      	b.n	800cc48 <_malloc_r+0xa0>
 800cc2a:	6822      	ldr	r2, [r4, #0]
 800cc2c:	1b52      	subs	r2, r2, r5
 800cc2e:	d41e      	bmi.n	800cc6e <_malloc_r+0xc6>
 800cc30:	2a0b      	cmp	r2, #11
 800cc32:	d916      	bls.n	800cc62 <_malloc_r+0xba>
 800cc34:	1961      	adds	r1, r4, r5
 800cc36:	42a3      	cmp	r3, r4
 800cc38:	6025      	str	r5, [r4, #0]
 800cc3a:	bf18      	it	ne
 800cc3c:	6059      	strne	r1, [r3, #4]
 800cc3e:	6863      	ldr	r3, [r4, #4]
 800cc40:	bf08      	it	eq
 800cc42:	6031      	streq	r1, [r6, #0]
 800cc44:	5162      	str	r2, [r4, r5]
 800cc46:	604b      	str	r3, [r1, #4]
 800cc48:	4638      	mov	r0, r7
 800cc4a:	f104 060b 	add.w	r6, r4, #11
 800cc4e:	f000 f9d3 	bl	800cff8 <__malloc_unlock>
 800cc52:	f026 0607 	bic.w	r6, r6, #7
 800cc56:	1d23      	adds	r3, r4, #4
 800cc58:	1af2      	subs	r2, r6, r3
 800cc5a:	d0b6      	beq.n	800cbca <_malloc_r+0x22>
 800cc5c:	1b9b      	subs	r3, r3, r6
 800cc5e:	50a3      	str	r3, [r4, r2]
 800cc60:	e7b3      	b.n	800cbca <_malloc_r+0x22>
 800cc62:	6862      	ldr	r2, [r4, #4]
 800cc64:	42a3      	cmp	r3, r4
 800cc66:	bf0c      	ite	eq
 800cc68:	6032      	streq	r2, [r6, #0]
 800cc6a:	605a      	strne	r2, [r3, #4]
 800cc6c:	e7ec      	b.n	800cc48 <_malloc_r+0xa0>
 800cc6e:	4623      	mov	r3, r4
 800cc70:	6864      	ldr	r4, [r4, #4]
 800cc72:	e7b2      	b.n	800cbda <_malloc_r+0x32>
 800cc74:	4634      	mov	r4, r6
 800cc76:	6876      	ldr	r6, [r6, #4]
 800cc78:	e7b9      	b.n	800cbee <_malloc_r+0x46>
 800cc7a:	230c      	movs	r3, #12
 800cc7c:	603b      	str	r3, [r7, #0]
 800cc7e:	4638      	mov	r0, r7
 800cc80:	f000 f9ba 	bl	800cff8 <__malloc_unlock>
 800cc84:	e7a1      	b.n	800cbca <_malloc_r+0x22>
 800cc86:	6025      	str	r5, [r4, #0]
 800cc88:	e7de      	b.n	800cc48 <_malloc_r+0xa0>
 800cc8a:	bf00      	nop
 800cc8c:	20007a1c 	.word	0x20007a1c

0800cc90 <cleanup_glue>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	460c      	mov	r4, r1
 800cc94:	6809      	ldr	r1, [r1, #0]
 800cc96:	4605      	mov	r5, r0
 800cc98:	b109      	cbz	r1, 800cc9e <cleanup_glue+0xe>
 800cc9a:	f7ff fff9 	bl	800cc90 <cleanup_glue>
 800cc9e:	4621      	mov	r1, r4
 800cca0:	4628      	mov	r0, r5
 800cca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cca6:	f000 b9ad 	b.w	800d004 <_free_r>
	...

0800ccac <_reclaim_reent>:
 800ccac:	4b2c      	ldr	r3, [pc, #176]	; (800cd60 <_reclaim_reent+0xb4>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4283      	cmp	r3, r0
 800ccb2:	b570      	push	{r4, r5, r6, lr}
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	d051      	beq.n	800cd5c <_reclaim_reent+0xb0>
 800ccb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ccba:	b143      	cbz	r3, 800ccce <_reclaim_reent+0x22>
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d14a      	bne.n	800cd58 <_reclaim_reent+0xac>
 800ccc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccc4:	6819      	ldr	r1, [r3, #0]
 800ccc6:	b111      	cbz	r1, 800ccce <_reclaim_reent+0x22>
 800ccc8:	4620      	mov	r0, r4
 800ccca:	f000 f99b 	bl	800d004 <_free_r>
 800ccce:	6961      	ldr	r1, [r4, #20]
 800ccd0:	b111      	cbz	r1, 800ccd8 <_reclaim_reent+0x2c>
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f000 f996 	bl	800d004 <_free_r>
 800ccd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ccda:	b111      	cbz	r1, 800cce2 <_reclaim_reent+0x36>
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f000 f991 	bl	800d004 <_free_r>
 800cce2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cce4:	b111      	cbz	r1, 800ccec <_reclaim_reent+0x40>
 800cce6:	4620      	mov	r0, r4
 800cce8:	f000 f98c 	bl	800d004 <_free_r>
 800ccec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ccee:	b111      	cbz	r1, 800ccf6 <_reclaim_reent+0x4a>
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 f987 	bl	800d004 <_free_r>
 800ccf6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ccf8:	b111      	cbz	r1, 800cd00 <_reclaim_reent+0x54>
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 f982 	bl	800d004 <_free_r>
 800cd00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cd02:	b111      	cbz	r1, 800cd0a <_reclaim_reent+0x5e>
 800cd04:	4620      	mov	r0, r4
 800cd06:	f000 f97d 	bl	800d004 <_free_r>
 800cd0a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cd0c:	b111      	cbz	r1, 800cd14 <_reclaim_reent+0x68>
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f000 f978 	bl	800d004 <_free_r>
 800cd14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd16:	b111      	cbz	r1, 800cd1e <_reclaim_reent+0x72>
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f000 f973 	bl	800d004 <_free_r>
 800cd1e:	69a3      	ldr	r3, [r4, #24]
 800cd20:	b1e3      	cbz	r3, 800cd5c <_reclaim_reent+0xb0>
 800cd22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd24:	4620      	mov	r0, r4
 800cd26:	4798      	blx	r3
 800cd28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cd2a:	b1b9      	cbz	r1, 800cd5c <_reclaim_reent+0xb0>
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd32:	f7ff bfad 	b.w	800cc90 <cleanup_glue>
 800cd36:	5949      	ldr	r1, [r1, r5]
 800cd38:	b941      	cbnz	r1, 800cd4c <_reclaim_reent+0xa0>
 800cd3a:	3504      	adds	r5, #4
 800cd3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd3e:	2d80      	cmp	r5, #128	; 0x80
 800cd40:	68d9      	ldr	r1, [r3, #12]
 800cd42:	d1f8      	bne.n	800cd36 <_reclaim_reent+0x8a>
 800cd44:	4620      	mov	r0, r4
 800cd46:	f000 f95d 	bl	800d004 <_free_r>
 800cd4a:	e7ba      	b.n	800ccc2 <_reclaim_reent+0x16>
 800cd4c:	680e      	ldr	r6, [r1, #0]
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f000 f958 	bl	800d004 <_free_r>
 800cd54:	4631      	mov	r1, r6
 800cd56:	e7ef      	b.n	800cd38 <_reclaim_reent+0x8c>
 800cd58:	2500      	movs	r5, #0
 800cd5a:	e7ef      	b.n	800cd3c <_reclaim_reent+0x90>
 800cd5c:	bd70      	pop	{r4, r5, r6, pc}
 800cd5e:	bf00      	nop
 800cd60:	200000c4 	.word	0x200000c4

0800cd64 <_sbrk_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	4d06      	ldr	r5, [pc, #24]	; (800cd80 <_sbrk_r+0x1c>)
 800cd68:	2300      	movs	r3, #0
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	4608      	mov	r0, r1
 800cd6e:	602b      	str	r3, [r5, #0]
 800cd70:	f7f7 feaa 	bl	8004ac8 <_sbrk>
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	d102      	bne.n	800cd7e <_sbrk_r+0x1a>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	b103      	cbz	r3, 800cd7e <_sbrk_r+0x1a>
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	bd38      	pop	{r3, r4, r5, pc}
 800cd80:	20007a24 	.word	0x20007a24

0800cd84 <siprintf>:
 800cd84:	b40e      	push	{r1, r2, r3}
 800cd86:	b500      	push	{lr}
 800cd88:	b09c      	sub	sp, #112	; 0x70
 800cd8a:	ab1d      	add	r3, sp, #116	; 0x74
 800cd8c:	9002      	str	r0, [sp, #8]
 800cd8e:	9006      	str	r0, [sp, #24]
 800cd90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd94:	4809      	ldr	r0, [pc, #36]	; (800cdbc <siprintf+0x38>)
 800cd96:	9107      	str	r1, [sp, #28]
 800cd98:	9104      	str	r1, [sp, #16]
 800cd9a:	4909      	ldr	r1, [pc, #36]	; (800cdc0 <siprintf+0x3c>)
 800cd9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cda0:	9105      	str	r1, [sp, #20]
 800cda2:	6800      	ldr	r0, [r0, #0]
 800cda4:	9301      	str	r3, [sp, #4]
 800cda6:	a902      	add	r1, sp, #8
 800cda8:	f000 f9d4 	bl	800d154 <_svfiprintf_r>
 800cdac:	9b02      	ldr	r3, [sp, #8]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	701a      	strb	r2, [r3, #0]
 800cdb2:	b01c      	add	sp, #112	; 0x70
 800cdb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdb8:	b003      	add	sp, #12
 800cdba:	4770      	bx	lr
 800cdbc:	200000c4 	.word	0x200000c4
 800cdc0:	ffff0208 	.word	0xffff0208

0800cdc4 <strcat>:
 800cdc4:	b510      	push	{r4, lr}
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	7814      	ldrb	r4, [r2, #0]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	3201      	adds	r2, #1
 800cdce:	2c00      	cmp	r4, #0
 800cdd0:	d1fa      	bne.n	800cdc8 <strcat+0x4>
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdd8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cddc:	2a00      	cmp	r2, #0
 800cdde:	d1f9      	bne.n	800cdd4 <strcat+0x10>
 800cde0:	bd10      	pop	{r4, pc}

0800cde2 <strchr>:
 800cde2:	b2c9      	uxtb	r1, r1
 800cde4:	4603      	mov	r3, r0
 800cde6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdea:	b11a      	cbz	r2, 800cdf4 <strchr+0x12>
 800cdec:	428a      	cmp	r2, r1
 800cdee:	d1f9      	bne.n	800cde4 <strchr+0x2>
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	4770      	bx	lr
 800cdf4:	2900      	cmp	r1, #0
 800cdf6:	bf18      	it	ne
 800cdf8:	2300      	movne	r3, #0
 800cdfa:	e7f9      	b.n	800cdf0 <strchr+0xe>

0800cdfc <strcpy>:
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce02:	f803 2b01 	strb.w	r2, [r3], #1
 800ce06:	2a00      	cmp	r2, #0
 800ce08:	d1f9      	bne.n	800cdfe <strcpy+0x2>
 800ce0a:	4770      	bx	lr

0800ce0c <strncpy>:
 800ce0c:	b510      	push	{r4, lr}
 800ce0e:	3901      	subs	r1, #1
 800ce10:	4603      	mov	r3, r0
 800ce12:	b132      	cbz	r2, 800ce22 <strncpy+0x16>
 800ce14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ce18:	f803 4b01 	strb.w	r4, [r3], #1
 800ce1c:	3a01      	subs	r2, #1
 800ce1e:	2c00      	cmp	r4, #0
 800ce20:	d1f7      	bne.n	800ce12 <strncpy+0x6>
 800ce22:	441a      	add	r2, r3
 800ce24:	2100      	movs	r1, #0
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d100      	bne.n	800ce2c <strncpy+0x20>
 800ce2a:	bd10      	pop	{r4, pc}
 800ce2c:	f803 1b01 	strb.w	r1, [r3], #1
 800ce30:	e7f9      	b.n	800ce26 <strncpy+0x1a>

0800ce32 <strstr>:
 800ce32:	780a      	ldrb	r2, [r1, #0]
 800ce34:	b570      	push	{r4, r5, r6, lr}
 800ce36:	b96a      	cbnz	r2, 800ce54 <strstr+0x22>
 800ce38:	bd70      	pop	{r4, r5, r6, pc}
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d109      	bne.n	800ce52 <strstr+0x20>
 800ce3e:	460c      	mov	r4, r1
 800ce40:	4605      	mov	r5, r0
 800ce42:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d0f6      	beq.n	800ce38 <strstr+0x6>
 800ce4a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ce4e:	429e      	cmp	r6, r3
 800ce50:	d0f7      	beq.n	800ce42 <strstr+0x10>
 800ce52:	3001      	adds	r0, #1
 800ce54:	7803      	ldrb	r3, [r0, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1ef      	bne.n	800ce3a <strstr+0x8>
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	e7ec      	b.n	800ce38 <strstr+0x6>
	...

0800ce60 <_strtol_l.constprop.0>:
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce66:	d001      	beq.n	800ce6c <_strtol_l.constprop.0+0xc>
 800ce68:	2b24      	cmp	r3, #36	; 0x24
 800ce6a:	d906      	bls.n	800ce7a <_strtol_l.constprop.0+0x1a>
 800ce6c:	f7ff fd8e 	bl	800c98c <__errno>
 800ce70:	2316      	movs	r3, #22
 800ce72:	6003      	str	r3, [r0, #0]
 800ce74:	2000      	movs	r0, #0
 800ce76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cf60 <_strtol_l.constprop.0+0x100>
 800ce7e:	460d      	mov	r5, r1
 800ce80:	462e      	mov	r6, r5
 800ce82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce86:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ce8a:	f017 0708 	ands.w	r7, r7, #8
 800ce8e:	d1f7      	bne.n	800ce80 <_strtol_l.constprop.0+0x20>
 800ce90:	2c2d      	cmp	r4, #45	; 0x2d
 800ce92:	d132      	bne.n	800cefa <_strtol_l.constprop.0+0x9a>
 800ce94:	782c      	ldrb	r4, [r5, #0]
 800ce96:	2701      	movs	r7, #1
 800ce98:	1cb5      	adds	r5, r6, #2
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d05b      	beq.n	800cf56 <_strtol_l.constprop.0+0xf6>
 800ce9e:	2b10      	cmp	r3, #16
 800cea0:	d109      	bne.n	800ceb6 <_strtol_l.constprop.0+0x56>
 800cea2:	2c30      	cmp	r4, #48	; 0x30
 800cea4:	d107      	bne.n	800ceb6 <_strtol_l.constprop.0+0x56>
 800cea6:	782c      	ldrb	r4, [r5, #0]
 800cea8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ceac:	2c58      	cmp	r4, #88	; 0x58
 800ceae:	d14d      	bne.n	800cf4c <_strtol_l.constprop.0+0xec>
 800ceb0:	786c      	ldrb	r4, [r5, #1]
 800ceb2:	2310      	movs	r3, #16
 800ceb4:	3502      	adds	r5, #2
 800ceb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ceba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cebe:	f04f 0c00 	mov.w	ip, #0
 800cec2:	fbb8 f9f3 	udiv	r9, r8, r3
 800cec6:	4666      	mov	r6, ip
 800cec8:	fb03 8a19 	mls	sl, r3, r9, r8
 800cecc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ced0:	f1be 0f09 	cmp.w	lr, #9
 800ced4:	d816      	bhi.n	800cf04 <_strtol_l.constprop.0+0xa4>
 800ced6:	4674      	mov	r4, lr
 800ced8:	42a3      	cmp	r3, r4
 800ceda:	dd24      	ble.n	800cf26 <_strtol_l.constprop.0+0xc6>
 800cedc:	f1bc 0f00 	cmp.w	ip, #0
 800cee0:	db1e      	blt.n	800cf20 <_strtol_l.constprop.0+0xc0>
 800cee2:	45b1      	cmp	r9, r6
 800cee4:	d31c      	bcc.n	800cf20 <_strtol_l.constprop.0+0xc0>
 800cee6:	d101      	bne.n	800ceec <_strtol_l.constprop.0+0x8c>
 800cee8:	45a2      	cmp	sl, r4
 800ceea:	db19      	blt.n	800cf20 <_strtol_l.constprop.0+0xc0>
 800ceec:	fb06 4603 	mla	r6, r6, r3, r4
 800cef0:	f04f 0c01 	mov.w	ip, #1
 800cef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cef8:	e7e8      	b.n	800cecc <_strtol_l.constprop.0+0x6c>
 800cefa:	2c2b      	cmp	r4, #43	; 0x2b
 800cefc:	bf04      	itt	eq
 800cefe:	782c      	ldrbeq	r4, [r5, #0]
 800cf00:	1cb5      	addeq	r5, r6, #2
 800cf02:	e7ca      	b.n	800ce9a <_strtol_l.constprop.0+0x3a>
 800cf04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cf08:	f1be 0f19 	cmp.w	lr, #25
 800cf0c:	d801      	bhi.n	800cf12 <_strtol_l.constprop.0+0xb2>
 800cf0e:	3c37      	subs	r4, #55	; 0x37
 800cf10:	e7e2      	b.n	800ced8 <_strtol_l.constprop.0+0x78>
 800cf12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cf16:	f1be 0f19 	cmp.w	lr, #25
 800cf1a:	d804      	bhi.n	800cf26 <_strtol_l.constprop.0+0xc6>
 800cf1c:	3c57      	subs	r4, #87	; 0x57
 800cf1e:	e7db      	b.n	800ced8 <_strtol_l.constprop.0+0x78>
 800cf20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800cf24:	e7e6      	b.n	800cef4 <_strtol_l.constprop.0+0x94>
 800cf26:	f1bc 0f00 	cmp.w	ip, #0
 800cf2a:	da05      	bge.n	800cf38 <_strtol_l.constprop.0+0xd8>
 800cf2c:	2322      	movs	r3, #34	; 0x22
 800cf2e:	6003      	str	r3, [r0, #0]
 800cf30:	4646      	mov	r6, r8
 800cf32:	b942      	cbnz	r2, 800cf46 <_strtol_l.constprop.0+0xe6>
 800cf34:	4630      	mov	r0, r6
 800cf36:	e79e      	b.n	800ce76 <_strtol_l.constprop.0+0x16>
 800cf38:	b107      	cbz	r7, 800cf3c <_strtol_l.constprop.0+0xdc>
 800cf3a:	4276      	negs	r6, r6
 800cf3c:	2a00      	cmp	r2, #0
 800cf3e:	d0f9      	beq.n	800cf34 <_strtol_l.constprop.0+0xd4>
 800cf40:	f1bc 0f00 	cmp.w	ip, #0
 800cf44:	d000      	beq.n	800cf48 <_strtol_l.constprop.0+0xe8>
 800cf46:	1e69      	subs	r1, r5, #1
 800cf48:	6011      	str	r1, [r2, #0]
 800cf4a:	e7f3      	b.n	800cf34 <_strtol_l.constprop.0+0xd4>
 800cf4c:	2430      	movs	r4, #48	; 0x30
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1b1      	bne.n	800ceb6 <_strtol_l.constprop.0+0x56>
 800cf52:	2308      	movs	r3, #8
 800cf54:	e7af      	b.n	800ceb6 <_strtol_l.constprop.0+0x56>
 800cf56:	2c30      	cmp	r4, #48	; 0x30
 800cf58:	d0a5      	beq.n	800cea6 <_strtol_l.constprop.0+0x46>
 800cf5a:	230a      	movs	r3, #10
 800cf5c:	e7ab      	b.n	800ceb6 <_strtol_l.constprop.0+0x56>
 800cf5e:	bf00      	nop
 800cf60:	08010161 	.word	0x08010161

0800cf64 <strtol>:
 800cf64:	4613      	mov	r3, r2
 800cf66:	460a      	mov	r2, r1
 800cf68:	4601      	mov	r1, r0
 800cf6a:	4802      	ldr	r0, [pc, #8]	; (800cf74 <strtol+0x10>)
 800cf6c:	6800      	ldr	r0, [r0, #0]
 800cf6e:	f7ff bf77 	b.w	800ce60 <_strtol_l.constprop.0>
 800cf72:	bf00      	nop
 800cf74:	200000c4 	.word	0x200000c4

0800cf78 <_vsniprintf_r>:
 800cf78:	b530      	push	{r4, r5, lr}
 800cf7a:	4614      	mov	r4, r2
 800cf7c:	2c00      	cmp	r4, #0
 800cf7e:	b09b      	sub	sp, #108	; 0x6c
 800cf80:	4605      	mov	r5, r0
 800cf82:	461a      	mov	r2, r3
 800cf84:	da05      	bge.n	800cf92 <_vsniprintf_r+0x1a>
 800cf86:	238b      	movs	r3, #139	; 0x8b
 800cf88:	6003      	str	r3, [r0, #0]
 800cf8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf8e:	b01b      	add	sp, #108	; 0x6c
 800cf90:	bd30      	pop	{r4, r5, pc}
 800cf92:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cf96:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cf9a:	bf14      	ite	ne
 800cf9c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cfa0:	4623      	moveq	r3, r4
 800cfa2:	9302      	str	r3, [sp, #8]
 800cfa4:	9305      	str	r3, [sp, #20]
 800cfa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfaa:	9100      	str	r1, [sp, #0]
 800cfac:	9104      	str	r1, [sp, #16]
 800cfae:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cfb2:	4669      	mov	r1, sp
 800cfb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cfb6:	f000 f8cd 	bl	800d154 <_svfiprintf_r>
 800cfba:	1c43      	adds	r3, r0, #1
 800cfbc:	bfbc      	itt	lt
 800cfbe:	238b      	movlt	r3, #139	; 0x8b
 800cfc0:	602b      	strlt	r3, [r5, #0]
 800cfc2:	2c00      	cmp	r4, #0
 800cfc4:	d0e3      	beq.n	800cf8e <_vsniprintf_r+0x16>
 800cfc6:	9b00      	ldr	r3, [sp, #0]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	701a      	strb	r2, [r3, #0]
 800cfcc:	e7df      	b.n	800cf8e <_vsniprintf_r+0x16>
	...

0800cfd0 <vsniprintf>:
 800cfd0:	b507      	push	{r0, r1, r2, lr}
 800cfd2:	9300      	str	r3, [sp, #0]
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	460a      	mov	r2, r1
 800cfd8:	4601      	mov	r1, r0
 800cfda:	4803      	ldr	r0, [pc, #12]	; (800cfe8 <vsniprintf+0x18>)
 800cfdc:	6800      	ldr	r0, [r0, #0]
 800cfde:	f7ff ffcb 	bl	800cf78 <_vsniprintf_r>
 800cfe2:	b003      	add	sp, #12
 800cfe4:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfe8:	200000c4 	.word	0x200000c4

0800cfec <__malloc_lock>:
 800cfec:	4801      	ldr	r0, [pc, #4]	; (800cff4 <__malloc_lock+0x8>)
 800cfee:	f7ff bda3 	b.w	800cb38 <__retarget_lock_acquire_recursive>
 800cff2:	bf00      	nop
 800cff4:	20007a18 	.word	0x20007a18

0800cff8 <__malloc_unlock>:
 800cff8:	4801      	ldr	r0, [pc, #4]	; (800d000 <__malloc_unlock+0x8>)
 800cffa:	f7ff bd9e 	b.w	800cb3a <__retarget_lock_release_recursive>
 800cffe:	bf00      	nop
 800d000:	20007a18 	.word	0x20007a18

0800d004 <_free_r>:
 800d004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d006:	2900      	cmp	r1, #0
 800d008:	d044      	beq.n	800d094 <_free_r+0x90>
 800d00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d00e:	9001      	str	r0, [sp, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	f1a1 0404 	sub.w	r4, r1, #4
 800d016:	bfb8      	it	lt
 800d018:	18e4      	addlt	r4, r4, r3
 800d01a:	f7ff ffe7 	bl	800cfec <__malloc_lock>
 800d01e:	4a1e      	ldr	r2, [pc, #120]	; (800d098 <_free_r+0x94>)
 800d020:	9801      	ldr	r0, [sp, #4]
 800d022:	6813      	ldr	r3, [r2, #0]
 800d024:	b933      	cbnz	r3, 800d034 <_free_r+0x30>
 800d026:	6063      	str	r3, [r4, #4]
 800d028:	6014      	str	r4, [r2, #0]
 800d02a:	b003      	add	sp, #12
 800d02c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d030:	f7ff bfe2 	b.w	800cff8 <__malloc_unlock>
 800d034:	42a3      	cmp	r3, r4
 800d036:	d908      	bls.n	800d04a <_free_r+0x46>
 800d038:	6825      	ldr	r5, [r4, #0]
 800d03a:	1961      	adds	r1, r4, r5
 800d03c:	428b      	cmp	r3, r1
 800d03e:	bf01      	itttt	eq
 800d040:	6819      	ldreq	r1, [r3, #0]
 800d042:	685b      	ldreq	r3, [r3, #4]
 800d044:	1949      	addeq	r1, r1, r5
 800d046:	6021      	streq	r1, [r4, #0]
 800d048:	e7ed      	b.n	800d026 <_free_r+0x22>
 800d04a:	461a      	mov	r2, r3
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	b10b      	cbz	r3, 800d054 <_free_r+0x50>
 800d050:	42a3      	cmp	r3, r4
 800d052:	d9fa      	bls.n	800d04a <_free_r+0x46>
 800d054:	6811      	ldr	r1, [r2, #0]
 800d056:	1855      	adds	r5, r2, r1
 800d058:	42a5      	cmp	r5, r4
 800d05a:	d10b      	bne.n	800d074 <_free_r+0x70>
 800d05c:	6824      	ldr	r4, [r4, #0]
 800d05e:	4421      	add	r1, r4
 800d060:	1854      	adds	r4, r2, r1
 800d062:	42a3      	cmp	r3, r4
 800d064:	6011      	str	r1, [r2, #0]
 800d066:	d1e0      	bne.n	800d02a <_free_r+0x26>
 800d068:	681c      	ldr	r4, [r3, #0]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	6053      	str	r3, [r2, #4]
 800d06e:	4421      	add	r1, r4
 800d070:	6011      	str	r1, [r2, #0]
 800d072:	e7da      	b.n	800d02a <_free_r+0x26>
 800d074:	d902      	bls.n	800d07c <_free_r+0x78>
 800d076:	230c      	movs	r3, #12
 800d078:	6003      	str	r3, [r0, #0]
 800d07a:	e7d6      	b.n	800d02a <_free_r+0x26>
 800d07c:	6825      	ldr	r5, [r4, #0]
 800d07e:	1961      	adds	r1, r4, r5
 800d080:	428b      	cmp	r3, r1
 800d082:	bf04      	itt	eq
 800d084:	6819      	ldreq	r1, [r3, #0]
 800d086:	685b      	ldreq	r3, [r3, #4]
 800d088:	6063      	str	r3, [r4, #4]
 800d08a:	bf04      	itt	eq
 800d08c:	1949      	addeq	r1, r1, r5
 800d08e:	6021      	streq	r1, [r4, #0]
 800d090:	6054      	str	r4, [r2, #4]
 800d092:	e7ca      	b.n	800d02a <_free_r+0x26>
 800d094:	b003      	add	sp, #12
 800d096:	bd30      	pop	{r4, r5, pc}
 800d098:	20007a1c 	.word	0x20007a1c

0800d09c <__ssputs_r>:
 800d09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a0:	688e      	ldr	r6, [r1, #8]
 800d0a2:	429e      	cmp	r6, r3
 800d0a4:	4682      	mov	sl, r0
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	4690      	mov	r8, r2
 800d0aa:	461f      	mov	r7, r3
 800d0ac:	d838      	bhi.n	800d120 <__ssputs_r+0x84>
 800d0ae:	898a      	ldrh	r2, [r1, #12]
 800d0b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0b4:	d032      	beq.n	800d11c <__ssputs_r+0x80>
 800d0b6:	6825      	ldr	r5, [r4, #0]
 800d0b8:	6909      	ldr	r1, [r1, #16]
 800d0ba:	eba5 0901 	sub.w	r9, r5, r1
 800d0be:	6965      	ldr	r5, [r4, #20]
 800d0c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	444b      	add	r3, r9
 800d0cc:	106d      	asrs	r5, r5, #1
 800d0ce:	429d      	cmp	r5, r3
 800d0d0:	bf38      	it	cc
 800d0d2:	461d      	movcc	r5, r3
 800d0d4:	0553      	lsls	r3, r2, #21
 800d0d6:	d531      	bpl.n	800d13c <__ssputs_r+0xa0>
 800d0d8:	4629      	mov	r1, r5
 800d0da:	f7ff fd65 	bl	800cba8 <_malloc_r>
 800d0de:	4606      	mov	r6, r0
 800d0e0:	b950      	cbnz	r0, 800d0f8 <__ssputs_r+0x5c>
 800d0e2:	230c      	movs	r3, #12
 800d0e4:	f8ca 3000 	str.w	r3, [sl]
 800d0e8:	89a3      	ldrh	r3, [r4, #12]
 800d0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ee:	81a3      	strh	r3, [r4, #12]
 800d0f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0f8:	6921      	ldr	r1, [r4, #16]
 800d0fa:	464a      	mov	r2, r9
 800d0fc:	f7ff fd1e 	bl	800cb3c <memcpy>
 800d100:	89a3      	ldrh	r3, [r4, #12]
 800d102:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d10a:	81a3      	strh	r3, [r4, #12]
 800d10c:	6126      	str	r6, [r4, #16]
 800d10e:	6165      	str	r5, [r4, #20]
 800d110:	444e      	add	r6, r9
 800d112:	eba5 0509 	sub.w	r5, r5, r9
 800d116:	6026      	str	r6, [r4, #0]
 800d118:	60a5      	str	r5, [r4, #8]
 800d11a:	463e      	mov	r6, r7
 800d11c:	42be      	cmp	r6, r7
 800d11e:	d900      	bls.n	800d122 <__ssputs_r+0x86>
 800d120:	463e      	mov	r6, r7
 800d122:	6820      	ldr	r0, [r4, #0]
 800d124:	4632      	mov	r2, r6
 800d126:	4641      	mov	r1, r8
 800d128:	f000 faa8 	bl	800d67c <memmove>
 800d12c:	68a3      	ldr	r3, [r4, #8]
 800d12e:	1b9b      	subs	r3, r3, r6
 800d130:	60a3      	str	r3, [r4, #8]
 800d132:	6823      	ldr	r3, [r4, #0]
 800d134:	4433      	add	r3, r6
 800d136:	6023      	str	r3, [r4, #0]
 800d138:	2000      	movs	r0, #0
 800d13a:	e7db      	b.n	800d0f4 <__ssputs_r+0x58>
 800d13c:	462a      	mov	r2, r5
 800d13e:	f000 fab7 	bl	800d6b0 <_realloc_r>
 800d142:	4606      	mov	r6, r0
 800d144:	2800      	cmp	r0, #0
 800d146:	d1e1      	bne.n	800d10c <__ssputs_r+0x70>
 800d148:	6921      	ldr	r1, [r4, #16]
 800d14a:	4650      	mov	r0, sl
 800d14c:	f7ff ff5a 	bl	800d004 <_free_r>
 800d150:	e7c7      	b.n	800d0e2 <__ssputs_r+0x46>
	...

0800d154 <_svfiprintf_r>:
 800d154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d158:	4698      	mov	r8, r3
 800d15a:	898b      	ldrh	r3, [r1, #12]
 800d15c:	061b      	lsls	r3, r3, #24
 800d15e:	b09d      	sub	sp, #116	; 0x74
 800d160:	4607      	mov	r7, r0
 800d162:	460d      	mov	r5, r1
 800d164:	4614      	mov	r4, r2
 800d166:	d50e      	bpl.n	800d186 <_svfiprintf_r+0x32>
 800d168:	690b      	ldr	r3, [r1, #16]
 800d16a:	b963      	cbnz	r3, 800d186 <_svfiprintf_r+0x32>
 800d16c:	2140      	movs	r1, #64	; 0x40
 800d16e:	f7ff fd1b 	bl	800cba8 <_malloc_r>
 800d172:	6028      	str	r0, [r5, #0]
 800d174:	6128      	str	r0, [r5, #16]
 800d176:	b920      	cbnz	r0, 800d182 <_svfiprintf_r+0x2e>
 800d178:	230c      	movs	r3, #12
 800d17a:	603b      	str	r3, [r7, #0]
 800d17c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d180:	e0d1      	b.n	800d326 <_svfiprintf_r+0x1d2>
 800d182:	2340      	movs	r3, #64	; 0x40
 800d184:	616b      	str	r3, [r5, #20]
 800d186:	2300      	movs	r3, #0
 800d188:	9309      	str	r3, [sp, #36]	; 0x24
 800d18a:	2320      	movs	r3, #32
 800d18c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d190:	f8cd 800c 	str.w	r8, [sp, #12]
 800d194:	2330      	movs	r3, #48	; 0x30
 800d196:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d340 <_svfiprintf_r+0x1ec>
 800d19a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d19e:	f04f 0901 	mov.w	r9, #1
 800d1a2:	4623      	mov	r3, r4
 800d1a4:	469a      	mov	sl, r3
 800d1a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1aa:	b10a      	cbz	r2, 800d1b0 <_svfiprintf_r+0x5c>
 800d1ac:	2a25      	cmp	r2, #37	; 0x25
 800d1ae:	d1f9      	bne.n	800d1a4 <_svfiprintf_r+0x50>
 800d1b0:	ebba 0b04 	subs.w	fp, sl, r4
 800d1b4:	d00b      	beq.n	800d1ce <_svfiprintf_r+0x7a>
 800d1b6:	465b      	mov	r3, fp
 800d1b8:	4622      	mov	r2, r4
 800d1ba:	4629      	mov	r1, r5
 800d1bc:	4638      	mov	r0, r7
 800d1be:	f7ff ff6d 	bl	800d09c <__ssputs_r>
 800d1c2:	3001      	adds	r0, #1
 800d1c4:	f000 80aa 	beq.w	800d31c <_svfiprintf_r+0x1c8>
 800d1c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1ca:	445a      	add	r2, fp
 800d1cc:	9209      	str	r2, [sp, #36]	; 0x24
 800d1ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f000 80a2 	beq.w	800d31c <_svfiprintf_r+0x1c8>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1e2:	f10a 0a01 	add.w	sl, sl, #1
 800d1e6:	9304      	str	r3, [sp, #16]
 800d1e8:	9307      	str	r3, [sp, #28]
 800d1ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1ee:	931a      	str	r3, [sp, #104]	; 0x68
 800d1f0:	4654      	mov	r4, sl
 800d1f2:	2205      	movs	r2, #5
 800d1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f8:	4851      	ldr	r0, [pc, #324]	; (800d340 <_svfiprintf_r+0x1ec>)
 800d1fa:	f7f2 fff1 	bl	80001e0 <memchr>
 800d1fe:	9a04      	ldr	r2, [sp, #16]
 800d200:	b9d8      	cbnz	r0, 800d23a <_svfiprintf_r+0xe6>
 800d202:	06d0      	lsls	r0, r2, #27
 800d204:	bf44      	itt	mi
 800d206:	2320      	movmi	r3, #32
 800d208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d20c:	0711      	lsls	r1, r2, #28
 800d20e:	bf44      	itt	mi
 800d210:	232b      	movmi	r3, #43	; 0x2b
 800d212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d216:	f89a 3000 	ldrb.w	r3, [sl]
 800d21a:	2b2a      	cmp	r3, #42	; 0x2a
 800d21c:	d015      	beq.n	800d24a <_svfiprintf_r+0xf6>
 800d21e:	9a07      	ldr	r2, [sp, #28]
 800d220:	4654      	mov	r4, sl
 800d222:	2000      	movs	r0, #0
 800d224:	f04f 0c0a 	mov.w	ip, #10
 800d228:	4621      	mov	r1, r4
 800d22a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d22e:	3b30      	subs	r3, #48	; 0x30
 800d230:	2b09      	cmp	r3, #9
 800d232:	d94e      	bls.n	800d2d2 <_svfiprintf_r+0x17e>
 800d234:	b1b0      	cbz	r0, 800d264 <_svfiprintf_r+0x110>
 800d236:	9207      	str	r2, [sp, #28]
 800d238:	e014      	b.n	800d264 <_svfiprintf_r+0x110>
 800d23a:	eba0 0308 	sub.w	r3, r0, r8
 800d23e:	fa09 f303 	lsl.w	r3, r9, r3
 800d242:	4313      	orrs	r3, r2
 800d244:	9304      	str	r3, [sp, #16]
 800d246:	46a2      	mov	sl, r4
 800d248:	e7d2      	b.n	800d1f0 <_svfiprintf_r+0x9c>
 800d24a:	9b03      	ldr	r3, [sp, #12]
 800d24c:	1d19      	adds	r1, r3, #4
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	9103      	str	r1, [sp, #12]
 800d252:	2b00      	cmp	r3, #0
 800d254:	bfbb      	ittet	lt
 800d256:	425b      	neglt	r3, r3
 800d258:	f042 0202 	orrlt.w	r2, r2, #2
 800d25c:	9307      	strge	r3, [sp, #28]
 800d25e:	9307      	strlt	r3, [sp, #28]
 800d260:	bfb8      	it	lt
 800d262:	9204      	strlt	r2, [sp, #16]
 800d264:	7823      	ldrb	r3, [r4, #0]
 800d266:	2b2e      	cmp	r3, #46	; 0x2e
 800d268:	d10c      	bne.n	800d284 <_svfiprintf_r+0x130>
 800d26a:	7863      	ldrb	r3, [r4, #1]
 800d26c:	2b2a      	cmp	r3, #42	; 0x2a
 800d26e:	d135      	bne.n	800d2dc <_svfiprintf_r+0x188>
 800d270:	9b03      	ldr	r3, [sp, #12]
 800d272:	1d1a      	adds	r2, r3, #4
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	9203      	str	r2, [sp, #12]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	bfb8      	it	lt
 800d27c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d280:	3402      	adds	r4, #2
 800d282:	9305      	str	r3, [sp, #20]
 800d284:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d350 <_svfiprintf_r+0x1fc>
 800d288:	7821      	ldrb	r1, [r4, #0]
 800d28a:	2203      	movs	r2, #3
 800d28c:	4650      	mov	r0, sl
 800d28e:	f7f2 ffa7 	bl	80001e0 <memchr>
 800d292:	b140      	cbz	r0, 800d2a6 <_svfiprintf_r+0x152>
 800d294:	2340      	movs	r3, #64	; 0x40
 800d296:	eba0 000a 	sub.w	r0, r0, sl
 800d29a:	fa03 f000 	lsl.w	r0, r3, r0
 800d29e:	9b04      	ldr	r3, [sp, #16]
 800d2a0:	4303      	orrs	r3, r0
 800d2a2:	3401      	adds	r4, #1
 800d2a4:	9304      	str	r3, [sp, #16]
 800d2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2aa:	4826      	ldr	r0, [pc, #152]	; (800d344 <_svfiprintf_r+0x1f0>)
 800d2ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2b0:	2206      	movs	r2, #6
 800d2b2:	f7f2 ff95 	bl	80001e0 <memchr>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d038      	beq.n	800d32c <_svfiprintf_r+0x1d8>
 800d2ba:	4b23      	ldr	r3, [pc, #140]	; (800d348 <_svfiprintf_r+0x1f4>)
 800d2bc:	bb1b      	cbnz	r3, 800d306 <_svfiprintf_r+0x1b2>
 800d2be:	9b03      	ldr	r3, [sp, #12]
 800d2c0:	3307      	adds	r3, #7
 800d2c2:	f023 0307 	bic.w	r3, r3, #7
 800d2c6:	3308      	adds	r3, #8
 800d2c8:	9303      	str	r3, [sp, #12]
 800d2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2cc:	4433      	add	r3, r6
 800d2ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d2d0:	e767      	b.n	800d1a2 <_svfiprintf_r+0x4e>
 800d2d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2d6:	460c      	mov	r4, r1
 800d2d8:	2001      	movs	r0, #1
 800d2da:	e7a5      	b.n	800d228 <_svfiprintf_r+0xd4>
 800d2dc:	2300      	movs	r3, #0
 800d2de:	3401      	adds	r4, #1
 800d2e0:	9305      	str	r3, [sp, #20]
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	f04f 0c0a 	mov.w	ip, #10
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2ee:	3a30      	subs	r2, #48	; 0x30
 800d2f0:	2a09      	cmp	r2, #9
 800d2f2:	d903      	bls.n	800d2fc <_svfiprintf_r+0x1a8>
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d0c5      	beq.n	800d284 <_svfiprintf_r+0x130>
 800d2f8:	9105      	str	r1, [sp, #20]
 800d2fa:	e7c3      	b.n	800d284 <_svfiprintf_r+0x130>
 800d2fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d300:	4604      	mov	r4, r0
 800d302:	2301      	movs	r3, #1
 800d304:	e7f0      	b.n	800d2e8 <_svfiprintf_r+0x194>
 800d306:	ab03      	add	r3, sp, #12
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	462a      	mov	r2, r5
 800d30c:	4b0f      	ldr	r3, [pc, #60]	; (800d34c <_svfiprintf_r+0x1f8>)
 800d30e:	a904      	add	r1, sp, #16
 800d310:	4638      	mov	r0, r7
 800d312:	f3af 8000 	nop.w
 800d316:	1c42      	adds	r2, r0, #1
 800d318:	4606      	mov	r6, r0
 800d31a:	d1d6      	bne.n	800d2ca <_svfiprintf_r+0x176>
 800d31c:	89ab      	ldrh	r3, [r5, #12]
 800d31e:	065b      	lsls	r3, r3, #25
 800d320:	f53f af2c 	bmi.w	800d17c <_svfiprintf_r+0x28>
 800d324:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d326:	b01d      	add	sp, #116	; 0x74
 800d328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32c:	ab03      	add	r3, sp, #12
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	462a      	mov	r2, r5
 800d332:	4b06      	ldr	r3, [pc, #24]	; (800d34c <_svfiprintf_r+0x1f8>)
 800d334:	a904      	add	r1, sp, #16
 800d336:	4638      	mov	r0, r7
 800d338:	f000 f87a 	bl	800d430 <_printf_i>
 800d33c:	e7eb      	b.n	800d316 <_svfiprintf_r+0x1c2>
 800d33e:	bf00      	nop
 800d340:	08010261 	.word	0x08010261
 800d344:	0801026b 	.word	0x0801026b
 800d348:	00000000 	.word	0x00000000
 800d34c:	0800d09d 	.word	0x0800d09d
 800d350:	08010267 	.word	0x08010267

0800d354 <_printf_common>:
 800d354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d358:	4616      	mov	r6, r2
 800d35a:	4699      	mov	r9, r3
 800d35c:	688a      	ldr	r2, [r1, #8]
 800d35e:	690b      	ldr	r3, [r1, #16]
 800d360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d364:	4293      	cmp	r3, r2
 800d366:	bfb8      	it	lt
 800d368:	4613      	movlt	r3, r2
 800d36a:	6033      	str	r3, [r6, #0]
 800d36c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d370:	4607      	mov	r7, r0
 800d372:	460c      	mov	r4, r1
 800d374:	b10a      	cbz	r2, 800d37a <_printf_common+0x26>
 800d376:	3301      	adds	r3, #1
 800d378:	6033      	str	r3, [r6, #0]
 800d37a:	6823      	ldr	r3, [r4, #0]
 800d37c:	0699      	lsls	r1, r3, #26
 800d37e:	bf42      	ittt	mi
 800d380:	6833      	ldrmi	r3, [r6, #0]
 800d382:	3302      	addmi	r3, #2
 800d384:	6033      	strmi	r3, [r6, #0]
 800d386:	6825      	ldr	r5, [r4, #0]
 800d388:	f015 0506 	ands.w	r5, r5, #6
 800d38c:	d106      	bne.n	800d39c <_printf_common+0x48>
 800d38e:	f104 0a19 	add.w	sl, r4, #25
 800d392:	68e3      	ldr	r3, [r4, #12]
 800d394:	6832      	ldr	r2, [r6, #0]
 800d396:	1a9b      	subs	r3, r3, r2
 800d398:	42ab      	cmp	r3, r5
 800d39a:	dc26      	bgt.n	800d3ea <_printf_common+0x96>
 800d39c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3a0:	1e13      	subs	r3, r2, #0
 800d3a2:	6822      	ldr	r2, [r4, #0]
 800d3a4:	bf18      	it	ne
 800d3a6:	2301      	movne	r3, #1
 800d3a8:	0692      	lsls	r2, r2, #26
 800d3aa:	d42b      	bmi.n	800d404 <_printf_common+0xb0>
 800d3ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3b0:	4649      	mov	r1, r9
 800d3b2:	4638      	mov	r0, r7
 800d3b4:	47c0      	blx	r8
 800d3b6:	3001      	adds	r0, #1
 800d3b8:	d01e      	beq.n	800d3f8 <_printf_common+0xa4>
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	68e5      	ldr	r5, [r4, #12]
 800d3be:	6832      	ldr	r2, [r6, #0]
 800d3c0:	f003 0306 	and.w	r3, r3, #6
 800d3c4:	2b04      	cmp	r3, #4
 800d3c6:	bf08      	it	eq
 800d3c8:	1aad      	subeq	r5, r5, r2
 800d3ca:	68a3      	ldr	r3, [r4, #8]
 800d3cc:	6922      	ldr	r2, [r4, #16]
 800d3ce:	bf0c      	ite	eq
 800d3d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3d4:	2500      	movne	r5, #0
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	bfc4      	itt	gt
 800d3da:	1a9b      	subgt	r3, r3, r2
 800d3dc:	18ed      	addgt	r5, r5, r3
 800d3de:	2600      	movs	r6, #0
 800d3e0:	341a      	adds	r4, #26
 800d3e2:	42b5      	cmp	r5, r6
 800d3e4:	d11a      	bne.n	800d41c <_printf_common+0xc8>
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	e008      	b.n	800d3fc <_printf_common+0xa8>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	4652      	mov	r2, sl
 800d3ee:	4649      	mov	r1, r9
 800d3f0:	4638      	mov	r0, r7
 800d3f2:	47c0      	blx	r8
 800d3f4:	3001      	adds	r0, #1
 800d3f6:	d103      	bne.n	800d400 <_printf_common+0xac>
 800d3f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d400:	3501      	adds	r5, #1
 800d402:	e7c6      	b.n	800d392 <_printf_common+0x3e>
 800d404:	18e1      	adds	r1, r4, r3
 800d406:	1c5a      	adds	r2, r3, #1
 800d408:	2030      	movs	r0, #48	; 0x30
 800d40a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d40e:	4422      	add	r2, r4
 800d410:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d414:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d418:	3302      	adds	r3, #2
 800d41a:	e7c7      	b.n	800d3ac <_printf_common+0x58>
 800d41c:	2301      	movs	r3, #1
 800d41e:	4622      	mov	r2, r4
 800d420:	4649      	mov	r1, r9
 800d422:	4638      	mov	r0, r7
 800d424:	47c0      	blx	r8
 800d426:	3001      	adds	r0, #1
 800d428:	d0e6      	beq.n	800d3f8 <_printf_common+0xa4>
 800d42a:	3601      	adds	r6, #1
 800d42c:	e7d9      	b.n	800d3e2 <_printf_common+0x8e>
	...

0800d430 <_printf_i>:
 800d430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d434:	7e0f      	ldrb	r7, [r1, #24]
 800d436:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d438:	2f78      	cmp	r7, #120	; 0x78
 800d43a:	4691      	mov	r9, r2
 800d43c:	4680      	mov	r8, r0
 800d43e:	460c      	mov	r4, r1
 800d440:	469a      	mov	sl, r3
 800d442:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d446:	d807      	bhi.n	800d458 <_printf_i+0x28>
 800d448:	2f62      	cmp	r7, #98	; 0x62
 800d44a:	d80a      	bhi.n	800d462 <_printf_i+0x32>
 800d44c:	2f00      	cmp	r7, #0
 800d44e:	f000 80d8 	beq.w	800d602 <_printf_i+0x1d2>
 800d452:	2f58      	cmp	r7, #88	; 0x58
 800d454:	f000 80a3 	beq.w	800d59e <_printf_i+0x16e>
 800d458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d45c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d460:	e03a      	b.n	800d4d8 <_printf_i+0xa8>
 800d462:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d466:	2b15      	cmp	r3, #21
 800d468:	d8f6      	bhi.n	800d458 <_printf_i+0x28>
 800d46a:	a101      	add	r1, pc, #4	; (adr r1, 800d470 <_printf_i+0x40>)
 800d46c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d470:	0800d4c9 	.word	0x0800d4c9
 800d474:	0800d4dd 	.word	0x0800d4dd
 800d478:	0800d459 	.word	0x0800d459
 800d47c:	0800d459 	.word	0x0800d459
 800d480:	0800d459 	.word	0x0800d459
 800d484:	0800d459 	.word	0x0800d459
 800d488:	0800d4dd 	.word	0x0800d4dd
 800d48c:	0800d459 	.word	0x0800d459
 800d490:	0800d459 	.word	0x0800d459
 800d494:	0800d459 	.word	0x0800d459
 800d498:	0800d459 	.word	0x0800d459
 800d49c:	0800d5e9 	.word	0x0800d5e9
 800d4a0:	0800d50d 	.word	0x0800d50d
 800d4a4:	0800d5cb 	.word	0x0800d5cb
 800d4a8:	0800d459 	.word	0x0800d459
 800d4ac:	0800d459 	.word	0x0800d459
 800d4b0:	0800d60b 	.word	0x0800d60b
 800d4b4:	0800d459 	.word	0x0800d459
 800d4b8:	0800d50d 	.word	0x0800d50d
 800d4bc:	0800d459 	.word	0x0800d459
 800d4c0:	0800d459 	.word	0x0800d459
 800d4c4:	0800d5d3 	.word	0x0800d5d3
 800d4c8:	682b      	ldr	r3, [r5, #0]
 800d4ca:	1d1a      	adds	r2, r3, #4
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	602a      	str	r2, [r5, #0]
 800d4d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e0a3      	b.n	800d624 <_printf_i+0x1f4>
 800d4dc:	6820      	ldr	r0, [r4, #0]
 800d4de:	6829      	ldr	r1, [r5, #0]
 800d4e0:	0606      	lsls	r6, r0, #24
 800d4e2:	f101 0304 	add.w	r3, r1, #4
 800d4e6:	d50a      	bpl.n	800d4fe <_printf_i+0xce>
 800d4e8:	680e      	ldr	r6, [r1, #0]
 800d4ea:	602b      	str	r3, [r5, #0]
 800d4ec:	2e00      	cmp	r6, #0
 800d4ee:	da03      	bge.n	800d4f8 <_printf_i+0xc8>
 800d4f0:	232d      	movs	r3, #45	; 0x2d
 800d4f2:	4276      	negs	r6, r6
 800d4f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4f8:	485e      	ldr	r0, [pc, #376]	; (800d674 <_printf_i+0x244>)
 800d4fa:	230a      	movs	r3, #10
 800d4fc:	e019      	b.n	800d532 <_printf_i+0x102>
 800d4fe:	680e      	ldr	r6, [r1, #0]
 800d500:	602b      	str	r3, [r5, #0]
 800d502:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d506:	bf18      	it	ne
 800d508:	b236      	sxthne	r6, r6
 800d50a:	e7ef      	b.n	800d4ec <_printf_i+0xbc>
 800d50c:	682b      	ldr	r3, [r5, #0]
 800d50e:	6820      	ldr	r0, [r4, #0]
 800d510:	1d19      	adds	r1, r3, #4
 800d512:	6029      	str	r1, [r5, #0]
 800d514:	0601      	lsls	r1, r0, #24
 800d516:	d501      	bpl.n	800d51c <_printf_i+0xec>
 800d518:	681e      	ldr	r6, [r3, #0]
 800d51a:	e002      	b.n	800d522 <_printf_i+0xf2>
 800d51c:	0646      	lsls	r6, r0, #25
 800d51e:	d5fb      	bpl.n	800d518 <_printf_i+0xe8>
 800d520:	881e      	ldrh	r6, [r3, #0]
 800d522:	4854      	ldr	r0, [pc, #336]	; (800d674 <_printf_i+0x244>)
 800d524:	2f6f      	cmp	r7, #111	; 0x6f
 800d526:	bf0c      	ite	eq
 800d528:	2308      	moveq	r3, #8
 800d52a:	230a      	movne	r3, #10
 800d52c:	2100      	movs	r1, #0
 800d52e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d532:	6865      	ldr	r5, [r4, #4]
 800d534:	60a5      	str	r5, [r4, #8]
 800d536:	2d00      	cmp	r5, #0
 800d538:	bfa2      	ittt	ge
 800d53a:	6821      	ldrge	r1, [r4, #0]
 800d53c:	f021 0104 	bicge.w	r1, r1, #4
 800d540:	6021      	strge	r1, [r4, #0]
 800d542:	b90e      	cbnz	r6, 800d548 <_printf_i+0x118>
 800d544:	2d00      	cmp	r5, #0
 800d546:	d04d      	beq.n	800d5e4 <_printf_i+0x1b4>
 800d548:	4615      	mov	r5, r2
 800d54a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d54e:	fb03 6711 	mls	r7, r3, r1, r6
 800d552:	5dc7      	ldrb	r7, [r0, r7]
 800d554:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d558:	4637      	mov	r7, r6
 800d55a:	42bb      	cmp	r3, r7
 800d55c:	460e      	mov	r6, r1
 800d55e:	d9f4      	bls.n	800d54a <_printf_i+0x11a>
 800d560:	2b08      	cmp	r3, #8
 800d562:	d10b      	bne.n	800d57c <_printf_i+0x14c>
 800d564:	6823      	ldr	r3, [r4, #0]
 800d566:	07de      	lsls	r6, r3, #31
 800d568:	d508      	bpl.n	800d57c <_printf_i+0x14c>
 800d56a:	6923      	ldr	r3, [r4, #16]
 800d56c:	6861      	ldr	r1, [r4, #4]
 800d56e:	4299      	cmp	r1, r3
 800d570:	bfde      	ittt	le
 800d572:	2330      	movle	r3, #48	; 0x30
 800d574:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d578:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d57c:	1b52      	subs	r2, r2, r5
 800d57e:	6122      	str	r2, [r4, #16]
 800d580:	f8cd a000 	str.w	sl, [sp]
 800d584:	464b      	mov	r3, r9
 800d586:	aa03      	add	r2, sp, #12
 800d588:	4621      	mov	r1, r4
 800d58a:	4640      	mov	r0, r8
 800d58c:	f7ff fee2 	bl	800d354 <_printf_common>
 800d590:	3001      	adds	r0, #1
 800d592:	d14c      	bne.n	800d62e <_printf_i+0x1fe>
 800d594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d598:	b004      	add	sp, #16
 800d59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d59e:	4835      	ldr	r0, [pc, #212]	; (800d674 <_printf_i+0x244>)
 800d5a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d5a4:	6829      	ldr	r1, [r5, #0]
 800d5a6:	6823      	ldr	r3, [r4, #0]
 800d5a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d5ac:	6029      	str	r1, [r5, #0]
 800d5ae:	061d      	lsls	r5, r3, #24
 800d5b0:	d514      	bpl.n	800d5dc <_printf_i+0x1ac>
 800d5b2:	07df      	lsls	r7, r3, #31
 800d5b4:	bf44      	itt	mi
 800d5b6:	f043 0320 	orrmi.w	r3, r3, #32
 800d5ba:	6023      	strmi	r3, [r4, #0]
 800d5bc:	b91e      	cbnz	r6, 800d5c6 <_printf_i+0x196>
 800d5be:	6823      	ldr	r3, [r4, #0]
 800d5c0:	f023 0320 	bic.w	r3, r3, #32
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	2310      	movs	r3, #16
 800d5c8:	e7b0      	b.n	800d52c <_printf_i+0xfc>
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	f043 0320 	orr.w	r3, r3, #32
 800d5d0:	6023      	str	r3, [r4, #0]
 800d5d2:	2378      	movs	r3, #120	; 0x78
 800d5d4:	4828      	ldr	r0, [pc, #160]	; (800d678 <_printf_i+0x248>)
 800d5d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d5da:	e7e3      	b.n	800d5a4 <_printf_i+0x174>
 800d5dc:	0659      	lsls	r1, r3, #25
 800d5de:	bf48      	it	mi
 800d5e0:	b2b6      	uxthmi	r6, r6
 800d5e2:	e7e6      	b.n	800d5b2 <_printf_i+0x182>
 800d5e4:	4615      	mov	r5, r2
 800d5e6:	e7bb      	b.n	800d560 <_printf_i+0x130>
 800d5e8:	682b      	ldr	r3, [r5, #0]
 800d5ea:	6826      	ldr	r6, [r4, #0]
 800d5ec:	6961      	ldr	r1, [r4, #20]
 800d5ee:	1d18      	adds	r0, r3, #4
 800d5f0:	6028      	str	r0, [r5, #0]
 800d5f2:	0635      	lsls	r5, r6, #24
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	d501      	bpl.n	800d5fc <_printf_i+0x1cc>
 800d5f8:	6019      	str	r1, [r3, #0]
 800d5fa:	e002      	b.n	800d602 <_printf_i+0x1d2>
 800d5fc:	0670      	lsls	r0, r6, #25
 800d5fe:	d5fb      	bpl.n	800d5f8 <_printf_i+0x1c8>
 800d600:	8019      	strh	r1, [r3, #0]
 800d602:	2300      	movs	r3, #0
 800d604:	6123      	str	r3, [r4, #16]
 800d606:	4615      	mov	r5, r2
 800d608:	e7ba      	b.n	800d580 <_printf_i+0x150>
 800d60a:	682b      	ldr	r3, [r5, #0]
 800d60c:	1d1a      	adds	r2, r3, #4
 800d60e:	602a      	str	r2, [r5, #0]
 800d610:	681d      	ldr	r5, [r3, #0]
 800d612:	6862      	ldr	r2, [r4, #4]
 800d614:	2100      	movs	r1, #0
 800d616:	4628      	mov	r0, r5
 800d618:	f7f2 fde2 	bl	80001e0 <memchr>
 800d61c:	b108      	cbz	r0, 800d622 <_printf_i+0x1f2>
 800d61e:	1b40      	subs	r0, r0, r5
 800d620:	6060      	str	r0, [r4, #4]
 800d622:	6863      	ldr	r3, [r4, #4]
 800d624:	6123      	str	r3, [r4, #16]
 800d626:	2300      	movs	r3, #0
 800d628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d62c:	e7a8      	b.n	800d580 <_printf_i+0x150>
 800d62e:	6923      	ldr	r3, [r4, #16]
 800d630:	462a      	mov	r2, r5
 800d632:	4649      	mov	r1, r9
 800d634:	4640      	mov	r0, r8
 800d636:	47d0      	blx	sl
 800d638:	3001      	adds	r0, #1
 800d63a:	d0ab      	beq.n	800d594 <_printf_i+0x164>
 800d63c:	6823      	ldr	r3, [r4, #0]
 800d63e:	079b      	lsls	r3, r3, #30
 800d640:	d413      	bmi.n	800d66a <_printf_i+0x23a>
 800d642:	68e0      	ldr	r0, [r4, #12]
 800d644:	9b03      	ldr	r3, [sp, #12]
 800d646:	4298      	cmp	r0, r3
 800d648:	bfb8      	it	lt
 800d64a:	4618      	movlt	r0, r3
 800d64c:	e7a4      	b.n	800d598 <_printf_i+0x168>
 800d64e:	2301      	movs	r3, #1
 800d650:	4632      	mov	r2, r6
 800d652:	4649      	mov	r1, r9
 800d654:	4640      	mov	r0, r8
 800d656:	47d0      	blx	sl
 800d658:	3001      	adds	r0, #1
 800d65a:	d09b      	beq.n	800d594 <_printf_i+0x164>
 800d65c:	3501      	adds	r5, #1
 800d65e:	68e3      	ldr	r3, [r4, #12]
 800d660:	9903      	ldr	r1, [sp, #12]
 800d662:	1a5b      	subs	r3, r3, r1
 800d664:	42ab      	cmp	r3, r5
 800d666:	dcf2      	bgt.n	800d64e <_printf_i+0x21e>
 800d668:	e7eb      	b.n	800d642 <_printf_i+0x212>
 800d66a:	2500      	movs	r5, #0
 800d66c:	f104 0619 	add.w	r6, r4, #25
 800d670:	e7f5      	b.n	800d65e <_printf_i+0x22e>
 800d672:	bf00      	nop
 800d674:	08010272 	.word	0x08010272
 800d678:	08010283 	.word	0x08010283

0800d67c <memmove>:
 800d67c:	4288      	cmp	r0, r1
 800d67e:	b510      	push	{r4, lr}
 800d680:	eb01 0402 	add.w	r4, r1, r2
 800d684:	d902      	bls.n	800d68c <memmove+0x10>
 800d686:	4284      	cmp	r4, r0
 800d688:	4623      	mov	r3, r4
 800d68a:	d807      	bhi.n	800d69c <memmove+0x20>
 800d68c:	1e43      	subs	r3, r0, #1
 800d68e:	42a1      	cmp	r1, r4
 800d690:	d008      	beq.n	800d6a4 <memmove+0x28>
 800d692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d69a:	e7f8      	b.n	800d68e <memmove+0x12>
 800d69c:	4402      	add	r2, r0
 800d69e:	4601      	mov	r1, r0
 800d6a0:	428a      	cmp	r2, r1
 800d6a2:	d100      	bne.n	800d6a6 <memmove+0x2a>
 800d6a4:	bd10      	pop	{r4, pc}
 800d6a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6ae:	e7f7      	b.n	800d6a0 <memmove+0x24>

0800d6b0 <_realloc_r>:
 800d6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b4:	4680      	mov	r8, r0
 800d6b6:	4614      	mov	r4, r2
 800d6b8:	460e      	mov	r6, r1
 800d6ba:	b921      	cbnz	r1, 800d6c6 <_realloc_r+0x16>
 800d6bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	f7ff ba71 	b.w	800cba8 <_malloc_r>
 800d6c6:	b92a      	cbnz	r2, 800d6d4 <_realloc_r+0x24>
 800d6c8:	f7ff fc9c 	bl	800d004 <_free_r>
 800d6cc:	4625      	mov	r5, r4
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d4:	f000 f81b 	bl	800d70e <_malloc_usable_size_r>
 800d6d8:	4284      	cmp	r4, r0
 800d6da:	4607      	mov	r7, r0
 800d6dc:	d802      	bhi.n	800d6e4 <_realloc_r+0x34>
 800d6de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6e2:	d812      	bhi.n	800d70a <_realloc_r+0x5a>
 800d6e4:	4621      	mov	r1, r4
 800d6e6:	4640      	mov	r0, r8
 800d6e8:	f7ff fa5e 	bl	800cba8 <_malloc_r>
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d0ed      	beq.n	800d6ce <_realloc_r+0x1e>
 800d6f2:	42bc      	cmp	r4, r7
 800d6f4:	4622      	mov	r2, r4
 800d6f6:	4631      	mov	r1, r6
 800d6f8:	bf28      	it	cs
 800d6fa:	463a      	movcs	r2, r7
 800d6fc:	f7ff fa1e 	bl	800cb3c <memcpy>
 800d700:	4631      	mov	r1, r6
 800d702:	4640      	mov	r0, r8
 800d704:	f7ff fc7e 	bl	800d004 <_free_r>
 800d708:	e7e1      	b.n	800d6ce <_realloc_r+0x1e>
 800d70a:	4635      	mov	r5, r6
 800d70c:	e7df      	b.n	800d6ce <_realloc_r+0x1e>

0800d70e <_malloc_usable_size_r>:
 800d70e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d712:	1f18      	subs	r0, r3, #4
 800d714:	2b00      	cmp	r3, #0
 800d716:	bfbc      	itt	lt
 800d718:	580b      	ldrlt	r3, [r1, r0]
 800d71a:	18c0      	addlt	r0, r0, r3
 800d71c:	4770      	bx	lr
	...

0800d720 <_init>:
 800d720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d722:	bf00      	nop
 800d724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d726:	bc08      	pop	{r3}
 800d728:	469e      	mov	lr, r3
 800d72a:	4770      	bx	lr

0800d72c <_fini>:
 800d72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72e:	bf00      	nop
 800d730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d732:	bc08      	pop	{r3}
 800d734:	469e      	mov	lr, r3
 800d736:	4770      	bx	lr
