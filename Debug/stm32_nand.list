
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002abc  0800d584  0800d584  0001d584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010040  08010040  00030120  2**0
                  CONTENTS
  4 .ARM          00000008  08010040  08010040  00020040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010048  08010048  00030120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010048  08010048  00020048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801004c  0801004c  0002004c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08010050  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030120  2**0
                  CONTENTS
 10 .bss          00006900  20000120  20000120  00030120  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20006a20  20006a20  00030120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023ee4  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004262  00000000  00000000  00054034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b58  00000000  00000000  00058298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005dc6  00000000  00000000  00059df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000205a1  00000000  00000000  0005fbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f56  00000000  00000000  00080157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001640ad  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001a18  00000000  00000000  00164100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007d04  00000000  00000000  00165b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d56c 	.word	0x0800d56c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	0800d56c 	.word	0x0800d56c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f003 fea9 	bl	80049b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f881 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa2d 	bl	80010c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9f5 	bl	800105c <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f97d 	bl	8000f70 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8e3 	bl	8000e40 <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 facb 	bl	8001214 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9c3 	bl	8001008 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f93f 	bl	8000f04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(150);
 8000c8c:	2096      	movs	r0, #150	; 0x96
 8000c8e:	f003 fed5 	bl	8004a3c <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4828      	ldr	r0, [pc, #160]	; (8000d38 <main+0xdc>)
 8000c98:	f004 fd74 	bl	8005784 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4826      	ldr	r0, [pc, #152]	; (8000d3c <main+0xe0>)
 8000ca4:	f004 fd6e 	bl	8005784 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000ca8:	2096      	movs	r0, #150	; 0x96
 8000caa:	f003 fec7 	bl	8004a3c <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4821      	ldr	r0, [pc, #132]	; (8000d38 <main+0xdc>)
 8000cb4:	f004 fd66 	bl	8005784 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	481f      	ldr	r0, [pc, #124]	; (8000d3c <main+0xe0>)
 8000cc0:	f004 fd60 	bl	8005784 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <main+0xe4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 fe53 	bl	8007980 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <main+0xe8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4919      	ldr	r1, [pc, #100]	; (8000d48 <main+0xec>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f007 facb 	bl	800827e <HAL_UART_Receive_IT>

  //set_Date(epoch);

  ST7789_Reset();
 8000ce8:	f003 f8da 	bl	8003ea0 <ST7789_Reset>
  ST7789_Init(back_color);
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <main+0xf0>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 f8ef 	bl	8003ed4 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cf6:	f008 fc4f 	bl	8009598 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <main+0xf4>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f008 fd43 	bl	800978a <osSemaphoreNew>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <main+0xf8>)
 8000d08:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(s_qcmd), &myQue_attributes);
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <main+0xfc>)
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	2010      	movs	r0, #16
 8000d10:	f008 fdc4 	bl	800989c <osMessageQueueNew>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <main+0x100>)
 8000d18:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <main+0x104>)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <main+0x108>)
 8000d20:	f008 fc86 	bl	8009630 <osThreadNew>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <main+0x10c>)
 8000d28:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d2a:	f008 fc5b 	bl	80095e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f003 fe84 	bl	8004a3c <HAL_Delay>
 8000d34:	e7fb      	b.n	8000d2e <main+0xd2>
 8000d36:	bf00      	nop
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	20000070 	.word	0x20000070
 8000d44:	20000074 	.word	0x20000074
 8000d48:	20001360 	.word	0x20001360
 8000d4c:	20001366 	.word	0x20001366
 8000d50:	0800fe1c 	.word	0x0800fe1c
 8000d54:	20000348 	.word	0x20000348
 8000d58:	0800fe04 	.word	0x0800fe04
 8000d5c:	20000344 	.word	0x20000344
 8000d60:	0800fde0 	.word	0x0800fde0
 8000d64:	08002c01 	.word	0x08002c01
 8000d68:	20000340 	.word	0x20000340

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	; 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2230      	movs	r2, #48	; 0x30
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00b fdfc 	bl	800c978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000de0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dea:	2307      	movs	r3, #7
 8000dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 ffda 	bl	8005dac <HAL_RCC_OscConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dfe:	f002 feaf 	bl	8003b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	230f      	movs	r3, #15
 8000e04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2302      	movs	r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2105      	movs	r1, #5
 8000e20:	4618      	mov	r0, r3
 8000e22:	f005 fa3b 	bl	800629c <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e2c:	f002 fe98 	bl	8003b60 <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3750      	adds	r7, #80	; 0x50
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e5a:	4a28      	ldr	r2, [pc, #160]	; (8000efc <MX_RTC_Init+0xbc>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e66:	227f      	movs	r2, #127	; 0x7f
 8000e68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e6c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e70:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e86:	f005 fd3d 	bl	8006904 <HAL_RTC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e90:	f002 fe66 	bl	8003b60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8000e94:	2315      	movs	r3, #21
 8000e96:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8000e98:	2334      	movs	r3, #52	; 0x34
 8000e9a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000eb0:	f005 fd9e 	bl	80069f0 <HAL_RTC_SetTime>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eba:	f002 fe51 	bl	8003b60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000ed6:	f005 fe83 	bl	8006be0 <HAL_RTC_SetDate>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000ee0:	f002 fe3e 	bl	8003b60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  set_Date(epoch);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 f943 	bl	8002174 <set_Date>

  /* USER CODE END RTC_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000013c 	.word	0x2000013c
 8000efc:	40002800 	.word	0x40002800
 8000f00:	20000064 	.word	0x20000064

08000f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_SPI1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f56:	f005 ffd3 	bl	8006f00 <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f60:	f002 fdfe 	bl	8003b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000015c 	.word	0x2000015c
 8000f6c:	40013000 	.word	0x40013000

08000f70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f96:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fa4:	22f9      	movs	r2, #249	; 0xf9
 8000fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_TIM2_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb6:	f006 fc93 	bl	80078e0 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fc0:	f002 fdce 	bl	8003b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fd2:	f006 fe4d 	bl	8007c70 <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fdc:	f002 fdc0 	bl	8003b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fee:	f007 f869 	bl	80080c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff8:	f002 fdb2 	bl	8003b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000214 	.word	0x20000214

08001008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_USART3_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001014:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001018:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001040:	f007 f8d0 	bl	80081e4 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f002 fd89 	bl	8003b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000025c 	.word	0x2000025c
 8001058:	40004800 	.word	0x40004800

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_DMA_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <MX_DMA_Init+0x68>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_DMA_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_DMA_Init+0x68>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <MX_DMA_Init+0x68>)
 8001088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <MX_DMA_Init+0x68>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	200e      	movs	r0, #14
 80010a0:	f003 fda8 	bl	8004bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010a4:	200e      	movs	r0, #14
 80010a6:	f003 fdc1 	bl	8004c2c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2103      	movs	r1, #3
 80010ae:	203b      	movs	r0, #59	; 0x3b
 80010b0:	f003 fda0 	bl	8004bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010b4:	203b      	movs	r0, #59	; 0x3b
 80010b6:	f003 fdb9 	bl	8004c2c <HAL_NVIC_EnableIRQ>

}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a47      	ldr	r2, [pc, #284]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b45      	ldr	r3, [pc, #276]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a40      	ldr	r2, [pc, #256]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <MX_GPIO_Init+0x13c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <MX_GPIO_Init+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a39      	ldr	r2, [pc, #228]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a32      	ldr	r2, [pc, #200]	; (8001204 <MX_GPIO_Init+0x13c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_GPIO_Init+0x13c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	210e      	movs	r1, #14
 800118a:	481f      	ldr	r0, [pc, #124]	; (8001208 <MX_GPIO_Init+0x140>)
 800118c:	f004 fafa 	bl	8005784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	481d      	ldr	r0, [pc, #116]	; (800120c <MX_GPIO_Init+0x144>)
 8001198:	f004 faf4 	bl	8005784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	481b      	ldr	r0, [pc, #108]	; (8001210 <MX_GPIO_Init+0x148>)
 80011a2:	f004 faef 	bl	8005784 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 80011a6:	230e      	movs	r3, #14
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0x140>)
 80011be:	f004 f945 	bl	800544c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0x144>)
 80011dc:	f004 f936 	bl	800544c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e8:	2302      	movs	r3, #2
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_GPIO_Init+0x148>)
 80011f8:	f004 f928 	bl	800544c <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40020800 	.word	0x40020800

08001214 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 800121a:	4b5f      	ldr	r3, [pc, #380]	; (8001398 <MX_FSMC_Init+0x184>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 800123a:	4b58      	ldr	r3, [pc, #352]	; (800139c <MX_FSMC_Init+0x188>)
 800123c:	4a58      	ldr	r2, [pc, #352]	; (80013a0 <MX_FSMC_Init+0x18c>)
 800123e:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001240:	4b56      	ldr	r3, [pc, #344]	; (800139c <MX_FSMC_Init+0x188>)
 8001242:	2210      	movs	r2, #16
 8001244:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001246:	4b55      	ldr	r3, [pc, #340]	; (800139c <MX_FSMC_Init+0x188>)
 8001248:	2202      	movs	r2, #2
 800124a:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800124c:	4b53      	ldr	r3, [pc, #332]	; (800139c <MX_FSMC_Init+0x188>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001252:	4b52      	ldr	r3, [pc, #328]	; (800139c <MX_FSMC_Init+0x188>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001258:	4b50      	ldr	r3, [pc, #320]	; (800139c <MX_FSMC_Init+0x188>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800125e:	4b4f      	ldr	r3, [pc, #316]	; (800139c <MX_FSMC_Init+0x188>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001264:	4b4d      	ldr	r3, [pc, #308]	; (800139c <MX_FSMC_Init+0x188>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 800126a:	4b4c      	ldr	r3, [pc, #304]	; (800139c <MX_FSMC_Init+0x188>)
 800126c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 8001272:	4b4a      	ldr	r3, [pc, #296]	; (800139c <MX_FSMC_Init+0x188>)
 8001274:	2210      	movs	r2, #16
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 131072;
 8001278:	4b48      	ldr	r3, [pc, #288]	; (800139c <MX_FSMC_Init+0x188>)
 800127a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 8001280:	4b46      	ldr	r3, [pc, #280]	; (800139c <MX_FSMC_Init+0x188>)
 8001282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001286:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001288:	4b44      	ldr	r3, [pc, #272]	; (800139c <MX_FSMC_Init+0x188>)
 800128a:	2201      	movs	r2, #1
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <MX_FSMC_Init+0x188>)
 8001290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8001296:	4b41      	ldr	r3, [pc, #260]	; (800139c <MX_FSMC_Init+0x188>)
 8001298:	2200      	movs	r2, #0
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800129e:	23fc      	movs	r3, #252	; 0xfc
 80012a0:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 80012a2:	23fc      	movs	r3, #252	; 0xfc
 80012a4:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 80012a6:	23fc      	movs	r3, #252	; 0xfc
 80012a8:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 80012aa:	23fc      	movs	r3, #252	; 0xfc
 80012ac:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 80012ae:	23fc      	movs	r3, #252	; 0xfc
 80012b0:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 80012b2:	23fc      	movs	r3, #252	; 0xfc
 80012b4:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 80012b6:	23fc      	movs	r3, #252	; 0xfc
 80012b8:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 80012ba:	23fc      	movs	r3, #252	; 0xfc
 80012bc:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012be:	463a      	mov	r2, r7
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	4835      	ldr	r0, [pc, #212]	; (800139c <MX_FSMC_Init+0x188>)
 80012c8:	f004 fa8f 	bl	80057ea <HAL_NAND_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 80012d2:	f002 fc45 	bl	8003b60 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

    if (HAL_NAND_ECC_Disable(&hnand1) != HAL_OK) devError |= devNAND;
 80012d6:	4831      	ldr	r0, [pc, #196]	; (800139c <MX_FSMC_Init+0x188>)
 80012d8:	f004 fd0b 	bl	8005cf2 <HAL_NAND_ECC_Disable>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <MX_FSMC_Init+0xdc>
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <MX_FSMC_Init+0x190>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	f043 0320 	orr.w	r3, r3, #32
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <MX_FSMC_Init+0x190>)
 80012ee:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    if (HAL_NAND_RegisterCallback(&hnand1, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

    if (NAND_Read_ID(&hnand1, &nandID) == HAL_OK) {//read ID information from chip
 80012f0:	492d      	ldr	r1, [pc, #180]	; (80013a8 <MX_FSMC_Init+0x194>)
 80012f2:	482a      	ldr	r0, [pc, #168]	; (800139c <MX_FSMC_Init+0x188>)
 80012f4:	f000 f862 	bl	80013bc <NAND_Read_ID>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d147      	bne.n	800138e <MX_FSMC_Init+0x17a>

    	nandState = HAL_NAND_GetState(&hnand1);
 80012fe:	4827      	ldr	r0, [pc, #156]	; (800139c <MX_FSMC_Init+0x188>)
 8001300:	f004 fd20 	bl	8005d44 <HAL_NAND_GetState>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <MX_FSMC_Init+0x198>)
 800130a:	701a      	strb	r2, [r3, #0]

    	memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 800130c:	4a28      	ldr	r2, [pc, #160]	; (80013b0 <MX_FSMC_Init+0x19c>)
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_FSMC_Init+0x188>)
 8001310:	4615      	mov	r5, r2
 8001312:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800131e:	e885 0003 	stmia.w	r5, {r0, r1}

    	if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <MX_FSMC_Init+0x19c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d028      	beq.n	800137c <MX_FSMC_Init+0x168>
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_FSMC_Init+0x19c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001332:	d823      	bhi.n	800137c <MX_FSMC_Init+0x168>
    		rdBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <MX_FSMC_Init+0x19c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	2001      	movs	r0, #1
 800133c:	f00b fa26 	bl	800c78c <calloc>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 8001346:	601a      	str	r2, [r3, #0]
    		wrBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_FSMC_Init+0x19c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	2001      	movs	r0, #1
 8001350:	f00b fa1c 	bl	800c78c <calloc>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_FSMC_Init+0x1a4>)
 800135a:	601a      	str	r2, [r3, #0]

    		if (!rdBuf || !wrBuf) devError |= devMEM;
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <MX_FSMC_Init+0x158>
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_FSMC_Init+0x1a4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10f      	bne.n	800138c <MX_FSMC_Init+0x178>
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <MX_FSMC_Init+0x190>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_FSMC_Init+0x190>)
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	e007      	b.n	800138c <MX_FSMC_Init+0x178>
    	} else {
    		devError |= devNAND;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_FSMC_Init+0x190>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f043 0320 	orr.w	r3, r3, #32
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <MX_FSMC_Init+0x190>)
 8001388:	701a      	strb	r2, [r3, #0]

    }


  /* USER CODE END FSMC_Init 2 */
}
 800138a:	e000      	b.n	800138e <MX_FSMC_Init+0x17a>
    		if (!rdBuf || !wrBuf) devError |= devMEM;
 800138c:	bf00      	nop
}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bdb0      	pop	{r4, r5, r7, pc}
 8001396:	bf00      	nop
 8001398:	2000137c 	.word	0x2000137c
 800139c:	20000300 	.word	0x20000300
 80013a0:	a0000060 	.word	0xa0000060
 80013a4:	2000034c 	.word	0x2000034c
 80013a8:	20001380 	.word	0x20001380
 80013ac:	20000085 	.word	0x20000085
 80013b0:	20001388 	.word	0x20001388
 80013b4:	200013a0 	.word	0x200013a0
 80013b8:	200013a4 	.word	0x200013a4

080013bc <NAND_Read_ID>:
/* USER CODE BEGIN 4 */

//-----------------------------------------------------------------------------

HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d101      	bne.n	80013d6 <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 80013d2:	2302      	movs	r3, #2
 80013d4:	e059      	b.n	800148a <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d152      	bne.n	8001488 <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <NAND_Read_ID+0x34>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e04c      	b.n	800148a <NAND_Read_ID+0xce>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2202      	movs	r2, #2
 80013fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <NAND_Read_ID+0xdc>)
 8001402:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001406:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <NAND_Read_ID+0xdc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	2290      	movs	r2, #144	; 0x90
 8001412:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001414:	f3bf 8f4f 	dsb	sy
}
 8001418:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <NAND_Read_ID+0xdc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001426:	f3bf 8f4f 	dsb	sy
}
 800142a:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d123      	bne.n	800147c <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <NAND_Read_ID+0xdc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <NAND_Read_ID+0xdc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3310      	adds	r3, #16
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	b2da      	uxtb	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	0c1b      	lsrs	r3, r3, #16
 800145c:	b2da      	uxtb	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	0e1b      	lsrs	r3, r3, #24
 8001466:	b2da      	uxtb	r2, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	711a      	strb	r2, [r3, #4]

	    	hnand->State = HAL_NAND_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	e000      	b.n	800148a <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20001368 	.word	0x20001368

0800149c <NAND_Read_Page_8b>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef  NAND_Read_Page_8b(NAND_HandleTypeDef *hnand,
									   NAND_AddressTypeDef *pAddress,
									   uint8_t *pBuffer,
                                       uint32_t NumPageToRead)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b090      	sub	sp, #64	; 0x40
 80014a0:	af04      	add	r7, sp, #16
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	603b      	str	r3, [r7, #0]
uint32_t numpagesread = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t nbpages = NumPageToRead;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t *buff = pBuffer;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24

	// Check the NAND controller state
	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d101      	bne.n	80014c6 <NAND_Read_Page_8b+0x2a>
		return HAL_BUSY;
 80014c2:	2302      	movs	r3, #2
 80014c4:	e0dc      	b.n	8001680 <NAND_Read_Page_8b+0x1e4>
	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	f040 80d5 	bne.w	800167e <NAND_Read_Page_8b+0x1e2>
		__HAL_LOCK(hnand);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <NAND_Read_Page_8b+0x46>
 80014de:	2302      	movs	r3, #2
 80014e0:	e0ce      	b.n	8001680 <NAND_Read_Page_8b+0x1e4>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2202      	movs	r2, #2
 80014ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	    uint32_t deviceaddress = devAdr;
 80014f2:	4b65      	ldr	r3, [pc, #404]	; (8001688 <NAND_Read_Page_8b+0x1ec>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	61bb      	str	r3, [r7, #24]
	    uint32_t nandaddress = pAddress->Page;//ARRAY_ADDRESS(pAddress, hnand);
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	623b      	str	r3, [r7, #32]

	    if (dbg > logOn)
 80014fe:	4b63      	ldr	r3, [pc, #396]	; (800168c <NAND_Read_Page_8b+0x1f0>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	f240 80a4 	bls.w	8001650 <NAND_Read_Page_8b+0x1b4>
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
	    		  __func__,
				  nandaddress,
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	881b      	ldrh	r3, [r3, #0]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800150c:	461a      	mov	r2, r3
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	885b      	ldrh	r3, [r3, #2]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001512:	4619      	mov	r1, r3
				  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	889b      	ldrh	r3, [r3, #4]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001518:	4618      	mov	r0, r3
 800151a:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <NAND_Read_Page_8b+0x1f4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	9303      	str	r3, [sp, #12]
 8001520:	9002      	str	r0, [sp, #8]
 8001522:	9101      	str	r1, [sp, #4]
 8001524:	9200      	str	r2, [sp, #0]
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	4a5a      	ldr	r2, [pc, #360]	; (8001694 <NAND_Read_Page_8b+0x1f8>)
 800152a:	495b      	ldr	r1, [pc, #364]	; (8001698 <NAND_Read_Page_8b+0x1fc>)
 800152c:	2001      	movs	r0, #1
 800152e:	f000 ff1b 	bl	8002368 <Report>

	    // Page(s) read loop
	    while (nbpages && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 8001532:	e08d      	b.n	8001650 <NAND_Read_Page_8b+0x1b4>
	    	// Send read page command sequence
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800153e:	f3bf 8f4f 	dsb	sy
}
 8001542:	bf00      	nop
	    	__DSB();
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800154e:	f3bf 8f4f 	dsb	sy
}
 8001552:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.PageSize) > 512U) {
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800155c:	d907      	bls.n	800156e <NAND_Read_Page_8b+0xd2>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
	    		__DSB();
	    	}
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	6a3a      	ldr	r2, [r7, #32]
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800157a:	f3bf 8f4f 	dsb	sy
}
 800157e:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	0a1a      	lsrs	r2, r3, #8
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800158e:	f3bf 8f4f 	dsb	sy
}
 8001592:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.BlockSize * hnand->Config.BlockNbr) > 65535U) {
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800159c:	fb02 f303 	mul.w	r3, r2, r3
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d309      	bcc.n	80015ba <NAND_Read_Page_8b+0x11e>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	0c1a      	lsrs	r2, r3, #16
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015b4:	f3bf 8f4f 	dsb	sy
}
 80015b8:	bf00      	nop
	    		__DSB();
	    	}
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	2230      	movs	r2, #48	; 0x30
 80015c2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015c4:	f3bf 8f4f 	dsb	sy
}
 80015c8:	bf00      	nop
	    	__DSB();


	    	if (hnand->Config.ExtraCommandEnable == ENABLE) {
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d123      	bne.n	800161c <NAND_Read_Page_8b+0x180>
	    		uint32_t tickstart = HAL_GetTick();
 80015d4:	f003 fa26 	bl	8004a24 <HAL_GetTick>
 80015d8:	6178      	str	r0, [r7, #20]
	    		while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 80015da:	e011      	b.n	8001600 <NAND_Read_Page_8b+0x164>
	    			if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 80015dc:	f003 fa22 	bl	8004a24 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ea:	d909      	bls.n	8001600 <NAND_Read_Page_8b+0x164>
	    				hnand->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2203      	movs	r2, #3
 80015f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    				__HAL_UNLOCK(hnand);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2020 	strb.w	r2, [r3, #32]
	    				return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e03f      	b.n	8001680 <NAND_Read_Page_8b+0x1e4>
	    		while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f004 fbad 	bl	8005d60 <HAL_NAND_Read_Status>
 8001606:	4603      	mov	r3, r0
 8001608:	2b40      	cmp	r3, #64	; 0x40
 800160a:	d1e7      	bne.n	80015dc <NAND_Read_Page_8b+0x140>
	    			}
	    		}

	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001616:	f3bf 8f4f 	dsb	sy
}
 800161a:	bf00      	nop
	    		__DSB();
	    	}

	    	// Get Data into Buffer
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	e008      	b.n	8001634 <NAND_Read_Page_8b+0x198>
	    		*buff++ = *(uint8_t *)deviceaddress;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	1c59      	adds	r1, r3, #1
 8001628:	6279      	str	r1, [r7, #36]	; 0x24
 800162a:	7812      	ldrb	r2, [r2, #0]
 800162c:	701a      	strb	r2, [r3, #0]
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3301      	adds	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	429a      	cmp	r2, r3
 800163c:	d3f1      	bcc.n	8001622 <NAND_Read_Page_8b+0x186>
	    	}

	    	numpagesread++;// Increment read pages number
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	3301      	adds	r3, #1
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
	    	nbpages--;// Decrement pages to read
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	3b01      	subs	r3, #1
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
	    	nandaddress = (uint32_t)(nandaddress + 1U);// Increment the NAND address
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	3301      	adds	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
	    while (nbpages && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 8001650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001652:	2b00      	cmp	r3, #0
 8001654:	d009      	beq.n	800166a <NAND_Read_Page_8b+0x1ce>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	6a3a      	ldr	r2, [r7, #32]
 8001664:	429a      	cmp	r2, r3
 8001666:	f4ff af65 	bcc.w	8001534 <NAND_Read_Page_8b+0x98>
	    }

	    hnand->State = HAL_NAND_STATE_READY;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    __HAL_UNLOCK(hnand);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <NAND_Read_Page_8b+0x1e4>
	    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3730      	adds	r7, #48	; 0x30
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20001368 	.word	0x20001368
 800168c:	20000068 	.word	0x20000068
 8001690:	20000004 	.word	0x20000004
 8001694:	0800fe2c 	.word	0x0800fe2c
 8001698:	0800d6cc 	.word	0x0800d6cc

0800169c <NAND_Write_Page_8b>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef  NAND_Write_Page_8b(NAND_HandleTypeDef *hnand,
									    NAND_AddressTypeDef *pAddress,
									    uint8_t *pBuffer,
                                        uint32_t NumPageToWrite)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	; 0x38
 80016a0:	af04      	add	r7, sp, #16
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	603b      	str	r3, [r7, #0]
uint32_t numpageswritten = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t nbpages = NumPageToWrite;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	623b      	str	r3, [r7, #32]

	/* Check the NAND controller state */
	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d101      	bne.n	80016c2 <NAND_Write_Page_8b+0x26>
		return HAL_BUSY;
 80016be:	2302      	movs	r3, #2
 80016c0:	e0da      	b.n	8001878 <NAND_Write_Page_8b+0x1dc>
	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	f040 80d3 	bne.w	8001876 <NAND_Write_Page_8b+0x1da>

	    __HAL_LOCK(hnand);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <NAND_Write_Page_8b+0x42>
 80016da:	2302      	movs	r3, #2
 80016dc:	e0cc      	b.n	8001878 <NAND_Write_Page_8b+0x1dc>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	    uint32_t deviceaddress = devAdr;
 80016ee:	4b64      	ldr	r3, [pc, #400]	; (8001880 <NAND_Write_Page_8b+0x1e4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	617b      	str	r3, [r7, #20]
	    uint32_t nandaddress = pAddress->Page;//ARRAY_ADDRESS(pAddress, hnand);
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	61fb      	str	r3, [r7, #28]

	    if (dbg > logOn)
 80016fa:	4b62      	ldr	r3, [pc, #392]	; (8001884 <NAND_Write_Page_8b+0x1e8>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	f240 80a2 	bls.w	8001848 <NAND_Write_Page_8b+0x1ac>
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
	    	      __func__,
	    		  nandaddress,
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	881b      	ldrh	r3, [r3, #0]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001708:	461a      	mov	r2, r3
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	885b      	ldrh	r3, [r3, #2]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800170e:	4619      	mov	r1, r3
	    		  pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	889b      	ldrh	r3, [r3, #4]
	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001714:	4618      	mov	r0, r3
 8001716:	4b5c      	ldr	r3, [pc, #368]	; (8001888 <NAND_Write_Page_8b+0x1ec>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	9303      	str	r3, [sp, #12]
 800171c:	9002      	str	r0, [sp, #8]
 800171e:	9101      	str	r1, [sp, #4]
 8001720:	9200      	str	r2, [sp, #0]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4a59      	ldr	r2, [pc, #356]	; (800188c <NAND_Write_Page_8b+0x1f0>)
 8001726:	495a      	ldr	r1, [pc, #360]	; (8001890 <NAND_Write_Page_8b+0x1f4>)
 8001728:	2001      	movs	r0, #1
 800172a:	f000 fe1d 	bl	8002368 <Report>

	    /* Page(s) write loop */
	    while ((nbpages > 0) && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 800172e:	e08b      	b.n	8001848 <NAND_Write_Page_8b+0x1ac>
	    	/* Send write page command sequence */
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800173a:	f3bf 8f4f 	dsb	sy
}
 800173e:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001746:	2280      	movs	r2, #128	; 0x80
 8001748:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800174a:	f3bf 8f4f 	dsb	sy
}
 800174e:	bf00      	nop
	    	__DSB();
	    	//
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800175a:	f3bf 8f4f 	dsb	sy
}
 800175e:	bf00      	nop
	    	__DSB();
	    	if (hnand->Config.PageSize > 512U) {
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001768:	d907      	bls.n	800177a <NAND_Write_Page_8b+0xde>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001774:	f3bf 8f4f 	dsb	sy
}
 8001778:	bf00      	nop
	    		__DSB();
	    	}
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001786:	f3bf 8f4f 	dsb	sy
}
 800178a:	bf00      	nop
	    	__DSB();
	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	0a1a      	lsrs	r2, r3, #8
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800179a:	f3bf 8f4f 	dsb	sy
}
 800179e:	bf00      	nop
	    	__DSB();
	    	if ((hnand->Config.BlockSize * hnand->Config.BlockNbr) > 65535U) {
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d309      	bcc.n	80017c6 <NAND_Write_Page_8b+0x12a>
	    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	0c1a      	lsrs	r2, r3, #16
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017c0:	f3bf 8f4f 	dsb	sy
}
 80017c4:	bf00      	nop
	    		__DSB();
	    	}
	    	//
	    	// Write data to memory
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	e00b      	b.n	80017e4 <NAND_Write_Page_8b+0x148>
	    		*(__IO uint8_t *)deviceaddress = *(pBuffer + index);
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	441a      	add	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017d8:	f3bf 8f4f 	dsb	sy
}
 80017dc:	bf00      	nop
	    	for (uint32_t index = 0U; index < hnand->Config.PageSize; index++) {
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d3ee      	bcc.n	80017cc <NAND_Write_Page_8b+0x130>
	    		__DSB();
	    	}

	    	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f4:	2210      	movs	r2, #16
 80017f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017f8:	f3bf 8f4f 	dsb	sy
}
 80017fc:	bf00      	nop
	    	__DSB();

	    	uint32_t tickstart = HAL_GetTick();
 80017fe:	f003 f911 	bl	8004a24 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]
	    	while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 8001804:	e011      	b.n	800182a <NAND_Write_Page_8b+0x18e>
	    		if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 8001806:	f003 f90d 	bl	8004a24 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001814:	d909      	bls.n	800182a <NAND_Write_Page_8b+0x18e>
	    			hnand->State = HAL_NAND_STATE_ERROR;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2203      	movs	r2, #3
 800181a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    			__HAL_UNLOCK(hnand);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2020 	strb.w	r2, [r3, #32]
	    			return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e026      	b.n	8001878 <NAND_Write_Page_8b+0x1dc>
	    	while (HAL_NAND_Read_Status(hnand) != NAND_READY) {// Read status until NAND is ready
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f004 fa98 	bl	8005d60 <HAL_NAND_Read_Status>
 8001830:	4603      	mov	r3, r0
 8001832:	2b40      	cmp	r3, #64	; 0x40
 8001834:	d1e7      	bne.n	8001806 <NAND_Write_Page_8b+0x16a>
	    		}
	    	}

	    	numpageswritten++;// Increment written pages number
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	3301      	adds	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
	    	nbpages--;// Decrement pages to write
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	3b01      	subs	r3, #1
 8001840:	623b      	str	r3, [r7, #32]
	    	nandaddress = (uint32_t)(nandaddress + 1U);// Increment the NAND address
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3301      	adds	r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
	    while ((nbpages > 0) && (nandaddress < (hnand->Config.BlockSize * hnand->Config.BlockNbr))) {
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <NAND_Write_Page_8b+0x1c6>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	429a      	cmp	r2, r3
 800185e:	f4ff af67 	bcc.w	8001730 <NAND_Write_Page_8b+0x94>
	    }

	    hnand->State = HAL_NAND_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    __HAL_UNLOCK(hnand);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <NAND_Write_Page_8b+0x1dc>
	    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20001368 	.word	0x20001368
 8001884:	20000068 	.word	0x20000068
 8001888:	20000004 	.word	0x20000004
 800188c:	0800fe40 	.word	0x0800fe40
 8001890:	0800d6cc 	.word	0x0800d6cc

08001894 <NAND_Erase_Block>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t prn)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af04      	add	r7, sp, #16
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	4613      	mov	r3, r2
 80018a0:	71fb      	strb	r3, [r7, #7]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d101      	bne.n	80018b2 <NAND_Erase_Block+0x1e>

		return HAL_BUSY;
 80018ae:	2302      	movs	r3, #2
 80018b0:	e06e      	b.n	8001990 <NAND_Erase_Block+0xfc>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d167      	bne.n	800198e <NAND_Erase_Block+0xfa>

		__HAL_LOCK(hnand);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <NAND_Erase_Block+0x38>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e061      	b.n	8001990 <NAND_Erase_Block+0xfc>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2020 	strb.w	r2, [r3, #32]
		hnand->State = HAL_NAND_STATE_BUSY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		uint32_t deviceaddress = devAdr;
 80018dc:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <NAND_Erase_Block+0x104>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = pAddress->Page;//ARRAY_ADDRESS(pAddress, hnand);
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	613b      	str	r3, [r7, #16]

		if (prn) {
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d018      	beq.n	8001920 <NAND_Erase_Block+0x8c>
			if (dbg > logOn)
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <NAND_Erase_Block+0x108>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d914      	bls.n	8001920 <NAND_Erase_Block+0x8c>
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
			    	      __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	881b      	ldrh	r3, [r3, #0]
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 80018fa:	461a      	mov	r2, r3
			    	      __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	885b      	ldrh	r3, [r3, #2]
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001900:	4619      	mov	r1, r3
			    	      __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block, eol);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	889b      	ldrh	r3, [r3, #4]
				Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001906:	4618      	mov	r0, r3
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <NAND_Erase_Block+0x10c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	9303      	str	r3, [sp, #12]
 800190e:	9002      	str	r0, [sp, #8]
 8001910:	9101      	str	r1, [sp, #4]
 8001912:	9200      	str	r2, [sp, #0]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4a23      	ldr	r2, [pc, #140]	; (80019a4 <NAND_Erase_Block+0x110>)
 8001918:	4923      	ldr	r1, [pc, #140]	; (80019a8 <NAND_Erase_Block+0x114>)
 800191a:	2001      	movs	r0, #1
 800191c:	f000 fd24 	bl	8002368 <Report>
		}

		/* Send Erase block command sequence */
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001926:	2260      	movs	r2, #96	; 0x60
 8001928:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800192a:	f3bf 8f4f 	dsb	sy
}
 800192e:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800193c:	f3bf 8f4f 	dsb	sy
}
 8001940:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	0a1a      	lsrs	r2, r3, #8
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001950:	f3bf 8f4f 	dsb	sy
}
 8001954:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	0c1a      	lsrs	r2, r3, #16
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001964:	f3bf 8f4f 	dsb	sy
}
 8001968:	bf00      	nop
		__DSB();

		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001970:	22d0      	movs	r2, #208	; 0xd0
 8001972:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
		__DSB();

		hnand->State = HAL_NAND_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(hnand);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2020 	strb.w	r2, [r3, #32]

		return HAL_ERROR;

	}

	return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <NAND_Erase_Block+0xfc>
		return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20001368 	.word	0x20001368
 800199c:	20000068 	.word	0x20000068
 80019a0:	20000004 	.word	0x20000004
 80019a4:	0800fe54 	.word	0x0800fe54
 80019a8:	0800d6cc 	.word	0x0800d6cc

080019ac <pageIsEmpty>:
//-----------------------------------------------------------------------------
//      Check: page is empty ?
//
bool pageIsEmpty(uint32_t page)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
bool ret = false;
 80019b4:	2300      	movs	r3, #0
 80019b6:	75fb      	strb	r3, [r7, #23]

	NAND_AddressTypeDef addr = {
		.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),//page,
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <pageIsEmpty+0x98>)
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <pageIsEmpty+0x98>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80019ca:	fb01 f202 	mul.w	r2, r1, r2
 80019ce:	1a9b      	subs	r3, r3, r2
	NAND_AddressTypeDef addr = {
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	813b      	strh	r3, [r7, #8]
 80019d4:	2301      	movs	r3, #1
 80019d6:	817b      	strh	r3, [r7, #10]
		.Plane = 1,
		.Block = nand_PageToBlock(page)
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f001 f829 	bl	8002a30 <nand_PageToBlock>
 80019de:	4603      	mov	r3, r0
	NAND_AddressTypeDef addr = {
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	81bb      	strh	r3, [r7, #12]
	};

	if (NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) != HAL_OK) {
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <pageIsEmpty+0x9c>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <pageIsEmpty+0xa0>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	f107 0108 	add.w	r1, r7, #8
 80019f0:	2301      	movs	r3, #1
 80019f2:	f7ff fd53 	bl	800149c <NAND_Read_Page_8b>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <pageIsEmpty+0x60>
		devError |= devNAND;
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <pageIsEmpty+0xa4>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	f043 0320 	orr.w	r3, r3, #32
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <pageIsEmpty+0xa4>)
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	e015      	b.n	8001a38 <pageIsEmpty+0x8c>
	} else {
		ret = true;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	75fb      	strb	r3, [r7, #23]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	e00b      	b.n	8001a2e <pageIsEmpty+0x82>
			if (*(uint8_t *)(rdBuf + i) != 0xff) {
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <pageIsEmpty+0xa0>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2bff      	cmp	r3, #255	; 0xff
 8001a22:	d001      	beq.n	8001a28 <pageIsEmpty+0x7c>
				ret = false;
 8001a24:	2300      	movs	r3, #0
 8001a26:	75fb      	strb	r3, [r7, #23]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <pageIsEmpty+0x98>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3ee      	bcc.n	8001a16 <pageIsEmpty+0x6a>
			}
		}
	}

	return ret;
 8001a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20001388 	.word	0x20001388
 8001a48:	20000078 	.word	0x20000078
 8001a4c:	200013a0 	.word	0x200013a0
 8001a50:	2000034c 	.word	0x2000034c

08001a54 <emptyArea>:
//-------------------------------------------------------------------------------------------
int emptyArea(uint32_t addr, uint32_t len, uint8_t *buf, NAND_AddressTypeDef *nan)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b093      	sub	sp, #76	; 0x4c
 8001a58:	af08      	add	r7, sp, #32
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
int ret = -1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t shift = (addr - devAdr) % chipConf.PageSize;
 8001a68:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <emptyArea+0x104>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4a3a      	ldr	r2, [pc, #232]	; (8001b5c <emptyArea+0x108>)
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a78:	fb01 f202 	mul.w	r2, r1, r2
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
uint32_t dlin = shift + len;
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4413      	add	r3, r2
 8001a86:	623b      	str	r3, [r7, #32]

	if (dlin > chipConf.PageSize)  dlin = chipConf.PageSize - shift;
 8001a88:	4b34      	ldr	r3, [pc, #208]	; (8001b5c <emptyArea+0x108>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6a3a      	ldr	r2, [r7, #32]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d904      	bls.n	8001a9c <emptyArea+0x48>
 8001a92:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <emptyArea+0x108>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	623b      	str	r3, [r7, #32]
	//

	if (dbg > logOn)
 8001a9c:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <emptyArea+0x10c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d91c      	bls.n	8001ade <emptyArea+0x8a>
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	4413      	add	r3, r2
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6a3a      	ldr	r2, [r7, #32]
 8001aae:	3a01      	subs	r2, #1
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8001ab0:	6839      	ldr	r1, [r7, #0]
 8001ab2:	8809      	ldrh	r1, [r1, #0]
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001ab4:	4608      	mov	r0, r1
			  __func__, addr, addr + len - 1, len, shift, dlin - 1, nan->Page, nan->Block, eol);
 8001ab6:	6839      	ldr	r1, [r7, #0]
 8001ab8:	8889      	ldrh	r1, [r1, #4]
		Report(1, "[%s] adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001aba:	460c      	mov	r4, r1
 8001abc:	4929      	ldr	r1, [pc, #164]	; (8001b64 <emptyArea+0x110>)
 8001abe:	6809      	ldr	r1, [r1, #0]
 8001ac0:	9106      	str	r1, [sp, #24]
 8001ac2:	9405      	str	r4, [sp, #20]
 8001ac4:	9004      	str	r0, [sp, #16]
 8001ac6:	9203      	str	r2, [sp, #12]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	9202      	str	r2, [sp, #8]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	9201      	str	r2, [sp, #4]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4a24      	ldr	r2, [pc, #144]	; (8001b68 <emptyArea+0x114>)
 8001ad6:	4925      	ldr	r1, [pc, #148]	; (8001b6c <emptyArea+0x118>)
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f000 fc45 	bl	8002368 <Report>

	//
	bool rt = false;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	77fb      	strb	r3, [r7, #31]
	if (NAND_Read_Page_8b(nandPort, nan, buf, 1) != HAL_OK) {
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <emptyArea+0x11c>)
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6839      	ldr	r1, [r7, #0]
 8001aec:	f7ff fcd6 	bl	800149c <NAND_Read_Page_8b>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <emptyArea+0xb2>
		devError |= devNAND;
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <emptyArea+0x120>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	f043 0320 	orr.w	r3, r3, #32
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <emptyArea+0x120>)
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	e01e      	b.n	8001b44 <emptyArea+0xf0>
	} else {
		//
		rt = true;
 8001b06:	2301      	movs	r3, #1
 8001b08:	77fb      	strb	r3, [r7, #31]
		uint8_t byte;
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	e014      	b.n	8001b3a <emptyArea+0xe6>
			byte = *(buf + i);
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4413      	add	r3, r2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	74fb      	strb	r3, [r7, #19]
			if ((i >= shift) && (i < dlin)) {
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d308      	bcc.n	8001b34 <emptyArea+0xe0>
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d204      	bcs.n	8001b34 <emptyArea+0xe0>
				if (byte != 0xff) rt = false;
 8001b2a:	7cfb      	ldrb	r3, [r7, #19]
 8001b2c:	2bff      	cmp	r3, #255	; 0xff
 8001b2e:	d001      	beq.n	8001b34 <emptyArea+0xe0>
 8001b30:	2300      	movs	r3, #0
 8001b32:	77fb      	strb	r3, [r7, #31]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	3301      	adds	r3, #1
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <emptyArea+0x108>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d3e5      	bcc.n	8001b10 <emptyArea+0xbc>
			}
		}
		//
	}

	if (rt) ret = shift;
 8001b44:	7ffb      	ldrb	r3, [r7, #31]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <emptyArea+0xfa>
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24

	return ret;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	372c      	adds	r7, #44	; 0x2c
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd90      	pop	{r4, r7, pc}
 8001b58:	20001368 	.word	0x20001368
 8001b5c:	20001388 	.word	0x20001388
 8001b60:	20000068 	.word	0x20000068
 8001b64:	20000004 	.word	0x20000004
 8001b68:	0800fe68 	.word	0x0800fe68
 8001b6c:	0800d700 	.word	0x0800d700
 8001b70:	20000078 	.word	0x20000078
 8001b74:	2000034c 	.word	0x2000034c

08001b78 <areaIsEmpty>:
//
bool areaIsEmpty(uint32_t adr, uint32_t len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b094      	sub	sp, #80	; 0x50
 8001b7c:	af08      	add	r7, sp, #32
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
bool ret = false;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
uint32_t shift = adr - devAdr;
 8001b88:	4b97      	ldr	r3, [pc, #604]	; (8001de8 <areaIsEmpty+0x270>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	623b      	str	r3, [r7, #32]
uint32_t page = shift / nandPort->Config.PageSize;
 8001b92:	4b96      	ldr	r3, [pc, #600]	; (8001dec <areaIsEmpty+0x274>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	6a3a      	ldr	r2, [r7, #32]
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	61fb      	str	r3, [r7, #28]
uint32_t block = nand_PageToBlock(page);
 8001ba0:	69f8      	ldr	r0, [r7, #28]
 8001ba2:	f000 ff45 	bl	8002a30 <nand_PageToBlock>
 8001ba6:	61b8      	str	r0, [r7, #24]


	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 8001ba8:	4b90      	ldr	r3, [pc, #576]	; (8001dec <areaIsEmpty+0x274>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d109      	bne.n	8001bca <areaIsEmpty+0x52>
		devError |= devNAND;
 8001bb6:	4b8e      	ldr	r3, [pc, #568]	; (8001df0 <areaIsEmpty+0x278>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	f043 0320 	orr.w	r3, r3, #32
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b8b      	ldr	r3, [pc, #556]	; (8001df0 <areaIsEmpty+0x278>)
 8001bc2:	701a      	strb	r2, [r3, #0]
		return ret;//HAL_BUSY;
 8001bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bc8:	e10a      	b.n	8001de0 <areaIsEmpty+0x268>
	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 8001bca:	4b88      	ldr	r3, [pc, #544]	; (8001dec <areaIsEmpty+0x274>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 80fa 	bne.w	8001dce <areaIsEmpty+0x256>
		//
		shift %= nandPort->Config.PageSize;
 8001bda:	4b84      	ldr	r3, [pc, #528]	; (8001dec <areaIsEmpty+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001be6:	fb01 f202 	mul.w	r2, r1, r2
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	623b      	str	r3, [r7, #32]
		uint32_t dlin = shift + len;
 8001bee:	6a3a      	ldr	r2, [r7, #32]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (dlin > nandPort->Config.PageSize)  dlin = nandPort->Config.PageSize - shift;
 8001bf6:	4b7d      	ldr	r3, [pc, #500]	; (8001dec <areaIsEmpty+0x274>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d905      	bls.n	8001c0e <areaIsEmpty+0x96>
 8001c02:	4b7a      	ldr	r3, [pc, #488]	; (8001dec <areaIsEmpty+0x274>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
		//
		__HAL_LOCK(nandPort);
 8001c0e:	4b77      	ldr	r3, [pc, #476]	; (8001dec <areaIsEmpty+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <areaIsEmpty+0xa6>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0e0      	b.n	8001de0 <areaIsEmpty+0x268>
 8001c1e:	4b73      	ldr	r3, [pc, #460]	; (8001dec <areaIsEmpty+0x274>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 8001c28:	4b70      	ldr	r3, [pc, #448]	; (8001dec <areaIsEmpty+0x274>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		NAND_AddressTypeDef pAddress = {
			.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),//page,
 8001c32:	4b70      	ldr	r3, [pc, #448]	; (8001df4 <areaIsEmpty+0x27c>)
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	4b6f      	ldr	r3, [pc, #444]	; (8001df4 <areaIsEmpty+0x27c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c44:	fb01 f202 	mul.w	r2, r1, r2
 8001c48:	1a9b      	subs	r3, r3, r2
		NAND_AddressTypeDef pAddress = {
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	813b      	strh	r3, [r7, #8]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	817b      	strh	r3, [r7, #10]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	81bb      	strh	r3, [r7, #12]
			.Plane = 1,
			.Block = block
		};
		uint32_t deviceaddress = devAdr;
 8001c58:	4b63      	ldr	r3, [pc, #396]	; (8001de8 <areaIsEmpty+0x270>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = ARRAY_ADDRESS(&pAddress, nandPort);
 8001c5e:	893b      	ldrh	r3, [r7, #8]
 8001c60:	4619      	mov	r1, r3
 8001c62:	89bb      	ldrh	r3, [r7, #12]
 8001c64:	461a      	mov	r2, r3
 8001c66:	897b      	ldrh	r3, [r7, #10]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	4b60      	ldr	r3, [pc, #384]	; (8001dec <areaIsEmpty+0x274>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c70:	fb00 f303 	mul.w	r3, r0, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	4a5d      	ldr	r2, [pc, #372]	; (8001dec <areaIsEmpty+0x274>)
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c7c:	fb02 f303 	mul.w	r3, r2, r3
 8001c80:	440b      	add	r3, r1
 8001c82:	613b      	str	r3, [r7, #16]

		if (dbg > logOn)
 8001c84:	4b5c      	ldr	r3, [pc, #368]	; (8001df8 <areaIsEmpty+0x280>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d91a      	bls.n	8001cc2 <areaIsEmpty+0x14a>
			Report(1, "[%s] nand_adr:0x%X adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
				  __func__, nandaddress, adr, adr + len - 1, len, shift, dlin - 1, page, block, eol);
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	4413      	add	r3, r2
			Report(1, "[%s] nand_adr:0x%X adr:0x%X..0x%X len:%lu shift:%lu..%lu page:%lu block:%lu%s",
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c96:	3a01      	subs	r2, #1
 8001c98:	4958      	ldr	r1, [pc, #352]	; (8001dfc <areaIsEmpty+0x284>)
 8001c9a:	6809      	ldr	r1, [r1, #0]
 8001c9c:	9107      	str	r1, [sp, #28]
 8001c9e:	69b9      	ldr	r1, [r7, #24]
 8001ca0:	9106      	str	r1, [sp, #24]
 8001ca2:	69f9      	ldr	r1, [r7, #28]
 8001ca4:	9105      	str	r1, [sp, #20]
 8001ca6:	9204      	str	r2, [sp, #16]
 8001ca8:	6a3a      	ldr	r2, [r7, #32]
 8001caa:	9203      	str	r2, [sp, #12]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	9202      	str	r2, [sp, #8]
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4a51      	ldr	r2, [pc, #324]	; (8001e00 <areaIsEmpty+0x288>)
 8001cba:	4952      	ldr	r1, [pc, #328]	; (8001e04 <areaIsEmpty+0x28c>)
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f000 fb53 	bl	8002368 <Report>

		/* Page(s) read loop */
		if (nandaddress < ((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr))) {
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <areaIsEmpty+0x274>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	4a48      	ldr	r2, [pc, #288]	; (8001dec <areaIsEmpty+0x274>)
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d26d      	bcs.n	8001db4 <areaIsEmpty+0x23c>
			/* Send read page command sequence */
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce2:	f3bf 8f4f 	dsb	sy
}
 8001ce6:	bf00      	nop
			__DSB();
			//
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf2:	f3bf 8f4f 	dsb	sy
}
 8001cf6:	bf00      	nop
			__DSB();
			if ((nandPort->Config.PageSize) > 512U) {
 8001cf8:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <areaIsEmpty+0x274>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d02:	d907      	bls.n	8001d14 <areaIsEmpty+0x19c>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d0e:	f3bf 8f4f 	dsb	sy
}
 8001d12:	bf00      	nop
				__DSB();
			}
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d20:	f3bf 8f4f 	dsb	sy
}
 8001d24:	bf00      	nop
			__DSB();
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	0a1a      	lsrs	r2, r3, #8
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d34:	f3bf 8f4f 	dsb	sy
}
 8001d38:	bf00      	nop
			__DSB();
			if (((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)) > 65535U) {
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <areaIsEmpty+0x274>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <areaIsEmpty+0x274>)
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4e:	d309      	bcc.n	8001d64 <areaIsEmpty+0x1ec>
				*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	0c1a      	lsrs	r2, r3, #16
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d5e:	f3bf 8f4f 	dsb	sy
}
 8001d62:	bf00      	nop
				__DSB();
			}
			//
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6a:	2230      	movs	r2, #48	; 0x30
 8001d6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d6e:	f3bf 8f4f 	dsb	sy
}
 8001d72:	bf00      	nop
			__DSB();

			ret = true;
 8001d74:	2301      	movs	r3, #1
 8001d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint8_t byte;
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7e:	e013      	b.n	8001da8 <areaIsEmpty+0x230>
				byte = *(uint8_t *)deviceaddress;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	73fb      	strb	r3, [r7, #15]
				if ((index >= shift) && (index < dlin)) {
 8001d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d309      	bcc.n	8001da2 <areaIsEmpty+0x22a>
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d205      	bcs.n	8001da2 <areaIsEmpty+0x22a>
					if (byte != 0xff) ret = false;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	2bff      	cmp	r3, #255	; 0xff
 8001d9a:	d002      	beq.n	8001da2 <areaIsEmpty+0x22a>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3301      	adds	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <areaIsEmpty+0x274>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d3e5      	bcc.n	8001d80 <areaIsEmpty+0x208>
				}
			}
		}
		//
		nandPort->State = HAL_NAND_STATE_READY;
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <areaIsEmpty+0x274>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <areaIsEmpty+0x274>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2020 	strb.w	r2, [r3, #32]
		devError |= devNAND;
		return ret;//HAL_ERROR;
	}

	//
	return ret;
 8001dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dcc:	e008      	b.n	8001de0 <areaIsEmpty+0x268>
		devError |= devNAND;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <areaIsEmpty+0x278>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	f043 0320 	orr.w	r3, r3, #32
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <areaIsEmpty+0x278>)
 8001dda:	701a      	strb	r2, [r3, #0]
		return ret;//HAL_ERROR;
 8001ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3730      	adds	r7, #48	; 0x30
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20001368 	.word	0x20001368
 8001dec:	20000078 	.word	0x20000078
 8001df0:	2000034c 	.word	0x2000034c
 8001df4:	20001388 	.word	0x20001388
 8001df8:	20000068 	.word	0x20000068
 8001dfc:	20000004 	.word	0x20000004
 8001e00:	0800fe74 	.word	0x0800fe74
 8001e04:	0800d740 	.word	0x0800d740

08001e08 <get_qStat>:
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	dc18      	bgt.n	8001e48 <get_qStat+0x40>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f113 0f06 	cmn.w	r3, #6
 8001e1c:	db2a      	blt.n	8001e74 <get_qStat+0x6c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3306      	adds	r3, #6
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d826      	bhi.n	8001e74 <get_qStat+0x6c>
 8001e26:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <get_qStat+0x24>)
 8001e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2c:	08001e6d 	.word	0x08001e6d
 8001e30:	08001e69 	.word	0x08001e69
 8001e34:	08001e65 	.word	0x08001e65
 8001e38:	08001e61 	.word	0x08001e61
 8001e3c:	08001e5d 	.word	0x08001e5d
 8001e40:	08001e59 	.word	0x08001e59
 8001e44:	08001e55 	.word	0x08001e55
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00e      	beq.n	8001e70 <get_qStat+0x68>
 8001e52:	e00f      	b.n	8001e74 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <get_qStat+0x7c>)
 8001e56:	e00e      	b.n	8001e76 <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <get_qStat+0x80>)
 8001e5a:	e00c      	b.n	8001e76 <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <get_qStat+0x84>)
 8001e5e:	e00a      	b.n	8001e76 <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <get_qStat+0x88>)
 8001e62:	e008      	b.n	8001e76 <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <get_qStat+0x8c>)
 8001e66:	e006      	b.n	8001e76 <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <get_qStat+0x90>)
 8001e6a:	e004      	b.n	8001e76 <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <get_qStat+0x94>)
 8001e6e:	e002      	b.n	8001e76 <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <get_qStat+0x98>)
 8001e72:	e000      	b.n	8001e76 <get_qStat+0x6e>
	}

	return "UnknownError";
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <get_qStat+0x9c>)
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	0800d790 	.word	0x0800d790
 8001e88:	0800d798 	.word	0x0800d798
 8001e8c:	0800d7a0 	.word	0x0800d7a0
 8001e90:	0800d7b0 	.word	0x0800d7b0
 8001e94:	0800d7c0 	.word	0x0800d7c0
 8001e98:	0800d7d4 	.word	0x0800d7d4
 8001e9c:	0800d7e4 	.word	0x0800d7e4
 8001ea0:	0800d7f0 	.word	0x0800d7f0
 8001ea4:	0800d804 	.word	0x0800d804

08001ea8 <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d00a      	beq.n	8001ece <get_logName+0x26>
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	dc0a      	bgt.n	8001ed2 <get_logName+0x2a>
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <get_logName+0x1e>
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d002      	beq.n	8001eca <get_logName+0x22>
 8001ec4:	e005      	b.n	8001ed2 <get_logName+0x2a>
		case logOff:
			return "logOff";
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <get_logName+0x38>)
 8001ec8:	e004      	b.n	8001ed4 <get_logName+0x2c>
		case logOn:
			return "logOn";
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <get_logName+0x3c>)
 8001ecc:	e002      	b.n	8001ed4 <get_logName+0x2c>
		case logDump:
			return "logDump";
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <get_logName+0x40>)
 8001ed0:	e000      	b.n	8001ed4 <get_logName+0x2c>
	}

	return "???";
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <get_logName+0x44>)
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	0800d814 	.word	0x0800d814
 8001ee4:	0800d81c 	.word	0x0800d81c
 8001ee8:	0800d824 	.word	0x0800d824
 8001eec:	0800d82c 	.word	0x0800d82c

08001ef0 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8001efc:	2330      	movs	r3, #48	; 0x30
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	2300      	movs	r3, #0
 8001f06:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <hex2bin+0x28>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <hex2bin+0x2c>
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	e0b2      	b.n	8002082 <hex2bin+0x192>
    if (len > 8) len = 8;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d901      	bls.n	8001f26 <hex2bin+0x36>
 8001f22:	2308      	movs	r3, #8
 8001f24:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f1c3 0308 	rsb	r3, r3, #8
 8001f2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8001f30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f34:	f107 0210 	add.w	r2, r7, #16
 8001f38:	4413      	add	r3, r2
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f00a fd0c 	bl	800c95c <memcpy>

    k = j = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8001f52:	e090      	b.n	8002076 <hex2bin+0x186>
        jk = j + 2;
 8001f54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f58:	3302      	adds	r3, #2
 8001f5a:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8001f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f64:	e066      	b.n	8002034 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 8001f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f6a:	3328      	adds	r3, #40	; 0x28
 8001f6c:	443b      	add	r3, r7
 8001f6e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f72:	2b2f      	cmp	r3, #47	; 0x2f
 8001f74:	d918      	bls.n	8001fa8 <hex2bin+0xb8>
 8001f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f7a:	3328      	adds	r3, #40	; 0x28
 8001f7c:	443b      	add	r3, r7
 8001f7e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f82:	2b39      	cmp	r3, #57	; 0x39
 8001f84:	d810      	bhi.n	8001fa8 <hex2bin+0xb8>
 8001f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f8a:	3328      	adds	r3, #40	; 0x28
 8001f8c:	443b      	add	r3, r7
 8001f8e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	3a30      	subs	r2, #48	; 0x30
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	3328      	adds	r3, #40	; 0x28
 8001fa0:	443b      	add	r3, r7
 8001fa2:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001fa6:	e040      	b.n	800202a <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 8001fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fac:	3328      	adds	r3, #40	; 0x28
 8001fae:	443b      	add	r3, r7
 8001fb0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001fb4:	2b60      	cmp	r3, #96	; 0x60
 8001fb6:	d918      	bls.n	8001fea <hex2bin+0xfa>
 8001fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fbc:	3328      	adds	r3, #40	; 0x28
 8001fbe:	443b      	add	r3, r7
 8001fc0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001fc4:	2b66      	cmp	r3, #102	; 0x66
 8001fc6:	d810      	bhi.n	8001fea <hex2bin+0xfa>
 8001fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fcc:	3328      	adds	r3, #40	; 0x28
 8001fce:	443b      	add	r3, r7
 8001fd0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	3a57      	subs	r2, #87	; 0x57
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	3328      	adds	r3, #40	; 0x28
 8001fe2:	443b      	add	r3, r7
 8001fe4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001fe8:	e01f      	b.n	800202a <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8001fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fee:	3328      	adds	r3, #40	; 0x28
 8001ff0:	443b      	add	r3, r7
 8001ff2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d917      	bls.n	800202a <hex2bin+0x13a>
 8001ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ffe:	3328      	adds	r3, #40	; 0x28
 8002000:	443b      	add	r3, r7
 8002002:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002006:	2b46      	cmp	r3, #70	; 0x46
 8002008:	d80f      	bhi.n	800202a <hex2bin+0x13a>
 800200a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800200e:	3328      	adds	r3, #40	; 0x28
 8002010:	443b      	add	r3, r7
 8002012:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	3a37      	subs	r2, #55	; 0x37
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	3328      	adds	r3, #40	; 0x28
 8002024:	443b      	add	r3, r7
 8002026:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 800202a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800202e:	3301      	adds	r3, #1
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002034:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002038:	7ffb      	ldrb	r3, [r7, #31]
 800203a:	429a      	cmp	r2, r3
 800203c:	d393      	bcc.n	8001f66 <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 800203e:	7b3b      	ldrb	r3, [r7, #12]
 8002040:	011a      	lsls	r2, r3, #4
 8002042:	7b7b      	ldrb	r3, [r7, #13]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 800204c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002050:	f1c3 0303 	rsb	r3, r3, #3
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	4313      	orrs	r3, r2
 8002060:	623b      	str	r3, [r7, #32]
        k++;
 8002062:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002066:	3301      	adds	r3, #1
 8002068:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 800206c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002070:	3302      	adds	r3, #2
 8002072:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 8002076:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800207a:	2b03      	cmp	r3, #3
 800207c:	f67f af6a 	bls.w	8001f54 <hex2bin+0x64>
    }

    return ret;
 8002080:	6a3b      	ldr	r3, [r7, #32]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3728      	adds	r7, #40	; 0x28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
	if (on)
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 800209c:	2201      	movs	r2, #1
 800209e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <errLedOn+0x34>)
 80020a4:	f003 fb6e 	bl	8005784 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 80020a8:	e005      	b.n	80020b6 <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 80020aa:	2200      	movs	r2, #0
 80020ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020b0:	4803      	ldr	r0, [pc, #12]	; (80020c0 <errLedOn+0x34>)
 80020b2:	f003 fb67 	bl	8005784 <HAL_GPIO_WritePin>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40020c00 	.word	0x40020c00

080020c4 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	return secCounter;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <get_secCounter+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000350 	.word	0x20000350

080020dc <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
	secCounter++;
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <inc_secCounter+0x18>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a03      	ldr	r2, [pc, #12]	; (80020f4 <inc_secCounter+0x18>)
 80020e8:	6013      	str	r3, [r2, #0]
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	20000350 	.word	0x20000350

080020f8 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
	return msCounter;
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <get_msCounter+0x18>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000358 	.word	0x20000358

08002114 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
	msCounter++;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <inc_msCounter+0x20>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	1c50      	adds	r0, r2, #1
 8002120:	f143 0100 	adc.w	r1, r3, #0
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <inc_msCounter+0x20>)
 8002126:	e9c3 0100 	strd	r0, r1, [r3]
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	20000358 	.word	0x20000358

08002138 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8002140:	f7ff ffc0 	bl	80020c4 <get_secCounter>
 8002144:	4602      	mov	r2, r0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 800215a:	f7ff ffb3 	bl	80020c4 <get_secCounter>
 800215e:	4602      	mov	r2, r0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4293      	cmp	r3, r2
 8002164:	bf94      	ite	ls
 8002166:	2301      	movls	r3, #1
 8002168:	2300      	movhi	r3, #0
 800216a:	b2db      	uxtb	r3, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b094      	sub	sp, #80	; 0x50
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	2000      	movs	r0, #0
 8002180:	460a      	mov	r2, r1
 8002182:	4603      	mov	r3, r0
 8002184:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8002188:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800218c:	f107 0320 	add.w	r3, r7, #32
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f00a fb08 	bl	800c7a8 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8002198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800219a:	b2db      	uxtb	r3, r3
 800219c:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 800219e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 80021ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 80021b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <set_Date+0xb0>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4413      	add	r3, r2
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 80021c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	2200      	movs	r2, #0
 80021d4:	4619      	mov	r1, r3
 80021d6:	4814      	ldr	r0, [pc, #80]	; (8002228 <set_Date+0xb4>)
 80021d8:	f004 fc0a 	bl	80069f0 <HAL_RTC_SetTime>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <set_Date+0x7e>
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <set_Date+0xb8>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b0f      	ldr	r3, [pc, #60]	; (800222c <set_Date+0xb8>)
 80021ee:	701a      	strb	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 80021f0:	e014      	b.n	800221c <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	2200      	movs	r2, #0
 80021f8:	4619      	mov	r1, r3
 80021fa:	480b      	ldr	r0, [pc, #44]	; (8002228 <set_Date+0xb4>)
 80021fc:	f004 fcf0 	bl	8006be0 <HAL_RTC_SetDate>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <set_Date+0xa2>
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <set_Date+0xb8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	f043 0308 	orr.w	r3, r3, #8
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <set_Date+0xb8>)
 8002212:	701a      	strb	r2, [r3, #0]
}
 8002214:	e002      	b.n	800221c <set_Date+0xa8>
			setDate = true;
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <set_Date+0xbc>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	3750      	adds	r7, #80	; 0x50
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20001365 	.word	0x20001365
 8002228:	2000013c 	.word	0x2000013c
 800222c:	2000034c 	.word	0x2000034c
 8002230:	20001364 	.word	0x20001364

08002234 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b093      	sub	sp, #76	; 0x4c
 8002238:	af04      	add	r7, sp, #16
 800223a:	6078      	str	r0, [r7, #4]
int ret = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8002240:	4b40      	ldr	r3, [pc, #256]	; (8002344 <sec2str+0x110>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	f083 0301 	eor.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d040      	beq.n	80022d0 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 800224e:	f7ff ff39 	bl	80020c4 <get_secCounter>
 8002252:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	4a3c      	ldr	r2, [pc, #240]	; (8002348 <sec2str+0x114>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	4a39      	ldr	r2, [pc, #228]	; (8002348 <sec2str+0x114>)
 8002264:	fba2 1203 	umull	r1, r2, r2, r3
 8002268:	0c12      	lsrs	r2, r2, #16
 800226a:	4938      	ldr	r1, [pc, #224]	; (800234c <sec2str+0x118>)
 800226c:	fb01 f202 	mul.w	r2, r1, r2
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	4a36      	ldr	r2, [pc, #216]	; (8002350 <sec2str+0x11c>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	0adb      	lsrs	r3, r3, #11
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	4a33      	ldr	r2, [pc, #204]	; (8002350 <sec2str+0x11c>)
 8002284:	fba2 1203 	umull	r1, r2, r2, r3
 8002288:	0ad2      	lsrs	r2, r2, #11
 800228a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800228e:	fb01 f202 	mul.w	r2, r1, r2
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	4a2e      	ldr	r2, [pc, #184]	; (8002354 <sec2str+0x120>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80022a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <sec2str+0x120>)
 80022a6:	fba3 1302 	umull	r1, r3, r3, r2
 80022aa:	0959      	lsrs	r1, r3, #5
 80022ac:	460b      	mov	r3, r1
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	1a5b      	subs	r3, r3, r1
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 80022b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c4:	4924      	ldr	r1, [pc, #144]	; (8002358 <sec2str+0x124>)
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f00a fcce 	bl	800cc68 <siprintf>
 80022cc:	6378      	str	r0, [r7, #52]	; 0x34
 80022ce:	e034      	b.n	800233a <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	2200      	movs	r2, #0
 80022d6:	4619      	mov	r1, r3
 80022d8:	4820      	ldr	r0, [pc, #128]	; (800235c <sec2str+0x128>)
 80022da:	f004 fd05 	bl	8006ce8 <HAL_RTC_GetDate>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <sec2str+0xc0>
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <sec2str+0x12c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <sec2str+0x12c>)
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	e022      	b.n	800233a <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	2200      	movs	r2, #0
 80022fa:	4619      	mov	r1, r3
 80022fc:	4817      	ldr	r0, [pc, #92]	; (800235c <sec2str+0x128>)
 80022fe:	f004 fc11 	bl	8006b24 <HAL_RTC_GetTime>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <sec2str+0xe4>
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <sec2str+0x12c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <sec2str+0x12c>)
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	e010      	b.n	800233a <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8002318:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800231a:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 800231c:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800231e:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002320:	7c3b      	ldrb	r3, [r7, #16]
 8002322:	7c7a      	ldrb	r2, [r7, #17]
 8002324:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8002326:	9102      	str	r1, [sp, #8]
 8002328:	9201      	str	r2, [sp, #4]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	4623      	mov	r3, r4
 800232e:	4602      	mov	r2, r0
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <sec2str+0x130>)
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f00a fc98 	bl	800cc68 <siprintf>
 8002338:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800233a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800233c:	4618      	mov	r0, r3
 800233e:	373c      	adds	r7, #60	; 0x3c
 8002340:	46bd      	mov	sp, r7
 8002342:	bd90      	pop	{r4, r7, pc}
 8002344:	20001364 	.word	0x20001364
 8002348:	c22e4507 	.word	0xc22e4507
 800234c:	00015180 	.word	0x00015180
 8002350:	91a2b3c5 	.word	0x91a2b3c5
 8002354:	88888889 	.word	0x88888889
 8002358:	0800d830 	.word	0x0800d830
 800235c:	2000013c 	.word	0x2000013c
 8002360:	2000034c 	.word	0x2000034c
 8002364:	0800d848 	.word	0x0800d848

08002368 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 8002368:	b40e      	push	{r1, r2, r3}
 800236a:	b590      	push	{r4, r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8002374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002378:	613b      	str	r3, [r7, #16]
int dl = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 800237e:	4b27      	ldr	r3, [pc, #156]	; (800241c <Report+0xb4>)
 8002380:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <Report+0x48>
		dl = sec2str(buf);
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff ff50 	bl	8002234 <sec2str>
 8002394:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f7fd ff1a 	bl	80001d0 <strlen>
 800239c:	4603      	mov	r3, r0
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	4a1e      	ldr	r2, [pc, #120]	; (8002420 <Report+0xb8>)
 80023a6:	6810      	ldr	r0, [r2, #0]
 80023a8:	6018      	str	r0, [r3, #0]
		dl += 3;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3303      	adds	r3, #3
 80023ae:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 80023b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023b4:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	18d0      	adds	r0, r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	1ad1      	subs	r1, r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c6:	f00a fd75 	bl	800ceb4 <vsniprintf>

	uartRdy = false;
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <Report+0xbc>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 80023d0:	4b15      	ldr	r3, [pc, #84]	; (8002428 <Report+0xc0>)
 80023d2:	681c      	ldr	r4, [r3, #0]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f7fd fefb 	bl	80001d0 <strlen>
 80023da:	4603      	mov	r3, r0
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	68f9      	ldr	r1, [r7, #12]
 80023e2:	4620      	mov	r0, r4
 80023e4:	f005 ff7c 	bl	80082e0 <HAL_UART_Transmit_DMA>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d006      	beq.n	80023fc <Report+0x94>
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <Report+0xc4>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <Report+0xc4>)
 80023fa:	701a      	strb	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 80023fc:	bf00      	nop
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <Report+0xbc>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	f083 0301 	eor.w	r3, r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f8      	bne.n	80023fe <Report+0x96>

	va_end(args);

	return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002418:	b003      	add	sp, #12
 800241a:	4770      	bx	lr
 800241c:	20000360 	.word	0x20000360
 8002420:	0800d864 	.word	0x0800d864
 8002424:	20000060 	.word	0x20000060
 8002428:	20000074 	.word	0x20000074
 800242c:	2000034c 	.word	0x2000034c

08002430 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b090      	sub	sp, #64	; 0x40
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4aa3      	ldr	r2, [pc, #652]	; (80026cc <HAL_UART_RxCpltCallback+0x29c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	f040 829f 	bne.w	8002982 <HAL_UART_RxCpltCallback+0x552>

		rxBuf[ruk++] = (char)rxByte;
 8002444:	4ba2      	ldr	r3, [pc, #648]	; (80026d0 <HAL_UART_RxCpltCallback+0x2a0>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	b291      	uxth	r1, r2
 800244c:	4aa0      	ldr	r2, [pc, #640]	; (80026d0 <HAL_UART_RxCpltCallback+0x2a0>)
 800244e:	8011      	strh	r1, [r2, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4ba0      	ldr	r3, [pc, #640]	; (80026d4 <HAL_UART_RxCpltCallback+0x2a4>)
 8002454:	7819      	ldrb	r1, [r3, #0]
 8002456:	4ba0      	ldr	r3, [pc, #640]	; (80026d8 <HAL_UART_RxCpltCallback+0x2a8>)
 8002458:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 800245a:	4b9e      	ldr	r3, [pc, #632]	; (80026d4 <HAL_UART_RxCpltCallback+0x2a4>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b0a      	cmp	r3, #10
 8002460:	f040 828a 	bne.w	8002978 <HAL_UART_RxCpltCallback+0x548>
			rxBuf[--ruk] = '\0';
 8002464:	4b9a      	ldr	r3, [pc, #616]	; (80026d0 <HAL_UART_RxCpltCallback+0x2a0>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	4b98      	ldr	r3, [pc, #608]	; (80026d0 <HAL_UART_RxCpltCallback+0x2a0>)
 800246e:	801a      	strh	r2, [r3, #0]
 8002470:	4b97      	ldr	r3, [pc, #604]	; (80026d0 <HAL_UART_RxCpltCallback+0x2a0>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	4b98      	ldr	r3, [pc, #608]	; (80026d8 <HAL_UART_RxCpltCallback+0x2a8>)
 8002478:	2100      	movs	r1, #0
 800247a:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 800247c:	2300      	movs	r3, #0
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 8002486:	4b95      	ldr	r3, [pc, #596]	; (80026dc <HAL_UART_RxCpltCallback+0x2ac>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 800248c:	2300      	movs	r3, #0
 800248e:	83bb      	strh	r3, [r7, #28]
			if (strlen(rxBuf) >= 4) {
 8002490:	4891      	ldr	r0, [pc, #580]	; (80026d8 <HAL_UART_RxCpltCallback+0x2a8>)
 8002492:	f7fd fe9d 	bl	80001d0 <strlen>
 8002496:	4603      	mov	r3, r0
 8002498:	2b03      	cmp	r3, #3
 800249a:	f240 8267 	bls.w	800296c <HAL_UART_RxCpltCallback+0x53c>
				int8_t idx = -1;
 800249e:	23ff      	movs	r3, #255	; 0xff
 80024a0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80024aa:	e018      	b.n	80024de <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 80024ac:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 80024b0:	4a8b      	ldr	r2, [pc, #556]	; (80026e0 <HAL_UART_RxCpltCallback+0x2b0>)
 80024b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b6:	4619      	mov	r1, r3
 80024b8:	4887      	ldr	r0, [pc, #540]	; (80026d8 <HAL_UART_RxCpltCallback+0x2a8>)
 80024ba:	f00a fc2c 	bl	800cd16 <strstr>
 80024be:	63f8      	str	r0, [r7, #60]	; 0x3c
 80024c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <HAL_UART_RxCpltCallback+0xa0>
														  //"write:0x0:0xf0:256"
														  //"erase:"
														  //"check:"
														  //"area:"
														  //"save:"
						idx = i;
 80024c6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80024ca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 80024ce:	e00a      	b.n	80024e6 <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 80024d0:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	3301      	adds	r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80024de:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 80024e2:	2b0a      	cmp	r3, #10
 80024e4:	dde2      	ble.n	80024ac <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 80024e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e8:	4a7b      	ldr	r2, [pc, #492]	; (80026d8 <HAL_UART_RxCpltCallback+0x2a8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	f040 823e 	bne.w	800296c <HAL_UART_RxCpltCallback+0x53c>
 80024f0:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f8:	f000 8238 	beq.w	800296c <HAL_UART_RxCpltCallback+0x53c>
					nandLen = MAX_LEN_DATA;//256;
 80024fc:	4b79      	ldr	r3, [pc, #484]	; (80026e4 <HAL_UART_RxCpltCallback+0x2b4>)
 80024fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002502:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 8002504:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002508:	4a75      	ldr	r2, [pc, #468]	; (80026e0 <HAL_UART_RxCpltCallback+0x2b0>)
 800250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fd fe5e 	bl	80001d0 <strlen>
 8002514:	4602      	mov	r2, r0
 8002516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002518:	4413      	add	r3, r2
 800251a:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 800251c:	2300      	movs	r3, #0
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
 8002520:	2300      	movs	r3, #0
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
 8002524:	2300      	movs	r3, #0
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 8002528:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 800252c:	2b0a      	cmp	r3, #10
 800252e:	f200 81d9 	bhi.w	80028e4 <HAL_UART_RxCpltCallback+0x4b4>
 8002532:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <HAL_UART_RxCpltCallback+0x108>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	08002571 	.word	0x08002571
 800253c:	0800257d 	.word	0x0800257d
 8002540:	080025ef 	.word	0x080025ef
 8002544:	0800266f 	.word	0x0800266f
 8002548:	0800269f 	.word	0x0800269f
 800254c:	08002817 	.word	0x08002817
 8002550:	08002851 	.word	0x08002851
 8002554:	0800269f 	.word	0x0800269f
 8002558:	0800269f 	.word	0x0800269f
 800255c:	08002887 	.word	0x08002887
 8002560:	08002565 	.word	0x08002565
						case cmdHelp:
							qcmd.cmd = cmdHelp;
 8002564:	230a      	movs	r3, #10
 8002566:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 8002568:	4b5c      	ldr	r3, [pc, #368]	; (80026dc <HAL_UART_RxCpltCallback+0x2ac>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
						break;
 800256e:	e1b9      	b.n	80028e4 <HAL_UART_RxCpltCallback+0x4b4>
						case cmdRestart:
							qcmd.cmd = cmdRestart;
 8002570:	2300      	movs	r3, #0
 8002572:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 8002574:	4b59      	ldr	r3, [pc, #356]	; (80026dc <HAL_UART_RxCpltCallback+0x2ac>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
						break;
 800257a:	e1b3      	b.n	80028e4 <HAL_UART_RxCpltCallback+0x4b4>
						case cmdEpoch:
							qcmd.cmd = cmdEpoch;
 800257c:	2301      	movs	r3, #1
 800257e:	773b      	strb	r3, [r7, #28]
							if (*uk == '?') {
 8002580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b3f      	cmp	r3, #63	; 0x3f
 8002586:	d105      	bne.n	8002594 <HAL_UART_RxCpltCallback+0x164>
								qcmd.attr = 1;
 8002588:	2301      	movs	r3, #1
 800258a:	777b      	strb	r3, [r7, #29]
								cmd_flag = 1;
 800258c:	4b53      	ldr	r3, [pc, #332]	; (80026dc <HAL_UART_RxCpltCallback+0x2ac>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
									}
									epoch = (uint32_t)atol(uk);
									cmd_flag = 1;
								}
							}
						break;
 8002592:	e1a7      	b.n	80028e4 <HAL_UART_RxCpltCallback+0x4b4>
								if (strlen(uk) < 10) {
 8002594:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002596:	f7fd fe1b 	bl	80001d0 <strlen>
 800259a:	4603      	mov	r3, r0
 800259c:	2b09      	cmp	r3, #9
 800259e:	d803      	bhi.n	80025a8 <HAL_UART_RxCpltCallback+0x178>
									setDate = false;
 80025a0:	4b51      	ldr	r3, [pc, #324]	; (80026e8 <HAL_UART_RxCpltCallback+0x2b8>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
						break;
 80025a6:	e19d      	b.n	80028e4 <HAL_UART_RxCpltCallback+0x4b4>
									uki = strchr(uk, ':');
 80025a8:	213a      	movs	r1, #58	; 0x3a
 80025aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025ac:	f00a fb8b 	bl	800ccc6 <strchr>
 80025b0:	6378      	str	r0, [r7, #52]	; 0x34
									if (uki) {
 80025b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00c      	beq.n	80025d2 <HAL_UART_RxCpltCallback+0x1a2>
										tZone = (uint8_t)atol(uki + 1);
 80025b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ba:	3301      	adds	r3, #1
 80025bc:	4618      	mov	r0, r3
 80025be:	f00a f8e1 	bl	800c784 <atol>
 80025c2:	4603      	mov	r3, r0
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b49      	ldr	r3, [pc, #292]	; (80026ec <HAL_UART_RxCpltCallback+0x2bc>)
 80025c8:	701a      	strb	r2, [r3, #0]
										*uki = '\0';
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	e002      	b.n	80025d8 <HAL_UART_RxCpltCallback+0x1a8>
										tZone = 0;
 80025d2:	4b46      	ldr	r3, [pc, #280]	; (80026ec <HAL_UART_RxCpltCallback+0x2bc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
									epoch = (uint32_t)atol(uk);
 80025d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025da:	f00a f8d3 	bl	800c784 <atol>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_UART_RxCpltCallback+0x2c0>)
 80025e4:	601a      	str	r2, [r3, #0]
									cmd_flag = 1;
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_UART_RxCpltCallback+0x2ac>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
						break;
 80025ec:	e17a      	b.n	80028e4 <HAL_UART_RxCpltCallback+0x4b4>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 80025ee:	213a      	movs	r1, #58	; 0x3a
 80025f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025f2:	f00a fb68 	bl	800ccc6 <strchr>
 80025f6:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_UART_RxCpltCallback+0x1e6>
								nandLen = atol(uki + 1);
 80025fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002600:	3301      	adds	r3, #1
 8002602:	4618      	mov	r0, r3
 8002604:	f00a f8be 	bl	800c784 <atol>
 8002608:	4603      	mov	r3, r0
 800260a:	b29a      	uxth	r2, r3
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <HAL_UART_RxCpltCallback+0x2b4>)
 800260e:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8002616:	4937      	ldr	r1, [pc, #220]	; (80026f4 <HAL_UART_RxCpltCallback+0x2c4>)
 8002618:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800261a:	f00a fb7c 	bl	800cd16 <strstr>
 800261e:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00f      	beq.n	8002646 <HAL_UART_RxCpltCallback+0x216>
								uki += 2;
 8002626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002628:	3302      	adds	r3, #2
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 800262c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800262e:	f7fd fdcf 	bl	80001d0 <strlen>
 8002632:	4603      	mov	r3, r0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	4619      	mov	r1, r3
 8002638:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800263a:	f7ff fc59 	bl	8001ef0 <hex2bin>
 800263e:	4603      	mov	r3, r0
 8002640:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	e006      	b.n	8002654 <HAL_UART_RxCpltCallback+0x224>
							} else {
								nandAdr = atol(uk);
 8002646:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002648:	f00a f89c 	bl	800c784 <atol>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002652:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 8002654:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b28      	ldr	r3, [pc, #160]	; (80026fc <HAL_UART_RxCpltCallback+0x2cc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4413      	add	r3, r2
 800265e:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002660:	6013      	str	r3, [r2, #0]
							check = true;
 8002662:	2301      	movs	r3, #1
 8002664:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							qcmd.cmd = cmdRead;
 8002668:	2302      	movs	r3, #2
 800266a:	773b      	strb	r3, [r7, #28]
						break;
 800266c:	e13a      	b.n	80028e4 <HAL_UART_RxCpltCallback+0x4b4>
						case cmdNext://"next";
							if (nandAdr < devAdr) nandAdr = devAdr;
 800266e:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_UART_RxCpltCallback+0x2cc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d203      	bcs.n	8002682 <HAL_UART_RxCpltCallback+0x252>
 800267a:	4b20      	ldr	r3, [pc, #128]	; (80026fc <HAL_UART_RxCpltCallback+0x2cc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002680:	6013      	str	r3, [r2, #0]
							nandAdr += nandLen;
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <HAL_UART_RxCpltCallback+0x2b4>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_UART_RxCpltCallback+0x2c8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4413      	add	r3, r2
 800268e:	4a1a      	ldr	r2, [pc, #104]	; (80026f8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002690:	6013      	str	r3, [r2, #0]
							check = true;
 8002692:	2301      	movs	r3, #1
 8002694:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							qcmd.cmd = cmdNext;
 8002698:	2303      	movs	r3, #3
 800269a:	773b      	strb	r3, [r7, #28]
						break;
 800269c:	e122      	b.n	80028e4 <HAL_UART_RxCpltCallback+0x4b4>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						case cmdArea://"area:'0x0:0x55:256'" //adr:byte:len
						case cmdSave://"save:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 80026a4:	4913      	ldr	r1, [pc, #76]	; (80026f4 <HAL_UART_RxCpltCallback+0x2c4>)
 80026a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80026a8:	f00a fb35 	bl	800cd16 <strstr>
 80026ac:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d025      	beq.n	8002700 <HAL_UART_RxCpltCallback+0x2d0>
								if (uki == uk) {
 80026b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d123      	bne.n	8002704 <HAL_UART_RxCpltCallback+0x2d4>
									uki += 2;
 80026bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026be:	3302      	adds	r3, #2
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80026c8:	e01c      	b.n	8002704 <HAL_UART_RxCpltCallback+0x2d4>
 80026ca:	bf00      	nop
 80026cc:	40004800 	.word	0x40004800
 80026d0:	20001362 	.word	0x20001362
 80026d4:	20001360 	.word	0x20001360
 80026d8:	20000b60 	.word	0x20000b60
 80026dc:	2000034d 	.word	0x2000034d
 80026e0:	20000008 	.word	0x20000008
 80026e4:	20001370 	.word	0x20001370
 80026e8:	20001364 	.word	0x20001364
 80026ec:	20001365 	.word	0x20001365
 80026f0:	20000064 	.word	0x20000064
 80026f4:	0800d868 	.word	0x0800d868
 80026f8:	2000136c 	.word	0x2000136c
 80026fc:	20001368 	.word	0x20001368
								}
							} else uki = uk;
 8002700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002702:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 8002704:	213a      	movs	r1, #58	; 0x3a
 8002706:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002708:	f00a fadd 	bl	800ccc6 <strchr>
 800270c:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80e4 	beq.w	80028de <HAL_UART_RxCpltCallback+0x4ae>
								ukb = uke + 1;
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	3301      	adds	r3, #1
 800271a:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	2210      	movs	r2, #16
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f00a f927 	bl	800c978 <memset>
								memcpy(tmp, uki, uke - uki);
 800272a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800272c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	461a      	mov	r2, r3
 8002732:	f107 030c 	add.w	r3, r7, #12
 8002736:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002738:	4618      	mov	r0, r3
 800273a:	f00a f90f 	bl	800c95c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 800273e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002742:	2b00      	cmp	r3, #0
 8002744:	d010      	beq.n	8002768 <HAL_UART_RxCpltCallback+0x338>
 8002746:	f107 030c 	add.w	r3, r7, #12
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd fd40 	bl	80001d0 <strlen>
 8002750:	4603      	mov	r3, r0
 8002752:	b2da      	uxtb	r2, r3
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fbc8 	bl	8001ef0 <hex2bin>
 8002760:	4603      	mov	r3, r0
 8002762:	4a8a      	ldr	r2, [pc, #552]	; (800298c <HAL_UART_RxCpltCallback+0x55c>)
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e008      	b.n	800277a <HAL_UART_RxCpltCallback+0x34a>
								    else nandAdr = atol(tmp);
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	4618      	mov	r0, r3
 800276e:	f00a f809 	bl	800c784 <atol>
 8002772:	4603      	mov	r3, r0
 8002774:	461a      	mov	r2, r3
 8002776:	4b85      	ldr	r3, [pc, #532]	; (800298c <HAL_UART_RxCpltCallback+0x55c>)
 8002778:	601a      	str	r2, [r3, #0]
								uki = ukb;
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 800277e:	213a      	movs	r1, #58	; 0x3a
 8002780:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002782:	f00a faa0 	bl	800ccc6 <strchr>
 8002786:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_UART_RxCpltCallback+0x376>
									nandLen = atol(uke + 1);
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	3301      	adds	r3, #1
 8002792:	4618      	mov	r0, r3
 8002794:	f009 fff6 	bl	800c784 <atol>
 8002798:	4603      	mov	r3, r0
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b7c      	ldr	r3, [pc, #496]	; (8002990 <HAL_UART_RxCpltCallback+0x560>)
 800279e:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 80027a6:	497b      	ldr	r1, [pc, #492]	; (8002994 <HAL_UART_RxCpltCallback+0x564>)
 80027a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027aa:	f00a fab4 	bl	800cd16 <strstr>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d006      	beq.n	80027c2 <HAL_UART_RxCpltCallback+0x392>
									ukb += 2;
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	3302      	adds	r3, #2
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80027c0:	e002      	b.n	80027c8 <HAL_UART_RxCpltCallback+0x398>
								} else hex = false;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 80027c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <HAL_UART_RxCpltCallback+0x3bc>
 80027d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027d2:	f7fd fcfd 	bl	80001d0 <strlen>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	4619      	mov	r1, r3
 80027dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027de:	f7ff fb87 	bl	8001ef0 <hex2bin>
 80027e2:	4603      	mov	r3, r0
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <HAL_UART_RxCpltCallback+0x568>)
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	e006      	b.n	80027fa <HAL_UART_RxCpltCallback+0x3ca>
								    else nandByte = (uint8_t)atol(ukb);
 80027ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ee:	f009 ffc9 	bl	800c784 <atol>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4b68      	ldr	r3, [pc, #416]	; (8002998 <HAL_UART_RxCpltCallback+0x568>)
 80027f8:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 80027fa:	4b64      	ldr	r3, [pc, #400]	; (800298c <HAL_UART_RxCpltCallback+0x55c>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b67      	ldr	r3, [pc, #412]	; (800299c <HAL_UART_RxCpltCallback+0x56c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	4a61      	ldr	r2, [pc, #388]	; (800298c <HAL_UART_RxCpltCallback+0x55c>)
 8002806:	6013      	str	r3, [r2, #0]
								check = true;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								qcmd.cmd = idx;
 800280e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002812:	773b      	strb	r3, [r7, #28]
							}
						}
						break;
 8002814:	e063      	b.n	80028de <HAL_UART_RxCpltCallback+0x4ae>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 8002816:	4962      	ldr	r1, [pc, #392]	; (80029a0 <HAL_UART_RxCpltCallback+0x570>)
 8002818:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800281a:	f00a fa7c 	bl	800cd16 <strstr>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_UART_RxCpltCallback+0x3fa>
								qcmd.attr = 1;
 8002824:	2301      	movs	r3, #1
 8002826:	777b      	strb	r3, [r7, #29]
 8002828:	e00c      	b.n	8002844 <HAL_UART_RxCpltCallback+0x414>
							} else {
								uint32_t blk = atol(uk);
 800282a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800282c:	f009 ffaa 	bl	800c784 <atol>
 8002830:	4603      	mov	r3, r0
 8002832:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 8002834:	4b5b      	ldr	r3, [pc, #364]	; (80029a4 <HAL_UART_RxCpltCallback+0x574>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	6a3a      	ldr	r2, [r7, #32]
 800283a:	429a      	cmp	r2, r3
 800283c:	d202      	bcs.n	8002844 <HAL_UART_RxCpltCallback+0x414>
 800283e:	4a5a      	ldr	r2, [pc, #360]	; (80029a8 <HAL_UART_RxCpltCallback+0x578>)
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	6013      	str	r3, [r2, #0]
							}
							qcmd.cmd = cmdErase;
 8002844:	2305      	movs	r3, #5
 8002846:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 8002848:	4b58      	ldr	r3, [pc, #352]	; (80029ac <HAL_UART_RxCpltCallback+0x57c>)
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
						break;
 800284e:	e049      	b.n	80028e4 <HAL_UART_RxCpltCallback+0x4b4>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 8002850:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002852:	f009 ff97 	bl	800c784 <atol>
 8002856:	4603      	mov	r3, r0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < ((chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr)) {//(128K / 2K) * 1024 = 65536
 800285a:	4b52      	ldr	r3, [pc, #328]	; (80029a4 <HAL_UART_RxCpltCallback+0x574>)
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <HAL_UART_RxCpltCallback+0x574>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	4a4f      	ldr	r2, [pc, #316]	; (80029a4 <HAL_UART_RxCpltCallback+0x574>)
 8002868:	68d2      	ldr	r2, [r2, #12]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	429a      	cmp	r2, r3
 8002872:	d236      	bcs.n	80028e2 <HAL_UART_RxCpltCallback+0x4b2>
								nandPage = page;
 8002874:	4a4e      	ldr	r2, [pc, #312]	; (80029b0 <HAL_UART_RxCpltCallback+0x580>)
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	6013      	str	r3, [r2, #0]
								qcmd.cmd = cmdCheck;
 800287a:	2306      	movs	r3, #6
 800287c:	773b      	strb	r3, [r7, #28]
								cmd_flag = 1;
 800287e:	4b4b      	ldr	r3, [pc, #300]	; (80029ac <HAL_UART_RxCpltCallback+0x57c>)
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8002884:	e02d      	b.n	80028e2 <HAL_UART_RxCpltCallback+0x4b2>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 8002886:	2303      	movs	r3, #3
 8002888:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							if (strstr(uk, "off")) {
 800288c:	4949      	ldr	r1, [pc, #292]	; (80029b4 <HAL_UART_RxCpltCallback+0x584>)
 800288e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002890:	f00a fa41 	bl	800cd16 <strstr>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_UART_RxCpltCallback+0x472>
								lg = logOff;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80028a0:	e014      	b.n	80028cc <HAL_UART_RxCpltCallback+0x49c>
							} else if (strstr(uk, "on")) {
 80028a2:	4945      	ldr	r1, [pc, #276]	; (80029b8 <HAL_UART_RxCpltCallback+0x588>)
 80028a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028a6:	f00a fa36 	bl	800cd16 <strstr>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_UART_RxCpltCallback+0x488>
								lg = logOn;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80028b6:	e009      	b.n	80028cc <HAL_UART_RxCpltCallback+0x49c>
							} else if (strstr(uk, "dump")) {
 80028b8:	4940      	ldr	r1, [pc, #256]	; (80029bc <HAL_UART_RxCpltCallback+0x58c>)
 80028ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028bc:	f00a fa2b 	bl	800cd16 <strstr>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_UART_RxCpltCallback+0x49c>
								lg = logDump;
 80028c6:	2302      	movs	r3, #2
 80028c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							}
							qcmd.cmd = cmdLog;
 80028cc:	2309      	movs	r3, #9
 80028ce:	773b      	strb	r3, [r7, #28]
							qcmd.attr = lg;
 80028d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80028d4:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 80028d6:	4b35      	ldr	r3, [pc, #212]	; (80029ac <HAL_UART_RxCpltCallback+0x57c>)
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
						}
						break;
 80028dc:	e002      	b.n	80028e4 <HAL_UART_RxCpltCallback+0x4b4>
						break;
 80028de:	bf00      	nop
 80028e0:	e000      	b.n	80028e4 <HAL_UART_RxCpltCallback+0x4b4>
						break;
 80028e2:	bf00      	nop
					}
					if (check) {
 80028e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d025      	beq.n	8002938 <HAL_UART_RxCpltCallback+0x508>
						if ((nandAdr + nandLen) >= ((chipConf.BlockSize * chipConf.BlockNbr) + devAdr)) {
 80028ec:	4b28      	ldr	r3, [pc, #160]	; (8002990 <HAL_UART_RxCpltCallback+0x560>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b26      	ldr	r3, [pc, #152]	; (800298c <HAL_UART_RxCpltCallback+0x55c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	441a      	add	r2, r3
 80028f8:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <HAL_UART_RxCpltCallback+0x574>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4929      	ldr	r1, [pc, #164]	; (80029a4 <HAL_UART_RxCpltCallback+0x574>)
 80028fe:	68c9      	ldr	r1, [r1, #12]
 8002900:	fb03 f101 	mul.w	r1, r3, r1
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_UART_RxCpltCallback+0x56c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	440b      	add	r3, r1
 800290a:	429a      	cmp	r2, r3
 800290c:	d311      	bcc.n	8002932 <HAL_UART_RxCpltCallback+0x502>
							nandLen = (chipConf.BlockSize * chipConf.BlockNbr) - nandAdr - 1;
 800290e:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_UART_RxCpltCallback+0x574>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <HAL_UART_RxCpltCallback+0x574>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	b29b      	uxth	r3, r3
 800291a:	fb12 f303 	smulbb	r3, r2, r3
 800291e:	b29a      	uxth	r2, r3
 8002920:	4b1a      	ldr	r3, [pc, #104]	; (800298c <HAL_UART_RxCpltCallback+0x55c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_UART_RxCpltCallback+0x560>)
 8002930:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <HAL_UART_RxCpltCallback+0x57c>)
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
					}
					//
					if (cmd_flag) {
 8002938:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <HAL_UART_RxCpltCallback+0x57c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d015      	beq.n	800296c <HAL_UART_RxCpltCallback+0x53c>
						if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8002940:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <HAL_UART_RxCpltCallback+0x590>)
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	f107 011c 	add.w	r1, r7, #28
 8002948:	2300      	movs	r3, #0
 800294a:	2205      	movs	r2, #5
 800294c:	f007 f81a 	bl	8009984 <osMessageQueuePut>
 8002950:	4603      	mov	r3, r0
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <HAL_UART_RxCpltCallback+0x594>)
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_UART_RxCpltCallback+0x594>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <HAL_UART_RxCpltCallback+0x53c>
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_UART_RxCpltCallback+0x598>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002966:	b2da      	uxtb	r2, r3
 8002968:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <HAL_UART_RxCpltCallback+0x598>)
 800296a:	701a      	strb	r2, [r3, #0]
					}
					//
				}
			}
			ruk = 0;
 800296c:	4b17      	ldr	r3, [pc, #92]	; (80029cc <HAL_UART_RxCpltCallback+0x59c>)
 800296e:	2200      	movs	r2, #0
 8002970:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <HAL_UART_RxCpltCallback+0x5a0>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8002978:	2201      	movs	r2, #1
 800297a:	4916      	ldr	r1, [pc, #88]	; (80029d4 <HAL_UART_RxCpltCallback+0x5a4>)
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f005 fc7e 	bl	800827e <HAL_UART_Receive_IT>
	}
}
 8002982:	bf00      	nop
 8002984:	3740      	adds	r7, #64	; 0x40
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	2000136c 	.word	0x2000136c
 8002990:	20001370 	.word	0x20001370
 8002994:	0800d868 	.word	0x0800d868
 8002998:	20000084 	.word	0x20000084
 800299c:	20001368 	.word	0x20001368
 80029a0:	0800d86c 	.word	0x0800d86c
 80029a4:	20001388 	.word	0x20001388
 80029a8:	20001374 	.word	0x20001374
 80029ac:	2000034d 	.word	0x2000034d
 80029b0:	20001378 	.word	0x20001378
 80029b4:	0800d870 	.word	0x0800d870
 80029b8:	0800d874 	.word	0x0800d874
 80029bc:	0800d878 	.word	0x0800d878
 80029c0:	20000344 	.word	0x20000344
 80029c4:	200013a8 	.word	0x200013a8
 80029c8:	2000034c 	.word	0x2000034c
 80029cc:	20001362 	.word	0x20001362
 80029d0:	20000b60 	.word	0x20000b60
 80029d4:	20001360 	.word	0x20001360

080029d8 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a05      	ldr	r2, [pc, #20]	; (80029fc <HAL_UART_TxCpltCallback+0x24>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d102      	bne.n	80029f0 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_UART_TxCpltCallback+0x28>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
	}
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40004800 	.word	0x40004800
 8002a00:	20000060 	.word	0x20000060

08002a04 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <HAL_SPI_TxCpltCallback+0x24>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d102      	bne.n	8002a1c <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_SPI_TxCpltCallback+0x28>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
	}
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40013000 	.word	0x40013000
 8002a2c:	20000061 	.word	0x20000061

08002a30 <nand_PageToBlock>:
	}
}
*/
//-------------------------------------------------------------------------------------------
uint32_t nand_PageToBlock(const uint32_t page)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
    return (page * chipConf.PageSize) / chipConf.BlockSize;
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <nand_PageToBlock+0x28>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	fb03 f202 	mul.w	r2, r3, r2
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <nand_PageToBlock+0x28>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20001388 	.word	0x20001388

08002a5c <nand_BlockToPage>:
//-------------------------------------------------------------------------------------------
uint32_t nand_BlockToPage(const uint32_t blk)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <nand_BlockToPage+0x28>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	fb03 f202 	mul.w	r2, r3, r2
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <nand_BlockToPage+0x28>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20001388 	.word	0x20001388

08002a88 <showBuf>:
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08e      	sub	sp, #56	; 0x38
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60ba      	str	r2, [r7, #8]
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	4603      	mov	r3, r0
 8002a94:	73fb      	strb	r3, [r7, #15]
 8002a96:	460b      	mov	r3, r1
 8002a98:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (type == 2) {
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d10e      	bne.n	8002aca <showBuf+0x42>
		if (rd) {
 8002aac:	7bbb      	ldrb	r3, [r7, #14]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <showBuf+0x3e>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 8002ab2:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <showBuf+0x154>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
			max_ind = chipConf.PageSize;
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <showBuf+0x154>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac4:	e001      	b.n	8002aca <showBuf+0x42>
		} else ind = max_ind;
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 8002aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d271      	bcs.n	8002bb6 <showBuf+0x12e>
		bool done = false;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	623b      	str	r3, [r7, #32]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae4:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	fbb3 f1f2 	udiv	r1, r3, r2
 8002aee:	fb01 f202 	mul.w	r2, r1, r2
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <showBuf+0x76>
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	3301      	adds	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <showBuf+0x158>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
		while (!done) {
 8002b04:	e046      	b.n	8002b94 <showBuf+0x10c>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 8002b06:	4836      	ldr	r0, [pc, #216]	; (8002be0 <showBuf+0x158>)
 8002b08:	f7fd fb62 	bl	80001d0 <strlen>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4a34      	ldr	r2, [pc, #208]	; (8002be0 <showBuf+0x158>)
 8002b10:	4413      	add	r3, r2
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	4933      	ldr	r1, [pc, #204]	; (8002be4 <showBuf+0x15c>)
 8002b16:	4618      	mov	r0, r3
 8002b18:	f00a f8a6 	bl	800cc68 <siprintf>
			for (int i = 0; i < step; i++) {
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	e01d      	b.n	8002b5e <showBuf+0xd6>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 8002b22:	482f      	ldr	r0, [pc, #188]	; (8002be0 <showBuf+0x158>)
 8002b24:	f7fd fb54 	bl	80001d0 <strlen>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4a2d      	ldr	r2, [pc, #180]	; (8002be0 <showBuf+0x158>)
 8002b2c:	1898      	adds	r0, r3, r2
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b32:	4413      	add	r3, r2
 8002b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	492a      	ldr	r1, [pc, #168]	; (8002be8 <showBuf+0x160>)
 8002b3e:	f00a f893 	bl	800cc68 <siprintf>
				ix++;
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	3301      	adds	r3, #1
 8002b46:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 8002b48:	6a3a      	ldr	r2, [r7, #32]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d103      	bne.n	8002b58 <showBuf+0xd0>
					done = true;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 8002b56:	e006      	b.n	8002b66 <showBuf+0xde>
			for (int i = 0; i < step; i++) {
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	dbdd      	blt.n	8002b22 <showBuf+0x9a>
				}
			}
			strcat(stx, eol);
 8002b66:	4b21      	ldr	r3, [pc, #132]	; (8002bec <showBuf+0x164>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	481c      	ldr	r0, [pc, #112]	; (8002be0 <showBuf+0x158>)
 8002b6e:	f00a f89b 	bl	800cca8 <strcat>
			adr += step;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4413      	add	r3, r2
 8002b78:	60bb      	str	r3, [r7, #8]
			ind += step;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7e:	4413      	add	r3, r2
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <showBuf+0x10c>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 8002b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b98:	f083 0301 	eor.w	r3, r3, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1b1      	bne.n	8002b06 <showBuf+0x7e>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 8002ba2:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <showBuf+0x168>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d014      	beq.n	8002bd4 <showBuf+0x14c>
 8002baa:	4a0d      	ldr	r2, [pc, #52]	; (8002be0 <showBuf+0x158>)
 8002bac:	4911      	ldr	r1, [pc, #68]	; (8002bf4 <showBuf+0x16c>)
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7ff fbda 	bl	8002368 <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 8002bb4:	e00e      	b.n	8002bd4 <showBuf+0x14c>
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <showBuf+0x168>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <showBuf+0x14c>
 8002bbe:	7bbb      	ldrb	r3, [r7, #14]
 8002bc0:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <showBuf+0x164>)
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	9201      	str	r2, [sp, #4]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bcc:	490a      	ldr	r1, [pc, #40]	; (8002bf8 <showBuf+0x170>)
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7ff fbca 	bl	8002368 <Report>
}
 8002bd4:	bf00      	nop
 8002bd6:	3730      	adds	r7, #48	; 0x30
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20001388 	.word	0x20001388
 8002be0:	200013ac 	.word	0x200013ac
 8002be4:	0800d880 	.word	0x0800d880
 8002be8:	0800d888 	.word	0x0800d888
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	20000068 	.word	0x20000068
 8002bf4:	0800d890 	.word	0x0800d890
 8002bf8:	0800d894 	.word	0x0800d894
 8002bfc:	00000000 	.word	0x00000000

08002c00 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8002c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c02:	f2ad 4dac 	subw	sp, sp, #1196	; 0x4ac
 8002c06:	af06      	add	r7, sp, #24
 8002c08:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002c0c:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8002c10:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(250);
 8002c12:	20fa      	movs	r0, #250	; 0xfa
 8002c14:	f001 ff12 	bl	8004a3c <HAL_Delay>
	if (dbg != logOff) {
 8002c18:	4bb5      	ldr	r3, [pc, #724]	; (8002ef0 <defThread+0x2f0>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d018      	beq.n	8002c52 <defThread+0x52>
		Report(0, "%s", eol);
 8002c20:	4bb4      	ldr	r3, [pc, #720]	; (8002ef4 <defThread+0x2f4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	49b4      	ldr	r1, [pc, #720]	; (8002ef8 <defThread+0x2f8>)
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7ff fb9d 	bl	8002368 <Report>
		Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8002c2e:	4bb3      	ldr	r3, [pc, #716]	; (8002efc <defThread+0x2fc>)
 8002c30:	681c      	ldr	r4, [r3, #0]
 8002c32:	f009 fc77 	bl	800c524 <xPortGetFreeHeapSize>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4bae      	ldr	r3, [pc, #696]	; (8002ef4 <defThread+0x2f4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	9302      	str	r3, [sp, #8]
 8002c3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	9200      	str	r2, [sp, #0]
 8002c46:	4bae      	ldr	r3, [pc, #696]	; (8002f00 <defThread+0x300>)
 8002c48:	4622      	mov	r2, r4
 8002c4a:	49ae      	ldr	r1, [pc, #696]	; (8002f04 <defThread+0x304>)
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f7ff fb8b 	bl	8002368 <Report>
	}

	uint8_t next_block_erase = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 348f 	strb.w	r3, [r7, #1167]	; 0x48f
	uint32_t iBlk, stik;
	NAND_AddressTypeDef clr = {
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8a7 344c 	strh.w	r3, [r7, #1100]	; 0x44c
		.Page = 0,
		.Plane = 1,
		.Block = 0
	};
	uint8_t nand_show = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 3483 	strb.w	r3, [r7, #1155]	; 0x483
	bool readed = false;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 3482 	strb.w	r3, [r7, #1154]	; 0x482
	char cid[32];
	if (nandState == HAL_NAND_STATE_READY) {
 8002c76:	4ba4      	ldr	r3, [pc, #656]	; (8002f08 <defThread+0x308>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d15d      	bne.n	8002d3a <defThread+0x13a>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8002c7e:	4ba3      	ldr	r3, [pc, #652]	; (8002f0c <defThread+0x30c>)
 8002c80:	785b      	ldrb	r3, [r3, #1]
 8002c82:	22f1      	movs	r2, #241	; 0xf1
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d108      	bne.n	8002c9a <defThread+0x9a>
 8002c88:	4ba1      	ldr	r3, [pc, #644]	; (8002f10 <defThread+0x310>)
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002c90:	2220      	movs	r2, #32
 8002c92:	4618      	mov	r0, r3
 8002c94:	f00a f82c 	bl	800ccf0 <strncpy>
 8002c98:	e006      	b.n	8002ca8 <defThread+0xa8>
		                               else strcpy(cid, "UNKNOWN");
 8002c9a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002c9e:	4a9d      	ldr	r2, [pc, #628]	; (8002f14 <defThread+0x314>)
 8002ca0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ca4:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8002ca8:	4b9b      	ldr	r3, [pc, #620]	; (8002f18 <defThread+0x318>)
 8002caa:	4a9c      	ldr	r2, [pc, #624]	; (8002f1c <defThread+0x31c>)
 8002cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cb0:	6018      	str	r0, [r3, #0]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	8019      	strh	r1, [r3, #0]
		uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8002cb6:	4b95      	ldr	r3, [pc, #596]	; (8002f0c <defThread+0x30c>)
 8002cb8:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 3481 	strb.w	r3, [r7, #1153]	; 0x481
 8002cc2:	e016      	b.n	8002cf2 <defThread+0xf2>
 8002cc4:	4894      	ldr	r0, [pc, #592]	; (8002f18 <defThread+0x318>)
 8002cc6:	f7fd fa83 	bl	80001d0 <strlen>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4a92      	ldr	r2, [pc, #584]	; (8002f18 <defThread+0x318>)
 8002cce:	1898      	adds	r0, r3, r2
 8002cd0:	f997 3481 	ldrsb.w	r3, [r7, #1153]	; 0x481
 8002cd4:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8002cd8:	4413      	add	r3, r2
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4990      	ldr	r1, [pc, #576]	; (8002f20 <defThread+0x320>)
 8002ce0:	f009 ffc2 	bl	800cc68 <siprintf>
 8002ce4:	f997 3481 	ldrsb.w	r3, [r7, #1153]	; 0x481
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f887 3481 	strb.w	r3, [r7, #1153]	; 0x481
 8002cf2:	f897 3481 	ldrb.w	r3, [r7, #1153]	; 0x481
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d9e4      	bls.n	8002cc4 <defThread+0xc4>
		sprintf(stx+strlen(stx),
 8002cfa:	4887      	ldr	r0, [pc, #540]	; (8002f18 <defThread+0x318>)
 8002cfc:	f7fd fa68 	bl	80001d0 <strlen>
 8002d00:	4603      	mov	r3, r0
 8002d02:	4a85      	ldr	r2, [pc, #532]	; (8002f18 <defThread+0x318>)
 8002d04:	1898      	adds	r0, r3, r2
				"\n\tMakerID=%02X\n\tDevice_Id=%02X '%s'\n\tThird_Id=%02X\n\tFourth_Id=%02X\n\tPlane_Id=%02X",
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002d06:	4b81      	ldr	r3, [pc, #516]	; (8002f0c <defThread+0x30c>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
		sprintf(stx+strlen(stx),
 8002d0a:	461c      	mov	r4, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002d0c:	4b7f      	ldr	r3, [pc, #508]	; (8002f0c <defThread+0x30c>)
 8002d0e:	785b      	ldrb	r3, [r3, #1]
		sprintf(stx+strlen(stx),
 8002d10:	461d      	mov	r5, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002d12:	4b7e      	ldr	r3, [pc, #504]	; (8002f0c <defThread+0x30c>)
 8002d14:	789b      	ldrb	r3, [r3, #2]
		sprintf(stx+strlen(stx),
 8002d16:	461a      	mov	r2, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002d18:	4b7c      	ldr	r3, [pc, #496]	; (8002f0c <defThread+0x30c>)
 8002d1a:	78db      	ldrb	r3, [r3, #3]
		sprintf(stx+strlen(stx),
 8002d1c:	4619      	mov	r1, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002d1e:	4b7b      	ldr	r3, [pc, #492]	; (8002f0c <defThread+0x30c>)
 8002d20:	791b      	ldrb	r3, [r3, #4]
		sprintf(stx+strlen(stx),
 8002d22:	9303      	str	r3, [sp, #12]
 8002d24:	9102      	str	r1, [sp, #8]
 8002d26:	9201      	str	r2, [sp, #4]
 8002d28:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	462b      	mov	r3, r5
 8002d30:	4622      	mov	r2, r4
 8002d32:	497c      	ldr	r1, [pc, #496]	; (8002f24 <defThread+0x324>)
 8002d34:	f009 ff98 	bl	800cc68 <siprintf>
 8002d38:	e00c      	b.n	8002d54 <defThread+0x154>
	} else {
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
					     nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8002d3a:	4b73      	ldr	r3, [pc, #460]	; (8002f08 <defThread+0x308>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 8002d42:	4a79      	ldr	r2, [pc, #484]	; (8002f28 <defThread+0x328>)
 8002d44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d48:	4b6f      	ldr	r3, [pc, #444]	; (8002f08 <defThread+0x308>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4977      	ldr	r1, [pc, #476]	; (8002f2c <defThread+0x32c>)
 8002d4e:	4872      	ldr	r0, [pc, #456]	; (8002f18 <defThread+0x318>)
 8002d50:	f009 ff8a 	bl	800cc68 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8002d54:	4b66      	ldr	r3, [pc, #408]	; (8002ef0 <defThread+0x2f0>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d006      	beq.n	8002d6a <defThread+0x16a>
 8002d5c:	4b65      	ldr	r3, [pc, #404]	; (8002ef4 <defThread+0x2f4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a6d      	ldr	r2, [pc, #436]	; (8002f18 <defThread+0x318>)
 8002d62:	4973      	ldr	r1, [pc, #460]	; (8002f30 <defThread+0x330>)
 8002d64:	2001      	movs	r0, #1
 8002d66:	f7ff faff 	bl	8002368 <Report>


	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8002d70:	4b70      	ldr	r3, [pc, #448]	; (8002f34 <defThread+0x334>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002d7c:	9200      	str	r2, [sp, #0]
 8002d7e:	22ef      	movs	r2, #239	; 0xef
 8002d80:	2100      	movs	r1, #0
 8002d82:	2000      	movs	r0, #0
 8002d84:	f001 f98b 	bl	800409e <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8002d88:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <defThread+0x334>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002d94:	b299      	uxth	r1, r3
 8002d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	23ef      	movs	r3, #239	; 0xef
 8002d9e:	22ef      	movs	r2, #239	; 0xef
 8002da0:	2000      	movs	r0, #0
 8002da2:	f001 f97c 	bl	800409e <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 8002da6:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8002daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dae:	4962      	ldr	r1, [pc, #392]	; (8002f38 <defThread+0x338>)
 8002db0:	4618      	mov	r0, r3
 8002db2:	f009 ff59 	bl	800cc68 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 8002db6:	4b61      	ldr	r3, [pc, #388]	; (8002f3c <defThread+0x33c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	23f0      	movs	r3, #240	; 0xf0
 8002dc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 fa73 	bl	80042b8 <mkLineCenter>
	sprintf(screen+strlen(screen),
 8002dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd f9fa 	bl	80001d0 <strlen>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002de2:	189c      	adds	r4, r3, r2
 8002de4:	4b56      	ldr	r3, [pc, #344]	; (8002f40 <defThread+0x340>)
 8002de6:	681d      	ldr	r5, [r3, #0]
 8002de8:	4b55      	ldr	r3, [pc, #340]	; (8002f40 <defThread+0x340>)
 8002dea:	685e      	ldr	r6, [r3, #4]
			"PageSize:%lu\nSpareAreaSize:%lu\nBlockSize:%lu KB\nBlockNbr:%lu\nPlaneNbr:%lu\nPlaneSize:%lu MB",
			chipConf.PageSize,
			chipConf.SpareAreaSize,
			chipConf.BlockSize / 1024,
 8002dec:	4b54      	ldr	r3, [pc, #336]	; (8002f40 <defThread+0x340>)
 8002dee:	689b      	ldr	r3, [r3, #8]
	sprintf(screen+strlen(screen),
 8002df0:	0a9b      	lsrs	r3, r3, #10
 8002df2:	4a53      	ldr	r2, [pc, #332]	; (8002f40 <defThread+0x340>)
 8002df4:	68d2      	ldr	r2, [r2, #12]
 8002df6:	4952      	ldr	r1, [pc, #328]	; (8002f40 <defThread+0x340>)
 8002df8:	6909      	ldr	r1, [r1, #16]
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			chipConf.PlaneSize / 1024 / 1024);
 8002dfa:	4851      	ldr	r0, [pc, #324]	; (8002f40 <defThread+0x340>)
 8002dfc:	6940      	ldr	r0, [r0, #20]
	sprintf(screen+strlen(screen),
 8002dfe:	0d00      	lsrs	r0, r0, #20
 8002e00:	9003      	str	r0, [sp, #12]
 8002e02:	9102      	str	r1, [sp, #8]
 8002e04:	9201      	str	r2, [sp, #4]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4633      	mov	r3, r6
 8002e0a:	462a      	mov	r2, r5
 8002e0c:	494d      	ldr	r1, [pc, #308]	; (8002f44 <defThread+0x344>)
 8002e0e:	4620      	mov	r0, r4
 8002e10:	f009 ff2a 	bl	800cc68 <siprintf>
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 8002e14:	4b4c      	ldr	r3, [pc, #304]	; (8002f48 <defThread+0x348>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00e      	beq.n	8002e3a <defThread+0x23a>
 8002e1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd f9d5 	bl	80001d0 <strlen>
 8002e26:	4602      	mov	r2, r0
 8002e28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e2c:	4413      	add	r3, r2
 8002e2e:	4a46      	ldr	r2, [pc, #280]	; (8002f48 <defThread+0x348>)
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	4946      	ldr	r1, [pc, #280]	; (8002f4c <defThread+0x34c>)
 8002e34:	4618      	mov	r0, r3
 8002e36:	f009 ff17 	bl	800cc68 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8002e3a:	4b40      	ldr	r3, [pc, #256]	; (8002f3c <defThread+0x33c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	785b      	ldrb	r3, [r3, #1]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd fc99 	bl	8000778 <__aeabi_i2d>
 8002e46:	4604      	mov	r4, r0
 8002e48:	460d      	mov	r5, r1
 8002e4a:	4b3c      	ldr	r3, [pc, #240]	; (8002f3c <defThread+0x33c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	785b      	ldrb	r3, [r3, #1]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd fc91 	bl	8000778 <__aeabi_i2d>
 8002e56:	a324      	add	r3, pc, #144	; (adr r3, 8002ee8 <defThread+0x2e8>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd fa10 	bl	8000280 <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4620      	mov	r0, r4
 8002e66:	4629      	mov	r1, r5
 8002e68:	f7fd fb3a 	bl	80004e0 <__adddf3>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	f7fd fcea 	bl	800084c <__aeabi_d2uiz>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	b298      	uxth	r0, r3
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <defThread+0x33c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a33      	ldr	r2, [pc, #204]	; (8002f50 <defThread+0x350>)
 8002e82:	8812      	ldrh	r2, [r2, #0]
 8002e84:	43d2      	mvns	r2, r2
 8002e86:	b292      	uxth	r2, r2
 8002e88:	4931      	ldr	r1, [pc, #196]	; (8002f50 <defThread+0x350>)
 8002e8a:	8809      	ldrh	r1, [r1, #0]
 8002e8c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002e90:	9102      	str	r1, [sp, #8]
 8002e92:	9201      	str	r2, [sp, #4]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	9200      	str	r2, [sp, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	4601      	mov	r1, r0
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f001 f9b4 	bl	800420c <ST7789_WriteString>
					   screen,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	f000 ff6b 	bl	8003d80 <ipsOn>


	bool loop = true;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 347d 	strb.w	r3, [r7, #1149]	; 0x47d
	bool led = false;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f887 347c 	strb.w	r3, [r7, #1148]	; 0x47c
	uint32_t tmr = get_tmr(1);
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f7ff f93e 	bl	8002138 <get_tmr>
 8002ebc:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478

	s_qcmd qcmd = {0};
 8002ec0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002ec4:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8002ec8:	2200      	movs	r2, #0
 8002eca:	801a      	strh	r2, [r3, #0]
	uint8_t prio = 0;
 8002ecc:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002ed0:	f2a3 436d 	subw	r3, r3, #1133	; 0x46d
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
	osStatus_t qs = osOK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

  /* Infinite loop */

	while (loop) {
 8002ede:	f000 bdbf 	b.w	8003a60 <defThread+0xe60>
 8002ee2:	bf00      	nop
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	33333333 	.word	0x33333333
 8002eec:	3feb3333 	.word	0x3feb3333
 8002ef0:	20000068 	.word	0x20000068
 8002ef4:	20000004 	.word	0x20000004
 8002ef8:	0800d890 	.word	0x0800d890
 8002efc:	20000000 	.word	0x20000000
 8002f00:	0800fe80 	.word	0x0800fe80
 8002f04:	0800d8bc 	.word	0x0800d8bc
 8002f08:	20000085 	.word	0x20000085
 8002f0c:	20001380 	.word	0x20001380
 8002f10:	20000088 	.word	0x20000088
 8002f14:	0800d8e8 	.word	0x0800d8e8
 8002f18:	200013ac 	.word	0x200013ac
 8002f1c:	0800d8f0 	.word	0x0800d8f0
 8002f20:	0800d888 	.word	0x0800d888
 8002f24:	0800d8f8 	.word	0x0800d8f8
 8002f28:	2000008c 	.word	0x2000008c
 8002f2c:	0800d94c 	.word	0x0800d94c
 8002f30:	0800d96c 	.word	0x0800d96c
 8002f34:	2000007c 	.word	0x2000007c
 8002f38:	0800d974 	.word	0x0800d974
 8002f3c:	20000080 	.word	0x20000080
 8002f40:	20001388 	.word	0x20001388
 8002f44:	0800d980 	.word	0x0800d980
 8002f48:	2000137c 	.word	0x2000137c
 8002f4c:	0800d9dc 	.word	0x0800d9dc
 8002f50:	20001366 	.word	0x20001366

		if (check_tmr(tmr)) {
 8002f54:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 8002f58:	f7ff f8fb 	bl	8002152 <check_tmr>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8091 	beq.w	8003086 <defThread+0x486>
			tmr = get_tmr(1);
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7ff f8e7 	bl	8002138 <get_tmr>
 8002f6a:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
			//
			sec2str(screen);
 8002f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f95e 	bl	8002234 <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 8002f78:	4bb5      	ldr	r3, [pc, #724]	; (8003250 <defThread+0x650>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	23f0      	movs	r3, #240	; 0xf0
 8002f82:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 f992 	bl	80042b8 <mkLineCenter>
 8002f94:	4601      	mov	r1, r0
 8002f96:	4bae      	ldr	r3, [pc, #696]	; (8003250 <defThread+0x650>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002f9e:	9202      	str	r2, [sp, #8]
 8002fa0:	221f      	movs	r2, #31
 8002fa2:	9201      	str	r2, [sp, #4]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	9200      	str	r2, [sp, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	460a      	mov	r2, r1
 8002fac:	2100      	movs	r1, #0
 8002fae:	2008      	movs	r0, #8
 8002fb0:	f001 f92c 	bl	800420c <ST7789_WriteString>

			sprintf(screen, "Error: 0x%02X", devError);
 8002fb4:	4ba7      	ldr	r3, [pc, #668]	; (8003254 <defThread+0x654>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fbe:	49a6      	ldr	r1, [pc, #664]	; (8003258 <defThread+0x658>)
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f009 fe51 	bl	800cc68 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 8002fc6:	4ba3      	ldr	r3, [pc, #652]	; (8003254 <defThread+0x654>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d004      	beq.n	8002fd8 <defThread+0x3d8>
 8002fce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fd2:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
 8002fd6:	e002      	b.n	8002fde <defThread+0x3de>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8002fde:	4b9c      	ldr	r3, [pc, #624]	; (8003250 <defThread+0x650>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002fea:	b29c      	uxth	r4, r3
 8002fec:	4b98      	ldr	r3, [pc, #608]	; (8003250 <defThread+0x650>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	23f0      	movs	r3, #240	; 0xf0
 8002ff6:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f001 f958 	bl	80042b8 <mkLineCenter>
 8003008:	4601      	mov	r1, r0
 800300a:	4b91      	ldr	r3, [pc, #580]	; (8003250 <defThread+0x650>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003012:	9202      	str	r2, [sp, #8]
 8003014:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8003018:	9201      	str	r2, [sp, #4]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	9200      	str	r2, [sp, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	460a      	mov	r2, r1
 8003022:	4621      	mov	r1, r4
 8003024:	2000      	movs	r0, #0
 8003026:	f001 f8f1 	bl	800420c <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 800302a:	4b8c      	ldr	r3, [pc, #560]	; (800325c <defThread+0x65c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d019      	beq.n	8003066 <defThread+0x466>
				if (qs != qStat) {
 8003032:	4b8a      	ldr	r3, [pc, #552]	; (800325c <defThread+0x65c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 800303a:	429a      	cmp	r2, r3
 800303c:	d013      	beq.n	8003066 <defThread+0x466>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 800303e:	4b88      	ldr	r3, [pc, #544]	; (8003260 <defThread+0x660>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <defThread+0x45e>
 8003046:	4b85      	ldr	r3, [pc, #532]	; (800325c <defThread+0x65c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe fedc 	bl	8001e08 <get_qStat>
 8003050:	4602      	mov	r2, r0
 8003052:	4b84      	ldr	r3, [pc, #528]	; (8003264 <defThread+0x664>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4984      	ldr	r1, [pc, #528]	; (8003268 <defThread+0x668>)
 8003058:	2001      	movs	r0, #1
 800305a:	f7ff f985 	bl	8002368 <Report>
					qs = qStat;
 800305e:	4b7f      	ldr	r3, [pc, #508]	; (800325c <defThread+0x65c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
				}
			}

			if (devError) led = true; else led = false;
 8003066:	4b7b      	ldr	r3, [pc, #492]	; (8003254 <defThread+0x654>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <defThread+0x476>
 800306e:	2301      	movs	r3, #1
 8003070:	f887 347c 	strb.w	r3, [r7, #1148]	; 0x47c
 8003074:	e002      	b.n	800307c <defThread+0x47c>
 8003076:	2300      	movs	r3, #0
 8003078:	f887 347c 	strb.w	r3, [r7, #1148]	; 0x47c
			errLedOn(led);
 800307c:	f897 347c 	ldrb.w	r3, [r7, #1148]	; 0x47c
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff f803 	bl	800208c <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 8003086:	4b79      	ldr	r3, [pc, #484]	; (800326c <defThread+0x66c>)
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800308e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003092:	2305      	movs	r3, #5
 8003094:	f006 fcd6 	bl	8009a44 <osMessageQueueGet>
 8003098:	4603      	mov	r3, r0
 800309a:	4a70      	ldr	r2, [pc, #448]	; (800325c <defThread+0x65c>)
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b6f      	ldr	r3, [pc, #444]	; (800325c <defThread+0x65c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d029      	beq.n	80030fa <defThread+0x4fa>
			if (qs != qStat) qs = qStat;
 80030a6:	4b6d      	ldr	r3, [pc, #436]	; (800325c <defThread+0x65c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d003      	beq.n	80030ba <defThread+0x4ba>
 80030b2:	4b6a      	ldr	r3, [pc, #424]	; (800325c <defThread+0x65c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
			if (qStat != osErrorTimeout) {
 80030ba:	4b68      	ldr	r3, [pc, #416]	; (800325c <defThread+0x65c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f113 0f02 	cmn.w	r3, #2
 80030c2:	f000 8477 	beq.w	80039b4 <defThread+0xdb4>
				devError |= devQUE;
 80030c6:	4b63      	ldr	r3, [pc, #396]	; (8003254 <defThread+0x654>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	4b60      	ldr	r3, [pc, #384]	; (8003254 <defThread+0x654>)
 80030d2:	701a      	strb	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 80030d4:	4b62      	ldr	r3, [pc, #392]	; (8003260 <defThread+0x660>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 846b 	beq.w	80039b4 <defThread+0xdb4>
 80030de:	4b5f      	ldr	r3, [pc, #380]	; (800325c <defThread+0x65c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fe90 	bl	8001e08 <get_qStat>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b5e      	ldr	r3, [pc, #376]	; (8003264 <defThread+0x664>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	495e      	ldr	r1, [pc, #376]	; (8003268 <defThread+0x668>)
 80030f0:	2001      	movs	r0, #1
 80030f2:	f7ff f939 	bl	8002368 <Report>
 80030f6:	f000 bc5d 	b.w	80039b4 <defThread+0xdb4>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 80030fa:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80030fe:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b5a      	ldr	r3, [pc, #360]	; (8003270 <defThread+0x670>)
 8003108:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800310c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003110:	4958      	ldr	r1, [pc, #352]	; (8003274 <defThread+0x674>)
 8003112:	4618      	mov	r0, r3
 8003114:	f009 fda8 	bl	800cc68 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 8003118:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <defThread+0x650>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	785b      	ldrb	r3, [r3, #1]
 800311e:	b29b      	uxth	r3, r3
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	b29b      	uxth	r3, r3
 8003124:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003128:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 800312a:	4b49      	ldr	r3, [pc, #292]	; (8003250 <defThread+0x650>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	23f0      	movs	r3, #240	; 0xf0
 8003134:	fb93 f3f2 	sdiv	r3, r3, r2
 8003138:	b29a      	uxth	r2, r3
 800313a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f001 f8b9 	bl	80042b8 <mkLineCenter>
 8003146:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 8003148:	4b41      	ldr	r3, [pc, #260]	; (8003250 <defThread+0x650>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2200      	movs	r2, #0
 800314e:	9202      	str	r2, [sp, #8]
 8003150:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003154:	9201      	str	r2, [sp, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	9200      	str	r2, [sp, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	460a      	mov	r2, r1
 800315e:	4621      	mov	r1, r4
 8003160:	2000      	movs	r0, #0
 8003162:	f001 f853 	bl	800420c <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			if (dbg > logOn)
 8003166:	4b3e      	ldr	r3, [pc, #248]	; (8003260 <defThread+0x660>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d91e      	bls.n	80031ac <defThread+0x5ac>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 800316e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003172:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800317e:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	4618      	mov	r0, r3
 8003186:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800318a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	4b37      	ldr	r3, [pc, #220]	; (8003270 <defThread+0x670>)
 8003194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003198:	4a32      	ldr	r2, [pc, #200]	; (8003264 <defThread+0x664>)
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	9201      	str	r2, [sp, #4]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	4603      	mov	r3, r0
 80031a2:	460a      	mov	r2, r1
 80031a4:	4934      	ldr	r1, [pc, #208]	; (8003278 <defThread+0x678>)
 80031a6:	2001      	movs	r0, #1
 80031a8:	f7ff f8de 	bl	8002368 <Report>
			//
			nand_show = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 3483 	strb.w	r3, [r7, #1155]	; 0x483
			switch (qcmd.cmd) {
 80031b2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80031b6:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b0a      	cmp	r3, #10
 80031be:	f200 83e6 	bhi.w	800398e <defThread+0xd8e>
 80031c2:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <defThread+0x5c8>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	08003249 	.word	0x08003249
 80031cc:	08003291 	.word	0x08003291
 80031d0:	0800333b 	.word	0x0800333b
 80031d4:	08003401 	.word	0x08003401
 80031d8:	080035b7 	.word	0x080035b7
 80031dc:	08003435 	.word	0x08003435
 80031e0:	080034f7 	.word	0x080034f7
 80031e4:	080035b7 	.word	0x080035b7
 80031e8:	0800379f 	.word	0x0800379f
 80031ec:	080032cb 	.word	0x080032cb
 80031f0:	080031f5 	.word	0x080031f5
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <defThread+0x664>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4920      	ldr	r1, [pc, #128]	; (800327c <defThread+0x67c>)
 80031fc:	4820      	ldr	r0, [pc, #128]	; (8003280 <defThread+0x680>)
 80031fe:	f009 fd33 	bl	800cc68 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 8003202:	2300      	movs	r3, #0
 8003204:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
 8003208:	e014      	b.n	8003234 <defThread+0x634>
 800320a:	481d      	ldr	r0, [pc, #116]	; (8003280 <defThread+0x680>)
 800320c:	f7fc ffe0 	bl	80001d0 <strlen>
 8003210:	4603      	mov	r3, r0
 8003212:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <defThread+0x680>)
 8003214:	1898      	adds	r0, r3, r2
 8003216:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 800321a:	4a1a      	ldr	r2, [pc, #104]	; (8003284 <defThread+0x684>)
 800321c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <defThread+0x664>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4918      	ldr	r1, [pc, #96]	; (8003288 <defThread+0x688>)
 8003226:	f009 fd1f 	bl	800cc68 <siprintf>
 800322a:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 800322e:	3301      	adds	r3, #1
 8003230:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
 8003234:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 8003238:	2b0a      	cmp	r3, #10
 800323a:	d9e6      	bls.n	800320a <defThread+0x60a>
					Report(1, "%s", stx);
 800323c:	4a10      	ldr	r2, [pc, #64]	; (8003280 <defThread+0x680>)
 800323e:	4913      	ldr	r1, [pc, #76]	; (800328c <defThread+0x68c>)
 8003240:	2001      	movs	r0, #1
 8003242:	f7ff f891 	bl	8002368 <Report>
				break;
 8003246:	e3a2      	b.n	800398e <defThread+0xd8e>
				case cmdRestart:
					loop = false;
 8003248:	2300      	movs	r3, #0
 800324a:	f887 347d 	strb.w	r3, [r7, #1149]	; 0x47d
		  		break;
 800324e:	e39e      	b.n	800398e <defThread+0xd8e>
 8003250:	2000007c 	.word	0x2000007c
 8003254:	2000034c 	.word	0x2000034c
 8003258:	0800d9ec 	.word	0x0800d9ec
 800325c:	200013a8 	.word	0x200013a8
 8003260:	20000068 	.word	0x20000068
 8003264:	20000004 	.word	0x20000004
 8003268:	0800d9fc 	.word	0x0800d9fc
 800326c:	20000344 	.word	0x20000344
 8003270:	20000034 	.word	0x20000034
 8003274:	0800da08 	.word	0x0800da08
 8003278:	0800da10 	.word	0x0800da10
 800327c:	0800da28 	.word	0x0800da28
 8003280:	200013ac 	.word	0x200013ac
 8003284:	20000008 	.word	0x20000008
 8003288:	0800da44 	.word	0x0800da44
 800328c:	0800d890 	.word	0x0800d890
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 8003290:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003294:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003298:	785b      	ldrb	r3, [r3, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <defThread+0x6aa>
						set_Date(epoch);
 800329e:	4ba7      	ldr	r3, [pc, #668]	; (800353c <defThread+0x93c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe ff66 	bl	8002174 <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 80032a8:	e360      	b.n	800396c <defThread+0xd6c>
						sec2str(stx);
 80032aa:	48a5      	ldr	r0, [pc, #660]	; (8003540 <defThread+0x940>)
 80032ac:	f7fe ffc2 	bl	8002234 <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 80032b0:	4ba4      	ldr	r3, [pc, #656]	; (8003544 <defThread+0x944>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8359 	beq.w	800396c <defThread+0xd6c>
 80032ba:	4ba3      	ldr	r3, [pc, #652]	; (8003548 <defThread+0x948>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4aa0      	ldr	r2, [pc, #640]	; (8003540 <defThread+0x940>)
 80032c0:	49a2      	ldr	r1, [pc, #648]	; (800354c <defThread+0x94c>)
 80032c2:	2000      	movs	r0, #0
 80032c4:	f7ff f850 	bl	8002368 <Report>
				break;
 80032c8:	e350      	b.n	800396c <defThread+0xd6c>
				case cmdLog:
					if (qcmd.attr < logNone) {
 80032ca:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80032ce:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80032d2:	785b      	ldrb	r3, [r3, #1]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d81e      	bhi.n	8003316 <defThread+0x716>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 80032d8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80032dc:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80032e0:	785b      	ldrb	r3, [r3, #1]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fde0 	bl	8001ea8 <get_logName>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80032ee:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4b94      	ldr	r3, [pc, #592]	; (8003548 <defThread+0x948>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	460b      	mov	r3, r1
 80032fe:	4994      	ldr	r1, [pc, #592]	; (8003550 <defThread+0x950>)
 8003300:	2001      	movs	r0, #1
 8003302:	f7ff f831 	bl	8002368 <Report>
						dbg = qcmd.attr;
 8003306:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800330a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800330e:	785a      	ldrb	r2, [r3, #1]
 8003310:	4b8c      	ldr	r3, [pc, #560]	; (8003544 <defThread+0x944>)
 8003312:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 8003314:	e33b      	b.n	800398e <defThread+0xd8e>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 8003316:	4b8b      	ldr	r3, [pc, #556]	; (8003544 <defThread+0x944>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fdc4 	bl	8001ea8 <get_logName>
 8003320:	4602      	mov	r2, r0
 8003322:	4b88      	ldr	r3, [pc, #544]	; (8003544 <defThread+0x944>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	4619      	mov	r1, r3
 8003328:	4b87      	ldr	r3, [pc, #540]	; (8003548 <defThread+0x948>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	460b      	mov	r3, r1
 8003330:	4988      	ldr	r1, [pc, #544]	; (8003554 <defThread+0x954>)
 8003332:	2001      	movs	r0, #1
 8003334:	f7ff f818 	bl	8002368 <Report>
				break;
 8003338:	e329      	b.n	800398e <defThread+0xd8e>
				case cmdRead:
				{
					uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 800333a:	4b87      	ldr	r3, [pc, #540]	; (8003558 <defThread+0x958>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b87      	ldr	r3, [pc, #540]	; (800355c <defThread+0x95c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1ad2      	subs	r2, r2, r3
 8003344:	4b86      	ldr	r3, [pc, #536]	; (8003560 <defThread+0x960>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
					NAND_AddressTypeDef addr = {
 8003350:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8003354:	b29a      	uxth	r2, r3
 8003356:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800335a:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800335e:	801a      	strh	r2, [r3, #0]
 8003360:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003364:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003368:	2201      	movs	r2, #1
 800336a:	805a      	strh	r2, [r3, #2]
						.Page = p,//(p % (chipConf.BlockSize / chipConf.PageSize)),
						.Plane = 1,
						.Block = nand_PageToBlock(p)
 800336c:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8003370:	f7ff fb5e 	bl	8002a30 <nand_PageToBlock>
 8003374:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 8003376:	b29a      	uxth	r2, r3
 8003378:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800337c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003380:	809a      	strh	r2, [r3, #4]
					};
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8003382:	4b70      	ldr	r3, [pc, #448]	; (8003544 <defThread+0x944>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01a      	beq.n	80033c0 <defThread+0x7c0>
 800338a:	4b73      	ldr	r3, [pc, #460]	; (8003558 <defThread+0x958>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b75      	ldr	r3, [pc, #468]	; (8003564 <defThread+0x964>)
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	461c      	mov	r4, r3
							  	  	  	  	  	  nandAdr, nandLen, addr.Page, addr.Block, eol);
 8003394:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003398:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800339c:	881b      	ldrh	r3, [r3, #0]
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 800339e:	4619      	mov	r1, r3
							  	  	  	  	  	  nandAdr, nandLen, addr.Page, addr.Block, eol);
 80033a0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80033a4:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80033a8:	889b      	ldrh	r3, [r3, #4]
					if (dbg != logOff) Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 80033aa:	4618      	mov	r0, r3
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <defThread+0x948>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	9302      	str	r3, [sp, #8]
 80033b2:	9001      	str	r0, [sp, #4]
 80033b4:	9100      	str	r1, [sp, #0]
 80033b6:	4623      	mov	r3, r4
 80033b8:	496b      	ldr	r1, [pc, #428]	; (8003568 <defThread+0x968>)
 80033ba:	2001      	movs	r0, #1
 80033bc:	f7fe ffd4 	bl	8002368 <Report>
					if (rdBuf) {
 80033c0:	4b6a      	ldr	r3, [pc, #424]	; (800356c <defThread+0x96c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 82d3 	beq.w	8003970 <defThread+0xd70>
						if (NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) == HAL_OK) {
 80033ca:	4b69      	ldr	r3, [pc, #420]	; (8003570 <defThread+0x970>)
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	4b67      	ldr	r3, [pc, #412]	; (800356c <defThread+0x96c>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	f107 011c 	add.w	r1, r7, #28
 80033d6:	2301      	movs	r3, #1
 80033d8:	f7fe f860 	bl	800149c <NAND_Read_Page_8b>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <defThread+0x7f0>
							nand_show = 1;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 3483 	strb.w	r3, [r7, #1155]	; 0x483
							readed = true;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 3482 	strb.w	r3, [r7, #1154]	; 0x482
						} else devError |= devNAND;
					}
				}
				break;
 80033ee:	e2bf      	b.n	8003970 <defThread+0xd70>
						} else devError |= devNAND;
 80033f0:	4b60      	ldr	r3, [pc, #384]	; (8003574 <defThread+0x974>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	f043 0320 	orr.w	r3, r3, #32
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4b5e      	ldr	r3, [pc, #376]	; (8003574 <defThread+0x974>)
 80033fc:	701a      	strb	r2, [r3, #0]
				break;
 80033fe:	e2b7      	b.n	8003970 <defThread+0xd70>
				case cmdNext:
					if (dbg != logOff) Report(1, "Read next nand adr:0x%X len:%lu%s", nandAdr, nandLen, eol);
 8003400:	4b50      	ldr	r3, [pc, #320]	; (8003544 <defThread+0x944>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00c      	beq.n	8003422 <defThread+0x822>
 8003408:	4b53      	ldr	r3, [pc, #332]	; (8003558 <defThread+0x958>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b55      	ldr	r3, [pc, #340]	; (8003564 <defThread+0x964>)
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	4619      	mov	r1, r3
 8003412:	4b4d      	ldr	r3, [pc, #308]	; (8003548 <defThread+0x948>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	460b      	mov	r3, r1
 800341a:	4957      	ldr	r1, [pc, #348]	; (8003578 <defThread+0x978>)
 800341c:	2001      	movs	r0, #1
 800341e:	f7fe ffa3 	bl	8002368 <Report>
					if (rdBuf) nand_show = 2;
 8003422:	4b52      	ldr	r3, [pc, #328]	; (800356c <defThread+0x96c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 82a4 	beq.w	8003974 <defThread+0xd74>
 800342c:	2302      	movs	r3, #2
 800342e:	f887 3483 	strb.w	r3, [r7, #1155]	; 0x483
				break;
 8003432:	e29f      	b.n	8003974 <defThread+0xd74>
				case cmdErase:
					clr.Page = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
					clr.Block = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	f8a7 344c 	strh.w	r3, [r7, #1100]	; 0x44c
					clr.Plane = 1;
 8003440:	2301      	movs	r3, #1
 8003442:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
					if (!qcmd.attr) {
 8003446:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800344a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d13d      	bne.n	80034d0 <defThread+0x8d0>
						clr.Page = nand_BlockToPage(nandBlk);
 8003454:	4b49      	ldr	r3, [pc, #292]	; (800357c <defThread+0x97c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff faff 	bl	8002a5c <nand_BlockToPage>
 800345e:	4603      	mov	r3, r0
 8003460:	b29b      	uxth	r3, r3
 8003462:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
						clr.Block = nandBlk;
 8003466:	4b45      	ldr	r3, [pc, #276]	; (800357c <defThread+0x97c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	f8a7 344c 	strh.w	r3, [r7, #1100]	; 0x44c
						if (NAND_Erase_Block(nandPort, &clr, 1) != HAL_OK) {
 8003470:	4b3f      	ldr	r3, [pc, #252]	; (8003570 <defThread+0x970>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8003478:	2201      	movs	r2, #1
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fa0a 	bl	8001894 <NAND_Erase_Block>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d015      	beq.n	80034b2 <defThread+0x8b2>
							devError |= devNAND;
 8003486:	4b3b      	ldr	r3, [pc, #236]	; (8003574 <defThread+0x974>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	f043 0320 	orr.w	r3, r3, #32
 800348e:	b2da      	uxtb	r2, r3
 8003490:	4b38      	ldr	r3, [pc, #224]	; (8003574 <defThread+0x974>)
 8003492:	701a      	strb	r2, [r3, #0]
							if (dbg != logOff) Report(1, "Erase nand block:%lu Error !%s", clr.Block, eol);
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <defThread+0x944>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 826d 	beq.w	8003978 <defThread+0xd78>
 800349e:	f8b7 344c 	ldrh.w	r3, [r7, #1100]	; 0x44c
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <defThread+0x948>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4935      	ldr	r1, [pc, #212]	; (8003580 <defThread+0x980>)
 80034aa:	2001      	movs	r0, #1
 80034ac:	f7fe ff5c 	bl	8002368 <Report>
						iBlk = 0;
						next_block_erase = 1;
						if (dbg != logOff) Report(1, "Erase chip ");
						stik = HAL_GetTick();
					}
				break;
 80034b0:	e262      	b.n	8003978 <defThread+0xd78>
							if (dbg != logOff) Report(1, "Erase nand block:%lu Ok !%s", clr.Block, eol);
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <defThread+0x944>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 825e 	beq.w	8003978 <defThread+0xd78>
 80034bc:	f8b7 344c 	ldrh.w	r3, [r7, #1100]	; 0x44c
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b21      	ldr	r3, [pc, #132]	; (8003548 <defThread+0x948>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	492f      	ldr	r1, [pc, #188]	; (8003584 <defThread+0x984>)
 80034c8:	2001      	movs	r0, #1
 80034ca:	f7fe ff4d 	bl	8002368 <Report>
				break;
 80034ce:	e253      	b.n	8003978 <defThread+0xd78>
						iBlk = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
						next_block_erase = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 348f 	strb.w	r3, [r7, #1167]	; 0x48f
						if (dbg != logOff) Report(1, "Erase chip ");
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <defThread+0x944>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <defThread+0x8ec>
 80034e4:	4928      	ldr	r1, [pc, #160]	; (8003588 <defThread+0x988>)
 80034e6:	2001      	movs	r0, #1
 80034e8:	f7fe ff3e 	bl	8002368 <Report>
						stik = HAL_GetTick();
 80034ec:	f001 fa9a 	bl	8004a24 <HAL_GetTick>
 80034f0:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
				break;
 80034f4:	e240      	b.n	8003978 <defThread+0xd78>
				case cmdCheck:
				{
					uint32_t b = nand_PageToBlock(nandPage);
 80034f6:	4b25      	ldr	r3, [pc, #148]	; (800358c <defThread+0x98c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fa98 	bl	8002a30 <nand_PageToBlock>
 8003500:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
					if (!pageIsEmpty(nandPage)) {
 8003504:	4b21      	ldr	r3, [pc, #132]	; (800358c <defThread+0x98c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fa4f 	bl	80019ac <pageIsEmpty>
 800350e:	4603      	mov	r3, r0
 8003510:	f083 0301 	eor.w	r3, r3, #1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d03c      	beq.n	8003594 <defThread+0x994>
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu Not empty%s", nandPage, b, eol);
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <defThread+0x944>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 822c 	beq.w	800397c <defThread+0xd7c>
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <defThread+0x98c>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <defThread+0x948>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003532:	4917      	ldr	r1, [pc, #92]	; (8003590 <defThread+0x990>)
 8003534:	2001      	movs	r0, #1
 8003536:	f7fe ff17 	bl	8002368 <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
					}
				}
				break;
 800353a:	e21f      	b.n	800397c <defThread+0xd7c>
 800353c:	20000064 	.word	0x20000064
 8003540:	200013ac 	.word	0x200013ac
 8003544:	20000068 	.word	0x20000068
 8003548:	20000004 	.word	0x20000004
 800354c:	0800da4c 	.word	0x0800da4c
 8003550:	0800da68 	.word	0x0800da68
 8003554:	0800da84 	.word	0x0800da84
 8003558:	2000136c 	.word	0x2000136c
 800355c:	20001368 	.word	0x20001368
 8003560:	20001388 	.word	0x20001388
 8003564:	20001370 	.word	0x20001370
 8003568:	0800daa4 	.word	0x0800daa4
 800356c:	200013a0 	.word	0x200013a0
 8003570:	20000078 	.word	0x20000078
 8003574:	2000034c 	.word	0x2000034c
 8003578:	0800dad4 	.word	0x0800dad4
 800357c:	20001374 	.word	0x20001374
 8003580:	0800daf8 	.word	0x0800daf8
 8003584:	0800db18 	.word	0x0800db18
 8003588:	0800db34 	.word	0x0800db34
 800358c:	20001378 	.word	0x20001378
 8003590:	0800db40 	.word	0x0800db40
						if (dbg != logOff) Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
 8003594:	4bae      	ldr	r3, [pc, #696]	; (8003850 <defThread+0xc50>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 81ef 	beq.w	800397c <defThread+0xd7c>
 800359e:	4bad      	ldr	r3, [pc, #692]	; (8003854 <defThread+0xc54>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4bad      	ldr	r3, [pc, #692]	; (8003858 <defThread+0xc58>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80035ac:	49ab      	ldr	r1, [pc, #684]	; (800385c <defThread+0xc5c>)
 80035ae:	2001      	movs	r0, #1
 80035b0:	f7fe feda 	bl	8002368 <Report>
				break;
 80035b4:	e1e2      	b.n	800397c <defThread+0xd7c>
				case cmdWrite:
				case cmdArea:
					if (wrBuf) {
 80035b6:	4baa      	ldr	r3, [pc, #680]	; (8003860 <defThread+0xc60>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 81e0 	beq.w	8003980 <defThread+0xd80>
						//
						if (qcmd.cmd == cmdArea) {
 80035c0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80035c4:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b07      	cmp	r3, #7
 80035cc:	d127      	bne.n	800361e <defThread+0xa1e>
							if (!areaIsEmpty(nandAdr, nandLen)) {
 80035ce:	4ba5      	ldr	r3, [pc, #660]	; (8003864 <defThread+0xc64>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4aa5      	ldr	r2, [pc, #660]	; (8003868 <defThread+0xc68>)
 80035d4:	8812      	ldrh	r2, [r2, #0]
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fe facd 	bl	8001b78 <areaIsEmpty>
 80035de:	4603      	mov	r3, r0
 80035e0:	f083 0301 	eor.w	r3, r3, #1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00c      	beq.n	8003604 <defThread+0xa04>
								if (dbg != logOff) Report(1, "Area Not empty%s", eol);
 80035ea:	4b99      	ldr	r3, [pc, #612]	; (8003850 <defThread+0xc50>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 81c8 	beq.w	8003984 <defThread+0xd84>
 80035f4:	4b98      	ldr	r3, [pc, #608]	; (8003858 <defThread+0xc58>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	499c      	ldr	r1, [pc, #624]	; (800386c <defThread+0xc6c>)
 80035fc:	2001      	movs	r0, #1
 80035fe:	f7fe feb3 	bl	8002368 <Report>
							} else {
								if (dbg != logOff) Report(1, "Area is Empty%s", eol);
							}
							break;
 8003602:	e1bf      	b.n	8003984 <defThread+0xd84>
								if (dbg != logOff) Report(1, "Area is Empty%s", eol);
 8003604:	4b92      	ldr	r3, [pc, #584]	; (8003850 <defThread+0xc50>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 81bb 	beq.w	8003984 <defThread+0xd84>
 800360e:	4b92      	ldr	r3, [pc, #584]	; (8003858 <defThread+0xc58>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	4996      	ldr	r1, [pc, #600]	; (8003870 <defThread+0xc70>)
 8003616:	2001      	movs	r0, #1
 8003618:	f7fe fea6 	bl	8002368 <Report>
 800361c:	e1b7      	b.n	800398e <defThread+0xd8e>
						}
						//
						uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 800361e:	4b91      	ldr	r3, [pc, #580]	; (8003864 <defThread+0xc64>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b94      	ldr	r3, [pc, #592]	; (8003874 <defThread+0xc74>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	1ad2      	subs	r2, r2, r3
 8003628:	4b93      	ldr	r3, [pc, #588]	; (8003878 <defThread+0xc78>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
						uint32_t b = nand_PageToBlock(p);
 8003634:	f8d7 045c 	ldr.w	r0, [r7, #1116]	; 0x45c
 8003638:	f7ff f9fa 	bl	8002a30 <nand_PageToBlock>
 800363c:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
						NAND_AddressTypeDef addr = {
 8003640:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003644:	b29a      	uxth	r2, r3
 8003646:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800364a:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800364e:	801a      	strh	r2, [r3, #0]
 8003650:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003654:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003658:	2201      	movs	r2, #1
 800365a:	805a      	strh	r2, [r3, #2]
 800365c:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003660:	b29a      	uxth	r2, r3
 8003662:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003666:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800366a:	809a      	strh	r2, [r3, #4]
							.Page = p,//(p % (chipConf.BlockSize / chipConf.PageSize)),
							.Plane = 1,
							.Block = b
						};
						if (!pageIsEmpty(p)) {//nandPage)) {
 800366c:	f8d7 045c 	ldr.w	r0, [r7, #1116]	; 0x45c
 8003670:	f7fe f99c 	bl	80019ac <pageIsEmpty>
 8003674:	4603      	mov	r3, r0
 8003676:	f083 0301 	eor.w	r3, r3, #1
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01c      	beq.n	80036ba <defThread+0xaba>
							if (NAND_Erase_Block(nandPort, &addr, 1) != HAL_OK) devError |= devNAND;
 8003680:	4b7e      	ldr	r3, [pc, #504]	; (800387c <defThread+0xc7c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f107 0114 	add.w	r1, r7, #20
 8003688:	2201      	movs	r2, #1
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe f902 	bl	8001894 <NAND_Erase_Block>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d006      	beq.n	80036a4 <defThread+0xaa4>
 8003696:	4b7a      	ldr	r3, [pc, #488]	; (8003880 <defThread+0xc80>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	f043 0320 	orr.w	r3, r3, #32
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	4b77      	ldr	r3, [pc, #476]	; (8003880 <defThread+0xc80>)
 80036a2:	701a      	strb	r2, [r3, #0]
							sprintf(stx, "Erase nand block:%u done", addr.Block);
 80036a4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80036a8:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80036ac:	889b      	ldrh	r3, [r3, #4]
 80036ae:	461a      	mov	r2, r3
 80036b0:	4974      	ldr	r1, [pc, #464]	; (8003884 <defThread+0xc84>)
 80036b2:	4875      	ldr	r0, [pc, #468]	; (8003888 <defThread+0xc88>)
 80036b4:	f009 fad8 	bl	800cc68 <siprintf>
 80036b8:	e009      	b.n	80036ce <defThread+0xace>
						} else {
							sprintf(stx, "Block:%u is Empty", addr.Block);
 80036ba:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80036be:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80036c2:	889b      	ldrh	r3, [r3, #4]
 80036c4:	461a      	mov	r2, r3
 80036c6:	4971      	ldr	r1, [pc, #452]	; (800388c <defThread+0xc8c>)
 80036c8:	486f      	ldr	r0, [pc, #444]	; (8003888 <defThread+0xc88>)
 80036ca:	f009 facd 	bl	800cc68 <siprintf>
						}
						if (dbg != logOff) Report(1, "%s%s", stx, eol);
 80036ce:	4b60      	ldr	r3, [pc, #384]	; (8003850 <defThread+0xc50>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d006      	beq.n	80036e4 <defThread+0xae4>
 80036d6:	4b60      	ldr	r3, [pc, #384]	; (8003858 <defThread+0xc58>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6b      	ldr	r2, [pc, #428]	; (8003888 <defThread+0xc88>)
 80036dc:	496c      	ldr	r1, [pc, #432]	; (8003890 <defThread+0xc90>)
 80036de:	2001      	movs	r0, #1
 80036e0:	f7fe fe42 	bl	8002368 <Report>
						memset(wrBuf, 0xff, chipConf.PageSize);
 80036e4:	4b5e      	ldr	r3, [pc, #376]	; (8003860 <defThread+0xc60>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a63      	ldr	r2, [pc, #396]	; (8003878 <defThread+0xc78>)
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	21ff      	movs	r1, #255	; 0xff
 80036ee:	4618      	mov	r0, r3
 80036f0:	f009 f942 	bl	800c978 <memset>
						uint32_t ofs = (nandAdr - devAdr) % chipConf.PageSize;
 80036f4:	4b5b      	ldr	r3, [pc, #364]	; (8003864 <defThread+0xc64>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b5e      	ldr	r3, [pc, #376]	; (8003874 <defThread+0xc74>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	4a5e      	ldr	r2, [pc, #376]	; (8003878 <defThread+0xc78>)
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	fbb3 f1f2 	udiv	r1, r3, r2
 8003706:	fb01 f202 	mul.w	r2, r1, r2
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
						memset(wrBuf + ofs, nandByte, nandLen);
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <defThread+0xc60>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003718:	4413      	add	r3, r2
 800371a:	4a5e      	ldr	r2, [pc, #376]	; (8003894 <defThread+0xc94>)
 800371c:	7812      	ldrb	r2, [r2, #0]
 800371e:	4611      	mov	r1, r2
 8003720:	4a51      	ldr	r2, [pc, #324]	; (8003868 <defThread+0xc68>)
 8003722:	8812      	ldrh	r2, [r2, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f009 f927 	bl	800c978 <memset>
						//showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
						if (NAND_Write_Page_8b(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
 800372a:	4b54      	ldr	r3, [pc, #336]	; (800387c <defThread+0xc7c>)
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	4b4c      	ldr	r3, [pc, #304]	; (8003860 <defThread+0xc60>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	f107 0114 	add.w	r1, r7, #20
 8003736:	2301      	movs	r3, #1
 8003738:	f7fd ffb0 	bl	800169c <NAND_Write_Page_8b>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d006      	beq.n	8003750 <defThread+0xb50>
 8003742:	4b4f      	ldr	r3, [pc, #316]	; (8003880 <defThread+0xc80>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	f043 0320 	orr.w	r3, r3, #32
 800374a:	b2da      	uxtb	r2, r3
 800374c:	4b4c      	ldr	r3, [pc, #304]	; (8003880 <defThread+0xc80>)
 800374e:	701a      	strb	r2, [r3, #0]
						if (dbg != logOff) Report(1, "Write nand adr:0x%X ofs:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 8003750:	4b3f      	ldr	r3, [pc, #252]	; (8003850 <defThread+0xc50>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8113 	beq.w	8003980 <defThread+0xd80>
 800375a:	4b42      	ldr	r3, [pc, #264]	; (8003864 <defThread+0xc64>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4b4d      	ldr	r3, [pc, #308]	; (8003894 <defThread+0xc94>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4619      	mov	r1, r3
 8003764:	4b40      	ldr	r3, [pc, #256]	; (8003868 <defThread+0xc68>)
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
							      	  	  	  	  	  nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 800376a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800376e:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003772:	881b      	ldrh	r3, [r3, #0]
						if (dbg != logOff) Report(1, "Write nand adr:0x%X ofs:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 8003774:	461c      	mov	r4, r3
							      	  	  	  	  	  nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 8003776:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800377a:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800377e:	889b      	ldrh	r3, [r3, #4]
						if (dbg != logOff) Report(1, "Write nand adr:0x%X ofs:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 8003780:	461d      	mov	r5, r3
 8003782:	4b35      	ldr	r3, [pc, #212]	; (8003858 <defThread+0xc58>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	9304      	str	r3, [sp, #16]
 8003788:	9503      	str	r5, [sp, #12]
 800378a:	9402      	str	r4, [sp, #8]
 800378c:	9001      	str	r0, [sp, #4]
 800378e:	9100      	str	r1, [sp, #0]
 8003790:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003794:	4940      	ldr	r1, [pc, #256]	; (8003898 <defThread+0xc98>)
 8003796:	2001      	movs	r0, #1
 8003798:	f7fe fde6 	bl	8002368 <Report>
					}
				break;
 800379c:	e0f0      	b.n	8003980 <defThread+0xd80>
				case cmdSave:
					if (wrBuf) {
 800379e:	4b30      	ldr	r3, [pc, #192]	; (8003860 <defThread+0xc60>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80f0 	beq.w	8003988 <defThread+0xd88>
						uint32_t page = (nandAdr - devAdr) / chipConf.PageSize;
 80037a8:	4b2e      	ldr	r3, [pc, #184]	; (8003864 <defThread+0xc64>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b31      	ldr	r3, [pc, #196]	; (8003874 <defThread+0xc74>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	1ad2      	subs	r2, r2, r3
 80037b2:	4b31      	ldr	r3, [pc, #196]	; (8003878 <defThread+0xc78>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
						NAND_AddressTypeDef nans = {
							.Page = (page % (chipConf.BlockSize / chipConf.PageSize)),
 80037be:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <defThread+0xc78>)
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <defThread+0xc78>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ca:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80037ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80037d2:	fb01 f202 	mul.w	r2, r1, r2
 80037d6:	1a9b      	subs	r3, r3, r2
						NAND_AddressTypeDef nans = {
 80037d8:	b29a      	uxth	r2, r3
 80037da:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80037de:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80037e2:	801a      	strh	r2, [r3, #0]
 80037e4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80037e8:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80037ec:	2201      	movs	r2, #1
 80037ee:	805a      	strh	r2, [r3, #2]
							.Plane = 1,
							.Block = nand_PageToBlock(page)
 80037f0:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 80037f4:	f7ff f91c 	bl	8002a30 <nand_PageToBlock>
 80037f8:	4603      	mov	r3, r0
						NAND_AddressTypeDef nans = {
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003800:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8003804:	809a      	strh	r2, [r3, #4]
						};
						int shift = emptyArea(nandAdr, nandLen, wrBuf, &nans);
 8003806:	4b17      	ldr	r3, [pc, #92]	; (8003864 <defThread+0xc64>)
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	4b17      	ldr	r3, [pc, #92]	; (8003868 <defThread+0xc68>)
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	4619      	mov	r1, r3
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <defThread+0xc60>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	f7fe f91c 	bl	8001a54 <emptyArea>
 800381c:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
						if (shift == -1) {
 8003820:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003828:	d13a      	bne.n	80038a0 <defThread+0xca0>
							if (dbg != logOff) if (dbg != logOff) Report(1, "Area Not empty. Process not alow%s", eol);
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <defThread+0xc50>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 80ac 	beq.w	800398c <defThread+0xd8c>
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <defThread+0xc50>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a7 	beq.w	800398c <defThread+0xd8c>
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <defThread+0xc58>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	4915      	ldr	r1, [pc, #84]	; (800389c <defThread+0xc9c>)
 8003846:	2001      	movs	r0, #1
 8003848:	f7fe fd8e 	bl	8002368 <Report>
 800384c:	e09f      	b.n	800398e <defThread+0xd8e>
 800384e:	bf00      	nop
 8003850:	20000068 	.word	0x20000068
 8003854:	20001378 	.word	0x20001378
 8003858:	20000004 	.word	0x20000004
 800385c:	0800db64 	.word	0x0800db64
 8003860:	200013a4 	.word	0x200013a4
 8003864:	2000136c 	.word	0x2000136c
 8003868:	20001370 	.word	0x20001370
 800386c:	0800db88 	.word	0x0800db88
 8003870:	0800db9c 	.word	0x0800db9c
 8003874:	20001368 	.word	0x20001368
 8003878:	20001388 	.word	0x20001388
 800387c:	20000078 	.word	0x20000078
 8003880:	2000034c 	.word	0x2000034c
 8003884:	0800dbac 	.word	0x0800dbac
 8003888:	200013ac 	.word	0x200013ac
 800388c:	0800dbc8 	.word	0x0800dbc8
 8003890:	0800d96c 	.word	0x0800d96c
 8003894:	20000084 	.word	0x20000084
 8003898:	0800dbdc 	.word	0x0800dbdc
 800389c:	0800dc24 	.word	0x0800dc24
							break;
						} else {
							memset(wrBuf + shift, nandByte, nandLen);
 80038a0:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <defThread+0xec4>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80038a8:	4413      	add	r3, r2
 80038aa:	4a87      	ldr	r2, [pc, #540]	; (8003ac8 <defThread+0xec8>)
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	4611      	mov	r1, r2
 80038b0:	4a86      	ldr	r2, [pc, #536]	; (8003acc <defThread+0xecc>)
 80038b2:	8812      	ldrh	r2, [r2, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f009 f85f 	bl	800c978 <memset>
							if (HAL_NAND_Write_Page_8b(nandPort, &nans, wrBuf, 1) != HAL_OK) devError |= devNAND;
 80038ba:	4b85      	ldr	r3, [pc, #532]	; (8003ad0 <defThread+0xed0>)
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	4b81      	ldr	r3, [pc, #516]	; (8003ac4 <defThread+0xec4>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	f107 010c 	add.w	r1, r7, #12
 80038c6:	2301      	movs	r3, #1
 80038c8:	f002 f8bb 	bl	8005a42 <HAL_NAND_Write_Page_8b>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <defThread+0xce0>
 80038d2:	4b80      	ldr	r3, [pc, #512]	; (8003ad4 <defThread+0xed4>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	f043 0320 	orr.w	r3, r3, #32
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	4b7d      	ldr	r3, [pc, #500]	; (8003ad4 <defThread+0xed4>)
 80038de:	701a      	strb	r2, [r3, #0]
							//showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
							if (dbg != logOff)
 80038e0:	4b7d      	ldr	r3, [pc, #500]	; (8003ad8 <defThread+0xed8>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d04f      	beq.n	8003988 <defThread+0xd88>
								Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
									  ARRAY_ADDRESS(&nans, nandPort),
 80038e8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80038ec:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	4619      	mov	r1, r3
 80038f4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80038f8:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80038fc:	889b      	ldrh	r3, [r3, #4]
 80038fe:	461a      	mov	r2, r3
 8003900:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003904:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8003908:	885b      	ldrh	r3, [r3, #2]
 800390a:	4618      	mov	r0, r3
 800390c:	4b70      	ldr	r3, [pc, #448]	; (8003ad0 <defThread+0xed0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	fb00 f303 	mul.w	r3, r0, r3
 8003916:	4413      	add	r3, r2
 8003918:	4a6d      	ldr	r2, [pc, #436]	; (8003ad0 <defThread+0xed0>)
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800391e:	fb02 f303 	mul.w	r3, r2, r3
								Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 8003922:	18ca      	adds	r2, r1, r3
 8003924:	4b6d      	ldr	r3, [pc, #436]	; (8003adc <defThread+0xedc>)
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	4b67      	ldr	r3, [pc, #412]	; (8003ac8 <defThread+0xec8>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	4b67      	ldr	r3, [pc, #412]	; (8003acc <defThread+0xecc>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	461c      	mov	r4, r3
									  nandAdr,
									  shift,
									  nandByte,
									  nandLen,
									  nans.Page,
 8003934:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003938:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 800393c:	881b      	ldrh	r3, [r3, #0]
								Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 800393e:	461d      	mov	r5, r3
									  nans.Block,
 8003940:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003944:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8003948:	889b      	ldrh	r3, [r3, #4]
								Report(1, "Save nand mem_adr:0x%X adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu block:%lu)%s",
 800394a:	461e      	mov	r6, r3
 800394c:	4b64      	ldr	r3, [pc, #400]	; (8003ae0 <defThread+0xee0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	9305      	str	r3, [sp, #20]
 8003952:	9604      	str	r6, [sp, #16]
 8003954:	9503      	str	r5, [sp, #12]
 8003956:	9402      	str	r4, [sp, #8]
 8003958:	9001      	str	r0, [sp, #4]
 800395a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	460b      	mov	r3, r1
 8003962:	4960      	ldr	r1, [pc, #384]	; (8003ae4 <defThread+0xee4>)
 8003964:	2001      	movs	r0, #1
 8003966:	f7fe fcff 	bl	8002368 <Report>
									  eol);
						}
					}
				break;
 800396a:	e00d      	b.n	8003988 <defThread+0xd88>
				break;
 800396c:	bf00      	nop
 800396e:	e00e      	b.n	800398e <defThread+0xd8e>
				break;
 8003970:	bf00      	nop
 8003972:	e00c      	b.n	800398e <defThread+0xd8e>
				break;
 8003974:	bf00      	nop
 8003976:	e00a      	b.n	800398e <defThread+0xd8e>
				break;
 8003978:	bf00      	nop
 800397a:	e008      	b.n	800398e <defThread+0xd8e>
				break;
 800397c:	bf00      	nop
 800397e:	e006      	b.n	800398e <defThread+0xd8e>
				break;
 8003980:	bf00      	nop
 8003982:	e004      	b.n	800398e <defThread+0xd8e>
							break;
 8003984:	bf00      	nop
 8003986:	e002      	b.n	800398e <defThread+0xd8e>
				break;
 8003988:	bf00      	nop
 800398a:	e000      	b.n	800398e <defThread+0xd8e>
							break;
 800398c:	bf00      	nop
			}
			if (nand_show) {
 800398e:	f897 3483 	ldrb.w	r3, [r7, #1155]	; 0x483
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00e      	beq.n	80039b4 <defThread+0xdb4>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 8003996:	4b51      	ldr	r3, [pc, #324]	; (8003adc <defThread+0xedc>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4b4c      	ldr	r3, [pc, #304]	; (8003acc <defThread+0xecc>)
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	461c      	mov	r4, r3
 80039a0:	4b51      	ldr	r3, [pc, #324]	; (8003ae8 <defThread+0xee8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f897 1482 	ldrb.w	r1, [r7, #1154]	; 0x482
 80039a8:	f897 0483 	ldrb.w	r0, [r7, #1155]	; 0x483
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	4623      	mov	r3, r4
 80039b0:	f7ff f86a 	bl	8002a88 <showBuf>
			}
		}

		// Erase all blocks (chipConf.BlockNbr)
		if (next_block_erase) {
 80039b4:	f897 348f 	ldrb.w	r3, [r7, #1167]	; 0x48f
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d04e      	beq.n	8003a5a <defThread+0xe5a>
			clr.Block = iBlk;
 80039bc:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f8a7 344c 	strh.w	r3, [r7, #1100]	; 0x44c
			iBlk++;
 80039c6:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80039ca:	3301      	adds	r3, #1
 80039cc:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
			if (NAND_Erase_Block(nandPort, &clr, 0) != HAL_OK) {
 80039d0:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <defThread+0xed0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 80039d8:	2200      	movs	r2, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd ff5a 	bl	8001894 <NAND_Erase_Block>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <defThread+0xdfc>
				devError |= devNAND;
 80039e6:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <defThread+0xed4>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	f043 0320 	orr.w	r3, r3, #32
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	4b38      	ldr	r3, [pc, #224]	; (8003ad4 <defThread+0xed4>)
 80039f2:	701a      	strb	r2, [r3, #0]
				next_block_erase = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 348f 	strb.w	r3, [r7, #1167]	; 0x48f
 80039fa:	e012      	b.n	8003a22 <defThread+0xe22>
			} else {
				if (!(iBlk % 16)) Report(0, ".");
 80039fc:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <defThread+0xe10>
 8003a08:	4938      	ldr	r1, [pc, #224]	; (8003aec <defThread+0xeec>)
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f7fe fcac 	bl	8002368 <Report>
				if (iBlk >= chipConf.BlockNbr) next_block_erase = 0;
 8003a10:	4b37      	ldr	r3, [pc, #220]	; (8003af0 <defThread+0xef0>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f8d7 2488 	ldr.w	r2, [r7, #1160]	; 0x488
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d302      	bcc.n	8003a22 <defThread+0xe22>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 348f 	strb.w	r3, [r7, #1167]	; 0x48f
			}
			if (!next_block_erase) {
 8003a22:	f897 348f 	ldrb.w	r3, [r7, #1167]	; 0x48f
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d117      	bne.n	8003a5a <defThread+0xe5a>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <defThread+0xed8>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d013      	beq.n	8003a5a <defThread+0xe5a>
 8003a32:	f000 fff7 	bl	8004a24 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	4a2d      	ldr	r2, [pc, #180]	; (8003af4 <defThread+0xef4>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	099a      	lsrs	r2, r3, #6
 8003a46:	4b26      	ldr	r3, [pc, #152]	; (8003ae0 <defThread+0xee0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	f8d7 2488 	ldr.w	r2, [r7, #1160]	; 0x488
 8003a52:	4929      	ldr	r1, [pc, #164]	; (8003af8 <defThread+0xef8>)
 8003a54:	2000      	movs	r0, #0
 8003a56:	f7fe fc87 	bl	8002368 <Report>
			}
		}
		//
		osDelay(5);
 8003a5a:	2005      	movs	r0, #5
 8003a5c:	f005 fe7a 	bl	8009754 <osDelay>
	while (loop) {
 8003a60:	f897 347d 	ldrb.w	r3, [r7, #1149]	; 0x47d
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f47f aa75 	bne.w	8002f54 <defThread+0x354>
	}

	if (wrBuf) free(wrBuf);
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <defThread+0xec4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <defThread+0xe7c>
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <defThread+0xec4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f008 ff68 	bl	800c94c <free>
	if (rdBuf) free(rdBuf);
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <defThread+0xee8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d004      	beq.n	8003a8e <defThread+0xe8e>
 8003a84:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <defThread+0xee8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f008 ff5f 	bl	800c94c <free>


	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <defThread+0xed8>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d011      	beq.n	8003aba <defThread+0xeba>
 8003a96:	4b19      	ldr	r3, [pc, #100]	; (8003afc <defThread+0xefc>)
 8003a98:	681c      	ldr	r4, [r3, #0]
 8003a9a:	f008 fd43 	bl	800c524 <xPortGetFreeHeapSize>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <defThread+0xee0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	9302      	str	r3, [sp, #8]
 8003aa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	9200      	str	r2, [sp, #0]
 8003aae:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <defThread+0xf00>)
 8003ab0:	4622      	mov	r2, r4
 8003ab2:	4914      	ldr	r1, [pc, #80]	; (8003b04 <defThread+0xf04>)
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f7fe fc57 	bl	8002368 <Report>
	osDelay(250);
 8003aba:	20fa      	movs	r0, #250	; 0xfa
 8003abc:	f005 fe4a 	bl	8009754 <osDelay>

	NVIC_SystemReset();
 8003ac0:	f7fd f8b6 	bl	8000c30 <__NVIC_SystemReset>
 8003ac4:	200013a4 	.word	0x200013a4
 8003ac8:	20000084 	.word	0x20000084
 8003acc:	20001370 	.word	0x20001370
 8003ad0:	20000078 	.word	0x20000078
 8003ad4:	2000034c 	.word	0x2000034c
 8003ad8:	20000068 	.word	0x20000068
 8003adc:	2000136c 	.word	0x2000136c
 8003ae0:	20000004 	.word	0x20000004
 8003ae4:	0800dc48 	.word	0x0800dc48
 8003ae8:	200013a0 	.word	0x200013a0
 8003aec:	0800dca0 	.word	0x0800dca0
 8003af0:	20001388 	.word	0x20001388
 8003af4:	10624dd3 	.word	0x10624dd3
 8003af8:	0800dca4 	.word	0x0800dca4
 8003afc:	20000000 	.word	0x20000000
 8003b00:	0800fe80 	.word	0x0800fe80
 8003b04:	0800dcbc 	.word	0x0800dcbc

08003b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b5b0      	push	{r4, r5, r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a10      	ldr	r2, [pc, #64]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d102      	bne.n	8003b20 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8003b1a:	f000 ff6f 	bl	80049fc <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8003b1e:	e016      	b.n	8003b4e <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b28:	d111      	bne.n	8003b4e <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8003b2a:	f7fe fae5 	bl	80020f8 <get_msCounter>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	f002 0403 	and.w	r4, r2, #3
 8003b36:	2500      	movs	r5, #0
 8003b38:	1ee3      	subs	r3, r4, #3
 8003b3a:	432b      	orrs	r3, r5
 8003b3c:	d105      	bne.n	8003b4a <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8003b3e:	f7fe facd 	bl	80020dc <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8003b42:	2180      	movs	r1, #128	; 0x80
 8003b44:	4805      	ldr	r0, [pc, #20]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003b46:	f001 fe36 	bl	80057b6 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8003b4a:	f7fe fae3 	bl	8002114 <inc_msCounter>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bdb0      	pop	{r4, r5, r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40020800 	.word	0x40020800

08003b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	devError |= devSYS;
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <Error_Handler+0x1c>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <Error_Handler+0x1c>)
 8003b70:	701a      	strb	r2, [r3, #0]
	errLedOn(true);
 8003b72:	2001      	movs	r0, #1
 8003b74:	f7fe fa8a 	bl	800208c <errLedOn>

  /* USER CODE END Error_Handler_Debug */
}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	2000034c 	.word	0x2000034c

08003b80 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2104      	movs	r1, #4
 8003b8e:	480c      	ldr	r0, [pc, #48]	; (8003bc0 <ST7789_WriteCommand+0x40>)
 8003b90:	f001 fdf8 	bl	8005784 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <ST7789_WriteCommand+0x44>)
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	2396      	movs	r3, #150	; 0x96
 8003b9a:	1df9      	adds	r1, r7, #7
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f003 fa38 	bl	8007012 <HAL_SPI_Transmit>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d006      	beq.n	8003bb6 <ST7789_WriteCommand+0x36>
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <ST7789_WriteCommand+0x48>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	f043 0310 	orr.w	r3, r3, #16
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <ST7789_WriteCommand+0x48>)
 8003bb4:	701a      	strb	r2, [r3, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40020000 	.word	0x40020000
 8003bc4:	2000006c 	.word	0x2000006c
 8003bc8:	2000034c 	.word	0x2000034c

08003bcc <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2104      	movs	r1, #4
 8003bda:	480e      	ldr	r0, [pc, #56]	; (8003c14 <ST7789_WriteCommands+0x48>)
 8003bdc:	f001 fdd2 	bl	8005784 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <ST7789_WriteCommands+0x4c>)
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	2196      	movs	r1, #150	; 0x96
 8003bea:	460b      	mov	r3, r1
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	f003 fa0d 	bl	8007012 <HAL_SPI_Transmit>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <ST7789_WriteCommands+0x40>
 8003bfe:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <ST7789_WriteCommands+0x50>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	f043 0310 	orr.w	r3, r3, #16
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <ST7789_WriteCommands+0x50>)
 8003c0a:	701a      	strb	r2, [r3, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40020000 	.word	0x40020000
 8003c18:	2000006c 	.word	0x2000006c
 8003c1c:	2000034c 	.word	0x2000034c

08003c20 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003c2e:	2201      	movs	r2, #1
 8003c30:	2104      	movs	r1, #4
 8003c32:	481f      	ldr	r0, [pc, #124]	; (8003cb0 <ST7789_WriteData+0x90>)
 8003c34:	f001 fda6 	bl	8005784 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8003c38:	e028      	b.n	8003c8c <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c40:	4293      	cmp	r3, r2
 8003c42:	bf28      	it	cs
 8003c44:	4613      	movcs	r3, r2
 8003c46:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003c48:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <ST7789_WriteData+0x94>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8003c4e:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <ST7789_WriteData+0x98>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	89ba      	ldrh	r2, [r7, #12]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f003 fb18 	bl	800728c <HAL_SPI_Transmit_DMA>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	461a      	mov	r2, r3
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003c66:	e002      	b.n	8003c6e <ST7789_WriteData+0x4e>
 8003c68:	2001      	movs	r0, #1
 8003c6a:	f000 fee7 	bl	8004a3c <HAL_Delay>
 8003c6e:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <ST7789_WriteData+0x94>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	f083 0301 	eor.w	r3, r3, #1
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f5      	bne.n	8003c68 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8003c7c:	89bb      	ldrh	r3, [r7, #12]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8003c84:	89bb      	ldrh	r3, [r7, #12]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1d3      	bne.n	8003c3a <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d006      	beq.n	8003ca6 <ST7789_WriteData+0x86>
 8003c98:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <ST7789_WriteData+0x9c>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	f043 0310 	orr.w	r3, r3, #16
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <ST7789_WriteData+0x9c>)
 8003ca4:	701a      	strb	r2, [r3, #0]
}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40020000 	.word	0x40020000
 8003cb4:	20000061 	.word	0x20000061
 8003cb8:	2000006c 	.word	0x2000006c
 8003cbc:	2000034c 	.word	0x2000034c

08003cc0 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003cce:	2201      	movs	r2, #1
 8003cd0:	2104      	movs	r1, #4
 8003cd2:	4814      	ldr	r0, [pc, #80]	; (8003d24 <ST7789_WriteDataLine+0x64>)
 8003cd4:	f001 fd56 	bl	8005784 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <ST7789_WriteDataLine+0x68>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <ST7789_WriteDataLine+0x6c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	b292      	uxth	r2, r2
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f003 facf 	bl	800728c <HAL_SPI_Transmit_DMA>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003cf2:	e002      	b.n	8003cfa <ST7789_WriteDataLine+0x3a>
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	f000 fea1 	bl	8004a3c <HAL_Delay>
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <ST7789_WriteDataLine+0x68>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	f083 0301 	eor.w	r3, r3, #1
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f5      	bne.n	8003cf4 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d006      	beq.n	8003d1c <ST7789_WriteDataLine+0x5c>
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <ST7789_WriteDataLine+0x70>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	f043 0310 	orr.w	r3, r3, #16
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <ST7789_WriteDataLine+0x70>)
 8003d1a:	701a      	strb	r2, [r3, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40020000 	.word	0x40020000
 8003d28:	20000061 	.word	0x20000061
 8003d2c:	2000006c 	.word	0x2000006c
 8003d30:	2000034c 	.word	0x2000034c

08003d34 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8003d3e:	2201      	movs	r2, #1
 8003d40:	2104      	movs	r1, #4
 8003d42:	480c      	ldr	r0, [pc, #48]	; (8003d74 <ST7789_WriteSmallData+0x40>)
 8003d44:	f001 fd1e 	bl	8005784 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <ST7789_WriteSmallData+0x44>)
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	2396      	movs	r3, #150	; 0x96
 8003d4e:	1df9      	adds	r1, r7, #7
 8003d50:	2201      	movs	r2, #1
 8003d52:	f003 f95e 	bl	8007012 <HAL_SPI_Transmit>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d006      	beq.n	8003d6a <ST7789_WriteSmallData+0x36>
 8003d5c:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <ST7789_WriteSmallData+0x48>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f043 0310 	orr.w	r3, r3, #16
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <ST7789_WriteSmallData+0x48>)
 8003d68:	701a      	strb	r2, [r3, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40020000 	.word	0x40020000
 8003d78:	2000006c 	.word	0x2000006c
 8003d7c:	2000034c 	.word	0x2000034c

08003d80 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <ipsOn+0x18>
 8003d90:	2029      	movs	r0, #41	; 0x29
 8003d92:	f7ff fef5 	bl	8003b80 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8003d96:	e002      	b.n	8003d9e <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8003d98:	2028      	movs	r0, #40	; 0x28
 8003d9a:	f7ff fef1 	bl	8003b80 <ST7789_WriteCommand>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8003db2:	2036      	movs	r0, #54	; 0x36
 8003db4:	f7ff fee4 	bl	8003b80 <ST7789_WriteCommand>
	switch (m) {
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d81a      	bhi.n	8003df4 <ST7789_SetRotation+0x4c>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <ST7789_SetRotation+0x1c>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003ddd 	.word	0x08003ddd
 8003dcc:	08003de5 	.word	0x08003de5
 8003dd0:	08003ded 	.word	0x08003ded
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8003dd4:	20c0      	movs	r0, #192	; 0xc0
 8003dd6:	f7ff ffad 	bl	8003d34 <ST7789_WriteSmallData>
		break;
 8003dda:	e00c      	b.n	8003df6 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003ddc:	20a0      	movs	r0, #160	; 0xa0
 8003dde:	f7ff ffa9 	bl	8003d34 <ST7789_WriteSmallData>
		break;
 8003de2:	e008      	b.n	8003df6 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f7ff ffa5 	bl	8003d34 <ST7789_WriteSmallData>
		break;
 8003dea:	e004      	b.n	8003df6 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003dec:	2060      	movs	r0, #96	; 0x60
 8003dee:	f7ff ffa1 	bl	8003d34 <ST7789_WriteSmallData>
		break;
 8003df2:	e000      	b.n	8003df6 <ST7789_SetRotation+0x4e>
	default:
		break;
 8003df4:	bf00      	nop
	}
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop

08003e00 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003e00:	b590      	push	{r4, r7, lr}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4604      	mov	r4, r0
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	80fb      	strh	r3, [r7, #6]
 8003e12:	4603      	mov	r3, r0
 8003e14:	80bb      	strh	r3, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	807b      	strh	r3, [r7, #2]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	82fb      	strh	r3, [r7, #22]
 8003e22:	887b      	ldrh	r3, [r7, #2]
 8003e24:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8003e26:	88bb      	ldrh	r3, [r7, #4]
 8003e28:	827b      	strh	r3, [r7, #18]
 8003e2a:	883b      	ldrh	r3, [r7, #0]
 8003e2c:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8003e2e:	202a      	movs	r0, #42	; 0x2a
 8003e30:	f7ff fea6 	bl	8003b80 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8003e34:	8afb      	ldrh	r3, [r7, #22]
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	733b      	strb	r3, [r7, #12]
 8003e3e:	8afb      	ldrh	r3, [r7, #22]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	737b      	strb	r3, [r7, #13]
 8003e44:	8abb      	ldrh	r3, [r7, #20]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	73bb      	strb	r3, [r7, #14]
 8003e4e:	8abb      	ldrh	r3, [r7, #20]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8003e54:	f107 030c 	add.w	r3, r7, #12
 8003e58:	2104      	movs	r1, #4
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fee0 	bl	8003c20 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8003e60:	202b      	movs	r0, #43	; 0x2b
 8003e62:	f7ff fe8d 	bl	8003b80 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8003e66:	8a7b      	ldrh	r3, [r7, #18]
 8003e68:	0a1b      	lsrs	r3, r3, #8
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	723b      	strb	r3, [r7, #8]
 8003e70:	8a7b      	ldrh	r3, [r7, #18]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	727b      	strb	r3, [r7, #9]
 8003e76:	8a3b      	ldrh	r3, [r7, #16]
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	72bb      	strb	r3, [r7, #10]
 8003e80:	8a3b      	ldrh	r3, [r7, #16]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8003e86:	f107 0308 	add.w	r3, r7, #8
 8003e8a:	2104      	movs	r1, #4
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fec7 	bl	8003c20 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8003e92:	202c      	movs	r0, #44	; 0x2c
 8003e94:	f7ff fe74 	bl	8003b80 <ST7789_WriteCommand>
}
 8003e98:	bf00      	nop
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8003ea4:	2014      	movs	r0, #20
 8003ea6:	f000 fdc9 	bl	8004a3c <HAL_Delay>
    ST7789_RST_Clr();
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2102      	movs	r1, #2
 8003eae:	4808      	ldr	r0, [pc, #32]	; (8003ed0 <ST7789_Reset+0x30>)
 8003eb0:	f001 fc68 	bl	8005784 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8003eb4:	200a      	movs	r0, #10
 8003eb6:	f000 fdc1 	bl	8004a3c <HAL_Delay>
    ST7789_RST_Set();
 8003eba:	2201      	movs	r2, #1
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	4804      	ldr	r0, [pc, #16]	; (8003ed0 <ST7789_Reset+0x30>)
 8003ec0:	f001 fc60 	bl	8005784 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8003ec4:	2014      	movs	r0, #20
 8003ec6:	f000 fdb9 	bl	8004a3c <HAL_Delay>
}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40020000 	.word	0x40020000

08003ed4 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b08f      	sub	sp, #60	; 0x3c
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8003ede:	203a      	movs	r0, #58	; 0x3a
 8003ee0:	f7ff fe4e 	bl	8003b80 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8003ee4:	2055      	movs	r0, #85	; 0x55
 8003ee6:	f7ff ff25 	bl	8003d34 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8003eea:	20b2      	movs	r0, #178	; 0xb2
 8003eec:	f7ff fe48 	bl	8003b80 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8003ef0:	4a3a      	ldr	r2, [pc, #232]	; (8003fdc <ST7789_Init+0x108>)
 8003ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003efa:	6018      	str	r0, [r3, #0]
 8003efc:	3304      	adds	r3, #4
 8003efe:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8003f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f04:	2105      	movs	r1, #5
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff fe8a 	bl	8003c20 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8003f0c:	2003      	movs	r0, #3
 8003f0e:	f7ff ff4b 	bl	8003da8 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8003f12:	20b7      	movs	r0, #183	; 0xb7
 8003f14:	f7ff fe34 	bl	8003b80 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8003f18:	2035      	movs	r0, #53	; 0x35
 8003f1a:	f7ff ff0b 	bl	8003d34 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8003f1e:	20bb      	movs	r0, #187	; 0xbb
 8003f20:	f7ff fe2e 	bl	8003b80 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8003f24:	2019      	movs	r0, #25
 8003f26:	f7ff ff05 	bl	8003d34 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8003f2a:	20c0      	movs	r0, #192	; 0xc0
 8003f2c:	f7ff fe28 	bl	8003b80 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8003f30:	202c      	movs	r0, #44	; 0x2c
 8003f32:	f7ff feff 	bl	8003d34 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8003f36:	20c2      	movs	r0, #194	; 0xc2
 8003f38:	f7ff fe22 	bl	8003b80 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	f7ff fef9 	bl	8003d34 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8003f42:	20ff      	movs	r0, #255	; 0xff
 8003f44:	f7ff fef6 	bl	8003d34 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8003f48:	20c3      	movs	r0, #195	; 0xc3
 8003f4a:	f7ff fe19 	bl	8003b80 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8003f4e:	2012      	movs	r0, #18
 8003f50:	f7ff fef0 	bl	8003d34 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8003f54:	20c4      	movs	r0, #196	; 0xc4
 8003f56:	f7ff fe13 	bl	8003b80 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8003f5a:	2020      	movs	r0, #32
 8003f5c:	f7ff feea 	bl	8003d34 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8003f60:	20c6      	movs	r0, #198	; 0xc6
 8003f62:	f7ff fe0d 	bl	8003b80 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8003f66:	200f      	movs	r0, #15
 8003f68:	f7ff fee4 	bl	8003d34 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8003f6c:	20d0      	movs	r0, #208	; 0xd0
 8003f6e:	f7ff fe07 	bl	8003b80 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8003f72:	20a4      	movs	r0, #164	; 0xa4
 8003f74:	f7ff fede 	bl	8003d34 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8003f78:	20a1      	movs	r0, #161	; 0xa1
 8003f7a:	f7ff fedb 	bl	8003d34 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8003f7e:	20e0      	movs	r0, #224	; 0xe0
 8003f80:	f7ff fdfe 	bl	8003b80 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8003f84:	4b16      	ldr	r3, [pc, #88]	; (8003fe0 <ST7789_Init+0x10c>)
 8003f86:	f107 041c 	add.w	r4, r7, #28
 8003f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f8c:	c407      	stmia	r4!, {r0, r1, r2}
 8003f8e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003f90:	f107 031c 	add.w	r3, r7, #28
 8003f94:	210e      	movs	r1, #14
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fe42 	bl	8003c20 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8003f9c:	20e1      	movs	r0, #225	; 0xe1
 8003f9e:	f7ff fdef 	bl	8003b80 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <ST7789_Init+0x110>)
 8003fa4:	f107 040c 	add.w	r4, r7, #12
 8003fa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003faa:	c407      	stmia	r4!, {r0, r1, r2}
 8003fac:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003fae:	f107 030c 	add.w	r3, r7, #12
 8003fb2:	210e      	movs	r1, #14
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fe33 	bl	8003c20 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <ST7789_Init+0x114>)
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 8003fbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fe01 	bl	8003bcc <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f80d 	bl	8003fec <ST7789_Fill_Color>
}
 8003fd2:	bf00      	nop
 8003fd4:	373c      	adds	r7, #60	; 0x3c
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd90      	pop	{r4, r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	0800dce8 	.word	0x0800dce8
 8003fe0:	0800dcf0 	.word	0x0800dcf0
 8003fe4:	0800dd00 	.word	0x0800dd00
 8003fe8:	28131121 	.word	0x28131121

08003fec <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b0fc      	sub	sp, #496	; 0x1f0
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003ff8:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003ffc:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8003ffe:	23ef      	movs	r3, #239	; 0xef
 8004000:	22ef      	movs	r2, #239	; 0xef
 8004002:	2100      	movs	r1, #0
 8004004:	2000      	movs	r0, #0
 8004006:	f7ff fefb 	bl	8003e00 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 800400a:	2300      	movs	r3, #0
 800400c:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8004010:	2300      	movs	r3, #0
 8004012:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004016:	e024      	b.n	8004062 <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8004018:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800401c:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	b29b      	uxth	r3, r3
 8004026:	b21a      	sxth	r2, r3
 8004028:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800402c:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	b21b      	sxth	r3, r3
 8004036:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800403a:	b21b      	sxth	r3, r3
 800403c:	4313      	orrs	r3, r2
 800403e:	b219      	sxth	r1, r3
 8004040:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004044:	f107 020c 	add.w	r2, r7, #12
 8004048:	4413      	add	r3, r2
 800404a:	b28a      	uxth	r2, r1
 800404c:	801a      	strh	r2, [r3, #0]
		i += 2;
 800404e:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004052:	3302      	adds	r3, #2
 8004054:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8004058:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800405c:	3301      	adds	r3, #1
 800405e:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004062:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004066:	2bef      	cmp	r3, #239	; 0xef
 8004068:	d9d6      	bls.n	8004018 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 800406a:	2300      	movs	r3, #0
 800406c:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004070:	e00b      	b.n	800408a <ST7789_Fill_Color+0x9e>
 8004072:	f107 030c 	add.w	r3, r7, #12
 8004076:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fe20 	bl	8003cc0 <ST7789_WriteDataLine>
 8004080:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004084:	3301      	adds	r3, #1
 8004086:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800408a:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800408e:	2bef      	cmp	r3, #239	; 0xef
 8004090:	d9ef      	bls.n	8004072 <ST7789_Fill_Color+0x86>

//#endif
}
 8004092:	bf00      	nop
 8004094:	bf00      	nop
 8004096:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800409e:	b590      	push	{r4, r7, lr}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	4604      	mov	r4, r0
 80040a6:	4608      	mov	r0, r1
 80040a8:	4611      	mov	r1, r2
 80040aa:	461a      	mov	r2, r3
 80040ac:	4623      	mov	r3, r4
 80040ae:	80fb      	strh	r3, [r7, #6]
 80040b0:	4603      	mov	r3, r0
 80040b2:	80bb      	strh	r3, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	807b      	strh	r3, [r7, #2]
 80040b8:	4613      	mov	r3, r2
 80040ba:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 80040bc:	887b      	ldrh	r3, [r7, #2]
 80040be:	2bef      	cmp	r3, #239	; 0xef
 80040c0:	d82b      	bhi.n	800411a <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80040c2:	883b      	ldrh	r3, [r7, #0]
 80040c4:	2bef      	cmp	r3, #239	; 0xef
 80040c6:	d828      	bhi.n	800411a <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 80040c8:	8c3b      	ldrh	r3, [r7, #32]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	723b      	strb	r3, [r7, #8]
 80040d2:	8c3b      	ldrh	r3, [r7, #32]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80040d8:	883b      	ldrh	r3, [r7, #0]
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	88b9      	ldrh	r1, [r7, #4]
 80040de:	88f8      	ldrh	r0, [r7, #6]
 80040e0:	f7ff fe8e 	bl	8003e00 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 80040e4:	88bb      	ldrh	r3, [r7, #4]
 80040e6:	81fb      	strh	r3, [r7, #14]
 80040e8:	e012      	b.n	8004110 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	81bb      	strh	r3, [r7, #12]
 80040ee:	e008      	b.n	8004102 <ST7789_Fill+0x64>
 80040f0:	f107 0308 	add.w	r3, r7, #8
 80040f4:	2102      	movs	r1, #2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fd92 	bl	8003c20 <ST7789_WriteData>
 80040fc:	89bb      	ldrh	r3, [r7, #12]
 80040fe:	3301      	adds	r3, #1
 8004100:	81bb      	strh	r3, [r7, #12]
 8004102:	89ba      	ldrh	r2, [r7, #12]
 8004104:	887b      	ldrh	r3, [r7, #2]
 8004106:	429a      	cmp	r2, r3
 8004108:	d9f2      	bls.n	80040f0 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 800410a:	89fb      	ldrh	r3, [r7, #14]
 800410c:	3301      	adds	r3, #1
 800410e:	81fb      	strh	r3, [r7, #14]
 8004110:	89fa      	ldrh	r2, [r7, #14]
 8004112:	883b      	ldrh	r3, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d9e8      	bls.n	80040ea <ST7789_Fill+0x4c>
 8004118:	e000      	b.n	800411c <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 800411a:	bf00      	nop
	}
}
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	bd90      	pop	{r4, r7, pc}

08004122 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004122:	b082      	sub	sp, #8
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b089      	sub	sp, #36	; 0x24
 8004128:	af00      	add	r7, sp, #0
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
 800412c:	4603      	mov	r3, r0
 800412e:	80fb      	strh	r3, [r7, #6]
 8004130:	460b      	mov	r3, r1
 8004132:	80bb      	strh	r3, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8004138:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800413c:	b29a      	uxth	r2, r3
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	4413      	add	r3, r2
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29c      	uxth	r4, r3
 8004148:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800414c:	b29a      	uxth	r2, r3
 800414e:	88bb      	ldrh	r3, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29b      	uxth	r3, r3
 8004158:	88b9      	ldrh	r1, [r7, #4]
 800415a:	88f8      	ldrh	r0, [r7, #6]
 800415c:	4622      	mov	r2, r4
 800415e:	f7ff fe4f 	bl	8003e00 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8004162:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004164:	0a1b      	lsrs	r3, r3, #8
 8004166:	b29b      	uxth	r3, r3
 8004168:	b2db      	uxtb	r3, r3
 800416a:	733b      	strb	r3, [r7, #12]
 800416c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800416e:	b2db      	uxtb	r3, r3
 8004170:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8004172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	b29b      	uxth	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	723b      	strb	r3, [r7, #8]
 800417e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004182:	b2db      	uxtb	r3, r3
 8004184:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	e02f      	b.n	80041f0 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8004190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	3b20      	subs	r3, #32
 8004196:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	4619      	mov	r1, r3
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	440b      	add	r3, r1
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	4413      	add	r3, r2
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	e015      	b.n	80041de <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <ST7789_WriteChar+0xa8>
				uk = cdata;
 80041c2:	f107 030c 	add.w	r3, r7, #12
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	e002      	b.n	80041d0 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 80041ca:	f107 0308 	add.w	r3, r7, #8
 80041ce:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 80041d0:	2102      	movs	r1, #2
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	f7ff fd24 	bl	8003c20 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	3301      	adds	r3, #1
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80041e2:	461a      	mov	r2, r3
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d3e3      	bcc.n	80041b2 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	3301      	adds	r3, #1
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80041f4:	461a      	mov	r2, r3
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d3c9      	bcc.n	8004190 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	3724      	adds	r7, #36	; 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004208:	b002      	add	sp, #8
 800420a:	4770      	bx	lr

0800420c <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800420c:	b082      	sub	sp, #8
 800420e:	b580      	push	{r7, lr}
 8004210:	b086      	sub	sp, #24
 8004212:	af04      	add	r7, sp, #16
 8004214:	603a      	str	r2, [r7, #0]
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	4603      	mov	r3, r0
 800421a:	80fb      	strh	r3, [r7, #6]
 800421c:	460b      	mov	r3, r1
 800421e:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d03f      	beq.n	80042a6 <ST7789_WriteString+0x9a>

	while (*str) {
 8004226:	e039      	b.n	800429c <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	7d3a      	ldrb	r2, [r7, #20]
 800422c:	4413      	add	r3, r2
 800422e:	2bef      	cmp	r3, #239	; 0xef
 8004230:	dd13      	ble.n	800425a <ST7789_WriteString+0x4e>
			x = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004236:	7d7b      	ldrb	r3, [r7, #21]
 8004238:	b29a      	uxth	r2, r3
 800423a:	88bb      	ldrh	r3, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8004240:	88bb      	ldrh	r3, [r7, #4]
 8004242:	7d7a      	ldrb	r2, [r7, #21]
 8004244:	4413      	add	r3, r2
 8004246:	2bef      	cmp	r3, #239	; 0xef
 8004248:	dc2f      	bgt.n	80042aa <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b20      	cmp	r3, #32
 8004250:	d103      	bne.n	800425a <ST7789_WriteString+0x4e>
				str++;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	603b      	str	r3, [r7, #0]
				continue;
 8004258:	e020      	b.n	800429c <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b0a      	cmp	r3, #10
 8004260:	d012      	beq.n	8004288 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781a      	ldrb	r2, [r3, #0]
 8004266:	88b9      	ldrh	r1, [r7, #4]
 8004268:	88f8      	ldrh	r0, [r7, #6]
 800426a:	8c3b      	ldrh	r3, [r7, #32]
 800426c:	9302      	str	r3, [sp, #8]
 800426e:	8bbb      	ldrh	r3, [r7, #28]
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f7ff ff53 	bl	8004122 <ST7789_WriteChar>
			x += font.width;
 800427c:	7d3b      	ldrb	r3, [r7, #20]
 800427e:	b29a      	uxth	r2, r3
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	4413      	add	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
 8004286:	e006      	b.n	8004296 <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800428c:	7d7b      	ldrb	r3, [r7, #21]
 800428e:	b29a      	uxth	r2, r3
 8004290:	88bb      	ldrh	r3, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	3301      	adds	r3, #1
 800429a:	603b      	str	r3, [r7, #0]
	while (*str) {
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1c1      	bne.n	8004228 <ST7789_WriteString+0x1c>
 80042a4:	e002      	b.n	80042ac <ST7789_WriteString+0xa0>
	if (!str) return;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 80042aa:	bf00      	nop
	}
}
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042b4:	b002      	add	sp, #8
 80042b6:	4770      	bx	lr

080042b8 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b0a4      	sub	sp, #144	; 0x90
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	f107 0310 	add.w	r3, r7, #16
 80042cc:	227c      	movs	r2, #124	; 0x7c
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f008 fb51 	bl	800c978 <memset>

	memset(st, 0x20, 127);
 80042d6:	f107 030c 	add.w	r3, r7, #12
 80042da:	227f      	movs	r2, #127	; 0x7f
 80042dc:	2120      	movs	r1, #32
 80042de:	4618      	mov	r0, r3
 80042e0:	f008 fb4a 	bl	800c978 <memset>
	int8_t k = strlen(str);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fb ff73 	bl	80001d0 <strlen>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 80042f0:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80042f4:	887b      	ldrh	r3, [r7, #2]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	da25      	bge.n	8004346 <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 80042fa:	887a      	ldrh	r2, [r7, #2]
 80042fc:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	0fda      	lsrs	r2, r3, #31
 8004304:	4413      	add	r3, r2
 8004306:	105b      	asrs	r3, r3, #1
 8004308:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 800430c:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004310:	f107 020c 	add.w	r2, r7, #12
 8004314:	4413      	add	r3, r2
 8004316:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4618      	mov	r0, r3
 800431e:	f008 fb1d 	bl	800c95c <memcpy>
		st[k + n*2 + 1] = '\0';
 8004322:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004326:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4413      	add	r3, r2
 800432e:	3301      	adds	r3, #1
 8004330:	3390      	adds	r3, #144	; 0x90
 8004332:	443b      	add	r3, r7
 8004334:	2200      	movs	r2, #0
 8004336:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 800433a:	f107 030c 	add.w	r3, r7, #12
 800433e:	4619      	mov	r1, r3
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f008 fccd 	bl	800cce0 <strcpy>
	}

	return str;
 8004346:	687b      	ldr	r3, [r7, #4]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3790      	adds	r7, #144	; 0x90
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <HAL_MspInit+0x74>)
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	4a19      	ldr	r2, [pc, #100]	; (80043c4 <HAL_MspInit+0x74>)
 8004360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004364:	6453      	str	r3, [r2, #68]	; 0x44
 8004366:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <HAL_MspInit+0x74>)
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436e:	607b      	str	r3, [r7, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <HAL_MspInit+0x74>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <HAL_MspInit+0x74>)
 800437c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004380:	6413      	str	r3, [r2, #64]	; 0x40
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_MspInit+0x74>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800438e:	2200      	movs	r2, #0
 8004390:	210f      	movs	r1, #15
 8004392:	f06f 0001 	mvn.w	r0, #1
 8004396:	f000 fc2d 	bl	8004bf4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800439a:	2200      	movs	r2, #0
 800439c:	2105      	movs	r1, #5
 800439e:	2005      	movs	r0, #5
 80043a0:	f000 fc28 	bl	8004bf4 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80043a4:	2005      	movs	r0, #5
 80043a6:	f000 fc41 	bl	8004c2c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80043aa:	2200      	movs	r2, #0
 80043ac:	2105      	movs	r1, #5
 80043ae:	2005      	movs	r0, #5
 80043b0:	f000 fc20 	bl	8004bf4 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80043b4:	2005      	movs	r0, #5
 80043b6:	f000 fc39 	bl	8004c2c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800

080043c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043d0:	f107 0308 	add.w	r3, r7, #8
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a0c      	ldr	r2, [pc, #48]	; (8004414 <HAL_RTC_MspInit+0x4c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d110      	bne.n	800440a <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80043e8:	2302      	movs	r3, #2
 80043ea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <HAL_RTC_MspInit+0x50>)
 80043ee:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043f0:	f107 0308 	add.w	r3, r7, #8
 80043f4:	4618      	mov	r0, r3
 80043f6:	f002 f9a3 	bl	8006740 <HAL_RCCEx_PeriphCLKConfig>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8004400:	f7ff fbae 	bl	8003b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RTC_MspInit+0x54>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800440a:	bf00      	nop
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40002800 	.word	0x40002800
 8004418:	00190300 	.word	0x00190300
 800441c:	42470e3c 	.word	0x42470e3c

08004420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	; 0x28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004428:	f107 0314 	add.w	r3, r7, #20
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a39      	ldr	r2, [pc, #228]	; (8004524 <HAL_SPI_MspInit+0x104>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d16b      	bne.n	800451a <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	4b38      	ldr	r3, [pc, #224]	; (8004528 <HAL_SPI_MspInit+0x108>)
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	4a37      	ldr	r2, [pc, #220]	; (8004528 <HAL_SPI_MspInit+0x108>)
 800444c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004450:	6453      	str	r3, [r2, #68]	; 0x44
 8004452:	4b35      	ldr	r3, [pc, #212]	; (8004528 <HAL_SPI_MspInit+0x108>)
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	4b31      	ldr	r3, [pc, #196]	; (8004528 <HAL_SPI_MspInit+0x108>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	4a30      	ldr	r2, [pc, #192]	; (8004528 <HAL_SPI_MspInit+0x108>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	6313      	str	r3, [r2, #48]	; 0x30
 800446e:	4b2e      	ldr	r3, [pc, #184]	; (8004528 <HAL_SPI_MspInit+0x108>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 800447a:	23a0      	movs	r3, #160	; 0xa0
 800447c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447e:	2302      	movs	r3, #2
 8004480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004486:	2303      	movs	r3, #3
 8004488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800448a:	2305      	movs	r3, #5
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448e:	f107 0314 	add.w	r3, r7, #20
 8004492:	4619      	mov	r1, r3
 8004494:	4825      	ldr	r0, [pc, #148]	; (800452c <HAL_SPI_MspInit+0x10c>)
 8004496:	f000 ffd9 	bl	800544c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800449a:	4b25      	ldr	r3, [pc, #148]	; (8004530 <HAL_SPI_MspInit+0x110>)
 800449c:	4a25      	ldr	r2, [pc, #148]	; (8004534 <HAL_SPI_MspInit+0x114>)
 800449e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80044a0:	4b23      	ldr	r3, [pc, #140]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044a2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80044a6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044a8:	4b21      	ldr	r3, [pc, #132]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044aa:	2240      	movs	r2, #64	; 0x40
 80044ac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ae:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044b4:	4b1e      	ldr	r3, [pc, #120]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044ba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044bc:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044be:	2200      	movs	r2, #0
 80044c0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044c2:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80044c8:	4b19      	ldr	r3, [pc, #100]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80044ce:	4b18      	ldr	r3, [pc, #96]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044d4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80044d6:	4b16      	ldr	r3, [pc, #88]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044d8:	2204      	movs	r2, #4
 80044da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80044dc:	4b14      	ldr	r3, [pc, #80]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044de:	2203      	movs	r2, #3
 80044e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80044ee:	4810      	ldr	r0, [pc, #64]	; (8004530 <HAL_SPI_MspInit+0x110>)
 80044f0:	f000 fbaa 	bl	8004c48 <HAL_DMA_Init>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80044fa:	f7ff fb31 	bl	8003b60 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a0b      	ldr	r2, [pc, #44]	; (8004530 <HAL_SPI_MspInit+0x110>)
 8004502:	649a      	str	r2, [r3, #72]	; 0x48
 8004504:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <HAL_SPI_MspInit+0x110>)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800450a:	2200      	movs	r2, #0
 800450c:	2102      	movs	r1, #2
 800450e:	2023      	movs	r0, #35	; 0x23
 8004510:	f000 fb70 	bl	8004bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004514:	2023      	movs	r0, #35	; 0x23
 8004516:	f000 fb89 	bl	8004c2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800451a:	bf00      	nop
 800451c:	3728      	adds	r7, #40	; 0x28
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40013000 	.word	0x40013000
 8004528:	40023800 	.word	0x40023800
 800452c:	40020000 	.word	0x40020000
 8004530:	200001b4 	.word	0x200001b4
 8004534:	40026458 	.word	0x40026458

08004538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004548:	d115      	bne.n	8004576 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <HAL_TIM_Base_MspInit+0x48>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	4a0b      	ldr	r2, [pc, #44]	; (8004580 <HAL_TIM_Base_MspInit+0x48>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	6413      	str	r3, [r2, #64]	; 0x40
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_TIM_Base_MspInit+0x48>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004566:	2200      	movs	r2, #0
 8004568:	2101      	movs	r1, #1
 800456a:	201c      	movs	r0, #28
 800456c:	f000 fb42 	bl	8004bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004570:	201c      	movs	r0, #28
 8004572:	f000 fb5b 	bl	8004c2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800

08004584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800458c:	f107 0314 	add.w	r3, r7, #20
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a35      	ldr	r2, [pc, #212]	; (8004678 <HAL_UART_MspInit+0xf4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d163      	bne.n	800466e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	4b34      	ldr	r3, [pc, #208]	; (800467c <HAL_UART_MspInit+0xf8>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	4a33      	ldr	r2, [pc, #204]	; (800467c <HAL_UART_MspInit+0xf8>)
 80045b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b4:	6413      	str	r3, [r2, #64]	; 0x40
 80045b6:	4b31      	ldr	r3, [pc, #196]	; (800467c <HAL_UART_MspInit+0xf8>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	4b2d      	ldr	r3, [pc, #180]	; (800467c <HAL_UART_MspInit+0xf8>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	4a2c      	ldr	r2, [pc, #176]	; (800467c <HAL_UART_MspInit+0xf8>)
 80045cc:	f043 0302 	orr.w	r3, r3, #2
 80045d0:	6313      	str	r3, [r2, #48]	; 0x30
 80045d2:	4b2a      	ldr	r3, [pc, #168]	; (800467c <HAL_UART_MspInit+0xf8>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 80045de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e4:	2302      	movs	r3, #2
 80045e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ec:	2303      	movs	r3, #3
 80045ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80045f0:	2307      	movs	r3, #7
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f4:	f107 0314 	add.w	r3, r7, #20
 80045f8:	4619      	mov	r1, r3
 80045fa:	4821      	ldr	r0, [pc, #132]	; (8004680 <HAL_UART_MspInit+0xfc>)
 80045fc:	f000 ff26 	bl	800544c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004600:	4b20      	ldr	r3, [pc, #128]	; (8004684 <HAL_UART_MspInit+0x100>)
 8004602:	4a21      	ldr	r2, [pc, #132]	; (8004688 <HAL_UART_MspInit+0x104>)
 8004604:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004606:	4b1f      	ldr	r3, [pc, #124]	; (8004684 <HAL_UART_MspInit+0x100>)
 8004608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800460c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800460e:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <HAL_UART_MspInit+0x100>)
 8004610:	2240      	movs	r2, #64	; 0x40
 8004612:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004614:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <HAL_UART_MspInit+0x100>)
 8004616:	2200      	movs	r2, #0
 8004618:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800461a:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <HAL_UART_MspInit+0x100>)
 800461c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004620:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004622:	4b18      	ldr	r3, [pc, #96]	; (8004684 <HAL_UART_MspInit+0x100>)
 8004624:	2200      	movs	r2, #0
 8004626:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004628:	4b16      	ldr	r3, [pc, #88]	; (8004684 <HAL_UART_MspInit+0x100>)
 800462a:	2200      	movs	r2, #0
 800462c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800462e:	4b15      	ldr	r3, [pc, #84]	; (8004684 <HAL_UART_MspInit+0x100>)
 8004630:	2200      	movs	r2, #0
 8004632:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004634:	4b13      	ldr	r3, [pc, #76]	; (8004684 <HAL_UART_MspInit+0x100>)
 8004636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800463a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800463c:	4b11      	ldr	r3, [pc, #68]	; (8004684 <HAL_UART_MspInit+0x100>)
 800463e:	2200      	movs	r2, #0
 8004640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004642:	4810      	ldr	r0, [pc, #64]	; (8004684 <HAL_UART_MspInit+0x100>)
 8004644:	f000 fb00 	bl	8004c48 <HAL_DMA_Init>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800464e:	f7ff fa87 	bl	8003b60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <HAL_UART_MspInit+0x100>)
 8004656:	635a      	str	r2, [r3, #52]	; 0x34
 8004658:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <HAL_UART_MspInit+0x100>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800465e:	2200      	movs	r2, #0
 8004660:	2105      	movs	r1, #5
 8004662:	2027      	movs	r0, #39	; 0x27
 8004664:	f000 fac6 	bl	8004bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004668:	2027      	movs	r0, #39	; 0x27
 800466a:	f000 fadf 	bl	8004c2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800466e:	bf00      	nop
 8004670:	3728      	adds	r7, #40	; 0x28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40004800 	.word	0x40004800
 800467c:	40023800 	.word	0x40023800
 8004680:	40020400 	.word	0x40020400
 8004684:	200002a0 	.word	0x200002a0
 8004688:	40026058 	.word	0x40026058

0800468c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	609a      	str	r2, [r3, #8]
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80046a0:	4b20      	ldr	r3, [pc, #128]	; (8004724 <HAL_FSMC_MspInit+0x98>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d139      	bne.n	800471c <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 80046a8:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <HAL_FSMC_MspInit+0x98>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_FSMC_MspInit+0x9c>)
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <HAL_FSMC_MspInit+0x9c>)
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	6393      	str	r3, [r2, #56]	; 0x38
 80046be:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <HAL_FSMC_MspInit+0x9c>)
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80046ca:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80046ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d0:	2302      	movs	r3, #2
 80046d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046d8:	2303      	movs	r3, #3
 80046da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80046dc:	230c      	movs	r3, #12
 80046de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046e0:	1d3b      	adds	r3, r7, #4
 80046e2:	4619      	mov	r1, r3
 80046e4:	4811      	ldr	r0, [pc, #68]	; (800472c <HAL_FSMC_MspInit+0xa0>)
 80046e6:	f000 feb1 	bl	800544c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 80046ea:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 80046ee:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f0:	2302      	movs	r3, #2
 80046f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f8:	2303      	movs	r3, #3
 80046fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80046fc:	230c      	movs	r3, #12
 80046fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004700:	1d3b      	adds	r3, r7, #4
 8004702:	4619      	mov	r1, r3
 8004704:	480a      	ldr	r0, [pc, #40]	; (8004730 <HAL_FSMC_MspInit+0xa4>)
 8004706:	f000 fea1 	bl	800544c <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 800470a:	2200      	movs	r2, #0
 800470c:	2105      	movs	r1, #5
 800470e:	2030      	movs	r0, #48	; 0x30
 8004710:	f000 fa70 	bl	8004bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004714:	2030      	movs	r0, #48	; 0x30
 8004716:	f000 fa89 	bl	8004c2c <HAL_NVIC_EnableIRQ>
 800471a:	e000      	b.n	800471e <HAL_FSMC_MspInit+0x92>
    return;
 800471c:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20001bac 	.word	0x20001bac
 8004728:	40023800 	.word	0x40023800
 800472c:	40021000 	.word	0x40021000
 8004730:	40020c00 	.word	0x40020c00

08004734 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 800473c:	f7ff ffa6 	bl	800468c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08c      	sub	sp, #48	; 0x30
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004758:	2200      	movs	r2, #0
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	2019      	movs	r0, #25
 800475e:	f000 fa49 	bl	8004bf4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004762:	2019      	movs	r0, #25
 8004764:	f000 fa62 	bl	8004c2c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <HAL_InitTick+0xa4>)
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	4a1e      	ldr	r2, [pc, #120]	; (80047ec <HAL_InitTick+0xa4>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6453      	str	r3, [r2, #68]	; 0x44
 8004778:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <HAL_InitTick+0xa4>)
 800477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004784:	f107 0210 	add.w	r2, r7, #16
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f001 ffa4 	bl	80066dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004794:	f001 ff8e 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>
 8004798:	4603      	mov	r3, r0
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	4a13      	ldr	r2, [pc, #76]	; (80047f0 <HAL_InitTick+0xa8>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	0c9b      	lsrs	r3, r3, #18
 80047a8:	3b01      	subs	r3, #1
 80047aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80047ac:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <HAL_InitTick+0xac>)
 80047ae:	4a12      	ldr	r2, [pc, #72]	; (80047f8 <HAL_InitTick+0xb0>)
 80047b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <HAL_InitTick+0xac>)
 80047b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80047ba:	4a0e      	ldr	r2, [pc, #56]	; (80047f4 <HAL_InitTick+0xac>)
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <HAL_InitTick+0xac>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <HAL_InitTick+0xac>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80047cc:	4809      	ldr	r0, [pc, #36]	; (80047f4 <HAL_InitTick+0xac>)
 80047ce:	f003 f887 	bl	80078e0 <HAL_TIM_Base_Init>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80047d8:	4806      	ldr	r0, [pc, #24]	; (80047f4 <HAL_InitTick+0xac>)
 80047da:	f003 f8d1 	bl	8007980 <HAL_TIM_Base_Start_IT>
 80047de:	4603      	mov	r3, r0
 80047e0:	e000      	b.n	80047e4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3730      	adds	r7, #48	; 0x30
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40023800 	.word	0x40023800
 80047f0:	431bde83 	.word	0x431bde83
 80047f4:	20001bb0 	.word	0x20001bb0
 80047f8:	40010000 	.word	0x40010000

080047fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004800:	bf00      	nop
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800480a:	b480      	push	{r7}
 800480c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800480e:	e7fe      	b.n	800480e <HardFault_Handler+0x4>

08004810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004814:	e7fe      	b.n	8004814 <MemManage_Handler+0x4>

08004816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004816:	b480      	push	{r7}
 8004818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800481a:	e7fe      	b.n	800481a <BusFault_Handler+0x4>

0800481c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004820:	e7fe      	b.n	8004820 <UsageFault_Handler+0x4>

08004822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004822:	b480      	push	{r7}
 8004824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004826:	bf00      	nop
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004834:	bf00      	nop
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004844:	4802      	ldr	r0, [pc, #8]	; (8004850 <DMA1_Stream3_IRQHandler+0x10>)
 8004846:	f000 fb97 	bl	8004f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	200002a0 	.word	0x200002a0

08004854 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004858:	4802      	ldr	r0, [pc, #8]	; (8004864 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800485a:	f003 f901 	bl	8007a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20001bb0 	.word	0x20001bb0

08004868 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800486c:	4802      	ldr	r0, [pc, #8]	; (8004878 <TIM2_IRQHandler+0x10>)
 800486e:	f003 f8f7 	bl	8007a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000214 	.word	0x20000214

0800487c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004880:	4802      	ldr	r0, [pc, #8]	; (800488c <SPI1_IRQHandler+0x10>)
 8004882:	f002 fdb9 	bl	80073f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	2000015c 	.word	0x2000015c

08004890 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004894:	4802      	ldr	r0, [pc, #8]	; (80048a0 <USART3_IRQHandler+0x10>)
 8004896:	f003 fda1 	bl	80083dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	2000025c 	.word	0x2000025c

080048a4 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 80048a8:	4802      	ldr	r0, [pc, #8]	; (80048b4 <FSMC_IRQHandler+0x10>)
 80048aa:	f000 ffec 	bl	8005886 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000300 	.word	0x20000300

080048b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80048bc:	4802      	ldr	r0, [pc, #8]	; (80048c8 <DMA2_Stream3_IRQHandler+0x10>)
 80048be:	f000 fb5b 	bl	8004f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	200001b4 	.word	0x200001b4

080048cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048d4:	4a14      	ldr	r2, [pc, #80]	; (8004928 <_sbrk+0x5c>)
 80048d6:	4b15      	ldr	r3, [pc, #84]	; (800492c <_sbrk+0x60>)
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048e0:	4b13      	ldr	r3, [pc, #76]	; (8004930 <_sbrk+0x64>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <_sbrk+0x64>)
 80048ea:	4a12      	ldr	r2, [pc, #72]	; (8004934 <_sbrk+0x68>)
 80048ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048ee:	4b10      	ldr	r3, [pc, #64]	; (8004930 <_sbrk+0x64>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4413      	add	r3, r2
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d207      	bcs.n	800490c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048fc:	f007 ff4e 	bl	800c79c <__errno>
 8004900:	4603      	mov	r3, r0
 8004902:	220c      	movs	r2, #12
 8004904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800490a:	e009      	b.n	8004920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800490c:	4b08      	ldr	r3, [pc, #32]	; (8004930 <_sbrk+0x64>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004912:	4b07      	ldr	r3, [pc, #28]	; (8004930 <_sbrk+0x64>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4413      	add	r3, r2
 800491a:	4a05      	ldr	r2, [pc, #20]	; (8004930 <_sbrk+0x64>)
 800491c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800491e:	68fb      	ldr	r3, [r7, #12]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20020000 	.word	0x20020000
 800492c:	00000800 	.word	0x00000800
 8004930:	20001bf8 	.word	0x20001bf8
 8004934:	20006a20 	.word	0x20006a20

08004938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800493c:	4b08      	ldr	r3, [pc, #32]	; (8004960 <SystemInit+0x28>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	4a07      	ldr	r2, [pc, #28]	; (8004960 <SystemInit+0x28>)
 8004944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <SystemInit+0x28>)
 800494e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004952:	609a      	str	r2, [r3, #8]
#endif
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000ed00 	.word	0xe000ed00

08004964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800499c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004968:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800496a:	e003      	b.n	8004974 <LoopCopyDataInit>

0800496c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800496e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004970:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004972:	3104      	adds	r1, #4

08004974 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004974:	480b      	ldr	r0, [pc, #44]	; (80049a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004978:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800497a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800497c:	d3f6      	bcc.n	800496c <CopyDataInit>
  ldr  r2, =_sbss
 800497e:	4a0b      	ldr	r2, [pc, #44]	; (80049ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004980:	e002      	b.n	8004988 <LoopFillZerobss>

08004982 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004982:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004984:	f842 3b04 	str.w	r3, [r2], #4

08004988 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800498a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800498c:	d3f9      	bcc.n	8004982 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800498e:	f7ff ffd3 	bl	8004938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004992:	f007 ffb5 	bl	800c900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004996:	f7fc f961 	bl	8000c5c <main>
  bx  lr    
 800499a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800499c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80049a0:	08010050 	.word	0x08010050
  ldr  r0, =_sdata
 80049a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80049a8:	20000120 	.word	0x20000120
  ldr  r2, =_sbss
 80049ac:	20000120 	.word	0x20000120
  ldr  r3, = _ebss
 80049b0:	20006a20 	.word	0x20006a20

080049b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049b4:	e7fe      	b.n	80049b4 <ADC_IRQHandler>
	...

080049b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049bc:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <HAL_Init+0x40>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a0d      	ldr	r2, [pc, #52]	; (80049f8 <HAL_Init+0x40>)
 80049c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_Init+0x40>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <HAL_Init+0x40>)
 80049ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049d4:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <HAL_Init+0x40>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a07      	ldr	r2, [pc, #28]	; (80049f8 <HAL_Init+0x40>)
 80049da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049e0:	2003      	movs	r0, #3
 80049e2:	f000 f8fc 	bl	8004bde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049e6:	200f      	movs	r0, #15
 80049e8:	f7ff feae 	bl	8004748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049ec:	f7ff fcb0 	bl	8004350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023c00 	.word	0x40023c00

080049fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_IncTick+0x20>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_IncTick+0x24>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <HAL_IncTick+0x24>)
 8004a0e:	6013      	str	r3, [r2, #0]
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	200000a4 	.word	0x200000a4
 8004a20:	20001bfc 	.word	0x20001bfc

08004a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return uwTick;
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <HAL_GetTick+0x14>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20001bfc 	.word	0x20001bfc

08004a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a44:	f7ff ffee 	bl	8004a24 <HAL_GetTick>
 8004a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a54:	d005      	beq.n	8004a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <HAL_Delay+0x44>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a62:	bf00      	nop
 8004a64:	f7ff ffde 	bl	8004a24 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d8f7      	bhi.n	8004a64 <HAL_Delay+0x28>
  {
  }
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	200000a4 	.word	0x200000a4

08004a84 <__NVIC_SetPriorityGrouping>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ab6:	4a04      	ldr	r2, [pc, #16]	; (8004ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	60d3      	str	r3, [r2, #12]
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <__NVIC_GetPriorityGrouping>:
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ad0:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	0a1b      	lsrs	r3, r3, #8
 8004ad6:	f003 0307 	and.w	r3, r3, #7
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000ed00 	.word	0xe000ed00

08004ae8 <__NVIC_EnableIRQ>:
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	db0b      	blt.n	8004b12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	f003 021f 	and.w	r2, r3, #31
 8004b00:	4907      	ldr	r1, [pc, #28]	; (8004b20 <__NVIC_EnableIRQ+0x38>)
 8004b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	2001      	movs	r0, #1
 8004b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000e100 	.word	0xe000e100

08004b24 <__NVIC_SetPriority>:
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	6039      	str	r1, [r7, #0]
 8004b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	db0a      	blt.n	8004b4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	490c      	ldr	r1, [pc, #48]	; (8004b70 <__NVIC_SetPriority+0x4c>)
 8004b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b42:	0112      	lsls	r2, r2, #4
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	440b      	add	r3, r1
 8004b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b4c:	e00a      	b.n	8004b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	4908      	ldr	r1, [pc, #32]	; (8004b74 <__NVIC_SetPriority+0x50>)
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	3b04      	subs	r3, #4
 8004b5c:	0112      	lsls	r2, r2, #4
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	440b      	add	r3, r1
 8004b62:	761a      	strb	r2, [r3, #24]
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	e000e100 	.word	0xe000e100
 8004b74:	e000ed00 	.word	0xe000ed00

08004b78 <NVIC_EncodePriority>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b089      	sub	sp, #36	; 0x24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f1c3 0307 	rsb	r3, r3, #7
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	bf28      	it	cs
 8004b96:	2304      	movcs	r3, #4
 8004b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	2b06      	cmp	r3, #6
 8004ba0:	d902      	bls.n	8004ba8 <NVIC_EncodePriority+0x30>
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	3b03      	subs	r3, #3
 8004ba6:	e000      	b.n	8004baa <NVIC_EncodePriority+0x32>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	401a      	ands	r2, r3
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bca:	43d9      	mvns	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd0:	4313      	orrs	r3, r2
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3724      	adds	r7, #36	; 0x24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff ff4c 	bl	8004a84 <__NVIC_SetPriorityGrouping>
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c06:	f7ff ff61 	bl	8004acc <__NVIC_GetPriorityGrouping>
 8004c0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	6978      	ldr	r0, [r7, #20]
 8004c12:	f7ff ffb1 	bl	8004b78 <NVIC_EncodePriority>
 8004c16:	4602      	mov	r2, r0
 8004c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff ff80 	bl	8004b24 <__NVIC_SetPriority>
}
 8004c24:	bf00      	nop
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff ff54 	bl	8004ae8 <__NVIC_EnableIRQ>
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c54:	f7ff fee6 	bl	8004a24 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e099      	b.n	8004d98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c84:	e00f      	b.n	8004ca6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c86:	f7ff fecd 	bl	8004a24 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b05      	cmp	r3, #5
 8004c92:	d908      	bls.n	8004ca6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e078      	b.n	8004d98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e8      	bne.n	8004c86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4b38      	ldr	r3, [pc, #224]	; (8004da0 <HAL_DMA_Init+0x158>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d107      	bne.n	8004d10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 0307 	bic.w	r3, r3, #7
 8004d26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d117      	bne.n	8004d6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00e      	beq.n	8004d6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fb01 	bl	8005354 <DMA_CheckFifoParam>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2240      	movs	r2, #64	; 0x40
 8004d5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d66:	2301      	movs	r3, #1
 8004d68:	e016      	b.n	8004d98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fab8 	bl	80052e8 <DMA_CalcBaseAndBitshift>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d80:	223f      	movs	r2, #63	; 0x3f
 8004d82:	409a      	lsls	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	f010803f 	.word	0xf010803f

08004da4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_DMA_Start_IT+0x26>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e040      	b.n	8004e4c <HAL_DMA_Start_IT+0xa8>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d12f      	bne.n	8004e3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fa4a 	bl	800528c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfc:	223f      	movs	r2, #63	; 0x3f
 8004dfe:	409a      	lsls	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0216 	orr.w	r2, r2, #22
 8004e12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0208 	orr.w	r2, r2, #8
 8004e2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e005      	b.n	8004e4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e46:	2302      	movs	r3, #2
 8004e48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e62:	f7ff fddf 	bl	8004a24 <HAL_GetTick>
 8004e66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d008      	beq.n	8004e86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2280      	movs	r2, #128	; 0x80
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e052      	b.n	8004f2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0216 	bic.w	r2, r2, #22
 8004e94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695a      	ldr	r2, [r3, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ea4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <HAL_DMA_Abort+0x62>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0208 	bic.w	r2, r2, #8
 8004ec4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ed6:	e013      	b.n	8004f00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ed8:	f7ff fda4 	bl	8004a24 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b05      	cmp	r3, #5
 8004ee4:	d90c      	bls.n	8004f00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2203      	movs	r2, #3
 8004ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e015      	b.n	8004f2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e4      	bne.n	8004ed8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f12:	223f      	movs	r2, #63	; 0x3f
 8004f14:	409a      	lsls	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d004      	beq.n	8004f52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2280      	movs	r2, #128	; 0x80
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e00c      	b.n	8004f6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2205      	movs	r2, #5
 8004f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0201 	bic.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f84:	4b8e      	ldr	r3, [pc, #568]	; (80051c0 <HAL_DMA_IRQHandler+0x248>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a8e      	ldr	r2, [pc, #568]	; (80051c4 <HAL_DMA_IRQHandler+0x24c>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	0a9b      	lsrs	r3, r3, #10
 8004f90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa2:	2208      	movs	r2, #8
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d01a      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d013      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0204 	bic.w	r2, r2, #4
 8004fca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	f043 0201 	orr.w	r2, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe8:	2201      	movs	r2, #1
 8004fea:	409a      	lsls	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d012      	beq.n	800501a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005006:	2201      	movs	r2, #1
 8005008:	409a      	lsls	r2, r3
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	f043 0202 	orr.w	r2, r3, #2
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501e:	2204      	movs	r2, #4
 8005020:	409a      	lsls	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4013      	ands	r3, r2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d012      	beq.n	8005050 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503c:	2204      	movs	r2, #4
 800503e:	409a      	lsls	r2, r3
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005048:	f043 0204 	orr.w	r2, r3, #4
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005054:	2210      	movs	r2, #16
 8005056:	409a      	lsls	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d043      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d03c      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005072:	2210      	movs	r2, #16
 8005074:	409a      	lsls	r2, r3
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d018      	beq.n	80050ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d108      	bne.n	80050a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d024      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
 80050a6:	e01f      	b.n	80050e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01b      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
 80050b8:	e016      	b.n	80050e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d107      	bne.n	80050d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0208 	bic.w	r2, r2, #8
 80050d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ec:	2220      	movs	r2, #32
 80050ee:	409a      	lsls	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 808f 	beq.w	8005218 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8087 	beq.w	8005218 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510e:	2220      	movs	r2, #32
 8005110:	409a      	lsls	r2, r3
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b05      	cmp	r3, #5
 8005120:	d136      	bne.n	8005190 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0216 	bic.w	r2, r2, #22
 8005130:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005140:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <HAL_DMA_IRQHandler+0x1da>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0208 	bic.w	r2, r2, #8
 8005160:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005166:	223f      	movs	r2, #63	; 0x3f
 8005168:	409a      	lsls	r2, r3
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	2b00      	cmp	r3, #0
 8005184:	d07e      	beq.n	8005284 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
        }
        return;
 800518e:	e079      	b.n	8005284 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01d      	beq.n	80051da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10d      	bne.n	80051c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d031      	beq.n	8005218 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
 80051bc:	e02c      	b.n	8005218 <HAL_DMA_IRQHandler+0x2a0>
 80051be:	bf00      	nop
 80051c0:	2000009c 	.word	0x2000009c
 80051c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d023      	beq.n	8005218 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	4798      	blx	r3
 80051d8:	e01e      	b.n	8005218 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10f      	bne.n	8005208 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0210 	bic.w	r2, r2, #16
 80051f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521c:	2b00      	cmp	r3, #0
 800521e:	d032      	beq.n	8005286 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d022      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2205      	movs	r2, #5
 8005230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0201 	bic.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	3301      	adds	r3, #1
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	d307      	bcc.n	8005260 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f2      	bne.n	8005244 <HAL_DMA_IRQHandler+0x2cc>
 800525e:	e000      	b.n	8005262 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005260:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	4798      	blx	r3
 8005282:	e000      	b.n	8005286 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005284:	bf00      	nop
    }
  }
}
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d108      	bne.n	80052cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052ca:	e007      	b.n	80052dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	60da      	str	r2, [r3, #12]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	3b10      	subs	r3, #16
 80052f8:	4a14      	ldr	r2, [pc, #80]	; (800534c <DMA_CalcBaseAndBitshift+0x64>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005302:	4a13      	ldr	r2, [pc, #76]	; (8005350 <DMA_CalcBaseAndBitshift+0x68>)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b03      	cmp	r3, #3
 8005314:	d909      	bls.n	800532a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	1d1a      	adds	r2, r3, #4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	659a      	str	r2, [r3, #88]	; 0x58
 8005328:	e007      	b.n	800533a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005332:	f023 0303 	bic.w	r3, r3, #3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	aaaaaaab 	.word	0xaaaaaaab
 8005350:	0800fea4 	.word	0x0800fea4

08005354 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d11f      	bne.n	80053ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d856      	bhi.n	8005422 <DMA_CheckFifoParam+0xce>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <DMA_CheckFifoParam+0x28>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	0800538d 	.word	0x0800538d
 8005380:	0800539f 	.word	0x0800539f
 8005384:	0800538d 	.word	0x0800538d
 8005388:	08005423 	.word	0x08005423
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d046      	beq.n	8005426 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800539c:	e043      	b.n	8005426 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053a6:	d140      	bne.n	800542a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ac:	e03d      	b.n	800542a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b6:	d121      	bne.n	80053fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d837      	bhi.n	800542e <DMA_CheckFifoParam+0xda>
 80053be:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <DMA_CheckFifoParam+0x70>)
 80053c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053db 	.word	0x080053db
 80053cc:	080053d5 	.word	0x080053d5
 80053d0:	080053ed 	.word	0x080053ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]
      break;
 80053d8:	e030      	b.n	800543c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d025      	beq.n	8005432 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ea:	e022      	b.n	8005432 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053f4:	d11f      	bne.n	8005436 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053fa:	e01c      	b.n	8005436 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d903      	bls.n	800540a <DMA_CheckFifoParam+0xb6>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b03      	cmp	r3, #3
 8005406:	d003      	beq.n	8005410 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005408:	e018      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
      break;
 800540e:	e015      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00e      	beq.n	800543a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
      break;
 8005420:	e00b      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 8005422:	bf00      	nop
 8005424:	e00a      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 8005426:	bf00      	nop
 8005428:	e008      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 800542a:	bf00      	nop
 800542c:	e006      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 800542e:	bf00      	nop
 8005430:	e004      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 8005432:	bf00      	nop
 8005434:	e002      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;   
 8005436:	bf00      	nop
 8005438:	e000      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 800543a:	bf00      	nop
    }
  } 
  
  return status; 
 800543c:	7bfb      	ldrb	r3, [r7, #15]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop

0800544c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	; 0x24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	e16b      	b.n	8005740 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005468:	2201      	movs	r2, #1
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4013      	ands	r3, r2
 800547a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	429a      	cmp	r2, r3
 8005482:	f040 815a 	bne.w	800573a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d005      	beq.n	800549e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800549a:	2b02      	cmp	r3, #2
 800549c:	d130      	bne.n	8005500 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	2203      	movs	r2, #3
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	4013      	ands	r3, r2
 80054b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054d4:	2201      	movs	r2, #1
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	43db      	mvns	r3, r3
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	4013      	ands	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 0201 	and.w	r2, r3, #1
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	2b03      	cmp	r3, #3
 800550a:	d017      	beq.n	800553c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	2203      	movs	r2, #3
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	43db      	mvns	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4313      	orrs	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f003 0303 	and.w	r3, r3, #3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d123      	bne.n	8005590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	08da      	lsrs	r2, r3, #3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3208      	adds	r2, #8
 8005550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	220f      	movs	r2, #15
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4013      	ands	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4313      	orrs	r3, r2
 8005580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	08da      	lsrs	r2, r3, #3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3208      	adds	r2, #8
 800558a:	69b9      	ldr	r1, [r7, #24]
 800558c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	2203      	movs	r2, #3
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 0203 	and.w	r2, r3, #3
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80b4 	beq.w	800573a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	4b60      	ldr	r3, [pc, #384]	; (8005758 <HAL_GPIO_Init+0x30c>)
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	4a5f      	ldr	r2, [pc, #380]	; (8005758 <HAL_GPIO_Init+0x30c>)
 80055dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055e0:	6453      	str	r3, [r2, #68]	; 0x44
 80055e2:	4b5d      	ldr	r3, [pc, #372]	; (8005758 <HAL_GPIO_Init+0x30c>)
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ee:	4a5b      	ldr	r2, [pc, #364]	; (800575c <HAL_GPIO_Init+0x310>)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	089b      	lsrs	r3, r3, #2
 80055f4:	3302      	adds	r3, #2
 80055f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	220f      	movs	r2, #15
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	43db      	mvns	r3, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4013      	ands	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a52      	ldr	r2, [pc, #328]	; (8005760 <HAL_GPIO_Init+0x314>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02b      	beq.n	8005672 <HAL_GPIO_Init+0x226>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a51      	ldr	r2, [pc, #324]	; (8005764 <HAL_GPIO_Init+0x318>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d025      	beq.n	800566e <HAL_GPIO_Init+0x222>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a50      	ldr	r2, [pc, #320]	; (8005768 <HAL_GPIO_Init+0x31c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01f      	beq.n	800566a <HAL_GPIO_Init+0x21e>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a4f      	ldr	r2, [pc, #316]	; (800576c <HAL_GPIO_Init+0x320>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d019      	beq.n	8005666 <HAL_GPIO_Init+0x21a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a4e      	ldr	r2, [pc, #312]	; (8005770 <HAL_GPIO_Init+0x324>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_GPIO_Init+0x216>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a4d      	ldr	r2, [pc, #308]	; (8005774 <HAL_GPIO_Init+0x328>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00d      	beq.n	800565e <HAL_GPIO_Init+0x212>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a4c      	ldr	r2, [pc, #304]	; (8005778 <HAL_GPIO_Init+0x32c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <HAL_GPIO_Init+0x20e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a4b      	ldr	r2, [pc, #300]	; (800577c <HAL_GPIO_Init+0x330>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d101      	bne.n	8005656 <HAL_GPIO_Init+0x20a>
 8005652:	2307      	movs	r3, #7
 8005654:	e00e      	b.n	8005674 <HAL_GPIO_Init+0x228>
 8005656:	2308      	movs	r3, #8
 8005658:	e00c      	b.n	8005674 <HAL_GPIO_Init+0x228>
 800565a:	2306      	movs	r3, #6
 800565c:	e00a      	b.n	8005674 <HAL_GPIO_Init+0x228>
 800565e:	2305      	movs	r3, #5
 8005660:	e008      	b.n	8005674 <HAL_GPIO_Init+0x228>
 8005662:	2304      	movs	r3, #4
 8005664:	e006      	b.n	8005674 <HAL_GPIO_Init+0x228>
 8005666:	2303      	movs	r3, #3
 8005668:	e004      	b.n	8005674 <HAL_GPIO_Init+0x228>
 800566a:	2302      	movs	r3, #2
 800566c:	e002      	b.n	8005674 <HAL_GPIO_Init+0x228>
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <HAL_GPIO_Init+0x228>
 8005672:	2300      	movs	r3, #0
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	f002 0203 	and.w	r2, r2, #3
 800567a:	0092      	lsls	r2, r2, #2
 800567c:	4093      	lsls	r3, r2
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4313      	orrs	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005684:	4935      	ldr	r1, [pc, #212]	; (800575c <HAL_GPIO_Init+0x310>)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	089b      	lsrs	r3, r3, #2
 800568a:	3302      	adds	r3, #2
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005692:	4b3b      	ldr	r3, [pc, #236]	; (8005780 <HAL_GPIO_Init+0x334>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	43db      	mvns	r3, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4013      	ands	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056b6:	4a32      	ldr	r2, [pc, #200]	; (8005780 <HAL_GPIO_Init+0x334>)
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056bc:	4b30      	ldr	r3, [pc, #192]	; (8005780 <HAL_GPIO_Init+0x334>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	43db      	mvns	r3, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4013      	ands	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056e0:	4a27      	ldr	r2, [pc, #156]	; (8005780 <HAL_GPIO_Init+0x334>)
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056e6:	4b26      	ldr	r3, [pc, #152]	; (8005780 <HAL_GPIO_Init+0x334>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	43db      	mvns	r3, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4013      	ands	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800570a:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <HAL_GPIO_Init+0x334>)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005710:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <HAL_GPIO_Init+0x334>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	43db      	mvns	r3, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4013      	ands	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005734:	4a12      	ldr	r2, [pc, #72]	; (8005780 <HAL_GPIO_Init+0x334>)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	2b0f      	cmp	r3, #15
 8005744:	f67f ae90 	bls.w	8005468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005748:	bf00      	nop
 800574a:	bf00      	nop
 800574c:	3724      	adds	r7, #36	; 0x24
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800
 800575c:	40013800 	.word	0x40013800
 8005760:	40020000 	.word	0x40020000
 8005764:	40020400 	.word	0x40020400
 8005768:	40020800 	.word	0x40020800
 800576c:	40020c00 	.word	0x40020c00
 8005770:	40021000 	.word	0x40021000
 8005774:	40021400 	.word	0x40021400
 8005778:	40021800 	.word	0x40021800
 800577c:	40021c00 	.word	0x40021c00
 8005780:	40013c00 	.word	0x40013c00

08005784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]
 8005790:	4613      	mov	r3, r2
 8005792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005794:	787b      	ldrb	r3, [r7, #1]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800579a:	887a      	ldrh	r2, [r7, #2]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057a0:	e003      	b.n	80057aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057a2:	887b      	ldrh	r3, [r7, #2]
 80057a4:	041a      	lsls	r2, r3, #16
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	619a      	str	r2, [r3, #24]
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057c8:	887a      	ldrh	r2, [r7, #2]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4013      	ands	r3, r2
 80057ce:	041a      	lsls	r2, r3, #16
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	43d9      	mvns	r1, r3
 80057d4:	887b      	ldrh	r3, [r7, #2]
 80057d6:	400b      	ands	r3, r1
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	619a      	str	r2, [r3, #24]
}
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e03e      	b.n	800587e <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7fe ff8d 	bl	8004734 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3304      	adds	r3, #4
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f003 fda1 	bl	800936c <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	461a      	mov	r2, r3
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	f003 fde5 	bl	8009404 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	461a      	mov	r2, r3
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	f003 fe12 	bl	800946e <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b10      	cmp	r3, #16
 8005850:	d108      	bne.n	8005864 <HAL_NAND_Init+0x7a>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0204 	orr.w	r2, r2, #4
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	e007      	b.n	8005874 <HAL_NAND_Init+0x8a>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a1a      	ldr	r2, [r3, #32]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0204 	orr.w	r2, r2, #4
 8005872:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b082      	sub	sp, #8
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b10      	cmp	r3, #16
 8005894:	d10a      	bne.n	80058ac <HAL_NAND_IRQHandler+0x26>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	bf0c      	ite	eq
 80058a4:	2301      	moveq	r3, #1
 80058a6:	2300      	movne	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	e009      	b.n	80058c0 <HAL_NAND_IRQHandler+0x3a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	bf0c      	ite	eq
 80058ba:	2301      	moveq	r3, #1
 80058bc:	2300      	movne	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d017      	beq.n	80058f4 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f8b2 	bl	8005a2e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b10      	cmp	r3, #16
 80058d0:	d108      	bne.n	80058e4 <HAL_NAND_IRQHandler+0x5e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0201 	bic.w	r2, r2, #1
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	e007      	b.n	80058f4 <HAL_NAND_IRQHandler+0x6e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	d10a      	bne.n	8005912 <HAL_NAND_IRQHandler+0x8c>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b02      	cmp	r3, #2
 8005908:	bf0c      	ite	eq
 800590a:	2301      	moveq	r3, #1
 800590c:	2300      	movne	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	e009      	b.n	8005926 <HAL_NAND_IRQHandler+0xa0>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	bf0c      	ite	eq
 8005920:	2301      	moveq	r3, #1
 8005922:	2300      	movne	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d017      	beq.n	800595a <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f87f 	bl	8005a2e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b10      	cmp	r3, #16
 8005936:	d108      	bne.n	800594a <HAL_NAND_IRQHandler+0xc4>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0202 	bic.w	r2, r2, #2
 8005946:	605a      	str	r2, [r3, #4]
 8005948:	e007      	b.n	800595a <HAL_NAND_IRQHandler+0xd4>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0202 	bic.w	r2, r2, #2
 8005958:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b10      	cmp	r3, #16
 8005960:	d10a      	bne.n	8005978 <HAL_NAND_IRQHandler+0xf2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b04      	cmp	r3, #4
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	e009      	b.n	800598c <HAL_NAND_IRQHandler+0x106>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b04      	cmp	r3, #4
 8005984:	bf0c      	ite	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	2300      	movne	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d017      	beq.n	80059c0 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f84c 	bl	8005a2e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b10      	cmp	r3, #16
 800599c:	d108      	bne.n	80059b0 <HAL_NAND_IRQHandler+0x12a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0204 	bic.w	r2, r2, #4
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	e007      	b.n	80059c0 <HAL_NAND_IRQHandler+0x13a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0204 	bic.w	r2, r2, #4
 80059be:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d10a      	bne.n	80059de <HAL_NAND_IRQHandler+0x158>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	bf0c      	ite	eq
 80059d6:	2301      	moveq	r3, #1
 80059d8:	2300      	movne	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	e009      	b.n	80059f2 <HAL_NAND_IRQHandler+0x16c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b40      	cmp	r3, #64	; 0x40
 80059ea:	bf0c      	ite	eq
 80059ec:	2301      	moveq	r3, #1
 80059ee:	2300      	movne	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d017      	beq.n	8005a26 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f819 	bl	8005a2e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d108      	bne.n	8005a16 <HAL_NAND_IRQHandler+0x190>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a12:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8005a14:	e007      	b.n	8005a26 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a24:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer,
                                         uint32_t NumPageToWrite)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b08c      	sub	sp, #48	; 0x30
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
 8005a4e:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d101      	bne.n	8005a6c <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e13e      	b.n	8005cea <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	f040 8137 	bne.w	8005ce8 <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_NAND_Write_Page_8b+0x46>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e130      	b.n	8005cea <HAL_NAND_Write_Page_8b+0x2a8>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    else
    {
      deviceaddress = NAND_DEVICE2;
    }
#else
    deviceaddress = NAND_DEVICE;
 8005a98:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005a9c:	61bb      	str	r3, [r7, #24]
#endif

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	889b      	ldrh	r3, [r3, #4]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	885b      	ldrh	r3, [r3, #2]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	fb00 f303 	mul.w	r3, r0, r3
 8005ab8:	4413      	add	r3, r2
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005abe:	fb02 f303 	mul.w	r3, r2, r3
 8005ac2:	440b      	add	r3, r1
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005ac6:	e0f8      	b.n	8005cba <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ad2:	f3bf 8f4f 	dsb	sy
}
 8005ad6:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ade:	2280      	movs	r2, #128	; 0x80
 8005ae0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ae2:	f3bf 8f4f 	dsb	sy
}
 8005ae6:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af0:	d848      	bhi.n	8005b84 <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b02:	d21a      	bcs.n	8005b3a <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b0e:	f3bf 8f4f 	dsb	sy
}
 8005b12:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b20:	f3bf 8f4f 	dsb	sy
}
 8005b24:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	0a1a      	lsrs	r2, r3, #8
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b34:	f3bf 8f4f 	dsb	sy
}
 8005b38:	e07d      	b.n	8005c36 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b44:	f3bf 8f4f 	dsb	sy
}
 8005b48:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b56:	f3bf 8f4f 	dsb	sy
}
 8005b5a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	0a1a      	lsrs	r2, r3, #8
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b6a:	f3bf 8f4f 	dsb	sy
}
 8005b6e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	0c1a      	lsrs	r2, r3, #16
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b7e:	f3bf 8f4f 	dsb	sy
}
 8005b82:	e058      	b.n	8005c36 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b8c:	fb02 f303 	mul.w	r3, r2, r3
 8005b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b94:	d222      	bcs.n	8005bdc <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ba0:	f3bf 8f4f 	dsb	sy
}
 8005ba4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bb0:	f3bf 8f4f 	dsb	sy
}
 8005bb4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bc2:	f3bf 8f4f 	dsb	sy
}
 8005bc6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	0a1a      	lsrs	r2, r3, #8
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bd6:	f3bf 8f4f 	dsb	sy
}
 8005bda:	e02c      	b.n	8005c36 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005be6:	f3bf 8f4f 	dsb	sy
}
 8005bea:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bf6:	f3bf 8f4f 	dsb	sy
}
 8005bfa:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c08:	f3bf 8f4f 	dsb	sy
}
 8005c0c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	0a1a      	lsrs	r2, r3, #8
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c1c:	f3bf 8f4f 	dsb	sy
}
 8005c20:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	0c1a      	lsrs	r2, r3, #16
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c30:	f3bf 8f4f 	dsb	sy
}
 8005c34:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3a:	e00c      	b.n	8005c56 <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	701a      	strb	r2, [r3, #0]
        buff++;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	3301      	adds	r3, #1
 8005c48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c4a:	f3bf 8f4f 	dsb	sy
}
 8005c4e:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	3301      	adds	r3, #1
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d3ed      	bcc.n	8005c3c <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c66:	2210      	movs	r2, #16
 8005c68:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c6a:	f3bf 8f4f 	dsb	sy
}
 8005c6e:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8005c70:	f7fe fed8 	bl	8004a24 <HAL_GetTick>
 8005c74:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005c76:	e011      	b.n	8005c9c <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8005c78:	f7fe fed4 	bl	8004a24 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c86:	d909      	bls.n	8005c9c <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e026      	b.n	8005cea <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f85f 	bl	8005d60 <HAL_NAND_Read_Status>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b40      	cmp	r3, #64	; 0x40
 8005ca6:	d1e7      	bne.n	8005c78 <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	3301      	adds	r3, #1
 8005cac:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Decrement pages to write */
      nbpages--;
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <HAL_NAND_Write_Page_8b+0x292>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
 8005ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	f4ff aefa 	bcc.w	8005ac8 <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3730      	adds	r7, #48	; 0x30
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_NAND_ECC_Disable>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_ECC_Disable(NAND_HandleTypeDef *hnand)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d101      	bne.n	8005d0a <HAL_NAND_ECC_Disable+0x18>
  {
    return HAL_BUSY;
 8005d06:	2302      	movs	r3, #2
 8005d08:	e018      	b.n	8005d3c <HAL_NAND_ECC_Disable+0x4a>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d111      	bne.n	8005d3a <HAL_NAND_ECC_Disable+0x48>
  {
    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable ECC feature */
    (void)FMC_NAND_ECC_Disable(hnand->Instance, hnand->Init.NandBank);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	4619      	mov	r1, r3
 8005d28:	4610      	mov	r0, r2
 8005d2a:	f003 fbd5 	bl	80094d8 <FSMC_NAND_ECC_Disable>

    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e000      	b.n	8005d3c <HAL_NAND_ECC_Disable+0x4a>
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  return hnand->State;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d52:	b2db      	uxtb	r3, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 8005d68:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005d6c:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d74:	2270      	movs	r2, #112	; 0x70
 8005d76:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e007      	b.n	8005d9e <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8005d98:	2340      	movs	r3, #64	; 0x40
 8005d9a:	e000      	b.n	8005d9e <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8005d9c:	2300      	movs	r3, #0
  }
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e267      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d075      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dca:	4b88      	ldr	r3, [pc, #544]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d00c      	beq.n	8005df0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dd6:	4b85      	ldr	r3, [pc, #532]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d112      	bne.n	8005e08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005de2:	4b82      	ldr	r3, [pc, #520]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dee:	d10b      	bne.n	8005e08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df0:	4b7e      	ldr	r3, [pc, #504]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d05b      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x108>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d157      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e242      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e10:	d106      	bne.n	8005e20 <HAL_RCC_OscConfig+0x74>
 8005e12:	4b76      	ldr	r3, [pc, #472]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a75      	ldr	r2, [pc, #468]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	e01d      	b.n	8005e5c <HAL_RCC_OscConfig+0xb0>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e28:	d10c      	bne.n	8005e44 <HAL_RCC_OscConfig+0x98>
 8005e2a:	4b70      	ldr	r3, [pc, #448]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a6f      	ldr	r2, [pc, #444]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	4b6d      	ldr	r3, [pc, #436]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a6c      	ldr	r2, [pc, #432]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e00b      	b.n	8005e5c <HAL_RCC_OscConfig+0xb0>
 8005e44:	4b69      	ldr	r3, [pc, #420]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a68      	ldr	r2, [pc, #416]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	4b66      	ldr	r3, [pc, #408]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a65      	ldr	r2, [pc, #404]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d013      	beq.n	8005e8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e64:	f7fe fdde 	bl	8004a24 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e6c:	f7fe fdda 	bl	8004a24 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b64      	cmp	r3, #100	; 0x64
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e207      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e7e:	4b5b      	ldr	r3, [pc, #364]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0f0      	beq.n	8005e6c <HAL_RCC_OscConfig+0xc0>
 8005e8a:	e014      	b.n	8005eb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8c:	f7fe fdca 	bl	8004a24 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e94:	f7fe fdc6 	bl	8004a24 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b64      	cmp	r3, #100	; 0x64
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e1f3      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ea6:	4b51      	ldr	r3, [pc, #324]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0xe8>
 8005eb2:	e000      	b.n	8005eb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d063      	beq.n	8005f8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ec2:	4b4a      	ldr	r3, [pc, #296]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 030c 	and.w	r3, r3, #12
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ece:	4b47      	ldr	r3, [pc, #284]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	d11c      	bne.n	8005f14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eda:	4b44      	ldr	r3, [pc, #272]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d116      	bne.n	8005f14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ee6:	4b41      	ldr	r3, [pc, #260]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <HAL_RCC_OscConfig+0x152>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d001      	beq.n	8005efe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e1c7      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005efe:	4b3b      	ldr	r3, [pc, #236]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4937      	ldr	r1, [pc, #220]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f12:	e03a      	b.n	8005f8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d020      	beq.n	8005f5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f1c:	4b34      	ldr	r3, [pc, #208]	; (8005ff0 <HAL_RCC_OscConfig+0x244>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f22:	f7fe fd7f 	bl	8004a24 <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f2a:	f7fe fd7b 	bl	8004a24 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e1a8      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f3c:	4b2b      	ldr	r3, [pc, #172]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0f0      	beq.n	8005f2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f48:	4b28      	ldr	r3, [pc, #160]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	4925      	ldr	r1, [pc, #148]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	600b      	str	r3, [r1, #0]
 8005f5c:	e015      	b.n	8005f8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f5e:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <HAL_RCC_OscConfig+0x244>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f64:	f7fe fd5e 	bl	8004a24 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f6c:	f7fe fd5a 	bl	8004a24 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e187      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f7e:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f0      	bne.n	8005f6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d036      	beq.n	8006004 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d016      	beq.n	8005fcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f9e:	4b15      	ldr	r3, [pc, #84]	; (8005ff4 <HAL_RCC_OscConfig+0x248>)
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa4:	f7fe fd3e 	bl	8004a24 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fac:	f7fe fd3a 	bl	8004a24 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e167      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fbe:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <HAL_RCC_OscConfig+0x240>)
 8005fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HAL_RCC_OscConfig+0x200>
 8005fca:	e01b      	b.n	8006004 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fcc:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <HAL_RCC_OscConfig+0x248>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd2:	f7fe fd27 	bl	8004a24 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fd8:	e00e      	b.n	8005ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fda:	f7fe fd23 	bl	8004a24 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d907      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e150      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	42470000 	.word	0x42470000
 8005ff4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ff8:	4b88      	ldr	r3, [pc, #544]	; (800621c <HAL_RCC_OscConfig+0x470>)
 8005ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1ea      	bne.n	8005fda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 8097 	beq.w	8006140 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006012:	2300      	movs	r3, #0
 8006014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006016:	4b81      	ldr	r3, [pc, #516]	; (800621c <HAL_RCC_OscConfig+0x470>)
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10f      	bne.n	8006042 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006022:	2300      	movs	r3, #0
 8006024:	60bb      	str	r3, [r7, #8]
 8006026:	4b7d      	ldr	r3, [pc, #500]	; (800621c <HAL_RCC_OscConfig+0x470>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	4a7c      	ldr	r2, [pc, #496]	; (800621c <HAL_RCC_OscConfig+0x470>)
 800602c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006030:	6413      	str	r3, [r2, #64]	; 0x40
 8006032:	4b7a      	ldr	r3, [pc, #488]	; (800621c <HAL_RCC_OscConfig+0x470>)
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603a:	60bb      	str	r3, [r7, #8]
 800603c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800603e:	2301      	movs	r3, #1
 8006040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006042:	4b77      	ldr	r3, [pc, #476]	; (8006220 <HAL_RCC_OscConfig+0x474>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d118      	bne.n	8006080 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800604e:	4b74      	ldr	r3, [pc, #464]	; (8006220 <HAL_RCC_OscConfig+0x474>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a73      	ldr	r2, [pc, #460]	; (8006220 <HAL_RCC_OscConfig+0x474>)
 8006054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800605a:	f7fe fce3 	bl	8004a24 <HAL_GetTick>
 800605e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006062:	f7fe fcdf 	bl	8004a24 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e10c      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006074:	4b6a      	ldr	r3, [pc, #424]	; (8006220 <HAL_RCC_OscConfig+0x474>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0f0      	beq.n	8006062 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d106      	bne.n	8006096 <HAL_RCC_OscConfig+0x2ea>
 8006088:	4b64      	ldr	r3, [pc, #400]	; (800621c <HAL_RCC_OscConfig+0x470>)
 800608a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608c:	4a63      	ldr	r2, [pc, #396]	; (800621c <HAL_RCC_OscConfig+0x470>)
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	6713      	str	r3, [r2, #112]	; 0x70
 8006094:	e01c      	b.n	80060d0 <HAL_RCC_OscConfig+0x324>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	2b05      	cmp	r3, #5
 800609c:	d10c      	bne.n	80060b8 <HAL_RCC_OscConfig+0x30c>
 800609e:	4b5f      	ldr	r3, [pc, #380]	; (800621c <HAL_RCC_OscConfig+0x470>)
 80060a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a2:	4a5e      	ldr	r2, [pc, #376]	; (800621c <HAL_RCC_OscConfig+0x470>)
 80060a4:	f043 0304 	orr.w	r3, r3, #4
 80060a8:	6713      	str	r3, [r2, #112]	; 0x70
 80060aa:	4b5c      	ldr	r3, [pc, #368]	; (800621c <HAL_RCC_OscConfig+0x470>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	4a5b      	ldr	r2, [pc, #364]	; (800621c <HAL_RCC_OscConfig+0x470>)
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	6713      	str	r3, [r2, #112]	; 0x70
 80060b6:	e00b      	b.n	80060d0 <HAL_RCC_OscConfig+0x324>
 80060b8:	4b58      	ldr	r3, [pc, #352]	; (800621c <HAL_RCC_OscConfig+0x470>)
 80060ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060bc:	4a57      	ldr	r2, [pc, #348]	; (800621c <HAL_RCC_OscConfig+0x470>)
 80060be:	f023 0301 	bic.w	r3, r3, #1
 80060c2:	6713      	str	r3, [r2, #112]	; 0x70
 80060c4:	4b55      	ldr	r3, [pc, #340]	; (800621c <HAL_RCC_OscConfig+0x470>)
 80060c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c8:	4a54      	ldr	r2, [pc, #336]	; (800621c <HAL_RCC_OscConfig+0x470>)
 80060ca:	f023 0304 	bic.w	r3, r3, #4
 80060ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d015      	beq.n	8006104 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d8:	f7fe fca4 	bl	8004a24 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060de:	e00a      	b.n	80060f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060e0:	f7fe fca0 	bl	8004a24 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e0cb      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f6:	4b49      	ldr	r3, [pc, #292]	; (800621c <HAL_RCC_OscConfig+0x470>)
 80060f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0ee      	beq.n	80060e0 <HAL_RCC_OscConfig+0x334>
 8006102:	e014      	b.n	800612e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006104:	f7fe fc8e 	bl	8004a24 <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800610a:	e00a      	b.n	8006122 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800610c:	f7fe fc8a 	bl	8004a24 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	f241 3288 	movw	r2, #5000	; 0x1388
 800611a:	4293      	cmp	r3, r2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e0b5      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006122:	4b3e      	ldr	r3, [pc, #248]	; (800621c <HAL_RCC_OscConfig+0x470>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1ee      	bne.n	800610c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d105      	bne.n	8006140 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006134:	4b39      	ldr	r3, [pc, #228]	; (800621c <HAL_RCC_OscConfig+0x470>)
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	4a38      	ldr	r2, [pc, #224]	; (800621c <HAL_RCC_OscConfig+0x470>)
 800613a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800613e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80a1 	beq.w	800628c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800614a:	4b34      	ldr	r3, [pc, #208]	; (800621c <HAL_RCC_OscConfig+0x470>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 030c 	and.w	r3, r3, #12
 8006152:	2b08      	cmp	r3, #8
 8006154:	d05c      	beq.n	8006210 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d141      	bne.n	80061e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800615e:	4b31      	ldr	r3, [pc, #196]	; (8006224 <HAL_RCC_OscConfig+0x478>)
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006164:	f7fe fc5e 	bl	8004a24 <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800616c:	f7fe fc5a 	bl	8004a24 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e087      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800617e:	4b27      	ldr	r3, [pc, #156]	; (800621c <HAL_RCC_OscConfig+0x470>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1f0      	bne.n	800616c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	019b      	lsls	r3, r3, #6
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	3b01      	subs	r3, #1
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	061b      	lsls	r3, r3, #24
 80061ae:	491b      	ldr	r1, [pc, #108]	; (800621c <HAL_RCC_OscConfig+0x470>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061b4:	4b1b      	ldr	r3, [pc, #108]	; (8006224 <HAL_RCC_OscConfig+0x478>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ba:	f7fe fc33 	bl	8004a24 <HAL_GetTick>
 80061be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c0:	e008      	b.n	80061d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061c2:	f7fe fc2f 	bl	8004a24 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e05c      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061d4:	4b11      	ldr	r3, [pc, #68]	; (800621c <HAL_RCC_OscConfig+0x470>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0f0      	beq.n	80061c2 <HAL_RCC_OscConfig+0x416>
 80061e0:	e054      	b.n	800628c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e2:	4b10      	ldr	r3, [pc, #64]	; (8006224 <HAL_RCC_OscConfig+0x478>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e8:	f7fe fc1c 	bl	8004a24 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f0:	f7fe fc18 	bl	8004a24 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e045      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006202:	4b06      	ldr	r3, [pc, #24]	; (800621c <HAL_RCC_OscConfig+0x470>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f0      	bne.n	80061f0 <HAL_RCC_OscConfig+0x444>
 800620e:	e03d      	b.n	800628c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d107      	bne.n	8006228 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e038      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
 800621c:	40023800 	.word	0x40023800
 8006220:	40007000 	.word	0x40007000
 8006224:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006228:	4b1b      	ldr	r3, [pc, #108]	; (8006298 <HAL_RCC_OscConfig+0x4ec>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d028      	beq.n	8006288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006240:	429a      	cmp	r2, r3
 8006242:	d121      	bne.n	8006288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800624e:	429a      	cmp	r2, r3
 8006250:	d11a      	bne.n	8006288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006258:	4013      	ands	r3, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800625e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006260:	4293      	cmp	r3, r2
 8006262:	d111      	bne.n	8006288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	085b      	lsrs	r3, r3, #1
 8006270:	3b01      	subs	r3, #1
 8006272:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006274:	429a      	cmp	r2, r3
 8006276:	d107      	bne.n	8006288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006282:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006284:	429a      	cmp	r2, r3
 8006286:	d001      	beq.n	800628c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40023800 	.word	0x40023800

0800629c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e0cc      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062b0:	4b68      	ldr	r3, [pc, #416]	; (8006454 <HAL_RCC_ClockConfig+0x1b8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d90c      	bls.n	80062d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062be:	4b65      	ldr	r3, [pc, #404]	; (8006454 <HAL_RCC_ClockConfig+0x1b8>)
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c6:	4b63      	ldr	r3, [pc, #396]	; (8006454 <HAL_RCC_ClockConfig+0x1b8>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d001      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0b8      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d020      	beq.n	8006326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062f0:	4b59      	ldr	r3, [pc, #356]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	4a58      	ldr	r2, [pc, #352]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006308:	4b53      	ldr	r3, [pc, #332]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	4a52      	ldr	r2, [pc, #328]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006314:	4b50      	ldr	r3, [pc, #320]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	494d      	ldr	r1, [pc, #308]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	4313      	orrs	r3, r2
 8006324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d044      	beq.n	80063bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d107      	bne.n	800634a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633a:	4b47      	ldr	r3, [pc, #284]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d119      	bne.n	800637a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e07f      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d003      	beq.n	800635a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006356:	2b03      	cmp	r3, #3
 8006358:	d107      	bne.n	800636a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800635a:	4b3f      	ldr	r3, [pc, #252]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d109      	bne.n	800637a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e06f      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636a:	4b3b      	ldr	r3, [pc, #236]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e067      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800637a:	4b37      	ldr	r3, [pc, #220]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f023 0203 	bic.w	r2, r3, #3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	4934      	ldr	r1, [pc, #208]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 8006388:	4313      	orrs	r3, r2
 800638a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800638c:	f7fe fb4a 	bl	8004a24 <HAL_GetTick>
 8006390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006392:	e00a      	b.n	80063aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006394:	f7fe fb46 	bl	8004a24 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	f241 3288 	movw	r2, #5000	; 0x1388
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e04f      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063aa:	4b2b      	ldr	r3, [pc, #172]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 020c 	and.w	r2, r3, #12
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d1eb      	bne.n	8006394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063bc:	4b25      	ldr	r3, [pc, #148]	; (8006454 <HAL_RCC_ClockConfig+0x1b8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d20c      	bcs.n	80063e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ca:	4b22      	ldr	r3, [pc, #136]	; (8006454 <HAL_RCC_ClockConfig+0x1b8>)
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063d2:	4b20      	ldr	r3, [pc, #128]	; (8006454 <HAL_RCC_ClockConfig+0x1b8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d001      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e032      	b.n	800644a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063f0:	4b19      	ldr	r3, [pc, #100]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4916      	ldr	r1, [pc, #88]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800640e:	4b12      	ldr	r3, [pc, #72]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	490e      	ldr	r1, [pc, #56]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800641e:	4313      	orrs	r3, r2
 8006420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006422:	f000 f821 	bl	8006468 <HAL_RCC_GetSysClockFreq>
 8006426:	4602      	mov	r2, r0
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <HAL_RCC_ClockConfig+0x1bc>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	490a      	ldr	r1, [pc, #40]	; (800645c <HAL_RCC_ClockConfig+0x1c0>)
 8006434:	5ccb      	ldrb	r3, [r1, r3]
 8006436:	fa22 f303 	lsr.w	r3, r2, r3
 800643a:	4a09      	ldr	r2, [pc, #36]	; (8006460 <HAL_RCC_ClockConfig+0x1c4>)
 800643c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800643e:	4b09      	ldr	r3, [pc, #36]	; (8006464 <HAL_RCC_ClockConfig+0x1c8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe f980 	bl	8004748 <HAL_InitTick>

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40023c00 	.word	0x40023c00
 8006458:	40023800 	.word	0x40023800
 800645c:	0800fe8c 	.word	0x0800fe8c
 8006460:	2000009c 	.word	0x2000009c
 8006464:	200000a0 	.word	0x200000a0

08006468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800646c:	b094      	sub	sp, #80	; 0x50
 800646e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	647b      	str	r3, [r7, #68]	; 0x44
 8006474:	2300      	movs	r3, #0
 8006476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006478:	2300      	movs	r3, #0
 800647a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006480:	4b79      	ldr	r3, [pc, #484]	; (8006668 <HAL_RCC_GetSysClockFreq+0x200>)
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 030c 	and.w	r3, r3, #12
 8006488:	2b08      	cmp	r3, #8
 800648a:	d00d      	beq.n	80064a8 <HAL_RCC_GetSysClockFreq+0x40>
 800648c:	2b08      	cmp	r3, #8
 800648e:	f200 80e1 	bhi.w	8006654 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_RCC_GetSysClockFreq+0x34>
 8006496:	2b04      	cmp	r3, #4
 8006498:	d003      	beq.n	80064a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800649a:	e0db      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800649c:	4b73      	ldr	r3, [pc, #460]	; (800666c <HAL_RCC_GetSysClockFreq+0x204>)
 800649e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80064a0:	e0db      	b.n	800665a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064a2:	4b73      	ldr	r3, [pc, #460]	; (8006670 <HAL_RCC_GetSysClockFreq+0x208>)
 80064a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064a6:	e0d8      	b.n	800665a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064a8:	4b6f      	ldr	r3, [pc, #444]	; (8006668 <HAL_RCC_GetSysClockFreq+0x200>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064b2:	4b6d      	ldr	r3, [pc, #436]	; (8006668 <HAL_RCC_GetSysClockFreq+0x200>)
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d063      	beq.n	8006586 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064be:	4b6a      	ldr	r3, [pc, #424]	; (8006668 <HAL_RCC_GetSysClockFreq+0x200>)
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	099b      	lsrs	r3, r3, #6
 80064c4:	2200      	movs	r2, #0
 80064c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80064c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d0:	633b      	str	r3, [r7, #48]	; 0x30
 80064d2:	2300      	movs	r3, #0
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
 80064d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80064da:	4622      	mov	r2, r4
 80064dc:	462b      	mov	r3, r5
 80064de:	f04f 0000 	mov.w	r0, #0
 80064e2:	f04f 0100 	mov.w	r1, #0
 80064e6:	0159      	lsls	r1, r3, #5
 80064e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064ec:	0150      	lsls	r0, r2, #5
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4621      	mov	r1, r4
 80064f4:	1a51      	subs	r1, r2, r1
 80064f6:	6139      	str	r1, [r7, #16]
 80064f8:	4629      	mov	r1, r5
 80064fa:	eb63 0301 	sbc.w	r3, r3, r1
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	f04f 0200 	mov.w	r2, #0
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800650c:	4659      	mov	r1, fp
 800650e:	018b      	lsls	r3, r1, #6
 8006510:	4651      	mov	r1, sl
 8006512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006516:	4651      	mov	r1, sl
 8006518:	018a      	lsls	r2, r1, #6
 800651a:	4651      	mov	r1, sl
 800651c:	ebb2 0801 	subs.w	r8, r2, r1
 8006520:	4659      	mov	r1, fp
 8006522:	eb63 0901 	sbc.w	r9, r3, r1
 8006526:	f04f 0200 	mov.w	r2, #0
 800652a:	f04f 0300 	mov.w	r3, #0
 800652e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800653a:	4690      	mov	r8, r2
 800653c:	4699      	mov	r9, r3
 800653e:	4623      	mov	r3, r4
 8006540:	eb18 0303 	adds.w	r3, r8, r3
 8006544:	60bb      	str	r3, [r7, #8]
 8006546:	462b      	mov	r3, r5
 8006548:	eb49 0303 	adc.w	r3, r9, r3
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	f04f 0200 	mov.w	r2, #0
 8006552:	f04f 0300 	mov.w	r3, #0
 8006556:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800655a:	4629      	mov	r1, r5
 800655c:	024b      	lsls	r3, r1, #9
 800655e:	4621      	mov	r1, r4
 8006560:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006564:	4621      	mov	r1, r4
 8006566:	024a      	lsls	r2, r1, #9
 8006568:	4610      	mov	r0, r2
 800656a:	4619      	mov	r1, r3
 800656c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800656e:	2200      	movs	r2, #0
 8006570:	62bb      	str	r3, [r7, #40]	; 0x28
 8006572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006578:	f7fa f9d8 	bl	800092c <__aeabi_uldivmod>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4613      	mov	r3, r2
 8006582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006584:	e058      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006586:	4b38      	ldr	r3, [pc, #224]	; (8006668 <HAL_RCC_GetSysClockFreq+0x200>)
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	099b      	lsrs	r3, r3, #6
 800658c:	2200      	movs	r2, #0
 800658e:	4618      	mov	r0, r3
 8006590:	4611      	mov	r1, r2
 8006592:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006596:	623b      	str	r3, [r7, #32]
 8006598:	2300      	movs	r3, #0
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
 800659c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065a0:	4642      	mov	r2, r8
 80065a2:	464b      	mov	r3, r9
 80065a4:	f04f 0000 	mov.w	r0, #0
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	0159      	lsls	r1, r3, #5
 80065ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065b2:	0150      	lsls	r0, r2, #5
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4641      	mov	r1, r8
 80065ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80065be:	4649      	mov	r1, r9
 80065c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065d8:	ebb2 040a 	subs.w	r4, r2, sl
 80065dc:	eb63 050b 	sbc.w	r5, r3, fp
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	00eb      	lsls	r3, r5, #3
 80065ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ee:	00e2      	lsls	r2, r4, #3
 80065f0:	4614      	mov	r4, r2
 80065f2:	461d      	mov	r5, r3
 80065f4:	4643      	mov	r3, r8
 80065f6:	18e3      	adds	r3, r4, r3
 80065f8:	603b      	str	r3, [r7, #0]
 80065fa:	464b      	mov	r3, r9
 80065fc:	eb45 0303 	adc.w	r3, r5, r3
 8006600:	607b      	str	r3, [r7, #4]
 8006602:	f04f 0200 	mov.w	r2, #0
 8006606:	f04f 0300 	mov.w	r3, #0
 800660a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800660e:	4629      	mov	r1, r5
 8006610:	028b      	lsls	r3, r1, #10
 8006612:	4621      	mov	r1, r4
 8006614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006618:	4621      	mov	r1, r4
 800661a:	028a      	lsls	r2, r1, #10
 800661c:	4610      	mov	r0, r2
 800661e:	4619      	mov	r1, r3
 8006620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006622:	2200      	movs	r2, #0
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	61fa      	str	r2, [r7, #28]
 8006628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800662c:	f7fa f97e 	bl	800092c <__aeabi_uldivmod>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4613      	mov	r3, r2
 8006636:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006638:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <HAL_RCC_GetSysClockFreq+0x200>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	0c1b      	lsrs	r3, r3, #16
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	3301      	adds	r3, #1
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006648:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800664a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006650:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006652:	e002      	b.n	800665a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <HAL_RCC_GetSysClockFreq+0x204>)
 8006656:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800665a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800665c:	4618      	mov	r0, r3
 800665e:	3750      	adds	r7, #80	; 0x50
 8006660:	46bd      	mov	sp, r7
 8006662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006666:	bf00      	nop
 8006668:	40023800 	.word	0x40023800
 800666c:	00f42400 	.word	0x00f42400
 8006670:	007a1200 	.word	0x007a1200

08006674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006678:	4b03      	ldr	r3, [pc, #12]	; (8006688 <HAL_RCC_GetHCLKFreq+0x14>)
 800667a:	681b      	ldr	r3, [r3, #0]
}
 800667c:	4618      	mov	r0, r3
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	2000009c 	.word	0x2000009c

0800668c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006690:	f7ff fff0 	bl	8006674 <HAL_RCC_GetHCLKFreq>
 8006694:	4602      	mov	r2, r0
 8006696:	4b05      	ldr	r3, [pc, #20]	; (80066ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	0a9b      	lsrs	r3, r3, #10
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	4903      	ldr	r1, [pc, #12]	; (80066b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066a2:	5ccb      	ldrb	r3, [r1, r3]
 80066a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40023800 	.word	0x40023800
 80066b0:	0800fe9c 	.word	0x0800fe9c

080066b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066b8:	f7ff ffdc 	bl	8006674 <HAL_RCC_GetHCLKFreq>
 80066bc:	4602      	mov	r2, r0
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	0b5b      	lsrs	r3, r3, #13
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	4903      	ldr	r1, [pc, #12]	; (80066d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ca:	5ccb      	ldrb	r3, [r1, r3]
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40023800 	.word	0x40023800
 80066d8:	0800fe9c 	.word	0x0800fe9c

080066dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	220f      	movs	r2, #15
 80066ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066ec:	4b12      	ldr	r3, [pc, #72]	; (8006738 <HAL_RCC_GetClockConfig+0x5c>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 0203 	and.w	r2, r3, #3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80066f8:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <HAL_RCC_GetClockConfig+0x5c>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006704:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <HAL_RCC_GetClockConfig+0x5c>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006710:	4b09      	ldr	r3, [pc, #36]	; (8006738 <HAL_RCC_GetClockConfig+0x5c>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	08db      	lsrs	r3, r3, #3
 8006716:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800671e:	4b07      	ldr	r3, [pc, #28]	; (800673c <HAL_RCC_GetClockConfig+0x60>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0207 	and.w	r2, r3, #7
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	601a      	str	r2, [r3, #0]
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40023800 	.word	0x40023800
 800673c:	40023c00 	.word	0x40023c00

08006740 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006764:	2b00      	cmp	r3, #0
 8006766:	d035      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006768:	4b62      	ldr	r3, [pc, #392]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800676e:	f7fe f959 	bl	8004a24 <HAL_GetTick>
 8006772:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006774:	e008      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006776:	f7fe f955 	bl	8004a24 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e0b0      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006788:	4b5b      	ldr	r3, [pc, #364]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1f0      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	019a      	lsls	r2, r3, #6
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	071b      	lsls	r3, r3, #28
 80067a0:	4955      	ldr	r1, [pc, #340]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067a8:	4b52      	ldr	r3, [pc, #328]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067ae:	f7fe f939 	bl	8004a24 <HAL_GetTick>
 80067b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067b4:	e008      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067b6:	f7fe f935 	bl	8004a24 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e090      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067c8:	4b4b      	ldr	r3, [pc, #300]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0f0      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8083 	beq.w	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	4b44      	ldr	r3, [pc, #272]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	4a43      	ldr	r2, [pc, #268]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f0:	6413      	str	r3, [r2, #64]	; 0x40
 80067f2:	4b41      	ldr	r3, [pc, #260]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80067fe:	4b3f      	ldr	r3, [pc, #252]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a3e      	ldr	r2, [pc, #248]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006808:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800680a:	f7fe f90b 	bl	8004a24 <HAL_GetTick>
 800680e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006810:	e008      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006812:	f7fe f907 	bl	8004a24 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e062      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006824:	4b35      	ldr	r3, [pc, #212]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f0      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006830:	4b31      	ldr	r3, [pc, #196]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006838:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d02f      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	429a      	cmp	r2, r3
 800684c:	d028      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800684e:	4b2a      	ldr	r3, [pc, #168]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006856:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006858:	4b29      	ldr	r3, [pc, #164]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800685a:	2201      	movs	r2, #1
 800685c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800685e:	4b28      	ldr	r3, [pc, #160]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006864:	4a24      	ldr	r2, [pc, #144]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800686a:	4b23      	ldr	r3, [pc, #140]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b01      	cmp	r3, #1
 8006874:	d114      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006876:	f7fe f8d5 	bl	8004a24 <HAL_GetTick>
 800687a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800687c:	e00a      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800687e:	f7fe f8d1 	bl	8004a24 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	f241 3288 	movw	r2, #5000	; 0x1388
 800688c:	4293      	cmp	r3, r2
 800688e:	d901      	bls.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e02a      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006894:	4b18      	ldr	r3, [pc, #96]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0ee      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068ac:	d10d      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80068ae:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c2:	490d      	ldr	r1, [pc, #52]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	608b      	str	r3, [r1, #8]
 80068c8:	e005      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80068ca:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	4a0a      	ldr	r2, [pc, #40]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068d4:	6093      	str	r3, [r2, #8]
 80068d6:	4b08      	ldr	r3, [pc, #32]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068e2:	4905      	ldr	r1, [pc, #20]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	42470068 	.word	0x42470068
 80068f8:	40023800 	.word	0x40023800
 80068fc:	40007000 	.word	0x40007000
 8006900:	42470e40 	.word	0x42470e40

08006904 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e066      	b.n	80069e8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	7f5b      	ldrb	r3, [r3, #29]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fd fd4c 	bl	80043c8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	22ca      	movs	r2, #202	; 0xca
 800693c:	625a      	str	r2, [r3, #36]	; 0x24
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2253      	movs	r2, #83	; 0x53
 8006944:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa45 	bl	8006dd6 <RTC_EnterInitMode>
 800694c:	4603      	mov	r3, r0
 800694e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d12c      	bne.n	80069b0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006968:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6899      	ldr	r1, [r3, #8]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	431a      	orrs	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	68d2      	ldr	r2, [r2, #12]
 8006990:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6919      	ldr	r1, [r3, #16]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	041a      	lsls	r2, r3, #16
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa4c 	bl	8006e44 <RTC_ExitInitMode>
 80069ac:	4603      	mov	r3, r0
 80069ae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d113      	bne.n	80069de <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699a      	ldr	r2, [r3, #24]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	22ff      	movs	r2, #255	; 0xff
 80069e4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069f0:	b590      	push	{r4, r7, lr}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	7f1b      	ldrb	r3, [r3, #28]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_RTC_SetTime+0x1c>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e087      	b.n	8006b1c <HAL_RTC_SetTime+0x12c>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2202      	movs	r2, #2
 8006a16:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d126      	bne.n	8006a6c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d102      	bne.n	8006a32 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fa29 	bl	8006e8e <RTC_ByteToBcd2>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	785b      	ldrb	r3, [r3, #1]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fa22 	bl	8006e8e <RTC_ByteToBcd2>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a4e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	789b      	ldrb	r3, [r3, #2]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fa1a 	bl	8006e8e <RTC_ByteToBcd2>
 8006a5a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a5c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	78db      	ldrb	r3, [r3, #3]
 8006a64:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	e018      	b.n	8006a9e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d102      	bne.n	8006a80 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a8c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006a92:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	78db      	ldrb	r3, [r3, #3]
 8006a98:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	22ca      	movs	r2, #202	; 0xca
 8006aa4:	625a      	str	r2, [r3, #36]	; 0x24
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2253      	movs	r2, #83	; 0x53
 8006aac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f991 	bl	8006dd6 <RTC_EnterInitMode>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006ab8:	7cfb      	ldrb	r3, [r7, #19]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d120      	bne.n	8006b00 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006ac8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006acc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006adc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6899      	ldr	r1, [r3, #8]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	431a      	orrs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f9a4 	bl	8006e44 <RTC_ExitInitMode>
 8006afc:	4603      	mov	r3, r0
 8006afe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006b00:	7cfb      	ldrb	r3, [r7, #19]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d102      	bne.n	8006b0c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	22ff      	movs	r2, #255	; 0xff
 8006b12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	771a      	strb	r2, [r3, #28]

  return status;
 8006b1a:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd90      	pop	{r4, r7, pc}

08006b24 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006b56:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006b5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	0c1b      	lsrs	r3, r3, #16
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	0d9b      	lsrs	r3, r3, #22
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d11a      	bne.n	8006bd6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 f98f 	bl	8006ec8 <RTC_Bcd2ToByte>
 8006baa:	4603      	mov	r3, r0
 8006bac:	461a      	mov	r2, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	785b      	ldrb	r3, [r3, #1]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f986 	bl	8006ec8 <RTC_Bcd2ToByte>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	789b      	ldrb	r3, [r3, #2]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 f97d 	bl	8006ec8 <RTC_Bcd2ToByte>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006be0:	b590      	push	{r4, r7, lr}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	7f1b      	ldrb	r3, [r3, #28]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_RTC_SetDate+0x1c>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e071      	b.n	8006ce0 <HAL_RTC_SetDate+0x100>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2202      	movs	r2, #2
 8006c06:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10e      	bne.n	8006c2c <HAL_RTC_SetDate+0x4c>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	785b      	ldrb	r3, [r3, #1]
 8006c12:	f003 0310 	and.w	r3, r3, #16
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d008      	beq.n	8006c2c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	785b      	ldrb	r3, [r3, #1]
 8006c1e:	f023 0310 	bic.w	r3, r3, #16
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	330a      	adds	r3, #10
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d11c      	bne.n	8006c6c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	78db      	ldrb	r3, [r3, #3]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f929 	bl	8006e8e <RTC_ByteToBcd2>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 f922 	bl	8006e8e <RTC_ByteToBcd2>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c4e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	789b      	ldrb	r3, [r3, #2]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 f91a 	bl	8006e8e <RTC_ByteToBcd2>
 8006c5a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c5c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	e00e      	b.n	8006c8a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	78db      	ldrb	r3, [r3, #3]
 8006c70:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c78:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006c7e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	22ca      	movs	r2, #202	; 0xca
 8006c90:	625a      	str	r2, [r3, #36]	; 0x24
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2253      	movs	r2, #83	; 0x53
 8006c98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f89b 	bl	8006dd6 <RTC_EnterInitMode>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006ca4:	7cfb      	ldrb	r3, [r7, #19]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10c      	bne.n	8006cc4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006cb4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006cb8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 f8c2 	bl	8006e44 <RTC_ExitInitMode>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006cc4:	7cfb      	ldrb	r3, [r7, #19]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d102      	bne.n	8006cd0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	22ff      	movs	r2, #255	; 0xff
 8006cd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	771a      	strb	r2, [r3, #28]

  return status;
 8006cde:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd90      	pop	{r4, r7, pc}

08006ce8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	0c1b      	lsrs	r3, r3, #16
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	0a1b      	lsrs	r3, r3, #8
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	0b5b      	lsrs	r3, r3, #13
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d11a      	bne.n	8006d7c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	78db      	ldrb	r3, [r3, #3]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 f8bc 	bl	8006ec8 <RTC_Bcd2ToByte>
 8006d50:	4603      	mov	r3, r0
 8006d52:	461a      	mov	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	785b      	ldrb	r3, [r3, #1]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 f8b3 	bl	8006ec8 <RTC_Bcd2ToByte>
 8006d62:	4603      	mov	r3, r0
 8006d64:	461a      	mov	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	789b      	ldrb	r3, [r3, #2]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 f8aa 	bl	8006ec8 <RTC_Bcd2ToByte>
 8006d74:	4603      	mov	r3, r0
 8006d76:	461a      	mov	r2, r3
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006da0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006da2:	f7fd fe3f 	bl	8004a24 <HAL_GetTick>
 8006da6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006da8:	e009      	b.n	8006dbe <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006daa:	f7fd fe3b 	bl	8004a24 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006db8:	d901      	bls.n	8006dbe <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e007      	b.n	8006dce <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0ee      	beq.n	8006daa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d122      	bne.n	8006e3a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e02:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e04:	f7fd fe0e 	bl	8004a24 <HAL_GetTick>
 8006e08:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006e0a:	e00c      	b.n	8006e26 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e0c:	f7fd fe0a 	bl	8004a24 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e1a:	d904      	bls.n	8006e26 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2204      	movs	r2, #4
 8006e20:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d102      	bne.n	8006e3a <RTC_EnterInitMode+0x64>
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d1e8      	bne.n	8006e0c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e5e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff ff89 	bl	8006d86 <HAL_RTC_WaitForSynchro>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d004      	beq.n	8006e84 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2204      	movs	r2, #4
 8006e7e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	4603      	mov	r3, r0
 8006e96:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006e9c:	e005      	b.n	8006eaa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	3b0a      	subs	r3, #10
 8006ea8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006eaa:	79fb      	ldrb	r3, [r7, #7]
 8006eac:	2b09      	cmp	r3, #9
 8006eae:	d8f6      	bhi.n	8006e9e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	b2db      	uxtb	r3, r3
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006ed6:	79fb      	ldrb	r3, [r7, #7]
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	0092      	lsls	r2, r2, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	b2db      	uxtb	r3, r3
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e07b      	b.n	800700a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d108      	bne.n	8006f2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f22:	d009      	beq.n	8006f38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	61da      	str	r2, [r3, #28]
 8006f2a:	e005      	b.n	8006f38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fd fa64 	bl	8004420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbc:	ea42 0103 	orr.w	r1, r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	0c1b      	lsrs	r3, r3, #16
 8006fd6:	f003 0104 	and.w	r1, r3, #4
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	f003 0210 	and.w	r2, r3, #16
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	69da      	ldr	r2, [r3, #28]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ff8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b088      	sub	sp, #32
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	603b      	str	r3, [r7, #0]
 800701e:	4613      	mov	r3, r2
 8007020:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_SPI_Transmit+0x22>
 8007030:	2302      	movs	r3, #2
 8007032:	e126      	b.n	8007282 <HAL_SPI_Transmit+0x270>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800703c:	f7fd fcf2 	bl	8004a24 <HAL_GetTick>
 8007040:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b01      	cmp	r3, #1
 8007050:	d002      	beq.n	8007058 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007052:	2302      	movs	r3, #2
 8007054:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007056:	e10b      	b.n	8007270 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_SPI_Transmit+0x52>
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d102      	bne.n	800706a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007068:	e102      	b.n	8007270 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2203      	movs	r2, #3
 800706e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	88fa      	ldrh	r2, [r7, #6]
 8007082:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	88fa      	ldrh	r2, [r7, #6]
 8007088:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b0:	d10f      	bne.n	80070d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d007      	beq.n	80070f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070f8:	d14b      	bne.n	8007192 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <HAL_SPI_Transmit+0xf6>
 8007102:	8afb      	ldrh	r3, [r7, #22]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d13e      	bne.n	8007186 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710c:	881a      	ldrh	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	1c9a      	adds	r2, r3, #2
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800712c:	e02b      	b.n	8007186 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b02      	cmp	r3, #2
 800713a:	d112      	bne.n	8007162 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	881a      	ldrh	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714c:	1c9a      	adds	r2, r3, #2
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007160:	e011      	b.n	8007186 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007162:	f7fd fc5f 	bl	8004a24 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d803      	bhi.n	800717a <HAL_SPI_Transmit+0x168>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007178:	d102      	bne.n	8007180 <HAL_SPI_Transmit+0x16e>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d102      	bne.n	8007186 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007184:	e074      	b.n	8007270 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1ce      	bne.n	800712e <HAL_SPI_Transmit+0x11c>
 8007190:	e04c      	b.n	800722c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <HAL_SPI_Transmit+0x18e>
 800719a:	8afb      	ldrh	r3, [r7, #22]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d140      	bne.n	8007222 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	330c      	adds	r3, #12
 80071aa:	7812      	ldrb	r2, [r2, #0]
 80071ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071c6:	e02c      	b.n	8007222 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d113      	bne.n	80071fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	330c      	adds	r3, #12
 80071e0:	7812      	ldrb	r2, [r2, #0]
 80071e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80071fc:	e011      	b.n	8007222 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071fe:	f7fd fc11 	bl	8004a24 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	429a      	cmp	r2, r3
 800720c:	d803      	bhi.n	8007216 <HAL_SPI_Transmit+0x204>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007214:	d102      	bne.n	800721c <HAL_SPI_Transmit+0x20a>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d102      	bne.n	8007222 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007220:	e026      	b.n	8007270 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007226:	b29b      	uxth	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1cd      	bne.n	80071c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 fb13 	bl	800785c <SPI_EndRxTxTransaction>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800724a:	2300      	movs	r3, #0
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	77fb      	strb	r3, [r7, #31]
 800726c:	e000      	b.n	8007270 <HAL_SPI_Transmit+0x25e>
  }

error:
 800726e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007280:	7ffb      	ldrb	r3, [r7, #31]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3720      	adds	r7, #32
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_SPI_Transmit_DMA+0x20>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e09b      	b.n	80073e4 <HAL_SPI_Transmit_DMA+0x158>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d002      	beq.n	80072c6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80072c0:	2302      	movs	r3, #2
 80072c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072c4:	e089      	b.n	80073da <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <HAL_SPI_Transmit_DMA+0x46>
 80072cc:	88fb      	ldrh	r3, [r7, #6]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072d6:	e080      	b.n	80073da <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2203      	movs	r2, #3
 80072dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	88fa      	ldrh	r2, [r7, #6]
 80072f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800731e:	d10f      	bne.n	8007340 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800732e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800733e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007344:	4a29      	ldr	r2, [pc, #164]	; (80073ec <HAL_SPI_Transmit_DMA+0x160>)
 8007346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734c:	4a28      	ldr	r2, [pc, #160]	; (80073f0 <HAL_SPI_Transmit_DMA+0x164>)
 800734e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007354:	4a27      	ldr	r2, [pc, #156]	; (80073f4 <HAL_SPI_Transmit_DMA+0x168>)
 8007356:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735c:	2200      	movs	r2, #0
 800735e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007368:	4619      	mov	r1, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007376:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007378:	f7fd fd14 	bl	8004da4 <HAL_DMA_Start_IT>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00c      	beq.n	800739c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007386:	f043 0210 	orr.w	r2, r3, #16
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800739a:	e01e      	b.n	80073da <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	2b40      	cmp	r3, #64	; 0x40
 80073a8:	d007      	beq.n	80073ba <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0220 	orr.w	r2, r2, #32
 80073c8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0202 	orr.w	r2, r2, #2
 80073d8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	080076c9 	.word	0x080076c9
 80073f0:	08007621 	.word	0x08007621
 80073f4:	080076e5 	.word	0x080076e5

080073f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	099b      	lsrs	r3, r3, #6
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10f      	bne.n	800743c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	099b      	lsrs	r3, r3, #6
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d004      	beq.n	800743c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
    return;
 800743a:	e0d7      	b.n	80075ec <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <HAL_SPI_IRQHandler+0x66>
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	09db      	lsrs	r3, r3, #7
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d004      	beq.n	800745e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
    return;
 800745c:	e0c6      	b.n	80075ec <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	095b      	lsrs	r3, r3, #5
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10c      	bne.n	8007484 <HAL_SPI_IRQHandler+0x8c>
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	099b      	lsrs	r3, r3, #6
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d106      	bne.n	8007484 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	0a1b      	lsrs	r3, r3, #8
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 80b4 	beq.w	80075ec <HAL_SPI_IRQHandler+0x1f4>
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 80ad 	beq.w	80075ec <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	099b      	lsrs	r3, r3, #6
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d023      	beq.n	80074e6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d011      	beq.n	80074ce <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ae:	f043 0204 	orr.w	r2, r3, #4
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	e00b      	b.n	80074e6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074ce:	2300      	movs	r3, #0
 80074d0:	613b      	str	r3, [r7, #16]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	693b      	ldr	r3, [r7, #16]
        return;
 80074e4:	e082      	b.n	80075ec <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d014      	beq.n	800751c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f6:	f043 0201 	orr.w	r2, r3, #1
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80074fe:	2300      	movs	r3, #0
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	0a1b      	lsrs	r3, r3, #8
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00c      	beq.n	8007542 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752c:	f043 0208 	orr.w	r2, r3, #8
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007534:	2300      	movs	r3, #0
 8007536:	60bb      	str	r3, [r7, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	60bb      	str	r3, [r7, #8]
 8007540:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007546:	2b00      	cmp	r3, #0
 8007548:	d04f      	beq.n	80075ea <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007558:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <HAL_SPI_IRQHandler+0x17e>
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d034      	beq.n	80075e0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0203 	bic.w	r2, r2, #3
 8007584:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758a:	2b00      	cmp	r3, #0
 800758c:	d011      	beq.n	80075b2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007592:	4a18      	ldr	r2, [pc, #96]	; (80075f4 <HAL_SPI_IRQHandler+0x1fc>)
 8007594:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800759a:	4618      	mov	r0, r3
 800759c:	f7fd fcca 	bl	8004f34 <HAL_DMA_Abort_IT>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d005      	beq.n	80075b2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d016      	beq.n	80075e8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075be:	4a0d      	ldr	r2, [pc, #52]	; (80075f4 <HAL_SPI_IRQHandler+0x1fc>)
 80075c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fd fcb4 	bl	8004f34 <HAL_DMA_Abort_IT>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80075de:	e003      	b.n	80075e8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f813 	bl	800760c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80075e6:	e000      	b.n	80075ea <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80075e8:	bf00      	nop
    return;
 80075ea:	bf00      	nop
  }
}
 80075ec:	3720      	adds	r7, #32
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	08007725 	.word	0x08007725

080075f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800762e:	f7fd f9f9 	bl	8004a24 <HAL_GetTick>
 8007632:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007642:	d03b      	beq.n	80076bc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0220 	bic.w	r2, r2, #32
 8007652:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0202 	bic.w	r2, r2, #2
 8007662:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	2164      	movs	r1, #100	; 0x64
 8007668:	6978      	ldr	r0, [r7, #20]
 800766a:	f000 f8f7 	bl	800785c <SPI_EndRxTxTransaction>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007678:	f043 0220 	orr.w	r2, r3, #32
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2200      	movs	r2, #0
 80076a2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80076b4:	6978      	ldr	r0, [r7, #20]
 80076b6:	f7ff ffa9 	bl	800760c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80076ba:	e002      	b.n	80076c2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80076bc:	6978      	ldr	r0, [r7, #20]
 80076be:	f7fb f9a1 	bl	8002a04 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff ff8e 	bl	80075f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076dc:	bf00      	nop
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0203 	bic.w	r2, r2, #3
 8007700:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007706:	f043 0210 	orr.w	r2, r3, #16
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7ff ff78 	bl	800760c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7ff ff64 	bl	800760c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007744:	bf00      	nop
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	4613      	mov	r3, r2
 800775a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800775c:	f7fd f962 	bl	8004a24 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	1a9b      	subs	r3, r3, r2
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	4413      	add	r3, r2
 800776a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800776c:	f7fd f95a 	bl	8004a24 <HAL_GetTick>
 8007770:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007772:	4b39      	ldr	r3, [pc, #228]	; (8007858 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	015b      	lsls	r3, r3, #5
 8007778:	0d1b      	lsrs	r3, r3, #20
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	fb02 f303 	mul.w	r3, r2, r3
 8007780:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007782:	e054      	b.n	800782e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800778a:	d050      	beq.n	800782e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800778c:	f7fd f94a 	bl	8004a24 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	429a      	cmp	r2, r3
 800779a:	d902      	bls.n	80077a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d13d      	bne.n	800781e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ba:	d111      	bne.n	80077e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c4:	d004      	beq.n	80077d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ce:	d107      	bne.n	80077e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e8:	d10f      	bne.n	800780a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007808:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e017      	b.n	800784e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	3b01      	subs	r3, #1
 800782c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4013      	ands	r3, r2
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	429a      	cmp	r2, r3
 800783c:	bf0c      	ite	eq
 800783e:	2301      	moveq	r3, #1
 8007840:	2300      	movne	r3, #0
 8007842:	b2db      	uxtb	r3, r3
 8007844:	461a      	mov	r2, r3
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	429a      	cmp	r2, r3
 800784a:	d19b      	bne.n	8007784 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3720      	adds	r7, #32
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	2000009c 	.word	0x2000009c

0800785c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b088      	sub	sp, #32
 8007860:	af02      	add	r7, sp, #8
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007868:	4b1b      	ldr	r3, [pc, #108]	; (80078d8 <SPI_EndRxTxTransaction+0x7c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a1b      	ldr	r2, [pc, #108]	; (80078dc <SPI_EndRxTxTransaction+0x80>)
 800786e:	fba2 2303 	umull	r2, r3, r2, r3
 8007872:	0d5b      	lsrs	r3, r3, #21
 8007874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007878:	fb02 f303 	mul.w	r3, r2, r3
 800787c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007886:	d112      	bne.n	80078ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2200      	movs	r2, #0
 8007890:	2180      	movs	r1, #128	; 0x80
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f7ff ff5a 	bl	800774c <SPI_WaitFlagStateUntilTimeout>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d016      	beq.n	80078cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a2:	f043 0220 	orr.w	r2, r3, #32
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e00f      	b.n	80078ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00a      	beq.n	80078ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c4:	2b80      	cmp	r3, #128	; 0x80
 80078c6:	d0f2      	beq.n	80078ae <SPI_EndRxTxTransaction+0x52>
 80078c8:	e000      	b.n	80078cc <SPI_EndRxTxTransaction+0x70>
        break;
 80078ca:	bf00      	nop
  }

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	2000009c 	.word	0x2000009c
 80078dc:	165e9f81 	.word	0x165e9f81

080078e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e041      	b.n	8007976 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fc fe16 	bl	8004538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	3304      	adds	r3, #4
 800791c:	4619      	mov	r1, r3
 800791e:	4610      	mov	r0, r2
 8007920:	f000 fa96 	bl	8007e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
	...

08007980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d001      	beq.n	8007998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e04e      	b.n	8007a36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68da      	ldr	r2, [r3, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0201 	orr.w	r2, r2, #1
 80079ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a23      	ldr	r2, [pc, #140]	; (8007a44 <HAL_TIM_Base_Start_IT+0xc4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d022      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c2:	d01d      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a1f      	ldr	r2, [pc, #124]	; (8007a48 <HAL_TIM_Base_Start_IT+0xc8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d018      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a1e      	ldr	r2, [pc, #120]	; (8007a4c <HAL_TIM_Base_Start_IT+0xcc>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a1c      	ldr	r2, [pc, #112]	; (8007a50 <HAL_TIM_Base_Start_IT+0xd0>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00e      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1b      	ldr	r2, [pc, #108]	; (8007a54 <HAL_TIM_Base_Start_IT+0xd4>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d009      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a19      	ldr	r2, [pc, #100]	; (8007a58 <HAL_TIM_Base_Start_IT+0xd8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d004      	beq.n	8007a00 <HAL_TIM_Base_Start_IT+0x80>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a18      	ldr	r2, [pc, #96]	; (8007a5c <HAL_TIM_Base_Start_IT+0xdc>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d111      	bne.n	8007a24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b06      	cmp	r3, #6
 8007a10:	d010      	beq.n	8007a34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f042 0201 	orr.w	r2, r2, #1
 8007a20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a22:	e007      	b.n	8007a34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0201 	orr.w	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40010000 	.word	0x40010000
 8007a48:	40000400 	.word	0x40000400
 8007a4c:	40000800 	.word	0x40000800
 8007a50:	40000c00 	.word	0x40000c00
 8007a54:	40010400 	.word	0x40010400
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	40001800 	.word	0x40001800

08007a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d122      	bne.n	8007abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d11b      	bne.n	8007abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f06f 0202 	mvn.w	r2, #2
 8007a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f9b5 	bl	8007e12 <HAL_TIM_IC_CaptureCallback>
 8007aa8:	e005      	b.n	8007ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f9a7 	bl	8007dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f9b8 	bl	8007e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d122      	bne.n	8007b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d11b      	bne.n	8007b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f06f 0204 	mvn.w	r2, #4
 8007ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f98b 	bl	8007e12 <HAL_TIM_IC_CaptureCallback>
 8007afc:	e005      	b.n	8007b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f97d 	bl	8007dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f98e 	bl	8007e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d122      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	d11b      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f06f 0208 	mvn.w	r2, #8
 8007b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2204      	movs	r2, #4
 8007b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f961 	bl	8007e12 <HAL_TIM_IC_CaptureCallback>
 8007b50:	e005      	b.n	8007b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f953 	bl	8007dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f964 	bl	8007e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f003 0310 	and.w	r3, r3, #16
 8007b6e:	2b10      	cmp	r3, #16
 8007b70:	d122      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	2b10      	cmp	r3, #16
 8007b7e:	d11b      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f06f 0210 	mvn.w	r2, #16
 8007b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2208      	movs	r2, #8
 8007b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f937 	bl	8007e12 <HAL_TIM_IC_CaptureCallback>
 8007ba4:	e005      	b.n	8007bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f929 	bl	8007dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f93a 	bl	8007e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d10e      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d107      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f06f 0201 	mvn.w	r2, #1
 8007bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7fb ff92 	bl	8003b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bee:	2b80      	cmp	r3, #128	; 0x80
 8007bf0:	d10e      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfc:	2b80      	cmp	r3, #128	; 0x80
 8007bfe:	d107      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fae0 	bl	80081d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1a:	2b40      	cmp	r3, #64	; 0x40
 8007c1c:	d10e      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c28:	2b40      	cmp	r3, #64	; 0x40
 8007c2a:	d107      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f8ff 	bl	8007e3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	f003 0320 	and.w	r3, r3, #32
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d10e      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f003 0320 	and.w	r3, r3, #32
 8007c54:	2b20      	cmp	r3, #32
 8007c56:	d107      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0220 	mvn.w	r2, #32
 8007c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 faaa 	bl	80081bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c68:	bf00      	nop
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <HAL_TIM_ConfigClockSource+0x1c>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e0b4      	b.n	8007df6 <HAL_TIM_ConfigClockSource+0x186>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cc4:	d03e      	beq.n	8007d44 <HAL_TIM_ConfigClockSource+0xd4>
 8007cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cca:	f200 8087 	bhi.w	8007ddc <HAL_TIM_ConfigClockSource+0x16c>
 8007cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd2:	f000 8086 	beq.w	8007de2 <HAL_TIM_ConfigClockSource+0x172>
 8007cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cda:	d87f      	bhi.n	8007ddc <HAL_TIM_ConfigClockSource+0x16c>
 8007cdc:	2b70      	cmp	r3, #112	; 0x70
 8007cde:	d01a      	beq.n	8007d16 <HAL_TIM_ConfigClockSource+0xa6>
 8007ce0:	2b70      	cmp	r3, #112	; 0x70
 8007ce2:	d87b      	bhi.n	8007ddc <HAL_TIM_ConfigClockSource+0x16c>
 8007ce4:	2b60      	cmp	r3, #96	; 0x60
 8007ce6:	d050      	beq.n	8007d8a <HAL_TIM_ConfigClockSource+0x11a>
 8007ce8:	2b60      	cmp	r3, #96	; 0x60
 8007cea:	d877      	bhi.n	8007ddc <HAL_TIM_ConfigClockSource+0x16c>
 8007cec:	2b50      	cmp	r3, #80	; 0x50
 8007cee:	d03c      	beq.n	8007d6a <HAL_TIM_ConfigClockSource+0xfa>
 8007cf0:	2b50      	cmp	r3, #80	; 0x50
 8007cf2:	d873      	bhi.n	8007ddc <HAL_TIM_ConfigClockSource+0x16c>
 8007cf4:	2b40      	cmp	r3, #64	; 0x40
 8007cf6:	d058      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x13a>
 8007cf8:	2b40      	cmp	r3, #64	; 0x40
 8007cfa:	d86f      	bhi.n	8007ddc <HAL_TIM_ConfigClockSource+0x16c>
 8007cfc:	2b30      	cmp	r3, #48	; 0x30
 8007cfe:	d064      	beq.n	8007dca <HAL_TIM_ConfigClockSource+0x15a>
 8007d00:	2b30      	cmp	r3, #48	; 0x30
 8007d02:	d86b      	bhi.n	8007ddc <HAL_TIM_ConfigClockSource+0x16c>
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	d060      	beq.n	8007dca <HAL_TIM_ConfigClockSource+0x15a>
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d867      	bhi.n	8007ddc <HAL_TIM_ConfigClockSource+0x16c>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d05c      	beq.n	8007dca <HAL_TIM_ConfigClockSource+0x15a>
 8007d10:	2b10      	cmp	r3, #16
 8007d12:	d05a      	beq.n	8007dca <HAL_TIM_ConfigClockSource+0x15a>
 8007d14:	e062      	b.n	8007ddc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	6899      	ldr	r1, [r3, #8]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f000 f9ad 	bl	8008084 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	609a      	str	r2, [r3, #8]
      break;
 8007d42:	e04f      	b.n	8007de4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6818      	ldr	r0, [r3, #0]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	6899      	ldr	r1, [r3, #8]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f000 f996 	bl	8008084 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d66:	609a      	str	r2, [r3, #8]
      break;
 8007d68:	e03c      	b.n	8007de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	6859      	ldr	r1, [r3, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	461a      	mov	r2, r3
 8007d78:	f000 f90a 	bl	8007f90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2150      	movs	r1, #80	; 0x50
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 f963 	bl	800804e <TIM_ITRx_SetConfig>
      break;
 8007d88:	e02c      	b.n	8007de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	6859      	ldr	r1, [r3, #4]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	461a      	mov	r2, r3
 8007d98:	f000 f929 	bl	8007fee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2160      	movs	r1, #96	; 0x60
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 f953 	bl	800804e <TIM_ITRx_SetConfig>
      break;
 8007da8:	e01c      	b.n	8007de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	6859      	ldr	r1, [r3, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	461a      	mov	r2, r3
 8007db8:	f000 f8ea 	bl	8007f90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2140      	movs	r1, #64	; 0x40
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f943 	bl	800804e <TIM_ITRx_SetConfig>
      break;
 8007dc8:	e00c      	b.n	8007de4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	f000 f93a 	bl	800804e <TIM_ITRx_SetConfig>
      break;
 8007dda:	e003      	b.n	8007de4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	73fb      	strb	r3, [r7, #15]
      break;
 8007de0:	e000      	b.n	8007de4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
	...

08007e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a40      	ldr	r2, [pc, #256]	; (8007f64 <TIM_Base_SetConfig+0x114>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d013      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e6e:	d00f      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a3d      	ldr	r2, [pc, #244]	; (8007f68 <TIM_Base_SetConfig+0x118>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d00b      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a3c      	ldr	r2, [pc, #240]	; (8007f6c <TIM_Base_SetConfig+0x11c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d007      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a3b      	ldr	r2, [pc, #236]	; (8007f70 <TIM_Base_SetConfig+0x120>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d003      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a3a      	ldr	r2, [pc, #232]	; (8007f74 <TIM_Base_SetConfig+0x124>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d108      	bne.n	8007ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a2f      	ldr	r2, [pc, #188]	; (8007f64 <TIM_Base_SetConfig+0x114>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d02b      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb0:	d027      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a2c      	ldr	r2, [pc, #176]	; (8007f68 <TIM_Base_SetConfig+0x118>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d023      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a2b      	ldr	r2, [pc, #172]	; (8007f6c <TIM_Base_SetConfig+0x11c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d01f      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a2a      	ldr	r2, [pc, #168]	; (8007f70 <TIM_Base_SetConfig+0x120>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d01b      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a29      	ldr	r2, [pc, #164]	; (8007f74 <TIM_Base_SetConfig+0x124>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d017      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a28      	ldr	r2, [pc, #160]	; (8007f78 <TIM_Base_SetConfig+0x128>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d013      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a27      	ldr	r2, [pc, #156]	; (8007f7c <TIM_Base_SetConfig+0x12c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00f      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a26      	ldr	r2, [pc, #152]	; (8007f80 <TIM_Base_SetConfig+0x130>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00b      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a25      	ldr	r2, [pc, #148]	; (8007f84 <TIM_Base_SetConfig+0x134>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d007      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a24      	ldr	r2, [pc, #144]	; (8007f88 <TIM_Base_SetConfig+0x138>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d003      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a23      	ldr	r2, [pc, #140]	; (8007f8c <TIM_Base_SetConfig+0x13c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d108      	bne.n	8007f14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a0a      	ldr	r2, [pc, #40]	; (8007f64 <TIM_Base_SetConfig+0x114>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_Base_SetConfig+0xf8>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a0c      	ldr	r2, [pc, #48]	; (8007f74 <TIM_Base_SetConfig+0x124>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d103      	bne.n	8007f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	615a      	str	r2, [r3, #20]
}
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	40010000 	.word	0x40010000
 8007f68:	40000400 	.word	0x40000400
 8007f6c:	40000800 	.word	0x40000800
 8007f70:	40000c00 	.word	0x40000c00
 8007f74:	40010400 	.word	0x40010400
 8007f78:	40014000 	.word	0x40014000
 8007f7c:	40014400 	.word	0x40014400
 8007f80:	40014800 	.word	0x40014800
 8007f84:	40001800 	.word	0x40001800
 8007f88:	40001c00 	.word	0x40001c00
 8007f8c:	40002000 	.word	0x40002000

08007f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	f023 0201 	bic.w	r2, r3, #1
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f023 030a 	bic.w	r3, r3, #10
 8007fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	621a      	str	r2, [r3, #32]
}
 8007fe2:	bf00      	nop
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b087      	sub	sp, #28
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	f023 0210 	bic.w	r2, r3, #16
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008018:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	031b      	lsls	r3, r3, #12
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800802a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	4313      	orrs	r3, r2
 8008034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	621a      	str	r2, [r3, #32]
}
 8008042:	bf00      	nop
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	f043 0307 	orr.w	r3, r3, #7
 8008070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	609a      	str	r2, [r3, #8]
}
 8008078:	bf00      	nop
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800809e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	021a      	lsls	r2, r3, #8
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	431a      	orrs	r2, r3
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	609a      	str	r2, [r3, #8]
}
 80080b8:	bf00      	nop
 80080ba:	371c      	adds	r7, #28
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080d8:	2302      	movs	r3, #2
 80080da:	e05a      	b.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a21      	ldr	r2, [pc, #132]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d022      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008128:	d01d      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a1d      	ldr	r2, [pc, #116]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d018      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a1b      	ldr	r2, [pc, #108]	; (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d013      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a1a      	ldr	r2, [pc, #104]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00e      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a18      	ldr	r2, [pc, #96]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d009      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a17      	ldr	r2, [pc, #92]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d004      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a15      	ldr	r2, [pc, #84]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d10c      	bne.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800816c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	4313      	orrs	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40010000 	.word	0x40010000
 80081a4:	40000400 	.word	0x40000400
 80081a8:	40000800 	.word	0x40000800
 80081ac:	40000c00 	.word	0x40000c00
 80081b0:	40010400 	.word	0x40010400
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40001800 	.word	0x40001800

080081bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e03f      	b.n	8008276 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fc f9ba 	bl	8004584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2224      	movs	r2, #36	; 0x24
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68da      	ldr	r2, [r3, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fe2b 	bl	8008e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691a      	ldr	r2, [r3, #16]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800823c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	695a      	ldr	r2, [r3, #20]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800824c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800825c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2220      	movs	r2, #32
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2220      	movs	r2, #32
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	4613      	mov	r3, r2
 800828a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b20      	cmp	r3, #32
 8008296:	d11d      	bne.n	80082d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <HAL_UART_Receive_IT+0x26>
 800829e:	88fb      	ldrh	r3, [r7, #6]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e016      	b.n	80082d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d101      	bne.n	80082b6 <HAL_UART_Receive_IT+0x38>
 80082b2:	2302      	movs	r3, #2
 80082b4:	e00f      	b.n	80082d6 <HAL_UART_Receive_IT+0x58>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	461a      	mov	r2, r3
 80082c8:	68b9      	ldr	r1, [r7, #8]
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 fbd9 	bl	8008a82 <UART_Start_Receive_IT>
 80082d0:	4603      	mov	r3, r0
 80082d2:	e000      	b.n	80082d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80082d4:	2302      	movs	r3, #2
  }
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
	...

080082e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08c      	sub	sp, #48	; 0x30
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	4613      	mov	r3, r2
 80082ec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	d165      	bne.n	80083c6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <HAL_UART_Transmit_DMA+0x26>
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e05e      	b.n	80083c8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008310:	2b01      	cmp	r3, #1
 8008312:	d101      	bne.n	8008318 <HAL_UART_Transmit_DMA+0x38>
 8008314:	2302      	movs	r3, #2
 8008316:	e057      	b.n	80083c8 <HAL_UART_Transmit_DMA+0xe8>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	88fa      	ldrh	r2, [r7, #6]
 800832a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	88fa      	ldrh	r2, [r7, #6]
 8008330:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2221      	movs	r2, #33	; 0x21
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008344:	4a22      	ldr	r2, [pc, #136]	; (80083d0 <HAL_UART_Transmit_DMA+0xf0>)
 8008346:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834c:	4a21      	ldr	r2, [pc, #132]	; (80083d4 <HAL_UART_Transmit_DMA+0xf4>)
 800834e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008354:	4a20      	ldr	r2, [pc, #128]	; (80083d8 <HAL_UART_Transmit_DMA+0xf8>)
 8008356:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835c:	2200      	movs	r2, #0
 800835e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008360:	f107 0308 	add.w	r3, r7, #8
 8008364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	6819      	ldr	r1, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3304      	adds	r3, #4
 8008374:	461a      	mov	r2, r3
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	f7fc fd14 	bl	8004da4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008384:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3314      	adds	r3, #20
 8008394:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	617b      	str	r3, [r7, #20]
   return(result);
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3314      	adds	r3, #20
 80083ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ae:	627a      	str	r2, [r7, #36]	; 0x24
 80083b0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6a39      	ldr	r1, [r7, #32]
 80083b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e5      	bne.n	800838e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	e000      	b.n	80083c8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80083c6:	2302      	movs	r3, #2
  }
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3730      	adds	r7, #48	; 0x30
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	08008939 	.word	0x08008939
 80083d4:	080089d3 	.word	0x080089d3
 80083d8:	080089ef 	.word	0x080089ef

080083dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b0ba      	sub	sp, #232	; 0xe8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008402:	2300      	movs	r3, #0
 8008404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008408:	2300      	movs	r3, #0
 800840a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800840e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008412:	f003 030f 	and.w	r3, r3, #15
 8008416:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800841a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10f      	bne.n	8008442 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d009      	beq.n	8008442 <HAL_UART_IRQHandler+0x66>
 800842e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fc66 	bl	8008d0c <UART_Receive_IT>
      return;
 8008440:	e256      	b.n	80088f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 80de 	beq.w	8008608 <HAL_UART_IRQHandler+0x22c>
 800844c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	2b00      	cmp	r3, #0
 8008456:	d106      	bne.n	8008466 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800845c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80d1 	beq.w	8008608 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00b      	beq.n	800848a <HAL_UART_IRQHandler+0xae>
 8008472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847a:	2b00      	cmp	r3, #0
 800847c:	d005      	beq.n	800848a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008482:	f043 0201 	orr.w	r2, r3, #1
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800848a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00b      	beq.n	80084ae <HAL_UART_IRQHandler+0xd2>
 8008496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d005      	beq.n	80084ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a6:	f043 0202 	orr.w	r2, r3, #2
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00b      	beq.n	80084d2 <HAL_UART_IRQHandler+0xf6>
 80084ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	f043 0204 	orr.w	r2, r3, #4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80084d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d6:	f003 0308 	and.w	r3, r3, #8
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d011      	beq.n	8008502 <HAL_UART_IRQHandler+0x126>
 80084de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d105      	bne.n	80084f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80084ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	f043 0208 	orr.w	r2, r3, #8
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 81ed 	beq.w	80088e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800850c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	d008      	beq.n	800852a <HAL_UART_IRQHandler+0x14e>
 8008518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fbf1 	bl	8008d0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008534:	2b40      	cmp	r3, #64	; 0x40
 8008536:	bf0c      	ite	eq
 8008538:	2301      	moveq	r3, #1
 800853a:	2300      	movne	r3, #0
 800853c:	b2db      	uxtb	r3, r3
 800853e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008546:	f003 0308 	and.w	r3, r3, #8
 800854a:	2b00      	cmp	r3, #0
 800854c:	d103      	bne.n	8008556 <HAL_UART_IRQHandler+0x17a>
 800854e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008552:	2b00      	cmp	r3, #0
 8008554:	d04f      	beq.n	80085f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 faf9 	bl	8008b4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	d141      	bne.n	80085ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3314      	adds	r3, #20
 8008570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008574:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3314      	adds	r3, #20
 8008592:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008596:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800859a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80085a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80085ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1d9      	bne.n	800856a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d013      	beq.n	80085e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c2:	4a7d      	ldr	r2, [pc, #500]	; (80087b8 <HAL_UART_IRQHandler+0x3dc>)
 80085c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fc fcb2 	bl	8004f34 <HAL_DMA_Abort_IT>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d016      	beq.n	8008604 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e4:	e00e      	b.n	8008604 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f990 	bl	800890c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ec:	e00a      	b.n	8008604 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f98c 	bl	800890c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f4:	e006      	b.n	8008604 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f988 	bl	800890c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008602:	e170      	b.n	80088e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008604:	bf00      	nop
    return;
 8008606:	e16e      	b.n	80088e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860c:	2b01      	cmp	r3, #1
 800860e:	f040 814a 	bne.w	80088a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008616:	f003 0310 	and.w	r3, r3, #16
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 8143 	beq.w	80088a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008624:	f003 0310 	and.w	r3, r3, #16
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 813c 	beq.w	80088a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800862e:	2300      	movs	r3, #0
 8008630:	60bb      	str	r3, [r7, #8]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60bb      	str	r3, [r7, #8]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	60bb      	str	r3, [r7, #8]
 8008642:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864e:	2b40      	cmp	r3, #64	; 0x40
 8008650:	f040 80b4 	bne.w	80087bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008660:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 8140 	beq.w	80088ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800866e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008672:	429a      	cmp	r2, r3
 8008674:	f080 8139 	bcs.w	80088ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800867e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800868a:	f000 8088 	beq.w	800879e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	330c      	adds	r3, #12
 8008694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80086a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	330c      	adds	r3, #12
 80086b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80086ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80086be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80086d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1d9      	bne.n	800868e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3314      	adds	r3, #20
 80086e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80086ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086ec:	f023 0301 	bic.w	r3, r3, #1
 80086f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3314      	adds	r3, #20
 80086fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80086fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008702:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008706:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e1      	bne.n	80086da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3314      	adds	r3, #20
 800871c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008720:	e853 3f00 	ldrex	r3, [r3]
 8008724:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800872c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3314      	adds	r3, #20
 8008736:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800873a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800873c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008740:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e3      	bne.n	8008716 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2220      	movs	r2, #32
 8008752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	330c      	adds	r3, #12
 8008762:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800876c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800876e:	f023 0310 	bic.w	r3, r3, #16
 8008772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	330c      	adds	r3, #12
 800877c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008780:	65ba      	str	r2, [r7, #88]	; 0x58
 8008782:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008786:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800878e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e3      	bne.n	800875c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	4618      	mov	r0, r3
 800879a:	f7fc fb5b 	bl	8004e54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f8b6 	bl	8008920 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087b4:	e099      	b.n	80088ea <HAL_UART_IRQHandler+0x50e>
 80087b6:	bf00      	nop
 80087b8:	08008c15 	.word	0x08008c15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 808b 	beq.w	80088ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80087d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 8086 	beq.w	80088ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	330c      	adds	r3, #12
 80087e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	e853 3f00 	ldrex	r3, [r3]
 80087f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	330c      	adds	r3, #12
 8008802:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008806:	647a      	str	r2, [r7, #68]	; 0x44
 8008808:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800880c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800880e:	e841 2300 	strex	r3, r2, [r1]
 8008812:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1e3      	bne.n	80087e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3314      	adds	r3, #20
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	623b      	str	r3, [r7, #32]
   return(result);
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	f023 0301 	bic.w	r3, r3, #1
 8008830:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3314      	adds	r3, #20
 800883a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800883e:	633a      	str	r2, [r7, #48]	; 0x30
 8008840:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008846:	e841 2300 	strex	r3, r2, [r1]
 800884a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e3      	bne.n	800881a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2220      	movs	r2, #32
 8008856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	330c      	adds	r3, #12
 8008866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f023 0310 	bic.w	r3, r3, #16
 8008876:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	330c      	adds	r3, #12
 8008880:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008884:	61fa      	str	r2, [r7, #28]
 8008886:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	69b9      	ldr	r1, [r7, #24]
 800888a:	69fa      	ldr	r2, [r7, #28]
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	617b      	str	r3, [r7, #20]
   return(result);
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e3      	bne.n	8008860 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f83e 	bl	8008920 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088a4:	e023      	b.n	80088ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d009      	beq.n	80088c6 <HAL_UART_IRQHandler+0x4ea>
 80088b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f9bc 	bl	8008c3c <UART_Transmit_IT>
    return;
 80088c4:	e014      	b.n	80088f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00e      	beq.n	80088f0 <HAL_UART_IRQHandler+0x514>
 80088d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d008      	beq.n	80088f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f9fc 	bl	8008cdc <UART_EndTransmit_IT>
    return;
 80088e4:	e004      	b.n	80088f0 <HAL_UART_IRQHandler+0x514>
    return;
 80088e6:	bf00      	nop
 80088e8:	e002      	b.n	80088f0 <HAL_UART_IRQHandler+0x514>
      return;
 80088ea:	bf00      	nop
 80088ec:	e000      	b.n	80088f0 <HAL_UART_IRQHandler+0x514>
      return;
 80088ee:	bf00      	nop
  }
}
 80088f0:	37e8      	adds	r7, #232	; 0xe8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop

080088f8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b090      	sub	sp, #64	; 0x40
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008944:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008950:	2b00      	cmp	r3, #0
 8008952:	d137      	bne.n	80089c4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008956:	2200      	movs	r2, #0
 8008958:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800895a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3314      	adds	r3, #20
 8008960:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	623b      	str	r3, [r7, #32]
   return(result);
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008970:	63bb      	str	r3, [r7, #56]	; 0x38
 8008972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3314      	adds	r3, #20
 8008978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800897a:	633a      	str	r2, [r7, #48]	; 0x30
 800897c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e5      	bne.n	800895a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800898e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	330c      	adds	r3, #12
 8008994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	60fb      	str	r3, [r7, #12]
   return(result);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a4:	637b      	str	r3, [r7, #52]	; 0x34
 80089a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	330c      	adds	r3, #12
 80089ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ae:	61fa      	str	r2, [r7, #28]
 80089b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b2:	69b9      	ldr	r1, [r7, #24]
 80089b4:	69fa      	ldr	r2, [r7, #28]
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	617b      	str	r3, [r7, #20]
   return(result);
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1e5      	bne.n	800898e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089c2:	e002      	b.n	80089ca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80089c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80089c6:	f7fa f807 	bl	80029d8 <HAL_UART_TxCpltCallback>
}
 80089ca:	bf00      	nop
 80089cc:	3740      	adds	r7, #64	; 0x40
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f7ff ff89 	bl	80088f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e6:	bf00      	nop
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a0a:	2b80      	cmp	r3, #128	; 0x80
 8008a0c:	bf0c      	ite	eq
 8008a0e:	2301      	moveq	r3, #1
 8008a10:	2300      	movne	r3, #0
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b21      	cmp	r3, #33	; 0x21
 8008a20:	d108      	bne.n	8008a34 <UART_DMAError+0x46>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008a2e:	68b8      	ldr	r0, [r7, #8]
 8008a30:	f000 f865 	bl	8008afe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3e:	2b40      	cmp	r3, #64	; 0x40
 8008a40:	bf0c      	ite	eq
 8008a42:	2301      	moveq	r3, #1
 8008a44:	2300      	movne	r3, #0
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b22      	cmp	r3, #34	; 0x22
 8008a54:	d108      	bne.n	8008a68 <UART_DMAError+0x7a>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d005      	beq.n	8008a68 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008a62:	68b8      	ldr	r0, [r7, #8]
 8008a64:	f000 f873 	bl	8008b4e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6c:	f043 0210 	orr.w	r2, r3, #16
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a74:	68b8      	ldr	r0, [r7, #8]
 8008a76:	f7ff ff49 	bl	800890c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a7a:	bf00      	nop
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b085      	sub	sp, #20
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	88fa      	ldrh	r2, [r7, #6]
 8008a9a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	88fa      	ldrh	r2, [r7, #6]
 8008aa0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2222      	movs	r2, #34	; 0x22
 8008aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d007      	beq.n	8008ad0 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68da      	ldr	r2, [r3, #12]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ace:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	695a      	ldr	r2, [r3, #20]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f042 0201 	orr.w	r2, r2, #1
 8008ade:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f042 0220 	orr.w	r2, r2, #32
 8008aee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b089      	sub	sp, #36	; 0x24
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	330c      	adds	r3, #12
 8008b0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b1c:	61fb      	str	r3, [r7, #28]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	330c      	adds	r3, #12
 8008b24:	69fa      	ldr	r2, [r7, #28]
 8008b26:	61ba      	str	r2, [r7, #24]
 8008b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2a:	6979      	ldr	r1, [r7, #20]
 8008b2c:	69ba      	ldr	r2, [r7, #24]
 8008b2e:	e841 2300 	strex	r3, r2, [r1]
 8008b32:	613b      	str	r3, [r7, #16]
   return(result);
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e5      	bne.n	8008b06 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2220      	movs	r2, #32
 8008b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008b42:	bf00      	nop
 8008b44:	3724      	adds	r7, #36	; 0x24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b095      	sub	sp, #84	; 0x54
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	330c      	adds	r3, #12
 8008b5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b60:	e853 3f00 	ldrex	r3, [r3]
 8008b64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	330c      	adds	r3, #12
 8008b74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b76:	643a      	str	r2, [r7, #64]	; 0x40
 8008b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b7e:	e841 2300 	strex	r3, r2, [r1]
 8008b82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1e5      	bne.n	8008b56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3314      	adds	r3, #20
 8008b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	f023 0301 	bic.w	r3, r3, #1
 8008ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb2:	e841 2300 	strex	r3, r2, [r1]
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1e5      	bne.n	8008b8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d119      	bne.n	8008bfa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	330c      	adds	r3, #12
 8008bcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	e853 3f00 	ldrex	r3, [r3]
 8008bd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f023 0310 	bic.w	r3, r3, #16
 8008bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	330c      	adds	r3, #12
 8008be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008be6:	61ba      	str	r2, [r7, #24]
 8008be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bea:	6979      	ldr	r1, [r7, #20]
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1e5      	bne.n	8008bc6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c08:	bf00      	nop
 8008c0a:	3754      	adds	r7, #84	; 0x54
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f7ff fe6c 	bl	800890c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c34:	bf00      	nop
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b21      	cmp	r3, #33	; 0x21
 8008c4e:	d13e      	bne.n	8008cce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c58:	d114      	bne.n	8008c84 <UART_Transmit_IT+0x48>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d110      	bne.n	8008c84 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	1c9a      	adds	r2, r3, #2
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	621a      	str	r2, [r3, #32]
 8008c82:	e008      	b.n	8008c96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a1b      	ldr	r3, [r3, #32]
 8008c88:	1c59      	adds	r1, r3, #1
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6211      	str	r1, [r2, #32]
 8008c8e:	781a      	ldrb	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10f      	bne.n	8008cca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68da      	ldr	r2, [r3, #12]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e000      	b.n	8008cd0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008cce:	2302      	movs	r3, #2
  }
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cf2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7f9 fe6b 	bl	80029d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08c      	sub	sp, #48	; 0x30
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b22      	cmp	r3, #34	; 0x22
 8008d1e:	f040 80ab 	bne.w	8008e78 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2a:	d117      	bne.n	8008d5c <UART_Receive_IT+0x50>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d113      	bne.n	8008d5c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d54:	1c9a      	adds	r2, r3, #2
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	629a      	str	r2, [r3, #40]	; 0x28
 8008d5a:	e026      	b.n	8008daa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d6e:	d007      	beq.n	8008d80 <UART_Receive_IT+0x74>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10a      	bne.n	8008d8e <UART_Receive_IT+0x82>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d106      	bne.n	8008d8e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8a:	701a      	strb	r2, [r3, #0]
 8008d8c:	e008      	b.n	8008da0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da4:	1c5a      	adds	r2, r3, #1
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	3b01      	subs	r3, #1
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	4619      	mov	r1, r3
 8008db8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d15a      	bne.n	8008e74 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 0220 	bic.w	r2, r2, #32
 8008dcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ddc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	695a      	ldr	r2, [r3, #20]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0201 	bic.w	r2, r2, #1
 8008dec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2220      	movs	r2, #32
 8008df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d135      	bne.n	8008e6a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	330c      	adds	r3, #12
 8008e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	e853 3f00 	ldrex	r3, [r3]
 8008e12:	613b      	str	r3, [r7, #16]
   return(result);
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f023 0310 	bic.w	r3, r3, #16
 8008e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	330c      	adds	r3, #12
 8008e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e24:	623a      	str	r2, [r7, #32]
 8008e26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e28:	69f9      	ldr	r1, [r7, #28]
 8008e2a:	6a3a      	ldr	r2, [r7, #32]
 8008e2c:	e841 2300 	strex	r3, r2, [r1]
 8008e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e5      	bne.n	8008e04 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0310 	and.w	r3, r3, #16
 8008e42:	2b10      	cmp	r3, #16
 8008e44:	d10a      	bne.n	8008e5c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	60fb      	str	r3, [r7, #12]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff fd5c 	bl	8008920 <HAL_UARTEx_RxEventCallback>
 8008e68:	e002      	b.n	8008e70 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7f9 fae0 	bl	8002430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	e002      	b.n	8008e7a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	e000      	b.n	8008e7a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008e78:	2302      	movs	r3, #2
  }
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3730      	adds	r7, #48	; 0x30
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e88:	b0c0      	sub	sp, #256	; 0x100
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea0:	68d9      	ldr	r1, [r3, #12]
 8008ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	ea40 0301 	orr.w	r3, r0, r1
 8008eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	431a      	orrs	r2, r3
 8008ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008edc:	f021 010c 	bic.w	r1, r1, #12
 8008ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008eea:	430b      	orrs	r3, r1
 8008eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008efe:	6999      	ldr	r1, [r3, #24]
 8008f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	ea40 0301 	orr.w	r3, r0, r1
 8008f0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	4b8f      	ldr	r3, [pc, #572]	; (8009150 <UART_SetConfig+0x2cc>)
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d005      	beq.n	8008f24 <UART_SetConfig+0xa0>
 8008f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	4b8d      	ldr	r3, [pc, #564]	; (8009154 <UART_SetConfig+0x2d0>)
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d104      	bne.n	8008f2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f24:	f7fd fbc6 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>
 8008f28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008f2c:	e003      	b.n	8008f36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f2e:	f7fd fbad 	bl	800668c <HAL_RCC_GetPCLK1Freq>
 8008f32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f40:	f040 810c 	bne.w	800915c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008f52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008f56:	4622      	mov	r2, r4
 8008f58:	462b      	mov	r3, r5
 8008f5a:	1891      	adds	r1, r2, r2
 8008f5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f5e:	415b      	adcs	r3, r3
 8008f60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f66:	4621      	mov	r1, r4
 8008f68:	eb12 0801 	adds.w	r8, r2, r1
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	eb43 0901 	adc.w	r9, r3, r1
 8008f72:	f04f 0200 	mov.w	r2, #0
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f86:	4690      	mov	r8, r2
 8008f88:	4699      	mov	r9, r3
 8008f8a:	4623      	mov	r3, r4
 8008f8c:	eb18 0303 	adds.w	r3, r8, r3
 8008f90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f94:	462b      	mov	r3, r5
 8008f96:	eb49 0303 	adc.w	r3, r9, r3
 8008f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008faa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	18db      	adds	r3, r3, r3
 8008fb6:	653b      	str	r3, [r7, #80]	; 0x50
 8008fb8:	4613      	mov	r3, r2
 8008fba:	eb42 0303 	adc.w	r3, r2, r3
 8008fbe:	657b      	str	r3, [r7, #84]	; 0x54
 8008fc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008fc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008fc8:	f7f7 fcb0 	bl	800092c <__aeabi_uldivmod>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4b61      	ldr	r3, [pc, #388]	; (8009158 <UART_SetConfig+0x2d4>)
 8008fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8008fd6:	095b      	lsrs	r3, r3, #5
 8008fd8:	011c      	lsls	r4, r3, #4
 8008fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fe4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008fe8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008fec:	4642      	mov	r2, r8
 8008fee:	464b      	mov	r3, r9
 8008ff0:	1891      	adds	r1, r2, r2
 8008ff2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ff4:	415b      	adcs	r3, r3
 8008ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ff8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ffc:	4641      	mov	r1, r8
 8008ffe:	eb12 0a01 	adds.w	sl, r2, r1
 8009002:	4649      	mov	r1, r9
 8009004:	eb43 0b01 	adc.w	fp, r3, r1
 8009008:	f04f 0200 	mov.w	r2, #0
 800900c:	f04f 0300 	mov.w	r3, #0
 8009010:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009014:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800901c:	4692      	mov	sl, r2
 800901e:	469b      	mov	fp, r3
 8009020:	4643      	mov	r3, r8
 8009022:	eb1a 0303 	adds.w	r3, sl, r3
 8009026:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800902a:	464b      	mov	r3, r9
 800902c:	eb4b 0303 	adc.w	r3, fp, r3
 8009030:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009040:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009044:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009048:	460b      	mov	r3, r1
 800904a:	18db      	adds	r3, r3, r3
 800904c:	643b      	str	r3, [r7, #64]	; 0x40
 800904e:	4613      	mov	r3, r2
 8009050:	eb42 0303 	adc.w	r3, r2, r3
 8009054:	647b      	str	r3, [r7, #68]	; 0x44
 8009056:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800905a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800905e:	f7f7 fc65 	bl	800092c <__aeabi_uldivmod>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	4611      	mov	r1, r2
 8009068:	4b3b      	ldr	r3, [pc, #236]	; (8009158 <UART_SetConfig+0x2d4>)
 800906a:	fba3 2301 	umull	r2, r3, r3, r1
 800906e:	095b      	lsrs	r3, r3, #5
 8009070:	2264      	movs	r2, #100	; 0x64
 8009072:	fb02 f303 	mul.w	r3, r2, r3
 8009076:	1acb      	subs	r3, r1, r3
 8009078:	00db      	lsls	r3, r3, #3
 800907a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800907e:	4b36      	ldr	r3, [pc, #216]	; (8009158 <UART_SetConfig+0x2d4>)
 8009080:	fba3 2302 	umull	r2, r3, r3, r2
 8009084:	095b      	lsrs	r3, r3, #5
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800908c:	441c      	add	r4, r3
 800908e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009092:	2200      	movs	r2, #0
 8009094:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009098:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800909c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80090a0:	4642      	mov	r2, r8
 80090a2:	464b      	mov	r3, r9
 80090a4:	1891      	adds	r1, r2, r2
 80090a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80090a8:	415b      	adcs	r3, r3
 80090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80090b0:	4641      	mov	r1, r8
 80090b2:	1851      	adds	r1, r2, r1
 80090b4:	6339      	str	r1, [r7, #48]	; 0x30
 80090b6:	4649      	mov	r1, r9
 80090b8:	414b      	adcs	r3, r1
 80090ba:	637b      	str	r3, [r7, #52]	; 0x34
 80090bc:	f04f 0200 	mov.w	r2, #0
 80090c0:	f04f 0300 	mov.w	r3, #0
 80090c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80090c8:	4659      	mov	r1, fp
 80090ca:	00cb      	lsls	r3, r1, #3
 80090cc:	4651      	mov	r1, sl
 80090ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090d2:	4651      	mov	r1, sl
 80090d4:	00ca      	lsls	r2, r1, #3
 80090d6:	4610      	mov	r0, r2
 80090d8:	4619      	mov	r1, r3
 80090da:	4603      	mov	r3, r0
 80090dc:	4642      	mov	r2, r8
 80090de:	189b      	adds	r3, r3, r2
 80090e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090e4:	464b      	mov	r3, r9
 80090e6:	460a      	mov	r2, r1
 80090e8:	eb42 0303 	adc.w	r3, r2, r3
 80090ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009100:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009104:	460b      	mov	r3, r1
 8009106:	18db      	adds	r3, r3, r3
 8009108:	62bb      	str	r3, [r7, #40]	; 0x28
 800910a:	4613      	mov	r3, r2
 800910c:	eb42 0303 	adc.w	r3, r2, r3
 8009110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009112:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009116:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800911a:	f7f7 fc07 	bl	800092c <__aeabi_uldivmod>
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	4b0d      	ldr	r3, [pc, #52]	; (8009158 <UART_SetConfig+0x2d4>)
 8009124:	fba3 1302 	umull	r1, r3, r3, r2
 8009128:	095b      	lsrs	r3, r3, #5
 800912a:	2164      	movs	r1, #100	; 0x64
 800912c:	fb01 f303 	mul.w	r3, r1, r3
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	3332      	adds	r3, #50	; 0x32
 8009136:	4a08      	ldr	r2, [pc, #32]	; (8009158 <UART_SetConfig+0x2d4>)
 8009138:	fba2 2303 	umull	r2, r3, r2, r3
 800913c:	095b      	lsrs	r3, r3, #5
 800913e:	f003 0207 	and.w	r2, r3, #7
 8009142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4422      	add	r2, r4
 800914a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800914c:	e105      	b.n	800935a <UART_SetConfig+0x4d6>
 800914e:	bf00      	nop
 8009150:	40011000 	.word	0x40011000
 8009154:	40011400 	.word	0x40011400
 8009158:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800915c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009160:	2200      	movs	r2, #0
 8009162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009166:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800916a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800916e:	4642      	mov	r2, r8
 8009170:	464b      	mov	r3, r9
 8009172:	1891      	adds	r1, r2, r2
 8009174:	6239      	str	r1, [r7, #32]
 8009176:	415b      	adcs	r3, r3
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
 800917a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800917e:	4641      	mov	r1, r8
 8009180:	1854      	adds	r4, r2, r1
 8009182:	4649      	mov	r1, r9
 8009184:	eb43 0501 	adc.w	r5, r3, r1
 8009188:	f04f 0200 	mov.w	r2, #0
 800918c:	f04f 0300 	mov.w	r3, #0
 8009190:	00eb      	lsls	r3, r5, #3
 8009192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009196:	00e2      	lsls	r2, r4, #3
 8009198:	4614      	mov	r4, r2
 800919a:	461d      	mov	r5, r3
 800919c:	4643      	mov	r3, r8
 800919e:	18e3      	adds	r3, r4, r3
 80091a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80091a4:	464b      	mov	r3, r9
 80091a6:	eb45 0303 	adc.w	r3, r5, r3
 80091aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80091ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091be:	f04f 0200 	mov.w	r2, #0
 80091c2:	f04f 0300 	mov.w	r3, #0
 80091c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80091ca:	4629      	mov	r1, r5
 80091cc:	008b      	lsls	r3, r1, #2
 80091ce:	4621      	mov	r1, r4
 80091d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091d4:	4621      	mov	r1, r4
 80091d6:	008a      	lsls	r2, r1, #2
 80091d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80091dc:	f7f7 fba6 	bl	800092c <__aeabi_uldivmod>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4b60      	ldr	r3, [pc, #384]	; (8009368 <UART_SetConfig+0x4e4>)
 80091e6:	fba3 2302 	umull	r2, r3, r3, r2
 80091ea:	095b      	lsrs	r3, r3, #5
 80091ec:	011c      	lsls	r4, r3, #4
 80091ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091f2:	2200      	movs	r2, #0
 80091f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80091fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009200:	4642      	mov	r2, r8
 8009202:	464b      	mov	r3, r9
 8009204:	1891      	adds	r1, r2, r2
 8009206:	61b9      	str	r1, [r7, #24]
 8009208:	415b      	adcs	r3, r3
 800920a:	61fb      	str	r3, [r7, #28]
 800920c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009210:	4641      	mov	r1, r8
 8009212:	1851      	adds	r1, r2, r1
 8009214:	6139      	str	r1, [r7, #16]
 8009216:	4649      	mov	r1, r9
 8009218:	414b      	adcs	r3, r1
 800921a:	617b      	str	r3, [r7, #20]
 800921c:	f04f 0200 	mov.w	r2, #0
 8009220:	f04f 0300 	mov.w	r3, #0
 8009224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009228:	4659      	mov	r1, fp
 800922a:	00cb      	lsls	r3, r1, #3
 800922c:	4651      	mov	r1, sl
 800922e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009232:	4651      	mov	r1, sl
 8009234:	00ca      	lsls	r2, r1, #3
 8009236:	4610      	mov	r0, r2
 8009238:	4619      	mov	r1, r3
 800923a:	4603      	mov	r3, r0
 800923c:	4642      	mov	r2, r8
 800923e:	189b      	adds	r3, r3, r2
 8009240:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009244:	464b      	mov	r3, r9
 8009246:	460a      	mov	r2, r1
 8009248:	eb42 0303 	adc.w	r3, r2, r3
 800924c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	67bb      	str	r3, [r7, #120]	; 0x78
 800925a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	f04f 0300 	mov.w	r3, #0
 8009264:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009268:	4649      	mov	r1, r9
 800926a:	008b      	lsls	r3, r1, #2
 800926c:	4641      	mov	r1, r8
 800926e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009272:	4641      	mov	r1, r8
 8009274:	008a      	lsls	r2, r1, #2
 8009276:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800927a:	f7f7 fb57 	bl	800092c <__aeabi_uldivmod>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4b39      	ldr	r3, [pc, #228]	; (8009368 <UART_SetConfig+0x4e4>)
 8009284:	fba3 1302 	umull	r1, r3, r3, r2
 8009288:	095b      	lsrs	r3, r3, #5
 800928a:	2164      	movs	r1, #100	; 0x64
 800928c:	fb01 f303 	mul.w	r3, r1, r3
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	011b      	lsls	r3, r3, #4
 8009294:	3332      	adds	r3, #50	; 0x32
 8009296:	4a34      	ldr	r2, [pc, #208]	; (8009368 <UART_SetConfig+0x4e4>)
 8009298:	fba2 2303 	umull	r2, r3, r2, r3
 800929c:	095b      	lsrs	r3, r3, #5
 800929e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092a2:	441c      	add	r4, r3
 80092a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092a8:	2200      	movs	r2, #0
 80092aa:	673b      	str	r3, [r7, #112]	; 0x70
 80092ac:	677a      	str	r2, [r7, #116]	; 0x74
 80092ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80092b2:	4642      	mov	r2, r8
 80092b4:	464b      	mov	r3, r9
 80092b6:	1891      	adds	r1, r2, r2
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	415b      	adcs	r3, r3
 80092bc:	60fb      	str	r3, [r7, #12]
 80092be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092c2:	4641      	mov	r1, r8
 80092c4:	1851      	adds	r1, r2, r1
 80092c6:	6039      	str	r1, [r7, #0]
 80092c8:	4649      	mov	r1, r9
 80092ca:	414b      	adcs	r3, r1
 80092cc:	607b      	str	r3, [r7, #4]
 80092ce:	f04f 0200 	mov.w	r2, #0
 80092d2:	f04f 0300 	mov.w	r3, #0
 80092d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80092da:	4659      	mov	r1, fp
 80092dc:	00cb      	lsls	r3, r1, #3
 80092de:	4651      	mov	r1, sl
 80092e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092e4:	4651      	mov	r1, sl
 80092e6:	00ca      	lsls	r2, r1, #3
 80092e8:	4610      	mov	r0, r2
 80092ea:	4619      	mov	r1, r3
 80092ec:	4603      	mov	r3, r0
 80092ee:	4642      	mov	r2, r8
 80092f0:	189b      	adds	r3, r3, r2
 80092f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80092f4:	464b      	mov	r3, r9
 80092f6:	460a      	mov	r2, r1
 80092f8:	eb42 0303 	adc.w	r3, r2, r3
 80092fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	663b      	str	r3, [r7, #96]	; 0x60
 8009308:	667a      	str	r2, [r7, #100]	; 0x64
 800930a:	f04f 0200 	mov.w	r2, #0
 800930e:	f04f 0300 	mov.w	r3, #0
 8009312:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009316:	4649      	mov	r1, r9
 8009318:	008b      	lsls	r3, r1, #2
 800931a:	4641      	mov	r1, r8
 800931c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009320:	4641      	mov	r1, r8
 8009322:	008a      	lsls	r2, r1, #2
 8009324:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009328:	f7f7 fb00 	bl	800092c <__aeabi_uldivmod>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	4b0d      	ldr	r3, [pc, #52]	; (8009368 <UART_SetConfig+0x4e4>)
 8009332:	fba3 1302 	umull	r1, r3, r3, r2
 8009336:	095b      	lsrs	r3, r3, #5
 8009338:	2164      	movs	r1, #100	; 0x64
 800933a:	fb01 f303 	mul.w	r3, r1, r3
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	011b      	lsls	r3, r3, #4
 8009342:	3332      	adds	r3, #50	; 0x32
 8009344:	4a08      	ldr	r2, [pc, #32]	; (8009368 <UART_SetConfig+0x4e4>)
 8009346:	fba2 2303 	umull	r2, r3, r2, r3
 800934a:	095b      	lsrs	r3, r3, #5
 800934c:	f003 020f 	and.w	r2, r3, #15
 8009350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4422      	add	r2, r4
 8009358:	609a      	str	r2, [r3, #8]
}
 800935a:	bf00      	nop
 800935c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009360:	46bd      	mov	sp, r7
 8009362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009366:	bf00      	nop
 8009368:	51eb851f 	.word	0x51eb851f

0800936c <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b10      	cmp	r3, #16
 800937c:	d11c      	bne.n	80093b8 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	4b1f      	ldr	r3, [pc, #124]	; (8009400 <FSMC_NAND_Init+0x94>)
 8009384:	4013      	ands	r3, r2
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	6851      	ldr	r1, [r2, #4]
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	6892      	ldr	r2, [r2, #8]
 800938e:	4311      	orrs	r1, r2
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	68d2      	ldr	r2, [r2, #12]
 8009394:	4311      	orrs	r1, r2
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	6912      	ldr	r2, [r2, #16]
 800939a:	4311      	orrs	r1, r2
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	6952      	ldr	r2, [r2, #20]
 80093a0:	0252      	lsls	r2, r2, #9
 80093a2:	4311      	orrs	r1, r2
 80093a4:	683a      	ldr	r2, [r7, #0]
 80093a6:	6992      	ldr	r2, [r2, #24]
 80093a8:	0352      	lsls	r2, r2, #13
 80093aa:	430a      	orrs	r2, r1
 80093ac:	4313      	orrs	r3, r2
 80093ae:	f043 0208 	orr.w	r2, r3, #8
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	e01b      	b.n	80093f0 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a1a      	ldr	r2, [r3, #32]
 80093bc:	4b10      	ldr	r3, [pc, #64]	; (8009400 <FSMC_NAND_Init+0x94>)
 80093be:	4013      	ands	r3, r2
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	6851      	ldr	r1, [r2, #4]
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	6892      	ldr	r2, [r2, #8]
 80093c8:	4311      	orrs	r1, r2
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	68d2      	ldr	r2, [r2, #12]
 80093ce:	4311      	orrs	r1, r2
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	6912      	ldr	r2, [r2, #16]
 80093d4:	4311      	orrs	r1, r2
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	6952      	ldr	r2, [r2, #20]
 80093da:	0252      	lsls	r2, r2, #9
 80093dc:	4311      	orrs	r1, r2
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	6992      	ldr	r2, [r2, #24]
 80093e2:	0352      	lsls	r2, r2, #13
 80093e4:	430a      	orrs	r2, r1
 80093e6:	4313      	orrs	r3, r2
 80093e8:	f043 0208 	orr.w	r2, r3, #8
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	fff00181 	.word	0xfff00181

08009404 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b10      	cmp	r3, #16
 8009414:	d112      	bne.n	800943c <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	021b      	lsls	r3, r3, #8
 8009424:	431a      	orrs	r2, r3
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	041b      	lsls	r3, r3, #16
 800942c:	431a      	orrs	r2, r3
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	061b      	lsls	r3, r3, #24
 8009434:	431a      	orrs	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	609a      	str	r2, [r3, #8]
 800943a:	e011      	b.n	8009460 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	021b      	lsls	r3, r3, #8
 800944a:	431a      	orrs	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	041b      	lsls	r3, r3, #16
 8009452:	431a      	orrs	r2, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	061b      	lsls	r3, r3, #24
 800945a:	431a      	orrs	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800946e:	b480      	push	{r7}
 8009470:	b085      	sub	sp, #20
 8009472:	af00      	add	r7, sp, #0
 8009474:	60f8      	str	r0, [r7, #12]
 8009476:	60b9      	str	r1, [r7, #8]
 8009478:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b10      	cmp	r3, #16
 800947e:	d112      	bne.n	80094a6 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	431a      	orrs	r2, r3
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	041b      	lsls	r3, r3, #16
 8009496:	431a      	orrs	r2, r3
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	061b      	lsls	r3, r3, #24
 800949e:	431a      	orrs	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	60da      	str	r2, [r3, #12]
 80094a4:	e011      	b.n	80094ca <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	021b      	lsls	r3, r3, #8
 80094b4:	431a      	orrs	r2, r3
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	041b      	lsls	r3, r3, #16
 80094bc:	431a      	orrs	r2, r3
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	061b      	lsls	r3, r3, #24
 80094c4:	431a      	orrs	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NAND_DEVICE(Device));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Disable ECC feature */
  if (Bank == FSMC_NAND_BANK2)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b10      	cmp	r3, #16
 80094e6:	d106      	bne.n	80094f6 <FSMC_NAND_ECC_Disable+0x1e>
  {
    CLEAR_BIT(Device->PCR2, FSMC_PCR2_ECCEN);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	e005      	b.n	8009502 <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    CLEAR_BIT(Device->PCR3, FSMC_PCR2_ECCEN);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	621a      	str	r2, [r3, #32]
  }

  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <__NVIC_SetPriority>:
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800951c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009520:	2b00      	cmp	r3, #0
 8009522:	db0a      	blt.n	800953a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	b2da      	uxtb	r2, r3
 8009528:	490c      	ldr	r1, [pc, #48]	; (800955c <__NVIC_SetPriority+0x4c>)
 800952a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800952e:	0112      	lsls	r2, r2, #4
 8009530:	b2d2      	uxtb	r2, r2
 8009532:	440b      	add	r3, r1
 8009534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009538:	e00a      	b.n	8009550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	b2da      	uxtb	r2, r3
 800953e:	4908      	ldr	r1, [pc, #32]	; (8009560 <__NVIC_SetPriority+0x50>)
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	f003 030f 	and.w	r3, r3, #15
 8009546:	3b04      	subs	r3, #4
 8009548:	0112      	lsls	r2, r2, #4
 800954a:	b2d2      	uxtb	r2, r2
 800954c:	440b      	add	r3, r1
 800954e:	761a      	strb	r2, [r3, #24]
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	e000e100 	.word	0xe000e100
 8009560:	e000ed00 	.word	0xe000ed00

08009564 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009568:	4b05      	ldr	r3, [pc, #20]	; (8009580 <SysTick_Handler+0x1c>)
 800956a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800956c:	f002 f856 	bl	800b61c <xTaskGetSchedulerState>
 8009570:	4603      	mov	r3, r0
 8009572:	2b01      	cmp	r3, #1
 8009574:	d001      	beq.n	800957a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009576:	f002 fe3f 	bl	800c1f8 <xPortSysTickHandler>
  }
}
 800957a:	bf00      	nop
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	e000e010 	.word	0xe000e010

08009584 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009584:	b580      	push	{r7, lr}
 8009586:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009588:	2100      	movs	r1, #0
 800958a:	f06f 0004 	mvn.w	r0, #4
 800958e:	f7ff ffbf 	bl	8009510 <__NVIC_SetPriority>
#endif
}
 8009592:	bf00      	nop
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800959e:	f3ef 8305 	mrs	r3, IPSR
 80095a2:	603b      	str	r3, [r7, #0]
  return(result);
 80095a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80095aa:	f06f 0305 	mvn.w	r3, #5
 80095ae:	607b      	str	r3, [r7, #4]
 80095b0:	e00f      	b.n	80095d2 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 80095b2:	4b0a      	ldr	r3, [pc, #40]	; (80095dc <osKernelInitialize+0x44>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d108      	bne.n	80095cc <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 80095ba:	4809      	ldr	r0, [pc, #36]	; (80095e0 <osKernelInitialize+0x48>)
 80095bc:	f003 f818 	bl	800c5f0 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 80095c0:	4b06      	ldr	r3, [pc, #24]	; (80095dc <osKernelInitialize+0x44>)
 80095c2:	2201      	movs	r2, #1
 80095c4:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	607b      	str	r3, [r7, #4]
 80095ca:	e002      	b.n	80095d2 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 80095cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095d0:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80095d2:	687b      	ldr	r3, [r7, #4]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	20001c00 	.word	0x20001c00
 80095e0:	200000a8 	.word	0x200000a8

080095e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ea:	f3ef 8305 	mrs	r3, IPSR
 80095ee:	603b      	str	r3, [r7, #0]
  return(result);
 80095f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80095f6:	f06f 0305 	mvn.w	r3, #5
 80095fa:	607b      	str	r3, [r7, #4]
 80095fc:	e010      	b.n	8009620 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80095fe:	4b0b      	ldr	r3, [pc, #44]	; (800962c <osKernelStart+0x48>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d109      	bne.n	800961a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009606:	f7ff ffbd 	bl	8009584 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800960a:	4b08      	ldr	r3, [pc, #32]	; (800962c <osKernelStart+0x48>)
 800960c:	2202      	movs	r2, #2
 800960e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009610:	f001 fba8 	bl	800ad64 <vTaskStartScheduler>
      stat = osOK;
 8009614:	2300      	movs	r3, #0
 8009616:	607b      	str	r3, [r7, #4]
 8009618:	e002      	b.n	8009620 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800961a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800961e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009620:	687b      	ldr	r3, [r7, #4]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20001c00 	.word	0x20001c00

08009630 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009630:	b580      	push	{r7, lr}
 8009632:	b08e      	sub	sp, #56	; 0x38
 8009634:	af04      	add	r7, sp, #16
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800963c:	2300      	movs	r3, #0
 800963e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009640:	f3ef 8305 	mrs	r3, IPSR
 8009644:	617b      	str	r3, [r7, #20]
  return(result);
 8009646:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009648:	2b00      	cmp	r3, #0
 800964a:	d17e      	bne.n	800974a <osThreadNew+0x11a>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d07b      	beq.n	800974a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009652:	2380      	movs	r3, #128	; 0x80
 8009654:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009656:	2318      	movs	r3, #24
 8009658:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800965e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009662:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d045      	beq.n	80096f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d002      	beq.n	8009678 <osThreadNew+0x48>
        name = attr->name;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d008      	beq.n	800969e <osThreadNew+0x6e>
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	2b38      	cmp	r3, #56	; 0x38
 8009690:	d805      	bhi.n	800969e <osThreadNew+0x6e>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <osThreadNew+0x72>
        return (NULL);
 800969e:	2300      	movs	r3, #0
 80096a0:	e054      	b.n	800974c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	089b      	lsrs	r3, r3, #2
 80096b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00e      	beq.n	80096d8 <osThreadNew+0xa8>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	2bbb      	cmp	r3, #187	; 0xbb
 80096c0:	d90a      	bls.n	80096d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d006      	beq.n	80096d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <osThreadNew+0xa8>
        mem = 1;
 80096d2:	2301      	movs	r3, #1
 80096d4:	61bb      	str	r3, [r7, #24]
 80096d6:	e010      	b.n	80096fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10c      	bne.n	80096fa <osThreadNew+0xca>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d108      	bne.n	80096fa <osThreadNew+0xca>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d104      	bne.n	80096fa <osThreadNew+0xca>
          mem = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	61bb      	str	r3, [r7, #24]
 80096f4:	e001      	b.n	80096fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d110      	bne.n	8009722 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009708:	9202      	str	r2, [sp, #8]
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	6a3a      	ldr	r2, [r7, #32]
 8009714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f001 f938 	bl	800a98c <xTaskCreateStatic>
 800971c:	4603      	mov	r3, r0
 800971e:	613b      	str	r3, [r7, #16]
 8009720:	e013      	b.n	800974a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d110      	bne.n	800974a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	b29a      	uxth	r2, r3
 800972c:	f107 0310 	add.w	r3, r7, #16
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f001 f983 	bl	800aa46 <xTaskCreate>
 8009740:	4603      	mov	r3, r0
 8009742:	2b01      	cmp	r3, #1
 8009744:	d001      	beq.n	800974a <osThreadNew+0x11a>
            hTask = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800974a:	693b      	ldr	r3, [r7, #16]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3728      	adds	r7, #40	; 0x28
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800975c:	f3ef 8305 	mrs	r3, IPSR
 8009760:	60bb      	str	r3, [r7, #8]
  return(result);
 8009762:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009764:	2b00      	cmp	r3, #0
 8009766:	d003      	beq.n	8009770 <osDelay+0x1c>
    stat = osErrorISR;
 8009768:	f06f 0305 	mvn.w	r3, #5
 800976c:	60fb      	str	r3, [r7, #12]
 800976e:	e007      	b.n	8009780 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009770:	2300      	movs	r3, #0
 8009772:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d002      	beq.n	8009780 <osDelay+0x2c>
      vTaskDelay(ticks);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 fabe 	bl	800acfc <vTaskDelay>
    }
  }

  return (stat);
 8009780:	68fb      	ldr	r3, [r7, #12]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800978a:	b580      	push	{r7, lr}
 800978c:	b08a      	sub	sp, #40	; 0x28
 800978e:	af02      	add	r7, sp, #8
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009796:	2300      	movs	r3, #0
 8009798:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800979a:	f3ef 8305 	mrs	r3, IPSR
 800979e:	613b      	str	r3, [r7, #16]
  return(result);
 80097a0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d175      	bne.n	8009892 <osSemaphoreNew+0x108>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d072      	beq.n	8009892 <osSemaphoreNew+0x108>
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d86e      	bhi.n	8009892 <osSemaphoreNew+0x108>
    mem = -1;
 80097b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d015      	beq.n	80097ec <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d006      	beq.n	80097d6 <osSemaphoreNew+0x4c>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	2b4f      	cmp	r3, #79	; 0x4f
 80097ce:	d902      	bls.n	80097d6 <osSemaphoreNew+0x4c>
        mem = 1;
 80097d0:	2301      	movs	r3, #1
 80097d2:	61bb      	str	r3, [r7, #24]
 80097d4:	e00c      	b.n	80097f0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d108      	bne.n	80097f0 <osSemaphoreNew+0x66>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d104      	bne.n	80097f0 <osSemaphoreNew+0x66>
          mem = 0;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61bb      	str	r3, [r7, #24]
 80097ea:	e001      	b.n	80097f0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f6:	d04c      	beq.n	8009892 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d128      	bne.n	8009850 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d10a      	bne.n	800981a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	2203      	movs	r2, #3
 800980a:	9200      	str	r2, [sp, #0]
 800980c:	2200      	movs	r2, #0
 800980e:	2100      	movs	r1, #0
 8009810:	2001      	movs	r0, #1
 8009812:	f000 fac5 	bl	8009da0 <xQueueGenericCreateStatic>
 8009816:	61f8      	str	r0, [r7, #28]
 8009818:	e005      	b.n	8009826 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800981a:	2203      	movs	r2, #3
 800981c:	2100      	movs	r1, #0
 800981e:	2001      	movs	r0, #1
 8009820:	f000 fb36 	bl	8009e90 <xQueueGenericCreate>
 8009824:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d022      	beq.n	8009872 <osSemaphoreNew+0xe8>
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d01f      	beq.n	8009872 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009832:	2300      	movs	r3, #0
 8009834:	2200      	movs	r2, #0
 8009836:	2100      	movs	r1, #0
 8009838:	69f8      	ldr	r0, [r7, #28]
 800983a:	f000 fbf1 	bl	800a020 <xQueueGenericSend>
 800983e:	4603      	mov	r3, r0
 8009840:	2b01      	cmp	r3, #1
 8009842:	d016      	beq.n	8009872 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009844:	69f8      	ldr	r0, [r7, #28]
 8009846:	f000 fee5 	bl	800a614 <vQueueDelete>
            hSemaphore = NULL;
 800984a:	2300      	movs	r3, #0
 800984c:	61fb      	str	r3, [r7, #28]
 800984e:	e010      	b.n	8009872 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d108      	bne.n	8009868 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	461a      	mov	r2, r3
 800985c:	68b9      	ldr	r1, [r7, #8]
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 fb73 	bl	8009f4a <xQueueCreateCountingSemaphoreStatic>
 8009864:	61f8      	str	r0, [r7, #28]
 8009866:	e004      	b.n	8009872 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009868:	68b9      	ldr	r1, [r7, #8]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 fba4 	bl	8009fb8 <xQueueCreateCountingSemaphore>
 8009870:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00c      	beq.n	8009892 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d003      	beq.n	8009886 <osSemaphoreNew+0xfc>
          name = attr->name;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	617b      	str	r3, [r7, #20]
 8009884:	e001      	b.n	800988a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800988a:	6979      	ldr	r1, [r7, #20]
 800988c:	69f8      	ldr	r0, [r7, #28]
 800988e:	f000 fff5 	bl	800a87c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009892:	69fb      	ldr	r3, [r7, #28]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3720      	adds	r7, #32
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800989c:	b580      	push	{r7, lr}
 800989e:	b08a      	sub	sp, #40	; 0x28
 80098a0:	af02      	add	r7, sp, #8
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80098a8:	2300      	movs	r3, #0
 80098aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098ac:	f3ef 8305 	mrs	r3, IPSR
 80098b0:	613b      	str	r3, [r7, #16]
  return(result);
 80098b2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d15f      	bne.n	8009978 <osMessageQueueNew+0xdc>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d05c      	beq.n	8009978 <osMessageQueueNew+0xdc>
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d059      	beq.n	8009978 <osMessageQueueNew+0xdc>
    mem = -1;
 80098c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d029      	beq.n	8009924 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d012      	beq.n	80098fe <osMessageQueueNew+0x62>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	2b4f      	cmp	r3, #79	; 0x4f
 80098de:	d90e      	bls.n	80098fe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00a      	beq.n	80098fe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	695a      	ldr	r2, [r3, #20]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	68b9      	ldr	r1, [r7, #8]
 80098f0:	fb01 f303 	mul.w	r3, r1, r3
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d302      	bcc.n	80098fe <osMessageQueueNew+0x62>
        mem = 1;
 80098f8:	2301      	movs	r3, #1
 80098fa:	61bb      	str	r3, [r7, #24]
 80098fc:	e014      	b.n	8009928 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d110      	bne.n	8009928 <osMessageQueueNew+0x8c>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10c      	bne.n	8009928 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009912:	2b00      	cmp	r3, #0
 8009914:	d108      	bne.n	8009928 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d104      	bne.n	8009928 <osMessageQueueNew+0x8c>
          mem = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	61bb      	str	r3, [r7, #24]
 8009922:	e001      	b.n	8009928 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d10b      	bne.n	8009946 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	691a      	ldr	r2, [r3, #16]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	2100      	movs	r1, #0
 8009938:	9100      	str	r1, [sp, #0]
 800993a:	68b9      	ldr	r1, [r7, #8]
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 fa2f 	bl	8009da0 <xQueueGenericCreateStatic>
 8009942:	61f8      	str	r0, [r7, #28]
 8009944:	e008      	b.n	8009958 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d105      	bne.n	8009958 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800994c:	2200      	movs	r2, #0
 800994e:	68b9      	ldr	r1, [r7, #8]
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fa9d 	bl	8009e90 <xQueueGenericCreate>
 8009956:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00c      	beq.n	8009978 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <osMessageQueueNew+0xd0>
        name = attr->name;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	617b      	str	r3, [r7, #20]
 800996a:	e001      	b.n	8009970 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800996c:	2300      	movs	r3, #0
 800996e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009970:	6979      	ldr	r1, [r7, #20]
 8009972:	69f8      	ldr	r0, [r7, #28]
 8009974:	f000 ff82 	bl	800a87c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009978:	69fb      	ldr	r3, [r7, #28]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3720      	adds	r7, #32
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
	...

08009984 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	4613      	mov	r3, r2
 8009992:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009998:	2300      	movs	r3, #0
 800999a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800999c:	f3ef 8305 	mrs	r3, IPSR
 80099a0:	617b      	str	r3, [r7, #20]
  return(result);
 80099a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d028      	beq.n	80099fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d005      	beq.n	80099ba <osMessageQueuePut+0x36>
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <osMessageQueuePut+0x36>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80099ba:	f06f 0303 	mvn.w	r3, #3
 80099be:	61fb      	str	r3, [r7, #28]
 80099c0:	e038      	b.n	8009a34 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80099c2:	2300      	movs	r3, #0
 80099c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80099c6:	f107 0210 	add.w	r2, r7, #16
 80099ca:	2300      	movs	r3, #0
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	69b8      	ldr	r0, [r7, #24]
 80099d0:	f000 fc24 	bl	800a21c <xQueueGenericSendFromISR>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d003      	beq.n	80099e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80099da:	f06f 0302 	mvn.w	r3, #2
 80099de:	61fb      	str	r3, [r7, #28]
 80099e0:	e028      	b.n	8009a34 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d025      	beq.n	8009a34 <osMessageQueuePut+0xb0>
 80099e8:	4b15      	ldr	r3, [pc, #84]	; (8009a40 <osMessageQueuePut+0xbc>)
 80099ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	e01c      	b.n	8009a34 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <osMessageQueuePut+0x82>
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d103      	bne.n	8009a0e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009a06:	f06f 0303 	mvn.w	r3, #3
 8009a0a:	61fb      	str	r3, [r7, #28]
 8009a0c:	e012      	b.n	8009a34 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a0e:	2300      	movs	r3, #0
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	69b8      	ldr	r0, [r7, #24]
 8009a16:	f000 fb03 	bl	800a020 <xQueueGenericSend>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d009      	beq.n	8009a34 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d003      	beq.n	8009a2e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009a26:	f06f 0301 	mvn.w	r3, #1
 8009a2a:	61fb      	str	r3, [r7, #28]
 8009a2c:	e002      	b.n	8009a34 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009a2e:	f06f 0302 	mvn.w	r3, #2
 8009a32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009a34:	69fb      	ldr	r3, [r7, #28]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3720      	adds	r7, #32
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	e000ed04 	.word	0xe000ed04

08009a44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a5a:	f3ef 8305 	mrs	r3, IPSR
 8009a5e:	617b      	str	r3, [r7, #20]
  return(result);
 8009a60:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d028      	beq.n	8009ab8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d005      	beq.n	8009a78 <osMessageQueueGet+0x34>
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d002      	beq.n	8009a78 <osMessageQueueGet+0x34>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009a78:	f06f 0303 	mvn.w	r3, #3
 8009a7c:	61fb      	str	r3, [r7, #28]
 8009a7e:	e037      	b.n	8009af0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009a80:	2300      	movs	r3, #0
 8009a82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009a84:	f107 0310 	add.w	r3, r7, #16
 8009a88:	461a      	mov	r2, r3
 8009a8a:	68b9      	ldr	r1, [r7, #8]
 8009a8c:	69b8      	ldr	r0, [r7, #24]
 8009a8e:	f000 fd41 	bl	800a514 <xQueueReceiveFromISR>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d003      	beq.n	8009aa0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009a98:	f06f 0302 	mvn.w	r3, #2
 8009a9c:	61fb      	str	r3, [r7, #28]
 8009a9e:	e027      	b.n	8009af0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d024      	beq.n	8009af0 <osMessageQueueGet+0xac>
 8009aa6:	4b15      	ldr	r3, [pc, #84]	; (8009afc <osMessageQueueGet+0xb8>)
 8009aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	e01b      	b.n	8009af0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d002      	beq.n	8009ac4 <osMessageQueueGet+0x80>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009ac4:	f06f 0303 	mvn.w	r3, #3
 8009ac8:	61fb      	str	r3, [r7, #28]
 8009aca:	e011      	b.n	8009af0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009acc:	683a      	ldr	r2, [r7, #0]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	69b8      	ldr	r0, [r7, #24]
 8009ad2:	f000 fc3f 	bl	800a354 <xQueueReceive>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d009      	beq.n	8009af0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009ae2:	f06f 0301 	mvn.w	r3, #1
 8009ae6:	61fb      	str	r3, [r7, #28]
 8009ae8:	e002      	b.n	8009af0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009aea:	f06f 0302 	mvn.w	r3, #2
 8009aee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009af0:	69fb      	ldr	r3, [r7, #28]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3720      	adds	r7, #32
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	e000ed04 	.word	0xe000ed04

08009b00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4a07      	ldr	r2, [pc, #28]	; (8009b2c <vApplicationGetIdleTaskMemory+0x2c>)
 8009b10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	4a06      	ldr	r2, [pc, #24]	; (8009b30 <vApplicationGetIdleTaskMemory+0x30>)
 8009b16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2280      	movs	r2, #128	; 0x80
 8009b1c:	601a      	str	r2, [r3, #0]
}
 8009b1e:	bf00      	nop
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	20005c04 	.word	0x20005c04
 8009b30:	20005cc0 	.word	0x20005cc0

08009b34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4a07      	ldr	r2, [pc, #28]	; (8009b60 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	4a06      	ldr	r2, [pc, #24]	; (8009b64 <vApplicationGetTimerTaskMemory+0x30>)
 8009b4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b52:	601a      	str	r2, [r3, #0]
}
 8009b54:	bf00      	nop
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	20005ec0 	.word	0x20005ec0
 8009b64:	20005f7c 	.word	0x20005f7c

08009b68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f103 0208 	add.w	r2, r3, #8
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f103 0208 	add.w	r2, r3, #8
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f103 0208 	add.w	r2, r3, #8
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bb6:	bf00      	nop
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	689a      	ldr	r2, [r3, #8]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	601a      	str	r2, [r3, #0]
}
 8009bfe:	bf00      	nop
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b085      	sub	sp, #20
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c20:	d103      	bne.n	8009c2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	e00c      	b.n	8009c44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	3308      	adds	r3, #8
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	e002      	b.n	8009c38 <vListInsert+0x2e>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d2f6      	bcs.n	8009c32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	601a      	str	r2, [r3, #0]
}
 8009c70:	bf00      	nop
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	6892      	ldr	r2, [r2, #8]
 8009c92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	6852      	ldr	r2, [r2, #4]
 8009c9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d103      	bne.n	8009cb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	1e5a      	subs	r2, r3, #1
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10a      	bne.n	8009cfa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009cf6:	bf00      	nop
 8009cf8:	e7fe      	b.n	8009cf8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009cfa:	f002 f9eb 	bl	800c0d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d06:	68f9      	ldr	r1, [r7, #12]
 8009d08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d0a:	fb01 f303 	mul.w	r3, r1, r3
 8009d0e:	441a      	add	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	68f9      	ldr	r1, [r7, #12]
 8009d2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d30:	fb01 f303 	mul.w	r3, r1, r3
 8009d34:	441a      	add	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	22ff      	movs	r2, #255	; 0xff
 8009d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	22ff      	movs	r2, #255	; 0xff
 8009d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d114      	bne.n	8009d7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01a      	beq.n	8009d8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	3310      	adds	r3, #16
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f001 fa9b 	bl	800b298 <xTaskRemoveFromEventList>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d012      	beq.n	8009d8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d68:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <xQueueGenericReset+0xcc>)
 8009d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	e009      	b.n	8009d8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	3310      	adds	r3, #16
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7ff fef2 	bl	8009b68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	3324      	adds	r3, #36	; 0x24
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7ff feed 	bl	8009b68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d8e:	f002 f9d1 	bl	800c134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d92:	2301      	movs	r3, #1
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	e000ed04 	.word	0xe000ed04

08009da0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b08e      	sub	sp, #56	; 0x38
 8009da4:	af02      	add	r7, sp, #8
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10a      	bne.n	8009dca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dc6:	bf00      	nop
 8009dc8:	e7fe      	b.n	8009dc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10a      	bne.n	8009de6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <xQueueGenericCreateStatic+0x52>
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <xQueueGenericCreateStatic+0x56>
 8009df2:	2301      	movs	r3, #1
 8009df4:	e000      	b.n	8009df8 <xQueueGenericCreateStatic+0x58>
 8009df6:	2300      	movs	r3, #0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10a      	bne.n	8009e12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	623b      	str	r3, [r7, #32]
}
 8009e0e:	bf00      	nop
 8009e10:	e7fe      	b.n	8009e10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d102      	bne.n	8009e1e <xQueueGenericCreateStatic+0x7e>
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <xQueueGenericCreateStatic+0x82>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e000      	b.n	8009e24 <xQueueGenericCreateStatic+0x84>
 8009e22:	2300      	movs	r3, #0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	61fb      	str	r3, [r7, #28]
}
 8009e3a:	bf00      	nop
 8009e3c:	e7fe      	b.n	8009e3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e3e:	2350      	movs	r3, #80	; 0x50
 8009e40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2b50      	cmp	r3, #80	; 0x50
 8009e46:	d00a      	beq.n	8009e5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	61bb      	str	r3, [r7, #24]
}
 8009e5a:	bf00      	nop
 8009e5c:	e7fe      	b.n	8009e5c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00d      	beq.n	8009e86 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	68b9      	ldr	r1, [r7, #8]
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f000 f83f 	bl	8009f04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3730      	adds	r7, #48	; 0x30
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08a      	sub	sp, #40	; 0x28
 8009e94:	af02      	add	r7, sp, #8
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10a      	bne.n	8009eba <xQueueGenericCreate+0x2a>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	613b      	str	r3, [r7, #16]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	fb02 f303 	mul.w	r3, r2, r3
 8009ec2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	3350      	adds	r3, #80	; 0x50
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f002 fa25 	bl	800c318 <pvPortMalloc>
 8009ece:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d011      	beq.n	8009efa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	3350      	adds	r3, #80	; 0x50
 8009ede:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ee8:	79fa      	ldrb	r2, [r7, #7]
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	68b9      	ldr	r1, [r7, #8]
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 f805 	bl	8009f04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009efa:	69bb      	ldr	r3, [r7, #24]
	}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3720      	adds	r7, #32
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
 8009f10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d103      	bne.n	8009f20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	e002      	b.n	8009f26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f32:	2101      	movs	r1, #1
 8009f34:	69b8      	ldr	r0, [r7, #24]
 8009f36:	f7ff fecb 	bl	8009cd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	78fa      	ldrb	r2, [r7, #3]
 8009f3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f42:	bf00      	nop
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b08a      	sub	sp, #40	; 0x28
 8009f4e:	af02      	add	r7, sp, #8
 8009f50:	60f8      	str	r0, [r7, #12]
 8009f52:	60b9      	str	r1, [r7, #8]
 8009f54:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10a      	bne.n	8009f72 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	61bb      	str	r3, [r7, #24]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d90a      	bls.n	8009f90 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	617b      	str	r3, [r7, #20]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f90:	2302      	movs	r3, #2
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	2100      	movs	r1, #0
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff ff00 	bl	8009da0 <xQueueGenericCreateStatic>
 8009fa0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d002      	beq.n	8009fae <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009fae:	69fb      	ldr	r3, [r7, #28]
	}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3720      	adds	r7, #32
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10a      	bne.n	8009fde <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	613b      	str	r3, [r7, #16]
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d90a      	bls.n	8009ffc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fea:	f383 8811 	msr	BASEPRI, r3
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	60fb      	str	r3, [r7, #12]
}
 8009ff8:	bf00      	nop
 8009ffa:	e7fe      	b.n	8009ffa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009ffc:	2202      	movs	r2, #2
 8009ffe:	2100      	movs	r1, #0
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7ff ff45 	bl	8009e90 <xQueueGenericCreate>
 800a006:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a014:	697b      	ldr	r3, [r7, #20]
	}
 800a016:	4618      	mov	r0, r3
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b08e      	sub	sp, #56	; 0x38
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
 800a02c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a02e:	2300      	movs	r3, #0
 800a030:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10a      	bne.n	800a052 <xQueueGenericSend+0x32>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a04e:	bf00      	nop
 800a050:	e7fe      	b.n	800a050 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d103      	bne.n	800a060 <xQueueGenericSend+0x40>
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <xQueueGenericSend+0x44>
 800a060:	2301      	movs	r3, #1
 800a062:	e000      	b.n	800a066 <xQueueGenericSend+0x46>
 800a064:	2300      	movs	r3, #0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10a      	bne.n	800a080 <xQueueGenericSend+0x60>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a07c:	bf00      	nop
 800a07e:	e7fe      	b.n	800a07e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2b02      	cmp	r3, #2
 800a084:	d103      	bne.n	800a08e <xQueueGenericSend+0x6e>
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d101      	bne.n	800a092 <xQueueGenericSend+0x72>
 800a08e:	2301      	movs	r3, #1
 800a090:	e000      	b.n	800a094 <xQueueGenericSend+0x74>
 800a092:	2300      	movs	r3, #0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <xQueueGenericSend+0x8e>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	623b      	str	r3, [r7, #32]
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0ae:	f001 fab5 	bl	800b61c <xTaskGetSchedulerState>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d102      	bne.n	800a0be <xQueueGenericSend+0x9e>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <xQueueGenericSend+0xa2>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e000      	b.n	800a0c4 <xQueueGenericSend+0xa4>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10a      	bne.n	800a0de <xQueueGenericSend+0xbe>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	61fb      	str	r3, [r7, #28]
}
 800a0da:	bf00      	nop
 800a0dc:	e7fe      	b.n	800a0dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0de:	f001 fff9 	bl	800c0d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d302      	bcc.n	800a0f4 <xQueueGenericSend+0xd4>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d129      	bne.n	800a148 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	68b9      	ldr	r1, [r7, #8]
 800a0f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0fa:	f000 faae 	bl	800a65a <prvCopyDataToQueue>
 800a0fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a104:	2b00      	cmp	r3, #0
 800a106:	d010      	beq.n	800a12a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10a:	3324      	adds	r3, #36	; 0x24
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 f8c3 	bl	800b298 <xTaskRemoveFromEventList>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d013      	beq.n	800a140 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a118:	4b3f      	ldr	r3, [pc, #252]	; (800a218 <xQueueGenericSend+0x1f8>)
 800a11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a11e:	601a      	str	r2, [r3, #0]
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	e00a      	b.n	800a140 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d007      	beq.n	800a140 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a130:	4b39      	ldr	r3, [pc, #228]	; (800a218 <xQueueGenericSend+0x1f8>)
 800a132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a136:	601a      	str	r2, [r3, #0]
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a140:	f001 fff8 	bl	800c134 <vPortExitCritical>
				return pdPASS;
 800a144:	2301      	movs	r3, #1
 800a146:	e063      	b.n	800a210 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d103      	bne.n	800a156 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a14e:	f001 fff1 	bl	800c134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a152:	2300      	movs	r3, #0
 800a154:	e05c      	b.n	800a210 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d106      	bne.n	800a16a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a15c:	f107 0314 	add.w	r3, r7, #20
 800a160:	4618      	mov	r0, r3
 800a162:	f001 f8fd 	bl	800b360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a166:	2301      	movs	r3, #1
 800a168:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a16a:	f001 ffe3 	bl	800c134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a16e:	f000 fe69 	bl	800ae44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a172:	f001 ffaf 	bl	800c0d4 <vPortEnterCritical>
 800a176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a17c:	b25b      	sxtb	r3, r3
 800a17e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a182:	d103      	bne.n	800a18c <xQueueGenericSend+0x16c>
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	2200      	movs	r2, #0
 800a188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a192:	b25b      	sxtb	r3, r3
 800a194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a198:	d103      	bne.n	800a1a2 <xQueueGenericSend+0x182>
 800a19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1a2:	f001 ffc7 	bl	800c134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1a6:	1d3a      	adds	r2, r7, #4
 800a1a8:	f107 0314 	add.w	r3, r7, #20
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f001 f8ec 	bl	800b38c <xTaskCheckForTimeOut>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d124      	bne.n	800a204 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a1ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1bc:	f000 fb45 	bl	800a84a <prvIsQueueFull>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d018      	beq.n	800a1f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c8:	3310      	adds	r3, #16
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f001 f812 	bl	800b1f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a1d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1d6:	f000 fad0 	bl	800a77a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a1da:	f000 fe41 	bl	800ae60 <xTaskResumeAll>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f47f af7c 	bne.w	800a0de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a1e6:	4b0c      	ldr	r3, [pc, #48]	; (800a218 <xQueueGenericSend+0x1f8>)
 800a1e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	e772      	b.n	800a0de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a1f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1fa:	f000 fabe 	bl	800a77a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1fe:	f000 fe2f 	bl	800ae60 <xTaskResumeAll>
 800a202:	e76c      	b.n	800a0de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a206:	f000 fab8 	bl	800a77a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a20a:	f000 fe29 	bl	800ae60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a20e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a210:	4618      	mov	r0, r3
 800a212:	3738      	adds	r7, #56	; 0x38
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	e000ed04 	.word	0xe000ed04

0800a21c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b090      	sub	sp, #64	; 0x40
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10a      	bne.n	800a24a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a246:	bf00      	nop
 800a248:	e7fe      	b.n	800a248 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d103      	bne.n	800a258 <xQueueGenericSendFromISR+0x3c>
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <xQueueGenericSendFromISR+0x40>
 800a258:	2301      	movs	r3, #1
 800a25a:	e000      	b.n	800a25e <xQueueGenericSendFromISR+0x42>
 800a25c:	2300      	movs	r3, #0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10a      	bne.n	800a278 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a274:	bf00      	nop
 800a276:	e7fe      	b.n	800a276 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d103      	bne.n	800a286 <xQueueGenericSendFromISR+0x6a>
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a282:	2b01      	cmp	r3, #1
 800a284:	d101      	bne.n	800a28a <xQueueGenericSendFromISR+0x6e>
 800a286:	2301      	movs	r3, #1
 800a288:	e000      	b.n	800a28c <xQueueGenericSendFromISR+0x70>
 800a28a:	2300      	movs	r3, #0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10a      	bne.n	800a2a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	623b      	str	r3, [r7, #32]
}
 800a2a2:	bf00      	nop
 800a2a4:	e7fe      	b.n	800a2a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2a6:	f001 fff7 	bl	800c298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a2aa:	f3ef 8211 	mrs	r2, BASEPRI
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	61fa      	str	r2, [r7, #28]
 800a2c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a2c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d302      	bcc.n	800a2d8 <xQueueGenericSendFromISR+0xbc>
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d12f      	bne.n	800a338 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	68b9      	ldr	r1, [r7, #8]
 800a2ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2ee:	f000 f9b4 	bl	800a65a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a2f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2fa:	d112      	bne.n	800a322 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	2b00      	cmp	r3, #0
 800a302:	d016      	beq.n	800a332 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a306:	3324      	adds	r3, #36	; 0x24
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 ffc5 	bl	800b298 <xTaskRemoveFromEventList>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00e      	beq.n	800a332 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00b      	beq.n	800a332 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	e007      	b.n	800a332 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a322:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a326:	3301      	adds	r3, #1
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	b25a      	sxtb	r2, r3
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a332:	2301      	movs	r3, #1
 800a334:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a336:	e001      	b.n	800a33c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a338:	2300      	movs	r3, #0
 800a33a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a33e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a346:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3740      	adds	r7, #64	; 0x40
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b08c      	sub	sp, #48	; 0x30
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a360:	2300      	movs	r3, #0
 800a362:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10a      	bne.n	800a384 <xQueueReceive+0x30>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	623b      	str	r3, [r7, #32]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d103      	bne.n	800a392 <xQueueReceive+0x3e>
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <xQueueReceive+0x42>
 800a392:	2301      	movs	r3, #1
 800a394:	e000      	b.n	800a398 <xQueueReceive+0x44>
 800a396:	2300      	movs	r3, #0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10a      	bne.n	800a3b2 <xQueueReceive+0x5e>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	61fb      	str	r3, [r7, #28]
}
 800a3ae:	bf00      	nop
 800a3b0:	e7fe      	b.n	800a3b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3b2:	f001 f933 	bl	800b61c <xTaskGetSchedulerState>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d102      	bne.n	800a3c2 <xQueueReceive+0x6e>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <xQueueReceive+0x72>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e000      	b.n	800a3c8 <xQueueReceive+0x74>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10a      	bne.n	800a3e2 <xQueueReceive+0x8e>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	61bb      	str	r3, [r7, #24]
}
 800a3de:	bf00      	nop
 800a3e0:	e7fe      	b.n	800a3e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3e2:	f001 fe77 	bl	800c0d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d01f      	beq.n	800a432 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3f2:	68b9      	ldr	r1, [r7, #8]
 800a3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f6:	f000 f99a 	bl	800a72e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fc:	1e5a      	subs	r2, r3, #1
 800a3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a400:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00f      	beq.n	800a42a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	3310      	adds	r3, #16
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 ff42 	bl	800b298 <xTaskRemoveFromEventList>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d007      	beq.n	800a42a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a41a:	4b3d      	ldr	r3, [pc, #244]	; (800a510 <xQueueReceive+0x1bc>)
 800a41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a42a:	f001 fe83 	bl	800c134 <vPortExitCritical>
				return pdPASS;
 800a42e:	2301      	movs	r3, #1
 800a430:	e069      	b.n	800a506 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d103      	bne.n	800a440 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a438:	f001 fe7c 	bl	800c134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a43c:	2300      	movs	r3, #0
 800a43e:	e062      	b.n	800a506 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a446:	f107 0310 	add.w	r3, r7, #16
 800a44a:	4618      	mov	r0, r3
 800a44c:	f000 ff88 	bl	800b360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a450:	2301      	movs	r3, #1
 800a452:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a454:	f001 fe6e 	bl	800c134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a458:	f000 fcf4 	bl	800ae44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a45c:	f001 fe3a 	bl	800c0d4 <vPortEnterCritical>
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a466:	b25b      	sxtb	r3, r3
 800a468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a46c:	d103      	bne.n	800a476 <xQueueReceive+0x122>
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a47c:	b25b      	sxtb	r3, r3
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a482:	d103      	bne.n	800a48c <xQueueReceive+0x138>
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a48c:	f001 fe52 	bl	800c134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a490:	1d3a      	adds	r2, r7, #4
 800a492:	f107 0310 	add.w	r3, r7, #16
 800a496:	4611      	mov	r1, r2
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 ff77 	bl	800b38c <xTaskCheckForTimeOut>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d123      	bne.n	800a4ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4a6:	f000 f9ba 	bl	800a81e <prvIsQueueEmpty>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d017      	beq.n	800a4e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	3324      	adds	r3, #36	; 0x24
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 fe9d 	bl	800b1f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a4be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c0:	f000 f95b 	bl	800a77a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a4c4:	f000 fccc 	bl	800ae60 <xTaskResumeAll>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d189      	bne.n	800a3e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a4ce:	4b10      	ldr	r3, [pc, #64]	; (800a510 <xQueueReceive+0x1bc>)
 800a4d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	f3bf 8f6f 	isb	sy
 800a4de:	e780      	b.n	800a3e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a4e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4e2:	f000 f94a 	bl	800a77a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4e6:	f000 fcbb 	bl	800ae60 <xTaskResumeAll>
 800a4ea:	e77a      	b.n	800a3e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a4ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ee:	f000 f944 	bl	800a77a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4f2:	f000 fcb5 	bl	800ae60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f8:	f000 f991 	bl	800a81e <prvIsQueueEmpty>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f43f af6f 	beq.w	800a3e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a504:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a506:	4618      	mov	r0, r3
 800a508:	3730      	adds	r7, #48	; 0x30
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	e000ed04 	.word	0xe000ed04

0800a514 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b08e      	sub	sp, #56	; 0x38
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10a      	bne.n	800a540 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	623b      	str	r3, [r7, #32]
}
 800a53c:	bf00      	nop
 800a53e:	e7fe      	b.n	800a53e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d103      	bne.n	800a54e <xQueueReceiveFromISR+0x3a>
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <xQueueReceiveFromISR+0x3e>
 800a54e:	2301      	movs	r3, #1
 800a550:	e000      	b.n	800a554 <xQueueReceiveFromISR+0x40>
 800a552:	2300      	movs	r3, #0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10a      	bne.n	800a56e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	61fb      	str	r3, [r7, #28]
}
 800a56a:	bf00      	nop
 800a56c:	e7fe      	b.n	800a56c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a56e:	f001 fe93 	bl	800c298 <vPortValidateInterruptPriority>
	__asm volatile
 800a572:	f3ef 8211 	mrs	r2, BASEPRI
 800a576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57a:	f383 8811 	msr	BASEPRI, r3
 800a57e:	f3bf 8f6f 	isb	sy
 800a582:	f3bf 8f4f 	dsb	sy
 800a586:	61ba      	str	r2, [r7, #24]
 800a588:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a58a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a58c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a592:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a596:	2b00      	cmp	r3, #0
 800a598:	d02f      	beq.n	800a5fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5a4:	68b9      	ldr	r1, [r7, #8]
 800a5a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5a8:	f000 f8c1 	bl	800a72e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	1e5a      	subs	r2, r3, #1
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a5b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5bc:	d112      	bne.n	800a5e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d016      	beq.n	800a5f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	3310      	adds	r3, #16
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 fe64 	bl	800b298 <xTaskRemoveFromEventList>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00e      	beq.n	800a5f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00b      	beq.n	800a5f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	e007      	b.n	800a5f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	b25a      	sxtb	r2, r3
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5f8:	e001      	b.n	800a5fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a600:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f383 8811 	msr	BASEPRI, r3
}
 800a608:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3738      	adds	r7, #56	; 0x38
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10a      	bne.n	800a63c <vQueueDelete+0x28>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	60bb      	str	r3, [r7, #8]
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f000 f947 	bl	800a8d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d102      	bne.n	800a652 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f001 ff07 	bl	800c460 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a652:	bf00      	nop
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b086      	sub	sp, #24
 800a65e:	af00      	add	r7, sp, #0
 800a660:	60f8      	str	r0, [r7, #12]
 800a662:	60b9      	str	r1, [r7, #8]
 800a664:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a666:	2300      	movs	r3, #0
 800a668:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10d      	bne.n	800a694 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d14d      	bne.n	800a71c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	4618      	mov	r0, r3
 800a686:	f000 ffe7 	bl	800b658 <xTaskPriorityDisinherit>
 800a68a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	609a      	str	r2, [r3, #8]
 800a692:	e043      	b.n	800a71c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d119      	bne.n	800a6ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6858      	ldr	r0, [r3, #4]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	68b9      	ldr	r1, [r7, #8]
 800a6a6:	f002 f959 	bl	800c95c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	441a      	add	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d32b      	bcc.n	800a71c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	605a      	str	r2, [r3, #4]
 800a6cc:	e026      	b.n	800a71c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	68d8      	ldr	r0, [r3, #12]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	f002 f93f 	bl	800c95c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	68da      	ldr	r2, [r3, #12]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e6:	425b      	negs	r3, r3
 800a6e8:	441a      	add	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	68da      	ldr	r2, [r3, #12]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d207      	bcs.n	800a70a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	689a      	ldr	r2, [r3, #8]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a702:	425b      	negs	r3, r3
 800a704:	441a      	add	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d105      	bne.n	800a71c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	3b01      	subs	r3, #1
 800a71a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	1c5a      	adds	r2, r3, #1
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a724:	697b      	ldr	r3, [r7, #20]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3718      	adds	r7, #24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b082      	sub	sp, #8
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d018      	beq.n	800a772 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a748:	441a      	add	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68da      	ldr	r2, [r3, #12]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	429a      	cmp	r2, r3
 800a758:	d303      	bcc.n	800a762 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68d9      	ldr	r1, [r3, #12]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76a:	461a      	mov	r2, r3
 800a76c:	6838      	ldr	r0, [r7, #0]
 800a76e:	f002 f8f5 	bl	800c95c <memcpy>
	}
}
 800a772:	bf00      	nop
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b084      	sub	sp, #16
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a782:	f001 fca7 	bl	800c0d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a78c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a78e:	e011      	b.n	800a7b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	2b00      	cmp	r3, #0
 800a796:	d012      	beq.n	800a7be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3324      	adds	r3, #36	; 0x24
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 fd7b 	bl	800b298 <xTaskRemoveFromEventList>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7a8:	f000 fe52 	bl	800b450 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a7ac:	7bfb      	ldrb	r3, [r7, #15]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	dce9      	bgt.n	800a790 <prvUnlockQueue+0x16>
 800a7bc:	e000      	b.n	800a7c0 <prvUnlockQueue+0x46>
					break;
 800a7be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	22ff      	movs	r2, #255	; 0xff
 800a7c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a7c8:	f001 fcb4 	bl	800c134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a7cc:	f001 fc82 	bl	800c0d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7d8:	e011      	b.n	800a7fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d012      	beq.n	800a808 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	3310      	adds	r3, #16
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f000 fd56 	bl	800b298 <xTaskRemoveFromEventList>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a7f2:	f000 fe2d 	bl	800b450 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7f6:	7bbb      	ldrb	r3, [r7, #14]
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a802:	2b00      	cmp	r3, #0
 800a804:	dce9      	bgt.n	800a7da <prvUnlockQueue+0x60>
 800a806:	e000      	b.n	800a80a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a808:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	22ff      	movs	r2, #255	; 0xff
 800a80e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a812:	f001 fc8f 	bl	800c134 <vPortExitCritical>
}
 800a816:	bf00      	nop
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b084      	sub	sp, #16
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a826:	f001 fc55 	bl	800c0d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d102      	bne.n	800a838 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a832:	2301      	movs	r3, #1
 800a834:	60fb      	str	r3, [r7, #12]
 800a836:	e001      	b.n	800a83c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a838:	2300      	movs	r3, #0
 800a83a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a83c:	f001 fc7a 	bl	800c134 <vPortExitCritical>

	return xReturn;
 800a840:	68fb      	ldr	r3, [r7, #12]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a852:	f001 fc3f 	bl	800c0d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a85e:	429a      	cmp	r2, r3
 800a860:	d102      	bne.n	800a868 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a862:	2301      	movs	r3, #1
 800a864:	60fb      	str	r3, [r7, #12]
 800a866:	e001      	b.n	800a86c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a868:	2300      	movs	r3, #0
 800a86a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a86c:	f001 fc62 	bl	800c134 <vPortExitCritical>

	return xReturn;
 800a870:	68fb      	ldr	r3, [r7, #12]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
	...

0800a87c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a886:	2300      	movs	r3, #0
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	e014      	b.n	800a8b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a88c:	4a0f      	ldr	r2, [pc, #60]	; (800a8cc <vQueueAddToRegistry+0x50>)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10b      	bne.n	800a8b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a898:	490c      	ldr	r1, [pc, #48]	; (800a8cc <vQueueAddToRegistry+0x50>)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8a2:	4a0a      	ldr	r2, [pc, #40]	; (800a8cc <vQueueAddToRegistry+0x50>)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	00db      	lsls	r3, r3, #3
 800a8a8:	4413      	add	r3, r2
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a8ae:	e006      	b.n	800a8be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	60fb      	str	r3, [r7, #12]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2b07      	cmp	r3, #7
 800a8ba:	d9e7      	bls.n	800a88c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a8bc:	bf00      	nop
 800a8be:	bf00      	nop
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	2000637c 	.word	0x2000637c

0800a8d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8d8:	2300      	movs	r3, #0
 800a8da:	60fb      	str	r3, [r7, #12]
 800a8dc:	e016      	b.n	800a90c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a8de:	4a10      	ldr	r2, [pc, #64]	; (800a920 <vQueueUnregisterQueue+0x50>)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	00db      	lsls	r3, r3, #3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d10b      	bne.n	800a906 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a8ee:	4a0c      	ldr	r2, [pc, #48]	; (800a920 <vQueueUnregisterQueue+0x50>)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a8f8:	4a09      	ldr	r2, [pc, #36]	; (800a920 <vQueueUnregisterQueue+0x50>)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	00db      	lsls	r3, r3, #3
 800a8fe:	4413      	add	r3, r2
 800a900:	2200      	movs	r2, #0
 800a902:	605a      	str	r2, [r3, #4]
				break;
 800a904:	e006      	b.n	800a914 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	3301      	adds	r3, #1
 800a90a:	60fb      	str	r3, [r7, #12]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2b07      	cmp	r3, #7
 800a910:	d9e5      	bls.n	800a8de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a912:	bf00      	nop
 800a914:	bf00      	nop
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	2000637c 	.word	0x2000637c

0800a924 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a934:	f001 fbce 	bl	800c0d4 <vPortEnterCritical>
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a93e:	b25b      	sxtb	r3, r3
 800a940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a944:	d103      	bne.n	800a94e <vQueueWaitForMessageRestricted+0x2a>
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a954:	b25b      	sxtb	r3, r3
 800a956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a95a:	d103      	bne.n	800a964 <vQueueWaitForMessageRestricted+0x40>
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a964:	f001 fbe6 	bl	800c134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	3324      	adds	r3, #36	; 0x24
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	68b9      	ldr	r1, [r7, #8]
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 fc61 	bl	800b240 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a97e:	6978      	ldr	r0, [r7, #20]
 800a980:	f7ff fefb 	bl	800a77a <prvUnlockQueue>
	}
 800a984:	bf00      	nop
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08e      	sub	sp, #56	; 0x38
 800a990:	af04      	add	r7, sp, #16
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10a      	bne.n	800a9b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	623b      	str	r3, [r7, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	61fb      	str	r3, [r7, #28]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a9d2:	23bc      	movs	r3, #188	; 0xbc
 800a9d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	2bbc      	cmp	r3, #188	; 0xbc
 800a9da:	d00a      	beq.n	800a9f2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	61bb      	str	r3, [r7, #24]
}
 800a9ee:	bf00      	nop
 800a9f0:	e7fe      	b.n	800a9f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d01e      	beq.n	800aa38 <xTaskCreateStatic+0xac>
 800a9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d01b      	beq.n	800aa38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa12:	2300      	movs	r3, #0
 800aa14:	9303      	str	r3, [sp, #12]
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	9302      	str	r3, [sp, #8]
 800aa1a:	f107 0314 	add.w	r3, r7, #20
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	68b9      	ldr	r1, [r7, #8]
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 f850 	bl	800aad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa32:	f000 f8f3 	bl	800ac1c <prvAddNewTaskToReadyList>
 800aa36:	e001      	b.n	800aa3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa3c:	697b      	ldr	r3, [r7, #20]
	}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3728      	adds	r7, #40	; 0x28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b08c      	sub	sp, #48	; 0x30
 800aa4a:	af04      	add	r7, sp, #16
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	603b      	str	r3, [r7, #0]
 800aa52:	4613      	mov	r3, r2
 800aa54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa56:	88fb      	ldrh	r3, [r7, #6]
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 fc5c 	bl	800c318 <pvPortMalloc>
 800aa60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00e      	beq.n	800aa86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa68:	20bc      	movs	r0, #188	; 0xbc
 800aa6a:	f001 fc55 	bl	800c318 <pvPortMalloc>
 800aa6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	631a      	str	r2, [r3, #48]	; 0x30
 800aa7c:	e005      	b.n	800aa8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa7e:	6978      	ldr	r0, [r7, #20]
 800aa80:	f001 fcee 	bl	800c460 <vPortFree>
 800aa84:	e001      	b.n	800aa8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa86:	2300      	movs	r3, #0
 800aa88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d017      	beq.n	800aac0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa98:	88fa      	ldrh	r2, [r7, #6]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	9303      	str	r3, [sp, #12]
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	9302      	str	r3, [sp, #8]
 800aaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa4:	9301      	str	r3, [sp, #4]
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f000 f80e 	bl	800aad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aab4:	69f8      	ldr	r0, [r7, #28]
 800aab6:	f000 f8b1 	bl	800ac1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aaba:	2301      	movs	r3, #1
 800aabc:	61bb      	str	r3, [r7, #24]
 800aabe:	e002      	b.n	800aac6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aac4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aac6:	69bb      	ldr	r3, [r7, #24]
	}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
 800aadc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	461a      	mov	r2, r3
 800aae8:	21a5      	movs	r1, #165	; 0xa5
 800aaea:	f001 ff45 	bl	800c978 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	f023 0307 	bic.w	r3, r3, #7
 800ab06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	f003 0307 	and.w	r3, r3, #7
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00a      	beq.n	800ab28 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	617b      	str	r3, [r7, #20]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d01f      	beq.n	800ab6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab2e:	2300      	movs	r3, #0
 800ab30:	61fb      	str	r3, [r7, #28]
 800ab32:	e012      	b.n	800ab5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	4413      	add	r3, r2
 800ab3a:	7819      	ldrb	r1, [r3, #0]
 800ab3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	4413      	add	r3, r2
 800ab42:	3334      	adds	r3, #52	; 0x34
 800ab44:	460a      	mov	r2, r1
 800ab46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d006      	beq.n	800ab62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	3301      	adds	r3, #1
 800ab58:	61fb      	str	r3, [r7, #28]
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	2b0f      	cmp	r3, #15
 800ab5e:	d9e9      	bls.n	800ab34 <prvInitialiseNewTask+0x64>
 800ab60:	e000      	b.n	800ab64 <prvInitialiseNewTask+0x94>
			{
				break;
 800ab62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab6c:	e003      	b.n	800ab76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab78:	2b37      	cmp	r3, #55	; 0x37
 800ab7a:	d901      	bls.n	800ab80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab7c:	2337      	movs	r3, #55	; 0x37
 800ab7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	2200      	movs	r2, #0
 800ab90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	3304      	adds	r3, #4
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff f806 	bl	8009ba8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	3318      	adds	r3, #24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7ff f801 	bl	8009ba8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abce:	3354      	adds	r3, #84	; 0x54
 800abd0:	2260      	movs	r2, #96	; 0x60
 800abd2:	2100      	movs	r1, #0
 800abd4:	4618      	mov	r0, r3
 800abd6:	f001 fecf 	bl	800c978 <memset>
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	4a0c      	ldr	r2, [pc, #48]	; (800ac10 <prvInitialiseNewTask+0x140>)
 800abde:	659a      	str	r2, [r3, #88]	; 0x58
 800abe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe2:	4a0c      	ldr	r2, [pc, #48]	; (800ac14 <prvInitialiseNewTask+0x144>)
 800abe4:	65da      	str	r2, [r3, #92]	; 0x5c
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	4a0b      	ldr	r2, [pc, #44]	; (800ac18 <prvInitialiseNewTask+0x148>)
 800abea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	68f9      	ldr	r1, [r7, #12]
 800abf0:	69b8      	ldr	r0, [r7, #24]
 800abf2:	f001 f941 	bl	800be78 <pxPortInitialiseStack>
 800abf6:	4602      	mov	r2, r0
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d002      	beq.n	800ac08 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac08:	bf00      	nop
 800ac0a:	3720      	adds	r7, #32
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	0800fecc 	.word	0x0800fecc
 800ac14:	0800feec 	.word	0x0800feec
 800ac18:	0800feac 	.word	0x0800feac

0800ac1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac24:	f001 fa56 	bl	800c0d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac28:	4b2d      	ldr	r3, [pc, #180]	; (800ace0 <prvAddNewTaskToReadyList+0xc4>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	4a2c      	ldr	r2, [pc, #176]	; (800ace0 <prvAddNewTaskToReadyList+0xc4>)
 800ac30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac32:	4b2c      	ldr	r3, [pc, #176]	; (800ace4 <prvAddNewTaskToReadyList+0xc8>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d109      	bne.n	800ac4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac3a:	4a2a      	ldr	r2, [pc, #168]	; (800ace4 <prvAddNewTaskToReadyList+0xc8>)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac40:	4b27      	ldr	r3, [pc, #156]	; (800ace0 <prvAddNewTaskToReadyList+0xc4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d110      	bne.n	800ac6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac48:	f000 fc26 	bl	800b498 <prvInitialiseTaskLists>
 800ac4c:	e00d      	b.n	800ac6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac4e:	4b26      	ldr	r3, [pc, #152]	; (800ace8 <prvAddNewTaskToReadyList+0xcc>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d109      	bne.n	800ac6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac56:	4b23      	ldr	r3, [pc, #140]	; (800ace4 <prvAddNewTaskToReadyList+0xc8>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d802      	bhi.n	800ac6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac64:	4a1f      	ldr	r2, [pc, #124]	; (800ace4 <prvAddNewTaskToReadyList+0xc8>)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac6a:	4b20      	ldr	r3, [pc, #128]	; (800acec <prvAddNewTaskToReadyList+0xd0>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	4a1e      	ldr	r2, [pc, #120]	; (800acec <prvAddNewTaskToReadyList+0xd0>)
 800ac72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac74:	4b1d      	ldr	r3, [pc, #116]	; (800acec <prvAddNewTaskToReadyList+0xd0>)
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac80:	4b1b      	ldr	r3, [pc, #108]	; (800acf0 <prvAddNewTaskToReadyList+0xd4>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d903      	bls.n	800ac90 <prvAddNewTaskToReadyList+0x74>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8c:	4a18      	ldr	r2, [pc, #96]	; (800acf0 <prvAddNewTaskToReadyList+0xd4>)
 800ac8e:	6013      	str	r3, [r2, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac94:	4613      	mov	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4a15      	ldr	r2, [pc, #84]	; (800acf4 <prvAddNewTaskToReadyList+0xd8>)
 800ac9e:	441a      	add	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3304      	adds	r3, #4
 800aca4:	4619      	mov	r1, r3
 800aca6:	4610      	mov	r0, r2
 800aca8:	f7fe ff8b 	bl	8009bc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800acac:	f001 fa42 	bl	800c134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800acb0:	4b0d      	ldr	r3, [pc, #52]	; (800ace8 <prvAddNewTaskToReadyList+0xcc>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00e      	beq.n	800acd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800acb8:	4b0a      	ldr	r3, [pc, #40]	; (800ace4 <prvAddNewTaskToReadyList+0xc8>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d207      	bcs.n	800acd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acc6:	4b0c      	ldr	r3, [pc, #48]	; (800acf8 <prvAddNewTaskToReadyList+0xdc>)
 800acc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800accc:	601a      	str	r2, [r3, #0]
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	20006890 	.word	0x20006890
 800ace4:	200063bc 	.word	0x200063bc
 800ace8:	2000689c 	.word	0x2000689c
 800acec:	200068ac 	.word	0x200068ac
 800acf0:	20006898 	.word	0x20006898
 800acf4:	200063c0 	.word	0x200063c0
 800acf8:	e000ed04 	.word	0xe000ed04

0800acfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad04:	2300      	movs	r3, #0
 800ad06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d017      	beq.n	800ad3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad0e:	4b13      	ldr	r3, [pc, #76]	; (800ad5c <vTaskDelay+0x60>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00a      	beq.n	800ad2c <vTaskDelay+0x30>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	60bb      	str	r3, [r7, #8]
}
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad2c:	f000 f88a 	bl	800ae44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad30:	2100      	movs	r1, #0
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fcfe 	bl	800b734 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad38:	f000 f892 	bl	800ae60 <xTaskResumeAll>
 800ad3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d107      	bne.n	800ad54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ad44:	4b06      	ldr	r3, [pc, #24]	; (800ad60 <vTaskDelay+0x64>)
 800ad46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad54:	bf00      	nop
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	200068b8 	.word	0x200068b8
 800ad60:	e000ed04 	.word	0xe000ed04

0800ad64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b08a      	sub	sp, #40	; 0x28
 800ad68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad72:	463a      	mov	r2, r7
 800ad74:	1d39      	adds	r1, r7, #4
 800ad76:	f107 0308 	add.w	r3, r7, #8
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fe fec0 	bl	8009b00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	9202      	str	r2, [sp, #8]
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	460a      	mov	r2, r1
 800ad92:	4924      	ldr	r1, [pc, #144]	; (800ae24 <vTaskStartScheduler+0xc0>)
 800ad94:	4824      	ldr	r0, [pc, #144]	; (800ae28 <vTaskStartScheduler+0xc4>)
 800ad96:	f7ff fdf9 	bl	800a98c <xTaskCreateStatic>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	4a23      	ldr	r2, [pc, #140]	; (800ae2c <vTaskStartScheduler+0xc8>)
 800ad9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ada0:	4b22      	ldr	r3, [pc, #136]	; (800ae2c <vTaskStartScheduler+0xc8>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ada8:	2301      	movs	r3, #1
 800adaa:	617b      	str	r3, [r7, #20]
 800adac:	e001      	b.n	800adb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adae:	2300      	movs	r3, #0
 800adb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d102      	bne.n	800adbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800adb8:	f000 fd10 	bl	800b7dc <xTimerCreateTimerTask>
 800adbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d11b      	bne.n	800adfc <vTaskStartScheduler+0x98>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	613b      	str	r3, [r7, #16]
}
 800add6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800add8:	4b15      	ldr	r3, [pc, #84]	; (800ae30 <vTaskStartScheduler+0xcc>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	3354      	adds	r3, #84	; 0x54
 800adde:	4a15      	ldr	r2, [pc, #84]	; (800ae34 <vTaskStartScheduler+0xd0>)
 800ade0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ade2:	4b15      	ldr	r3, [pc, #84]	; (800ae38 <vTaskStartScheduler+0xd4>)
 800ade4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ade8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800adea:	4b14      	ldr	r3, [pc, #80]	; (800ae3c <vTaskStartScheduler+0xd8>)
 800adec:	2201      	movs	r2, #1
 800adee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800adf0:	4b13      	ldr	r3, [pc, #76]	; (800ae40 <vTaskStartScheduler+0xdc>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800adf6:	f001 f8cb 	bl	800bf90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800adfa:	e00e      	b.n	800ae1a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae02:	d10a      	bne.n	800ae1a <vTaskStartScheduler+0xb6>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	60fb      	str	r3, [r7, #12]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <vTaskStartScheduler+0xb4>
}
 800ae1a:	bf00      	nop
 800ae1c:	3718      	adds	r7, #24
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	0800dd10 	.word	0x0800dd10
 800ae28:	0800b469 	.word	0x0800b469
 800ae2c:	200068b4 	.word	0x200068b4
 800ae30:	200063bc 	.word	0x200063bc
 800ae34:	200000bc 	.word	0x200000bc
 800ae38:	200068b0 	.word	0x200068b0
 800ae3c:	2000689c 	.word	0x2000689c
 800ae40:	20006894 	.word	0x20006894

0800ae44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae44:	b480      	push	{r7}
 800ae46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae48:	4b04      	ldr	r3, [pc, #16]	; (800ae5c <vTaskSuspendAll+0x18>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	4a03      	ldr	r2, [pc, #12]	; (800ae5c <vTaskSuspendAll+0x18>)
 800ae50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae52:	bf00      	nop
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	200068b8 	.word	0x200068b8

0800ae60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae6e:	4b42      	ldr	r3, [pc, #264]	; (800af78 <xTaskResumeAll+0x118>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10a      	bne.n	800ae8c <xTaskResumeAll+0x2c>
	__asm volatile
 800ae76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	603b      	str	r3, [r7, #0]
}
 800ae88:	bf00      	nop
 800ae8a:	e7fe      	b.n	800ae8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae8c:	f001 f922 	bl	800c0d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae90:	4b39      	ldr	r3, [pc, #228]	; (800af78 <xTaskResumeAll+0x118>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	3b01      	subs	r3, #1
 800ae96:	4a38      	ldr	r2, [pc, #224]	; (800af78 <xTaskResumeAll+0x118>)
 800ae98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae9a:	4b37      	ldr	r3, [pc, #220]	; (800af78 <xTaskResumeAll+0x118>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d162      	bne.n	800af68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aea2:	4b36      	ldr	r3, [pc, #216]	; (800af7c <xTaskResumeAll+0x11c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d05e      	beq.n	800af68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aeaa:	e02f      	b.n	800af0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeac:	4b34      	ldr	r3, [pc, #208]	; (800af80 <xTaskResumeAll+0x120>)
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	3318      	adds	r3, #24
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fe fedf 	bl	8009c7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3304      	adds	r3, #4
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe feda 	bl	8009c7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aecc:	4b2d      	ldr	r3, [pc, #180]	; (800af84 <xTaskResumeAll+0x124>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d903      	bls.n	800aedc <xTaskResumeAll+0x7c>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed8:	4a2a      	ldr	r2, [pc, #168]	; (800af84 <xTaskResumeAll+0x124>)
 800aeda:	6013      	str	r3, [r2, #0]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4a27      	ldr	r2, [pc, #156]	; (800af88 <xTaskResumeAll+0x128>)
 800aeea:	441a      	add	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3304      	adds	r3, #4
 800aef0:	4619      	mov	r1, r3
 800aef2:	4610      	mov	r0, r2
 800aef4:	f7fe fe65 	bl	8009bc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aefc:	4b23      	ldr	r3, [pc, #140]	; (800af8c <xTaskResumeAll+0x12c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af02:	429a      	cmp	r2, r3
 800af04:	d302      	bcc.n	800af0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af06:	4b22      	ldr	r3, [pc, #136]	; (800af90 <xTaskResumeAll+0x130>)
 800af08:	2201      	movs	r2, #1
 800af0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af0c:	4b1c      	ldr	r3, [pc, #112]	; (800af80 <xTaskResumeAll+0x120>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1cb      	bne.n	800aeac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d001      	beq.n	800af1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af1a:	f000 fb5f 	bl	800b5dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af1e:	4b1d      	ldr	r3, [pc, #116]	; (800af94 <xTaskResumeAll+0x134>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d010      	beq.n	800af4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af2a:	f000 f847 	bl	800afbc <xTaskIncrementTick>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af34:	4b16      	ldr	r3, [pc, #88]	; (800af90 <xTaskResumeAll+0x130>)
 800af36:	2201      	movs	r2, #1
 800af38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3b01      	subs	r3, #1
 800af3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1f1      	bne.n	800af2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af46:	4b13      	ldr	r3, [pc, #76]	; (800af94 <xTaskResumeAll+0x134>)
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af4c:	4b10      	ldr	r3, [pc, #64]	; (800af90 <xTaskResumeAll+0x130>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d009      	beq.n	800af68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af54:	2301      	movs	r3, #1
 800af56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af58:	4b0f      	ldr	r3, [pc, #60]	; (800af98 <xTaskResumeAll+0x138>)
 800af5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af68:	f001 f8e4 	bl	800c134 <vPortExitCritical>

	return xAlreadyYielded;
 800af6c:	68bb      	ldr	r3, [r7, #8]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	200068b8 	.word	0x200068b8
 800af7c:	20006890 	.word	0x20006890
 800af80:	20006850 	.word	0x20006850
 800af84:	20006898 	.word	0x20006898
 800af88:	200063c0 	.word	0x200063c0
 800af8c:	200063bc 	.word	0x200063bc
 800af90:	200068a4 	.word	0x200068a4
 800af94:	200068a0 	.word	0x200068a0
 800af98:	e000ed04 	.word	0xe000ed04

0800af9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800afa2:	4b05      	ldr	r3, [pc, #20]	; (800afb8 <xTaskGetTickCount+0x1c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afa8:	687b      	ldr	r3, [r7, #4]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	370c      	adds	r7, #12
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	20006894 	.word	0x20006894

0800afbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800afc2:	2300      	movs	r3, #0
 800afc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afc6:	4b4f      	ldr	r3, [pc, #316]	; (800b104 <xTaskIncrementTick+0x148>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f040 808f 	bne.w	800b0ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afd0:	4b4d      	ldr	r3, [pc, #308]	; (800b108 <xTaskIncrementTick+0x14c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3301      	adds	r3, #1
 800afd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afd8:	4a4b      	ldr	r2, [pc, #300]	; (800b108 <xTaskIncrementTick+0x14c>)
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d120      	bne.n	800b026 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800afe4:	4b49      	ldr	r3, [pc, #292]	; (800b10c <xTaskIncrementTick+0x150>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00a      	beq.n	800b004 <xTaskIncrementTick+0x48>
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	603b      	str	r3, [r7, #0]
}
 800b000:	bf00      	nop
 800b002:	e7fe      	b.n	800b002 <xTaskIncrementTick+0x46>
 800b004:	4b41      	ldr	r3, [pc, #260]	; (800b10c <xTaskIncrementTick+0x150>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	60fb      	str	r3, [r7, #12]
 800b00a:	4b41      	ldr	r3, [pc, #260]	; (800b110 <xTaskIncrementTick+0x154>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a3f      	ldr	r2, [pc, #252]	; (800b10c <xTaskIncrementTick+0x150>)
 800b010:	6013      	str	r3, [r2, #0]
 800b012:	4a3f      	ldr	r2, [pc, #252]	; (800b110 <xTaskIncrementTick+0x154>)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	4b3e      	ldr	r3, [pc, #248]	; (800b114 <xTaskIncrementTick+0x158>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3301      	adds	r3, #1
 800b01e:	4a3d      	ldr	r2, [pc, #244]	; (800b114 <xTaskIncrementTick+0x158>)
 800b020:	6013      	str	r3, [r2, #0]
 800b022:	f000 fadb 	bl	800b5dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b026:	4b3c      	ldr	r3, [pc, #240]	; (800b118 <xTaskIncrementTick+0x15c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d349      	bcc.n	800b0c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b030:	4b36      	ldr	r3, [pc, #216]	; (800b10c <xTaskIncrementTick+0x150>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d104      	bne.n	800b044 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b03a:	4b37      	ldr	r3, [pc, #220]	; (800b118 <xTaskIncrementTick+0x15c>)
 800b03c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b040:	601a      	str	r2, [r3, #0]
					break;
 800b042:	e03f      	b.n	800b0c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b044:	4b31      	ldr	r3, [pc, #196]	; (800b10c <xTaskIncrementTick+0x150>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d203      	bcs.n	800b064 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b05c:	4a2e      	ldr	r2, [pc, #184]	; (800b118 <xTaskIncrementTick+0x15c>)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b062:	e02f      	b.n	800b0c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	3304      	adds	r3, #4
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fe fe07 	bl	8009c7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b072:	2b00      	cmp	r3, #0
 800b074:	d004      	beq.n	800b080 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	3318      	adds	r3, #24
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fe fdfe 	bl	8009c7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b084:	4b25      	ldr	r3, [pc, #148]	; (800b11c <xTaskIncrementTick+0x160>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d903      	bls.n	800b094 <xTaskIncrementTick+0xd8>
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b090:	4a22      	ldr	r2, [pc, #136]	; (800b11c <xTaskIncrementTick+0x160>)
 800b092:	6013      	str	r3, [r2, #0]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b098:	4613      	mov	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	4413      	add	r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	4a1f      	ldr	r2, [pc, #124]	; (800b120 <xTaskIncrementTick+0x164>)
 800b0a2:	441a      	add	r2, r3
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	3304      	adds	r3, #4
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	4610      	mov	r0, r2
 800b0ac:	f7fe fd89 	bl	8009bc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b4:	4b1b      	ldr	r3, [pc, #108]	; (800b124 <xTaskIncrementTick+0x168>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d3b8      	bcc.n	800b030 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0c2:	e7b5      	b.n	800b030 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0c4:	4b17      	ldr	r3, [pc, #92]	; (800b124 <xTaskIncrementTick+0x168>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ca:	4915      	ldr	r1, [pc, #84]	; (800b120 <xTaskIncrementTick+0x164>)
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	440b      	add	r3, r1
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d901      	bls.n	800b0e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0e0:	4b11      	ldr	r3, [pc, #68]	; (800b128 <xTaskIncrementTick+0x16c>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d007      	beq.n	800b0f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	617b      	str	r3, [r7, #20]
 800b0ec:	e004      	b.n	800b0f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b0ee:	4b0f      	ldr	r3, [pc, #60]	; (800b12c <xTaskIncrementTick+0x170>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	4a0d      	ldr	r2, [pc, #52]	; (800b12c <xTaskIncrementTick+0x170>)
 800b0f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b0f8:	697b      	ldr	r3, [r7, #20]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	200068b8 	.word	0x200068b8
 800b108:	20006894 	.word	0x20006894
 800b10c:	20006848 	.word	0x20006848
 800b110:	2000684c 	.word	0x2000684c
 800b114:	200068a8 	.word	0x200068a8
 800b118:	200068b0 	.word	0x200068b0
 800b11c:	20006898 	.word	0x20006898
 800b120:	200063c0 	.word	0x200063c0
 800b124:	200063bc 	.word	0x200063bc
 800b128:	200068a4 	.word	0x200068a4
 800b12c:	200068a0 	.word	0x200068a0

0800b130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b136:	4b2a      	ldr	r3, [pc, #168]	; (800b1e0 <vTaskSwitchContext+0xb0>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b13e:	4b29      	ldr	r3, [pc, #164]	; (800b1e4 <vTaskSwitchContext+0xb4>)
 800b140:	2201      	movs	r2, #1
 800b142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b144:	e046      	b.n	800b1d4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b146:	4b27      	ldr	r3, [pc, #156]	; (800b1e4 <vTaskSwitchContext+0xb4>)
 800b148:	2200      	movs	r2, #0
 800b14a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b14c:	4b26      	ldr	r3, [pc, #152]	; (800b1e8 <vTaskSwitchContext+0xb8>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	60fb      	str	r3, [r7, #12]
 800b152:	e010      	b.n	800b176 <vTaskSwitchContext+0x46>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10a      	bne.n	800b170 <vTaskSwitchContext+0x40>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	607b      	str	r3, [r7, #4]
}
 800b16c:	bf00      	nop
 800b16e:	e7fe      	b.n	800b16e <vTaskSwitchContext+0x3e>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	3b01      	subs	r3, #1
 800b174:	60fb      	str	r3, [r7, #12]
 800b176:	491d      	ldr	r1, [pc, #116]	; (800b1ec <vTaskSwitchContext+0xbc>)
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	4613      	mov	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	440b      	add	r3, r1
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0e4      	beq.n	800b154 <vTaskSwitchContext+0x24>
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4a15      	ldr	r2, [pc, #84]	; (800b1ec <vTaskSwitchContext+0xbc>)
 800b196:	4413      	add	r3, r2
 800b198:	60bb      	str	r3, [r7, #8]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	605a      	str	r2, [r3, #4]
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	3308      	adds	r3, #8
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d104      	bne.n	800b1ba <vTaskSwitchContext+0x8a>
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	605a      	str	r2, [r3, #4]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	4a0b      	ldr	r2, [pc, #44]	; (800b1f0 <vTaskSwitchContext+0xc0>)
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	4a08      	ldr	r2, [pc, #32]	; (800b1e8 <vTaskSwitchContext+0xb8>)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1ca:	4b09      	ldr	r3, [pc, #36]	; (800b1f0 <vTaskSwitchContext+0xc0>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	3354      	adds	r3, #84	; 0x54
 800b1d0:	4a08      	ldr	r2, [pc, #32]	; (800b1f4 <vTaskSwitchContext+0xc4>)
 800b1d2:	6013      	str	r3, [r2, #0]
}
 800b1d4:	bf00      	nop
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	200068b8 	.word	0x200068b8
 800b1e4:	200068a4 	.word	0x200068a4
 800b1e8:	20006898 	.word	0x20006898
 800b1ec:	200063c0 	.word	0x200063c0
 800b1f0:	200063bc 	.word	0x200063bc
 800b1f4:	200000bc 	.word	0x200000bc

0800b1f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	60fb      	str	r3, [r7, #12]
}
 800b21a:	bf00      	nop
 800b21c:	e7fe      	b.n	800b21c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b21e:	4b07      	ldr	r3, [pc, #28]	; (800b23c <vTaskPlaceOnEventList+0x44>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3318      	adds	r3, #24
 800b224:	4619      	mov	r1, r3
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7fe fcef 	bl	8009c0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b22c:	2101      	movs	r1, #1
 800b22e:	6838      	ldr	r0, [r7, #0]
 800b230:	f000 fa80 	bl	800b734 <prvAddCurrentTaskToDelayedList>
}
 800b234:	bf00      	nop
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	200063bc 	.word	0x200063bc

0800b240 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10a      	bne.n	800b268 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	617b      	str	r3, [r7, #20]
}
 800b264:	bf00      	nop
 800b266:	e7fe      	b.n	800b266 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b268:	4b0a      	ldr	r3, [pc, #40]	; (800b294 <vTaskPlaceOnEventListRestricted+0x54>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3318      	adds	r3, #24
 800b26e:	4619      	mov	r1, r3
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7fe fca6 	bl	8009bc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b27c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b280:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b282:	6879      	ldr	r1, [r7, #4]
 800b284:	68b8      	ldr	r0, [r7, #8]
 800b286:	f000 fa55 	bl	800b734 <prvAddCurrentTaskToDelayedList>
	}
 800b28a:	bf00      	nop
 800b28c:	3718      	adds	r7, #24
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	200063bc 	.word	0x200063bc

0800b298 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10a      	bne.n	800b2c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	60fb      	str	r3, [r7, #12]
}
 800b2c0:	bf00      	nop
 800b2c2:	e7fe      	b.n	800b2c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	3318      	adds	r3, #24
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fe fcd7 	bl	8009c7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2ce:	4b1e      	ldr	r3, [pc, #120]	; (800b348 <xTaskRemoveFromEventList+0xb0>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d11d      	bne.n	800b312 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	3304      	adds	r3, #4
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fe fcce 	bl	8009c7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e4:	4b19      	ldr	r3, [pc, #100]	; (800b34c <xTaskRemoveFromEventList+0xb4>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d903      	bls.n	800b2f4 <xTaskRemoveFromEventList+0x5c>
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f0:	4a16      	ldr	r2, [pc, #88]	; (800b34c <xTaskRemoveFromEventList+0xb4>)
 800b2f2:	6013      	str	r3, [r2, #0]
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4a13      	ldr	r2, [pc, #76]	; (800b350 <xTaskRemoveFromEventList+0xb8>)
 800b302:	441a      	add	r2, r3
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	3304      	adds	r3, #4
 800b308:	4619      	mov	r1, r3
 800b30a:	4610      	mov	r0, r2
 800b30c:	f7fe fc59 	bl	8009bc2 <vListInsertEnd>
 800b310:	e005      	b.n	800b31e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	3318      	adds	r3, #24
 800b316:	4619      	mov	r1, r3
 800b318:	480e      	ldr	r0, [pc, #56]	; (800b354 <xTaskRemoveFromEventList+0xbc>)
 800b31a:	f7fe fc52 	bl	8009bc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b322:	4b0d      	ldr	r3, [pc, #52]	; (800b358 <xTaskRemoveFromEventList+0xc0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b328:	429a      	cmp	r2, r3
 800b32a:	d905      	bls.n	800b338 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b32c:	2301      	movs	r3, #1
 800b32e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b330:	4b0a      	ldr	r3, [pc, #40]	; (800b35c <xTaskRemoveFromEventList+0xc4>)
 800b332:	2201      	movs	r2, #1
 800b334:	601a      	str	r2, [r3, #0]
 800b336:	e001      	b.n	800b33c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b338:	2300      	movs	r3, #0
 800b33a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b33c:	697b      	ldr	r3, [r7, #20]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	200068b8 	.word	0x200068b8
 800b34c:	20006898 	.word	0x20006898
 800b350:	200063c0 	.word	0x200063c0
 800b354:	20006850 	.word	0x20006850
 800b358:	200063bc 	.word	0x200063bc
 800b35c:	200068a4 	.word	0x200068a4

0800b360 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b368:	4b06      	ldr	r3, [pc, #24]	; (800b384 <vTaskInternalSetTimeOutState+0x24>)
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b370:	4b05      	ldr	r3, [pc, #20]	; (800b388 <vTaskInternalSetTimeOutState+0x28>)
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	605a      	str	r2, [r3, #4]
}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	200068a8 	.word	0x200068a8
 800b388:	20006894 	.word	0x20006894

0800b38c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10a      	bne.n	800b3b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	613b      	str	r3, [r7, #16]
}
 800b3ae:	bf00      	nop
 800b3b0:	e7fe      	b.n	800b3b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10a      	bne.n	800b3ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3bc:	f383 8811 	msr	BASEPRI, r3
 800b3c0:	f3bf 8f6f 	isb	sy
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	60fb      	str	r3, [r7, #12]
}
 800b3ca:	bf00      	nop
 800b3cc:	e7fe      	b.n	800b3cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b3ce:	f000 fe81 	bl	800c0d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3d2:	4b1d      	ldr	r3, [pc, #116]	; (800b448 <xTaskCheckForTimeOut+0xbc>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	69ba      	ldr	r2, [r7, #24]
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3ea:	d102      	bne.n	800b3f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	61fb      	str	r3, [r7, #28]
 800b3f0:	e023      	b.n	800b43a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	4b15      	ldr	r3, [pc, #84]	; (800b44c <xTaskCheckForTimeOut+0xc0>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d007      	beq.n	800b40e <xTaskCheckForTimeOut+0x82>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	429a      	cmp	r2, r3
 800b406:	d302      	bcc.n	800b40e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b408:	2301      	movs	r3, #1
 800b40a:	61fb      	str	r3, [r7, #28]
 800b40c:	e015      	b.n	800b43a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	429a      	cmp	r2, r3
 800b416:	d20b      	bcs.n	800b430 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	1ad2      	subs	r2, r2, r3
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7ff ff9b 	bl	800b360 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b42a:	2300      	movs	r3, #0
 800b42c:	61fb      	str	r3, [r7, #28]
 800b42e:	e004      	b.n	800b43a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2200      	movs	r2, #0
 800b434:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b436:	2301      	movs	r3, #1
 800b438:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b43a:	f000 fe7b 	bl	800c134 <vPortExitCritical>

	return xReturn;
 800b43e:	69fb      	ldr	r3, [r7, #28]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3720      	adds	r7, #32
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	20006894 	.word	0x20006894
 800b44c:	200068a8 	.word	0x200068a8

0800b450 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b450:	b480      	push	{r7}
 800b452:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b454:	4b03      	ldr	r3, [pc, #12]	; (800b464 <vTaskMissedYield+0x14>)
 800b456:	2201      	movs	r2, #1
 800b458:	601a      	str	r2, [r3, #0]
}
 800b45a:	bf00      	nop
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	200068a4 	.word	0x200068a4

0800b468 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b470:	f000 f852 	bl	800b518 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b474:	4b06      	ldr	r3, [pc, #24]	; (800b490 <prvIdleTask+0x28>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d9f9      	bls.n	800b470 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b47c:	4b05      	ldr	r3, [pc, #20]	; (800b494 <prvIdleTask+0x2c>)
 800b47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b482:	601a      	str	r2, [r3, #0]
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b48c:	e7f0      	b.n	800b470 <prvIdleTask+0x8>
 800b48e:	bf00      	nop
 800b490:	200063c0 	.word	0x200063c0
 800b494:	e000ed04 	.word	0xe000ed04

0800b498 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b49e:	2300      	movs	r3, #0
 800b4a0:	607b      	str	r3, [r7, #4]
 800b4a2:	e00c      	b.n	800b4be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4413      	add	r3, r2
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	4a12      	ldr	r2, [pc, #72]	; (800b4f8 <prvInitialiseTaskLists+0x60>)
 800b4b0:	4413      	add	r3, r2
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe fb58 	bl	8009b68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	607b      	str	r3, [r7, #4]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b37      	cmp	r3, #55	; 0x37
 800b4c2:	d9ef      	bls.n	800b4a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4c4:	480d      	ldr	r0, [pc, #52]	; (800b4fc <prvInitialiseTaskLists+0x64>)
 800b4c6:	f7fe fb4f 	bl	8009b68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4ca:	480d      	ldr	r0, [pc, #52]	; (800b500 <prvInitialiseTaskLists+0x68>)
 800b4cc:	f7fe fb4c 	bl	8009b68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4d0:	480c      	ldr	r0, [pc, #48]	; (800b504 <prvInitialiseTaskLists+0x6c>)
 800b4d2:	f7fe fb49 	bl	8009b68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4d6:	480c      	ldr	r0, [pc, #48]	; (800b508 <prvInitialiseTaskLists+0x70>)
 800b4d8:	f7fe fb46 	bl	8009b68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4dc:	480b      	ldr	r0, [pc, #44]	; (800b50c <prvInitialiseTaskLists+0x74>)
 800b4de:	f7fe fb43 	bl	8009b68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4e2:	4b0b      	ldr	r3, [pc, #44]	; (800b510 <prvInitialiseTaskLists+0x78>)
 800b4e4:	4a05      	ldr	r2, [pc, #20]	; (800b4fc <prvInitialiseTaskLists+0x64>)
 800b4e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4e8:	4b0a      	ldr	r3, [pc, #40]	; (800b514 <prvInitialiseTaskLists+0x7c>)
 800b4ea:	4a05      	ldr	r2, [pc, #20]	; (800b500 <prvInitialiseTaskLists+0x68>)
 800b4ec:	601a      	str	r2, [r3, #0]
}
 800b4ee:	bf00      	nop
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	200063c0 	.word	0x200063c0
 800b4fc:	20006820 	.word	0x20006820
 800b500:	20006834 	.word	0x20006834
 800b504:	20006850 	.word	0x20006850
 800b508:	20006864 	.word	0x20006864
 800b50c:	2000687c 	.word	0x2000687c
 800b510:	20006848 	.word	0x20006848
 800b514:	2000684c 	.word	0x2000684c

0800b518 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b51e:	e019      	b.n	800b554 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b520:	f000 fdd8 	bl	800c0d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b524:	4b10      	ldr	r3, [pc, #64]	; (800b568 <prvCheckTasksWaitingTermination+0x50>)
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3304      	adds	r3, #4
 800b530:	4618      	mov	r0, r3
 800b532:	f7fe fba3 	bl	8009c7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b536:	4b0d      	ldr	r3, [pc, #52]	; (800b56c <prvCheckTasksWaitingTermination+0x54>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	4a0b      	ldr	r2, [pc, #44]	; (800b56c <prvCheckTasksWaitingTermination+0x54>)
 800b53e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b540:	4b0b      	ldr	r3, [pc, #44]	; (800b570 <prvCheckTasksWaitingTermination+0x58>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3b01      	subs	r3, #1
 800b546:	4a0a      	ldr	r2, [pc, #40]	; (800b570 <prvCheckTasksWaitingTermination+0x58>)
 800b548:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b54a:	f000 fdf3 	bl	800c134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f810 	bl	800b574 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b554:	4b06      	ldr	r3, [pc, #24]	; (800b570 <prvCheckTasksWaitingTermination+0x58>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1e1      	bne.n	800b520 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b55c:	bf00      	nop
 800b55e:	bf00      	nop
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	20006864 	.word	0x20006864
 800b56c:	20006890 	.word	0x20006890
 800b570:	20006878 	.word	0x20006878

0800b574 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3354      	adds	r3, #84	; 0x54
 800b580:	4618      	mov	r0, r3
 800b582:	f001 fb05 	bl	800cb90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d108      	bne.n	800b5a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b594:	4618      	mov	r0, r3
 800b596:	f000 ff63 	bl	800c460 <vPortFree>
				vPortFree( pxTCB );
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 ff60 	bl	800c460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5a0:	e018      	b.n	800b5d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d103      	bne.n	800b5b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 ff57 	bl	800c460 <vPortFree>
	}
 800b5b2:	e00f      	b.n	800b5d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d00a      	beq.n	800b5d4 <prvDeleteTCB+0x60>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	60fb      	str	r3, [r7, #12]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <prvDeleteTCB+0x5e>
	}
 800b5d4:	bf00      	nop
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5e2:	4b0c      	ldr	r3, [pc, #48]	; (800b614 <prvResetNextTaskUnblockTime+0x38>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d104      	bne.n	800b5f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b5ec:	4b0a      	ldr	r3, [pc, #40]	; (800b618 <prvResetNextTaskUnblockTime+0x3c>)
 800b5ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b5f4:	e008      	b.n	800b608 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5f6:	4b07      	ldr	r3, [pc, #28]	; (800b614 <prvResetNextTaskUnblockTime+0x38>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	4a04      	ldr	r2, [pc, #16]	; (800b618 <prvResetNextTaskUnblockTime+0x3c>)
 800b606:	6013      	str	r3, [r2, #0]
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr
 800b614:	20006848 	.word	0x20006848
 800b618:	200068b0 	.word	0x200068b0

0800b61c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b622:	4b0b      	ldr	r3, [pc, #44]	; (800b650 <xTaskGetSchedulerState+0x34>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d102      	bne.n	800b630 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b62a:	2301      	movs	r3, #1
 800b62c:	607b      	str	r3, [r7, #4]
 800b62e:	e008      	b.n	800b642 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b630:	4b08      	ldr	r3, [pc, #32]	; (800b654 <xTaskGetSchedulerState+0x38>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d102      	bne.n	800b63e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b638:	2302      	movs	r3, #2
 800b63a:	607b      	str	r3, [r7, #4]
 800b63c:	e001      	b.n	800b642 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b63e:	2300      	movs	r3, #0
 800b640:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b642:	687b      	ldr	r3, [r7, #4]
	}
 800b644:	4618      	mov	r0, r3
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr
 800b650:	2000689c 	.word	0x2000689c
 800b654:	200068b8 	.word	0x200068b8

0800b658 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b664:	2300      	movs	r3, #0
 800b666:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d056      	beq.n	800b71c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b66e:	4b2e      	ldr	r3, [pc, #184]	; (800b728 <xTaskPriorityDisinherit+0xd0>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	693a      	ldr	r2, [r7, #16]
 800b674:	429a      	cmp	r2, r3
 800b676:	d00a      	beq.n	800b68e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67c:	f383 8811 	msr	BASEPRI, r3
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	60fb      	str	r3, [r7, #12]
}
 800b68a:	bf00      	nop
 800b68c:	e7fe      	b.n	800b68c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10a      	bne.n	800b6ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	60bb      	str	r3, [r7, #8]
}
 800b6a8:	bf00      	nop
 800b6aa:	e7fe      	b.n	800b6aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b0:	1e5a      	subs	r2, r3, #1
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d02c      	beq.n	800b71c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d128      	bne.n	800b71c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7fe fad4 	bl	8009c7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ec:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <xTaskPriorityDisinherit+0xd4>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d903      	bls.n	800b6fc <xTaskPriorityDisinherit+0xa4>
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f8:	4a0c      	ldr	r2, [pc, #48]	; (800b72c <xTaskPriorityDisinherit+0xd4>)
 800b6fa:	6013      	str	r3, [r2, #0]
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b700:	4613      	mov	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4413      	add	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4a09      	ldr	r2, [pc, #36]	; (800b730 <xTaskPriorityDisinherit+0xd8>)
 800b70a:	441a      	add	r2, r3
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	3304      	adds	r3, #4
 800b710:	4619      	mov	r1, r3
 800b712:	4610      	mov	r0, r2
 800b714:	f7fe fa55 	bl	8009bc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b718:	2301      	movs	r3, #1
 800b71a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b71c:	697b      	ldr	r3, [r7, #20]
	}
 800b71e:	4618      	mov	r0, r3
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	200063bc 	.word	0x200063bc
 800b72c:	20006898 	.word	0x20006898
 800b730:	200063c0 	.word	0x200063c0

0800b734 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b73e:	4b21      	ldr	r3, [pc, #132]	; (800b7c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b744:	4b20      	ldr	r3, [pc, #128]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3304      	adds	r3, #4
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe fa96 	bl	8009c7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b756:	d10a      	bne.n	800b76e <prvAddCurrentTaskToDelayedList+0x3a>
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d007      	beq.n	800b76e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b75e:	4b1a      	ldr	r3, [pc, #104]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3304      	adds	r3, #4
 800b764:	4619      	mov	r1, r3
 800b766:	4819      	ldr	r0, [pc, #100]	; (800b7cc <prvAddCurrentTaskToDelayedList+0x98>)
 800b768:	f7fe fa2b 	bl	8009bc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b76c:	e026      	b.n	800b7bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4413      	add	r3, r2
 800b774:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b776:	4b14      	ldr	r3, [pc, #80]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	429a      	cmp	r2, r3
 800b784:	d209      	bcs.n	800b79a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b786:	4b12      	ldr	r3, [pc, #72]	; (800b7d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	4b0f      	ldr	r3, [pc, #60]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	3304      	adds	r3, #4
 800b790:	4619      	mov	r1, r3
 800b792:	4610      	mov	r0, r2
 800b794:	f7fe fa39 	bl	8009c0a <vListInsert>
}
 800b798:	e010      	b.n	800b7bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b79a:	4b0e      	ldr	r3, [pc, #56]	; (800b7d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	f7fe fa2f 	bl	8009c0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7ac:	4b0a      	ldr	r3, [pc, #40]	; (800b7d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d202      	bcs.n	800b7bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b7b6:	4a08      	ldr	r2, [pc, #32]	; (800b7d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	6013      	str	r3, [r2, #0]
}
 800b7bc:	bf00      	nop
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	20006894 	.word	0x20006894
 800b7c8:	200063bc 	.word	0x200063bc
 800b7cc:	2000687c 	.word	0x2000687c
 800b7d0:	2000684c 	.word	0x2000684c
 800b7d4:	20006848 	.word	0x20006848
 800b7d8:	200068b0 	.word	0x200068b0

0800b7dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08a      	sub	sp, #40	; 0x28
 800b7e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b7e6:	f000 fb07 	bl	800bdf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b7ea:	4b1c      	ldr	r3, [pc, #112]	; (800b85c <xTimerCreateTimerTask+0x80>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d021      	beq.n	800b836 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b7fa:	1d3a      	adds	r2, r7, #4
 800b7fc:	f107 0108 	add.w	r1, r7, #8
 800b800:	f107 030c 	add.w	r3, r7, #12
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe f995 	bl	8009b34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	9202      	str	r2, [sp, #8]
 800b812:	9301      	str	r3, [sp, #4]
 800b814:	2302      	movs	r3, #2
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	2300      	movs	r3, #0
 800b81a:	460a      	mov	r2, r1
 800b81c:	4910      	ldr	r1, [pc, #64]	; (800b860 <xTimerCreateTimerTask+0x84>)
 800b81e:	4811      	ldr	r0, [pc, #68]	; (800b864 <xTimerCreateTimerTask+0x88>)
 800b820:	f7ff f8b4 	bl	800a98c <xTaskCreateStatic>
 800b824:	4603      	mov	r3, r0
 800b826:	4a10      	ldr	r2, [pc, #64]	; (800b868 <xTimerCreateTimerTask+0x8c>)
 800b828:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b82a:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <xTimerCreateTimerTask+0x8c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d001      	beq.n	800b836 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b832:	2301      	movs	r3, #1
 800b834:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10a      	bne.n	800b852 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	613b      	str	r3, [r7, #16]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b852:	697b      	ldr	r3, [r7, #20]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3718      	adds	r7, #24
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	200068ec 	.word	0x200068ec
 800b860:	0800dd18 	.word	0x0800dd18
 800b864:	0800b9a1 	.word	0x0800b9a1
 800b868:	200068f0 	.word	0x200068f0

0800b86c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b08a      	sub	sp, #40	; 0x28
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10a      	bne.n	800b89a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b888:	f383 8811 	msr	BASEPRI, r3
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	623b      	str	r3, [r7, #32]
}
 800b896:	bf00      	nop
 800b898:	e7fe      	b.n	800b898 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b89a:	4b1a      	ldr	r3, [pc, #104]	; (800b904 <xTimerGenericCommand+0x98>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d02a      	beq.n	800b8f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2b05      	cmp	r3, #5
 800b8b2:	dc18      	bgt.n	800b8e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b8b4:	f7ff feb2 	bl	800b61c <xTaskGetSchedulerState>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d109      	bne.n	800b8d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b8be:	4b11      	ldr	r3, [pc, #68]	; (800b904 <xTimerGenericCommand+0x98>)
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	f107 0110 	add.w	r1, r7, #16
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ca:	f7fe fba9 	bl	800a020 <xQueueGenericSend>
 800b8ce:	6278      	str	r0, [r7, #36]	; 0x24
 800b8d0:	e012      	b.n	800b8f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	; (800b904 <xTimerGenericCommand+0x98>)
 800b8d4:	6818      	ldr	r0, [r3, #0]
 800b8d6:	f107 0110 	add.w	r1, r7, #16
 800b8da:	2300      	movs	r3, #0
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f7fe fb9f 	bl	800a020 <xQueueGenericSend>
 800b8e2:	6278      	str	r0, [r7, #36]	; 0x24
 800b8e4:	e008      	b.n	800b8f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b8e6:	4b07      	ldr	r3, [pc, #28]	; (800b904 <xTimerGenericCommand+0x98>)
 800b8e8:	6818      	ldr	r0, [r3, #0]
 800b8ea:	f107 0110 	add.w	r1, r7, #16
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	f7fe fc93 	bl	800a21c <xQueueGenericSendFromISR>
 800b8f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3728      	adds	r7, #40	; 0x28
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	200068ec 	.word	0x200068ec

0800b908 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b088      	sub	sp, #32
 800b90c:	af02      	add	r7, sp, #8
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b912:	4b22      	ldr	r3, [pc, #136]	; (800b99c <prvProcessExpiredTimer+0x94>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	3304      	adds	r3, #4
 800b920:	4618      	mov	r0, r3
 800b922:	f7fe f9ab 	bl	8009c7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b92c:	f003 0304 	and.w	r3, r3, #4
 800b930:	2b00      	cmp	r3, #0
 800b932:	d022      	beq.n	800b97a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	699a      	ldr	r2, [r3, #24]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	18d1      	adds	r1, r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	6978      	ldr	r0, [r7, #20]
 800b942:	f000 f8d1 	bl	800bae8 <prvInsertTimerInActiveList>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d01f      	beq.n	800b98c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b94c:	2300      	movs	r3, #0
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	2300      	movs	r3, #0
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	2100      	movs	r1, #0
 800b956:	6978      	ldr	r0, [r7, #20]
 800b958:	f7ff ff88 	bl	800b86c <xTimerGenericCommand>
 800b95c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d113      	bne.n	800b98c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	60fb      	str	r3, [r7, #12]
}
 800b976:	bf00      	nop
 800b978:	e7fe      	b.n	800b978 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b980:	f023 0301 	bic.w	r3, r3, #1
 800b984:	b2da      	uxtb	r2, r3
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	6a1b      	ldr	r3, [r3, #32]
 800b990:	6978      	ldr	r0, [r7, #20]
 800b992:	4798      	blx	r3
}
 800b994:	bf00      	nop
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	200068e4 	.word	0x200068e4

0800b9a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9a8:	f107 0308 	add.w	r3, r7, #8
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f000 f857 	bl	800ba60 <prvGetNextExpireTime>
 800b9b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f000 f803 	bl	800b9c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b9be:	f000 f8d5 	bl	800bb6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9c2:	e7f1      	b.n	800b9a8 <prvTimerTask+0x8>

0800b9c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b9ce:	f7ff fa39 	bl	800ae44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9d2:	f107 0308 	add.w	r3, r7, #8
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 f866 	bl	800baa8 <prvSampleTimeNow>
 800b9dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d130      	bne.n	800ba46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10a      	bne.n	800ba00 <prvProcessTimerOrBlockTask+0x3c>
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d806      	bhi.n	800ba00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b9f2:	f7ff fa35 	bl	800ae60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b9f6:	68f9      	ldr	r1, [r7, #12]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f7ff ff85 	bl	800b908 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b9fe:	e024      	b.n	800ba4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d008      	beq.n	800ba18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba06:	4b13      	ldr	r3, [pc, #76]	; (800ba54 <prvProcessTimerOrBlockTask+0x90>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <prvProcessTimerOrBlockTask+0x50>
 800ba10:	2301      	movs	r3, #1
 800ba12:	e000      	b.n	800ba16 <prvProcessTimerOrBlockTask+0x52>
 800ba14:	2300      	movs	r3, #0
 800ba16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba18:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <prvProcessTimerOrBlockTask+0x94>)
 800ba1a:	6818      	ldr	r0, [r3, #0]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	4619      	mov	r1, r3
 800ba26:	f7fe ff7d 	bl	800a924 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba2a:	f7ff fa19 	bl	800ae60 <xTaskResumeAll>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10a      	bne.n	800ba4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba34:	4b09      	ldr	r3, [pc, #36]	; (800ba5c <prvProcessTimerOrBlockTask+0x98>)
 800ba36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	f3bf 8f6f 	isb	sy
}
 800ba44:	e001      	b.n	800ba4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba46:	f7ff fa0b 	bl	800ae60 <xTaskResumeAll>
}
 800ba4a:	bf00      	nop
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	200068e8 	.word	0x200068e8
 800ba58:	200068ec 	.word	0x200068ec
 800ba5c:	e000ed04 	.word	0xe000ed04

0800ba60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ba68:	4b0e      	ldr	r3, [pc, #56]	; (800baa4 <prvGetNextExpireTime+0x44>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <prvGetNextExpireTime+0x16>
 800ba72:	2201      	movs	r2, #1
 800ba74:	e000      	b.n	800ba78 <prvGetNextExpireTime+0x18>
 800ba76:	2200      	movs	r2, #0
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d105      	bne.n	800ba90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba84:	4b07      	ldr	r3, [pc, #28]	; (800baa4 <prvGetNextExpireTime+0x44>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	60fb      	str	r3, [r7, #12]
 800ba8e:	e001      	b.n	800ba94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba94:	68fb      	ldr	r3, [r7, #12]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	200068e4 	.word	0x200068e4

0800baa8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bab0:	f7ff fa74 	bl	800af9c <xTaskGetTickCount>
 800bab4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bab6:	4b0b      	ldr	r3, [pc, #44]	; (800bae4 <prvSampleTimeNow+0x3c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	429a      	cmp	r2, r3
 800babe:	d205      	bcs.n	800bacc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bac0:	f000 f936 	bl	800bd30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	601a      	str	r2, [r3, #0]
 800baca:	e002      	b.n	800bad2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bad2:	4a04      	ldr	r2, [pc, #16]	; (800bae4 <prvSampleTimeNow+0x3c>)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bad8:	68fb      	ldr	r3, [r7, #12]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	200068f4 	.word	0x200068f4

0800bae8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800baf6:	2300      	movs	r3, #0
 800baf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d812      	bhi.n	800bb34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	1ad2      	subs	r2, r2, r3
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d302      	bcc.n	800bb22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	617b      	str	r3, [r7, #20]
 800bb20:	e01b      	b.n	800bb5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb22:	4b10      	ldr	r3, [pc, #64]	; (800bb64 <prvInsertTimerInActiveList+0x7c>)
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3304      	adds	r3, #4
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	f7fe f86c 	bl	8009c0a <vListInsert>
 800bb32:	e012      	b.n	800bb5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d206      	bcs.n	800bb4a <prvInsertTimerInActiveList+0x62>
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d302      	bcc.n	800bb4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb44:	2301      	movs	r3, #1
 800bb46:	617b      	str	r3, [r7, #20]
 800bb48:	e007      	b.n	800bb5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb4a:	4b07      	ldr	r3, [pc, #28]	; (800bb68 <prvInsertTimerInActiveList+0x80>)
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3304      	adds	r3, #4
 800bb52:	4619      	mov	r1, r3
 800bb54:	4610      	mov	r0, r2
 800bb56:	f7fe f858 	bl	8009c0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb5a:	697b      	ldr	r3, [r7, #20]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	200068e8 	.word	0x200068e8
 800bb68:	200068e4 	.word	0x200068e4

0800bb6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b08e      	sub	sp, #56	; 0x38
 800bb70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb72:	e0ca      	b.n	800bd0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	da18      	bge.n	800bbac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb7a:	1d3b      	adds	r3, r7, #4
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d10a      	bne.n	800bb9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8a:	f383 8811 	msr	BASEPRI, r3
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f3bf 8f4f 	dsb	sy
 800bb96:	61fb      	str	r3, [r7, #28]
}
 800bb98:	bf00      	nop
 800bb9a:	e7fe      	b.n	800bb9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bba2:	6850      	ldr	r0, [r2, #4]
 800bba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bba6:	6892      	ldr	r2, [r2, #8]
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f2c0 80aa 	blt.w	800bd08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d004      	beq.n	800bbca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc2:	3304      	adds	r3, #4
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7fe f859 	bl	8009c7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbca:	463b      	mov	r3, r7
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7ff ff6b 	bl	800baa8 <prvSampleTimeNow>
 800bbd2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b09      	cmp	r3, #9
 800bbd8:	f200 8097 	bhi.w	800bd0a <prvProcessReceivedCommands+0x19e>
 800bbdc:	a201      	add	r2, pc, #4	; (adr r2, 800bbe4 <prvProcessReceivedCommands+0x78>)
 800bbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe2:	bf00      	nop
 800bbe4:	0800bc0d 	.word	0x0800bc0d
 800bbe8:	0800bc0d 	.word	0x0800bc0d
 800bbec:	0800bc0d 	.word	0x0800bc0d
 800bbf0:	0800bc81 	.word	0x0800bc81
 800bbf4:	0800bc95 	.word	0x0800bc95
 800bbf8:	0800bcdf 	.word	0x0800bcdf
 800bbfc:	0800bc0d 	.word	0x0800bc0d
 800bc00:	0800bc0d 	.word	0x0800bc0d
 800bc04:	0800bc81 	.word	0x0800bc81
 800bc08:	0800bc95 	.word	0x0800bc95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc12:	f043 0301 	orr.w	r3, r3, #1
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	699b      	ldr	r3, [r3, #24]
 800bc24:	18d1      	adds	r1, r2, r3
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc2c:	f7ff ff5c 	bl	800bae8 <prvInsertTimerInActiveList>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d069      	beq.n	800bd0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc44:	f003 0304 	and.w	r3, r3, #4
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d05e      	beq.n	800bd0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	441a      	add	r2, r3
 800bc54:	2300      	movs	r3, #0
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	2300      	movs	r3, #0
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc5e:	f7ff fe05 	bl	800b86c <xTimerGenericCommand>
 800bc62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d14f      	bne.n	800bd0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	61bb      	str	r3, [r7, #24]
}
 800bc7c:	bf00      	nop
 800bc7e:	e7fe      	b.n	800bc7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc86:	f023 0301 	bic.w	r3, r3, #1
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bc92:	e03a      	b.n	800bd0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc9a:	f043 0301 	orr.w	r3, r3, #1
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10a      	bne.n	800bcca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	617b      	str	r3, [r7, #20]
}
 800bcc6:	bf00      	nop
 800bcc8:	e7fe      	b.n	800bcc8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bccc:	699a      	ldr	r2, [r3, #24]
 800bcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd0:	18d1      	adds	r1, r2, r3
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcd8:	f7ff ff06 	bl	800bae8 <prvInsertTimerInActiveList>
					break;
 800bcdc:	e015      	b.n	800bd0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bce4:	f003 0302 	and.w	r3, r3, #2
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d103      	bne.n	800bcf4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bcec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcee:	f000 fbb7 	bl	800c460 <vPortFree>
 800bcf2:	e00a      	b.n	800bd0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcfa:	f023 0301 	bic.w	r3, r3, #1
 800bcfe:	b2da      	uxtb	r2, r3
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd06:	e000      	b.n	800bd0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bd08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd0a:	4b08      	ldr	r3, [pc, #32]	; (800bd2c <prvProcessReceivedCommands+0x1c0>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	1d39      	adds	r1, r7, #4
 800bd10:	2200      	movs	r2, #0
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fe fb1e 	bl	800a354 <xQueueReceive>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f47f af2a 	bne.w	800bb74 <prvProcessReceivedCommands+0x8>
	}
}
 800bd20:	bf00      	nop
 800bd22:	bf00      	nop
 800bd24:	3730      	adds	r7, #48	; 0x30
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	200068ec 	.word	0x200068ec

0800bd30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b088      	sub	sp, #32
 800bd34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd36:	e048      	b.n	800bdca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd38:	4b2d      	ldr	r3, [pc, #180]	; (800bdf0 <prvSwitchTimerLists+0xc0>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd42:	4b2b      	ldr	r3, [pc, #172]	; (800bdf0 <prvSwitchTimerLists+0xc0>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3304      	adds	r3, #4
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fd ff93 	bl	8009c7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6a1b      	ldr	r3, [r3, #32]
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd64:	f003 0304 	and.w	r3, r3, #4
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d02e      	beq.n	800bdca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	693a      	ldr	r2, [r7, #16]
 800bd72:	4413      	add	r3, r2
 800bd74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d90e      	bls.n	800bd9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd8a:	4b19      	ldr	r3, [pc, #100]	; (800bdf0 <prvSwitchTimerLists+0xc0>)
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	3304      	adds	r3, #4
 800bd92:	4619      	mov	r1, r3
 800bd94:	4610      	mov	r0, r2
 800bd96:	f7fd ff38 	bl	8009c0a <vListInsert>
 800bd9a:	e016      	b.n	800bdca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	2300      	movs	r3, #0
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	2100      	movs	r1, #0
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f7ff fd60 	bl	800b86c <xTimerGenericCommand>
 800bdac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10a      	bne.n	800bdca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	603b      	str	r3, [r7, #0]
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdca:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <prvSwitchTimerLists+0xc0>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1b1      	bne.n	800bd38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bdd4:	4b06      	ldr	r3, [pc, #24]	; (800bdf0 <prvSwitchTimerLists+0xc0>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bdda:	4b06      	ldr	r3, [pc, #24]	; (800bdf4 <prvSwitchTimerLists+0xc4>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a04      	ldr	r2, [pc, #16]	; (800bdf0 <prvSwitchTimerLists+0xc0>)
 800bde0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bde2:	4a04      	ldr	r2, [pc, #16]	; (800bdf4 <prvSwitchTimerLists+0xc4>)
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	6013      	str	r3, [r2, #0]
}
 800bde8:	bf00      	nop
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	200068e4 	.word	0x200068e4
 800bdf4:	200068e8 	.word	0x200068e8

0800bdf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bdfe:	f000 f969 	bl	800c0d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be02:	4b15      	ldr	r3, [pc, #84]	; (800be58 <prvCheckForValidListAndQueue+0x60>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d120      	bne.n	800be4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be0a:	4814      	ldr	r0, [pc, #80]	; (800be5c <prvCheckForValidListAndQueue+0x64>)
 800be0c:	f7fd feac 	bl	8009b68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be10:	4813      	ldr	r0, [pc, #76]	; (800be60 <prvCheckForValidListAndQueue+0x68>)
 800be12:	f7fd fea9 	bl	8009b68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be16:	4b13      	ldr	r3, [pc, #76]	; (800be64 <prvCheckForValidListAndQueue+0x6c>)
 800be18:	4a10      	ldr	r2, [pc, #64]	; (800be5c <prvCheckForValidListAndQueue+0x64>)
 800be1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be1c:	4b12      	ldr	r3, [pc, #72]	; (800be68 <prvCheckForValidListAndQueue+0x70>)
 800be1e:	4a10      	ldr	r2, [pc, #64]	; (800be60 <prvCheckForValidListAndQueue+0x68>)
 800be20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be22:	2300      	movs	r3, #0
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	4b11      	ldr	r3, [pc, #68]	; (800be6c <prvCheckForValidListAndQueue+0x74>)
 800be28:	4a11      	ldr	r2, [pc, #68]	; (800be70 <prvCheckForValidListAndQueue+0x78>)
 800be2a:	2110      	movs	r1, #16
 800be2c:	200a      	movs	r0, #10
 800be2e:	f7fd ffb7 	bl	8009da0 <xQueueGenericCreateStatic>
 800be32:	4603      	mov	r3, r0
 800be34:	4a08      	ldr	r2, [pc, #32]	; (800be58 <prvCheckForValidListAndQueue+0x60>)
 800be36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be38:	4b07      	ldr	r3, [pc, #28]	; (800be58 <prvCheckForValidListAndQueue+0x60>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d005      	beq.n	800be4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be40:	4b05      	ldr	r3, [pc, #20]	; (800be58 <prvCheckForValidListAndQueue+0x60>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	490b      	ldr	r1, [pc, #44]	; (800be74 <prvCheckForValidListAndQueue+0x7c>)
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe fd18 	bl	800a87c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be4c:	f000 f972 	bl	800c134 <vPortExitCritical>
}
 800be50:	bf00      	nop
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	200068ec 	.word	0x200068ec
 800be5c:	200068bc 	.word	0x200068bc
 800be60:	200068d0 	.word	0x200068d0
 800be64:	200068e4 	.word	0x200068e4
 800be68:	200068e8 	.word	0x200068e8
 800be6c:	20006998 	.word	0x20006998
 800be70:	200068f8 	.word	0x200068f8
 800be74:	0800dd20 	.word	0x0800dd20

0800be78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	3b04      	subs	r3, #4
 800be88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	3b04      	subs	r3, #4
 800be96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	f023 0201 	bic.w	r2, r3, #1
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3b04      	subs	r3, #4
 800bea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bea8:	4a0c      	ldr	r2, [pc, #48]	; (800bedc <pxPortInitialiseStack+0x64>)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	3b14      	subs	r3, #20
 800beb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3b04      	subs	r3, #4
 800bebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f06f 0202 	mvn.w	r2, #2
 800bec6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	3b20      	subs	r3, #32
 800becc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bece:	68fb      	ldr	r3, [r7, #12]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr
 800bedc:	0800bee1 	.word	0x0800bee1

0800bee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800beea:	4b12      	ldr	r3, [pc, #72]	; (800bf34 <prvTaskExitError+0x54>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bef2:	d00a      	beq.n	800bf0a <prvTaskExitError+0x2a>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	60fb      	str	r3, [r7, #12]
}
 800bf06:	bf00      	nop
 800bf08:	e7fe      	b.n	800bf08 <prvTaskExitError+0x28>
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	60bb      	str	r3, [r7, #8]
}
 800bf1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf1e:	bf00      	nop
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0fc      	beq.n	800bf20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf26:	bf00      	nop
 800bf28:	bf00      	nop
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr
 800bf34:	200000b8 	.word	0x200000b8
	...

0800bf40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf40:	4b07      	ldr	r3, [pc, #28]	; (800bf60 <pxCurrentTCBConst2>)
 800bf42:	6819      	ldr	r1, [r3, #0]
 800bf44:	6808      	ldr	r0, [r1, #0]
 800bf46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4a:	f380 8809 	msr	PSP, r0
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f04f 0000 	mov.w	r0, #0
 800bf56:	f380 8811 	msr	BASEPRI, r0
 800bf5a:	4770      	bx	lr
 800bf5c:	f3af 8000 	nop.w

0800bf60 <pxCurrentTCBConst2>:
 800bf60:	200063bc 	.word	0x200063bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf64:	bf00      	nop
 800bf66:	bf00      	nop

0800bf68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf68:	4808      	ldr	r0, [pc, #32]	; (800bf8c <prvPortStartFirstTask+0x24>)
 800bf6a:	6800      	ldr	r0, [r0, #0]
 800bf6c:	6800      	ldr	r0, [r0, #0]
 800bf6e:	f380 8808 	msr	MSP, r0
 800bf72:	f04f 0000 	mov.w	r0, #0
 800bf76:	f380 8814 	msr	CONTROL, r0
 800bf7a:	b662      	cpsie	i
 800bf7c:	b661      	cpsie	f
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	df00      	svc	0
 800bf88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf8a:	bf00      	nop
 800bf8c:	e000ed08 	.word	0xe000ed08

0800bf90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf96:	4b46      	ldr	r3, [pc, #280]	; (800c0b0 <xPortStartScheduler+0x120>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a46      	ldr	r2, [pc, #280]	; (800c0b4 <xPortStartScheduler+0x124>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d10a      	bne.n	800bfb6 <xPortStartScheduler+0x26>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	613b      	str	r3, [r7, #16]
}
 800bfb2:	bf00      	nop
 800bfb4:	e7fe      	b.n	800bfb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bfb6:	4b3e      	ldr	r3, [pc, #248]	; (800c0b0 <xPortStartScheduler+0x120>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a3f      	ldr	r2, [pc, #252]	; (800c0b8 <xPortStartScheduler+0x128>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d10a      	bne.n	800bfd6 <xPortStartScheduler+0x46>
	__asm volatile
 800bfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	60fb      	str	r3, [r7, #12]
}
 800bfd2:	bf00      	nop
 800bfd4:	e7fe      	b.n	800bfd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfd6:	4b39      	ldr	r3, [pc, #228]	; (800c0bc <xPortStartScheduler+0x12c>)
 800bfd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	22ff      	movs	r2, #255	; 0xff
 800bfe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bff0:	78fb      	ldrb	r3, [r7, #3]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	4b31      	ldr	r3, [pc, #196]	; (800c0c0 <xPortStartScheduler+0x130>)
 800bffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bffe:	4b31      	ldr	r3, [pc, #196]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c000:	2207      	movs	r2, #7
 800c002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c004:	e009      	b.n	800c01a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c006:	4b2f      	ldr	r3, [pc, #188]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	3b01      	subs	r3, #1
 800c00c:	4a2d      	ldr	r2, [pc, #180]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c00e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c010:	78fb      	ldrb	r3, [r7, #3]
 800c012:	b2db      	uxtb	r3, r3
 800c014:	005b      	lsls	r3, r3, #1
 800c016:	b2db      	uxtb	r3, r3
 800c018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c01a:	78fb      	ldrb	r3, [r7, #3]
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c022:	2b80      	cmp	r3, #128	; 0x80
 800c024:	d0ef      	beq.n	800c006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c026:	4b27      	ldr	r3, [pc, #156]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f1c3 0307 	rsb	r3, r3, #7
 800c02e:	2b04      	cmp	r3, #4
 800c030:	d00a      	beq.n	800c048 <xPortStartScheduler+0xb8>
	__asm volatile
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	f383 8811 	msr	BASEPRI, r3
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	60bb      	str	r3, [r7, #8]
}
 800c044:	bf00      	nop
 800c046:	e7fe      	b.n	800c046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c048:	4b1e      	ldr	r3, [pc, #120]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	021b      	lsls	r3, r3, #8
 800c04e:	4a1d      	ldr	r2, [pc, #116]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c052:	4b1c      	ldr	r3, [pc, #112]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c05a:	4a1a      	ldr	r2, [pc, #104]	; (800c0c4 <xPortStartScheduler+0x134>)
 800c05c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	b2da      	uxtb	r2, r3
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c066:	4b18      	ldr	r3, [pc, #96]	; (800c0c8 <xPortStartScheduler+0x138>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a17      	ldr	r2, [pc, #92]	; (800c0c8 <xPortStartScheduler+0x138>)
 800c06c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c072:	4b15      	ldr	r3, [pc, #84]	; (800c0c8 <xPortStartScheduler+0x138>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a14      	ldr	r2, [pc, #80]	; (800c0c8 <xPortStartScheduler+0x138>)
 800c078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c07c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c07e:	f000 f8dd 	bl	800c23c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c082:	4b12      	ldr	r3, [pc, #72]	; (800c0cc <xPortStartScheduler+0x13c>)
 800c084:	2200      	movs	r2, #0
 800c086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c088:	f000 f8fc 	bl	800c284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c08c:	4b10      	ldr	r3, [pc, #64]	; (800c0d0 <xPortStartScheduler+0x140>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a0f      	ldr	r2, [pc, #60]	; (800c0d0 <xPortStartScheduler+0x140>)
 800c092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c098:	f7ff ff66 	bl	800bf68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c09c:	f7ff f848 	bl	800b130 <vTaskSwitchContext>
	prvTaskExitError();
 800c0a0:	f7ff ff1e 	bl	800bee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3718      	adds	r7, #24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	e000ed00 	.word	0xe000ed00
 800c0b4:	410fc271 	.word	0x410fc271
 800c0b8:	410fc270 	.word	0x410fc270
 800c0bc:	e000e400 	.word	0xe000e400
 800c0c0:	200069e8 	.word	0x200069e8
 800c0c4:	200069ec 	.word	0x200069ec
 800c0c8:	e000ed20 	.word	0xe000ed20
 800c0cc:	200000b8 	.word	0x200000b8
 800c0d0:	e000ef34 	.word	0xe000ef34

0800c0d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	607b      	str	r3, [r7, #4]
}
 800c0ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0ee:	4b0f      	ldr	r3, [pc, #60]	; (800c12c <vPortEnterCritical+0x58>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	4a0d      	ldr	r2, [pc, #52]	; (800c12c <vPortEnterCritical+0x58>)
 800c0f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0f8:	4b0c      	ldr	r3, [pc, #48]	; (800c12c <vPortEnterCritical+0x58>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d10f      	bne.n	800c120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c100:	4b0b      	ldr	r3, [pc, #44]	; (800c130 <vPortEnterCritical+0x5c>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00a      	beq.n	800c120 <vPortEnterCritical+0x4c>
	__asm volatile
 800c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	603b      	str	r3, [r7, #0]
}
 800c11c:	bf00      	nop
 800c11e:	e7fe      	b.n	800c11e <vPortEnterCritical+0x4a>
	}
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	200000b8 	.word	0x200000b8
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c13a:	4b12      	ldr	r3, [pc, #72]	; (800c184 <vPortExitCritical+0x50>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d10a      	bne.n	800c158 <vPortExitCritical+0x24>
	__asm volatile
 800c142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	607b      	str	r3, [r7, #4]
}
 800c154:	bf00      	nop
 800c156:	e7fe      	b.n	800c156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c158:	4b0a      	ldr	r3, [pc, #40]	; (800c184 <vPortExitCritical+0x50>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	4a09      	ldr	r2, [pc, #36]	; (800c184 <vPortExitCritical+0x50>)
 800c160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c162:	4b08      	ldr	r3, [pc, #32]	; (800c184 <vPortExitCritical+0x50>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d105      	bne.n	800c176 <vPortExitCritical+0x42>
 800c16a:	2300      	movs	r3, #0
 800c16c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	f383 8811 	msr	BASEPRI, r3
}
 800c174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c176:	bf00      	nop
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	200000b8 	.word	0x200000b8
	...

0800c190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c190:	f3ef 8009 	mrs	r0, PSP
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	4b15      	ldr	r3, [pc, #84]	; (800c1f0 <pxCurrentTCBConst>)
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	f01e 0f10 	tst.w	lr, #16
 800c1a0:	bf08      	it	eq
 800c1a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c1a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1aa:	6010      	str	r0, [r2, #0]
 800c1ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c1b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c1b4:	f380 8811 	msr	BASEPRI, r0
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f7fe ffb6 	bl	800b130 <vTaskSwitchContext>
 800c1c4:	f04f 0000 	mov.w	r0, #0
 800c1c8:	f380 8811 	msr	BASEPRI, r0
 800c1cc:	bc09      	pop	{r0, r3}
 800c1ce:	6819      	ldr	r1, [r3, #0]
 800c1d0:	6808      	ldr	r0, [r1, #0]
 800c1d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d6:	f01e 0f10 	tst.w	lr, #16
 800c1da:	bf08      	it	eq
 800c1dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1e0:	f380 8809 	msr	PSP, r0
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	f3af 8000 	nop.w

0800c1f0 <pxCurrentTCBConst>:
 800c1f0:	200063bc 	.word	0x200063bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1f4:	bf00      	nop
 800c1f6:	bf00      	nop

0800c1f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	607b      	str	r3, [r7, #4]
}
 800c210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c212:	f7fe fed3 	bl	800afbc <xTaskIncrementTick>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d003      	beq.n	800c224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c21c:	4b06      	ldr	r3, [pc, #24]	; (800c238 <xPortSysTickHandler+0x40>)
 800c21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	2300      	movs	r3, #0
 800c226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	f383 8811 	msr	BASEPRI, r3
}
 800c22e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	e000ed04 	.word	0xe000ed04

0800c23c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c23c:	b480      	push	{r7}
 800c23e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c240:	4b0b      	ldr	r3, [pc, #44]	; (800c270 <vPortSetupTimerInterrupt+0x34>)
 800c242:	2200      	movs	r2, #0
 800c244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c246:	4b0b      	ldr	r3, [pc, #44]	; (800c274 <vPortSetupTimerInterrupt+0x38>)
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c24c:	4b0a      	ldr	r3, [pc, #40]	; (800c278 <vPortSetupTimerInterrupt+0x3c>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a0a      	ldr	r2, [pc, #40]	; (800c27c <vPortSetupTimerInterrupt+0x40>)
 800c252:	fba2 2303 	umull	r2, r3, r2, r3
 800c256:	099b      	lsrs	r3, r3, #6
 800c258:	4a09      	ldr	r2, [pc, #36]	; (800c280 <vPortSetupTimerInterrupt+0x44>)
 800c25a:	3b01      	subs	r3, #1
 800c25c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c25e:	4b04      	ldr	r3, [pc, #16]	; (800c270 <vPortSetupTimerInterrupt+0x34>)
 800c260:	2207      	movs	r2, #7
 800c262:	601a      	str	r2, [r3, #0]
}
 800c264:	bf00      	nop
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	e000e010 	.word	0xe000e010
 800c274:	e000e018 	.word	0xe000e018
 800c278:	2000009c 	.word	0x2000009c
 800c27c:	10624dd3 	.word	0x10624dd3
 800c280:	e000e014 	.word	0xe000e014

0800c284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c294 <vPortEnableVFP+0x10>
 800c288:	6801      	ldr	r1, [r0, #0]
 800c28a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c28e:	6001      	str	r1, [r0, #0]
 800c290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c292:	bf00      	nop
 800c294:	e000ed88 	.word	0xe000ed88

0800c298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c298:	b480      	push	{r7}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c29e:	f3ef 8305 	mrs	r3, IPSR
 800c2a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2b0f      	cmp	r3, #15
 800c2a8:	d914      	bls.n	800c2d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2aa:	4a17      	ldr	r2, [pc, #92]	; (800c308 <vPortValidateInterruptPriority+0x70>)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2b4:	4b15      	ldr	r3, [pc, #84]	; (800c30c <vPortValidateInterruptPriority+0x74>)
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	7afa      	ldrb	r2, [r7, #11]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d20a      	bcs.n	800c2d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	607b      	str	r3, [r7, #4]
}
 800c2d0:	bf00      	nop
 800c2d2:	e7fe      	b.n	800c2d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2d4:	4b0e      	ldr	r3, [pc, #56]	; (800c310 <vPortValidateInterruptPriority+0x78>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c2dc:	4b0d      	ldr	r3, [pc, #52]	; (800c314 <vPortValidateInterruptPriority+0x7c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d90a      	bls.n	800c2fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e8:	f383 8811 	msr	BASEPRI, r3
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	603b      	str	r3, [r7, #0]
}
 800c2f6:	bf00      	nop
 800c2f8:	e7fe      	b.n	800c2f8 <vPortValidateInterruptPriority+0x60>
	}
 800c2fa:	bf00      	nop
 800c2fc:	3714      	adds	r7, #20
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	e000e3f0 	.word	0xe000e3f0
 800c30c:	200069e8 	.word	0x200069e8
 800c310:	e000ed0c 	.word	0xe000ed0c
 800c314:	200069ec 	.word	0x200069ec

0800c318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b088      	sub	sp, #32
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c320:	2300      	movs	r3, #0
 800c322:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800c324:	4b48      	ldr	r3, [pc, #288]	; (800c448 <pvPortMalloc+0x130>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10a      	bne.n	800c342 <pvPortMalloc+0x2a>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	60fb      	str	r3, [r7, #12]
}
 800c33e:	bf00      	nop
 800c340:	e7fe      	b.n	800c340 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800c342:	f7fe fd7f 	bl	800ae44 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c346:	4b41      	ldr	r3, [pc, #260]	; (800c44c <pvPortMalloc+0x134>)
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4013      	ands	r3, r2
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d172      	bne.n	800c438 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00d      	beq.n	800c374 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800c358:	2208      	movs	r2, #8
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4413      	add	r3, r2
 800c35e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f003 0307 	and.w	r3, r3, #7
 800c366:	2b00      	cmp	r3, #0
 800c368:	d004      	beq.n	800c374 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f023 0307 	bic.w	r3, r3, #7
 800c370:	3308      	adds	r3, #8
 800c372:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d05e      	beq.n	800c438 <pvPortMalloc+0x120>
 800c37a:	4b35      	ldr	r3, [pc, #212]	; (800c450 <pvPortMalloc+0x138>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	429a      	cmp	r2, r3
 800c382:	d859      	bhi.n	800c438 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c384:	4b33      	ldr	r3, [pc, #204]	; (800c454 <pvPortMalloc+0x13c>)
 800c386:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800c388:	4b32      	ldr	r3, [pc, #200]	; (800c454 <pvPortMalloc+0x13c>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c38e:	e004      	b.n	800c39a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d903      	bls.n	800c3ac <pvPortMalloc+0x94>
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d1f1      	bne.n	800c390 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3ac:	4b26      	ldr	r3, [pc, #152]	; (800c448 <pvPortMalloc+0x130>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	69fa      	ldr	r2, [r7, #28]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d040      	beq.n	800c438 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2208      	movs	r2, #8
 800c3bc:	4413      	add	r3, r2
 800c3be:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	1ad2      	subs	r2, r2, r3
 800c3d0:	2308      	movs	r3, #8
 800c3d2:	005b      	lsls	r3, r3, #1
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d90f      	bls.n	800c3f8 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3d8:	69fa      	ldr	r2, [r7, #28]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4413      	add	r3, r2
 800c3de:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	685a      	ldr	r2, [r3, #4]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	1ad2      	subs	r2, r2, r3
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800c3f2:	6938      	ldr	r0, [r7, #16]
 800c3f4:	f000 f8a2 	bl	800c53c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c3f8:	4b15      	ldr	r3, [pc, #84]	; (800c450 <pvPortMalloc+0x138>)
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	4a13      	ldr	r2, [pc, #76]	; (800c450 <pvPortMalloc+0x138>)
 800c404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c406:	4b12      	ldr	r3, [pc, #72]	; (800c450 <pvPortMalloc+0x138>)
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	4b13      	ldr	r3, [pc, #76]	; (800c458 <pvPortMalloc+0x140>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d203      	bcs.n	800c41a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c412:	4b0f      	ldr	r3, [pc, #60]	; (800c450 <pvPortMalloc+0x138>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a10      	ldr	r2, [pc, #64]	; (800c458 <pvPortMalloc+0x140>)
 800c418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	685a      	ldr	r2, [r3, #4]
 800c41e:	4b0b      	ldr	r3, [pc, #44]	; (800c44c <pvPortMalloc+0x134>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	431a      	orrs	r2, r3
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	2200      	movs	r2, #0
 800c42c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c42e:	4b0b      	ldr	r3, [pc, #44]	; (800c45c <pvPortMalloc+0x144>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3301      	adds	r3, #1
 800c434:	4a09      	ldr	r2, [pc, #36]	; (800c45c <pvPortMalloc+0x144>)
 800c436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c438:	f7fe fd12 	bl	800ae60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800c43c:	697b      	ldr	r3, [r7, #20]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3720      	adds	r7, #32
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	200069f8 	.word	0x200069f8
 800c44c:	20006a0c 	.word	0x20006a0c
 800c450:	200069fc 	.word	0x200069fc
 800c454:	200069f0 	.word	0x200069f0
 800c458:	20006a00 	.word	0x20006a00
 800c45c:	20006a04 	.word	0x20006a04

0800c460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d04d      	beq.n	800c50e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c472:	2308      	movs	r3, #8
 800c474:	425b      	negs	r3, r3
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	4413      	add	r3, r2
 800c47a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	685a      	ldr	r2, [r3, #4]
 800c484:	4b24      	ldr	r3, [pc, #144]	; (800c518 <vPortFree+0xb8>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4013      	ands	r3, r2
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10a      	bne.n	800c4a4 <vPortFree+0x44>
	__asm volatile
 800c48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	60fb      	str	r3, [r7, #12]
}
 800c4a0:	bf00      	nop
 800c4a2:	e7fe      	b.n	800c4a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00a      	beq.n	800c4c2 <vPortFree+0x62>
	__asm volatile
 800c4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b0:	f383 8811 	msr	BASEPRI, r3
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	60bb      	str	r3, [r7, #8]
}
 800c4be:	bf00      	nop
 800c4c0:	e7fe      	b.n	800c4c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	685a      	ldr	r2, [r3, #4]
 800c4c6:	4b14      	ldr	r3, [pc, #80]	; (800c518 <vPortFree+0xb8>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4013      	ands	r3, r2
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d01e      	beq.n	800c50e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d11a      	bne.n	800c50e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	4b0e      	ldr	r3, [pc, #56]	; (800c518 <vPortFree+0xb8>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	43db      	mvns	r3, r3
 800c4e2:	401a      	ands	r2, r3
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4e8:	f7fe fcac 	bl	800ae44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	685a      	ldr	r2, [r3, #4]
 800c4f0:	4b0a      	ldr	r3, [pc, #40]	; (800c51c <vPortFree+0xbc>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	4a09      	ldr	r2, [pc, #36]	; (800c51c <vPortFree+0xbc>)
 800c4f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c4fa:	6938      	ldr	r0, [r7, #16]
 800c4fc:	f000 f81e 	bl	800c53c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c500:	4b07      	ldr	r3, [pc, #28]	; (800c520 <vPortFree+0xc0>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	3301      	adds	r3, #1
 800c506:	4a06      	ldr	r2, [pc, #24]	; (800c520 <vPortFree+0xc0>)
 800c508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c50a:	f7fe fca9 	bl	800ae60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c50e:	bf00      	nop
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	20006a0c 	.word	0x20006a0c
 800c51c:	200069fc 	.word	0x200069fc
 800c520:	20006a08 	.word	0x20006a08

0800c524 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800c524:	b480      	push	{r7}
 800c526:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800c528:	4b03      	ldr	r3, [pc, #12]	; (800c538 <xPortGetFreeHeapSize+0x14>)
 800c52a:	681b      	ldr	r3, [r3, #0]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	200069fc 	.word	0x200069fc

0800c53c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c544:	4b28      	ldr	r3, [pc, #160]	; (800c5e8 <prvInsertBlockIntoFreeList+0xac>)
 800c546:	60fb      	str	r3, [r7, #12]
 800c548:	e002      	b.n	800c550 <prvInsertBlockIntoFreeList+0x14>
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	60fb      	str	r3, [r7, #12]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	429a      	cmp	r2, r3
 800c558:	d8f7      	bhi.n	800c54a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	4413      	add	r3, r2
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d108      	bne.n	800c57e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	685a      	ldr	r2, [r3, #4]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	441a      	add	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	441a      	add	r2, r3
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d118      	bne.n	800c5c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	4b15      	ldr	r3, [pc, #84]	; (800c5ec <prvInsertBlockIntoFreeList+0xb0>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d00d      	beq.n	800c5ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	685a      	ldr	r2, [r3, #4]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	441a      	add	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	601a      	str	r2, [r3, #0]
 800c5b8:	e008      	b.n	800c5cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5ba:	4b0c      	ldr	r3, [pc, #48]	; (800c5ec <prvInsertBlockIntoFreeList+0xb0>)
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	601a      	str	r2, [r3, #0]
 800c5c2:	e003      	b.n	800c5cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d002      	beq.n	800c5da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5da:	bf00      	nop
 800c5dc:	3714      	adds	r7, #20
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	200069f0 	.word	0x200069f0
 800c5ec:	200069f8 	.word	0x200069f8

0800c5f0 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b08f      	sub	sp, #60	; 0x3c
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800c604:	4b5a      	ldr	r3, [pc, #360]	; (800c770 <vPortDefineHeapRegions+0x180>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00a      	beq.n	800c622 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	617b      	str	r3, [r7, #20]
}
 800c61e:	bf00      	nop
 800c620:	e7fe      	b.n	800c620 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	4413      	add	r3, r2
 800c62a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800c62c:	e07d      	b.n	800c72a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800c62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63c:	f003 0307 	and.w	r3, r3, #7
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00e      	beq.n	800c662 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800c644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c646:	3307      	adds	r3, #7
 800c648:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64c:	f023 0307 	bic.w	r3, r3, #7
 800c650:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800c652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c65e:	4413      	add	r3, r2
 800c660:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c664:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800c666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d106      	bne.n	800c67a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	4a41      	ldr	r2, [pc, #260]	; (800c774 <vPortDefineHeapRegions+0x184>)
 800c670:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800c672:	4b40      	ldr	r3, [pc, #256]	; (800c774 <vPortDefineHeapRegions+0x184>)
 800c674:	2200      	movs	r2, #0
 800c676:	605a      	str	r2, [r3, #4]
 800c678:	e01f      	b.n	800c6ba <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800c67a:	4b3d      	ldr	r3, [pc, #244]	; (800c770 <vPortDefineHeapRegions+0x180>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10a      	bne.n	800c698 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800c682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	613b      	str	r3, [r7, #16]
}
 800c694:	bf00      	nop
 800c696:	e7fe      	b.n	800c696 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800c698:	4b35      	ldr	r3, [pc, #212]	; (800c770 <vPortDefineHeapRegions+0x180>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	461a      	mov	r2, r3
 800c69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d80a      	bhi.n	800c6ba <vPortDefineHeapRegions+0xca>
	__asm volatile
 800c6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a8:	f383 8811 	msr	BASEPRI, r3
 800c6ac:	f3bf 8f6f 	isb	sy
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	60fb      	str	r3, [r7, #12]
}
 800c6b6:	bf00      	nop
 800c6b8:	e7fe      	b.n	800c6b8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800c6ba:	4b2d      	ldr	r3, [pc, #180]	; (800c770 <vPortDefineHeapRegions+0x180>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800c6c0:	69fa      	ldr	r2, [r7, #28]
 800c6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c4:	4413      	add	r3, r2
 800c6c6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800c6c8:	2208      	movs	r2, #8
 800c6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6cc:	1a9b      	subs	r3, r3, r2
 800c6ce:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d2:	f023 0307 	bic.w	r3, r3, #7
 800c6d6:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	4a25      	ldr	r2, [pc, #148]	; (800c770 <vPortDefineHeapRegions+0x180>)
 800c6dc:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800c6de:	4b24      	ldr	r3, [pc, #144]	; (800c770 <vPortDefineHeapRegions+0x180>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800c6e6:	4b22      	ldr	r3, [pc, #136]	; (800c770 <vPortDefineHeapRegions+0x180>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6f6:	1ad2      	subs	r2, r2, r3
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800c6fc:	4b1c      	ldr	r3, [pc, #112]	; (800c770 <vPortDefineHeapRegions+0x180>)
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	6a3b      	ldr	r3, [r7, #32]
 800c702:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d002      	beq.n	800c710 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	6a3a      	ldr	r2, [r7, #32]
 800c70e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800c710:	6a3b      	ldr	r3, [r7, #32]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c716:	4413      	add	r3, r2
 800c718:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800c71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71c:	3301      	adds	r3, #1
 800c71e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c722:	00db      	lsls	r3, r3, #3
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	4413      	add	r3, r2
 800c728:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800c72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f47f af7d 	bne.w	800c62e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800c734:	4a10      	ldr	r2, [pc, #64]	; (800c778 <vPortDefineHeapRegions+0x188>)
 800c736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c738:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800c73a:	4a10      	ldr	r2, [pc, #64]	; (800c77c <vPortDefineHeapRegions+0x18c>)
 800c73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800c740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10a      	bne.n	800c75c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	60bb      	str	r3, [r7, #8]
}
 800c758:	bf00      	nop
 800c75a:	e7fe      	b.n	800c75a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c75c:	4b08      	ldr	r3, [pc, #32]	; (800c780 <vPortDefineHeapRegions+0x190>)
 800c75e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c762:	601a      	str	r2, [r3, #0]
}
 800c764:	bf00      	nop
 800c766:	373c      	adds	r7, #60	; 0x3c
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	200069f8 	.word	0x200069f8
 800c774:	200069f0 	.word	0x200069f0
 800c778:	20006a00 	.word	0x20006a00
 800c77c:	200069fc 	.word	0x200069fc
 800c780:	20006a0c 	.word	0x20006a0c

0800c784 <atol>:
 800c784:	220a      	movs	r2, #10
 800c786:	2100      	movs	r1, #0
 800c788:	f000 bb5e 	b.w	800ce48 <strtol>

0800c78c <calloc>:
 800c78c:	4b02      	ldr	r3, [pc, #8]	; (800c798 <calloc+0xc>)
 800c78e:	460a      	mov	r2, r1
 800c790:	4601      	mov	r1, r0
 800c792:	6818      	ldr	r0, [r3, #0]
 800c794:	f000 b8f8 	b.w	800c988 <_calloc_r>
 800c798:	200000bc 	.word	0x200000bc

0800c79c <__errno>:
 800c79c:	4b01      	ldr	r3, [pc, #4]	; (800c7a4 <__errno+0x8>)
 800c79e:	6818      	ldr	r0, [r3, #0]
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	200000bc 	.word	0x200000bc

0800c7a8 <gmtime_r>:
 800c7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ac:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c7b0:	460c      	mov	r4, r1
 800c7b2:	4a4f      	ldr	r2, [pc, #316]	; (800c8f0 <gmtime_r+0x148>)
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	4639      	mov	r1, r7
 800c7ba:	f7f4 f867 	bl	800088c <__aeabi_ldivmod>
 800c7be:	4639      	mov	r1, r7
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	4a4b      	ldr	r2, [pc, #300]	; (800c8f0 <gmtime_r+0x148>)
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f7f4 f860 	bl	800088c <__aeabi_ldivmod>
 800c7cc:	2a00      	cmp	r2, #0
 800c7ce:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800c7d2:	bfb7      	itett	lt
 800c7d4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800c7d8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800c7dc:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800c7e0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800c7e4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800c7e8:	fbb2 f1f0 	udiv	r1, r2, r0
 800c7ec:	fb00 2211 	mls	r2, r0, r1, r2
 800c7f0:	203c      	movs	r0, #60	; 0x3c
 800c7f2:	60a1      	str	r1, [r4, #8]
 800c7f4:	fbb2 f1f0 	udiv	r1, r2, r0
 800c7f8:	fb00 2211 	mls	r2, r0, r1, r2
 800c7fc:	6061      	str	r1, [r4, #4]
 800c7fe:	6022      	str	r2, [r4, #0]
 800c800:	2107      	movs	r1, #7
 800c802:	1cda      	adds	r2, r3, #3
 800c804:	fb92 f1f1 	sdiv	r1, r2, r1
 800c808:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c80c:	1a52      	subs	r2, r2, r1
 800c80e:	bf48      	it	mi
 800c810:	3207      	addmi	r2, #7
 800c812:	4d38      	ldr	r5, [pc, #224]	; (800c8f4 <gmtime_r+0x14c>)
 800c814:	4838      	ldr	r0, [pc, #224]	; (800c8f8 <gmtime_r+0x150>)
 800c816:	61a2      	str	r2, [r4, #24]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	bfb7      	itett	lt
 800c81c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800c820:	fb93 f5f5 	sdivge	r5, r3, r5
 800c824:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800c828:	fb92 f5f5 	sdivlt	r5, r2, r5
 800c82c:	fb00 3005 	mla	r0, r0, r5, r3
 800c830:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800c834:	fbb0 f2f2 	udiv	r2, r0, r2
 800c838:	4402      	add	r2, r0
 800c83a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800c83e:	fbb0 f1f3 	udiv	r1, r0, r3
 800c842:	1a52      	subs	r2, r2, r1
 800c844:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c848:	492c      	ldr	r1, [pc, #176]	; (800c8fc <gmtime_r+0x154>)
 800c84a:	fbb0 f1f1 	udiv	r1, r0, r1
 800c84e:	2764      	movs	r7, #100	; 0x64
 800c850:	1a52      	subs	r2, r2, r1
 800c852:	fbb2 f1fc 	udiv	r1, r2, ip
 800c856:	fbb2 f3f3 	udiv	r3, r2, r3
 800c85a:	fbb1 f6f7 	udiv	r6, r1, r7
 800c85e:	1af3      	subs	r3, r6, r3
 800c860:	4403      	add	r3, r0
 800c862:	fb0c 3311 	mls	r3, ip, r1, r3
 800c866:	2299      	movs	r2, #153	; 0x99
 800c868:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800c86c:	f10e 0e02 	add.w	lr, lr, #2
 800c870:	f103 0c01 	add.w	ip, r3, #1
 800c874:	fbbe f0f2 	udiv	r0, lr, r2
 800c878:	4342      	muls	r2, r0
 800c87a:	3202      	adds	r2, #2
 800c87c:	f04f 0805 	mov.w	r8, #5
 800c880:	fbb2 f2f8 	udiv	r2, r2, r8
 800c884:	ebac 0c02 	sub.w	ip, ip, r2
 800c888:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800c88c:	4596      	cmp	lr, r2
 800c88e:	bf94      	ite	ls
 800c890:	2202      	movls	r2, #2
 800c892:	f06f 0209 	mvnhi.w	r2, #9
 800c896:	4410      	add	r0, r2
 800c898:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c89c:	fb02 1505 	mla	r5, r2, r5, r1
 800c8a0:	2801      	cmp	r0, #1
 800c8a2:	bf98      	it	ls
 800c8a4:	3501      	addls	r5, #1
 800c8a6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c8aa:	d30d      	bcc.n	800c8c8 <gmtime_r+0x120>
 800c8ac:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c8b0:	61e3      	str	r3, [r4, #28]
 800c8b2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800c8bc:	f8c4 c00c 	str.w	ip, [r4, #12]
 800c8c0:	6223      	str	r3, [r4, #32]
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c8:	078a      	lsls	r2, r1, #30
 800c8ca:	d102      	bne.n	800c8d2 <gmtime_r+0x12a>
 800c8cc:	fb07 1616 	mls	r6, r7, r6, r1
 800c8d0:	b95e      	cbnz	r6, 800c8ea <gmtime_r+0x142>
 800c8d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c8d6:	fbb1 f6f2 	udiv	r6, r1, r2
 800c8da:	fb02 1216 	mls	r2, r2, r6, r1
 800c8de:	fab2 f282 	clz	r2, r2
 800c8e2:	0952      	lsrs	r2, r2, #5
 800c8e4:	333b      	adds	r3, #59	; 0x3b
 800c8e6:	4413      	add	r3, r2
 800c8e8:	e7e2      	b.n	800c8b0 <gmtime_r+0x108>
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	e7fa      	b.n	800c8e4 <gmtime_r+0x13c>
 800c8ee:	bf00      	nop
 800c8f0:	00015180 	.word	0x00015180
 800c8f4:	00023ab1 	.word	0x00023ab1
 800c8f8:	fffdc54f 	.word	0xfffdc54f
 800c8fc:	00023ab0 	.word	0x00023ab0

0800c900 <__libc_init_array>:
 800c900:	b570      	push	{r4, r5, r6, lr}
 800c902:	4d0d      	ldr	r5, [pc, #52]	; (800c938 <__libc_init_array+0x38>)
 800c904:	4c0d      	ldr	r4, [pc, #52]	; (800c93c <__libc_init_array+0x3c>)
 800c906:	1b64      	subs	r4, r4, r5
 800c908:	10a4      	asrs	r4, r4, #2
 800c90a:	2600      	movs	r6, #0
 800c90c:	42a6      	cmp	r6, r4
 800c90e:	d109      	bne.n	800c924 <__libc_init_array+0x24>
 800c910:	4d0b      	ldr	r5, [pc, #44]	; (800c940 <__libc_init_array+0x40>)
 800c912:	4c0c      	ldr	r4, [pc, #48]	; (800c944 <__libc_init_array+0x44>)
 800c914:	f000 fe2a 	bl	800d56c <_init>
 800c918:	1b64      	subs	r4, r4, r5
 800c91a:	10a4      	asrs	r4, r4, #2
 800c91c:	2600      	movs	r6, #0
 800c91e:	42a6      	cmp	r6, r4
 800c920:	d105      	bne.n	800c92e <__libc_init_array+0x2e>
 800c922:	bd70      	pop	{r4, r5, r6, pc}
 800c924:	f855 3b04 	ldr.w	r3, [r5], #4
 800c928:	4798      	blx	r3
 800c92a:	3601      	adds	r6, #1
 800c92c:	e7ee      	b.n	800c90c <__libc_init_array+0xc>
 800c92e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c932:	4798      	blx	r3
 800c934:	3601      	adds	r6, #1
 800c936:	e7f2      	b.n	800c91e <__libc_init_array+0x1e>
 800c938:	08010048 	.word	0x08010048
 800c93c:	08010048 	.word	0x08010048
 800c940:	08010048 	.word	0x08010048
 800c944:	0801004c 	.word	0x0801004c

0800c948 <__retarget_lock_acquire_recursive>:
 800c948:	4770      	bx	lr

0800c94a <__retarget_lock_release_recursive>:
 800c94a:	4770      	bx	lr

0800c94c <free>:
 800c94c:	4b02      	ldr	r3, [pc, #8]	; (800c958 <free+0xc>)
 800c94e:	4601      	mov	r1, r0
 800c950:	6818      	ldr	r0, [r3, #0]
 800c952:	f000 b82f 	b.w	800c9b4 <_free_r>
 800c956:	bf00      	nop
 800c958:	200000bc 	.word	0x200000bc

0800c95c <memcpy>:
 800c95c:	440a      	add	r2, r1
 800c95e:	4291      	cmp	r1, r2
 800c960:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c964:	d100      	bne.n	800c968 <memcpy+0xc>
 800c966:	4770      	bx	lr
 800c968:	b510      	push	{r4, lr}
 800c96a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c96e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c972:	4291      	cmp	r1, r2
 800c974:	d1f9      	bne.n	800c96a <memcpy+0xe>
 800c976:	bd10      	pop	{r4, pc}

0800c978 <memset>:
 800c978:	4402      	add	r2, r0
 800c97a:	4603      	mov	r3, r0
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d100      	bne.n	800c982 <memset+0xa>
 800c980:	4770      	bx	lr
 800c982:	f803 1b01 	strb.w	r1, [r3], #1
 800c986:	e7f9      	b.n	800c97c <memset+0x4>

0800c988 <_calloc_r>:
 800c988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c98a:	fba1 2402 	umull	r2, r4, r1, r2
 800c98e:	b94c      	cbnz	r4, 800c9a4 <_calloc_r+0x1c>
 800c990:	4611      	mov	r1, r2
 800c992:	9201      	str	r2, [sp, #4]
 800c994:	f000 f87a 	bl	800ca8c <_malloc_r>
 800c998:	9a01      	ldr	r2, [sp, #4]
 800c99a:	4605      	mov	r5, r0
 800c99c:	b930      	cbnz	r0, 800c9ac <_calloc_r+0x24>
 800c99e:	4628      	mov	r0, r5
 800c9a0:	b003      	add	sp, #12
 800c9a2:	bd30      	pop	{r4, r5, pc}
 800c9a4:	220c      	movs	r2, #12
 800c9a6:	6002      	str	r2, [r0, #0]
 800c9a8:	2500      	movs	r5, #0
 800c9aa:	e7f8      	b.n	800c99e <_calloc_r+0x16>
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	f7ff ffe3 	bl	800c978 <memset>
 800c9b2:	e7f4      	b.n	800c99e <_calloc_r+0x16>

0800c9b4 <_free_r>:
 800c9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9b6:	2900      	cmp	r1, #0
 800c9b8:	d044      	beq.n	800ca44 <_free_r+0x90>
 800c9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9be:	9001      	str	r0, [sp, #4]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f1a1 0404 	sub.w	r4, r1, #4
 800c9c6:	bfb8      	it	lt
 800c9c8:	18e4      	addlt	r4, r4, r3
 800c9ca:	f000 fa81 	bl	800ced0 <__malloc_lock>
 800c9ce:	4a1e      	ldr	r2, [pc, #120]	; (800ca48 <_free_r+0x94>)
 800c9d0:	9801      	ldr	r0, [sp, #4]
 800c9d2:	6813      	ldr	r3, [r2, #0]
 800c9d4:	b933      	cbnz	r3, 800c9e4 <_free_r+0x30>
 800c9d6:	6063      	str	r3, [r4, #4]
 800c9d8:	6014      	str	r4, [r2, #0]
 800c9da:	b003      	add	sp, #12
 800c9dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9e0:	f000 ba7c 	b.w	800cedc <__malloc_unlock>
 800c9e4:	42a3      	cmp	r3, r4
 800c9e6:	d908      	bls.n	800c9fa <_free_r+0x46>
 800c9e8:	6825      	ldr	r5, [r4, #0]
 800c9ea:	1961      	adds	r1, r4, r5
 800c9ec:	428b      	cmp	r3, r1
 800c9ee:	bf01      	itttt	eq
 800c9f0:	6819      	ldreq	r1, [r3, #0]
 800c9f2:	685b      	ldreq	r3, [r3, #4]
 800c9f4:	1949      	addeq	r1, r1, r5
 800c9f6:	6021      	streq	r1, [r4, #0]
 800c9f8:	e7ed      	b.n	800c9d6 <_free_r+0x22>
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	b10b      	cbz	r3, 800ca04 <_free_r+0x50>
 800ca00:	42a3      	cmp	r3, r4
 800ca02:	d9fa      	bls.n	800c9fa <_free_r+0x46>
 800ca04:	6811      	ldr	r1, [r2, #0]
 800ca06:	1855      	adds	r5, r2, r1
 800ca08:	42a5      	cmp	r5, r4
 800ca0a:	d10b      	bne.n	800ca24 <_free_r+0x70>
 800ca0c:	6824      	ldr	r4, [r4, #0]
 800ca0e:	4421      	add	r1, r4
 800ca10:	1854      	adds	r4, r2, r1
 800ca12:	42a3      	cmp	r3, r4
 800ca14:	6011      	str	r1, [r2, #0]
 800ca16:	d1e0      	bne.n	800c9da <_free_r+0x26>
 800ca18:	681c      	ldr	r4, [r3, #0]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	6053      	str	r3, [r2, #4]
 800ca1e:	4421      	add	r1, r4
 800ca20:	6011      	str	r1, [r2, #0]
 800ca22:	e7da      	b.n	800c9da <_free_r+0x26>
 800ca24:	d902      	bls.n	800ca2c <_free_r+0x78>
 800ca26:	230c      	movs	r3, #12
 800ca28:	6003      	str	r3, [r0, #0]
 800ca2a:	e7d6      	b.n	800c9da <_free_r+0x26>
 800ca2c:	6825      	ldr	r5, [r4, #0]
 800ca2e:	1961      	adds	r1, r4, r5
 800ca30:	428b      	cmp	r3, r1
 800ca32:	bf04      	itt	eq
 800ca34:	6819      	ldreq	r1, [r3, #0]
 800ca36:	685b      	ldreq	r3, [r3, #4]
 800ca38:	6063      	str	r3, [r4, #4]
 800ca3a:	bf04      	itt	eq
 800ca3c:	1949      	addeq	r1, r1, r5
 800ca3e:	6021      	streq	r1, [r4, #0]
 800ca40:	6054      	str	r4, [r2, #4]
 800ca42:	e7ca      	b.n	800c9da <_free_r+0x26>
 800ca44:	b003      	add	sp, #12
 800ca46:	bd30      	pop	{r4, r5, pc}
 800ca48:	20006a14 	.word	0x20006a14

0800ca4c <sbrk_aligned>:
 800ca4c:	b570      	push	{r4, r5, r6, lr}
 800ca4e:	4e0e      	ldr	r6, [pc, #56]	; (800ca88 <sbrk_aligned+0x3c>)
 800ca50:	460c      	mov	r4, r1
 800ca52:	6831      	ldr	r1, [r6, #0]
 800ca54:	4605      	mov	r5, r0
 800ca56:	b911      	cbnz	r1, 800ca5e <sbrk_aligned+0x12>
 800ca58:	f000 f8f6 	bl	800cc48 <_sbrk_r>
 800ca5c:	6030      	str	r0, [r6, #0]
 800ca5e:	4621      	mov	r1, r4
 800ca60:	4628      	mov	r0, r5
 800ca62:	f000 f8f1 	bl	800cc48 <_sbrk_r>
 800ca66:	1c43      	adds	r3, r0, #1
 800ca68:	d00a      	beq.n	800ca80 <sbrk_aligned+0x34>
 800ca6a:	1cc4      	adds	r4, r0, #3
 800ca6c:	f024 0403 	bic.w	r4, r4, #3
 800ca70:	42a0      	cmp	r0, r4
 800ca72:	d007      	beq.n	800ca84 <sbrk_aligned+0x38>
 800ca74:	1a21      	subs	r1, r4, r0
 800ca76:	4628      	mov	r0, r5
 800ca78:	f000 f8e6 	bl	800cc48 <_sbrk_r>
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	d101      	bne.n	800ca84 <sbrk_aligned+0x38>
 800ca80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ca84:	4620      	mov	r0, r4
 800ca86:	bd70      	pop	{r4, r5, r6, pc}
 800ca88:	20006a18 	.word	0x20006a18

0800ca8c <_malloc_r>:
 800ca8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca90:	1ccd      	adds	r5, r1, #3
 800ca92:	f025 0503 	bic.w	r5, r5, #3
 800ca96:	3508      	adds	r5, #8
 800ca98:	2d0c      	cmp	r5, #12
 800ca9a:	bf38      	it	cc
 800ca9c:	250c      	movcc	r5, #12
 800ca9e:	2d00      	cmp	r5, #0
 800caa0:	4607      	mov	r7, r0
 800caa2:	db01      	blt.n	800caa8 <_malloc_r+0x1c>
 800caa4:	42a9      	cmp	r1, r5
 800caa6:	d905      	bls.n	800cab4 <_malloc_r+0x28>
 800caa8:	230c      	movs	r3, #12
 800caaa:	603b      	str	r3, [r7, #0]
 800caac:	2600      	movs	r6, #0
 800caae:	4630      	mov	r0, r6
 800cab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab4:	4e2e      	ldr	r6, [pc, #184]	; (800cb70 <_malloc_r+0xe4>)
 800cab6:	f000 fa0b 	bl	800ced0 <__malloc_lock>
 800caba:	6833      	ldr	r3, [r6, #0]
 800cabc:	461c      	mov	r4, r3
 800cabe:	bb34      	cbnz	r4, 800cb0e <_malloc_r+0x82>
 800cac0:	4629      	mov	r1, r5
 800cac2:	4638      	mov	r0, r7
 800cac4:	f7ff ffc2 	bl	800ca4c <sbrk_aligned>
 800cac8:	1c43      	adds	r3, r0, #1
 800caca:	4604      	mov	r4, r0
 800cacc:	d14d      	bne.n	800cb6a <_malloc_r+0xde>
 800cace:	6834      	ldr	r4, [r6, #0]
 800cad0:	4626      	mov	r6, r4
 800cad2:	2e00      	cmp	r6, #0
 800cad4:	d140      	bne.n	800cb58 <_malloc_r+0xcc>
 800cad6:	6823      	ldr	r3, [r4, #0]
 800cad8:	4631      	mov	r1, r6
 800cada:	4638      	mov	r0, r7
 800cadc:	eb04 0803 	add.w	r8, r4, r3
 800cae0:	f000 f8b2 	bl	800cc48 <_sbrk_r>
 800cae4:	4580      	cmp	r8, r0
 800cae6:	d13a      	bne.n	800cb5e <_malloc_r+0xd2>
 800cae8:	6821      	ldr	r1, [r4, #0]
 800caea:	3503      	adds	r5, #3
 800caec:	1a6d      	subs	r5, r5, r1
 800caee:	f025 0503 	bic.w	r5, r5, #3
 800caf2:	3508      	adds	r5, #8
 800caf4:	2d0c      	cmp	r5, #12
 800caf6:	bf38      	it	cc
 800caf8:	250c      	movcc	r5, #12
 800cafa:	4629      	mov	r1, r5
 800cafc:	4638      	mov	r0, r7
 800cafe:	f7ff ffa5 	bl	800ca4c <sbrk_aligned>
 800cb02:	3001      	adds	r0, #1
 800cb04:	d02b      	beq.n	800cb5e <_malloc_r+0xd2>
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	442b      	add	r3, r5
 800cb0a:	6023      	str	r3, [r4, #0]
 800cb0c:	e00e      	b.n	800cb2c <_malloc_r+0xa0>
 800cb0e:	6822      	ldr	r2, [r4, #0]
 800cb10:	1b52      	subs	r2, r2, r5
 800cb12:	d41e      	bmi.n	800cb52 <_malloc_r+0xc6>
 800cb14:	2a0b      	cmp	r2, #11
 800cb16:	d916      	bls.n	800cb46 <_malloc_r+0xba>
 800cb18:	1961      	adds	r1, r4, r5
 800cb1a:	42a3      	cmp	r3, r4
 800cb1c:	6025      	str	r5, [r4, #0]
 800cb1e:	bf18      	it	ne
 800cb20:	6059      	strne	r1, [r3, #4]
 800cb22:	6863      	ldr	r3, [r4, #4]
 800cb24:	bf08      	it	eq
 800cb26:	6031      	streq	r1, [r6, #0]
 800cb28:	5162      	str	r2, [r4, r5]
 800cb2a:	604b      	str	r3, [r1, #4]
 800cb2c:	4638      	mov	r0, r7
 800cb2e:	f104 060b 	add.w	r6, r4, #11
 800cb32:	f000 f9d3 	bl	800cedc <__malloc_unlock>
 800cb36:	f026 0607 	bic.w	r6, r6, #7
 800cb3a:	1d23      	adds	r3, r4, #4
 800cb3c:	1af2      	subs	r2, r6, r3
 800cb3e:	d0b6      	beq.n	800caae <_malloc_r+0x22>
 800cb40:	1b9b      	subs	r3, r3, r6
 800cb42:	50a3      	str	r3, [r4, r2]
 800cb44:	e7b3      	b.n	800caae <_malloc_r+0x22>
 800cb46:	6862      	ldr	r2, [r4, #4]
 800cb48:	42a3      	cmp	r3, r4
 800cb4a:	bf0c      	ite	eq
 800cb4c:	6032      	streq	r2, [r6, #0]
 800cb4e:	605a      	strne	r2, [r3, #4]
 800cb50:	e7ec      	b.n	800cb2c <_malloc_r+0xa0>
 800cb52:	4623      	mov	r3, r4
 800cb54:	6864      	ldr	r4, [r4, #4]
 800cb56:	e7b2      	b.n	800cabe <_malloc_r+0x32>
 800cb58:	4634      	mov	r4, r6
 800cb5a:	6876      	ldr	r6, [r6, #4]
 800cb5c:	e7b9      	b.n	800cad2 <_malloc_r+0x46>
 800cb5e:	230c      	movs	r3, #12
 800cb60:	603b      	str	r3, [r7, #0]
 800cb62:	4638      	mov	r0, r7
 800cb64:	f000 f9ba 	bl	800cedc <__malloc_unlock>
 800cb68:	e7a1      	b.n	800caae <_malloc_r+0x22>
 800cb6a:	6025      	str	r5, [r4, #0]
 800cb6c:	e7de      	b.n	800cb2c <_malloc_r+0xa0>
 800cb6e:	bf00      	nop
 800cb70:	20006a14 	.word	0x20006a14

0800cb74 <cleanup_glue>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	460c      	mov	r4, r1
 800cb78:	6809      	ldr	r1, [r1, #0]
 800cb7a:	4605      	mov	r5, r0
 800cb7c:	b109      	cbz	r1, 800cb82 <cleanup_glue+0xe>
 800cb7e:	f7ff fff9 	bl	800cb74 <cleanup_glue>
 800cb82:	4621      	mov	r1, r4
 800cb84:	4628      	mov	r0, r5
 800cb86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb8a:	f7ff bf13 	b.w	800c9b4 <_free_r>
	...

0800cb90 <_reclaim_reent>:
 800cb90:	4b2c      	ldr	r3, [pc, #176]	; (800cc44 <_reclaim_reent+0xb4>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4283      	cmp	r3, r0
 800cb96:	b570      	push	{r4, r5, r6, lr}
 800cb98:	4604      	mov	r4, r0
 800cb9a:	d051      	beq.n	800cc40 <_reclaim_reent+0xb0>
 800cb9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cb9e:	b143      	cbz	r3, 800cbb2 <_reclaim_reent+0x22>
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d14a      	bne.n	800cc3c <_reclaim_reent+0xac>
 800cba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cba8:	6819      	ldr	r1, [r3, #0]
 800cbaa:	b111      	cbz	r1, 800cbb2 <_reclaim_reent+0x22>
 800cbac:	4620      	mov	r0, r4
 800cbae:	f7ff ff01 	bl	800c9b4 <_free_r>
 800cbb2:	6961      	ldr	r1, [r4, #20]
 800cbb4:	b111      	cbz	r1, 800cbbc <_reclaim_reent+0x2c>
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f7ff fefc 	bl	800c9b4 <_free_r>
 800cbbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cbbe:	b111      	cbz	r1, 800cbc6 <_reclaim_reent+0x36>
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f7ff fef7 	bl	800c9b4 <_free_r>
 800cbc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cbc8:	b111      	cbz	r1, 800cbd0 <_reclaim_reent+0x40>
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f7ff fef2 	bl	800c9b4 <_free_r>
 800cbd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cbd2:	b111      	cbz	r1, 800cbda <_reclaim_reent+0x4a>
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f7ff feed 	bl	800c9b4 <_free_r>
 800cbda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cbdc:	b111      	cbz	r1, 800cbe4 <_reclaim_reent+0x54>
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f7ff fee8 	bl	800c9b4 <_free_r>
 800cbe4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cbe6:	b111      	cbz	r1, 800cbee <_reclaim_reent+0x5e>
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f7ff fee3 	bl	800c9b4 <_free_r>
 800cbee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cbf0:	b111      	cbz	r1, 800cbf8 <_reclaim_reent+0x68>
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	f7ff fede 	bl	800c9b4 <_free_r>
 800cbf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbfa:	b111      	cbz	r1, 800cc02 <_reclaim_reent+0x72>
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	f7ff fed9 	bl	800c9b4 <_free_r>
 800cc02:	69a3      	ldr	r3, [r4, #24]
 800cc04:	b1e3      	cbz	r3, 800cc40 <_reclaim_reent+0xb0>
 800cc06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cc08:	4620      	mov	r0, r4
 800cc0a:	4798      	blx	r3
 800cc0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cc0e:	b1b9      	cbz	r1, 800cc40 <_reclaim_reent+0xb0>
 800cc10:	4620      	mov	r0, r4
 800cc12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc16:	f7ff bfad 	b.w	800cb74 <cleanup_glue>
 800cc1a:	5949      	ldr	r1, [r1, r5]
 800cc1c:	b941      	cbnz	r1, 800cc30 <_reclaim_reent+0xa0>
 800cc1e:	3504      	adds	r5, #4
 800cc20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc22:	2d80      	cmp	r5, #128	; 0x80
 800cc24:	68d9      	ldr	r1, [r3, #12]
 800cc26:	d1f8      	bne.n	800cc1a <_reclaim_reent+0x8a>
 800cc28:	4620      	mov	r0, r4
 800cc2a:	f7ff fec3 	bl	800c9b4 <_free_r>
 800cc2e:	e7ba      	b.n	800cba6 <_reclaim_reent+0x16>
 800cc30:	680e      	ldr	r6, [r1, #0]
 800cc32:	4620      	mov	r0, r4
 800cc34:	f7ff febe 	bl	800c9b4 <_free_r>
 800cc38:	4631      	mov	r1, r6
 800cc3a:	e7ef      	b.n	800cc1c <_reclaim_reent+0x8c>
 800cc3c:	2500      	movs	r5, #0
 800cc3e:	e7ef      	b.n	800cc20 <_reclaim_reent+0x90>
 800cc40:	bd70      	pop	{r4, r5, r6, pc}
 800cc42:	bf00      	nop
 800cc44:	200000bc 	.word	0x200000bc

0800cc48 <_sbrk_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	4d06      	ldr	r5, [pc, #24]	; (800cc64 <_sbrk_r+0x1c>)
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	4604      	mov	r4, r0
 800cc50:	4608      	mov	r0, r1
 800cc52:	602b      	str	r3, [r5, #0]
 800cc54:	f7f7 fe3a 	bl	80048cc <_sbrk>
 800cc58:	1c43      	adds	r3, r0, #1
 800cc5a:	d102      	bne.n	800cc62 <_sbrk_r+0x1a>
 800cc5c:	682b      	ldr	r3, [r5, #0]
 800cc5e:	b103      	cbz	r3, 800cc62 <_sbrk_r+0x1a>
 800cc60:	6023      	str	r3, [r4, #0]
 800cc62:	bd38      	pop	{r3, r4, r5, pc}
 800cc64:	20006a1c 	.word	0x20006a1c

0800cc68 <siprintf>:
 800cc68:	b40e      	push	{r1, r2, r3}
 800cc6a:	b500      	push	{lr}
 800cc6c:	b09c      	sub	sp, #112	; 0x70
 800cc6e:	ab1d      	add	r3, sp, #116	; 0x74
 800cc70:	9002      	str	r0, [sp, #8]
 800cc72:	9006      	str	r0, [sp, #24]
 800cc74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc78:	4809      	ldr	r0, [pc, #36]	; (800cca0 <siprintf+0x38>)
 800cc7a:	9107      	str	r1, [sp, #28]
 800cc7c:	9104      	str	r1, [sp, #16]
 800cc7e:	4909      	ldr	r1, [pc, #36]	; (800cca4 <siprintf+0x3c>)
 800cc80:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc84:	9105      	str	r1, [sp, #20]
 800cc86:	6800      	ldr	r0, [r0, #0]
 800cc88:	9301      	str	r3, [sp, #4]
 800cc8a:	a902      	add	r1, sp, #8
 800cc8c:	f000 f988 	bl	800cfa0 <_svfiprintf_r>
 800cc90:	9b02      	ldr	r3, [sp, #8]
 800cc92:	2200      	movs	r2, #0
 800cc94:	701a      	strb	r2, [r3, #0]
 800cc96:	b01c      	add	sp, #112	; 0x70
 800cc98:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc9c:	b003      	add	sp, #12
 800cc9e:	4770      	bx	lr
 800cca0:	200000bc 	.word	0x200000bc
 800cca4:	ffff0208 	.word	0xffff0208

0800cca8 <strcat>:
 800cca8:	b510      	push	{r4, lr}
 800ccaa:	4602      	mov	r2, r0
 800ccac:	7814      	ldrb	r4, [r2, #0]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	3201      	adds	r2, #1
 800ccb2:	2c00      	cmp	r4, #0
 800ccb4:	d1fa      	bne.n	800ccac <strcat+0x4>
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccc0:	2a00      	cmp	r2, #0
 800ccc2:	d1f9      	bne.n	800ccb8 <strcat+0x10>
 800ccc4:	bd10      	pop	{r4, pc}

0800ccc6 <strchr>:
 800ccc6:	b2c9      	uxtb	r1, r1
 800ccc8:	4603      	mov	r3, r0
 800ccca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccce:	b11a      	cbz	r2, 800ccd8 <strchr+0x12>
 800ccd0:	428a      	cmp	r2, r1
 800ccd2:	d1f9      	bne.n	800ccc8 <strchr+0x2>
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	4770      	bx	lr
 800ccd8:	2900      	cmp	r1, #0
 800ccda:	bf18      	it	ne
 800ccdc:	2300      	movne	r3, #0
 800ccde:	e7f9      	b.n	800ccd4 <strchr+0xe>

0800cce0 <strcpy>:
 800cce0:	4603      	mov	r3, r0
 800cce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cce6:	f803 2b01 	strb.w	r2, [r3], #1
 800ccea:	2a00      	cmp	r2, #0
 800ccec:	d1f9      	bne.n	800cce2 <strcpy+0x2>
 800ccee:	4770      	bx	lr

0800ccf0 <strncpy>:
 800ccf0:	b510      	push	{r4, lr}
 800ccf2:	3901      	subs	r1, #1
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	b132      	cbz	r2, 800cd06 <strncpy+0x16>
 800ccf8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ccfc:	f803 4b01 	strb.w	r4, [r3], #1
 800cd00:	3a01      	subs	r2, #1
 800cd02:	2c00      	cmp	r4, #0
 800cd04:	d1f7      	bne.n	800ccf6 <strncpy+0x6>
 800cd06:	441a      	add	r2, r3
 800cd08:	2100      	movs	r1, #0
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d100      	bne.n	800cd10 <strncpy+0x20>
 800cd0e:	bd10      	pop	{r4, pc}
 800cd10:	f803 1b01 	strb.w	r1, [r3], #1
 800cd14:	e7f9      	b.n	800cd0a <strncpy+0x1a>

0800cd16 <strstr>:
 800cd16:	780a      	ldrb	r2, [r1, #0]
 800cd18:	b570      	push	{r4, r5, r6, lr}
 800cd1a:	b96a      	cbnz	r2, 800cd38 <strstr+0x22>
 800cd1c:	bd70      	pop	{r4, r5, r6, pc}
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d109      	bne.n	800cd36 <strstr+0x20>
 800cd22:	460c      	mov	r4, r1
 800cd24:	4605      	mov	r5, r0
 800cd26:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d0f6      	beq.n	800cd1c <strstr+0x6>
 800cd2e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cd32:	429e      	cmp	r6, r3
 800cd34:	d0f7      	beq.n	800cd26 <strstr+0x10>
 800cd36:	3001      	adds	r0, #1
 800cd38:	7803      	ldrb	r3, [r0, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1ef      	bne.n	800cd1e <strstr+0x8>
 800cd3e:	4618      	mov	r0, r3
 800cd40:	e7ec      	b.n	800cd1c <strstr+0x6>
	...

0800cd44 <_strtol_l.constprop.0>:
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd4a:	d001      	beq.n	800cd50 <_strtol_l.constprop.0+0xc>
 800cd4c:	2b24      	cmp	r3, #36	; 0x24
 800cd4e:	d906      	bls.n	800cd5e <_strtol_l.constprop.0+0x1a>
 800cd50:	f7ff fd24 	bl	800c79c <__errno>
 800cd54:	2316      	movs	r3, #22
 800cd56:	6003      	str	r3, [r0, #0]
 800cd58:	2000      	movs	r0, #0
 800cd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ce44 <_strtol_l.constprop.0+0x100>
 800cd62:	460d      	mov	r5, r1
 800cd64:	462e      	mov	r6, r5
 800cd66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd6a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cd6e:	f017 0708 	ands.w	r7, r7, #8
 800cd72:	d1f7      	bne.n	800cd64 <_strtol_l.constprop.0+0x20>
 800cd74:	2c2d      	cmp	r4, #45	; 0x2d
 800cd76:	d132      	bne.n	800cdde <_strtol_l.constprop.0+0x9a>
 800cd78:	782c      	ldrb	r4, [r5, #0]
 800cd7a:	2701      	movs	r7, #1
 800cd7c:	1cb5      	adds	r5, r6, #2
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d05b      	beq.n	800ce3a <_strtol_l.constprop.0+0xf6>
 800cd82:	2b10      	cmp	r3, #16
 800cd84:	d109      	bne.n	800cd9a <_strtol_l.constprop.0+0x56>
 800cd86:	2c30      	cmp	r4, #48	; 0x30
 800cd88:	d107      	bne.n	800cd9a <_strtol_l.constprop.0+0x56>
 800cd8a:	782c      	ldrb	r4, [r5, #0]
 800cd8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cd90:	2c58      	cmp	r4, #88	; 0x58
 800cd92:	d14d      	bne.n	800ce30 <_strtol_l.constprop.0+0xec>
 800cd94:	786c      	ldrb	r4, [r5, #1]
 800cd96:	2310      	movs	r3, #16
 800cd98:	3502      	adds	r5, #2
 800cd9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cd9e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cda2:	f04f 0c00 	mov.w	ip, #0
 800cda6:	fbb8 f9f3 	udiv	r9, r8, r3
 800cdaa:	4666      	mov	r6, ip
 800cdac:	fb03 8a19 	mls	sl, r3, r9, r8
 800cdb0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cdb4:	f1be 0f09 	cmp.w	lr, #9
 800cdb8:	d816      	bhi.n	800cde8 <_strtol_l.constprop.0+0xa4>
 800cdba:	4674      	mov	r4, lr
 800cdbc:	42a3      	cmp	r3, r4
 800cdbe:	dd24      	ble.n	800ce0a <_strtol_l.constprop.0+0xc6>
 800cdc0:	f1bc 0f00 	cmp.w	ip, #0
 800cdc4:	db1e      	blt.n	800ce04 <_strtol_l.constprop.0+0xc0>
 800cdc6:	45b1      	cmp	r9, r6
 800cdc8:	d31c      	bcc.n	800ce04 <_strtol_l.constprop.0+0xc0>
 800cdca:	d101      	bne.n	800cdd0 <_strtol_l.constprop.0+0x8c>
 800cdcc:	45a2      	cmp	sl, r4
 800cdce:	db19      	blt.n	800ce04 <_strtol_l.constprop.0+0xc0>
 800cdd0:	fb06 4603 	mla	r6, r6, r3, r4
 800cdd4:	f04f 0c01 	mov.w	ip, #1
 800cdd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cddc:	e7e8      	b.n	800cdb0 <_strtol_l.constprop.0+0x6c>
 800cdde:	2c2b      	cmp	r4, #43	; 0x2b
 800cde0:	bf04      	itt	eq
 800cde2:	782c      	ldrbeq	r4, [r5, #0]
 800cde4:	1cb5      	addeq	r5, r6, #2
 800cde6:	e7ca      	b.n	800cd7e <_strtol_l.constprop.0+0x3a>
 800cde8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cdec:	f1be 0f19 	cmp.w	lr, #25
 800cdf0:	d801      	bhi.n	800cdf6 <_strtol_l.constprop.0+0xb2>
 800cdf2:	3c37      	subs	r4, #55	; 0x37
 800cdf4:	e7e2      	b.n	800cdbc <_strtol_l.constprop.0+0x78>
 800cdf6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cdfa:	f1be 0f19 	cmp.w	lr, #25
 800cdfe:	d804      	bhi.n	800ce0a <_strtol_l.constprop.0+0xc6>
 800ce00:	3c57      	subs	r4, #87	; 0x57
 800ce02:	e7db      	b.n	800cdbc <_strtol_l.constprop.0+0x78>
 800ce04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ce08:	e7e6      	b.n	800cdd8 <_strtol_l.constprop.0+0x94>
 800ce0a:	f1bc 0f00 	cmp.w	ip, #0
 800ce0e:	da05      	bge.n	800ce1c <_strtol_l.constprop.0+0xd8>
 800ce10:	2322      	movs	r3, #34	; 0x22
 800ce12:	6003      	str	r3, [r0, #0]
 800ce14:	4646      	mov	r6, r8
 800ce16:	b942      	cbnz	r2, 800ce2a <_strtol_l.constprop.0+0xe6>
 800ce18:	4630      	mov	r0, r6
 800ce1a:	e79e      	b.n	800cd5a <_strtol_l.constprop.0+0x16>
 800ce1c:	b107      	cbz	r7, 800ce20 <_strtol_l.constprop.0+0xdc>
 800ce1e:	4276      	negs	r6, r6
 800ce20:	2a00      	cmp	r2, #0
 800ce22:	d0f9      	beq.n	800ce18 <_strtol_l.constprop.0+0xd4>
 800ce24:	f1bc 0f00 	cmp.w	ip, #0
 800ce28:	d000      	beq.n	800ce2c <_strtol_l.constprop.0+0xe8>
 800ce2a:	1e69      	subs	r1, r5, #1
 800ce2c:	6011      	str	r1, [r2, #0]
 800ce2e:	e7f3      	b.n	800ce18 <_strtol_l.constprop.0+0xd4>
 800ce30:	2430      	movs	r4, #48	; 0x30
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1b1      	bne.n	800cd9a <_strtol_l.constprop.0+0x56>
 800ce36:	2308      	movs	r3, #8
 800ce38:	e7af      	b.n	800cd9a <_strtol_l.constprop.0+0x56>
 800ce3a:	2c30      	cmp	r4, #48	; 0x30
 800ce3c:	d0a5      	beq.n	800cd8a <_strtol_l.constprop.0+0x46>
 800ce3e:	230a      	movs	r3, #10
 800ce40:	e7ab      	b.n	800cd9a <_strtol_l.constprop.0+0x56>
 800ce42:	bf00      	nop
 800ce44:	0800ff0d 	.word	0x0800ff0d

0800ce48 <strtol>:
 800ce48:	4613      	mov	r3, r2
 800ce4a:	460a      	mov	r2, r1
 800ce4c:	4601      	mov	r1, r0
 800ce4e:	4802      	ldr	r0, [pc, #8]	; (800ce58 <strtol+0x10>)
 800ce50:	6800      	ldr	r0, [r0, #0]
 800ce52:	f7ff bf77 	b.w	800cd44 <_strtol_l.constprop.0>
 800ce56:	bf00      	nop
 800ce58:	200000bc 	.word	0x200000bc

0800ce5c <_vsniprintf_r>:
 800ce5c:	b530      	push	{r4, r5, lr}
 800ce5e:	4614      	mov	r4, r2
 800ce60:	2c00      	cmp	r4, #0
 800ce62:	b09b      	sub	sp, #108	; 0x6c
 800ce64:	4605      	mov	r5, r0
 800ce66:	461a      	mov	r2, r3
 800ce68:	da05      	bge.n	800ce76 <_vsniprintf_r+0x1a>
 800ce6a:	238b      	movs	r3, #139	; 0x8b
 800ce6c:	6003      	str	r3, [r0, #0]
 800ce6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce72:	b01b      	add	sp, #108	; 0x6c
 800ce74:	bd30      	pop	{r4, r5, pc}
 800ce76:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ce7a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ce7e:	bf14      	ite	ne
 800ce80:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ce84:	4623      	moveq	r3, r4
 800ce86:	9302      	str	r3, [sp, #8]
 800ce88:	9305      	str	r3, [sp, #20]
 800ce8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce8e:	9100      	str	r1, [sp, #0]
 800ce90:	9104      	str	r1, [sp, #16]
 800ce92:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ce96:	4669      	mov	r1, sp
 800ce98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ce9a:	f000 f881 	bl	800cfa0 <_svfiprintf_r>
 800ce9e:	1c43      	adds	r3, r0, #1
 800cea0:	bfbc      	itt	lt
 800cea2:	238b      	movlt	r3, #139	; 0x8b
 800cea4:	602b      	strlt	r3, [r5, #0]
 800cea6:	2c00      	cmp	r4, #0
 800cea8:	d0e3      	beq.n	800ce72 <_vsniprintf_r+0x16>
 800ceaa:	9b00      	ldr	r3, [sp, #0]
 800ceac:	2200      	movs	r2, #0
 800ceae:	701a      	strb	r2, [r3, #0]
 800ceb0:	e7df      	b.n	800ce72 <_vsniprintf_r+0x16>
	...

0800ceb4 <vsniprintf>:
 800ceb4:	b507      	push	{r0, r1, r2, lr}
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	4613      	mov	r3, r2
 800ceba:	460a      	mov	r2, r1
 800cebc:	4601      	mov	r1, r0
 800cebe:	4803      	ldr	r0, [pc, #12]	; (800cecc <vsniprintf+0x18>)
 800cec0:	6800      	ldr	r0, [r0, #0]
 800cec2:	f7ff ffcb 	bl	800ce5c <_vsniprintf_r>
 800cec6:	b003      	add	sp, #12
 800cec8:	f85d fb04 	ldr.w	pc, [sp], #4
 800cecc:	200000bc 	.word	0x200000bc

0800ced0 <__malloc_lock>:
 800ced0:	4801      	ldr	r0, [pc, #4]	; (800ced8 <__malloc_lock+0x8>)
 800ced2:	f7ff bd39 	b.w	800c948 <__retarget_lock_acquire_recursive>
 800ced6:	bf00      	nop
 800ced8:	20006a10 	.word	0x20006a10

0800cedc <__malloc_unlock>:
 800cedc:	4801      	ldr	r0, [pc, #4]	; (800cee4 <__malloc_unlock+0x8>)
 800cede:	f7ff bd34 	b.w	800c94a <__retarget_lock_release_recursive>
 800cee2:	bf00      	nop
 800cee4:	20006a10 	.word	0x20006a10

0800cee8 <__ssputs_r>:
 800cee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceec:	688e      	ldr	r6, [r1, #8]
 800ceee:	429e      	cmp	r6, r3
 800cef0:	4682      	mov	sl, r0
 800cef2:	460c      	mov	r4, r1
 800cef4:	4690      	mov	r8, r2
 800cef6:	461f      	mov	r7, r3
 800cef8:	d838      	bhi.n	800cf6c <__ssputs_r+0x84>
 800cefa:	898a      	ldrh	r2, [r1, #12]
 800cefc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf00:	d032      	beq.n	800cf68 <__ssputs_r+0x80>
 800cf02:	6825      	ldr	r5, [r4, #0]
 800cf04:	6909      	ldr	r1, [r1, #16]
 800cf06:	eba5 0901 	sub.w	r9, r5, r1
 800cf0a:	6965      	ldr	r5, [r4, #20]
 800cf0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf14:	3301      	adds	r3, #1
 800cf16:	444b      	add	r3, r9
 800cf18:	106d      	asrs	r5, r5, #1
 800cf1a:	429d      	cmp	r5, r3
 800cf1c:	bf38      	it	cc
 800cf1e:	461d      	movcc	r5, r3
 800cf20:	0553      	lsls	r3, r2, #21
 800cf22:	d531      	bpl.n	800cf88 <__ssputs_r+0xa0>
 800cf24:	4629      	mov	r1, r5
 800cf26:	f7ff fdb1 	bl	800ca8c <_malloc_r>
 800cf2a:	4606      	mov	r6, r0
 800cf2c:	b950      	cbnz	r0, 800cf44 <__ssputs_r+0x5c>
 800cf2e:	230c      	movs	r3, #12
 800cf30:	f8ca 3000 	str.w	r3, [sl]
 800cf34:	89a3      	ldrh	r3, [r4, #12]
 800cf36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf3a:	81a3      	strh	r3, [r4, #12]
 800cf3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf44:	6921      	ldr	r1, [r4, #16]
 800cf46:	464a      	mov	r2, r9
 800cf48:	f7ff fd08 	bl	800c95c <memcpy>
 800cf4c:	89a3      	ldrh	r3, [r4, #12]
 800cf4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf56:	81a3      	strh	r3, [r4, #12]
 800cf58:	6126      	str	r6, [r4, #16]
 800cf5a:	6165      	str	r5, [r4, #20]
 800cf5c:	444e      	add	r6, r9
 800cf5e:	eba5 0509 	sub.w	r5, r5, r9
 800cf62:	6026      	str	r6, [r4, #0]
 800cf64:	60a5      	str	r5, [r4, #8]
 800cf66:	463e      	mov	r6, r7
 800cf68:	42be      	cmp	r6, r7
 800cf6a:	d900      	bls.n	800cf6e <__ssputs_r+0x86>
 800cf6c:	463e      	mov	r6, r7
 800cf6e:	6820      	ldr	r0, [r4, #0]
 800cf70:	4632      	mov	r2, r6
 800cf72:	4641      	mov	r1, r8
 800cf74:	f000 faa8 	bl	800d4c8 <memmove>
 800cf78:	68a3      	ldr	r3, [r4, #8]
 800cf7a:	1b9b      	subs	r3, r3, r6
 800cf7c:	60a3      	str	r3, [r4, #8]
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	4433      	add	r3, r6
 800cf82:	6023      	str	r3, [r4, #0]
 800cf84:	2000      	movs	r0, #0
 800cf86:	e7db      	b.n	800cf40 <__ssputs_r+0x58>
 800cf88:	462a      	mov	r2, r5
 800cf8a:	f000 fab7 	bl	800d4fc <_realloc_r>
 800cf8e:	4606      	mov	r6, r0
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d1e1      	bne.n	800cf58 <__ssputs_r+0x70>
 800cf94:	6921      	ldr	r1, [r4, #16]
 800cf96:	4650      	mov	r0, sl
 800cf98:	f7ff fd0c 	bl	800c9b4 <_free_r>
 800cf9c:	e7c7      	b.n	800cf2e <__ssputs_r+0x46>
	...

0800cfa0 <_svfiprintf_r>:
 800cfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa4:	4698      	mov	r8, r3
 800cfa6:	898b      	ldrh	r3, [r1, #12]
 800cfa8:	061b      	lsls	r3, r3, #24
 800cfaa:	b09d      	sub	sp, #116	; 0x74
 800cfac:	4607      	mov	r7, r0
 800cfae:	460d      	mov	r5, r1
 800cfb0:	4614      	mov	r4, r2
 800cfb2:	d50e      	bpl.n	800cfd2 <_svfiprintf_r+0x32>
 800cfb4:	690b      	ldr	r3, [r1, #16]
 800cfb6:	b963      	cbnz	r3, 800cfd2 <_svfiprintf_r+0x32>
 800cfb8:	2140      	movs	r1, #64	; 0x40
 800cfba:	f7ff fd67 	bl	800ca8c <_malloc_r>
 800cfbe:	6028      	str	r0, [r5, #0]
 800cfc0:	6128      	str	r0, [r5, #16]
 800cfc2:	b920      	cbnz	r0, 800cfce <_svfiprintf_r+0x2e>
 800cfc4:	230c      	movs	r3, #12
 800cfc6:	603b      	str	r3, [r7, #0]
 800cfc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfcc:	e0d1      	b.n	800d172 <_svfiprintf_r+0x1d2>
 800cfce:	2340      	movs	r3, #64	; 0x40
 800cfd0:	616b      	str	r3, [r5, #20]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9309      	str	r3, [sp, #36]	; 0x24
 800cfd6:	2320      	movs	r3, #32
 800cfd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfe0:	2330      	movs	r3, #48	; 0x30
 800cfe2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d18c <_svfiprintf_r+0x1ec>
 800cfe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfea:	f04f 0901 	mov.w	r9, #1
 800cfee:	4623      	mov	r3, r4
 800cff0:	469a      	mov	sl, r3
 800cff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cff6:	b10a      	cbz	r2, 800cffc <_svfiprintf_r+0x5c>
 800cff8:	2a25      	cmp	r2, #37	; 0x25
 800cffa:	d1f9      	bne.n	800cff0 <_svfiprintf_r+0x50>
 800cffc:	ebba 0b04 	subs.w	fp, sl, r4
 800d000:	d00b      	beq.n	800d01a <_svfiprintf_r+0x7a>
 800d002:	465b      	mov	r3, fp
 800d004:	4622      	mov	r2, r4
 800d006:	4629      	mov	r1, r5
 800d008:	4638      	mov	r0, r7
 800d00a:	f7ff ff6d 	bl	800cee8 <__ssputs_r>
 800d00e:	3001      	adds	r0, #1
 800d010:	f000 80aa 	beq.w	800d168 <_svfiprintf_r+0x1c8>
 800d014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d016:	445a      	add	r2, fp
 800d018:	9209      	str	r2, [sp, #36]	; 0x24
 800d01a:	f89a 3000 	ldrb.w	r3, [sl]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f000 80a2 	beq.w	800d168 <_svfiprintf_r+0x1c8>
 800d024:	2300      	movs	r3, #0
 800d026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d02a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d02e:	f10a 0a01 	add.w	sl, sl, #1
 800d032:	9304      	str	r3, [sp, #16]
 800d034:	9307      	str	r3, [sp, #28]
 800d036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d03a:	931a      	str	r3, [sp, #104]	; 0x68
 800d03c:	4654      	mov	r4, sl
 800d03e:	2205      	movs	r2, #5
 800d040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d044:	4851      	ldr	r0, [pc, #324]	; (800d18c <_svfiprintf_r+0x1ec>)
 800d046:	f7f3 f8cb 	bl	80001e0 <memchr>
 800d04a:	9a04      	ldr	r2, [sp, #16]
 800d04c:	b9d8      	cbnz	r0, 800d086 <_svfiprintf_r+0xe6>
 800d04e:	06d0      	lsls	r0, r2, #27
 800d050:	bf44      	itt	mi
 800d052:	2320      	movmi	r3, #32
 800d054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d058:	0711      	lsls	r1, r2, #28
 800d05a:	bf44      	itt	mi
 800d05c:	232b      	movmi	r3, #43	; 0x2b
 800d05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d062:	f89a 3000 	ldrb.w	r3, [sl]
 800d066:	2b2a      	cmp	r3, #42	; 0x2a
 800d068:	d015      	beq.n	800d096 <_svfiprintf_r+0xf6>
 800d06a:	9a07      	ldr	r2, [sp, #28]
 800d06c:	4654      	mov	r4, sl
 800d06e:	2000      	movs	r0, #0
 800d070:	f04f 0c0a 	mov.w	ip, #10
 800d074:	4621      	mov	r1, r4
 800d076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d07a:	3b30      	subs	r3, #48	; 0x30
 800d07c:	2b09      	cmp	r3, #9
 800d07e:	d94e      	bls.n	800d11e <_svfiprintf_r+0x17e>
 800d080:	b1b0      	cbz	r0, 800d0b0 <_svfiprintf_r+0x110>
 800d082:	9207      	str	r2, [sp, #28]
 800d084:	e014      	b.n	800d0b0 <_svfiprintf_r+0x110>
 800d086:	eba0 0308 	sub.w	r3, r0, r8
 800d08a:	fa09 f303 	lsl.w	r3, r9, r3
 800d08e:	4313      	orrs	r3, r2
 800d090:	9304      	str	r3, [sp, #16]
 800d092:	46a2      	mov	sl, r4
 800d094:	e7d2      	b.n	800d03c <_svfiprintf_r+0x9c>
 800d096:	9b03      	ldr	r3, [sp, #12]
 800d098:	1d19      	adds	r1, r3, #4
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	9103      	str	r1, [sp, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bfbb      	ittet	lt
 800d0a2:	425b      	neglt	r3, r3
 800d0a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d0a8:	9307      	strge	r3, [sp, #28]
 800d0aa:	9307      	strlt	r3, [sp, #28]
 800d0ac:	bfb8      	it	lt
 800d0ae:	9204      	strlt	r2, [sp, #16]
 800d0b0:	7823      	ldrb	r3, [r4, #0]
 800d0b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d0b4:	d10c      	bne.n	800d0d0 <_svfiprintf_r+0x130>
 800d0b6:	7863      	ldrb	r3, [r4, #1]
 800d0b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d0ba:	d135      	bne.n	800d128 <_svfiprintf_r+0x188>
 800d0bc:	9b03      	ldr	r3, [sp, #12]
 800d0be:	1d1a      	adds	r2, r3, #4
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	9203      	str	r2, [sp, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	bfb8      	it	lt
 800d0c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d0cc:	3402      	adds	r4, #2
 800d0ce:	9305      	str	r3, [sp, #20]
 800d0d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d19c <_svfiprintf_r+0x1fc>
 800d0d4:	7821      	ldrb	r1, [r4, #0]
 800d0d6:	2203      	movs	r2, #3
 800d0d8:	4650      	mov	r0, sl
 800d0da:	f7f3 f881 	bl	80001e0 <memchr>
 800d0de:	b140      	cbz	r0, 800d0f2 <_svfiprintf_r+0x152>
 800d0e0:	2340      	movs	r3, #64	; 0x40
 800d0e2:	eba0 000a 	sub.w	r0, r0, sl
 800d0e6:	fa03 f000 	lsl.w	r0, r3, r0
 800d0ea:	9b04      	ldr	r3, [sp, #16]
 800d0ec:	4303      	orrs	r3, r0
 800d0ee:	3401      	adds	r4, #1
 800d0f0:	9304      	str	r3, [sp, #16]
 800d0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f6:	4826      	ldr	r0, [pc, #152]	; (800d190 <_svfiprintf_r+0x1f0>)
 800d0f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0fc:	2206      	movs	r2, #6
 800d0fe:	f7f3 f86f 	bl	80001e0 <memchr>
 800d102:	2800      	cmp	r0, #0
 800d104:	d038      	beq.n	800d178 <_svfiprintf_r+0x1d8>
 800d106:	4b23      	ldr	r3, [pc, #140]	; (800d194 <_svfiprintf_r+0x1f4>)
 800d108:	bb1b      	cbnz	r3, 800d152 <_svfiprintf_r+0x1b2>
 800d10a:	9b03      	ldr	r3, [sp, #12]
 800d10c:	3307      	adds	r3, #7
 800d10e:	f023 0307 	bic.w	r3, r3, #7
 800d112:	3308      	adds	r3, #8
 800d114:	9303      	str	r3, [sp, #12]
 800d116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d118:	4433      	add	r3, r6
 800d11a:	9309      	str	r3, [sp, #36]	; 0x24
 800d11c:	e767      	b.n	800cfee <_svfiprintf_r+0x4e>
 800d11e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d122:	460c      	mov	r4, r1
 800d124:	2001      	movs	r0, #1
 800d126:	e7a5      	b.n	800d074 <_svfiprintf_r+0xd4>
 800d128:	2300      	movs	r3, #0
 800d12a:	3401      	adds	r4, #1
 800d12c:	9305      	str	r3, [sp, #20]
 800d12e:	4619      	mov	r1, r3
 800d130:	f04f 0c0a 	mov.w	ip, #10
 800d134:	4620      	mov	r0, r4
 800d136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d13a:	3a30      	subs	r2, #48	; 0x30
 800d13c:	2a09      	cmp	r2, #9
 800d13e:	d903      	bls.n	800d148 <_svfiprintf_r+0x1a8>
 800d140:	2b00      	cmp	r3, #0
 800d142:	d0c5      	beq.n	800d0d0 <_svfiprintf_r+0x130>
 800d144:	9105      	str	r1, [sp, #20]
 800d146:	e7c3      	b.n	800d0d0 <_svfiprintf_r+0x130>
 800d148:	fb0c 2101 	mla	r1, ip, r1, r2
 800d14c:	4604      	mov	r4, r0
 800d14e:	2301      	movs	r3, #1
 800d150:	e7f0      	b.n	800d134 <_svfiprintf_r+0x194>
 800d152:	ab03      	add	r3, sp, #12
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	462a      	mov	r2, r5
 800d158:	4b0f      	ldr	r3, [pc, #60]	; (800d198 <_svfiprintf_r+0x1f8>)
 800d15a:	a904      	add	r1, sp, #16
 800d15c:	4638      	mov	r0, r7
 800d15e:	f3af 8000 	nop.w
 800d162:	1c42      	adds	r2, r0, #1
 800d164:	4606      	mov	r6, r0
 800d166:	d1d6      	bne.n	800d116 <_svfiprintf_r+0x176>
 800d168:	89ab      	ldrh	r3, [r5, #12]
 800d16a:	065b      	lsls	r3, r3, #25
 800d16c:	f53f af2c 	bmi.w	800cfc8 <_svfiprintf_r+0x28>
 800d170:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d172:	b01d      	add	sp, #116	; 0x74
 800d174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d178:	ab03      	add	r3, sp, #12
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	462a      	mov	r2, r5
 800d17e:	4b06      	ldr	r3, [pc, #24]	; (800d198 <_svfiprintf_r+0x1f8>)
 800d180:	a904      	add	r1, sp, #16
 800d182:	4638      	mov	r0, r7
 800d184:	f000 f87a 	bl	800d27c <_printf_i>
 800d188:	e7eb      	b.n	800d162 <_svfiprintf_r+0x1c2>
 800d18a:	bf00      	nop
 800d18c:	0801000d 	.word	0x0801000d
 800d190:	08010017 	.word	0x08010017
 800d194:	00000000 	.word	0x00000000
 800d198:	0800cee9 	.word	0x0800cee9
 800d19c:	08010013 	.word	0x08010013

0800d1a0 <_printf_common>:
 800d1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a4:	4616      	mov	r6, r2
 800d1a6:	4699      	mov	r9, r3
 800d1a8:	688a      	ldr	r2, [r1, #8]
 800d1aa:	690b      	ldr	r3, [r1, #16]
 800d1ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	bfb8      	it	lt
 800d1b4:	4613      	movlt	r3, r2
 800d1b6:	6033      	str	r3, [r6, #0]
 800d1b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1bc:	4607      	mov	r7, r0
 800d1be:	460c      	mov	r4, r1
 800d1c0:	b10a      	cbz	r2, 800d1c6 <_printf_common+0x26>
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	6033      	str	r3, [r6, #0]
 800d1c6:	6823      	ldr	r3, [r4, #0]
 800d1c8:	0699      	lsls	r1, r3, #26
 800d1ca:	bf42      	ittt	mi
 800d1cc:	6833      	ldrmi	r3, [r6, #0]
 800d1ce:	3302      	addmi	r3, #2
 800d1d0:	6033      	strmi	r3, [r6, #0]
 800d1d2:	6825      	ldr	r5, [r4, #0]
 800d1d4:	f015 0506 	ands.w	r5, r5, #6
 800d1d8:	d106      	bne.n	800d1e8 <_printf_common+0x48>
 800d1da:	f104 0a19 	add.w	sl, r4, #25
 800d1de:	68e3      	ldr	r3, [r4, #12]
 800d1e0:	6832      	ldr	r2, [r6, #0]
 800d1e2:	1a9b      	subs	r3, r3, r2
 800d1e4:	42ab      	cmp	r3, r5
 800d1e6:	dc26      	bgt.n	800d236 <_printf_common+0x96>
 800d1e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1ec:	1e13      	subs	r3, r2, #0
 800d1ee:	6822      	ldr	r2, [r4, #0]
 800d1f0:	bf18      	it	ne
 800d1f2:	2301      	movne	r3, #1
 800d1f4:	0692      	lsls	r2, r2, #26
 800d1f6:	d42b      	bmi.n	800d250 <_printf_common+0xb0>
 800d1f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1fc:	4649      	mov	r1, r9
 800d1fe:	4638      	mov	r0, r7
 800d200:	47c0      	blx	r8
 800d202:	3001      	adds	r0, #1
 800d204:	d01e      	beq.n	800d244 <_printf_common+0xa4>
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	68e5      	ldr	r5, [r4, #12]
 800d20a:	6832      	ldr	r2, [r6, #0]
 800d20c:	f003 0306 	and.w	r3, r3, #6
 800d210:	2b04      	cmp	r3, #4
 800d212:	bf08      	it	eq
 800d214:	1aad      	subeq	r5, r5, r2
 800d216:	68a3      	ldr	r3, [r4, #8]
 800d218:	6922      	ldr	r2, [r4, #16]
 800d21a:	bf0c      	ite	eq
 800d21c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d220:	2500      	movne	r5, #0
 800d222:	4293      	cmp	r3, r2
 800d224:	bfc4      	itt	gt
 800d226:	1a9b      	subgt	r3, r3, r2
 800d228:	18ed      	addgt	r5, r5, r3
 800d22a:	2600      	movs	r6, #0
 800d22c:	341a      	adds	r4, #26
 800d22e:	42b5      	cmp	r5, r6
 800d230:	d11a      	bne.n	800d268 <_printf_common+0xc8>
 800d232:	2000      	movs	r0, #0
 800d234:	e008      	b.n	800d248 <_printf_common+0xa8>
 800d236:	2301      	movs	r3, #1
 800d238:	4652      	mov	r2, sl
 800d23a:	4649      	mov	r1, r9
 800d23c:	4638      	mov	r0, r7
 800d23e:	47c0      	blx	r8
 800d240:	3001      	adds	r0, #1
 800d242:	d103      	bne.n	800d24c <_printf_common+0xac>
 800d244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d24c:	3501      	adds	r5, #1
 800d24e:	e7c6      	b.n	800d1de <_printf_common+0x3e>
 800d250:	18e1      	adds	r1, r4, r3
 800d252:	1c5a      	adds	r2, r3, #1
 800d254:	2030      	movs	r0, #48	; 0x30
 800d256:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d25a:	4422      	add	r2, r4
 800d25c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d260:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d264:	3302      	adds	r3, #2
 800d266:	e7c7      	b.n	800d1f8 <_printf_common+0x58>
 800d268:	2301      	movs	r3, #1
 800d26a:	4622      	mov	r2, r4
 800d26c:	4649      	mov	r1, r9
 800d26e:	4638      	mov	r0, r7
 800d270:	47c0      	blx	r8
 800d272:	3001      	adds	r0, #1
 800d274:	d0e6      	beq.n	800d244 <_printf_common+0xa4>
 800d276:	3601      	adds	r6, #1
 800d278:	e7d9      	b.n	800d22e <_printf_common+0x8e>
	...

0800d27c <_printf_i>:
 800d27c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d280:	7e0f      	ldrb	r7, [r1, #24]
 800d282:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d284:	2f78      	cmp	r7, #120	; 0x78
 800d286:	4691      	mov	r9, r2
 800d288:	4680      	mov	r8, r0
 800d28a:	460c      	mov	r4, r1
 800d28c:	469a      	mov	sl, r3
 800d28e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d292:	d807      	bhi.n	800d2a4 <_printf_i+0x28>
 800d294:	2f62      	cmp	r7, #98	; 0x62
 800d296:	d80a      	bhi.n	800d2ae <_printf_i+0x32>
 800d298:	2f00      	cmp	r7, #0
 800d29a:	f000 80d8 	beq.w	800d44e <_printf_i+0x1d2>
 800d29e:	2f58      	cmp	r7, #88	; 0x58
 800d2a0:	f000 80a3 	beq.w	800d3ea <_printf_i+0x16e>
 800d2a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2ac:	e03a      	b.n	800d324 <_printf_i+0xa8>
 800d2ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2b2:	2b15      	cmp	r3, #21
 800d2b4:	d8f6      	bhi.n	800d2a4 <_printf_i+0x28>
 800d2b6:	a101      	add	r1, pc, #4	; (adr r1, 800d2bc <_printf_i+0x40>)
 800d2b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2bc:	0800d315 	.word	0x0800d315
 800d2c0:	0800d329 	.word	0x0800d329
 800d2c4:	0800d2a5 	.word	0x0800d2a5
 800d2c8:	0800d2a5 	.word	0x0800d2a5
 800d2cc:	0800d2a5 	.word	0x0800d2a5
 800d2d0:	0800d2a5 	.word	0x0800d2a5
 800d2d4:	0800d329 	.word	0x0800d329
 800d2d8:	0800d2a5 	.word	0x0800d2a5
 800d2dc:	0800d2a5 	.word	0x0800d2a5
 800d2e0:	0800d2a5 	.word	0x0800d2a5
 800d2e4:	0800d2a5 	.word	0x0800d2a5
 800d2e8:	0800d435 	.word	0x0800d435
 800d2ec:	0800d359 	.word	0x0800d359
 800d2f0:	0800d417 	.word	0x0800d417
 800d2f4:	0800d2a5 	.word	0x0800d2a5
 800d2f8:	0800d2a5 	.word	0x0800d2a5
 800d2fc:	0800d457 	.word	0x0800d457
 800d300:	0800d2a5 	.word	0x0800d2a5
 800d304:	0800d359 	.word	0x0800d359
 800d308:	0800d2a5 	.word	0x0800d2a5
 800d30c:	0800d2a5 	.word	0x0800d2a5
 800d310:	0800d41f 	.word	0x0800d41f
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	1d1a      	adds	r2, r3, #4
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	602a      	str	r2, [r5, #0]
 800d31c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d324:	2301      	movs	r3, #1
 800d326:	e0a3      	b.n	800d470 <_printf_i+0x1f4>
 800d328:	6820      	ldr	r0, [r4, #0]
 800d32a:	6829      	ldr	r1, [r5, #0]
 800d32c:	0606      	lsls	r6, r0, #24
 800d32e:	f101 0304 	add.w	r3, r1, #4
 800d332:	d50a      	bpl.n	800d34a <_printf_i+0xce>
 800d334:	680e      	ldr	r6, [r1, #0]
 800d336:	602b      	str	r3, [r5, #0]
 800d338:	2e00      	cmp	r6, #0
 800d33a:	da03      	bge.n	800d344 <_printf_i+0xc8>
 800d33c:	232d      	movs	r3, #45	; 0x2d
 800d33e:	4276      	negs	r6, r6
 800d340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d344:	485e      	ldr	r0, [pc, #376]	; (800d4c0 <_printf_i+0x244>)
 800d346:	230a      	movs	r3, #10
 800d348:	e019      	b.n	800d37e <_printf_i+0x102>
 800d34a:	680e      	ldr	r6, [r1, #0]
 800d34c:	602b      	str	r3, [r5, #0]
 800d34e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d352:	bf18      	it	ne
 800d354:	b236      	sxthne	r6, r6
 800d356:	e7ef      	b.n	800d338 <_printf_i+0xbc>
 800d358:	682b      	ldr	r3, [r5, #0]
 800d35a:	6820      	ldr	r0, [r4, #0]
 800d35c:	1d19      	adds	r1, r3, #4
 800d35e:	6029      	str	r1, [r5, #0]
 800d360:	0601      	lsls	r1, r0, #24
 800d362:	d501      	bpl.n	800d368 <_printf_i+0xec>
 800d364:	681e      	ldr	r6, [r3, #0]
 800d366:	e002      	b.n	800d36e <_printf_i+0xf2>
 800d368:	0646      	lsls	r6, r0, #25
 800d36a:	d5fb      	bpl.n	800d364 <_printf_i+0xe8>
 800d36c:	881e      	ldrh	r6, [r3, #0]
 800d36e:	4854      	ldr	r0, [pc, #336]	; (800d4c0 <_printf_i+0x244>)
 800d370:	2f6f      	cmp	r7, #111	; 0x6f
 800d372:	bf0c      	ite	eq
 800d374:	2308      	moveq	r3, #8
 800d376:	230a      	movne	r3, #10
 800d378:	2100      	movs	r1, #0
 800d37a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d37e:	6865      	ldr	r5, [r4, #4]
 800d380:	60a5      	str	r5, [r4, #8]
 800d382:	2d00      	cmp	r5, #0
 800d384:	bfa2      	ittt	ge
 800d386:	6821      	ldrge	r1, [r4, #0]
 800d388:	f021 0104 	bicge.w	r1, r1, #4
 800d38c:	6021      	strge	r1, [r4, #0]
 800d38e:	b90e      	cbnz	r6, 800d394 <_printf_i+0x118>
 800d390:	2d00      	cmp	r5, #0
 800d392:	d04d      	beq.n	800d430 <_printf_i+0x1b4>
 800d394:	4615      	mov	r5, r2
 800d396:	fbb6 f1f3 	udiv	r1, r6, r3
 800d39a:	fb03 6711 	mls	r7, r3, r1, r6
 800d39e:	5dc7      	ldrb	r7, [r0, r7]
 800d3a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3a4:	4637      	mov	r7, r6
 800d3a6:	42bb      	cmp	r3, r7
 800d3a8:	460e      	mov	r6, r1
 800d3aa:	d9f4      	bls.n	800d396 <_printf_i+0x11a>
 800d3ac:	2b08      	cmp	r3, #8
 800d3ae:	d10b      	bne.n	800d3c8 <_printf_i+0x14c>
 800d3b0:	6823      	ldr	r3, [r4, #0]
 800d3b2:	07de      	lsls	r6, r3, #31
 800d3b4:	d508      	bpl.n	800d3c8 <_printf_i+0x14c>
 800d3b6:	6923      	ldr	r3, [r4, #16]
 800d3b8:	6861      	ldr	r1, [r4, #4]
 800d3ba:	4299      	cmp	r1, r3
 800d3bc:	bfde      	ittt	le
 800d3be:	2330      	movle	r3, #48	; 0x30
 800d3c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d3c8:	1b52      	subs	r2, r2, r5
 800d3ca:	6122      	str	r2, [r4, #16]
 800d3cc:	f8cd a000 	str.w	sl, [sp]
 800d3d0:	464b      	mov	r3, r9
 800d3d2:	aa03      	add	r2, sp, #12
 800d3d4:	4621      	mov	r1, r4
 800d3d6:	4640      	mov	r0, r8
 800d3d8:	f7ff fee2 	bl	800d1a0 <_printf_common>
 800d3dc:	3001      	adds	r0, #1
 800d3de:	d14c      	bne.n	800d47a <_printf_i+0x1fe>
 800d3e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3e4:	b004      	add	sp, #16
 800d3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ea:	4835      	ldr	r0, [pc, #212]	; (800d4c0 <_printf_i+0x244>)
 800d3ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d3f0:	6829      	ldr	r1, [r5, #0]
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d3f8:	6029      	str	r1, [r5, #0]
 800d3fa:	061d      	lsls	r5, r3, #24
 800d3fc:	d514      	bpl.n	800d428 <_printf_i+0x1ac>
 800d3fe:	07df      	lsls	r7, r3, #31
 800d400:	bf44      	itt	mi
 800d402:	f043 0320 	orrmi.w	r3, r3, #32
 800d406:	6023      	strmi	r3, [r4, #0]
 800d408:	b91e      	cbnz	r6, 800d412 <_printf_i+0x196>
 800d40a:	6823      	ldr	r3, [r4, #0]
 800d40c:	f023 0320 	bic.w	r3, r3, #32
 800d410:	6023      	str	r3, [r4, #0]
 800d412:	2310      	movs	r3, #16
 800d414:	e7b0      	b.n	800d378 <_printf_i+0xfc>
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	f043 0320 	orr.w	r3, r3, #32
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	2378      	movs	r3, #120	; 0x78
 800d420:	4828      	ldr	r0, [pc, #160]	; (800d4c4 <_printf_i+0x248>)
 800d422:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d426:	e7e3      	b.n	800d3f0 <_printf_i+0x174>
 800d428:	0659      	lsls	r1, r3, #25
 800d42a:	bf48      	it	mi
 800d42c:	b2b6      	uxthmi	r6, r6
 800d42e:	e7e6      	b.n	800d3fe <_printf_i+0x182>
 800d430:	4615      	mov	r5, r2
 800d432:	e7bb      	b.n	800d3ac <_printf_i+0x130>
 800d434:	682b      	ldr	r3, [r5, #0]
 800d436:	6826      	ldr	r6, [r4, #0]
 800d438:	6961      	ldr	r1, [r4, #20]
 800d43a:	1d18      	adds	r0, r3, #4
 800d43c:	6028      	str	r0, [r5, #0]
 800d43e:	0635      	lsls	r5, r6, #24
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	d501      	bpl.n	800d448 <_printf_i+0x1cc>
 800d444:	6019      	str	r1, [r3, #0]
 800d446:	e002      	b.n	800d44e <_printf_i+0x1d2>
 800d448:	0670      	lsls	r0, r6, #25
 800d44a:	d5fb      	bpl.n	800d444 <_printf_i+0x1c8>
 800d44c:	8019      	strh	r1, [r3, #0]
 800d44e:	2300      	movs	r3, #0
 800d450:	6123      	str	r3, [r4, #16]
 800d452:	4615      	mov	r5, r2
 800d454:	e7ba      	b.n	800d3cc <_printf_i+0x150>
 800d456:	682b      	ldr	r3, [r5, #0]
 800d458:	1d1a      	adds	r2, r3, #4
 800d45a:	602a      	str	r2, [r5, #0]
 800d45c:	681d      	ldr	r5, [r3, #0]
 800d45e:	6862      	ldr	r2, [r4, #4]
 800d460:	2100      	movs	r1, #0
 800d462:	4628      	mov	r0, r5
 800d464:	f7f2 febc 	bl	80001e0 <memchr>
 800d468:	b108      	cbz	r0, 800d46e <_printf_i+0x1f2>
 800d46a:	1b40      	subs	r0, r0, r5
 800d46c:	6060      	str	r0, [r4, #4]
 800d46e:	6863      	ldr	r3, [r4, #4]
 800d470:	6123      	str	r3, [r4, #16]
 800d472:	2300      	movs	r3, #0
 800d474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d478:	e7a8      	b.n	800d3cc <_printf_i+0x150>
 800d47a:	6923      	ldr	r3, [r4, #16]
 800d47c:	462a      	mov	r2, r5
 800d47e:	4649      	mov	r1, r9
 800d480:	4640      	mov	r0, r8
 800d482:	47d0      	blx	sl
 800d484:	3001      	adds	r0, #1
 800d486:	d0ab      	beq.n	800d3e0 <_printf_i+0x164>
 800d488:	6823      	ldr	r3, [r4, #0]
 800d48a:	079b      	lsls	r3, r3, #30
 800d48c:	d413      	bmi.n	800d4b6 <_printf_i+0x23a>
 800d48e:	68e0      	ldr	r0, [r4, #12]
 800d490:	9b03      	ldr	r3, [sp, #12]
 800d492:	4298      	cmp	r0, r3
 800d494:	bfb8      	it	lt
 800d496:	4618      	movlt	r0, r3
 800d498:	e7a4      	b.n	800d3e4 <_printf_i+0x168>
 800d49a:	2301      	movs	r3, #1
 800d49c:	4632      	mov	r2, r6
 800d49e:	4649      	mov	r1, r9
 800d4a0:	4640      	mov	r0, r8
 800d4a2:	47d0      	blx	sl
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	d09b      	beq.n	800d3e0 <_printf_i+0x164>
 800d4a8:	3501      	adds	r5, #1
 800d4aa:	68e3      	ldr	r3, [r4, #12]
 800d4ac:	9903      	ldr	r1, [sp, #12]
 800d4ae:	1a5b      	subs	r3, r3, r1
 800d4b0:	42ab      	cmp	r3, r5
 800d4b2:	dcf2      	bgt.n	800d49a <_printf_i+0x21e>
 800d4b4:	e7eb      	b.n	800d48e <_printf_i+0x212>
 800d4b6:	2500      	movs	r5, #0
 800d4b8:	f104 0619 	add.w	r6, r4, #25
 800d4bc:	e7f5      	b.n	800d4aa <_printf_i+0x22e>
 800d4be:	bf00      	nop
 800d4c0:	0801001e 	.word	0x0801001e
 800d4c4:	0801002f 	.word	0x0801002f

0800d4c8 <memmove>:
 800d4c8:	4288      	cmp	r0, r1
 800d4ca:	b510      	push	{r4, lr}
 800d4cc:	eb01 0402 	add.w	r4, r1, r2
 800d4d0:	d902      	bls.n	800d4d8 <memmove+0x10>
 800d4d2:	4284      	cmp	r4, r0
 800d4d4:	4623      	mov	r3, r4
 800d4d6:	d807      	bhi.n	800d4e8 <memmove+0x20>
 800d4d8:	1e43      	subs	r3, r0, #1
 800d4da:	42a1      	cmp	r1, r4
 800d4dc:	d008      	beq.n	800d4f0 <memmove+0x28>
 800d4de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4e6:	e7f8      	b.n	800d4da <memmove+0x12>
 800d4e8:	4402      	add	r2, r0
 800d4ea:	4601      	mov	r1, r0
 800d4ec:	428a      	cmp	r2, r1
 800d4ee:	d100      	bne.n	800d4f2 <memmove+0x2a>
 800d4f0:	bd10      	pop	{r4, pc}
 800d4f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4fa:	e7f7      	b.n	800d4ec <memmove+0x24>

0800d4fc <_realloc_r>:
 800d4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d500:	4680      	mov	r8, r0
 800d502:	4614      	mov	r4, r2
 800d504:	460e      	mov	r6, r1
 800d506:	b921      	cbnz	r1, 800d512 <_realloc_r+0x16>
 800d508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d50c:	4611      	mov	r1, r2
 800d50e:	f7ff babd 	b.w	800ca8c <_malloc_r>
 800d512:	b92a      	cbnz	r2, 800d520 <_realloc_r+0x24>
 800d514:	f7ff fa4e 	bl	800c9b4 <_free_r>
 800d518:	4625      	mov	r5, r4
 800d51a:	4628      	mov	r0, r5
 800d51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d520:	f000 f81b 	bl	800d55a <_malloc_usable_size_r>
 800d524:	4284      	cmp	r4, r0
 800d526:	4607      	mov	r7, r0
 800d528:	d802      	bhi.n	800d530 <_realloc_r+0x34>
 800d52a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d52e:	d812      	bhi.n	800d556 <_realloc_r+0x5a>
 800d530:	4621      	mov	r1, r4
 800d532:	4640      	mov	r0, r8
 800d534:	f7ff faaa 	bl	800ca8c <_malloc_r>
 800d538:	4605      	mov	r5, r0
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d0ed      	beq.n	800d51a <_realloc_r+0x1e>
 800d53e:	42bc      	cmp	r4, r7
 800d540:	4622      	mov	r2, r4
 800d542:	4631      	mov	r1, r6
 800d544:	bf28      	it	cs
 800d546:	463a      	movcs	r2, r7
 800d548:	f7ff fa08 	bl	800c95c <memcpy>
 800d54c:	4631      	mov	r1, r6
 800d54e:	4640      	mov	r0, r8
 800d550:	f7ff fa30 	bl	800c9b4 <_free_r>
 800d554:	e7e1      	b.n	800d51a <_realloc_r+0x1e>
 800d556:	4635      	mov	r5, r6
 800d558:	e7df      	b.n	800d51a <_realloc_r+0x1e>

0800d55a <_malloc_usable_size_r>:
 800d55a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d55e:	1f18      	subs	r0, r3, #4
 800d560:	2b00      	cmp	r3, #0
 800d562:	bfbc      	itt	lt
 800d564:	580b      	ldrlt	r3, [r1, r0]
 800d566:	18c0      	addlt	r0, r0, r3
 800d568:	4770      	bx	lr
	...

0800d56c <_init>:
 800d56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d56e:	bf00      	nop
 800d570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d572:	bc08      	pop	{r3}
 800d574:	469e      	mov	lr, r3
 800d576:	4770      	bx	lr

0800d578 <_fini>:
 800d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57a:	bf00      	nop
 800d57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d57e:	bc08      	pop	{r3}
 800d580:	469e      	mov	lr, r3
 800d582:	4770      	bx	lr
