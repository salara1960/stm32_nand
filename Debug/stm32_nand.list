
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d888  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a78  0800da18  0800da18  0001da18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011490  08011490  0003011c  2**0
                  CONTENTS
  4 .ARM          00000008  08011490  08011490  00021490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011498  08011498  0003011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011498  08011498  00021498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801149c  0801149c  0002149c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  080114a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003011c  2**0
                  CONTENTS
 10 .bss          00006184  20000120  20000120  00030120  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  200062a4  200062a4  00030120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a36f  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a15  00000000  00000000  0005a4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020e8  00000000  00000000  0005eed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000073e0  00000000  00000000  00060fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025c76  00000000  00000000  00068398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e74da  00000000  00000000  0008e00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001754e8  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00002158  00000000  00000000  00175538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009a78  00000000  00000000  00177690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da00 	.word	0x0800da00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	0800da00 	.word	0x0800da00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f003 fd21 	bl	80046a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f881 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa2d 	bl	80010c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9f5 	bl	800105c <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f97d 	bl	8000f70 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8e3 	bl	8000e40 <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 facb 	bl	8001214 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9c3 	bl	8001008 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f93f 	bl	8000f04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(150);
 8000c8c:	2096      	movs	r0, #150	; 0x96
 8000c8e:	f003 fd4d 	bl	800472c <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4828      	ldr	r0, [pc, #160]	; (8000d38 <main+0xdc>)
 8000c98:	f004 fbec 	bl	8005474 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4826      	ldr	r0, [pc, #152]	; (8000d3c <main+0xe0>)
 8000ca4:	f004 fbe6 	bl	8005474 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000ca8:	2096      	movs	r0, #150	; 0x96
 8000caa:	f003 fd3f 	bl	800472c <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4821      	ldr	r0, [pc, #132]	; (8000d38 <main+0xdc>)
 8000cb4:	f004 fbde 	bl	8005474 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	481f      	ldr	r0, [pc, #124]	; (8000d3c <main+0xe0>)
 8000cc0:	f004 fbd8 	bl	8005474 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <main+0xe4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 fba3 	bl	8007420 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <main+0xe8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4919      	ldr	r1, [pc, #100]	; (8000d48 <main+0xec>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f007 f81b 	bl	8007d1e <HAL_UART_Receive_IT>

  //set_Date(epoch);

  ST7789_Reset();
 8000ce8:	f002 fea6 	bl	8003a38 <ST7789_Reset>
  ST7789_Init(back_color);
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <main+0xf0>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 febb 	bl	8003a6c <ST7789_Init>
#endif

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cf6:	f008 f99f 	bl	8009038 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <main+0xf4>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f008 fa93 	bl	800922a <osSemaphoreNew>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <main+0xf8>)
 8000d08:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(s_qcmd), &myQue_attributes);
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <main+0xfc>)
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	2010      	movs	r0, #16
 8000d10:	f008 fb14 	bl	800933c <osMessageQueueNew>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <main+0x100>)
 8000d18:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <main+0x104>)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <main+0x108>)
 8000d20:	f008 f9d6 	bl	80090d0 <osThreadNew>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <main+0x10c>)
 8000d28:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d2a:	f008 f9ab 	bl	8009084 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f003 fcfc 	bl	800472c <HAL_Delay>
 8000d34:	e7fb      	b.n	8000d2e <main+0xd2>
 8000d36:	bf00      	nop
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	2000006c 	.word	0x2000006c
 8000d44:	20000070 	.word	0x20000070
 8000d48:	20001360 	.word	0x20001360
 8000d4c:	20001366 	.word	0x20001366
 8000d50:	08011284 	.word	0x08011284
 8000d54:	20000348 	.word	0x20000348
 8000d58:	0801126c 	.word	0x0801126c
 8000d5c:	20000344 	.word	0x20000344
 8000d60:	08011248 	.word	0x08011248
 8000d64:	080029e9 	.word	0x080029e9
 8000d68:	20000340 	.word	0x20000340

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	; 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2230      	movs	r2, #48	; 0x30
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00b fc44 	bl	800c608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000de0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dea:	2307      	movs	r3, #7
 8000dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 fd2a 	bl	800584c <HAL_RCC_OscConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dfe:	f002 fc7b 	bl	80036f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	230f      	movs	r3, #15
 8000e04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2302      	movs	r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2105      	movs	r1, #5
 8000e20:	4618      	mov	r0, r3
 8000e22:	f004 ff8b 	bl	8005d3c <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e2c:	f002 fc64 	bl	80036f8 <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3750      	adds	r7, #80	; 0x50
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e5a:	4a28      	ldr	r2, [pc, #160]	; (8000efc <MX_RTC_Init+0xbc>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e66:	227f      	movs	r2, #127	; 0x7f
 8000e68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e6c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e70:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000e86:	f005 fa8d 	bl	80063a4 <HAL_RTC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e90:	f002 fc32 	bl	80036f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8000e94:	2315      	movs	r3, #21
 8000e96:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8000e98:	2334      	movs	r3, #52	; 0x34
 8000e9a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000eb0:	f005 faee 	bl	8006490 <HAL_RTC_SetTime>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eba:	f002 fc1d 	bl	80036f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <MX_RTC_Init+0xb8>)
 8000ed6:	f005 fbd3 	bl	8006680 <HAL_RTC_SetDate>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000ee0:	f002 fc0a 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  set_Date(epoch);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_RTC_Init+0xc0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 f887 	bl	8001ffc <set_Date>

  /* USER CODE END RTC_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000013c 	.word	0x2000013c
 8000efc:	40002800 	.word	0x40002800
 8000f00:	20000064 	.word	0x20000064

08000f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_SPI1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_SPI1_Init+0x64>)
 8000f56:	f005 fd23 	bl	80069a0 <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f60:	f002 fbca 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000015c 	.word	0x2000015c
 8000f6c:	40013000 	.word	0x40013000

08000f70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f96:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_TIM2_Init+0x94>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fa4:	22f9      	movs	r2, #249	; 0xf9
 8000fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_TIM2_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fb6:	f006 f9e3 	bl	8007380 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fc0:	f002 fb9a 	bl	80036f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fd2:	f006 fb9d 	bl	8007710 <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fdc:	f002 fb8c 	bl	80036f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM2_Init+0x94>)
 8000fee:	f006 fdb9 	bl	8007b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff8:	f002 fb7e 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000214 	.word	0x20000214

08001008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_USART3_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001014:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001018:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USART3_UART_Init+0x4c>)
 8001040:	f006 fe20 	bl	8007c84 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f002 fb55 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000025c 	.word	0x2000025c
 8001058:	40004800 	.word	0x40004800

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_DMA_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <MX_DMA_Init+0x68>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_DMA_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_DMA_Init+0x68>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <MX_DMA_Init+0x68>)
 8001088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <MX_DMA_Init+0x68>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	200e      	movs	r0, #14
 80010a0:	f003 fc20 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010a4:	200e      	movs	r0, #14
 80010a6:	f003 fc39 	bl	800491c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2103      	movs	r1, #3
 80010ae:	203b      	movs	r0, #59	; 0x3b
 80010b0:	f003 fc18 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010b4:	203b      	movs	r0, #59	; 0x3b
 80010b6:	f003 fc31 	bl	800491c <HAL_NVIC_EnableIRQ>

}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a47      	ldr	r2, [pc, #284]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b45      	ldr	r3, [pc, #276]	; (8001204 <MX_GPIO_Init+0x13c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a40      	ldr	r2, [pc, #256]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <MX_GPIO_Init+0x13c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <MX_GPIO_Init+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a39      	ldr	r2, [pc, #228]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a32      	ldr	r2, [pc, #200]	; (8001204 <MX_GPIO_Init+0x13c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <MX_GPIO_Init+0x13c>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_GPIO_Init+0x13c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	210e      	movs	r1, #14
 800118a:	481f      	ldr	r0, [pc, #124]	; (8001208 <MX_GPIO_Init+0x140>)
 800118c:	f004 f972 	bl	8005474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	481d      	ldr	r0, [pc, #116]	; (800120c <MX_GPIO_Init+0x144>)
 8001198:	f004 f96c 	bl	8005474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	481b      	ldr	r0, [pc, #108]	; (8001210 <MX_GPIO_Init+0x148>)
 80011a2:	f004 f967 	bl	8005474 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 80011a6:	230e      	movs	r3, #14
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0x140>)
 80011be:	f003 ffbd 	bl	800513c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0x144>)
 80011dc:	f003 ffae 	bl	800513c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e8:	2302      	movs	r3, #2
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_GPIO_Init+0x148>)
 80011f8:	f003 ffa0 	bl	800513c <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40020800 	.word	0x40020800

08001214 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001214:	b5b0      	push	{r4, r5, r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 800121a:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <MX_FSMC_Init+0x19c>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
//	#define NAND_DEVICE MY_NAND_DEVICE// 0x70000000L
//#endif

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
*/
  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 800123a:	4b5e      	ldr	r3, [pc, #376]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 800123c:	4a5e      	ldr	r2, [pc, #376]	; (80013b8 <MX_FSMC_Init+0x1a4>)
 800123e:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001240:	4b5c      	ldr	r3, [pc, #368]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 8001242:	2210      	movs	r2, #16
 8001244:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001246:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 8001248:	2202      	movs	r2, #2
 800124a:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800124c:	4b59      	ldr	r3, [pc, #356]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001252:	4b58      	ldr	r3, [pc, #352]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800125e:	4b55      	ldr	r3, [pc, #340]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001264:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 800126a:	4b52      	ldr	r3, [pc, #328]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 800126c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 8001272:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 8001274:	2210      	movs	r2, #16
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 64;//131072; (in pages)
 8001278:	4b4e      	ldr	r3, [pc, #312]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 800127a:	2240      	movs	r2, #64	; 0x40
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 800127e:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 8001280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001284:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001286:	4b4b      	ldr	r3, [pc, #300]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 8001288:	2201      	movs	r2, #1
 800128a:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 800128c:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 800128e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001292:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 8001296:	2200      	movs	r2, #0
 8001298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 9;//18;//252;
 800129c:	2309      	movs	r3, #9
 800129e:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 6;//12;//252;
 80012a0:	2306      	movs	r3, #6
 80012a2:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 6;//12;//252;
 80012a4:	2306      	movs	r3, #6
 80012a6:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 3;//6;//252;
 80012a8:	2303      	movs	r3, #3
 80012aa:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 9;//18;//252;
 80012ac:	2309      	movs	r3, #9
 80012ae:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 6;//12;//252;
 80012b0:	2306      	movs	r3, #6
 80012b2:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 6;//12;//252;
 80012b4:	2306      	movs	r3, #6
 80012b6:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 3;//6;//252;
 80012b8:	2303      	movs	r3, #3
 80012ba:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012bc:	463a      	mov	r2, r7
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	483b      	ldr	r0, [pc, #236]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 80012c6:	f004 f908 	bl	80054da <HAL_NAND_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_FSMC_Init+0xc0>
  {
    Error_Handler( );
 80012d0:	f002 fa12 	bl	80036f8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

    if (HAL_NAND_ECC_Disable(&hnand1) != HAL_OK) devError |= devNAND;
 80012d4:	4837      	ldr	r0, [pc, #220]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 80012d6:	f004 fa5c 	bl	8005792 <HAL_NAND_ECC_Disable>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <MX_FSMC_Init+0xda>
 80012e0:	4b36      	ldr	r3, [pc, #216]	; (80013bc <MX_FSMC_Init+0x1a8>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b34      	ldr	r3, [pc, #208]	; (80013bc <MX_FSMC_Init+0x1a8>)
 80012ec:	801a      	strh	r2, [r3, #0]

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    if (HAL_NAND_RegisterCallback(&hnand1, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

    if (NAND_Read_ID(&hnand1, &nandID) == HAL_OK) {//read ID information from chip
 80012ee:	4934      	ldr	r1, [pc, #208]	; (80013c0 <MX_FSMC_Init+0x1ac>)
 80012f0:	4830      	ldr	r0, [pc, #192]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 80012f2:	f000 f873 	bl	80013dc <NAND_Read_ID>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d154      	bne.n	80013a6 <MX_FSMC_Init+0x192>

    	nandState = HAL_NAND_GetState(&hnand1);
 80012fc:	482d      	ldr	r0, [pc, #180]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 80012fe:	f004 fa71 	bl	80057e4 <HAL_NAND_GetState>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <MX_FSMC_Init+0x1b0>)
 8001308:	701a      	strb	r2, [r3, #0]
nand->cfg.block_number  = hwnand->Config.BlockNbr; // Total Number of block in plane (1024 K9GAG08U0E )
nand->cfg.block_size    = hwnand->Config.BlockSize; // Block size (In page) (64 K9GAG08U0E )
nand->cfg.plane_number  = hwnand->Config.PlaneNbr;  // Number of plane (1 K9GAG08U0E )
nand->cfg.plane_size    = hwnand->Config.PlaneSize * nand->cfg.block_number; // Plane size (In Page)
*/
    	memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 800130a:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <MX_FSMC_Init+0x1b4>)
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 800130e:	4615      	mov	r5, r2
 8001310:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001318:	e894 0003 	ldmia.w	r4, {r0, r1}
 800131c:	e885 0003 	stmia.w	r5, {r0, r1}

    	total_pages = chipConf.PlaneSize / chipConf.PageSize;
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <MX_FSMC_Init+0x1b4>)
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <MX_FSMC_Init+0x1b4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	fbb2 f3f3 	udiv	r3, r2, r3
 800132c:	4a27      	ldr	r2, [pc, #156]	; (80013cc <MX_FSMC_Init+0x1b8>)
 800132e:	6013      	str	r3, [r2, #0]
    	total_bytes = chipConf.PlaneSize;
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <MX_FSMC_Init+0x1b4>)
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <MX_FSMC_Init+0x1bc>)
 8001336:	6013      	str	r3, [r2, #0]


    	if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <MX_FSMC_Init+0x1b4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d02b      	beq.n	8001398 <MX_FSMC_Init+0x184>
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <MX_FSMC_Init+0x1b4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001348:	d826      	bhi.n	8001398 <MX_FSMC_Init+0x184>
    		rdBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <MX_FSMC_Init+0x1b4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4619      	mov	r1, r3
 8001350:	2001      	movs	r0, #1
 8001352:	f00a ff6b 	bl	800c22c <calloc>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <MX_FSMC_Init+0x1c0>)
 800135c:	601a      	str	r2, [r3, #0]
    		wrBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_FSMC_Init+0x1b4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4619      	mov	r1, r3
 8001364:	2001      	movs	r0, #1
 8001366:	f00a ff61 	bl	800c22c <calloc>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_FSMC_Init+0x1c4>)
 8001370:	601a      	str	r2, [r3, #0]

    		if (!rdBuf || !wrBuf) devError |= devMEM;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_FSMC_Init+0x1c0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <MX_FSMC_Init+0x16e>
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_FSMC_Init+0x1c4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d106      	bne.n	8001390 <MX_FSMC_Init+0x17c>
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_FSMC_Init+0x1a8>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_FSMC_Init+0x1a8>)
 800138e:	801a      	strh	r2, [r3, #0]

    		HAL_NAND_Reset(&hnand1);
 8001390:	4808      	ldr	r0, [pc, #32]	; (80013b4 <MX_FSMC_Init+0x1a0>)
 8001392:	f004 f9c4 	bl	800571e <HAL_NAND_Reset>

    }


  /* USER CODE END FSMC_Init 2 */
}
 8001396:	e006      	b.n	80013a6 <MX_FSMC_Init+0x192>
    		devError |= devNAND;
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_FSMC_Init+0x1a8>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	f043 0320 	orr.w	r3, r3, #32
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_FSMC_Init+0x1a8>)
 80013a4:	801a      	strh	r2, [r3, #0]
}
 80013a6:	bf00      	nop
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bdb0      	pop	{r4, r5, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20001384 	.word	0x20001384
 80013b4:	20000300 	.word	0x20000300
 80013b8:	a0000060 	.word	0xa0000060
 80013bc:	2000034c 	.word	0x2000034c
 80013c0:	20001388 	.word	0x20001388
 80013c4:	20000081 	.word	0x20000081
 80013c8:	20001390 	.word	0x20001390
 80013cc:	20001368 	.word	0x20001368
 80013d0:	2000136c 	.word	0x2000136c
 80013d4:	200013a8 	.word	0x200013a8
 80013d8:	200013ac 	.word	0x200013ac

080013dc <NAND_Read_ID>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------

HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d101      	bne.n	80013f6 <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 80013f2:	2302      	movs	r3, #2
 80013f4:	e059      	b.n	80014aa <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d152      	bne.n	80014a8 <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <NAND_Read_ID+0x34>
 800140c:	2302      	movs	r3, #2
 800140e:	e04c      	b.n	80014aa <NAND_Read_ID+0xce>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <NAND_Read_ID+0xdc>)
 8001422:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001426:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <NAND_Read_ID+0xdc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	2290      	movs	r2, #144	; 0x90
 8001432:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001434:	f3bf 8f4f 	dsb	sy
}
 8001438:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <NAND_Read_ID+0xdc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001446:	f3bf 8f4f 	dsb	sy
}
 800144a:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d123      	bne.n	800149c <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <NAND_Read_ID+0xdc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <NAND_Read_ID+0xdc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3310      	adds	r3, #16
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b2da      	uxtb	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	0c1b      	lsrs	r3, r3, #16
 800147c:	b2da      	uxtb	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	0e1b      	lsrs	r3, r3, #24
 8001486:	b2da      	uxtb	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	711a      	strb	r2, [r3, #4]

	    	hnand->State = HAL_NAND_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e000      	b.n	80014aa <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20001370 	.word	0x20001370

080014bc <pageIsEmpty>:
}
//-----------------------------------------------------------------------------
//      Check: page is empty ?
//
bool pageIsEmpty(uint32_t page)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
bool ret = false;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]

	io_nand_read(page, rdBuf, chipConf.PageSize, 0)	;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <pageIsEmpty+0x60>)
 80014ca:	6819      	ldr	r1, [r3, #0]
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <pageIsEmpty+0x64>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2300      	movs	r3, #0
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fb80 	bl	8001bd8 <io_nand_read>
	if (!(devError & devNAND)) {
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <pageIsEmpty+0x68>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	f003 0320 	and.w	r3, r3, #32
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d116      	bne.n	8001512 <pageIsEmpty+0x56>
		ret = true;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	e00c      	b.n	8001508 <pageIsEmpty+0x4c>
			if (*(uint8_t *)(rdBuf + i) != EMPTY) {
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <pageIsEmpty+0x60>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2bff      	cmp	r3, #255	; 0xff
 80014fa:	d002      	beq.n	8001502 <pageIsEmpty+0x46>
				ret = false;
 80014fc:	2300      	movs	r3, #0
 80014fe:	73fb      	strb	r3, [r7, #15]
				break;
 8001500:	e007      	b.n	8001512 <pageIsEmpty+0x56>
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3301      	adds	r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <pageIsEmpty+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3ed      	bcc.n	80014ee <pageIsEmpty+0x32>
			}
		}
	}

	return ret;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200013a8 	.word	0x200013a8
 8001520:	20001390 	.word	0x20001390
 8001524:	2000034c 	.word	0x2000034c

08001528 <_write>:
	return NAND_Erase_Block(nandPort, &nans, 0);
}
*/
#ifdef SET_SMALL_FS
int _write(int file, char *buf, int len)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
	Report(0, "%.*s", len, buf);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	4904      	ldr	r1, [pc, #16]	; (800154c <_write+0x24>)
 800153a:	2000      	movs	r0, #0
 800153c:	f000 fe58 	bl	80021f0 <Report>
	return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	0800db94 	.word	0x0800db94

08001550 <io_uint32_to_flash_adr>:
{
	return  ((adr->Plane * chipConf.PlaneSize) + (adr->Block * chipConf.BlockSize) + adr->Page);
}
//-----------------------------------------------------------------------------
NAND_AddressTypeDef io_uint32_to_flash_adr(uint32_t addr)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
NAND_AddressTypeDef a;

	a.Plane = addr / chipConf.PlaneSize;
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <io_uint32_to_flash_adr+0x7c>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	fbb2 f3f3 	udiv	r3, r2, r3
 8001564:	b29b      	uxth	r3, r3
 8001566:	817b      	strh	r3, [r7, #10]
	a.Block = (addr - a.Plane * chipConf.PlaneSize) / chipConf.BlockSize;
 8001568:	897b      	ldrh	r3, [r7, #10]
 800156a:	461a      	mov	r2, r3
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <io_uint32_to_flash_adr+0x7c>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <io_uint32_to_flash_adr+0x7c>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001580:	b29b      	uxth	r3, r3
 8001582:	81bb      	strh	r3, [r7, #12]
	a.Page  = addr - (a.Plane * chipConf.PlaneSize) - (a.Block * chipConf.BlockSize);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b29a      	uxth	r2, r3
 8001588:	8979      	ldrh	r1, [r7, #10]
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <io_uint32_to_flash_adr+0x7c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	b29b      	uxth	r3, r3
 8001590:	fb11 f303 	smulbb	r3, r1, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	b29a      	uxth	r2, r3
 800159a:	89b9      	ldrh	r1, [r7, #12]
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <io_uint32_to_flash_adr+0x7c>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	fb11 f303 	smulbb	r3, r1, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	813b      	strh	r3, [r7, #8]

	return a;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	461a      	mov	r2, r3
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	6010      	str	r0, [r2, #0]
 80015ba:	889b      	ldrh	r3, [r3, #4]
 80015bc:	8093      	strh	r3, [r2, #4]
}
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20001390 	.word	0x20001390

080015d0 <io_nand_read_8b>:
//-----------------------------------------------------------------------------
uint32_t io_nand_read_8b (uint32_t addr, uint8_t *pBuffer, uint32_t size, uint32_t offset)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b090      	sub	sp, #64	; 0x40
 80015d4:	af04      	add	r7, sp, #16
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ffb3 	bl	8001550 <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 80015ea:	4b8d      	ldr	r3, [pc, #564]	; (8001820 <io_nand_read_8b+0x250>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d101      	bne.n	80015fc <io_nand_read_8b+0x2c>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e10c      	b.n	8001816 <io_nand_read_8b+0x246>

    __HAL_LOCK(nandPort);
 80015fc:	4b88      	ldr	r3, [pc, #544]	; (8001820 <io_nand_read_8b+0x250>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <io_nand_read_8b+0x3c>
 8001608:	2302      	movs	r3, #2
 800160a:	e104      	b.n	8001816 <io_nand_read_8b+0x246>
 800160c:	4b84      	ldr	r3, [pc, #528]	; (8001820 <io_nand_read_8b+0x250>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 8001616:	4b82      	ldr	r3, [pc, #520]	; (8001820 <io_nand_read_8b+0x250>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 8001620:	4b80      	ldr	r3, [pc, #512]	; (8001824 <io_nand_read_8b+0x254>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 8001626:	8abb      	ldrh	r3, [r7, #20]
 8001628:	4619      	mov	r1, r3
 800162a:	8b3b      	ldrh	r3, [r7, #24]
 800162c:	461a      	mov	r2, r3
 800162e:	8afb      	ldrh	r3, [r7, #22]
 8001630:	4618      	mov	r0, r3
 8001632:	4b7b      	ldr	r3, [pc, #492]	; (8001820 <io_nand_read_8b+0x250>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001638:	fb00 f303 	mul.w	r3, r0, r3
 800163c:	4413      	add	r3, r2
 800163e:	4a78      	ldr	r2, [pc, #480]	; (8001820 <io_nand_read_8b+0x250>)
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001644:	fb02 f303 	mul.w	r3, r2, r3
 8001648:	440b      	add	r3, r1
 800164a:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 800164c:	4b76      	ldr	r3, [pc, #472]	; (8001828 <io_nand_read_8b+0x258>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d911      	bls.n	8001678 <io_nand_read_8b+0xa8>
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, eol);
 8001654:	8abb      	ldrh	r3, [r7, #20]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 8001656:	461a      	mov	r2, r3
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, eol);
 8001658:	8afb      	ldrh	r3, [r7, #22]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800165a:	4619      	mov	r1, r3
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, eol);
 800165c:	8b3b      	ldrh	r3, [r7, #24]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 800165e:	4618      	mov	r0, r3
 8001660:	4b72      	ldr	r3, [pc, #456]	; (800182c <io_nand_read_8b+0x25c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	9303      	str	r3, [sp, #12]
 8001666:	9002      	str	r0, [sp, #8]
 8001668:	9101      	str	r1, [sp, #4]
 800166a:	9200      	str	r2, [sp, #0]
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	4a70      	ldr	r2, [pc, #448]	; (8001830 <io_nand_read_8b+0x260>)
 8001670:	4970      	ldr	r1, [pc, #448]	; (8001834 <io_nand_read_8b+0x264>)
 8001672:	2001      	movs	r0, #1
 8001674:	f000 fdbc 	bl	80021f0 <Report>


    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001682:	f3bf 8f4f 	dsb	sy
}
 8001686:	bf00      	nop
    __DSB();

    // Cards with page size <= 512 bytes
    if ((nandPort->Config.PageSize) <= 512U) {
 8001688:	4b65      	ldr	r3, [pc, #404]	; (8001820 <io_nand_read_8b+0x250>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001692:	d830      	bhi.n	80016f6 <io_nand_read_8b+0x126>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016a0:	f3bf 8f4f 	dsb	sy
}
 80016a4:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	6a3a      	ldr	r2, [r7, #32]
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016b2:	f3bf 8f4f 	dsb	sy
}
 80016b6:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	0a1a      	lsrs	r2, r3, #8
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016c6:	f3bf 8f4f 	dsb	sy
}
 80016ca:	bf00      	nop
    	__DSB();
        if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 80016cc:	4b54      	ldr	r3, [pc, #336]	; (8001820 <io_nand_read_8b+0x250>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	4a53      	ldr	r2, [pc, #332]	; (8001820 <io_nand_read_8b+0x250>)
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e0:	d344      	bcc.n	800176c <io_nand_read_8b+0x19c>
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	0c1a      	lsrs	r2, r3, #16
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016f0:	f3bf 8f4f 	dsb	sy
}
 80016f4:	e03a      	b.n	800176c <io_nand_read_8b+0x19c>
			__DSB();
        }
    } else {// (hnand->Config.PageSize) > 512
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001702:	f3bf 8f4f 	dsb	sy
}
 8001706:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	0a1a      	lsrs	r2, r3, #8
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001716:	f3bf 8f4f 	dsb	sy
}
 800171a:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001722:	6a3a      	ldr	r2, [r7, #32]
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001728:	f3bf 8f4f 	dsb	sy
}
 800172c:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	0a1a      	lsrs	r2, r3, #8
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800173c:	f3bf 8f4f 	dsb	sy
}
 8001740:	bf00      	nop
    	__DSB();
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <io_nand_read_8b+0x250>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	4a35      	ldr	r2, [pc, #212]	; (8001820 <io_nand_read_8b+0x250>)
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001756:	d309      	bcc.n	800176c <io_nand_read_8b+0x19c>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	0c1a      	lsrs	r2, r3, #16
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001766:	f3bf 8f4f 	dsb	sy
}
 800176a:	bf00      	nop
    		__DSB();
    	}
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001772:	2230      	movs	r2, #48	; 0x30
 8001774:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001776:	f3bf 8f4f 	dsb	sy
}
 800177a:	bf00      	nop
    __DSB();

    uint32_t tickstart = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    // Check if an extra command is needed for reading pages
    if (nandPort->Config.ExtraCommandEnable == ENABLE) {
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <io_nand_read_8b+0x250>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001788:	2b01      	cmp	r3, #1
 800178a:	d127      	bne.n	80017dc <io_nand_read_8b+0x20c>
        tickstart = HAL_GetTick();
 800178c:	f002 ffc2 	bl	8004714 <HAL_GetTick>
 8001790:	61f8      	str	r0, [r7, #28]
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001792:	e013      	b.n	80017bc <io_nand_read_8b+0x1ec>
            if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 8001794:	f002 ffbe 	bl	8004714 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a2:	d90b      	bls.n	80017bc <io_nand_read_8b+0x1ec>
            	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80017a4:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <io_nand_read_8b+0x250>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2203      	movs	r2, #3
 80017aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            	__HAL_UNLOCK(nandPort);
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <io_nand_read_8b+0x250>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2020 	strb.w	r2, [r3, #32]
            	return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e02c      	b.n	8001816 <io_nand_read_8b+0x246>
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <io_nand_read_8b+0x250>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 f81d 	bl	8005800 <HAL_NAND_Read_Status>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b40      	cmp	r3, #64	; 0x40
 80017ca:	d1e3      	bne.n	8001794 <io_nand_read_8b+0x1c4>
            }
        }

        // Go back to read mode
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017d6:	f3bf 8f4f 	dsb	sy
}
 80017da:	bf00      	nop
        __DSB();
    }

    // Get Data into Buffer
    uint8_t *buff = pBuffer;
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) *buff++ = *(uint8_t *)deviceaddress;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017e4:	e008      	b.n	80017f8 <io_nand_read_8b+0x228>
 80017e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ea:	1c59      	adds	r1, r3, #1
 80017ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80017ee:	7812      	ldrb	r2, [r2, #0]
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f4:	3301      	adds	r3, #1
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3f2      	bcc.n	80017e6 <io_nand_read_8b+0x216>

    nandPort->State = HAL_NAND_STATE_READY;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <io_nand_read_8b+0x250>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <io_nand_read_8b+0x250>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3730      	adds	r7, #48	; 0x30
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000074 	.word	0x20000074
 8001824:	20001370 	.word	0x20001370
 8001828:	20000062 	.word	0x20000062
 800182c:	20000004 	.word	0x20000004
 8001830:	08011294 	.word	0x08011294
 8001834:	0800db60 	.word	0x0800db60

08001838 <io_nand_write_8b>:
//-----------------------------------------------------------------------------
uint32_t io_nand_write_8b(uint32_t addr, uint8_t *pBuffer, uint32_t size, uint32_t offset)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b090      	sub	sp, #64	; 0x40
 800183c:	af04      	add	r7, sp, #16
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	68f9      	ldr	r1, [r7, #12]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fe7f 	bl	8001550 <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 8001852:	4b8a      	ldr	r3, [pc, #552]	; (8001a7c <io_nand_write_8b+0x244>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d101      	bne.n	8001864 <io_nand_write_8b+0x2c>
 8001860:	2302      	movs	r3, #2
 8001862:	e107      	b.n	8001a74 <io_nand_write_8b+0x23c>

    __HAL_LOCK(nandPort);
 8001864:	4b85      	ldr	r3, [pc, #532]	; (8001a7c <io_nand_write_8b+0x244>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d101      	bne.n	8001874 <io_nand_write_8b+0x3c>
 8001870:	2302      	movs	r3, #2
 8001872:	e0ff      	b.n	8001a74 <io_nand_write_8b+0x23c>
 8001874:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <io_nand_write_8b+0x244>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 800187e:	4b7f      	ldr	r3, [pc, #508]	; (8001a7c <io_nand_write_8b+0x244>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 8001888:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <io_nand_write_8b+0x248>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 800188e:	8abb      	ldrh	r3, [r7, #20]
 8001890:	4619      	mov	r1, r3
 8001892:	8b3b      	ldrh	r3, [r7, #24]
 8001894:	461a      	mov	r2, r3
 8001896:	8afb      	ldrh	r3, [r7, #22]
 8001898:	4618      	mov	r0, r3
 800189a:	4b78      	ldr	r3, [pc, #480]	; (8001a7c <io_nand_write_8b+0x244>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	fb00 f303 	mul.w	r3, r0, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	4a75      	ldr	r2, [pc, #468]	; (8001a7c <io_nand_write_8b+0x244>)
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	440b      	add	r3, r1
 80018b2:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 80018b4:	4b73      	ldr	r3, [pc, #460]	; (8001a84 <io_nand_write_8b+0x24c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d911      	bls.n	80018e0 <io_nand_write_8b+0xa8>
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, eol);
 80018bc:	8abb      	ldrh	r3, [r7, #20]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 80018be:	461a      	mov	r2, r3
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, eol);
 80018c0:	8afb      	ldrh	r3, [r7, #22]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 80018c2:	4619      	mov	r1, r3
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, eol);
 80018c4:	8b3b      	ldrh	r3, [r7, #24]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu%s",
 80018c6:	4618      	mov	r0, r3
 80018c8:	4b6f      	ldr	r3, [pc, #444]	; (8001a88 <io_nand_write_8b+0x250>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	9303      	str	r3, [sp, #12]
 80018ce:	9002      	str	r0, [sp, #8]
 80018d0:	9101      	str	r1, [sp, #4]
 80018d2:	9200      	str	r2, [sp, #0]
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	4a6d      	ldr	r2, [pc, #436]	; (8001a8c <io_nand_write_8b+0x254>)
 80018d8:	496d      	ldr	r1, [pc, #436]	; (8001a90 <io_nand_write_8b+0x258>)
 80018da:	2001      	movs	r0, #1
 80018dc:	f000 fc88 	bl	80021f0 <Report>

    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018ea:	f3bf 8f4f 	dsb	sy
}
 80018ee:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f6:	2280      	movs	r2, #128	; 0x80
 80018f8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018fa:	f3bf 8f4f 	dsb	sy
}
 80018fe:	bf00      	nop
    __DSB();

    /* Cards with page size <= 512 bytes */
    if (nandPort->Config.PageSize <= 512U) {
 8001900:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <io_nand_write_8b+0x244>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190a:	d830      	bhi.n	800196e <io_nand_write_8b+0x136>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001918:	f3bf 8f4f 	dsb	sy
}
 800191c:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	6a3a      	ldr	r2, [r7, #32]
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800192a:	f3bf 8f4f 	dsb	sy
}
 800192e:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	0a1a      	lsrs	r2, r3, #8
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800193e:	f3bf 8f4f 	dsb	sy
}
 8001942:	bf00      	nop
    	__DSB();
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001944:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <io_nand_write_8b+0x244>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <io_nand_write_8b+0x244>)
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d344      	bcc.n	80019e4 <io_nand_write_8b+0x1ac>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	0c1a      	lsrs	r2, r3, #16
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001968:	f3bf 8f4f 	dsb	sy
}
 800196c:	e03a      	b.n	80019e4 <io_nand_write_8b+0x1ac>
    		__DSB();
        }
    } else {/* (hnand->Config.PageSize) > 512 */
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800197a:	f3bf 8f4f 	dsb	sy
}
 800197e:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	0a1a      	lsrs	r2, r3, #8
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800198e:	f3bf 8f4f 	dsb	sy
}
 8001992:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199a:	6a3a      	ldr	r2, [r7, #32]
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019a0:	f3bf 8f4f 	dsb	sy
}
 80019a4:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	0a1a      	lsrs	r2, r3, #8
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019b4:	f3bf 8f4f 	dsb	sy
}
 80019b8:	bf00      	nop
    	__DSB();
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 80019ba:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <io_nand_write_8b+0x244>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	4a2e      	ldr	r2, [pc, #184]	; (8001a7c <io_nand_write_8b+0x244>)
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ce:	d309      	bcc.n	80019e4 <io_nand_write_8b+0x1ac>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	0c1a      	lsrs	r2, r3, #16
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019de:	f3bf 8f4f 	dsb	sy
}
 80019e2:	bf00      	nop
        }
    }


    /* Write data to memory */
    uint8_t *buff = pBuffer;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) {
 80019e8:	2300      	movs	r3, #0
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ec:	e00b      	b.n	8001a06 <io_nand_write_8b+0x1ce>
    	*(__IO uint8_t *)deviceaddress = *buff++;
 80019ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019fa:	f3bf 8f4f 	dsb	sy
}
 80019fe:	bf00      	nop
    for (uint32_t index = 0; index < size; index++) {
 8001a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a02:	3301      	adds	r3, #1
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d3ef      	bcc.n	80019ee <io_nand_write_8b+0x1b6>
    	__DSB();
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	2210      	movs	r2, #16
 8001a16:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a18:	f3bf 8f4f 	dsb	sy
}
 8001a1c:	bf00      	nop
    __DSB();

    /* Read status until NAND is ready */
    uint32_t tickstart;
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001a1e:	e016      	b.n	8001a4e <io_nand_write_8b+0x216>
        tickstart = HAL_GetTick();
 8001a20:	f002 fe78 	bl	8004714 <HAL_GetTick>
 8001a24:	61f8      	str	r0, [r7, #28]
        if ((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 8001a26:	f002 fe75 	bl	8004714 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d90b      	bls.n	8001a4e <io_nand_write_8b+0x216>
        	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <io_nand_write_8b+0x244>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        	__HAL_UNLOCK(nandPort);
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <io_nand_write_8b+0x244>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2020 	strb.w	r2, [r3, #32]
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e012      	b.n	8001a74 <io_nand_write_8b+0x23c>
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <io_nand_write_8b+0x244>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 fed4 	bl	8005800 <HAL_NAND_Read_Status>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b40      	cmp	r3, #64	; 0x40
 8001a5c:	d1e0      	bne.n	8001a20 <io_nand_write_8b+0x1e8>
        }
    }

    nandPort->State = HAL_NAND_STATE_READY;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <io_nand_write_8b+0x244>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <io_nand_write_8b+0x244>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3730      	adds	r7, #48	; 0x30
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000074 	.word	0x20000074
 8001a80:	20001370 	.word	0x20001370
 8001a84:	20000062 	.word	0x20000062
 8001a88:	20000004 	.word	0x20000004
 8001a8c:	080112a4 	.word	0x080112a4
 8001a90:	0800db60 	.word	0x0800db60

08001a94 <io_nand_erase_block>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef io_nand_erase_block(NAND_AddressTypeDef *pAddress)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af04      	add	r7, sp, #16
 8001a9a:	6078      	str	r0, [r7, #4]

	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 8001a9c:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <io_nand_erase_block+0x12c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d101      	bne.n	8001aae <io_nand_erase_block+0x1a>

		return HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e084      	b.n	8001bb8 <io_nand_erase_block+0x124>

	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 8001aae:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <io_nand_erase_block+0x12c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d17c      	bne.n	8001bb6 <io_nand_erase_block+0x122>

		__HAL_LOCK(nandPort);
 8001abc:	4b40      	ldr	r3, [pc, #256]	; (8001bc0 <io_nand_erase_block+0x12c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <io_nand_erase_block+0x38>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e075      	b.n	8001bb8 <io_nand_erase_block+0x124>
 8001acc:	4b3c      	ldr	r3, [pc, #240]	; (8001bc0 <io_nand_erase_block+0x12c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 8001ad6:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <io_nand_erase_block+0x12c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		uint32_t deviceaddress = devAdr;
 8001ae0:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <io_nand_erase_block+0x130>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
		uint32_t nandaddress = ARRAY_ADDRESS(pAddress, nandPort);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	4619      	mov	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	889b      	ldrh	r3, [r3, #4]
 8001af0:	461a      	mov	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	885b      	ldrh	r3, [r3, #2]
 8001af6:	4618      	mov	r0, r3
 8001af8:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <io_nand_erase_block+0x12c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afe:	fb00 f303 	mul.w	r3, r0, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	4a2e      	ldr	r2, [pc, #184]	; (8001bc0 <io_nand_erase_block+0x12c>)
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	440b      	add	r3, r1
 8001b10:	60bb      	str	r3, [r7, #8]


		if (dbg > logOn)
 8001b12:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <io_nand_erase_block+0x134>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d914      	bls.n	8001b44 <io_nand_erase_block+0xb0>
			Report(1, "[%s] nand_adr:0x%X page:%lu block:%lu plane:%lu%s",
					  __func__, nandaddress, pAddress->Page, pAddress->Block, pAddress->Plane, eol);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	881b      	ldrh	r3, [r3, #0]
			Report(1, "[%s] nand_adr:0x%X page:%lu block:%lu plane:%lu%s",
 8001b1e:	461a      	mov	r2, r3
					  __func__, nandaddress, pAddress->Page, pAddress->Block, pAddress->Plane, eol);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	889b      	ldrh	r3, [r3, #4]
			Report(1, "[%s] nand_adr:0x%X page:%lu block:%lu plane:%lu%s",
 8001b24:	4619      	mov	r1, r3
					  __func__, nandaddress, pAddress->Page, pAddress->Block, pAddress->Plane, eol);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	885b      	ldrh	r3, [r3, #2]
			Report(1, "[%s] nand_adr:0x%X page:%lu block:%lu plane:%lu%s",
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <io_nand_erase_block+0x138>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	9303      	str	r3, [sp, #12]
 8001b32:	9002      	str	r0, [sp, #8]
 8001b34:	9101      	str	r1, [sp, #4]
 8001b36:	9200      	str	r2, [sp, #0]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4a25      	ldr	r2, [pc, #148]	; (8001bd0 <io_nand_erase_block+0x13c>)
 8001b3c:	4925      	ldr	r1, [pc, #148]	; (8001bd4 <io_nand_erase_block+0x140>)
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f000 fb56 	bl	80021f0 <Report>

		/* Send Erase block command sequence */
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4a:	2260      	movs	r2, #96	; 0x60
 8001b4c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b4e:	f3bf 8f4f 	dsb	sy
}
 8001b52:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b60:	f3bf 8f4f 	dsb	sy
}
 8001b64:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	0a1a      	lsrs	r2, r3, #8
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b74:	f3bf 8f4f 	dsb	sy
}
 8001b78:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	0c1a      	lsrs	r2, r3, #16
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b88:	f3bf 8f4f 	dsb	sy
}
 8001b8c:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	22d0      	movs	r2, #208	; 0xd0
 8001b96:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b98:	f3bf 8f4f 	dsb	sy
}
 8001b9c:	bf00      	nop
		__DSB();

		nandPort->State = HAL_NAND_STATE_READY;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <io_nand_erase_block+0x12c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <io_nand_erase_block+0x12c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2020 	strb.w	r2, [r3, #32]

		return HAL_ERROR;

	}

	return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <io_nand_erase_block+0x124>
		return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000074 	.word	0x20000074
 8001bc4:	20001370 	.word	0x20001370
 8001bc8:	20000062 	.word	0x20000062
 8001bcc:	20000004 	.word	0x20000004
 8001bd0:	080112b8 	.word	0x080112b8
 8001bd4:	0800db9c 	.word	0x0800db9c

08001bd8 <io_nand_read>:
//-----------------------------------------------------------------------------
uint32_t io_nand_read(uint32_t addr, uint8_t *buffer, uint32_t size, uint32_t offset)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]

	if (io_nand_read_8b(addr, buffer, size, 0) != HAL_OK) devError |= devNAND;
 8001be6:	2300      	movs	r3, #0
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f7ff fcef 	bl	80015d0 <io_nand_read_8b>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <io_nand_read+0x2e>
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <io_nand_read+0x38>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	f043 0320 	orr.w	r3, r3, #32
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <io_nand_read+0x38>)
 8001c04:	801a      	strh	r2, [r3, #0]
	//NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
	//if (NAND_Read_Page_8b(nandPort, &Address, buffer, size, offset) != HAL_OK) devError |= devNAND;

    return 0;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	2000034c 	.word	0x2000034c

08001c14 <io_nand_write>:
//-----------------------------------------------------------------------------
uint32_t io_nand_write(uint32_t addr, uint8_t *buffer, uint32_t size, uint32_t offset)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]

	if (io_nand_write_8b(addr, buffer, size, offset) != HAL_OK) devError |= devNAND;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7ff fe05 	bl	8001838 <io_nand_write_8b>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <io_nand_write+0x2e>
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <io_nand_write+0x38>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <io_nand_write+0x38>)
 8001c40:	801a      	strh	r2, [r3, #0]

	return 0;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2000034c 	.word	0x2000034c

08001c50 <io_nand_block_erase>:
//-----------------------------------------------------------------------------
void io_nand_block_erase(uint32_t addr)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
NAND_AddressTypeDef nans = io_uint32_to_flash_adr(addr);
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fc76 	bl	8001550 <io_uint32_to_flash_adr>

	if (io_nand_erase_block(&nans) != HAL_OK) devError |= devNAND;
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff13 	bl	8001a94 <io_nand_erase_block>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <io_nand_block_erase+0x32>
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <io_nand_block_erase+0x3c>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	f043 0320 	orr.w	r3, r3, #32
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <io_nand_block_erase+0x3c>)
 8001c80:	801a      	strh	r2, [r3, #0]
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000034c 	.word	0x2000034c

08001c90 <get_qStat>:
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	dc18      	bgt.n	8001cd0 <get_qStat+0x40>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f113 0f06 	cmn.w	r3, #6
 8001ca4:	db2a      	blt.n	8001cfc <get_qStat+0x6c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3306      	adds	r3, #6
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d826      	bhi.n	8001cfc <get_qStat+0x6c>
 8001cae:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <get_qStat+0x24>)
 8001cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb4:	08001cf5 	.word	0x08001cf5
 8001cb8:	08001cf1 	.word	0x08001cf1
 8001cbc:	08001ced 	.word	0x08001ced
 8001cc0:	08001ce9 	.word	0x08001ce9
 8001cc4:	08001ce5 	.word	0x08001ce5
 8001cc8:	08001ce1 	.word	0x08001ce1
 8001ccc:	08001cdd 	.word	0x08001cdd
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00e      	beq.n	8001cf8 <get_qStat+0x68>
 8001cda:	e00f      	b.n	8001cfc <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <get_qStat+0x7c>)
 8001cde:	e00e      	b.n	8001cfe <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <get_qStat+0x80>)
 8001ce2:	e00c      	b.n	8001cfe <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <get_qStat+0x84>)
 8001ce6:	e00a      	b.n	8001cfe <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <get_qStat+0x88>)
 8001cea:	e008      	b.n	8001cfe <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <get_qStat+0x8c>)
 8001cee:	e006      	b.n	8001cfe <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <get_qStat+0x90>)
 8001cf2:	e004      	b.n	8001cfe <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <get_qStat+0x94>)
 8001cf6:	e002      	b.n	8001cfe <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <get_qStat+0x98>)
 8001cfa:	e000      	b.n	8001cfe <get_qStat+0x6e>
	}

	return "UnknownError";
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <get_qStat+0x9c>)
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	0800dbd0 	.word	0x0800dbd0
 8001d10:	0800dbd8 	.word	0x0800dbd8
 8001d14:	0800dbe0 	.word	0x0800dbe0
 8001d18:	0800dbf0 	.word	0x0800dbf0
 8001d1c:	0800dc00 	.word	0x0800dc00
 8001d20:	0800dc14 	.word	0x0800dc14
 8001d24:	0800dc24 	.word	0x0800dc24
 8001d28:	0800dc30 	.word	0x0800dc30
 8001d2c:	0800dc44 	.word	0x0800dc44

08001d30 <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d00a      	beq.n	8001d56 <get_logName+0x26>
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	dc0a      	bgt.n	8001d5a <get_logName+0x2a>
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <get_logName+0x1e>
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d002      	beq.n	8001d52 <get_logName+0x22>
 8001d4c:	e005      	b.n	8001d5a <get_logName+0x2a>
		case logOff:
			return "logOff";
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <get_logName+0x38>)
 8001d50:	e004      	b.n	8001d5c <get_logName+0x2c>
		case logOn:
			return "logOn";
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <get_logName+0x3c>)
 8001d54:	e002      	b.n	8001d5c <get_logName+0x2c>
		case logDump:
			return "logDump";
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <get_logName+0x40>)
 8001d58:	e000      	b.n	8001d5c <get_logName+0x2c>
	}

	return "???";
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <get_logName+0x44>)
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	0800dc54 	.word	0x0800dc54
 8001d6c:	0800dc5c 	.word	0x0800dc5c
 8001d70:	0800dc64 	.word	0x0800dc64
 8001d74:	0800dc6c 	.word	0x0800dc6c

08001d78 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8001d84:	2330      	movs	r3, #48	; 0x30
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <hex2bin+0x28>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <hex2bin+0x2c>
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	e0b2      	b.n	8001f0a <hex2bin+0x192>
    if (len > 8) len = 8;
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d901      	bls.n	8001dae <hex2bin+0x36>
 8001daa:	2308      	movs	r3, #8
 8001dac:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f1c3 0308 	rsb	r3, r3, #8
 8001db4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8001db8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dbc:	f107 0210 	add.w	r2, r7, #16
 8001dc0:	4413      	add	r3, r2
 8001dc2:	78fa      	ldrb	r2, [r7, #3]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00a fc10 	bl	800c5ec <memcpy>

    k = j = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001dd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8001dda:	e090      	b.n	8001efe <hex2bin+0x186>
        jk = j + 2;
 8001ddc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001de0:	3302      	adds	r3, #2
 8001de2:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8001de4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dec:	e066      	b.n	8001ebc <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 8001dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001df2:	3328      	adds	r3, #40	; 0x28
 8001df4:	443b      	add	r3, r7
 8001df6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001dfa:	2b2f      	cmp	r3, #47	; 0x2f
 8001dfc:	d918      	bls.n	8001e30 <hex2bin+0xb8>
 8001dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e02:	3328      	adds	r3, #40	; 0x28
 8001e04:	443b      	add	r3, r7
 8001e06:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001e0a:	2b39      	cmp	r3, #57	; 0x39
 8001e0c:	d810      	bhi.n	8001e30 <hex2bin+0xb8>
 8001e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e12:	3328      	adds	r3, #40	; 0x28
 8001e14:	443b      	add	r3, r7
 8001e16:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	3a30      	subs	r2, #48	; 0x30
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	3328      	adds	r3, #40	; 0x28
 8001e28:	443b      	add	r3, r7
 8001e2a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001e2e:	e040      	b.n	8001eb2 <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 8001e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e34:	3328      	adds	r3, #40	; 0x28
 8001e36:	443b      	add	r3, r7
 8001e38:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001e3c:	2b60      	cmp	r3, #96	; 0x60
 8001e3e:	d918      	bls.n	8001e72 <hex2bin+0xfa>
 8001e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e44:	3328      	adds	r3, #40	; 0x28
 8001e46:	443b      	add	r3, r7
 8001e48:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001e4c:	2b66      	cmp	r3, #102	; 0x66
 8001e4e:	d810      	bhi.n	8001e72 <hex2bin+0xfa>
 8001e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e54:	3328      	adds	r3, #40	; 0x28
 8001e56:	443b      	add	r3, r7
 8001e58:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	3a57      	subs	r2, #87	; 0x57
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	3328      	adds	r3, #40	; 0x28
 8001e6a:	443b      	add	r3, r7
 8001e6c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001e70:	e01f      	b.n	8001eb2 <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8001e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e76:	3328      	adds	r3, #40	; 0x28
 8001e78:	443b      	add	r3, r7
 8001e7a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001e7e:	2b40      	cmp	r3, #64	; 0x40
 8001e80:	d917      	bls.n	8001eb2 <hex2bin+0x13a>
 8001e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e86:	3328      	adds	r3, #40	; 0x28
 8001e88:	443b      	add	r3, r7
 8001e8a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001e8e:	2b46      	cmp	r3, #70	; 0x46
 8001e90:	d80f      	bhi.n	8001eb2 <hex2bin+0x13a>
 8001e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e96:	3328      	adds	r3, #40	; 0x28
 8001e98:	443b      	add	r3, r7
 8001e9a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	3a37      	subs	r2, #55	; 0x37
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	3328      	adds	r3, #40	; 0x28
 8001eac:	443b      	add	r3, r7
 8001eae:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 8001eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ebc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ec0:	7ffb      	ldrb	r3, [r7, #31]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d393      	bcc.n	8001dee <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 8001ec6:	7b3b      	ldrb	r3, [r7, #12]
 8001ec8:	011a      	lsls	r2, r3, #4
 8001eca:	7b7b      	ldrb	r3, [r7, #13]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 8001ed4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ed8:	f1c3 0303 	rsb	r3, r3, #3
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	6a3a      	ldr	r2, [r7, #32]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	623b      	str	r3, [r7, #32]
        k++;
 8001eea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 8001ef4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 8001efe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	f67f af6a 	bls.w	8001ddc <hex2bin+0x64>
    }

    return ret;
 8001f08:	6a3b      	ldr	r3, [r7, #32]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
	if (on)
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8001f24:	2201      	movs	r2, #1
 8001f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <errLedOn+0x34>)
 8001f2c:	f003 faa2 	bl	8005474 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 8001f30:	e005      	b.n	8001f3e <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <errLedOn+0x34>)
 8001f3a:	f003 fa9b 	bl	8005474 <HAL_GPIO_WritePin>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40020c00 	.word	0x40020c00

08001f4c <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
	return secCounter;
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <get_secCounter+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000350 	.word	0x20000350

08001f64 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
	secCounter++;
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <inc_secCounter+0x18>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <inc_secCounter+0x18>)
 8001f70:	6013      	str	r3, [r2, #0]
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	20000350 	.word	0x20000350

08001f80 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
	return msCounter;
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <get_msCounter+0x18>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000358 	.word	0x20000358

08001f9c <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
	msCounter++;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <inc_msCounter+0x20>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	1c50      	adds	r0, r2, #1
 8001fa8:	f143 0100 	adc.w	r1, r3, #0
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <inc_msCounter+0x20>)
 8001fae:	e9c3 0100 	strd	r0, r1, [r3]
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	20000358 	.word	0x20000358

08001fc0 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8001fc8:	f7ff ffc0 	bl	8001f4c <get_secCounter>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8001fe2:	f7ff ffb3 	bl	8001f4c <get_secCounter>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4293      	cmp	r3, r2
 8001fec:	bf94      	ite	ls
 8001fee:	2301      	movls	r3, #1
 8001ff0:	2300      	movhi	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b094      	sub	sp, #80	; 0x50
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	2000      	movs	r0, #0
 8002008:	460a      	mov	r2, r1
 800200a:	4603      	mov	r3, r0
 800200c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8002010:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002014:	f107 0320 	add.w	r3, r7, #32
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f00a fa0a 	bl	800c434 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8002020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002022:	b2db      	uxtb	r3, r3
 8002024:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8002026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3301      	adds	r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8002030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002032:	b2db      	uxtb	r3, r3
 8002034:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8002036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002038:	b2db      	uxtb	r3, r3
 800203a:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <set_Date+0xb0>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4413      	add	r3, r2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 800204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204c:	b2db      	uxtb	r3, r3
 800204e:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002052:	b2db      	uxtb	r3, r3
 8002054:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002056:	f107 030c 	add.w	r3, r7, #12
 800205a:	2200      	movs	r2, #0
 800205c:	4619      	mov	r1, r3
 800205e:	4814      	ldr	r0, [pc, #80]	; (80020b0 <set_Date+0xb4>)
 8002060:	f004 fa16 	bl	8006490 <HAL_RTC_SetTime>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <set_Date+0x7e>
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <set_Date+0xb8>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	f043 0308 	orr.w	r3, r3, #8
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <set_Date+0xb8>)
 8002076:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8002078:	e014      	b.n	80020a4 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	2200      	movs	r2, #0
 8002080:	4619      	mov	r1, r3
 8002082:	480b      	ldr	r0, [pc, #44]	; (80020b0 <set_Date+0xb4>)
 8002084:	f004 fafc 	bl	8006680 <HAL_RTC_SetDate>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <set_Date+0xa2>
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <set_Date+0xb8>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	b29a      	uxth	r2, r3
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <set_Date+0xb8>)
 800209a:	801a      	strh	r2, [r3, #0]
}
 800209c:	e002      	b.n	80020a4 <set_Date+0xa8>
			setDate = true;
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <set_Date+0xbc>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
}
 80020a4:	bf00      	nop
 80020a6:	3750      	adds	r7, #80	; 0x50
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20001365 	.word	0x20001365
 80020b0:	2000013c 	.word	0x2000013c
 80020b4:	2000034c 	.word	0x2000034c
 80020b8:	20001364 	.word	0x20001364

080020bc <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b093      	sub	sp, #76	; 0x4c
 80020c0:	af04      	add	r7, sp, #16
 80020c2:	6078      	str	r0, [r7, #4]
int ret = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 80020c8:	4b40      	ldr	r3, [pc, #256]	; (80021cc <sec2str+0x110>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	f083 0301 	eor.w	r3, r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d040      	beq.n	8002158 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 80020d6:	f7ff ff39 	bl	8001f4c <get_secCounter>
 80020da:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	4a3c      	ldr	r2, [pc, #240]	; (80021d0 <sec2str+0x114>)
 80020e0:	fba2 2303 	umull	r2, r3, r2, r3
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ea:	4a39      	ldr	r2, [pc, #228]	; (80021d0 <sec2str+0x114>)
 80020ec:	fba2 1203 	umull	r1, r2, r2, r3
 80020f0:	0c12      	lsrs	r2, r2, #16
 80020f2:	4938      	ldr	r1, [pc, #224]	; (80021d4 <sec2str+0x118>)
 80020f4:	fb01 f202 	mul.w	r2, r1, r2
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80020fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fe:	4a36      	ldr	r2, [pc, #216]	; (80021d8 <sec2str+0x11c>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	0adb      	lsrs	r3, r3, #11
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	4a33      	ldr	r2, [pc, #204]	; (80021d8 <sec2str+0x11c>)
 800210c:	fba2 1203 	umull	r1, r2, r2, r3
 8002110:	0ad2      	lsrs	r2, r2, #11
 8002112:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002116:	fb01 f202 	mul.w	r2, r1, r2
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	4a2e      	ldr	r2, [pc, #184]	; (80021dc <sec2str+0x120>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 800212a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <sec2str+0x120>)
 800212e:	fba3 1302 	umull	r1, r3, r3, r2
 8002132:	0959      	lsrs	r1, r3, #5
 8002134:	460b      	mov	r3, r1
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	1a5b      	subs	r3, r3, r1
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800214c:	4924      	ldr	r1, [pc, #144]	; (80021e0 <sec2str+0x124>)
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f00a fed8 	bl	800cf04 <siprintf>
 8002154:	6378      	str	r0, [r7, #52]	; 0x34
 8002156:	e034      	b.n	80021c2 <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	2200      	movs	r2, #0
 800215e:	4619      	mov	r1, r3
 8002160:	4820      	ldr	r0, [pc, #128]	; (80021e4 <sec2str+0x128>)
 8002162:	f004 fb11 	bl	8006788 <HAL_RTC_GetDate>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <sec2str+0xc0>
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <sec2str+0x12c>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <sec2str+0x12c>)
 8002178:	801a      	strh	r2, [r3, #0]
 800217a:	e022      	b.n	80021c2 <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	2200      	movs	r2, #0
 8002182:	4619      	mov	r1, r3
 8002184:	4817      	ldr	r0, [pc, #92]	; (80021e4 <sec2str+0x128>)
 8002186:	f004 fa1d 	bl	80065c4 <HAL_RTC_GetTime>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <sec2str+0xe4>
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <sec2str+0x12c>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	f043 0308 	orr.w	r3, r3, #8
 8002198:	b29a      	uxth	r2, r3
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <sec2str+0x12c>)
 800219c:	801a      	strh	r2, [r3, #0]
 800219e:	e010      	b.n	80021c2 <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 80021a0:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80021a2:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 80021a4:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80021a6:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 80021a8:	7c3b      	ldrb	r3, [r7, #16]
 80021aa:	7c7a      	ldrb	r2, [r7, #17]
 80021ac:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80021ae:	9102      	str	r1, [sp, #8]
 80021b0:	9201      	str	r2, [sp, #4]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	4623      	mov	r3, r4
 80021b6:	4602      	mov	r2, r0
 80021b8:	490c      	ldr	r1, [pc, #48]	; (80021ec <sec2str+0x130>)
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f00a fea2 	bl	800cf04 <siprintf>
 80021c0:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 80021c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	373c      	adds	r7, #60	; 0x3c
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd90      	pop	{r4, r7, pc}
 80021cc:	20001364 	.word	0x20001364
 80021d0:	c22e4507 	.word	0xc22e4507
 80021d4:	00015180 	.word	0x00015180
 80021d8:	91a2b3c5 	.word	0x91a2b3c5
 80021dc:	88888889 	.word	0x88888889
 80021e0:	0800dc70 	.word	0x0800dc70
 80021e4:	2000013c 	.word	0x2000013c
 80021e8:	2000034c 	.word	0x2000034c
 80021ec:	0800dc88 	.word	0x0800dc88

080021f0 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 80021f0:	b40e      	push	{r1, r2, r3}
 80021f2:	b590      	push	{r4, r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 80021fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002200:	613b      	str	r3, [r7, #16]
int dl = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8002206:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <Report+0xb4>)
 8002208:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d010      	beq.n	8002238 <Report+0x48>
		dl = sec2str(buf);
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff ff50 	bl	80020bc <sec2str>
 800221c:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7fd ffd6 	bl	80001d0 <strlen>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <Report+0xb8>)
 800222e:	6810      	ldr	r0, [r2, #0]
 8002230:	6018      	str	r0, [r3, #0]
		dl += 3;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3303      	adds	r3, #3
 8002236:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8002238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223c:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	18d0      	adds	r0, r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	1ad1      	subs	r1, r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224e:	f00a ffc1 	bl	800d1d4 <vsniprintf>

	uartRdy = false;
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <Report+0xbc>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <Report+0xc0>)
 800225a:	681c      	ldr	r4, [r3, #0]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f7fd ffb7 	bl	80001d0 <strlen>
 8002262:	4603      	mov	r3, r0
 8002264:	b29b      	uxth	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	68f9      	ldr	r1, [r7, #12]
 800226a:	4620      	mov	r0, r4
 800226c:	f005 fd88 	bl	8007d80 <HAL_UART_Transmit_DMA>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <Report+0x94>
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <Report+0xc4>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <Report+0xc4>)
 8002282:	801a      	strh	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 8002284:	bf00      	nop
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <Report+0xbc>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f083 0301 	eor.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f8      	bne.n	8002286 <Report+0x96>

	va_end(args);

	return 0;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80022a0:	b003      	add	sp, #12
 80022a2:	4770      	bx	lr
 80022a4:	20000360 	.word	0x20000360
 80022a8:	0800dca4 	.word	0x0800dca4
 80022ac:	20000060 	.word	0x20000060
 80022b0:	20000070 	.word	0x20000070
 80022b4:	2000034c 	.word	0x2000034c

080022b8 <HAL_UART_RxCpltCallback>:


#endif
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b090      	sub	sp, #64	; 0x40
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4aad      	ldr	r2, [pc, #692]	; (800257c <HAL_UART_RxCpltCallback+0x2c4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	f040 8265 	bne.w	8002796 <HAL_UART_RxCpltCallback+0x4de>

		rxBuf[ruk++] = (char)rxByte;
 80022cc:	4bac      	ldr	r3, [pc, #688]	; (8002580 <HAL_UART_RxCpltCallback+0x2c8>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	b291      	uxth	r1, r2
 80022d4:	4aaa      	ldr	r2, [pc, #680]	; (8002580 <HAL_UART_RxCpltCallback+0x2c8>)
 80022d6:	8011      	strh	r1, [r2, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4baa      	ldr	r3, [pc, #680]	; (8002584 <HAL_UART_RxCpltCallback+0x2cc>)
 80022dc:	7819      	ldrb	r1, [r3, #0]
 80022de:	4baa      	ldr	r3, [pc, #680]	; (8002588 <HAL_UART_RxCpltCallback+0x2d0>)
 80022e0:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 80022e2:	4ba8      	ldr	r3, [pc, #672]	; (8002584 <HAL_UART_RxCpltCallback+0x2cc>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b0a      	cmp	r3, #10
 80022e8:	f040 8250 	bne.w	800278c <HAL_UART_RxCpltCallback+0x4d4>
			rxBuf[--ruk] = '\0';
 80022ec:	4ba4      	ldr	r3, [pc, #656]	; (8002580 <HAL_UART_RxCpltCallback+0x2c8>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	4ba2      	ldr	r3, [pc, #648]	; (8002580 <HAL_UART_RxCpltCallback+0x2c8>)
 80022f6:	801a      	strh	r2, [r3, #0]
 80022f8:	4ba1      	ldr	r3, [pc, #644]	; (8002580 <HAL_UART_RxCpltCallback+0x2c8>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4ba2      	ldr	r3, [pc, #648]	; (8002588 <HAL_UART_RxCpltCallback+0x2d0>)
 8002300:	2100      	movs	r1, #0
 8002302:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8002304:	2300      	movs	r3, #0
 8002306:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 800230e:	4b9f      	ldr	r3, [pc, #636]	; (800258c <HAL_UART_RxCpltCallback+0x2d4>)
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8002314:	2300      	movs	r3, #0
 8002316:	83bb      	strh	r3, [r7, #28]
			if (strlen(rxBuf) >= 4) {
 8002318:	489b      	ldr	r0, [pc, #620]	; (8002588 <HAL_UART_RxCpltCallback+0x2d0>)
 800231a:	f7fd ff59 	bl	80001d0 <strlen>
 800231e:	4603      	mov	r3, r0
 8002320:	2b03      	cmp	r3, #3
 8002322:	f240 822d 	bls.w	8002780 <HAL_UART_RxCpltCallback+0x4c8>
				int8_t idx = -1;
 8002326:	23ff      	movs	r3, #255	; 0xff
 8002328:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002332:	e018      	b.n	8002366 <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8002334:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002338:	4a95      	ldr	r2, [pc, #596]	; (8002590 <HAL_UART_RxCpltCallback+0x2d8>)
 800233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233e:	4619      	mov	r1, r3
 8002340:	4891      	ldr	r0, [pc, #580]	; (8002588 <HAL_UART_RxCpltCallback+0x2d0>)
 8002342:	f00a fe79 	bl	800d038 <strstr>
 8002346:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_UART_RxCpltCallback+0xa0>
														  //"erase:"
														  //"check:"
														  //"log:"
														  //"info"
						  	  	  	  	  	  	  	  	  //"help"
						idx = i;
 800234e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002352:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 8002356:	e00a      	b.n	800236e <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002358:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3301      	adds	r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002366:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 800236a:	2b0a      	cmp	r3, #10
 800236c:	dde2      	ble.n	8002334 <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 800236e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002370:	4a85      	ldr	r2, [pc, #532]	; (8002588 <HAL_UART_RxCpltCallback+0x2d0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	f040 8204 	bne.w	8002780 <HAL_UART_RxCpltCallback+0x4c8>
 8002378:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002380:	f000 81fe 	beq.w	8002780 <HAL_UART_RxCpltCallback+0x4c8>
					nandLen = MAX_LEN_DATA;//256;
 8002384:	4b83      	ldr	r3, [pc, #524]	; (8002594 <HAL_UART_RxCpltCallback+0x2dc>)
 8002386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238a:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 800238c:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002390:	4a7f      	ldr	r2, [pc, #508]	; (8002590 <HAL_UART_RxCpltCallback+0x2d8>)
 8002392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fd ff1a 	bl	80001d0 <strlen>
 800239c:	4602      	mov	r2, r0
 800239e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a0:	4413      	add	r3, r2
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34
 80023a8:	2300      	movs	r3, #0
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ac:	2300      	movs	r3, #0
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 80023b0:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80023b4:	2b0a      	cmp	r3, #10
 80023b6:	f200 81a6 	bhi.w	8002706 <HAL_UART_RxCpltCallback+0x44e>
 80023ba:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <HAL_UART_RxCpltCallback+0x108>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	080023ed 	.word	0x080023ed
 80023c4:	080023f5 	.word	0x080023f5
 80023c8:	0800244d 	.word	0x0800244d
 80023cc:	080024c9 	.word	0x080024c9
 80023d0:	080024e9 	.word	0x080024e9
 80023d4:	08002655 	.word	0x08002655
 80023d8:	0800268b 	.word	0x0800268b
 80023dc:	080026ad 	.word	0x080026ad
 80023e0:	080023ed 	.word	0x080023ed
 80023e4:	080023ed 	.word	0x080023ed
 80023e8:	080023ed 	.word	0x080023ed
						case cmdHelp:
						case cmdInfo:
						case cmdRestart:
						case cmdMem:
							cmd_flag = 1;
 80023ec:	4b67      	ldr	r3, [pc, #412]	; (800258c <HAL_UART_RxCpltCallback+0x2d4>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
						break;
 80023f2:	e188      	b.n	8002706 <HAL_UART_RxCpltCallback+0x44e>
						case cmdEpoch:
							if (strlen(uk) < 10) {
 80023f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80023f6:	f7fd feeb 	bl	80001d0 <strlen>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b09      	cmp	r3, #9
 80023fe:	d802      	bhi.n	8002406 <HAL_UART_RxCpltCallback+0x14e>
								qcmd.attr = 1;
 8002400:	2301      	movs	r3, #1
 8002402:	777b      	strb	r3, [r7, #29]
 8002404:	e01e      	b.n	8002444 <HAL_UART_RxCpltCallback+0x18c>
							} else {
								uki = strchr(uk, ':');
 8002406:	213a      	movs	r1, #58	; 0x3a
 8002408:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800240a:	f00a fded 	bl	800cfe8 <strchr>
 800240e:	6378      	str	r0, [r7, #52]	; 0x34
								if (uki) {
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00c      	beq.n	8002430 <HAL_UART_RxCpltCallback+0x178>
									tZone = (uint8_t)atol(uki + 1);
 8002416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002418:	3301      	adds	r3, #1
 800241a:	4618      	mov	r0, r3
 800241c:	f009 ff02 	bl	800c224 <atol>
 8002420:	4603      	mov	r3, r0
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <HAL_UART_RxCpltCallback+0x2e0>)
 8002426:	701a      	strb	r2, [r3, #0]
									*uki = '\0';
 8002428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	e002      	b.n	8002436 <HAL_UART_RxCpltCallback+0x17e>
								} else {
									tZone = 0;
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_UART_RxCpltCallback+0x2e0>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
								}
								epoch = (uint32_t)atol(uk);
 8002436:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002438:	f009 fef4 	bl	800c224 <atol>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	4b56      	ldr	r3, [pc, #344]	; (800259c <HAL_UART_RxCpltCallback+0x2e4>)
 8002442:	601a      	str	r2, [r3, #0]
							}
							cmd_flag = 1;
 8002444:	4b51      	ldr	r3, [pc, #324]	; (800258c <HAL_UART_RxCpltCallback+0x2d4>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
						break;
 800244a:	e15c      	b.n	8002706 <HAL_UART_RxCpltCallback+0x44e>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 800244c:	213a      	movs	r1, #58	; 0x3a
 800244e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002450:	f00a fdca 	bl	800cfe8 <strchr>
 8002454:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_UART_RxCpltCallback+0x1bc>
								nandLen = atol(uki + 1);
 800245c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245e:	3301      	adds	r3, #1
 8002460:	4618      	mov	r0, r3
 8002462:	f009 fedf 	bl	800c224 <atol>
 8002466:	4603      	mov	r3, r0
 8002468:	b29a      	uxth	r2, r3
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_UART_RxCpltCallback+0x2dc>)
 800246c:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 800246e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8002474:	494a      	ldr	r1, [pc, #296]	; (80025a0 <HAL_UART_RxCpltCallback+0x2e8>)
 8002476:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002478:	f00a fdde 	bl	800d038 <strstr>
 800247c:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 800247e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00f      	beq.n	80024a4 <HAL_UART_RxCpltCallback+0x1ec>
								uki += 2;
 8002484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002486:	3302      	adds	r3, #2
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 800248a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800248c:	f7fd fea0 	bl	80001d0 <strlen>
 8002490:	4603      	mov	r3, r0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4619      	mov	r1, r3
 8002496:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002498:	f7ff fc6e 	bl	8001d78 <hex2bin>
 800249c:	4603      	mov	r3, r0
 800249e:	4a41      	ldr	r2, [pc, #260]	; (80025a4 <HAL_UART_RxCpltCallback+0x2ec>)
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e006      	b.n	80024b2 <HAL_UART_RxCpltCallback+0x1fa>
							} else {
								nandAdr = atol(uk);
 80024a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024a6:	f009 febd 	bl	800c224 <atol>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <HAL_UART_RxCpltCallback+0x2ec>)
 80024b0:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 80024b2:	4b3c      	ldr	r3, [pc, #240]	; (80025a4 <HAL_UART_RxCpltCallback+0x2ec>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <HAL_UART_RxCpltCallback+0x2f0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a39      	ldr	r2, [pc, #228]	; (80025a4 <HAL_UART_RxCpltCallback+0x2ec>)
 80024be:	6013      	str	r3, [r2, #0]
							check = true;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 80024c6:	e11e      	b.n	8002706 <HAL_UART_RxCpltCallback+0x44e>
						case cmdNext://"next";
							//if (nandAdr < devAdr) nandAdr = devAdr;
							nandLen = 512;
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_UART_RxCpltCallback+0x2dc>)
 80024ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ce:	801a      	strh	r2, [r3, #0]
							nandAdr += nandLen;
 80024d0:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_UART_RxCpltCallback+0x2dc>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <HAL_UART_RxCpltCallback+0x2ec>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a31      	ldr	r2, [pc, #196]	; (80025a4 <HAL_UART_RxCpltCallback+0x2ec>)
 80024de:	6013      	str	r3, [r2, #0]
							check = true;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 80024e6:	e10e      	b.n	8002706 <HAL_UART_RxCpltCallback+0x44e>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 80024ee:	492c      	ldr	r1, [pc, #176]	; (80025a0 <HAL_UART_RxCpltCallback+0x2e8>)
 80024f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024f2:	f00a fda1 	bl	800d038 <strstr>
 80024f6:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_UART_RxCpltCallback+0x25c>
								if (uki == uk) {
 80024fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002502:	429a      	cmp	r2, r3
 8002504:	d108      	bne.n	8002518 <HAL_UART_RxCpltCallback+0x260>
									uki += 2;
 8002506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002508:	3302      	adds	r3, #2
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 800250c:	2301      	movs	r3, #1
 800250e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002512:	e001      	b.n	8002518 <HAL_UART_RxCpltCallback+0x260>
								}
							} else uki = uk;
 8002514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002516:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 8002518:	213a      	movs	r1, #58	; 0x3a
 800251a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800251c:	f00a fd64 	bl	800cfe8 <strchr>
 8002520:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80eb 	beq.w	8002700 <HAL_UART_RxCpltCallback+0x448>
								ukb = uke + 1;
 800252a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252c:	3301      	adds	r3, #1
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	2210      	movs	r2, #16
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f00a f865 	bl	800c608 <memset>
								memcpy(tmp, uki, uke - uki);
 800253e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	461a      	mov	r2, r3
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800254c:	4618      	mov	r0, r3
 800254e:	f00a f84d 	bl	800c5ec <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 8002552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002556:	2b00      	cmp	r3, #0
 8002558:	d028      	beq.n	80025ac <HAL_UART_RxCpltCallback+0x2f4>
 800255a:	f107 030c 	add.w	r3, r7, #12
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd fe36 	bl	80001d0 <strlen>
 8002564:	4603      	mov	r3, r0
 8002566:	b2da      	uxtb	r2, r3
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fc02 	bl	8001d78 <hex2bin>
 8002574:	4603      	mov	r3, r0
 8002576:	4a0b      	ldr	r2, [pc, #44]	; (80025a4 <HAL_UART_RxCpltCallback+0x2ec>)
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e020      	b.n	80025be <HAL_UART_RxCpltCallback+0x306>
 800257c:	40004800 	.word	0x40004800
 8002580:	20001362 	.word	0x20001362
 8002584:	20001360 	.word	0x20001360
 8002588:	20000b60 	.word	0x20000b60
 800258c:	2000034e 	.word	0x2000034e
 8002590:	20000008 	.word	0x20000008
 8002594:	20001378 	.word	0x20001378
 8002598:	20001365 	.word	0x20001365
 800259c:	20000064 	.word	0x20000064
 80025a0:	0800dca8 	.word	0x0800dca8
 80025a4:	20001374 	.word	0x20001374
 80025a8:	20001370 	.word	0x20001370
								    else nandAdr = atol(tmp);
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	4618      	mov	r0, r3
 80025b2:	f009 fe37 	bl	800c224 <atol>
 80025b6:	4603      	mov	r3, r0
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b79      	ldr	r3, [pc, #484]	; (80027a0 <HAL_UART_RxCpltCallback+0x4e8>)
 80025bc:	601a      	str	r2, [r3, #0]
								uki = ukb;
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 80025c2:	213a      	movs	r1, #58	; 0x3a
 80025c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80025c6:	f00a fd0f 	bl	800cfe8 <strchr>
 80025ca:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_UART_RxCpltCallback+0x332>
									nandLen = atol(uke + 1);
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	3301      	adds	r3, #1
 80025d6:	4618      	mov	r0, r3
 80025d8:	f009 fe24 	bl	800c224 <atol>
 80025dc:	4603      	mov	r3, r0
 80025de:	b29a      	uxth	r2, r3
 80025e0:	4b70      	ldr	r3, [pc, #448]	; (80027a4 <HAL_UART_RxCpltCallback+0x4ec>)
 80025e2:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 80025ea:	496f      	ldr	r1, [pc, #444]	; (80027a8 <HAL_UART_RxCpltCallback+0x4f0>)
 80025ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ee:	f00a fd23 	bl	800d038 <strstr>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d006      	beq.n	8002606 <HAL_UART_RxCpltCallback+0x34e>
									ukb += 2;
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	3302      	adds	r3, #2
 80025fc:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002604:	e002      	b.n	800260c <HAL_UART_RxCpltCallback+0x354>
								} else hex = false;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 800260c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00d      	beq.n	8002630 <HAL_UART_RxCpltCallback+0x378>
 8002614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002616:	f7fd fddb 	bl	80001d0 <strlen>
 800261a:	4603      	mov	r3, r0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4619      	mov	r1, r3
 8002620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002622:	f7ff fba9 	bl	8001d78 <hex2bin>
 8002626:	4603      	mov	r3, r0
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b60      	ldr	r3, [pc, #384]	; (80027ac <HAL_UART_RxCpltCallback+0x4f4>)
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e006      	b.n	800263e <HAL_UART_RxCpltCallback+0x386>
								    else nandByte = (uint8_t)atol(ukb);
 8002630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002632:	f009 fdf7 	bl	800c224 <atol>
 8002636:	4603      	mov	r3, r0
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b5c      	ldr	r3, [pc, #368]	; (80027ac <HAL_UART_RxCpltCallback+0x4f4>)
 800263c:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 800263e:	4b58      	ldr	r3, [pc, #352]	; (80027a0 <HAL_UART_RxCpltCallback+0x4e8>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <HAL_UART_RxCpltCallback+0x4f8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4413      	add	r3, r2
 8002648:	4a55      	ldr	r2, [pc, #340]	; (80027a0 <HAL_UART_RxCpltCallback+0x4e8>)
 800264a:	6013      	str	r3, [r2, #0]
								check = true;
 800264c:	2301      	movs	r3, #1
 800264e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							}
						}
						break;
 8002652:	e055      	b.n	8002700 <HAL_UART_RxCpltCallback+0x448>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 8002654:	4957      	ldr	r1, [pc, #348]	; (80027b4 <HAL_UART_RxCpltCallback+0x4fc>)
 8002656:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002658:	f00a fcee 	bl	800d038 <strstr>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_UART_RxCpltCallback+0x3b0>
								qcmd.attr = 1;
 8002662:	2301      	movs	r3, #1
 8002664:	777b      	strb	r3, [r7, #29]
 8002666:	e00c      	b.n	8002682 <HAL_UART_RxCpltCallback+0x3ca>
							} else {
								uint32_t blk = atol(uk);
 8002668:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800266a:	f009 fddb 	bl	800c224 <atol>
 800266e:	4603      	mov	r3, r0
 8002670:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 8002672:	4b51      	ldr	r3, [pc, #324]	; (80027b8 <HAL_UART_RxCpltCallback+0x500>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	6a3a      	ldr	r2, [r7, #32]
 8002678:	429a      	cmp	r2, r3
 800267a:	d202      	bcs.n	8002682 <HAL_UART_RxCpltCallback+0x3ca>
 800267c:	4a4f      	ldr	r2, [pc, #316]	; (80027bc <HAL_UART_RxCpltCallback+0x504>)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	6013      	str	r3, [r2, #0]
							}
							cmd_flag = 1;
 8002682:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <HAL_UART_RxCpltCallback+0x508>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
						break;
 8002688:	e03d      	b.n	8002706 <HAL_UART_RxCpltCallback+0x44e>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 800268a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800268c:	f009 fdca 	bl	800c224 <atol>
 8002690:	4603      	mov	r3, r0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < total_pages) {//128MB / 2K = 65536 - pages
 8002694:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <HAL_UART_RxCpltCallback+0x50c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269a:	429a      	cmp	r2, r3
 800269c:	d232      	bcs.n	8002704 <HAL_UART_RxCpltCallback+0x44c>
								nandPage = page;
 800269e:	4a4a      	ldr	r2, [pc, #296]	; (80027c8 <HAL_UART_RxCpltCallback+0x510>)
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	6013      	str	r3, [r2, #0]
								cmd_flag = 1;
 80026a4:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <HAL_UART_RxCpltCallback+0x508>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 80026aa:	e02b      	b.n	8002704 <HAL_UART_RxCpltCallback+0x44c>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 80026ac:	2303      	movs	r3, #3
 80026ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							if (strstr(uk, "off")) {
 80026b2:	4946      	ldr	r1, [pc, #280]	; (80027cc <HAL_UART_RxCpltCallback+0x514>)
 80026b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80026b6:	f00a fcbf 	bl	800d038 <strstr>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_UART_RxCpltCallback+0x410>
								lg = logOff;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80026c6:	e014      	b.n	80026f2 <HAL_UART_RxCpltCallback+0x43a>
							} else if (strstr(uk, "on")) {
 80026c8:	4941      	ldr	r1, [pc, #260]	; (80027d0 <HAL_UART_RxCpltCallback+0x518>)
 80026ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80026cc:	f00a fcb4 	bl	800d038 <strstr>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_UART_RxCpltCallback+0x426>
								lg = logOn;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80026dc:	e009      	b.n	80026f2 <HAL_UART_RxCpltCallback+0x43a>
							} else if (strstr(uk, "dump")) {
 80026de:	493d      	ldr	r1, [pc, #244]	; (80027d4 <HAL_UART_RxCpltCallback+0x51c>)
 80026e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80026e2:	f00a fca9 	bl	800d038 <strstr>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_UART_RxCpltCallback+0x43a>
								lg = logDump;
 80026ec:	2302      	movs	r3, #2
 80026ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							}
							qcmd.attr = lg;
 80026f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026f6:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 80026f8:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_UART_RxCpltCallback+0x508>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
						}
						break;
 80026fe:	e002      	b.n	8002706 <HAL_UART_RxCpltCallback+0x44e>
						break;
 8002700:	bf00      	nop
 8002702:	e000      	b.n	8002706 <HAL_UART_RxCpltCallback+0x44e>
						break;
 8002704:	bf00      	nop
					}
					qcmd.cmd = idx;
 8002706:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800270a:	773b      	strb	r3, [r7, #28]
					if (check) {
 800270c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01b      	beq.n	800274c <HAL_UART_RxCpltCallback+0x494>
						if ((nandAdr + nandLen) >= (total_bytes + devAdr)) {
 8002714:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <HAL_UART_RxCpltCallback+0x4ec>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <HAL_UART_RxCpltCallback+0x4e8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	441a      	add	r2, r3
 8002720:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_UART_RxCpltCallback+0x520>)
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_UART_RxCpltCallback+0x4f8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	440b      	add	r3, r1
 800272a:	429a      	cmp	r2, r3
 800272c:	d30b      	bcc.n	8002746 <HAL_UART_RxCpltCallback+0x48e>
							nandLen = total_bytes - nandAdr - 1;
 800272e:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <HAL_UART_RxCpltCallback+0x520>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29a      	uxth	r2, r3
 8002734:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <HAL_UART_RxCpltCallback+0x4e8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_UART_RxCpltCallback+0x4ec>)
 8002744:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <HAL_UART_RxCpltCallback+0x508>)
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]
					}
					//
					if (cmd_flag) {
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <HAL_UART_RxCpltCallback+0x508>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <HAL_UART_RxCpltCallback+0x4c8>
						if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_UART_RxCpltCallback+0x524>)
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	f107 011c 	add.w	r1, r7, #28
 800275c:	2300      	movs	r3, #0
 800275e:	2205      	movs	r2, #5
 8002760:	f006 fe60 	bl	8009424 <osMessageQueuePut>
 8002764:	4603      	mov	r3, r0
 8002766:	4a1e      	ldr	r2, [pc, #120]	; (80027e0 <HAL_UART_RxCpltCallback+0x528>)
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_UART_RxCpltCallback+0x528>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d006      	beq.n	8002780 <HAL_UART_RxCpltCallback+0x4c8>
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <HAL_UART_RxCpltCallback+0x52c>)
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800277a:	b29a      	uxth	r2, r3
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_UART_RxCpltCallback+0x52c>)
 800277e:	801a      	strh	r2, [r3, #0]
					}
					//
				}
			}
			ruk = 0;
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_UART_RxCpltCallback+0x530>)
 8002782:	2200      	movs	r2, #0
 8002784:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8002786:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_UART_RxCpltCallback+0x534>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 800278c:	2201      	movs	r2, #1
 800278e:	4918      	ldr	r1, [pc, #96]	; (80027f0 <HAL_UART_RxCpltCallback+0x538>)
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f005 fac4 	bl	8007d1e <HAL_UART_Receive_IT>
	}
}
 8002796:	bf00      	nop
 8002798:	3740      	adds	r7, #64	; 0x40
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20001374 	.word	0x20001374
 80027a4:	20001378 	.word	0x20001378
 80027a8:	0800dca8 	.word	0x0800dca8
 80027ac:	20000080 	.word	0x20000080
 80027b0:	20001370 	.word	0x20001370
 80027b4:	0800dcac 	.word	0x0800dcac
 80027b8:	20001390 	.word	0x20001390
 80027bc:	2000137c 	.word	0x2000137c
 80027c0:	2000034e 	.word	0x2000034e
 80027c4:	20001368 	.word	0x20001368
 80027c8:	20001380 	.word	0x20001380
 80027cc:	0800dcb0 	.word	0x0800dcb0
 80027d0:	0800dcb4 	.word	0x0800dcb4
 80027d4:	0800dcb8 	.word	0x0800dcb8
 80027d8:	2000136c 	.word	0x2000136c
 80027dc:	20000344 	.word	0x20000344
 80027e0:	200013b0 	.word	0x200013b0
 80027e4:	2000034c 	.word	0x2000034c
 80027e8:	20001362 	.word	0x20001362
 80027ec:	20000b60 	.word	0x20000b60
 80027f0:	20001360 	.word	0x20001360

080027f4 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a05      	ldr	r2, [pc, #20]	; (8002818 <HAL_UART_TxCpltCallback+0x24>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d102      	bne.n	800280c <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_UART_TxCpltCallback+0x28>)
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
	}
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40004800 	.word	0x40004800
 800281c:	20000060 	.word	0x20000060

08002820 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a05      	ldr	r2, [pc, #20]	; (8002844 <HAL_SPI_TxCpltCallback+0x24>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d102      	bne.n	8002838 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_SPI_TxCpltCallback+0x28>)
 8002834:	2201      	movs	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
	}
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	40013000 	.word	0x40013000
 8002848:	20000061 	.word	0x20000061

0800284c <HAL_NAND_ITCallback>:
//-------------------------------------------------------------------------------------------
void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	cb_nandCounter++;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_NAND_ITCallback+0x20>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3301      	adds	r3, #1
 800285a:	4a04      	ldr	r2, [pc, #16]	; (800286c <HAL_NAND_ITCallback+0x20>)
 800285c:	6013      	str	r3, [r2, #0]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20001384 	.word	0x20001384

08002870 <showBuf>:
	}
}
*/
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08e      	sub	sp, #56	; 0x38
 8002874:	af02      	add	r7, sp, #8
 8002876:	60ba      	str	r2, [r7, #8]
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	4603      	mov	r3, r0
 800287c:	73fb      	strb	r3, [r7, #15]
 800287e:	460b      	mov	r3, r1
 8002880:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8002882:	2320      	movs	r3, #32
 8002884:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (type == 2) {
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d10e      	bne.n	80028b2 <showBuf+0x42>
		if (rd) {
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <showBuf+0x3e>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <showBuf+0x154>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3b01      	subs	r3, #1
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	4013      	ands	r3, r2
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
			max_ind = chipConf.PageSize;
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <showBuf+0x154>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ac:	e001      	b.n	80028b2 <showBuf+0x42>
		} else ind = max_ind;
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 80028b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d271      	bcs.n	800299e <showBuf+0x12e>
		bool done = false;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80028d6:	fb01 f202 	mul.w	r2, r1, r2
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <showBuf+0x76>
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	3301      	adds	r3, #1
 80028e4:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <showBuf+0x158>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
		while (!done) {
 80028ec:	e046      	b.n	800297c <showBuf+0x10c>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 80028ee:	4836      	ldr	r0, [pc, #216]	; (80029c8 <showBuf+0x158>)
 80028f0:	f7fd fc6e 	bl	80001d0 <strlen>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4a34      	ldr	r2, [pc, #208]	; (80029c8 <showBuf+0x158>)
 80028f8:	4413      	add	r3, r2
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	4933      	ldr	r1, [pc, #204]	; (80029cc <showBuf+0x15c>)
 80028fe:	4618      	mov	r0, r3
 8002900:	f00a fb00 	bl	800cf04 <siprintf>
			for (int i = 0; i < step; i++) {
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	e01d      	b.n	8002946 <showBuf+0xd6>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 800290a:	482f      	ldr	r0, [pc, #188]	; (80029c8 <showBuf+0x158>)
 800290c:	f7fd fc60 	bl	80001d0 <strlen>
 8002910:	4603      	mov	r3, r0
 8002912:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <showBuf+0x158>)
 8002914:	1898      	adds	r0, r3, r2
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	4413      	add	r3, r2
 800291c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800291e:	4413      	add	r3, r2
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	492a      	ldr	r1, [pc, #168]	; (80029d0 <showBuf+0x160>)
 8002926:	f00a faed 	bl	800cf04 <siprintf>
				ix++;
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	3301      	adds	r3, #1
 800292e:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d103      	bne.n	8002940 <showBuf+0xd0>
					done = true;
 8002938:	2301      	movs	r3, #1
 800293a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 800293e:	e006      	b.n	800294e <showBuf+0xde>
			for (int i = 0; i < step; i++) {
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	3301      	adds	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	429a      	cmp	r2, r3
 800294c:	dbdd      	blt.n	800290a <showBuf+0x9a>
				}
			}
			strcat(stx, eol);
 800294e:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <showBuf+0x164>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4619      	mov	r1, r3
 8002954:	481c      	ldr	r0, [pc, #112]	; (80029c8 <showBuf+0x158>)
 8002956:	f00a fb38 	bl	800cfca <strcat>
			adr += step;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	4413      	add	r3, r2
 8002960:	60bb      	str	r3, [r7, #8]
			ind += step;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002966:	4413      	add	r3, r2
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b01      	subs	r3, #1
 800296e:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d102      	bne.n	800297c <showBuf+0x10c>
 8002976:	2301      	movs	r3, #1
 8002978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 800297c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002980:	f083 0301 	eor.w	r3, r3, #1
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1b1      	bne.n	80028ee <showBuf+0x7e>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <showBuf+0x168>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d014      	beq.n	80029bc <showBuf+0x14c>
 8002992:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <showBuf+0x158>)
 8002994:	4911      	ldr	r1, [pc, #68]	; (80029dc <showBuf+0x16c>)
 8002996:	2000      	movs	r0, #0
 8002998:	f7ff fc2a 	bl	80021f0 <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 800299c:	e00e      	b.n	80029bc <showBuf+0x14c>
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <showBuf+0x168>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <showBuf+0x14c>
 80029a6:	7bbb      	ldrb	r3, [r7, #14]
 80029a8:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <showBuf+0x164>)
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	9201      	str	r2, [sp, #4]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b4:	490a      	ldr	r1, [pc, #40]	; (80029e0 <showBuf+0x170>)
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7ff fc1a 	bl	80021f0 <Report>
}
 80029bc:	bf00      	nop
 80029be:	3730      	adds	r7, #48	; 0x30
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20001390 	.word	0x20001390
 80029c8:	200013b4 	.word	0x200013b4
 80029cc:	0800dcc0 	.word	0x0800dcc0
 80029d0:	0800dcc8 	.word	0x0800dcc8
 80029d4:	20000004 	.word	0x20000004
 80029d8:	20000062 	.word	0x20000062
 80029dc:	0800dcd0 	.word	0x0800dcd0
 80029e0:	0800dcd4 	.word	0x0800dcd4
 80029e4:	00000000 	.word	0x00000000

080029e8 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
 80029ee:	af04      	add	r7, sp, #16
 80029f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80029f4:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80029f8:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(500);
 80029fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029fe:	f001 fe95 	bl	800472c <HAL_Delay>
	if (dbg != logOff) {
 8002a02:	4b52      	ldr	r3, [pc, #328]	; (8002b4c <defThread+0x164>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d018      	beq.n	8002a3c <defThread+0x54>
		Report(0, "%s", eol);
 8002a0a:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <defThread+0x168>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4950      	ldr	r1, [pc, #320]	; (8002b54 <defThread+0x16c>)
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7ff fbec 	bl	80021f0 <Report>
		Report(1, "%s Старт '%s' FreeRTOS memory: free=%lu heap=%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8002a18:	4b4f      	ldr	r3, [pc, #316]	; (8002b58 <defThread+0x170>)
 8002a1a:	681c      	ldr	r4, [r3, #0]
 8002a1c:	f009 fad2 	bl	800bfc4 <xPortGetFreeHeapSize>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b4b      	ldr	r3, [pc, #300]	; (8002b50 <defThread+0x168>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	9200      	str	r2, [sp, #0]
 8002a30:	4b4a      	ldr	r3, [pc, #296]	; (8002b5c <defThread+0x174>)
 8002a32:	4622      	mov	r2, r4
 8002a34:	494a      	ldr	r1, [pc, #296]	; (8002b60 <defThread+0x178>)
 8002a36:	2001      	movs	r0, #1
 8002a38:	f7ff fbda 	bl	80021f0 <Report>
	}

	uint8_t byte = logOff;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 3451 	strb.w	r3, [r7, #1105]	; 0x451
	uint8_t next_block_erase = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
	uint32_t iBlk, stik;
	uint8_t nand_show = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
	bool readed = false;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3462 	strb.w	r3, [r7, #1122]	; 0x462
	char cid[32];
	uint32_t BlockSizeKB = (chipConf.BlockSize * chipConf.PageSize ) / 1024;
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <defThread+0x17c>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a42      	ldr	r2, [pc, #264]	; (8002b64 <defThread+0x17c>)
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	0a9b      	lsrs	r3, r3, #10
 8002a62:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
	uint32_t PlaneSizeMB = chipConf.PlaneSize / 1024 / 1024;
 8002a66:	4b3f      	ldr	r3, [pc, #252]	; (8002b64 <defThread+0x17c>)
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	0d1b      	lsrs	r3, r3, #20
 8002a6c:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
	uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8002a70:	4b3d      	ldr	r3, [pc, #244]	; (8002b68 <defThread+0x180>)
 8002a72:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
	if (nandState == HAL_NAND_STATE_READY) {
 8002a76:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <defThread+0x184>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	f040 8086 	bne.w	8002b8c <defThread+0x1a4>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <defThread+0x180>)
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	22f1      	movs	r2, #241	; 0xf1
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d108      	bne.n	8002a9c <defThread+0xb4>
 8002a8a:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <defThread+0x188>)
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002a92:	2220      	movs	r2, #32
 8002a94:	4618      	mov	r0, r3
 8002a96:	f00a fabc 	bl	800d012 <strncpy>
 8002a9a:	e006      	b.n	8002aaa <defThread+0xc2>
		                               else strcpy(cid, "UNKNOWN");
 8002a9c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002aa0:	4a34      	ldr	r2, [pc, #208]	; (8002b74 <defThread+0x18c>)
 8002aa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aa6:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8002aaa:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <defThread+0x190>)
 8002aac:	4a33      	ldr	r2, [pc, #204]	; (8002b7c <defThread+0x194>)
 8002aae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ab2:	6018      	str	r0, [r3, #0]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	8019      	strh	r1, [r3, #0]
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f887 3461 	strb.w	r3, [r7, #1121]	; 0x461
 8002abe:	e016      	b.n	8002aee <defThread+0x106>
 8002ac0:	482d      	ldr	r0, [pc, #180]	; (8002b78 <defThread+0x190>)
 8002ac2:	f7fd fb85 	bl	80001d0 <strlen>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4a2b      	ldr	r2, [pc, #172]	; (8002b78 <defThread+0x190>)
 8002aca:	1898      	adds	r0, r3, r2
 8002acc:	f997 3461 	ldrsb.w	r3, [r7, #1121]	; 0x461
 8002ad0:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4929      	ldr	r1, [pc, #164]	; (8002b80 <defThread+0x198>)
 8002adc:	f00a fa12 	bl	800cf04 <siprintf>
 8002ae0:	f997 3461 	ldrsb.w	r3, [r7, #1121]	; 0x461
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f887 3461 	strb.w	r3, [r7, #1121]	; 0x461
 8002aee:	f897 3461 	ldrb.w	r3, [r7, #1121]	; 0x461
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d9e4      	bls.n	8002ac0 <defThread+0xd8>
		sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8002af6:	4820      	ldr	r0, [pc, #128]	; (8002b78 <defThread+0x190>)
 8002af8:	f7fd fb6a 	bl	80001d0 <strlen>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <defThread+0x190>)
 8002b00:	1898      	adds	r0, r3, r2
 8002b02:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <defThread+0x180>)
 8002b04:	785b      	ldrb	r3, [r3, #1]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002b0c:	491d      	ldr	r1, [pc, #116]	; (8002b84 <defThread+0x19c>)
 8002b0e:	f00a f9f9 	bl	800cf04 <siprintf>
		sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB",
 8002b12:	4819      	ldr	r0, [pc, #100]	; (8002b78 <defThread+0x190>)
 8002b14:	f7fd fb5c 	bl	80001d0 <strlen>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4a17      	ldr	r2, [pc, #92]	; (8002b78 <defThread+0x190>)
 8002b1c:	1898      	adds	r0, r3, r2
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <defThread+0x17c>)
 8002b20:	681c      	ldr	r4, [r3, #0]
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <defThread+0x17c>)
 8002b24:	685d      	ldr	r5, [r3, #4]
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <defThread+0x17c>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <defThread+0x17c>)
 8002b2c:	6912      	ldr	r2, [r2, #16]
 8002b2e:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 8002b32:	9103      	str	r1, [sp, #12]
 8002b34:	9202      	str	r2, [sp, #8]
 8002b36:	9301      	str	r3, [sp, #4]
 8002b38:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	462b      	mov	r3, r5
 8002b40:	4622      	mov	r2, r4
 8002b42:	4911      	ldr	r1, [pc, #68]	; (8002b88 <defThread+0x1a0>)
 8002b44:	f00a f9de 	bl	800cf04 <siprintf>
 8002b48:	e02d      	b.n	8002ba6 <defThread+0x1be>
 8002b4a:	bf00      	nop
 8002b4c:	20000062 	.word	0x20000062
 8002b50:	20000004 	.word	0x20000004
 8002b54:	0800dcd0 	.word	0x0800dcd0
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	080112cc 	.word	0x080112cc
 8002b60:	0800dcfc 	.word	0x0800dcfc
 8002b64:	20001390 	.word	0x20001390
 8002b68:	20001388 	.word	0x20001388
 8002b6c:	20000081 	.word	0x20000081
 8002b70:	20000084 	.word	0x20000084
 8002b74:	0800dd3c 	.word	0x0800dd3c
 8002b78:	200013b4 	.word	0x200013b4
 8002b7c:	0800dd44 	.word	0x0800dd44
 8002b80:	0800dcc8 	.word	0x0800dcc8
 8002b84:	0800dd4c 	.word	0x0800dd4c
 8002b88:	0800dd64 	.word	0x0800dd64
					chipConf.BlockNbr,
					chipConf.PlaneNbr,
					PlaneSizeMB);
	} else {
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
					     nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8002b8c:	4bb4      	ldr	r3, [pc, #720]	; (8002e60 <defThread+0x478>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 8002b94:	4ab3      	ldr	r2, [pc, #716]	; (8002e64 <defThread+0x47c>)
 8002b96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b9a:	4bb1      	ldr	r3, [pc, #708]	; (8002e60 <defThread+0x478>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	49b2      	ldr	r1, [pc, #712]	; (8002e68 <defThread+0x480>)
 8002ba0:	48b2      	ldr	r0, [pc, #712]	; (8002e6c <defThread+0x484>)
 8002ba2:	f00a f9af 	bl	800cf04 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8002ba6:	4bb2      	ldr	r3, [pc, #712]	; (8002e70 <defThread+0x488>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <defThread+0x1d4>
 8002bae:	4bb1      	ldr	r3, [pc, #708]	; (8002e74 <defThread+0x48c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4aae      	ldr	r2, [pc, #696]	; (8002e6c <defThread+0x484>)
 8002bb4:	49b0      	ldr	r1, [pc, #704]	; (8002e78 <defThread+0x490>)
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f7ff fb1a 	bl	80021f0 <Report>


	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8002bc2:	4bae      	ldr	r3, [pc, #696]	; (8002e7c <defThread+0x494>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	785b      	ldrb	r3, [r3, #1]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002bce:	9200      	str	r2, [sp, #0]
 8002bd0:	22ef      	movs	r2, #239	; 0xef
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f001 f82e 	bl	8003c36 <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8002bda:	4ba8      	ldr	r3, [pc, #672]	; (8002e7c <defThread+0x494>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	785b      	ldrb	r3, [r3, #1]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002be6:	b299      	uxth	r1, r3
 8002be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	23ef      	movs	r3, #239	; 0xef
 8002bf0:	22ef      	movs	r2, #239	; 0xef
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f001 f81f 	bl	8003c36 <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 8002bf8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002bfc:	f107 0310 	add.w	r3, r7, #16
 8002c00:	499f      	ldr	r1, [pc, #636]	; (8002e80 <defThread+0x498>)
 8002c02:	4618      	mov	r0, r3
 8002c04:	f00a f97e 	bl	800cf04 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 8002c08:	4b9e      	ldr	r3, [pc, #632]	; (8002e84 <defThread+0x49c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	23f0      	movs	r3, #240	; 0xf0
 8002c12:	fb93 f3f2 	sdiv	r3, r3, r2
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	f107 0310 	add.w	r3, r7, #16
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 f916 	bl	8003e50 <mkLineCenter>
	sprintf(screen+strlen(screen),
 8002c24:	f107 0310 	add.w	r3, r7, #16
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fad1 	bl	80001d0 <strlen>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	1898      	adds	r0, r3, r2
 8002c36:	4b94      	ldr	r3, [pc, #592]	; (8002e88 <defThread+0x4a0>)
 8002c38:	681c      	ldr	r4, [r3, #0]
 8002c3a:	4b93      	ldr	r3, [pc, #588]	; (8002e88 <defThread+0x4a0>)
 8002c3c:	685d      	ldr	r5, [r3, #4]
 8002c3e:	4b92      	ldr	r3, [pc, #584]	; (8002e88 <defThread+0x4a0>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	4a91      	ldr	r2, [pc, #580]	; (8002e88 <defThread+0x4a0>)
 8002c44:	6912      	ldr	r2, [r2, #16]
 8002c46:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 8002c4a:	9103      	str	r1, [sp, #12]
 8002c4c:	9202      	str	r2, [sp, #8]
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	462b      	mov	r3, r5
 8002c58:	4622      	mov	r2, r4
 8002c5a:	498c      	ldr	r1, [pc, #560]	; (8002e8c <defThread+0x4a4>)
 8002c5c:	f00a f952 	bl	800cf04 <siprintf>
			chipConf.SpareAreaSize,
			BlockSizeKB,
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			PlaneSizeMB);
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 8002c60:	4b8b      	ldr	r3, [pc, #556]	; (8002e90 <defThread+0x4a8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00e      	beq.n	8002c86 <defThread+0x29e>
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd faaf 	bl	80001d0 <strlen>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f107 0310 	add.w	r3, r7, #16
 8002c78:	4413      	add	r3, r2
 8002c7a:	4a85      	ldr	r2, [pc, #532]	; (8002e90 <defThread+0x4a8>)
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	4985      	ldr	r1, [pc, #532]	; (8002e94 <defThread+0x4ac>)
 8002c80:	4618      	mov	r0, r3
 8002c82:	f00a f93f 	bl	800cf04 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8002c86:	4b7f      	ldr	r3, [pc, #508]	; (8002e84 <defThread+0x49c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fd73 	bl	8000778 <__aeabi_i2d>
 8002c92:	4604      	mov	r4, r0
 8002c94:	460d      	mov	r5, r1
 8002c96:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <defThread+0x49c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	785b      	ldrb	r3, [r3, #1]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fd6b 	bl	8000778 <__aeabi_i2d>
 8002ca2:	a36d      	add	r3, pc, #436	; (adr r3, 8002e58 <defThread+0x470>)
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f7fd faea 	bl	8000280 <__aeabi_dmul>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f7fd fc14 	bl	80004e0 <__adddf3>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f7fd fdc4 	bl	800084c <__aeabi_d2uiz>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	b298      	uxth	r0, r3
 8002cc8:	4b6e      	ldr	r3, [pc, #440]	; (8002e84 <defThread+0x49c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a72      	ldr	r2, [pc, #456]	; (8002e98 <defThread+0x4b0>)
 8002cce:	8812      	ldrh	r2, [r2, #0]
 8002cd0:	43d2      	mvns	r2, r2
 8002cd2:	b292      	uxth	r2, r2
 8002cd4:	4970      	ldr	r1, [pc, #448]	; (8002e98 <defThread+0x4b0>)
 8002cd6:	8809      	ldrh	r1, [r1, #0]
 8002cd8:	f107 0410 	add.w	r4, r7, #16
 8002cdc:	9102      	str	r1, [sp, #8]
 8002cde:	9201      	str	r2, [sp, #4]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	9200      	str	r2, [sp, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	4601      	mov	r1, r0
 8002cea:	2000      	movs	r0, #0
 8002cec:	f001 f85a 	bl	8003da4 <ST7789_WriteString>
					   screen,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	f000 fe11 	bl	8003918 <ipsOn>

#ifdef SET_SMALL_FS
	bool mnt = false;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 3443 	strb.w	r3, [r7, #1091]	; 0x443
			if (ok) Report(0, "Check page:%lu OK...%s--------------------%s", pg, eol);
		}
	#endif
#endif

	bool loop = true;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
	bool led = false;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 345c 	strb.w	r3, [r7, #1116]	; 0x45c
	uint32_t tmr = get_tmr(1);
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f7ff f959 	bl	8001fc0 <get_tmr>
 8002d0e:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458

	s_qcmd qcmd = {0};
 8002d12:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002d16:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	801a      	strh	r2, [r3, #0]
	uint8_t prio = 0;
 8002d1e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002d22:	f2a3 4365 	subw	r3, r3, #1125	; 0x465
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
	osStatus_t qs = osOK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454

  /* Infinite loop */

	while (loop) {
 8002d30:	f000 bc52 	b.w	80035d8 <defThread+0xbf0>

		if (check_tmr(tmr)) {
 8002d34:	f8d7 0458 	ldr.w	r0, [r7, #1112]	; 0x458
 8002d38:	f7ff f94f 	bl	8001fda <check_tmr>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 80bc 	beq.w	8002ebc <defThread+0x4d4>
			tmr = get_tmr(1);
 8002d44:	2001      	movs	r0, #1
 8002d46:	f7ff f93b 	bl	8001fc0 <get_tmr>
 8002d4a:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
			//
			sec2str(screen);
 8002d4e:	f107 0310 	add.w	r3, r7, #16
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f9b2 	bl	80020bc <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 8002d58:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <defThread+0x494>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	23f0      	movs	r3, #240	; 0xf0
 8002d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	f107 0310 	add.w	r3, r7, #16
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 f86e 	bl	8003e50 <mkLineCenter>
 8002d74:	4601      	mov	r1, r0
 8002d76:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <defThread+0x494>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002d7e:	9202      	str	r2, [sp, #8]
 8002d80:	221f      	movs	r2, #31
 8002d82:	9201      	str	r2, [sp, #4]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	9200      	str	r2, [sp, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	460a      	mov	r2, r1
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	2008      	movs	r0, #8
 8002d90:	f001 f808 	bl	8003da4 <ST7789_WriteString>

			sprintf(screen, "Error: 0x%04X", devError);
 8002d94:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <defThread+0x4b4>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	4940      	ldr	r1, [pc, #256]	; (8002ea0 <defThread+0x4b8>)
 8002da0:	4618      	mov	r0, r3
 8002da2:	f00a f8af 	bl	800cf04 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 8002da6:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <defThread+0x4b4>)
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <defThread+0x3d0>
 8002dae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002db2:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
 8002db6:	e002      	b.n	8002dbe <defThread+0x3d6>
 8002db8:	2300      	movs	r3, #0
 8002dba:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <defThread+0x494>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002dca:	b29c      	uxth	r4, r3
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <defThread+0x494>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	23f0      	movs	r3, #240	; 0xf0
 8002dd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	f107 0310 	add.w	r3, r7, #16
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f001 f834 	bl	8003e50 <mkLineCenter>
 8002de8:	4601      	mov	r1, r0
 8002dea:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <defThread+0x494>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df2:	9202      	str	r2, [sp, #8]
 8002df4:	f8b7 245e 	ldrh.w	r2, [r7, #1118]	; 0x45e
 8002df8:	9201      	str	r2, [sp, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	9200      	str	r2, [sp, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	460a      	mov	r2, r1
 8002e02:	4621      	mov	r1, r4
 8002e04:	2000      	movs	r0, #0
 8002e06:	f000 ffcd 	bl	8003da4 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 8002e0a:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <defThread+0x4bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d019      	beq.n	8002e46 <defThread+0x45e>
				if (qs != qStat) {
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <defThread+0x4bc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d013      	beq.n	8002e46 <defThread+0x45e>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <defThread+0x488>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <defThread+0x456>
 8002e26:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <defThread+0x4bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe ff30 	bl	8001c90 <get_qStat>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <defThread+0x48c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	491c      	ldr	r1, [pc, #112]	; (8002ea8 <defThread+0x4c0>)
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f7ff f9d9 	bl	80021f0 <Report>
					qs = qStat;
 8002e3e:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <defThread+0x4bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
				}
			}

			if (devError) led = true; else led = false;
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <defThread+0x4b4>)
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d02e      	beq.n	8002eac <defThread+0x4c4>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	f887 345c 	strb.w	r3, [r7, #1116]	; 0x45c
 8002e54:	e02d      	b.n	8002eb2 <defThread+0x4ca>
 8002e56:	bf00      	nop
 8002e58:	33333333 	.word	0x33333333
 8002e5c:	3feb3333 	.word	0x3feb3333
 8002e60:	20000081 	.word	0x20000081
 8002e64:	20000088 	.word	0x20000088
 8002e68:	0800ddc8 	.word	0x0800ddc8
 8002e6c:	200013b4 	.word	0x200013b4
 8002e70:	20000062 	.word	0x20000062
 8002e74:	20000004 	.word	0x20000004
 8002e78:	0800dde8 	.word	0x0800dde8
 8002e7c:	20000078 	.word	0x20000078
 8002e80:	0800ddf0 	.word	0x0800ddf0
 8002e84:	2000007c 	.word	0x2000007c
 8002e88:	20001390 	.word	0x20001390
 8002e8c:	0800ddfc 	.word	0x0800ddfc
 8002e90:	20001384 	.word	0x20001384
 8002e94:	0800de58 	.word	0x0800de58
 8002e98:	20001366 	.word	0x20001366
 8002e9c:	2000034c 	.word	0x2000034c
 8002ea0:	0800de68 	.word	0x0800de68
 8002ea4:	200013b0 	.word	0x200013b0
 8002ea8:	0800de78 	.word	0x0800de78
 8002eac:	2300      	movs	r3, #0
 8002eae:	f887 345c 	strb.w	r3, [r7, #1116]	; 0x45c
			errLedOn(led);
 8002eb2:	f897 345c 	ldrb.w	r3, [r7, #1116]	; 0x45c
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff f82c 	bl	8001f14 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 8002ebc:	4bac      	ldr	r3, [pc, #688]	; (8003170 <defThread+0x788>)
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	f107 020b 	add.w	r2, r7, #11
 8002ec4:	f107 010c 	add.w	r1, r7, #12
 8002ec8:	2305      	movs	r3, #5
 8002eca:	f006 fb0b 	bl	80094e4 <osMessageQueueGet>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4aa8      	ldr	r2, [pc, #672]	; (8003174 <defThread+0x78c>)
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4ba7      	ldr	r3, [pc, #668]	; (8003174 <defThread+0x78c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d028      	beq.n	8002f2e <defThread+0x546>
			if (qs != qStat) qs = qStat;
 8002edc:	4ba5      	ldr	r3, [pc, #660]	; (8003174 <defThread+0x78c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d003      	beq.n	8002ef0 <defThread+0x508>
 8002ee8:	4ba2      	ldr	r3, [pc, #648]	; (8003174 <defThread+0x78c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
			if (qStat != osErrorTimeout) {
 8002ef0:	4ba0      	ldr	r3, [pc, #640]	; (8003174 <defThread+0x78c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f113 0f02 	cmn.w	r3, #2
 8002ef8:	f000 830e 	beq.w	8003518 <defThread+0xb30>
				devError |= devQUE;
 8002efc:	4b9e      	ldr	r3, [pc, #632]	; (8003178 <defThread+0x790>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	4b9c      	ldr	r3, [pc, #624]	; (8003178 <defThread+0x790>)
 8002f08:	801a      	strh	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8002f0a:	4b9c      	ldr	r3, [pc, #624]	; (800317c <defThread+0x794>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8302 	beq.w	8003518 <defThread+0xb30>
 8002f14:	4b97      	ldr	r3, [pc, #604]	; (8003174 <defThread+0x78c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe feb9 	bl	8001c90 <get_qStat>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	4b97      	ldr	r3, [pc, #604]	; (8003180 <defThread+0x798>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4997      	ldr	r1, [pc, #604]	; (8003184 <defThread+0x79c>)
 8002f26:	2001      	movs	r0, #1
 8002f28:	f7ff f962 	bl	80021f0 <Report>
 8002f2c:	e2f4      	b.n	8003518 <defThread+0xb30>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 8002f2e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002f32:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b93      	ldr	r3, [pc, #588]	; (8003188 <defThread+0x7a0>)
 8002f3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f40:	f107 0310 	add.w	r3, r7, #16
 8002f44:	4991      	ldr	r1, [pc, #580]	; (800318c <defThread+0x7a4>)
 8002f46:	4618      	mov	r0, r3
 8002f48:	f009 ffdc 	bl	800cf04 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 8002f4c:	4b90      	ldr	r3, [pc, #576]	; (8003190 <defThread+0x7a8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	785b      	ldrb	r3, [r3, #1]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002f5c:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 8002f5e:	4b8c      	ldr	r3, [pc, #560]	; (8003190 <defThread+0x7a8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	23f0      	movs	r3, #240	; 0xf0
 8002f68:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	f107 0310 	add.w	r3, r7, #16
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 ff6b 	bl	8003e50 <mkLineCenter>
 8002f7a:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 8002f7c:	4b84      	ldr	r3, [pc, #528]	; (8003190 <defThread+0x7a8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2200      	movs	r2, #0
 8002f82:	9202      	str	r2, [sp, #8]
 8002f84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002f88:	9201      	str	r2, [sp, #4]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	9200      	str	r2, [sp, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	460a      	mov	r2, r1
 8002f92:	4621      	mov	r1, r4
 8002f94:	2000      	movs	r0, #0
 8002f96:	f000 ff05 	bl	8003da4 <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			if (dbg > logOn)
 8002f9a:	4b78      	ldr	r3, [pc, #480]	; (800317c <defThread+0x794>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d91e      	bls.n	8002fe0 <defThread+0x5f8>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 8002fa2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002fa6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	4619      	mov	r1, r3
 8002fae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002fb2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8002fb6:	785b      	ldrb	r3, [r3, #1]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002fbe:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b70      	ldr	r3, [pc, #448]	; (8003188 <defThread+0x7a0>)
 8002fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fcc:	4a6c      	ldr	r2, [pc, #432]	; (8003180 <defThread+0x798>)
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	9201      	str	r2, [sp, #4]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	460a      	mov	r2, r1
 8002fd8:	496e      	ldr	r1, [pc, #440]	; (8003194 <defThread+0x7ac>)
 8002fda:	2001      	movs	r0, #1
 8002fdc:	f7ff f908 	bl	80021f0 <Report>
			//
			nand_show = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
			switch (qcmd.cmd) {
 8002fe6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002fea:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b0a      	cmp	r3, #10
 8002ff2:	f200 827e 	bhi.w	80034f2 <defThread+0xb0a>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <defThread+0x614>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003097 	.word	0x08003097
 8003000:	08003157 	.word	0x08003157
 8003004:	08003261 	.word	0x08003261
 8003008:	08003261 	.word	0x08003261
 800300c:	080033b1 	.word	0x080033b1
 8003010:	080032b7 	.word	0x080032b7
 8003014:	08003349 	.word	0x08003349
 8003018:	080031f1 	.word	0x080031f1
 800301c:	0800309f 	.word	0x0800309f
 8003020:	0800307d 	.word	0x0800307d
 8003024:	08003029 	.word	0x08003029
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 8003028:	4b55      	ldr	r3, [pc, #340]	; (8003180 <defThread+0x798>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	495a      	ldr	r1, [pc, #360]	; (8003198 <defThread+0x7b0>)
 8003030:	485a      	ldr	r0, [pc, #360]	; (800319c <defThread+0x7b4>)
 8003032:	f009 ff67 	bl	800cf04 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 8003036:	2300      	movs	r3, #0
 8003038:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453
 800303c:	e014      	b.n	8003068 <defThread+0x680>
 800303e:	4857      	ldr	r0, [pc, #348]	; (800319c <defThread+0x7b4>)
 8003040:	f7fd f8c6 	bl	80001d0 <strlen>
 8003044:	4603      	mov	r3, r0
 8003046:	4a55      	ldr	r2, [pc, #340]	; (800319c <defThread+0x7b4>)
 8003048:	1898      	adds	r0, r3, r2
 800304a:	f897 3453 	ldrb.w	r3, [r7, #1107]	; 0x453
 800304e:	4a54      	ldr	r2, [pc, #336]	; (80031a0 <defThread+0x7b8>)
 8003050:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003054:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <defThread+0x798>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4952      	ldr	r1, [pc, #328]	; (80031a4 <defThread+0x7bc>)
 800305a:	f009 ff53 	bl	800cf04 <siprintf>
 800305e:	f897 3453 	ldrb.w	r3, [r7, #1107]	; 0x453
 8003062:	3301      	adds	r3, #1
 8003064:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453
 8003068:	f897 3453 	ldrb.w	r3, [r7, #1107]	; 0x453
 800306c:	2b0a      	cmp	r3, #10
 800306e:	d9e6      	bls.n	800303e <defThread+0x656>
					Report(1, "%s", stx);
 8003070:	4a4a      	ldr	r2, [pc, #296]	; (800319c <defThread+0x7b4>)
 8003072:	494d      	ldr	r1, [pc, #308]	; (80031a8 <defThread+0x7c0>)
 8003074:	2001      	movs	r0, #1
 8003076:	f7ff f8bb 	bl	80021f0 <Report>
				break;
 800307a:	e23a      	b.n	80034f2 <defThread+0xb0a>
				case cmdMem:
					Report(1, "FreeRTOS memory: free=%lu heap=%lu bytes%s", xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 800307c:	f008 ffa2 	bl	800bfc4 <xPortGetFreeHeapSize>
 8003080:	4602      	mov	r2, r0
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <defThread+0x798>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800308c:	4947      	ldr	r1, [pc, #284]	; (80031ac <defThread+0x7c4>)
 800308e:	2001      	movs	r0, #1
 8003090:	f7ff f8ae 	bl	80021f0 <Report>
				break;
 8003094:	e22d      	b.n	80034f2 <defThread+0xb0a>
				case cmdRestart:
					loop = false;
 8003096:	2300      	movs	r3, #0
 8003098:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
		  		break;
 800309c:	e229      	b.n	80034f2 <defThread+0xb0a>
				case cmdInfo:
					if (dbg != logOff) {
 800309e:	4b37      	ldr	r3, [pc, #220]	; (800317c <defThread+0x794>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 821a 	beq.w	80034dc <defThread+0xaf4>
						strcpy(stx, "NAND:");
 80030a8:	4b3c      	ldr	r3, [pc, #240]	; (800319c <defThread+0x7b4>)
 80030aa:	4a41      	ldr	r2, [pc, #260]	; (80031b0 <defThread+0x7c8>)
 80030ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030b0:	6018      	str	r0, [r3, #0]
 80030b2:	3304      	adds	r3, #4
 80030b4:	8019      	strh	r1, [r3, #0]
						//uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
						for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 80030b6:	2300      	movs	r3, #0
 80030b8:	f887 3452 	strb.w	r3, [r7, #1106]	; 0x452
 80030bc:	e016      	b.n	80030ec <defThread+0x704>
 80030be:	4837      	ldr	r0, [pc, #220]	; (800319c <defThread+0x7b4>)
 80030c0:	f7fd f886 	bl	80001d0 <strlen>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4a35      	ldr	r2, [pc, #212]	; (800319c <defThread+0x7b4>)
 80030c8:	1898      	adds	r0, r3, r2
 80030ca:	f997 3452 	ldrsb.w	r3, [r7, #1106]	; 0x452
 80030ce:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	4936      	ldr	r1, [pc, #216]	; (80031b4 <defThread+0x7cc>)
 80030da:	f009 ff13 	bl	800cf04 <siprintf>
 80030de:	f997 3452 	ldrsb.w	r3, [r7, #1106]	; 0x452
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f887 3452 	strb.w	r3, [r7, #1106]	; 0x452
 80030ec:	f897 3452 	ldrb.w	r3, [r7, #1106]	; 0x452
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d9e4      	bls.n	80030be <defThread+0x6d6>
						sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 80030f4:	4829      	ldr	r0, [pc, #164]	; (800319c <defThread+0x7b4>)
 80030f6:	f7fd f86b 	bl	80001d0 <strlen>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4a27      	ldr	r2, [pc, #156]	; (800319c <defThread+0x7b4>)
 80030fe:	1898      	adds	r0, r3, r2
 8003100:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <defThread+0x7d0>)
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	461a      	mov	r2, r3
 8003106:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800310a:	492c      	ldr	r1, [pc, #176]	; (80031bc <defThread+0x7d4>)
 800310c:	f009 fefa 	bl	800cf04 <siprintf>
						sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB",
 8003110:	4822      	ldr	r0, [pc, #136]	; (800319c <defThread+0x7b4>)
 8003112:	f7fd f85d 	bl	80001d0 <strlen>
 8003116:	4603      	mov	r3, r0
 8003118:	4a20      	ldr	r2, [pc, #128]	; (800319c <defThread+0x7b4>)
 800311a:	1898      	adds	r0, r3, r2
 800311c:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <defThread+0x7d8>)
 800311e:	681c      	ldr	r4, [r3, #0]
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <defThread+0x7d8>)
 8003122:	685d      	ldr	r5, [r3, #4]
 8003124:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <defThread+0x7d8>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <defThread+0x7d8>)
 800312a:	6912      	ldr	r2, [r2, #16]
 800312c:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 8003130:	9103      	str	r1, [sp, #12]
 8003132:	9202      	str	r2, [sp, #8]
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	462b      	mov	r3, r5
 800313e:	4622      	mov	r2, r4
 8003140:	4920      	ldr	r1, [pc, #128]	; (80031c4 <defThread+0x7dc>)
 8003142:	f009 fedf 	bl	800cf04 <siprintf>
											chipConf.SpareAreaSize,
											BlockSizeKB,
											chipConf.BlockNbr,
											chipConf.PlaneNbr,
											PlaneSizeMB);
						Report(1, "%s%s", stx, eol);
 8003146:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <defThread+0x798>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a14      	ldr	r2, [pc, #80]	; (800319c <defThread+0x7b4>)
 800314c:	491e      	ldr	r1, [pc, #120]	; (80031c8 <defThread+0x7e0>)
 800314e:	2001      	movs	r0, #1
 8003150:	f7ff f84e 	bl	80021f0 <Report>
					}
				break;
 8003154:	e1c2      	b.n	80034dc <defThread+0xaf4>
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 8003156:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800315a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800315e:	785b      	ldrb	r3, [r3, #1]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d135      	bne.n	80031d0 <defThread+0x7e8>
						set_Date(epoch);
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <defThread+0x7e4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe ff47 	bl	8001ffc <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 800316e:	e1b7      	b.n	80034e0 <defThread+0xaf8>
 8003170:	20000344 	.word	0x20000344
 8003174:	200013b0 	.word	0x200013b0
 8003178:	2000034c 	.word	0x2000034c
 800317c:	20000062 	.word	0x20000062
 8003180:	20000004 	.word	0x20000004
 8003184:	0800de78 	.word	0x0800de78
 8003188:	20000034 	.word	0x20000034
 800318c:	0800de84 	.word	0x0800de84
 8003190:	20000078 	.word	0x20000078
 8003194:	0800de8c 	.word	0x0800de8c
 8003198:	0800dea4 	.word	0x0800dea4
 800319c:	200013b4 	.word	0x200013b4
 80031a0:	20000008 	.word	0x20000008
 80031a4:	0800dec0 	.word	0x0800dec0
 80031a8:	0800dcd0 	.word	0x0800dcd0
 80031ac:	0800dec8 	.word	0x0800dec8
 80031b0:	0800dd44 	.word	0x0800dd44
 80031b4:	0800dcc8 	.word	0x0800dcc8
 80031b8:	20001388 	.word	0x20001388
 80031bc:	0800dd4c 	.word	0x0800dd4c
 80031c0:	20001390 	.word	0x20001390
 80031c4:	0800dd64 	.word	0x0800dd64
 80031c8:	0800dde8 	.word	0x0800dde8
 80031cc:	20000064 	.word	0x20000064
						sec2str(stx);
 80031d0:	4888      	ldr	r0, [pc, #544]	; (80033f4 <defThread+0xa0c>)
 80031d2:	f7fe ff73 	bl	80020bc <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 80031d6:	4b88      	ldr	r3, [pc, #544]	; (80033f8 <defThread+0xa10>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8180 	beq.w	80034e0 <defThread+0xaf8>
 80031e0:	4b86      	ldr	r3, [pc, #536]	; (80033fc <defThread+0xa14>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a83      	ldr	r2, [pc, #524]	; (80033f4 <defThread+0xa0c>)
 80031e6:	4986      	ldr	r1, [pc, #536]	; (8003400 <defThread+0xa18>)
 80031e8:	2000      	movs	r0, #0
 80031ea:	f7ff f801 	bl	80021f0 <Report>
				break;
 80031ee:	e177      	b.n	80034e0 <defThread+0xaf8>
				case cmdLog:
					if (qcmd.attr < logNone) {
 80031f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80031f4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d81e      	bhi.n	800323c <defThread+0x854>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 80031fe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003202:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003206:	785b      	ldrb	r3, [r3, #1]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe fd91 	bl	8001d30 <get_logName>
 800320e:	4602      	mov	r2, r0
 8003210:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003214:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003218:	785b      	ldrb	r3, [r3, #1]
 800321a:	4619      	mov	r1, r3
 800321c:	4b77      	ldr	r3, [pc, #476]	; (80033fc <defThread+0xa14>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	460b      	mov	r3, r1
 8003224:	4977      	ldr	r1, [pc, #476]	; (8003404 <defThread+0xa1c>)
 8003226:	2001      	movs	r0, #1
 8003228:	f7fe ffe2 	bl	80021f0 <Report>
						dbg = qcmd.attr;
 800322c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003230:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003234:	785a      	ldrb	r2, [r3, #1]
 8003236:	4b70      	ldr	r3, [pc, #448]	; (80033f8 <defThread+0xa10>)
 8003238:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 800323a:	e15a      	b.n	80034f2 <defThread+0xb0a>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 800323c:	4b6e      	ldr	r3, [pc, #440]	; (80033f8 <defThread+0xa10>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7fe fd75 	bl	8001d30 <get_logName>
 8003246:	4602      	mov	r2, r0
 8003248:	4b6b      	ldr	r3, [pc, #428]	; (80033f8 <defThread+0xa10>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	4b6b      	ldr	r3, [pc, #428]	; (80033fc <defThread+0xa14>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	460b      	mov	r3, r1
 8003256:	496c      	ldr	r1, [pc, #432]	; (8003408 <defThread+0xa20>)
 8003258:	2001      	movs	r0, #1
 800325a:	f7fe ffc9 	bl	80021f0 <Report>
				break;
 800325e:	e148      	b.n	80034f2 <defThread+0xb0a>
				case cmdRead:
				case cmdNext:
					if (rdBuf) {
 8003260:	4b6a      	ldr	r3, [pc, #424]	; (800340c <defThread+0xa24>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 813d 	beq.w	80034e4 <defThread+0xafc>
						io_nand_read(nandAdr - devAdr, rdBuf, nandLen, 0);
 800326a:	4b69      	ldr	r3, [pc, #420]	; (8003410 <defThread+0xa28>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b69      	ldr	r3, [pc, #420]	; (8003414 <defThread+0xa2c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	1ad0      	subs	r0, r2, r3
 8003274:	4b65      	ldr	r3, [pc, #404]	; (800340c <defThread+0xa24>)
 8003276:	6819      	ldr	r1, [r3, #0]
 8003278:	4b67      	ldr	r3, [pc, #412]	; (8003418 <defThread+0xa30>)
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	2300      	movs	r3, #0
 8003280:	f7fe fcaa 	bl	8001bd8 <io_nand_read>
						if (!(devError & devNAND)) {
 8003284:	4b65      	ldr	r3, [pc, #404]	; (800341c <defThread+0xa34>)
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	f040 8129 	bne.w	80034e4 <defThread+0xafc>
							if (qcmd.cmd == cmdRead) nand_show = 1;
 8003292:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003296:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d103      	bne.n	80032a8 <defThread+0x8c0>
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
 80032a6:	e002      	b.n	80032ae <defThread+0x8c6>
												else nand_show = 2;
 80032a8:	2302      	movs	r3, #2
 80032aa:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
							readed = true;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 3462 	strb.w	r3, [r7, #1122]	; 0x462
						}
					}
				break;
 80032b4:	e116      	b.n	80034e4 <defThread+0xafc>
				/*case cmdNext:
					if (dbg != logOff) Report(1, "Read next nand adr:0x%X len:%lu%s", nandAdr, nandLen, eol);
					if (rdBuf) nand_show = 2;
				break;*/
				case cmdErase:
					if (!qcmd.attr) {
 80032b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80032ba:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80032be:	785b      	ldrb	r3, [r3, #1]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d12e      	bne.n	8003322 <defThread+0x93a>
						uint32_t bk = nandBlk * chipConf.PageSize;
 80032c4:	4b56      	ldr	r3, [pc, #344]	; (8003420 <defThread+0xa38>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a56      	ldr	r2, [pc, #344]	; (8003424 <defThread+0xa3c>)
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
						io_nand_block_erase(bk);
 80032d4:	f8d7 0438 	ldr.w	r0, [r7, #1080]	; 0x438
 80032d8:	f7fe fcba 	bl	8001c50 <io_nand_block_erase>
						if (dbg != logOff) {
 80032dc:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <defThread+0xa10>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8101 	beq.w	80034e8 <defThread+0xb00>
							if (devError & devNAND) {
 80032e6:	4b4d      	ldr	r3, [pc, #308]	; (800341c <defThread+0xa34>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <defThread+0x922>
								Report(1, "Erase nand block:%lu addr:%u Error !%s", nandBlk, bk, eol);
 80032f2:	4b4c      	ldr	r3, [pc, #304]	; (8003424 <defThread+0xa3c>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b41      	ldr	r3, [pc, #260]	; (80033fc <defThread+0xa14>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8003300:	4949      	ldr	r1, [pc, #292]	; (8003428 <defThread+0xa40>)
 8003302:	2001      	movs	r0, #1
 8003304:	f7fe ff74 	bl	80021f0 <Report>
						iBlk = 0;
						next_block_erase = 1;
						if (dbg != logOff) Report(1, "Erase chip ");
						stik = HAL_GetTick();
					}
				break;
 8003308:	e0ee      	b.n	80034e8 <defThread+0xb00>
								Report(1, "Erase nand block:%lu addr:%u Ok !%s", nandBlk, bk, eol);
 800330a:	4b46      	ldr	r3, [pc, #280]	; (8003424 <defThread+0xa3c>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <defThread+0xa14>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8003318:	4944      	ldr	r1, [pc, #272]	; (800342c <defThread+0xa44>)
 800331a:	2001      	movs	r0, #1
 800331c:	f7fe ff68 	bl	80021f0 <Report>
				break;
 8003320:	e0e2      	b.n	80034e8 <defThread+0xb00>
						iBlk = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
						next_block_erase = 1;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
						if (dbg != logOff) Report(1, "Erase chip ");
 800332e:	4b32      	ldr	r3, [pc, #200]	; (80033f8 <defThread+0xa10>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <defThread+0x956>
 8003336:	493e      	ldr	r1, [pc, #248]	; (8003430 <defThread+0xa48>)
 8003338:	2001      	movs	r0, #1
 800333a:	f7fe ff59 	bl	80021f0 <Report>
						stik = HAL_GetTick();
 800333e:	f001 f9e9 	bl	8004714 <HAL_GetTick>
 8003342:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
				break;
 8003346:	e0cf      	b.n	80034e8 <defThread+0xb00>
				case cmdCheck:
				{
					uint32_t adr = nandPage * chipConf.PageSize;//nand_PageToBlock(nandPage);
 8003348:	4b35      	ldr	r3, [pc, #212]	; (8003420 <defThread+0xa38>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a39      	ldr	r2, [pc, #228]	; (8003434 <defThread+0xa4c>)
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
					if (!pageIsEmpty(adr)) {
 8003358:	f8d7 043c 	ldr.w	r0, [r7, #1084]	; 0x43c
 800335c:	f7fe f8ae 	bl	80014bc <pageIsEmpty>
 8003360:	4603      	mov	r3, r0
 8003362:	f083 0301 	eor.w	r3, r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d010      	beq.n	800338e <defThread+0x9a6>
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu Not empty%s", nandPage, adr, eol);
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <defThread+0xa10>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80bb 	beq.w	80034ec <defThread+0xb04>
 8003376:	4b2f      	ldr	r3, [pc, #188]	; (8003434 <defThread+0xa4c>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <defThread+0xa14>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003384:	492c      	ldr	r1, [pc, #176]	; (8003438 <defThread+0xa50>)
 8003386:	2001      	movs	r0, #1
 8003388:	f7fe ff32 	bl	80021f0 <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu is Empty%s", nandPage, adr, eol);
					}
				}
				break;
 800338c:	e0ae      	b.n	80034ec <defThread+0xb04>
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu is Empty%s", nandPage, adr, eol);
 800338e:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <defThread+0xa10>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80aa 	beq.w	80034ec <defThread+0xb04>
 8003398:	4b26      	ldr	r3, [pc, #152]	; (8003434 <defThread+0xa4c>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b17      	ldr	r3, [pc, #92]	; (80033fc <defThread+0xa14>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80033a6:	4925      	ldr	r1, [pc, #148]	; (800343c <defThread+0xa54>)
 80033a8:	2001      	movs	r0, #1
 80033aa:	f7fe ff21 	bl	80021f0 <Report>
				break;
 80033ae:	e09d      	b.n	80034ec <defThread+0xb04>
				case cmdWrite:
					if (wrBuf) {
 80033b0:	4b23      	ldr	r3, [pc, #140]	; (8003440 <defThread+0xa58>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 809b 	beq.w	80034f0 <defThread+0xb08>
						uint32_t wadr = nandAdr - devAdr;
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <defThread+0xa28>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <defThread+0xa2c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
						if (!pageIsEmpty(wadr)) {
 80033c8:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 80033cc:	f7fe f876 	bl	80014bc <pageIsEmpty>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f083 0301 	eor.w	r3, r3, #1
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d035      	beq.n	8003448 <defThread+0xa60>
							io_nand_block_erase(wadr);
 80033dc:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 80033e0:	f7fe fc36 	bl	8001c50 <io_nand_block_erase>
							sprintf(stx, "Erase nand addr:%lu done", wadr);
 80033e4:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80033e8:	4916      	ldr	r1, [pc, #88]	; (8003444 <defThread+0xa5c>)
 80033ea:	4802      	ldr	r0, [pc, #8]	; (80033f4 <defThread+0xa0c>)
 80033ec:	f009 fd8a 	bl	800cf04 <siprintf>
 80033f0:	e030      	b.n	8003454 <defThread+0xa6c>
 80033f2:	bf00      	nop
 80033f4:	200013b4 	.word	0x200013b4
 80033f8:	20000062 	.word	0x20000062
 80033fc:	20000004 	.word	0x20000004
 8003400:	0800def4 	.word	0x0800def4
 8003404:	0800df10 	.word	0x0800df10
 8003408:	0800df2c 	.word	0x0800df2c
 800340c:	200013a8 	.word	0x200013a8
 8003410:	20001374 	.word	0x20001374
 8003414:	20001370 	.word	0x20001370
 8003418:	20001378 	.word	0x20001378
 800341c:	2000034c 	.word	0x2000034c
 8003420:	20001390 	.word	0x20001390
 8003424:	2000137c 	.word	0x2000137c
 8003428:	0800df4c 	.word	0x0800df4c
 800342c:	0800df74 	.word	0x0800df74
 8003430:	0800df98 	.word	0x0800df98
 8003434:	20001380 	.word	0x20001380
 8003438:	0800dfa4 	.word	0x0800dfa4
 800343c:	0800dfc8 	.word	0x0800dfc8
 8003440:	200013ac 	.word	0x200013ac
 8003444:	0800dfe8 	.word	0x0800dfe8
						} else {
							sprintf(stx, "Addr:%lu is Empty", wadr);
 8003448:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 800344c:	4980      	ldr	r1, [pc, #512]	; (8003650 <defThread+0xc68>)
 800344e:	4881      	ldr	r0, [pc, #516]	; (8003654 <defThread+0xc6c>)
 8003450:	f009 fd58 	bl	800cf04 <siprintf>
						}
						if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8003454:	4b80      	ldr	r3, [pc, #512]	; (8003658 <defThread+0xc70>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <defThread+0xa82>
 800345c:	4b7f      	ldr	r3, [pc, #508]	; (800365c <defThread+0xc74>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a7c      	ldr	r2, [pc, #496]	; (8003654 <defThread+0xc6c>)
 8003462:	497f      	ldr	r1, [pc, #508]	; (8003660 <defThread+0xc78>)
 8003464:	2001      	movs	r0, #1
 8003466:	f7fe fec3 	bl	80021f0 <Report>
						memset(wrBuf, EMPTY, chipConf.PageSize);
 800346a:	4b7e      	ldr	r3, [pc, #504]	; (8003664 <defThread+0xc7c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a7e      	ldr	r2, [pc, #504]	; (8003668 <defThread+0xc80>)
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	21ff      	movs	r1, #255	; 0xff
 8003474:	4618      	mov	r0, r3
 8003476:	f009 f8c7 	bl	800c608 <memset>
						uint32_t ofs = 0;//(nandAdr - devAdr) % chipConf.PageSize;
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
						memset(wrBuf /* + ofs*/, nandByte, nandLen);
 8003480:	4b78      	ldr	r3, [pc, #480]	; (8003664 <defThread+0xc7c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a79      	ldr	r2, [pc, #484]	; (800366c <defThread+0xc84>)
 8003486:	7812      	ldrb	r2, [r2, #0]
 8003488:	4611      	mov	r1, r2
 800348a:	4a79      	ldr	r2, [pc, #484]	; (8003670 <defThread+0xc88>)
 800348c:	8812      	ldrh	r2, [r2, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f009 f8ba 	bl	800c608 <memset>
						////showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
						//if (NAND_Write_Page_8b(nandPort, &addr, wrBuf, nandLen, ofs) != HAL_OK) devError |= devNAND;
						//if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%lu (page:%lu blk:%lu)%s",
						//	      	  	  	  	  	  nandAdr, nandByte, nandLen, ofs, addr.Page, addr.Block, eol);
						io_nand_write(wadr, wrBuf, nandLen, ofs);
 8003494:	4b73      	ldr	r3, [pc, #460]	; (8003664 <defThread+0xc7c>)
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	4b75      	ldr	r3, [pc, #468]	; (8003670 <defThread+0xc88>)
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80034a2:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 80034a6:	f7fe fbb5 	bl	8001c14 <io_nand_write>
						if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%lu%s",
 80034aa:	4b6b      	ldr	r3, [pc, #428]	; (8003658 <defThread+0xc70>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d01e      	beq.n	80034f0 <defThread+0xb08>
 80034b2:	4b70      	ldr	r3, [pc, #448]	; (8003674 <defThread+0xc8c>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b6d      	ldr	r3, [pc, #436]	; (800366c <defThread+0xc84>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	4b6c      	ldr	r3, [pc, #432]	; (8003670 <defThread+0xc88>)
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	4619      	mov	r1, r3
 80034c2:	4b66      	ldr	r3, [pc, #408]	; (800365c <defThread+0xc74>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	9100      	str	r1, [sp, #0]
 80034d0:	4603      	mov	r3, r0
 80034d2:	4969      	ldr	r1, [pc, #420]	; (8003678 <defThread+0xc90>)
 80034d4:	2001      	movs	r0, #1
 80034d6:	f7fe fe8b 	bl	80021f0 <Report>
							      	  	  	  	  	  nandAdr, nandByte, nandLen, ofs, eol);
					}
				break;
 80034da:	e009      	b.n	80034f0 <defThread+0xb08>
				break;
 80034dc:	bf00      	nop
 80034de:	e008      	b.n	80034f2 <defThread+0xb0a>
				break;
 80034e0:	bf00      	nop
 80034e2:	e006      	b.n	80034f2 <defThread+0xb0a>
				break;
 80034e4:	bf00      	nop
 80034e6:	e004      	b.n	80034f2 <defThread+0xb0a>
				break;
 80034e8:	bf00      	nop
 80034ea:	e002      	b.n	80034f2 <defThread+0xb0a>
				break;
 80034ec:	bf00      	nop
 80034ee:	e000      	b.n	80034f2 <defThread+0xb0a>
				break;
 80034f0:	bf00      	nop
			}
			if (nand_show) {
 80034f2:	f897 3463 	ldrb.w	r3, [r7, #1123]	; 0x463
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00e      	beq.n	8003518 <defThread+0xb30>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 80034fa:	4b5e      	ldr	r3, [pc, #376]	; (8003674 <defThread+0xc8c>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b5c      	ldr	r3, [pc, #368]	; (8003670 <defThread+0xc88>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	461c      	mov	r4, r3
 8003504:	4b5d      	ldr	r3, [pc, #372]	; (800367c <defThread+0xc94>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f897 1462 	ldrb.w	r1, [r7, #1122]	; 0x462
 800350c:	f897 0463 	ldrb.w	r0, [r7, #1123]	; 0x463
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	4623      	mov	r3, r4
 8003514:	f7ff f9ac 	bl	8002870 <showBuf>
			}
		}

		// Erase all pages
		if (next_block_erase) {
 8003518:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 800351c:	2b00      	cmp	r3, #0
 800351e:	d058      	beq.n	80035d2 <defThread+0xbea>
			byte = dbg;
 8003520:	4b4d      	ldr	r3, [pc, #308]	; (8003658 <defThread+0xc70>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f887 3451 	strb.w	r3, [r7, #1105]	; 0x451
			dbg = logOff;//disable print log !
 8003528:	4b4b      	ldr	r3, [pc, #300]	; (8003658 <defThread+0xc70>)
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
			io_nand_block_erase(iBlk);
 800352e:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 8003532:	f7fe fb8d 	bl	8001c50 <io_nand_block_erase>
			dbg = byte;//restore dbg value !
 8003536:	4a48      	ldr	r2, [pc, #288]	; (8003658 <defThread+0xc70>)
 8003538:	f897 3451 	ldrb.w	r3, [r7, #1105]	; 0x451
 800353c:	7013      	strb	r3, [r2, #0]
			if (devError & devNAND) {
 800353e:	4b50      	ldr	r3, [pc, #320]	; (8003680 <defThread+0xc98>)
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <defThread+0xb6a>
				next_block_erase = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8003550:	e01c      	b.n	800358c <defThread+0xba4>
			} else {
				if (!(iBlk % (chipConf.PageSize * 1024))) Report(0, ".");
 8003552:	4b45      	ldr	r3, [pc, #276]	; (8003668 <defThread+0xc80>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	029a      	lsls	r2, r3, #10
 8003558:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800355c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003560:	fb01 f202 	mul.w	r2, r1, r2
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <defThread+0xb8a>
 800356a:	4946      	ldr	r1, [pc, #280]	; (8003684 <defThread+0xc9c>)
 800356c:	2000      	movs	r0, #0
 800356e:	f7fe fe3f 	bl	80021f0 <Report>
				if (iBlk >= (chipConf.PlaneSize * chipConf.PlaneNbr)) next_block_erase = 0;
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <defThread+0xc80>)
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	4a3c      	ldr	r2, [pc, #240]	; (8003668 <defThread+0xc80>)
 8003578:	6912      	ldr	r2, [r2, #16]
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <defThread+0xba4>
 8003586:	2300      	movs	r3, #0
 8003588:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			}
			iBlk += chipConf.PageSize;
 800358c:	4b36      	ldr	r3, [pc, #216]	; (8003668 <defThread+0xc80>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8003594:	4413      	add	r3, r2
 8003596:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
			if (!next_block_erase) {
 800359a:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d117      	bne.n	80035d2 <defThread+0xbea>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 80035a2:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <defThread+0xc70>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d013      	beq.n	80035d2 <defThread+0xbea>
 80035aa:	f001 f8b3 	bl	8004714 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	4a34      	ldr	r2, [pc, #208]	; (8003688 <defThread+0xca0>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	099a      	lsrs	r2, r3, #6
 80035be:	4b27      	ldr	r3, [pc, #156]	; (800365c <defThread+0xc74>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 80035ca:	4930      	ldr	r1, [pc, #192]	; (800368c <defThread+0xca4>)
 80035cc:	2000      	movs	r0, #0
 80035ce:	f7fe fe0f 	bl	80021f0 <Report>
			}
		}
		//
		osDelay(5);
 80035d2:	2005      	movs	r0, #5
 80035d4:	f005 fe0e 	bl	80091f4 <osDelay>
	while (loop) {
 80035d8:	f897 345d 	ldrb.w	r3, [r7, #1117]	; 0x45d
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f47f aba9 	bne.w	8002d34 <defThread+0x34c>
	}

	if (wrBuf) free(wrBuf);
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <defThread+0xc7c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <defThread+0xc0c>
 80035ea:	4b1e      	ldr	r3, [pc, #120]	; (8003664 <defThread+0xc7c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f008 fff4 	bl	800c5dc <free>
	if (rdBuf) free(rdBuf);
 80035f4:	4b21      	ldr	r3, [pc, #132]	; (800367c <defThread+0xc94>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <defThread+0xc1e>
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <defThread+0xc94>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f008 ffeb 	bl	800c5dc <free>

#ifdef SET_SMALL_FS
	if (mnt) fs_err = io_fs_unmount();
 8003606:	f897 3443 	ldrb.w	r3, [r7, #1091]	; 0x443
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <defThread+0xc30>
 800360e:	f000 ffc7 	bl	80045a0 <io_fs_unmount>
 8003612:	4603      	mov	r3, r0
 8003614:	4a1e      	ldr	r2, [pc, #120]	; (8003690 <defThread+0xca8>)
 8003616:	6013      	str	r3, [r2, #0]
#endif

	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <defThread+0xc70>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d011      	beq.n	8003644 <defThread+0xc5c>
 8003620:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <defThread+0xcac>)
 8003622:	681c      	ldr	r4, [r3, #0]
 8003624:	f008 fcce 	bl	800bfc4 <xPortGetFreeHeapSize>
 8003628:	4602      	mov	r2, r0
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <defThread+0xc74>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	9302      	str	r3, [sp, #8]
 8003630:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	9200      	str	r2, [sp, #0]
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <defThread+0xcb0>)
 800363a:	4622      	mov	r2, r4
 800363c:	4917      	ldr	r1, [pc, #92]	; (800369c <defThread+0xcb4>)
 800363e:	2001      	movs	r0, #1
 8003640:	f7fe fdd6 	bl	80021f0 <Report>
	osDelay(250);
 8003644:	20fa      	movs	r0, #250	; 0xfa
 8003646:	f005 fdd5 	bl	80091f4 <osDelay>

	NVIC_SystemReset();
 800364a:	f7fd faf1 	bl	8000c30 <__NVIC_SystemReset>
 800364e:	bf00      	nop
 8003650:	0800e004 	.word	0x0800e004
 8003654:	200013b4 	.word	0x200013b4
 8003658:	20000062 	.word	0x20000062
 800365c:	20000004 	.word	0x20000004
 8003660:	0800dde8 	.word	0x0800dde8
 8003664:	200013ac 	.word	0x200013ac
 8003668:	20001390 	.word	0x20001390
 800366c:	20000080 	.word	0x20000080
 8003670:	20001378 	.word	0x20001378
 8003674:	20001374 	.word	0x20001374
 8003678:	0800e018 	.word	0x0800e018
 800367c:	200013a8 	.word	0x200013a8
 8003680:	2000034c 	.word	0x2000034c
 8003684:	0800e04c 	.word	0x0800e04c
 8003688:	10624dd3 	.word	0x10624dd3
 800368c:	0800e050 	.word	0x0800e050
 8003690:	20001bb4 	.word	0x20001bb4
 8003694:	20000000 	.word	0x20000000
 8003698:	080112cc 	.word	0x080112cc
 800369c:	0800e068 	.word	0x0800e068

080036a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b5b0      	push	{r4, r5, r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a10      	ldr	r2, [pc, #64]	; (80036f0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d102      	bne.n	80036b8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80036b2:	f001 f81b 	bl	80046ec <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 80036b6:	e016      	b.n	80036e6 <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d111      	bne.n	80036e6 <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 80036c2:	f7fe fc5d 	bl	8001f80 <get_msCounter>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	f002 0403 	and.w	r4, r2, #3
 80036ce:	2500      	movs	r5, #0
 80036d0:	1ee3      	subs	r3, r4, #3
 80036d2:	432b      	orrs	r3, r5
 80036d4:	d105      	bne.n	80036e2 <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 80036d6:	f7fe fc45 	bl	8001f64 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	4805      	ldr	r0, [pc, #20]	; (80036f4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80036de:	f001 fee2 	bl	80054a6 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 80036e2:	f7fe fc5b 	bl	8001f9c <inc_msCounter>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bdb0      	pop	{r4, r5, r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40020800 	.word	0x40020800

080036f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	devError |= devSYS;
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <Error_Handler+0x1c>)
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003704:	b29a      	uxth	r2, r3
 8003706:	4b03      	ldr	r3, [pc, #12]	; (8003714 <Error_Handler+0x1c>)
 8003708:	801a      	strh	r2, [r3, #0]
	errLedOn(true);
 800370a:	2001      	movs	r0, #1
 800370c:	f7fe fc02 	bl	8001f14 <errLedOn>

  /* USER CODE END Error_Handler_Debug */
}
 8003710:	bf00      	nop
 8003712:	bd80      	pop	{r7, pc}
 8003714:	2000034c 	.word	0x2000034c

08003718 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8003722:	2200      	movs	r2, #0
 8003724:	2104      	movs	r1, #4
 8003726:	480c      	ldr	r0, [pc, #48]	; (8003758 <ST7789_WriteCommand+0x40>)
 8003728:	f001 fea4 	bl	8005474 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <ST7789_WriteCommand+0x44>)
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	2396      	movs	r3, #150	; 0x96
 8003732:	1df9      	adds	r1, r7, #7
 8003734:	2201      	movs	r2, #1
 8003736:	f003 f9bc 	bl	8006ab2 <HAL_SPI_Transmit>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <ST7789_WriteCommand+0x36>
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <ST7789_WriteCommand+0x48>)
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	f043 0310 	orr.w	r3, r3, #16
 8003748:	b29a      	uxth	r2, r3
 800374a:	4b05      	ldr	r3, [pc, #20]	; (8003760 <ST7789_WriteCommand+0x48>)
 800374c:	801a      	strh	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40020000 	.word	0x40020000
 800375c:	20000068 	.word	0x20000068
 8003760:	2000034c 	.word	0x2000034c

08003764 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 800376e:	2200      	movs	r2, #0
 8003770:	2104      	movs	r1, #4
 8003772:	480e      	ldr	r0, [pc, #56]	; (80037ac <ST7789_WriteCommands+0x48>)
 8003774:	f001 fe7e 	bl	8005474 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <ST7789_WriteCommands+0x4c>)
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	b29a      	uxth	r2, r3
 8003780:	2196      	movs	r1, #150	; 0x96
 8003782:	460b      	mov	r3, r1
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	f003 f991 	bl	8006ab2 <HAL_SPI_Transmit>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d006      	beq.n	80037a4 <ST7789_WriteCommands+0x40>
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <ST7789_WriteCommands+0x50>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	f043 0310 	orr.w	r3, r3, #16
 800379e:	b29a      	uxth	r2, r3
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <ST7789_WriteCommands+0x50>)
 80037a2:	801a      	strh	r2, [r3, #0]
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40020000 	.word	0x40020000
 80037b0:	20000068 	.word	0x20000068
 80037b4:	2000034c 	.word	0x2000034c

080037b8 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 80037c6:	2201      	movs	r2, #1
 80037c8:	2104      	movs	r1, #4
 80037ca:	481f      	ldr	r0, [pc, #124]	; (8003848 <ST7789_WriteData+0x90>)
 80037cc:	f001 fe52 	bl	8005474 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 80037d0:	e028      	b.n	8003824 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037d8:	4293      	cmp	r3, r2
 80037da:	bf28      	it	cs
 80037dc:	4613      	movcs	r3, r2
 80037de:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 80037e0:	4b1a      	ldr	r3, [pc, #104]	; (800384c <ST7789_WriteData+0x94>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 80037e6:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <ST7789_WriteData+0x98>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	89ba      	ldrh	r2, [r7, #12]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f003 fa9c 	bl	8006d2c <HAL_SPI_Transmit_DMA>
 80037f4:	4603      	mov	r3, r0
 80037f6:	461a      	mov	r2, r3
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 80037fe:	e002      	b.n	8003806 <ST7789_WriteData+0x4e>
 8003800:	2001      	movs	r0, #1
 8003802:	f000 ff93 	bl	800472c <HAL_Delay>
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <ST7789_WriteData+0x94>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	f083 0301 	eor.w	r3, r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f5      	bne.n	8003800 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8003814:	89bb      	ldrh	r3, [r7, #12]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800381c:	89bb      	ldrh	r3, [r7, #12]
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1d3      	bne.n	80037d2 <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d006      	beq.n	800383e <ST7789_WriteData+0x86>
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <ST7789_WriteData+0x9c>)
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	f043 0310 	orr.w	r3, r3, #16
 8003838:	b29a      	uxth	r2, r3
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <ST7789_WriteData+0x9c>)
 800383c:	801a      	strh	r2, [r3, #0]
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40020000 	.word	0x40020000
 800384c:	20000061 	.word	0x20000061
 8003850:	20000068 	.word	0x20000068
 8003854:	2000034c 	.word	0x2000034c

08003858 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003866:	2201      	movs	r2, #1
 8003868:	2104      	movs	r1, #4
 800386a:	4814      	ldr	r0, [pc, #80]	; (80038bc <ST7789_WriteDataLine+0x64>)
 800386c:	f001 fe02 	bl	8005474 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003870:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <ST7789_WriteDataLine+0x68>)
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8003876:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <ST7789_WriteDataLine+0x6c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	b292      	uxth	r2, r2
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	f003 fa53 	bl	8006d2c <HAL_SPI_Transmit_DMA>
 8003886:	4603      	mov	r3, r0
 8003888:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 800388a:	e002      	b.n	8003892 <ST7789_WriteDataLine+0x3a>
 800388c:	2001      	movs	r0, #1
 800388e:	f000 ff4d 	bl	800472c <HAL_Delay>
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <ST7789_WriteDataLine+0x68>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	f083 0301 	eor.w	r3, r3, #1
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f5      	bne.n	800388c <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d006      	beq.n	80038b4 <ST7789_WriteDataLine+0x5c>
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <ST7789_WriteDataLine+0x70>)
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	f043 0310 	orr.w	r3, r3, #16
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <ST7789_WriteDataLine+0x70>)
 80038b2:	801a      	strh	r2, [r3, #0]
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40020000 	.word	0x40020000
 80038c0:	20000061 	.word	0x20000061
 80038c4:	20000068 	.word	0x20000068
 80038c8:	2000034c 	.word	0x2000034c

080038cc <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 80038d6:	2201      	movs	r2, #1
 80038d8:	2104      	movs	r1, #4
 80038da:	480c      	ldr	r0, [pc, #48]	; (800390c <ST7789_WriteSmallData+0x40>)
 80038dc:	f001 fdca 	bl	8005474 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <ST7789_WriteSmallData+0x44>)
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	2396      	movs	r3, #150	; 0x96
 80038e6:	1df9      	adds	r1, r7, #7
 80038e8:	2201      	movs	r2, #1
 80038ea:	f003 f8e2 	bl	8006ab2 <HAL_SPI_Transmit>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d006      	beq.n	8003902 <ST7789_WriteSmallData+0x36>
 80038f4:	4b07      	ldr	r3, [pc, #28]	; (8003914 <ST7789_WriteSmallData+0x48>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	f043 0310 	orr.w	r3, r3, #16
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <ST7789_WriteSmallData+0x48>)
 8003900:	801a      	strh	r2, [r3, #0]
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40020000 	.word	0x40020000
 8003910:	20000068 	.word	0x20000068
 8003914:	2000034c 	.word	0x2000034c

08003918 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <ipsOn+0x18>
 8003928:	2029      	movs	r0, #41	; 0x29
 800392a:	f7ff fef5 	bl	8003718 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 800392e:	e002      	b.n	8003936 <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8003930:	2028      	movs	r0, #40	; 0x28
 8003932:	f7ff fef1 	bl	8003718 <ST7789_WriteCommand>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800394a:	2036      	movs	r0, #54	; 0x36
 800394c:	f7ff fee4 	bl	8003718 <ST7789_WriteCommand>
	switch (m) {
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d81a      	bhi.n	800398c <ST7789_SetRotation+0x4c>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <ST7789_SetRotation+0x1c>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	0800396d 	.word	0x0800396d
 8003960:	08003975 	.word	0x08003975
 8003964:	0800397d 	.word	0x0800397d
 8003968:	08003985 	.word	0x08003985
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 800396c:	20c0      	movs	r0, #192	; 0xc0
 800396e:	f7ff ffad 	bl	80038cc <ST7789_WriteSmallData>
		break;
 8003972:	e00c      	b.n	800398e <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003974:	20a0      	movs	r0, #160	; 0xa0
 8003976:	f7ff ffa9 	bl	80038cc <ST7789_WriteSmallData>
		break;
 800397a:	e008      	b.n	800398e <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 800397c:	2000      	movs	r0, #0
 800397e:	f7ff ffa5 	bl	80038cc <ST7789_WriteSmallData>
		break;
 8003982:	e004      	b.n	800398e <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003984:	2060      	movs	r0, #96	; 0x60
 8003986:	f7ff ffa1 	bl	80038cc <ST7789_WriteSmallData>
		break;
 800398a:	e000      	b.n	800398e <ST7789_SetRotation+0x4e>
	default:
		break;
 800398c:	bf00      	nop
	}
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop

08003998 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	4604      	mov	r4, r0
 80039a0:	4608      	mov	r0, r1
 80039a2:	4611      	mov	r1, r2
 80039a4:	461a      	mov	r2, r3
 80039a6:	4623      	mov	r3, r4
 80039a8:	80fb      	strh	r3, [r7, #6]
 80039aa:	4603      	mov	r3, r0
 80039ac:	80bb      	strh	r3, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	807b      	strh	r3, [r7, #2]
 80039b2:	4613      	mov	r3, r2
 80039b4:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	82fb      	strh	r3, [r7, #22]
 80039ba:	887b      	ldrh	r3, [r7, #2]
 80039bc:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80039be:	88bb      	ldrh	r3, [r7, #4]
 80039c0:	827b      	strh	r3, [r7, #18]
 80039c2:	883b      	ldrh	r3, [r7, #0]
 80039c4:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80039c6:	202a      	movs	r0, #42	; 0x2a
 80039c8:	f7ff fea6 	bl	8003718 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80039cc:	8afb      	ldrh	r3, [r7, #22]
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	733b      	strb	r3, [r7, #12]
 80039d6:	8afb      	ldrh	r3, [r7, #22]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	737b      	strb	r3, [r7, #13]
 80039dc:	8abb      	ldrh	r3, [r7, #20]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	73bb      	strb	r3, [r7, #14]
 80039e6:	8abb      	ldrh	r3, [r7, #20]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80039ec:	f107 030c 	add.w	r3, r7, #12
 80039f0:	2104      	movs	r1, #4
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fee0 	bl	80037b8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80039f8:	202b      	movs	r0, #43	; 0x2b
 80039fa:	f7ff fe8d 	bl	8003718 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80039fe:	8a7b      	ldrh	r3, [r7, #18]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	723b      	strb	r3, [r7, #8]
 8003a08:	8a7b      	ldrh	r3, [r7, #18]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	727b      	strb	r3, [r7, #9]
 8003a0e:	8a3b      	ldrh	r3, [r7, #16]
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	72bb      	strb	r3, [r7, #10]
 8003a18:	8a3b      	ldrh	r3, [r7, #16]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8003a1e:	f107 0308 	add.w	r3, r7, #8
 8003a22:	2104      	movs	r1, #4
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fec7 	bl	80037b8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8003a2a:	202c      	movs	r0, #44	; 0x2c
 8003a2c:	f7ff fe74 	bl	8003718 <ST7789_WriteCommand>
}
 8003a30:	bf00      	nop
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd90      	pop	{r4, r7, pc}

08003a38 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8003a3c:	2014      	movs	r0, #20
 8003a3e:	f000 fe75 	bl	800472c <HAL_Delay>
    ST7789_RST_Clr();
 8003a42:	2200      	movs	r2, #0
 8003a44:	2102      	movs	r1, #2
 8003a46:	4808      	ldr	r0, [pc, #32]	; (8003a68 <ST7789_Reset+0x30>)
 8003a48:	f001 fd14 	bl	8005474 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8003a4c:	200a      	movs	r0, #10
 8003a4e:	f000 fe6d 	bl	800472c <HAL_Delay>
    ST7789_RST_Set();
 8003a52:	2201      	movs	r2, #1
 8003a54:	2102      	movs	r1, #2
 8003a56:	4804      	ldr	r0, [pc, #16]	; (8003a68 <ST7789_Reset+0x30>)
 8003a58:	f001 fd0c 	bl	8005474 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8003a5c:	2014      	movs	r0, #20
 8003a5e:	f000 fe65 	bl	800472c <HAL_Delay>
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40020000 	.word	0x40020000

08003a6c <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8003a6c:	b590      	push	{r4, r7, lr}
 8003a6e:	b08f      	sub	sp, #60	; 0x3c
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8003a76:	203a      	movs	r0, #58	; 0x3a
 8003a78:	f7ff fe4e 	bl	8003718 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8003a7c:	2055      	movs	r0, #85	; 0x55
 8003a7e:	f7ff ff25 	bl	80038cc <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8003a82:	20b2      	movs	r0, #178	; 0xb2
 8003a84:	f7ff fe48 	bl	8003718 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8003a88:	4a3a      	ldr	r2, [pc, #232]	; (8003b74 <ST7789_Init+0x108>)
 8003a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a92:	6018      	str	r0, [r3, #0]
 8003a94:	3304      	adds	r3, #4
 8003a96:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8003a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a9c:	2105      	movs	r1, #5
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fe8a 	bl	80037b8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8003aa4:	2003      	movs	r0, #3
 8003aa6:	f7ff ff4b 	bl	8003940 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8003aaa:	20b7      	movs	r0, #183	; 0xb7
 8003aac:	f7ff fe34 	bl	8003718 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8003ab0:	2035      	movs	r0, #53	; 0x35
 8003ab2:	f7ff ff0b 	bl	80038cc <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8003ab6:	20bb      	movs	r0, #187	; 0xbb
 8003ab8:	f7ff fe2e 	bl	8003718 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8003abc:	2019      	movs	r0, #25
 8003abe:	f7ff ff05 	bl	80038cc <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8003ac2:	20c0      	movs	r0, #192	; 0xc0
 8003ac4:	f7ff fe28 	bl	8003718 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8003ac8:	202c      	movs	r0, #44	; 0x2c
 8003aca:	f7ff feff 	bl	80038cc <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8003ace:	20c2      	movs	r0, #194	; 0xc2
 8003ad0:	f7ff fe22 	bl	8003718 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f7ff fef9 	bl	80038cc <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8003ada:	20ff      	movs	r0, #255	; 0xff
 8003adc:	f7ff fef6 	bl	80038cc <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8003ae0:	20c3      	movs	r0, #195	; 0xc3
 8003ae2:	f7ff fe19 	bl	8003718 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8003ae6:	2012      	movs	r0, #18
 8003ae8:	f7ff fef0 	bl	80038cc <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8003aec:	20c4      	movs	r0, #196	; 0xc4
 8003aee:	f7ff fe13 	bl	8003718 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8003af2:	2020      	movs	r0, #32
 8003af4:	f7ff feea 	bl	80038cc <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8003af8:	20c6      	movs	r0, #198	; 0xc6
 8003afa:	f7ff fe0d 	bl	8003718 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8003afe:	200f      	movs	r0, #15
 8003b00:	f7ff fee4 	bl	80038cc <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8003b04:	20d0      	movs	r0, #208	; 0xd0
 8003b06:	f7ff fe07 	bl	8003718 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8003b0a:	20a4      	movs	r0, #164	; 0xa4
 8003b0c:	f7ff fede 	bl	80038cc <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8003b10:	20a1      	movs	r0, #161	; 0xa1
 8003b12:	f7ff fedb 	bl	80038cc <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8003b16:	20e0      	movs	r0, #224	; 0xe0
 8003b18:	f7ff fdfe 	bl	8003718 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8003b1c:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <ST7789_Init+0x10c>)
 8003b1e:	f107 041c 	add.w	r4, r7, #28
 8003b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b24:	c407      	stmia	r4!, {r0, r1, r2}
 8003b26:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003b28:	f107 031c 	add.w	r3, r7, #28
 8003b2c:	210e      	movs	r1, #14
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fe42 	bl	80037b8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8003b34:	20e1      	movs	r0, #225	; 0xe1
 8003b36:	f7ff fdef 	bl	8003718 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <ST7789_Init+0x110>)
 8003b3c:	f107 040c 	add.w	r4, r7, #12
 8003b40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b42:	c407      	stmia	r4!, {r0, r1, r2}
 8003b44:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003b46:	f107 030c 	add.w	r3, r7, #12
 8003b4a:	210e      	movs	r1, #14
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fe33 	bl	80037b8 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8003b52:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <ST7789_Init+0x114>)
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 8003b56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b5a:	2104      	movs	r1, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fe01 	bl	8003764 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f80d 	bl	8003b84 <ST7789_Fill_Color>
}
 8003b6a:	bf00      	nop
 8003b6c:	373c      	adds	r7, #60	; 0x3c
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd90      	pop	{r4, r7, pc}
 8003b72:	bf00      	nop
 8003b74:	0800e094 	.word	0x0800e094
 8003b78:	0800e09c 	.word	0x0800e09c
 8003b7c:	0800e0ac 	.word	0x0800e0ac
 8003b80:	28131121 	.word	0x28131121

08003b84 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b0fc      	sub	sp, #496	; 0x1f0
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003b90:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003b94:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8003b96:	23ef      	movs	r3, #239	; 0xef
 8003b98:	22ef      	movs	r2, #239	; 0xef
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	f7ff fefb 	bl	8003998 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003bae:	e024      	b.n	8003bfa <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8003bb0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003bb4:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	b21a      	sxth	r2, r3
 8003bc0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003bc4:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	b21b      	sxth	r3, r3
 8003bce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bd2:	b21b      	sxth	r3, r3
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	b219      	sxth	r1, r3
 8003bd8:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8003bdc:	f107 020c 	add.w	r2, r7, #12
 8003be0:	4413      	add	r3, r2
 8003be2:	b28a      	uxth	r2, r1
 8003be4:	801a      	strh	r2, [r3, #0]
		i += 2;
 8003be6:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8003bea:	3302      	adds	r3, #2
 8003bec:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8003bf0:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003bfa:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003bfe:	2bef      	cmp	r3, #239	; 0xef
 8003c00:	d9d6      	bls.n	8003bb0 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003c08:	e00b      	b.n	8003c22 <ST7789_Fill_Color+0x9e>
 8003c0a:	f107 030c 	add.w	r3, r7, #12
 8003c0e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fe20 	bl	8003858 <ST7789_WriteDataLine>
 8003c18:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003c22:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003c26:	2bef      	cmp	r3, #239	; 0xef
 8003c28:	d9ef      	bls.n	8003c0a <ST7789_Fill_Color+0x86>

//#endif
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8003c36:	b590      	push	{r4, r7, lr}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	4608      	mov	r0, r1
 8003c40:	4611      	mov	r1, r2
 8003c42:	461a      	mov	r2, r3
 8003c44:	4623      	mov	r3, r4
 8003c46:	80fb      	strh	r3, [r7, #6]
 8003c48:	4603      	mov	r3, r0
 8003c4a:	80bb      	strh	r3, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	807b      	strh	r3, [r7, #2]
 8003c50:	4613      	mov	r3, r2
 8003c52:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8003c54:	887b      	ldrh	r3, [r7, #2]
 8003c56:	2bef      	cmp	r3, #239	; 0xef
 8003c58:	d82b      	bhi.n	8003cb2 <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8003c5a:	883b      	ldrh	r3, [r7, #0]
 8003c5c:	2bef      	cmp	r3, #239	; 0xef
 8003c5e:	d828      	bhi.n	8003cb2 <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 8003c60:	8c3b      	ldrh	r3, [r7, #32]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	723b      	strb	r3, [r7, #8]
 8003c6a:	8c3b      	ldrh	r3, [r7, #32]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8003c70:	883b      	ldrh	r3, [r7, #0]
 8003c72:	887a      	ldrh	r2, [r7, #2]
 8003c74:	88b9      	ldrh	r1, [r7, #4]
 8003c76:	88f8      	ldrh	r0, [r7, #6]
 8003c78:	f7ff fe8e 	bl	8003998 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8003c7c:	88bb      	ldrh	r3, [r7, #4]
 8003c7e:	81fb      	strh	r3, [r7, #14]
 8003c80:	e012      	b.n	8003ca8 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	81bb      	strh	r3, [r7, #12]
 8003c86:	e008      	b.n	8003c9a <ST7789_Fill+0x64>
 8003c88:	f107 0308 	add.w	r3, r7, #8
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fd92 	bl	80037b8 <ST7789_WriteData>
 8003c94:	89bb      	ldrh	r3, [r7, #12]
 8003c96:	3301      	adds	r3, #1
 8003c98:	81bb      	strh	r3, [r7, #12]
 8003c9a:	89ba      	ldrh	r2, [r7, #12]
 8003c9c:	887b      	ldrh	r3, [r7, #2]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d9f2      	bls.n	8003c88 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 8003ca2:	89fb      	ldrh	r3, [r7, #14]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	81fb      	strh	r3, [r7, #14]
 8003ca8:	89fa      	ldrh	r2, [r7, #14]
 8003caa:	883b      	ldrh	r3, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d9e8      	bls.n	8003c82 <ST7789_Fill+0x4c>
 8003cb0:	e000      	b.n	8003cb4 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8003cb2:	bf00      	nop
	}
}
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd90      	pop	{r4, r7, pc}

08003cba <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003cba:	b082      	sub	sp, #8
 8003cbc:	b590      	push	{r4, r7, lr}
 8003cbe:	b089      	sub	sp, #36	; 0x24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	80fb      	strh	r3, [r7, #6]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	80bb      	strh	r3, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8003cd0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	4413      	add	r3, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29c      	uxth	r4, r3
 8003ce0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	88bb      	ldrh	r3, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	88b9      	ldrh	r1, [r7, #4]
 8003cf2:	88f8      	ldrh	r0, [r7, #6]
 8003cf4:	4622      	mov	r2, r4
 8003cf6:	f7ff fe4f 	bl	8003998 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8003cfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	733b      	strb	r3, [r7, #12]
 8003d04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8003d0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	723b      	strb	r3, [r7, #8]
 8003d16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	e02f      	b.n	8003d88 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8003d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	3b20      	subs	r3, #32
 8003d2e:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	4619      	mov	r1, r3
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	440b      	add	r3, r1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e015      	b.n	8003d76 <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <ST7789_WriteChar+0xa8>
				uk = cdata;
 8003d5a:	f107 030c 	add.w	r3, r7, #12
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e002      	b.n	8003d68 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 8003d68:	2102      	movs	r1, #2
 8003d6a:	6978      	ldr	r0, [r7, #20]
 8003d6c:	f7ff fd24 	bl	80037b8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d3e3      	bcc.n	8003d4a <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3301      	adds	r3, #1
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d3c9      	bcc.n	8003d28 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3724      	adds	r7, #36	; 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003da0:	b002      	add	sp, #8
 8003da2:	4770      	bx	lr

08003da4 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003da4:	b082      	sub	sp, #8
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af04      	add	r7, sp, #16
 8003dac:	603a      	str	r2, [r7, #0]
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	4603      	mov	r3, r0
 8003db2:	80fb      	strh	r3, [r7, #6]
 8003db4:	460b      	mov	r3, r1
 8003db6:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d03f      	beq.n	8003e3e <ST7789_WriteString+0x9a>

	while (*str) {
 8003dbe:	e039      	b.n	8003e34 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	7d3a      	ldrb	r2, [r7, #20]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	2bef      	cmp	r3, #239	; 0xef
 8003dc8:	dd13      	ble.n	8003df2 <ST7789_WriteString+0x4e>
			x = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003dce:	7d7b      	ldrb	r3, [r7, #21]
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	88bb      	ldrh	r3, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8003dd8:	88bb      	ldrh	r3, [r7, #4]
 8003dda:	7d7a      	ldrb	r2, [r7, #21]
 8003ddc:	4413      	add	r3, r2
 8003dde:	2bef      	cmp	r3, #239	; 0xef
 8003de0:	dc2f      	bgt.n	8003e42 <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d103      	bne.n	8003df2 <ST7789_WriteString+0x4e>
				str++;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	603b      	str	r3, [r7, #0]
				continue;
 8003df0:	e020      	b.n	8003e34 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b0a      	cmp	r3, #10
 8003df8:	d012      	beq.n	8003e20 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	88b9      	ldrh	r1, [r7, #4]
 8003e00:	88f8      	ldrh	r0, [r7, #6]
 8003e02:	8c3b      	ldrh	r3, [r7, #32]
 8003e04:	9302      	str	r3, [sp, #8]
 8003e06:	8bbb      	ldrh	r3, [r7, #28]
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f7ff ff53 	bl	8003cba <ST7789_WriteChar>
			x += font.width;
 8003e14:	7d3b      	ldrb	r3, [r7, #20]
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
 8003e1e:	e006      	b.n	8003e2e <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003e24:	7d7b      	ldrb	r3, [r7, #21]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	88bb      	ldrh	r3, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	603b      	str	r3, [r7, #0]
	while (*str) {
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1c1      	bne.n	8003dc0 <ST7789_WriteString+0x1c>
 8003e3c:	e002      	b.n	8003e44 <ST7789_WriteString+0xa0>
	if (!str) return;
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 8003e42:	bf00      	nop
	}
}
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e4c:	b002      	add	sp, #8
 8003e4e:	4770      	bx	lr

08003e50 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b0a4      	sub	sp, #144	; 0x90
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	f107 0310 	add.w	r3, r7, #16
 8003e64:	227c      	movs	r2, #124	; 0x7c
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f008 fbcd 	bl	800c608 <memset>

	memset(st, 0x20, 127);
 8003e6e:	f107 030c 	add.w	r3, r7, #12
 8003e72:	227f      	movs	r2, #127	; 0x7f
 8003e74:	2120      	movs	r1, #32
 8003e76:	4618      	mov	r0, r3
 8003e78:	f008 fbc6 	bl	800c608 <memset>
	int8_t k = strlen(str);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7fc f9a7 	bl	80001d0 <strlen>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 8003e88:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8003e8c:	887b      	ldrh	r3, [r7, #2]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	da25      	bge.n	8003ede <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 8003e92:	887a      	ldrh	r2, [r7, #2]
 8003e94:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	0fda      	lsrs	r2, r3, #31
 8003e9c:	4413      	add	r3, r2
 8003e9e:	105b      	asrs	r3, r3, #1
 8003ea0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8003ea4:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8003ea8:	f107 020c 	add.w	r2, r7, #12
 8003eac:	4413      	add	r3, r2
 8003eae:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f008 fb99 	bl	800c5ec <memcpy>
		st[k + n*2 + 1] = '\0';
 8003eba:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8003ebe:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	3390      	adds	r3, #144	; 0x90
 8003eca:	443b      	add	r3, r7
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 8003ed2:	f107 030c 	add.w	r3, r7, #12
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f009 f892 	bl	800d002 <strcpy>
	}

	return str;
 8003ede:	687b      	ldr	r3, [r7, #4]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3790      	adds	r7, #144	; 0x90
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <HAL_MspInit+0x74>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	4a19      	ldr	r2, [pc, #100]	; (8003f5c <HAL_MspInit+0x74>)
 8003ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003efc:	6453      	str	r3, [r2, #68]	; 0x44
 8003efe:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <HAL_MspInit+0x74>)
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <HAL_MspInit+0x74>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	4a12      	ldr	r2, [pc, #72]	; (8003f5c <HAL_MspInit+0x74>)
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f18:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1a:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <HAL_MspInit+0x74>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f26:	2200      	movs	r2, #0
 8003f28:	210f      	movs	r1, #15
 8003f2a:	f06f 0001 	mvn.w	r0, #1
 8003f2e:	f000 fcd9 	bl	80048e4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003f32:	2200      	movs	r2, #0
 8003f34:	2105      	movs	r1, #5
 8003f36:	2005      	movs	r0, #5
 8003f38:	f000 fcd4 	bl	80048e4 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003f3c:	2005      	movs	r0, #5
 8003f3e:	f000 fced 	bl	800491c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003f42:	2200      	movs	r2, #0
 8003f44:	2105      	movs	r1, #5
 8003f46:	2005      	movs	r0, #5
 8003f48:	f000 fccc 	bl	80048e4 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003f4c:	2005      	movs	r0, #5
 8003f4e:	f000 fce5 	bl	800491c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800

08003f60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f68:	f107 0308 	add.w	r3, r7, #8
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a0c      	ldr	r2, [pc, #48]	; (8003fac <HAL_RTC_MspInit+0x4c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d110      	bne.n	8003fa2 <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003f80:	2302      	movs	r3, #2
 8003f82:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <HAL_RTC_MspInit+0x50>)
 8003f86:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f88:	f107 0308 	add.w	r3, r7, #8
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f002 f927 	bl	80061e0 <HAL_RCCEx_PeriphCLKConfig>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8003f98:	f7ff fbae 	bl	80036f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_RTC_MspInit+0x54>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003fa2:	bf00      	nop
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40002800 	.word	0x40002800
 8003fb0:	00190300 	.word	0x00190300
 8003fb4:	42470e3c 	.word	0x42470e3c

08003fb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	; 0x28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc0:	f107 0314 	add.w	r3, r7, #20
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	609a      	str	r2, [r3, #8]
 8003fcc:	60da      	str	r2, [r3, #12]
 8003fce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a39      	ldr	r2, [pc, #228]	; (80040bc <HAL_SPI_MspInit+0x104>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d16b      	bne.n	80040b2 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	4b38      	ldr	r3, [pc, #224]	; (80040c0 <HAL_SPI_MspInit+0x108>)
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	4a37      	ldr	r2, [pc, #220]	; (80040c0 <HAL_SPI_MspInit+0x108>)
 8003fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fea:	4b35      	ldr	r3, [pc, #212]	; (80040c0 <HAL_SPI_MspInit+0x108>)
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_SPI_MspInit+0x108>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	4a30      	ldr	r2, [pc, #192]	; (80040c0 <HAL_SPI_MspInit+0x108>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6313      	str	r3, [r2, #48]	; 0x30
 8004006:	4b2e      	ldr	r3, [pc, #184]	; (80040c0 <HAL_SPI_MspInit+0x108>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 8004012:	23a0      	movs	r3, #160	; 0xa0
 8004014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004016:	2302      	movs	r3, #2
 8004018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800401e:	2303      	movs	r3, #3
 8004020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004022:	2305      	movs	r3, #5
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004026:	f107 0314 	add.w	r3, r7, #20
 800402a:	4619      	mov	r1, r3
 800402c:	4825      	ldr	r0, [pc, #148]	; (80040c4 <HAL_SPI_MspInit+0x10c>)
 800402e:	f001 f885 	bl	800513c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8004032:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 8004034:	4a25      	ldr	r2, [pc, #148]	; (80040cc <HAL_SPI_MspInit+0x114>)
 8004036:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004038:	4b23      	ldr	r3, [pc, #140]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 800403a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800403e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004040:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 8004042:	2240      	movs	r2, #64	; 0x40
 8004044:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004046:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 8004048:	2200      	movs	r2, #0
 800404a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800404c:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 800404e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004052:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004054:	4b1c      	ldr	r3, [pc, #112]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 8004056:	2200      	movs	r2, #0
 8004058:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 800405c:	2200      	movs	r2, #0
 800405e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004060:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 8004062:	2200      	movs	r2, #0
 8004064:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004066:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 8004068:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800406c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800406e:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 8004070:	2204      	movs	r2, #4
 8004072:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004074:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 8004076:	2203      	movs	r2, #3
 8004078:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800407a:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 800407c:	2200      	movs	r2, #0
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004080:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004086:	4810      	ldr	r0, [pc, #64]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 8004088:	f000 fc56 	bl	8004938 <HAL_DMA_Init>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8004092:	f7ff fb31 	bl	80036f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a0b      	ldr	r2, [pc, #44]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 800409a:	649a      	str	r2, [r3, #72]	; 0x48
 800409c:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <HAL_SPI_MspInit+0x110>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 80040a2:	2200      	movs	r2, #0
 80040a4:	2102      	movs	r1, #2
 80040a6:	2023      	movs	r0, #35	; 0x23
 80040a8:	f000 fc1c 	bl	80048e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80040ac:	2023      	movs	r0, #35	; 0x23
 80040ae:	f000 fc35 	bl	800491c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80040b2:	bf00      	nop
 80040b4:	3728      	adds	r7, #40	; 0x28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40013000 	.word	0x40013000
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40020000 	.word	0x40020000
 80040c8:	200001b4 	.word	0x200001b4
 80040cc:	40026458 	.word	0x40026458

080040d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e0:	d115      	bne.n	800410e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <HAL_TIM_Base_MspInit+0x48>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	4a0b      	ldr	r2, [pc, #44]	; (8004118 <HAL_TIM_Base_MspInit+0x48>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6413      	str	r3, [r2, #64]	; 0x40
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_TIM_Base_MspInit+0x48>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80040fe:	2200      	movs	r2, #0
 8004100:	2101      	movs	r1, #1
 8004102:	201c      	movs	r0, #28
 8004104:	f000 fbee 	bl	80048e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004108:	201c      	movs	r0, #28
 800410a:	f000 fc07 	bl	800491c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800

0800411c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	; 0x28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004124:	f107 0314 	add.w	r3, r7, #20
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a35      	ldr	r2, [pc, #212]	; (8004210 <HAL_UART_MspInit+0xf4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d163      	bne.n	8004206 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	4b34      	ldr	r3, [pc, #208]	; (8004214 <HAL_UART_MspInit+0xf8>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	4a33      	ldr	r2, [pc, #204]	; (8004214 <HAL_UART_MspInit+0xf8>)
 8004148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800414c:	6413      	str	r3, [r2, #64]	; 0x40
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <HAL_UART_MspInit+0xf8>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <HAL_UART_MspInit+0xf8>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	4a2c      	ldr	r2, [pc, #176]	; (8004214 <HAL_UART_MspInit+0xf8>)
 8004164:	f043 0302 	orr.w	r3, r3, #2
 8004168:	6313      	str	r3, [r2, #48]	; 0x30
 800416a:	4b2a      	ldr	r3, [pc, #168]	; (8004214 <HAL_UART_MspInit+0xf8>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 8004176:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800417a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417c:	2302      	movs	r3, #2
 800417e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004184:	2303      	movs	r3, #3
 8004186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004188:	2307      	movs	r3, #7
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	4619      	mov	r1, r3
 8004192:	4821      	ldr	r0, [pc, #132]	; (8004218 <HAL_UART_MspInit+0xfc>)
 8004194:	f000 ffd2 	bl	800513c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004198:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_UART_MspInit+0x100>)
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <HAL_UART_MspInit+0x104>)
 800419c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800419e:	4b1f      	ldr	r3, [pc, #124]	; (800421c <HAL_UART_MspInit+0x100>)
 80041a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HAL_UART_MspInit+0x100>)
 80041a8:	2240      	movs	r2, #64	; 0x40
 80041aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <HAL_UART_MspInit+0x100>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <HAL_UART_MspInit+0x100>)
 80041b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ba:	4b18      	ldr	r3, [pc, #96]	; (800421c <HAL_UART_MspInit+0x100>)
 80041bc:	2200      	movs	r2, #0
 80041be:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041c0:	4b16      	ldr	r3, [pc, #88]	; (800421c <HAL_UART_MspInit+0x100>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_UART_MspInit+0x100>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80041cc:	4b13      	ldr	r3, [pc, #76]	; (800421c <HAL_UART_MspInit+0x100>)
 80041ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041d2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_UART_MspInit+0x100>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80041da:	4810      	ldr	r0, [pc, #64]	; (800421c <HAL_UART_MspInit+0x100>)
 80041dc:	f000 fbac 	bl	8004938 <HAL_DMA_Init>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80041e6:	f7ff fa87 	bl	80036f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a0b      	ldr	r2, [pc, #44]	; (800421c <HAL_UART_MspInit+0x100>)
 80041ee:	635a      	str	r2, [r3, #52]	; 0x34
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <HAL_UART_MspInit+0x100>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80041f6:	2200      	movs	r2, #0
 80041f8:	2105      	movs	r1, #5
 80041fa:	2027      	movs	r0, #39	; 0x27
 80041fc:	f000 fb72 	bl	80048e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004200:	2027      	movs	r0, #39	; 0x27
 8004202:	f000 fb8b 	bl	800491c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004206:	bf00      	nop
 8004208:	3728      	adds	r7, #40	; 0x28
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40004800 	.word	0x40004800
 8004214:	40023800 	.word	0x40023800
 8004218:	40020400 	.word	0x40020400
 800421c:	200002a0 	.word	0x200002a0
 8004220:	40026058 	.word	0x40026058

08004224 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800422a:	1d3b      	adds	r3, r7, #4
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004238:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_FSMC_MspInit+0x98>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d139      	bne.n	80042b4 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8004240:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <HAL_FSMC_MspInit+0x98>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_FSMC_MspInit+0x9c>)
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	4a1c      	ldr	r2, [pc, #112]	; (80042c0 <HAL_FSMC_MspInit+0x9c>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6393      	str	r3, [r2, #56]	; 0x38
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <HAL_FSMC_MspInit+0x9c>)
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8004262:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8004266:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004268:	2302      	movs	r3, #2
 800426a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004270:	2303      	movs	r3, #3
 8004272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004274:	230c      	movs	r3, #12
 8004276:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004278:	1d3b      	adds	r3, r7, #4
 800427a:	4619      	mov	r1, r3
 800427c:	4811      	ldr	r0, [pc, #68]	; (80042c4 <HAL_FSMC_MspInit+0xa0>)
 800427e:	f000 ff5d 	bl	800513c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 8004282:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8004286:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004288:	2302      	movs	r3, #2
 800428a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004290:	2303      	movs	r3, #3
 8004292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004294:	230c      	movs	r3, #12
 8004296:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004298:	1d3b      	adds	r3, r7, #4
 800429a:	4619      	mov	r1, r3
 800429c:	480a      	ldr	r0, [pc, #40]	; (80042c8 <HAL_FSMC_MspInit+0xa4>)
 800429e:	f000 ff4d 	bl	800513c <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 80042a2:	2200      	movs	r2, #0
 80042a4:	2105      	movs	r1, #5
 80042a6:	2030      	movs	r0, #48	; 0x30
 80042a8:	f000 fb1c 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 80042ac:	2030      	movs	r0, #48	; 0x30
 80042ae:	f000 fb35 	bl	800491c <HAL_NVIC_EnableIRQ>
 80042b2:	e000      	b.n	80042b6 <HAL_FSMC_MspInit+0x92>
    return;
 80042b4:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20001bb8 	.word	0x20001bb8
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40020c00 	.word	0x40020c00

080042cc <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 80042d4:	f7ff ffa6 	bl	8004224 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08c      	sub	sp, #48	; 0x30
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80042f0:	2200      	movs	r2, #0
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	2019      	movs	r0, #25
 80042f6:	f000 faf5 	bl	80048e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80042fa:	2019      	movs	r0, #25
 80042fc:	f000 fb0e 	bl	800491c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <HAL_InitTick+0xa4>)
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <HAL_InitTick+0xa4>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	6453      	str	r3, [r2, #68]	; 0x44
 8004310:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <HAL_InitTick+0xa4>)
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800431c:	f107 0210 	add.w	r2, r7, #16
 8004320:	f107 0314 	add.w	r3, r7, #20
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f001 ff28 	bl	800617c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800432c:	f001 ff12 	bl	8006154 <HAL_RCC_GetPCLK2Freq>
 8004330:	4603      	mov	r3, r0
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	4a13      	ldr	r2, [pc, #76]	; (8004388 <HAL_InitTick+0xa8>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	0c9b      	lsrs	r3, r3, #18
 8004340:	3b01      	subs	r3, #1
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004344:	4b11      	ldr	r3, [pc, #68]	; (800438c <HAL_InitTick+0xac>)
 8004346:	4a12      	ldr	r2, [pc, #72]	; (8004390 <HAL_InitTick+0xb0>)
 8004348:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800434a:	4b10      	ldr	r3, [pc, #64]	; (800438c <HAL_InitTick+0xac>)
 800434c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004350:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004352:	4a0e      	ldr	r2, [pc, #56]	; (800438c <HAL_InitTick+0xac>)
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <HAL_InitTick+0xac>)
 800435a:	2200      	movs	r2, #0
 800435c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800435e:	4b0b      	ldr	r3, [pc, #44]	; (800438c <HAL_InitTick+0xac>)
 8004360:	2200      	movs	r2, #0
 8004362:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004364:	4809      	ldr	r0, [pc, #36]	; (800438c <HAL_InitTick+0xac>)
 8004366:	f003 f80b 	bl	8007380 <HAL_TIM_Base_Init>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d104      	bne.n	800437a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004370:	4806      	ldr	r0, [pc, #24]	; (800438c <HAL_InitTick+0xac>)
 8004372:	f003 f855 	bl	8007420 <HAL_TIM_Base_Start_IT>
 8004376:	4603      	mov	r3, r0
 8004378:	e000      	b.n	800437c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
}
 800437c:	4618      	mov	r0, r3
 800437e:	3730      	adds	r7, #48	; 0x30
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40023800 	.word	0x40023800
 8004388:	431bde83 	.word	0x431bde83
 800438c:	20001bbc 	.word	0x20001bbc
 8004390:	40010000 	.word	0x40010000

08004394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004398:	bf00      	nop
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043a2:	b480      	push	{r7}
 80043a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043a6:	e7fe      	b.n	80043a6 <HardFault_Handler+0x4>

080043a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043ac:	e7fe      	b.n	80043ac <MemManage_Handler+0x4>

080043ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043b2:	e7fe      	b.n	80043b2 <BusFault_Handler+0x4>

080043b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043b8:	e7fe      	b.n	80043b8 <UsageFault_Handler+0x4>

080043ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043ba:	b480      	push	{r7}
 80043bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80043dc:	4802      	ldr	r0, [pc, #8]	; (80043e8 <DMA1_Stream3_IRQHandler+0x10>)
 80043de:	f000 fc43 	bl	8004c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	200002a0 	.word	0x200002a0

080043ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043f0:	4802      	ldr	r0, [pc, #8]	; (80043fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80043f2:	f003 f885 	bl	8007500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20001bbc 	.word	0x20001bbc

08004400 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004404:	4802      	ldr	r0, [pc, #8]	; (8004410 <TIM2_IRQHandler+0x10>)
 8004406:	f003 f87b 	bl	8007500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000214 	.word	0x20000214

08004414 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004418:	4802      	ldr	r0, [pc, #8]	; (8004424 <SPI1_IRQHandler+0x10>)
 800441a:	f002 fd3d 	bl	8006e98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800441e:	bf00      	nop
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	2000015c 	.word	0x2000015c

08004428 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800442c:	4802      	ldr	r0, [pc, #8]	; (8004438 <USART3_IRQHandler+0x10>)
 800442e:	f003 fd25 	bl	8007e7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004432:	bf00      	nop
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	2000025c 	.word	0x2000025c

0800443c <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8004440:	4802      	ldr	r0, [pc, #8]	; (800444c <FSMC_IRQHandler+0x10>)
 8004442:	f001 f898 	bl	8005576 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8004446:	bf00      	nop
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000300 	.word	0x20000300

08004450 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004454:	4802      	ldr	r0, [pc, #8]	; (8004460 <DMA2_Stream3_IRQHandler+0x10>)
 8004456:	f000 fc07 	bl	8004c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	200001b4 	.word	0x200001b4

08004464 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	e00a      	b.n	800448c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004476:	f3af 8000 	nop.w
 800447a:	4601      	mov	r1, r0
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	60ba      	str	r2, [r7, #8]
 8004482:	b2ca      	uxtb	r2, r1
 8004484:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	3301      	adds	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	429a      	cmp	r2, r3
 8004492:	dbf0      	blt.n	8004476 <_read+0x12>
	}

return len;
 8004494:	687b      	ldr	r3, [r7, #4]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <_close>:
	}
	return len;
}

int _close(int file)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
	return -1;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044c6:	605a      	str	r2, [r3, #4]
	return 0;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <_isatty>:

int _isatty(int file)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
	return 1;
 80044de:	2301      	movs	r3, #1
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
	return 0;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004510:	4a14      	ldr	r2, [pc, #80]	; (8004564 <_sbrk+0x5c>)
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <_sbrk+0x60>)
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800451c:	4b13      	ldr	r3, [pc, #76]	; (800456c <_sbrk+0x64>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004524:	4b11      	ldr	r3, [pc, #68]	; (800456c <_sbrk+0x64>)
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <_sbrk+0x68>)
 8004528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <_sbrk+0x64>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	429a      	cmp	r2, r3
 8004536:	d207      	bcs.n	8004548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004538:	f007 fe80 	bl	800c23c <__errno>
 800453c:	4603      	mov	r3, r0
 800453e:	220c      	movs	r2, #12
 8004540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004546:	e009      	b.n	800455c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004548:	4b08      	ldr	r3, [pc, #32]	; (800456c <_sbrk+0x64>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <_sbrk+0x64>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	4a05      	ldr	r2, [pc, #20]	; (800456c <_sbrk+0x64>)
 8004558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800455a:	68fb      	ldr	r3, [r7, #12]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20020000 	.word	0x20020000
 8004568:	00000800 	.word	0x00000800
 800456c:	20001c04 	.word	0x20001c04
 8004570:	200062a8 	.word	0x200062a8

08004574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004578:	4b08      	ldr	r3, [pc, #32]	; (800459c <SystemInit+0x28>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	4a07      	ldr	r2, [pc, #28]	; (800459c <SystemInit+0x28>)
 8004580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <SystemInit+0x28>)
 800458a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800458e:	609a      	str	r2, [r3, #8]
#endif
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <io_fs_unmount>:
/brief: Unmount a FS
/param:
/return: A negative error code on failure
-----------------------------------------------------------*/
int io_fs_unmount()
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
    return lfs_unmount(&_lfs);
 80045a4:	4802      	ldr	r0, [pc, #8]	; (80045b0 <io_fs_unmount+0x10>)
 80045a6:	f000 f837 	bl	8004618 <lfs_unmount>
 80045aa:	4603      	mov	r3, r0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20001c08 	.word	0x20001c08

080045b4 <lfs_free>:
    return NULL;
#endif
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f008 f80d 	bl	800c5dc <free>
#else
    (void)p;
#endif
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <lfs_deinit>:
cleanup:
    lfs_deinit(lfs);
    return err;
}

static int lfs_deinit(lfs_t *lfs) {
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff ffe7 	bl	80045b4 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d104      	bne.n	80045fa <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff ffdd 	bl	80045b4 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	2b00      	cmp	r3, #0
 8004602:	d104      	bne.n	800460e <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff ffd3 	bl	80045b4 <lfs_free>
    }

    return 0;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <lfs_unmount>:
    lfs_unmount(lfs);
    LFS_TRACE("lfs_mount -> %d", err);
    return err;
}

int lfs_unmount(lfs_t *lfs) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	f640 6199 	movw	r1, #3737	; 0xe99
 8004626:	4809      	ldr	r0, [pc, #36]	; (800464c <lfs_unmount+0x34>)
 8004628:	f008 fbda 	bl	800cde0 <iprintf>
    int err = lfs_deinit(lfs);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ffcc 	bl	80045ca <lfs_deinit>
 8004632:	60f8      	str	r0, [r7, #12]
    LFS_TRACE("lfs_unmount -> %d", err);
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	f640 619b 	movw	r1, #3739	; 0xe9b
 800463a:	4805      	ldr	r0, [pc, #20]	; (8004650 <lfs_unmount+0x38>)
 800463c:	f008 fbd0 	bl	800cde0 <iprintf>
    return err;
 8004640:	68fb      	ldr	r3, [r7, #12]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	0800eff8 	.word	0x0800eff8
 8004650:	0800f018 	.word	0x0800f018

08004654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800468c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004658:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800465a:	e003      	b.n	8004664 <LoopCopyDataInit>

0800465c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800465e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004660:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004662:	3104      	adds	r1, #4

08004664 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004664:	480b      	ldr	r0, [pc, #44]	; (8004694 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004666:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004668:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800466a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800466c:	d3f6      	bcc.n	800465c <CopyDataInit>
  ldr  r2, =_sbss
 800466e:	4a0b      	ldr	r2, [pc, #44]	; (800469c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004670:	e002      	b.n	8004678 <LoopFillZerobss>

08004672 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004672:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004674:	f842 3b04 	str.w	r3, [r2], #4

08004678 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800467a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800467c:	d3f9      	bcc.n	8004672 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800467e:	f7ff ff79 	bl	8004574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004682:	f007 ff83 	bl	800c58c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004686:	f7fc fae9 	bl	8000c5c <main>
  bx  lr    
 800468a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800468c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004690:	080114a0 	.word	0x080114a0
  ldr  r0, =_sdata
 8004694:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004698:	2000011c 	.word	0x2000011c
  ldr  r2, =_sbss
 800469c:	20000120 	.word	0x20000120
  ldr  r3, = _ebss
 80046a0:	200062a4 	.word	0x200062a4

080046a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046a4:	e7fe      	b.n	80046a4 <ADC_IRQHandler>
	...

080046a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <HAL_Init+0x40>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a0d      	ldr	r2, [pc, #52]	; (80046e8 <HAL_Init+0x40>)
 80046b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_Init+0x40>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <HAL_Init+0x40>)
 80046be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <HAL_Init+0x40>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <HAL_Init+0x40>)
 80046ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046d0:	2003      	movs	r0, #3
 80046d2:	f000 f8fc 	bl	80048ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046d6:	200f      	movs	r0, #15
 80046d8:	f7ff fe02 	bl	80042e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046dc:	f7ff fc04 	bl	8003ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023c00 	.word	0x40023c00

080046ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_IncTick+0x20>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_IncTick+0x24>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4413      	add	r3, r2
 80046fc:	4a04      	ldr	r2, [pc, #16]	; (8004710 <HAL_IncTick+0x24>)
 80046fe:	6013      	str	r3, [r2, #0]
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	200000a0 	.word	0x200000a0
 8004710:	20001c80 	.word	0x20001c80

08004714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return uwTick;
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <HAL_GetTick+0x14>)
 800471a:	681b      	ldr	r3, [r3, #0]
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20001c80 	.word	0x20001c80

0800472c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004734:	f7ff ffee 	bl	8004714 <HAL_GetTick>
 8004738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004744:	d005      	beq.n	8004752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004746:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <HAL_Delay+0x44>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004752:	bf00      	nop
 8004754:	f7ff ffde 	bl	8004714 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	429a      	cmp	r2, r3
 8004762:	d8f7      	bhi.n	8004754 <HAL_Delay+0x28>
  {
  }
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	200000a0 	.word	0x200000a0

08004774 <__NVIC_SetPriorityGrouping>:
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004790:	4013      	ands	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800479c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047a6:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <__NVIC_SetPriorityGrouping+0x44>)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	60d3      	str	r3, [r2, #12]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <__NVIC_GetPriorityGrouping>:
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <__NVIC_GetPriorityGrouping+0x18>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f003 0307 	and.w	r3, r3, #7
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <__NVIC_EnableIRQ>:
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db0b      	blt.n	8004802 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	f003 021f 	and.w	r2, r3, #31
 80047f0:	4907      	ldr	r1, [pc, #28]	; (8004810 <__NVIC_EnableIRQ+0x38>)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2001      	movs	r0, #1
 80047fa:	fa00 f202 	lsl.w	r2, r0, r2
 80047fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000e100 	.word	0xe000e100

08004814 <__NVIC_SetPriority>:
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004824:	2b00      	cmp	r3, #0
 8004826:	db0a      	blt.n	800483e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	b2da      	uxtb	r2, r3
 800482c:	490c      	ldr	r1, [pc, #48]	; (8004860 <__NVIC_SetPriority+0x4c>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	0112      	lsls	r2, r2, #4
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	440b      	add	r3, r1
 8004838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800483c:	e00a      	b.n	8004854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4908      	ldr	r1, [pc, #32]	; (8004864 <__NVIC_SetPriority+0x50>)
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	3b04      	subs	r3, #4
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	440b      	add	r3, r1
 8004852:	761a      	strb	r2, [r3, #24]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000e100 	.word	0xe000e100
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <NVIC_EncodePriority>:
{
 8004868:	b480      	push	{r7}
 800486a:	b089      	sub	sp, #36	; 0x24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f1c3 0307 	rsb	r3, r3, #7
 8004882:	2b04      	cmp	r3, #4
 8004884:	bf28      	it	cs
 8004886:	2304      	movcs	r3, #4
 8004888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3304      	adds	r3, #4
 800488e:	2b06      	cmp	r3, #6
 8004890:	d902      	bls.n	8004898 <NVIC_EncodePriority+0x30>
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3b03      	subs	r3, #3
 8004896:	e000      	b.n	800489a <NVIC_EncodePriority+0x32>
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800489c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	401a      	ands	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	43d9      	mvns	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c0:	4313      	orrs	r3, r2
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3724      	adds	r7, #36	; 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff ff4c 	bl	8004774 <__NVIC_SetPriorityGrouping>
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048f6:	f7ff ff61 	bl	80047bc <__NVIC_GetPriorityGrouping>
 80048fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	6978      	ldr	r0, [r7, #20]
 8004902:	f7ff ffb1 	bl	8004868 <NVIC_EncodePriority>
 8004906:	4602      	mov	r2, r0
 8004908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff ff80 	bl	8004814 <__NVIC_SetPriority>
}
 8004914:	bf00      	nop
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff ff54 	bl	80047d8 <__NVIC_EnableIRQ>
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004944:	f7ff fee6 	bl	8004714 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e099      	b.n	8004a88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004974:	e00f      	b.n	8004996 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004976:	f7ff fecd 	bl	8004714 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b05      	cmp	r3, #5
 8004982:	d908      	bls.n	8004996 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2203      	movs	r2, #3
 800498e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e078      	b.n	8004a88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e8      	bne.n	8004976 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4b38      	ldr	r3, [pc, #224]	; (8004a90 <HAL_DMA_Init+0x158>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d107      	bne.n	8004a00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	4313      	orrs	r3, r2
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f023 0307 	bic.w	r3, r3, #7
 8004a16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d117      	bne.n	8004a5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00e      	beq.n	8004a5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fb01 	bl	8005044 <DMA_CheckFifoParam>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2240      	movs	r2, #64	; 0x40
 8004a4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a56:	2301      	movs	r3, #1
 8004a58:	e016      	b.n	8004a88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fab8 	bl	8004fd8 <DMA_CalcBaseAndBitshift>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a70:	223f      	movs	r2, #63	; 0x3f
 8004a72:	409a      	lsls	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	f010803f 	.word	0xf010803f

08004a94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_DMA_Start_IT+0x26>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e040      	b.n	8004b3c <HAL_DMA_Start_IT+0xa8>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d12f      	bne.n	8004b2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fa4a 	bl	8004f7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aec:	223f      	movs	r2, #63	; 0x3f
 8004aee:	409a      	lsls	r2, r3
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0216 	orr.w	r2, r2, #22
 8004b02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0208 	orr.w	r2, r2, #8
 8004b1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	e005      	b.n	8004b3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b36:	2302      	movs	r3, #2
 8004b38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b52:	f7ff fddf 	bl	8004714 <HAL_GetTick>
 8004b56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d008      	beq.n	8004b76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2280      	movs	r2, #128	; 0x80
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e052      	b.n	8004c1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0216 	bic.w	r2, r2, #22
 8004b84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695a      	ldr	r2, [r3, #20]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d103      	bne.n	8004ba6 <HAL_DMA_Abort+0x62>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d007      	beq.n	8004bb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0208 	bic.w	r2, r2, #8
 8004bb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0201 	bic.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bc6:	e013      	b.n	8004bf0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bc8:	f7ff fda4 	bl	8004714 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	d90c      	bls.n	8004bf0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2203      	movs	r2, #3
 8004be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e015      	b.n	8004c1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e4      	bne.n	8004bc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c02:	223f      	movs	r2, #63	; 0x3f
 8004c04:	409a      	lsls	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d004      	beq.n	8004c42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e00c      	b.n	8004c5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2205      	movs	r2, #5
 8004c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0201 	bic.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c74:	4b8e      	ldr	r3, [pc, #568]	; (8004eb0 <HAL_DMA_IRQHandler+0x248>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a8e      	ldr	r2, [pc, #568]	; (8004eb4 <HAL_DMA_IRQHandler+0x24c>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	0a9b      	lsrs	r3, r3, #10
 8004c80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c92:	2208      	movs	r2, #8
 8004c94:	409a      	lsls	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01a      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d013      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0204 	bic.w	r2, r2, #4
 8004cba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ccc:	f043 0201 	orr.w	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd8:	2201      	movs	r2, #1
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d012      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	409a      	lsls	r2, r3
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	f043 0202 	orr.w	r2, r3, #2
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0e:	2204      	movs	r2, #4
 8004d10:	409a      	lsls	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d012      	beq.n	8004d40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00b      	beq.n	8004d40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	f043 0204 	orr.w	r2, r3, #4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d44:	2210      	movs	r2, #16
 8004d46:	409a      	lsls	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d043      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d03c      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d62:	2210      	movs	r2, #16
 8004d64:	409a      	lsls	r2, r3
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d018      	beq.n	8004daa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d108      	bne.n	8004d98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d024      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
 8004d96:	e01f      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01b      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
 8004da8:	e016      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d107      	bne.n	8004dc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0208 	bic.w	r2, r2, #8
 8004dc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ddc:	2220      	movs	r2, #32
 8004dde:	409a      	lsls	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 808f 	beq.w	8004f08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8087 	beq.w	8004f08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfe:	2220      	movs	r2, #32
 8004e00:	409a      	lsls	r2, r3
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b05      	cmp	r3, #5
 8004e10:	d136      	bne.n	8004e80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0216 	bic.w	r2, r2, #22
 8004e20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695a      	ldr	r2, [r3, #20]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <HAL_DMA_IRQHandler+0x1da>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0208 	bic.w	r2, r2, #8
 8004e50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e56:	223f      	movs	r2, #63	; 0x3f
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d07e      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	4798      	blx	r3
        }
        return;
 8004e7e:	e079      	b.n	8004f74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01d      	beq.n	8004eca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10d      	bne.n	8004eb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d031      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	4798      	blx	r3
 8004eac:	e02c      	b.n	8004f08 <HAL_DMA_IRQHandler+0x2a0>
 8004eae:	bf00      	nop
 8004eb0:	20000098 	.word	0x20000098
 8004eb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d023      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	4798      	blx	r3
 8004ec8:	e01e      	b.n	8004f08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10f      	bne.n	8004ef8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0210 	bic.w	r2, r2, #16
 8004ee6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d032      	beq.n	8004f76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d022      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2205      	movs	r2, #5
 8004f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	3301      	adds	r3, #1
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d307      	bcc.n	8004f50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f2      	bne.n	8004f34 <HAL_DMA_IRQHandler+0x2cc>
 8004f4e:	e000      	b.n	8004f52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	4798      	blx	r3
 8004f72:	e000      	b.n	8004f76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f74:	bf00      	nop
    }
  }
}
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b40      	cmp	r3, #64	; 0x40
 8004fa8:	d108      	bne.n	8004fbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fba:	e007      	b.n	8004fcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	60da      	str	r2, [r3, #12]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	3b10      	subs	r3, #16
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <DMA_CalcBaseAndBitshift+0x64>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ff2:	4a13      	ldr	r2, [pc, #76]	; (8005040 <DMA_CalcBaseAndBitshift+0x68>)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b03      	cmp	r3, #3
 8005004:	d909      	bls.n	800501a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	1d1a      	adds	r2, r3, #4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	659a      	str	r2, [r3, #88]	; 0x58
 8005018:	e007      	b.n	800502a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	aaaaaaab 	.word	0xaaaaaaab
 8005040:	080112f0 	.word	0x080112f0

08005044 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d11f      	bne.n	800509e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d856      	bhi.n	8005112 <DMA_CheckFifoParam+0xce>
 8005064:	a201      	add	r2, pc, #4	; (adr r2, 800506c <DMA_CheckFifoParam+0x28>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	0800507d 	.word	0x0800507d
 8005070:	0800508f 	.word	0x0800508f
 8005074:	0800507d 	.word	0x0800507d
 8005078:	08005113 	.word	0x08005113
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d046      	beq.n	8005116 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800508c:	e043      	b.n	8005116 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005096:	d140      	bne.n	800511a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800509c:	e03d      	b.n	800511a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a6:	d121      	bne.n	80050ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d837      	bhi.n	800511e <DMA_CheckFifoParam+0xda>
 80050ae:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <DMA_CheckFifoParam+0x70>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050cb 	.word	0x080050cb
 80050bc:	080050c5 	.word	0x080050c5
 80050c0:	080050dd 	.word	0x080050dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
      break;
 80050c8:	e030      	b.n	800512c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d025      	beq.n	8005122 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050da:	e022      	b.n	8005122 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050e4:	d11f      	bne.n	8005126 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050ea:	e01c      	b.n	8005126 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d903      	bls.n	80050fa <DMA_CheckFifoParam+0xb6>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d003      	beq.n	8005100 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050f8:	e018      	b.n	800512c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
      break;
 80050fe:	e015      	b.n	800512c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00e      	beq.n	800512a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
      break;
 8005110:	e00b      	b.n	800512a <DMA_CheckFifoParam+0xe6>
      break;
 8005112:	bf00      	nop
 8005114:	e00a      	b.n	800512c <DMA_CheckFifoParam+0xe8>
      break;
 8005116:	bf00      	nop
 8005118:	e008      	b.n	800512c <DMA_CheckFifoParam+0xe8>
      break;
 800511a:	bf00      	nop
 800511c:	e006      	b.n	800512c <DMA_CheckFifoParam+0xe8>
      break;
 800511e:	bf00      	nop
 8005120:	e004      	b.n	800512c <DMA_CheckFifoParam+0xe8>
      break;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <DMA_CheckFifoParam+0xe8>
      break;   
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <DMA_CheckFifoParam+0xe8>
      break;
 800512a:	bf00      	nop
    }
  } 
  
  return status; 
 800512c:	7bfb      	ldrb	r3, [r7, #15]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop

0800513c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800513c:	b480      	push	{r7}
 800513e:	b089      	sub	sp, #36	; 0x24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	e16b      	b.n	8005430 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005158:	2201      	movs	r2, #1
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4013      	ands	r3, r2
 800516a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	429a      	cmp	r2, r3
 8005172:	f040 815a 	bne.w	800542a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b01      	cmp	r3, #1
 8005180:	d005      	beq.n	800518e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800518a:	2b02      	cmp	r3, #2
 800518c:	d130      	bne.n	80051f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	2203      	movs	r2, #3
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051c4:	2201      	movs	r2, #1
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4013      	ands	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 0201 	and.w	r2, r3, #1
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d017      	beq.n	800522c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	2203      	movs	r2, #3
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	43db      	mvns	r3, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	4013      	ands	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4313      	orrs	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d123      	bne.n	8005280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	08da      	lsrs	r2, r3, #3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3208      	adds	r2, #8
 8005240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	220f      	movs	r2, #15
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	43db      	mvns	r3, r3
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	4013      	ands	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	08da      	lsrs	r2, r3, #3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3208      	adds	r2, #8
 800527a:	69b9      	ldr	r1, [r7, #24]
 800527c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	2203      	movs	r2, #3
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 0203 	and.w	r2, r3, #3
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80b4 	beq.w	800542a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	4b60      	ldr	r3, [pc, #384]	; (8005448 <HAL_GPIO_Init+0x30c>)
 80052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ca:	4a5f      	ldr	r2, [pc, #380]	; (8005448 <HAL_GPIO_Init+0x30c>)
 80052cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052d0:	6453      	str	r3, [r2, #68]	; 0x44
 80052d2:	4b5d      	ldr	r3, [pc, #372]	; (8005448 <HAL_GPIO_Init+0x30c>)
 80052d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052de:	4a5b      	ldr	r2, [pc, #364]	; (800544c <HAL_GPIO_Init+0x310>)
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	089b      	lsrs	r3, r3, #2
 80052e4:	3302      	adds	r3, #2
 80052e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	220f      	movs	r2, #15
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	43db      	mvns	r3, r3
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	4013      	ands	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a52      	ldr	r2, [pc, #328]	; (8005450 <HAL_GPIO_Init+0x314>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d02b      	beq.n	8005362 <HAL_GPIO_Init+0x226>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a51      	ldr	r2, [pc, #324]	; (8005454 <HAL_GPIO_Init+0x318>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d025      	beq.n	800535e <HAL_GPIO_Init+0x222>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a50      	ldr	r2, [pc, #320]	; (8005458 <HAL_GPIO_Init+0x31c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01f      	beq.n	800535a <HAL_GPIO_Init+0x21e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a4f      	ldr	r2, [pc, #316]	; (800545c <HAL_GPIO_Init+0x320>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d019      	beq.n	8005356 <HAL_GPIO_Init+0x21a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a4e      	ldr	r2, [pc, #312]	; (8005460 <HAL_GPIO_Init+0x324>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d013      	beq.n	8005352 <HAL_GPIO_Init+0x216>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a4d      	ldr	r2, [pc, #308]	; (8005464 <HAL_GPIO_Init+0x328>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00d      	beq.n	800534e <HAL_GPIO_Init+0x212>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a4c      	ldr	r2, [pc, #304]	; (8005468 <HAL_GPIO_Init+0x32c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d007      	beq.n	800534a <HAL_GPIO_Init+0x20e>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a4b      	ldr	r2, [pc, #300]	; (800546c <HAL_GPIO_Init+0x330>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d101      	bne.n	8005346 <HAL_GPIO_Init+0x20a>
 8005342:	2307      	movs	r3, #7
 8005344:	e00e      	b.n	8005364 <HAL_GPIO_Init+0x228>
 8005346:	2308      	movs	r3, #8
 8005348:	e00c      	b.n	8005364 <HAL_GPIO_Init+0x228>
 800534a:	2306      	movs	r3, #6
 800534c:	e00a      	b.n	8005364 <HAL_GPIO_Init+0x228>
 800534e:	2305      	movs	r3, #5
 8005350:	e008      	b.n	8005364 <HAL_GPIO_Init+0x228>
 8005352:	2304      	movs	r3, #4
 8005354:	e006      	b.n	8005364 <HAL_GPIO_Init+0x228>
 8005356:	2303      	movs	r3, #3
 8005358:	e004      	b.n	8005364 <HAL_GPIO_Init+0x228>
 800535a:	2302      	movs	r3, #2
 800535c:	e002      	b.n	8005364 <HAL_GPIO_Init+0x228>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_GPIO_Init+0x228>
 8005362:	2300      	movs	r3, #0
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	f002 0203 	and.w	r2, r2, #3
 800536a:	0092      	lsls	r2, r2, #2
 800536c:	4093      	lsls	r3, r2
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4313      	orrs	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005374:	4935      	ldr	r1, [pc, #212]	; (800544c <HAL_GPIO_Init+0x310>)
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	089b      	lsrs	r3, r3, #2
 800537a:	3302      	adds	r3, #2
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005382:	4b3b      	ldr	r3, [pc, #236]	; (8005470 <HAL_GPIO_Init+0x334>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	43db      	mvns	r3, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	4013      	ands	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053a6:	4a32      	ldr	r2, [pc, #200]	; (8005470 <HAL_GPIO_Init+0x334>)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053ac:	4b30      	ldr	r3, [pc, #192]	; (8005470 <HAL_GPIO_Init+0x334>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4013      	ands	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053d0:	4a27      	ldr	r2, [pc, #156]	; (8005470 <HAL_GPIO_Init+0x334>)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053d6:	4b26      	ldr	r3, [pc, #152]	; (8005470 <HAL_GPIO_Init+0x334>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	43db      	mvns	r3, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053fa:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <HAL_GPIO_Init+0x334>)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005400:	4b1b      	ldr	r3, [pc, #108]	; (8005470 <HAL_GPIO_Init+0x334>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	43db      	mvns	r3, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4013      	ands	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005424:	4a12      	ldr	r2, [pc, #72]	; (8005470 <HAL_GPIO_Init+0x334>)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3301      	adds	r3, #1
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2b0f      	cmp	r3, #15
 8005434:	f67f ae90 	bls.w	8005158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3724      	adds	r7, #36	; 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800
 800544c:	40013800 	.word	0x40013800
 8005450:	40020000 	.word	0x40020000
 8005454:	40020400 	.word	0x40020400
 8005458:	40020800 	.word	0x40020800
 800545c:	40020c00 	.word	0x40020c00
 8005460:	40021000 	.word	0x40021000
 8005464:	40021400 	.word	0x40021400
 8005468:	40021800 	.word	0x40021800
 800546c:	40021c00 	.word	0x40021c00
 8005470:	40013c00 	.word	0x40013c00

08005474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	807b      	strh	r3, [r7, #2]
 8005480:	4613      	mov	r3, r2
 8005482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005484:	787b      	ldrb	r3, [r7, #1]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800548a:	887a      	ldrh	r2, [r7, #2]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005490:	e003      	b.n	800549a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005492:	887b      	ldrh	r3, [r7, #2]
 8005494:	041a      	lsls	r2, r3, #16
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	619a      	str	r2, [r3, #24]
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054b8:	887a      	ldrh	r2, [r7, #2]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4013      	ands	r3, r2
 80054be:	041a      	lsls	r2, r3, #16
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	43d9      	mvns	r1, r3
 80054c4:	887b      	ldrh	r3, [r7, #2]
 80054c6:	400b      	ands	r3, r1
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	619a      	str	r2, [r3, #24]
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e03e      	b.n	800556e <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d106      	bne.n	800550a <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7fe fee1 	bl	80042cc <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3304      	adds	r3, #4
 8005512:	4619      	mov	r1, r3
 8005514:	4610      	mov	r0, r2
 8005516:	f003 fc79 	bl	8008e0c <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	461a      	mov	r2, r3
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	f003 fcbd 	bl	8008ea4 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	461a      	mov	r2, r3
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	f003 fcea 	bl	8008f0e <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b10      	cmp	r3, #16
 8005540:	d108      	bne.n	8005554 <HAL_NAND_Init+0x7a>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0204 	orr.w	r2, r2, #4
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e007      	b.n	8005564 <HAL_NAND_Init+0x8a>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0204 	orr.w	r2, r2, #4
 8005562:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b10      	cmp	r3, #16
 8005584:	d10a      	bne.n	800559c <HAL_NAND_IRQHandler+0x26>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b01      	cmp	r3, #1
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	e009      	b.n	80055b0 <HAL_NAND_IRQHandler+0x3a>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	bf0c      	ite	eq
 80055aa:	2301      	moveq	r3, #1
 80055ac:	2300      	movne	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d017      	beq.n	80055e4 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fd f949 	bl	800284c <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d108      	bne.n	80055d4 <HAL_NAND_IRQHandler+0x5e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	605a      	str	r2, [r3, #4]
 80055d2:	e007      	b.n	80055e4 <HAL_NAND_IRQHandler+0x6e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d10a      	bne.n	8005602 <HAL_NAND_IRQHandler+0x8c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	bf0c      	ite	eq
 80055fa:	2301      	moveq	r3, #1
 80055fc:	2300      	movne	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	e009      	b.n	8005616 <HAL_NAND_IRQHandler+0xa0>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b02      	cmp	r3, #2
 800560e:	bf0c      	ite	eq
 8005610:	2301      	moveq	r3, #1
 8005612:	2300      	movne	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d017      	beq.n	800564a <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fd f916 	bl	800284c <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b10      	cmp	r3, #16
 8005626:	d108      	bne.n	800563a <HAL_NAND_IRQHandler+0xc4>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0202 	bic.w	r2, r2, #2
 8005636:	605a      	str	r2, [r3, #4]
 8005638:	e007      	b.n	800564a <HAL_NAND_IRQHandler+0xd4>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0202 	bic.w	r2, r2, #2
 8005648:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b10      	cmp	r3, #16
 8005650:	d10a      	bne.n	8005668 <HAL_NAND_IRQHandler+0xf2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b04      	cmp	r3, #4
 800565e:	bf0c      	ite	eq
 8005660:	2301      	moveq	r3, #1
 8005662:	2300      	movne	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	e009      	b.n	800567c <HAL_NAND_IRQHandler+0x106>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b04      	cmp	r3, #4
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d017      	beq.n	80056b0 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7fd f8e3 	bl	800284c <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b10      	cmp	r3, #16
 800568c:	d108      	bne.n	80056a0 <HAL_NAND_IRQHandler+0x12a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0204 	bic.w	r2, r2, #4
 800569c:	605a      	str	r2, [r3, #4]
 800569e:	e007      	b.n	80056b0 <HAL_NAND_IRQHandler+0x13a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0204 	bic.w	r2, r2, #4
 80056ae:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d10a      	bne.n	80056ce <HAL_NAND_IRQHandler+0x158>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b40      	cmp	r3, #64	; 0x40
 80056c4:	bf0c      	ite	eq
 80056c6:	2301      	moveq	r3, #1
 80056c8:	2300      	movne	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	e009      	b.n	80056e2 <HAL_NAND_IRQHandler+0x16c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	bf0c      	ite	eq
 80056dc:	2301      	moveq	r3, #1
 80056de:	2300      	movne	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d017      	beq.n	8005716 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fd f8b0 	bl	800284c <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d108      	bne.n	8005706 <HAL_NAND_IRQHandler+0x190>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005702:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8005704:	e007      	b.n	8005716 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005714:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_NAND_Reset>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d101      	bne.n	8005736 <HAL_NAND_Reset+0x18>
  {
    return HAL_BUSY;
 8005732:	2302      	movs	r3, #2
 8005734:	e027      	b.n	8005786 <HAL_NAND_Reset+0x68>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b01      	cmp	r3, #1
 8005740:	d120      	bne.n	8005784 <HAL_NAND_Reset+0x66>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_NAND_Reset+0x32>
 800574c:	2302      	movs	r3, #2
 800574e:	e01a      	b.n	8005786 <HAL_NAND_Reset+0x68>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    else
    {
      deviceaddress = NAND_DEVICE2;
    }
#else
    deviceaddress = NAND_DEVICE;
 8005760:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005764:	60fb      	str	r3, [r7, #12]
#endif

    /* Send NAND reset command */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = 0xFF;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576c:	22ff      	movs	r2, #255	; 0xff
 800576e:	701a      	strb	r2, [r3, #0]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_NAND_Reset+0x68>
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1

}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_NAND_ECC_Disable>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_ECC_Disable(NAND_HandleTypeDef *hnand)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d101      	bne.n	80057aa <HAL_NAND_ECC_Disable+0x18>
  {
    return HAL_BUSY;
 80057a6:	2302      	movs	r3, #2
 80057a8:	e018      	b.n	80057dc <HAL_NAND_ECC_Disable+0x4a>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d111      	bne.n	80057da <HAL_NAND_ECC_Disable+0x48>
  {
    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable ECC feature */
    (void)FMC_NAND_ECC_Disable(hnand->Instance, hnand->Init.NandBank);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f003 fbd5 	bl	8008f78 <FSMC_NAND_ECC_Disable>

    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e000      	b.n	80057dc <HAL_NAND_ECC_Disable+0x4a>
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  return hnand->State;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057f2:	b2db      	uxtb	r3, r3
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 8005808:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800580c:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005814:	2270      	movs	r2, #112	; 0x70
 8005816:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e007      	b.n	800583e <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8005838:	2340      	movs	r3, #64	; 0x40
 800583a:	e000      	b.n	800583e <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 800583c:	2300      	movs	r3, #0
  }
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e267      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d075      	beq.n	8005956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800586a:	4b88      	ldr	r3, [pc, #544]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	2b04      	cmp	r3, #4
 8005874:	d00c      	beq.n	8005890 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005876:	4b85      	ldr	r3, [pc, #532]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800587e:	2b08      	cmp	r3, #8
 8005880:	d112      	bne.n	80058a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005882:	4b82      	ldr	r3, [pc, #520]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800588e:	d10b      	bne.n	80058a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005890:	4b7e      	ldr	r3, [pc, #504]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d05b      	beq.n	8005954 <HAL_RCC_OscConfig+0x108>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d157      	bne.n	8005954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e242      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b0:	d106      	bne.n	80058c0 <HAL_RCC_OscConfig+0x74>
 80058b2:	4b76      	ldr	r3, [pc, #472]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a75      	ldr	r2, [pc, #468]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	e01d      	b.n	80058fc <HAL_RCC_OscConfig+0xb0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058c8:	d10c      	bne.n	80058e4 <HAL_RCC_OscConfig+0x98>
 80058ca:	4b70      	ldr	r3, [pc, #448]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a6f      	ldr	r2, [pc, #444]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	4b6d      	ldr	r3, [pc, #436]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6c      	ldr	r2, [pc, #432]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	e00b      	b.n	80058fc <HAL_RCC_OscConfig+0xb0>
 80058e4:	4b69      	ldr	r3, [pc, #420]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a68      	ldr	r2, [pc, #416]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	4b66      	ldr	r3, [pc, #408]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a65      	ldr	r2, [pc, #404]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80058f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d013      	beq.n	800592c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005904:	f7fe ff06 	bl	8004714 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800590c:	f7fe ff02 	bl	8004714 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b64      	cmp	r3, #100	; 0x64
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e207      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591e:	4b5b      	ldr	r3, [pc, #364]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f0      	beq.n	800590c <HAL_RCC_OscConfig+0xc0>
 800592a:	e014      	b.n	8005956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592c:	f7fe fef2 	bl	8004714 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005934:	f7fe feee 	bl	8004714 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b64      	cmp	r3, #100	; 0x64
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e1f3      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005946:	4b51      	ldr	r3, [pc, #324]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f0      	bne.n	8005934 <HAL_RCC_OscConfig+0xe8>
 8005952:	e000      	b.n	8005956 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d063      	beq.n	8005a2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005962:	4b4a      	ldr	r3, [pc, #296]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00b      	beq.n	8005986 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800596e:	4b47      	ldr	r3, [pc, #284]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005976:	2b08      	cmp	r3, #8
 8005978:	d11c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800597a:	4b44      	ldr	r3, [pc, #272]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d116      	bne.n	80059b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005986:	4b41      	ldr	r3, [pc, #260]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_RCC_OscConfig+0x152>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d001      	beq.n	800599e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e1c7      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599e:	4b3b      	ldr	r3, [pc, #236]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	4937      	ldr	r1, [pc, #220]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059b2:	e03a      	b.n	8005a2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d020      	beq.n	80059fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059bc:	4b34      	ldr	r3, [pc, #208]	; (8005a90 <HAL_RCC_OscConfig+0x244>)
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c2:	f7fe fea7 	bl	8004714 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ca:	f7fe fea3 	bl	8004714 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e1a8      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059dc:	4b2b      	ldr	r3, [pc, #172]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e8:	4b28      	ldr	r3, [pc, #160]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4925      	ldr	r1, [pc, #148]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]
 80059fc:	e015      	b.n	8005a2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059fe:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <HAL_RCC_OscConfig+0x244>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a04:	f7fe fe86 	bl	8004714 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a0c:	f7fe fe82 	bl	8004714 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e187      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1e:	4b1b      	ldr	r3, [pc, #108]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f0      	bne.n	8005a0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d036      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d016      	beq.n	8005a6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a3e:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <HAL_RCC_OscConfig+0x248>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a44:	f7fe fe66 	bl	8004714 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a4c:	f7fe fe62 	bl	8004714 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e167      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <HAL_RCC_OscConfig+0x240>)
 8005a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f0      	beq.n	8005a4c <HAL_RCC_OscConfig+0x200>
 8005a6a:	e01b      	b.n	8005aa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a6c:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <HAL_RCC_OscConfig+0x248>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a72:	f7fe fe4f 	bl	8004714 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a78:	e00e      	b.n	8005a98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a7a:	f7fe fe4b 	bl	8004714 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d907      	bls.n	8005a98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e150      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	42470000 	.word	0x42470000
 8005a94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a98:	4b88      	ldr	r3, [pc, #544]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1ea      	bne.n	8005a7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8097 	beq.w	8005be0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab6:	4b81      	ldr	r3, [pc, #516]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10f      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	4b7d      	ldr	r3, [pc, #500]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	4a7c      	ldr	r2, [pc, #496]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad2:	4b7a      	ldr	r3, [pc, #488]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ada:	60bb      	str	r3, [r7, #8]
 8005adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae2:	4b77      	ldr	r3, [pc, #476]	; (8005cc0 <HAL_RCC_OscConfig+0x474>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d118      	bne.n	8005b20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aee:	4b74      	ldr	r3, [pc, #464]	; (8005cc0 <HAL_RCC_OscConfig+0x474>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a73      	ldr	r2, [pc, #460]	; (8005cc0 <HAL_RCC_OscConfig+0x474>)
 8005af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005afa:	f7fe fe0b 	bl	8004714 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b02:	f7fe fe07 	bl	8004714 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e10c      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b14:	4b6a      	ldr	r3, [pc, #424]	; (8005cc0 <HAL_RCC_OscConfig+0x474>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d106      	bne.n	8005b36 <HAL_RCC_OscConfig+0x2ea>
 8005b28:	4b64      	ldr	r3, [pc, #400]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2c:	4a63      	ldr	r2, [pc, #396]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	6713      	str	r3, [r2, #112]	; 0x70
 8005b34:	e01c      	b.n	8005b70 <HAL_RCC_OscConfig+0x324>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b05      	cmp	r3, #5
 8005b3c:	d10c      	bne.n	8005b58 <HAL_RCC_OscConfig+0x30c>
 8005b3e:	4b5f      	ldr	r3, [pc, #380]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	4a5e      	ldr	r2, [pc, #376]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b44:	f043 0304 	orr.w	r3, r3, #4
 8005b48:	6713      	str	r3, [r2, #112]	; 0x70
 8005b4a:	4b5c      	ldr	r3, [pc, #368]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	4a5b      	ldr	r2, [pc, #364]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b50:	f043 0301 	orr.w	r3, r3, #1
 8005b54:	6713      	str	r3, [r2, #112]	; 0x70
 8005b56:	e00b      	b.n	8005b70 <HAL_RCC_OscConfig+0x324>
 8005b58:	4b58      	ldr	r3, [pc, #352]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	4a57      	ldr	r2, [pc, #348]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b5e:	f023 0301 	bic.w	r3, r3, #1
 8005b62:	6713      	str	r3, [r2, #112]	; 0x70
 8005b64:	4b55      	ldr	r3, [pc, #340]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b68:	4a54      	ldr	r2, [pc, #336]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b6a:	f023 0304 	bic.w	r3, r3, #4
 8005b6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d015      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b78:	f7fe fdcc 	bl	8004714 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b80:	f7fe fdc8 	bl	8004714 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e0cb      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b96:	4b49      	ldr	r3, [pc, #292]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0ee      	beq.n	8005b80 <HAL_RCC_OscConfig+0x334>
 8005ba2:	e014      	b.n	8005bce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ba4:	f7fe fdb6 	bl	8004714 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005baa:	e00a      	b.n	8005bc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bac:	f7fe fdb2 	bl	8004714 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e0b5      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bc2:	4b3e      	ldr	r3, [pc, #248]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1ee      	bne.n	8005bac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d105      	bne.n	8005be0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd4:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	4a38      	ldr	r2, [pc, #224]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80a1 	beq.w	8005d2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bea:	4b34      	ldr	r3, [pc, #208]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 030c 	and.w	r3, r3, #12
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d05c      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d141      	bne.n	8005c82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfe:	4b31      	ldr	r3, [pc, #196]	; (8005cc4 <HAL_RCC_OscConfig+0x478>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c04:	f7fe fd86 	bl	8004714 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c0c:	f7fe fd82 	bl	8004714 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e087      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1e:	4b27      	ldr	r3, [pc, #156]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69da      	ldr	r2, [r3, #28]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	019b      	lsls	r3, r3, #6
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	3b01      	subs	r3, #1
 8005c44:	041b      	lsls	r3, r3, #16
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	061b      	lsls	r3, r3, #24
 8005c4e:	491b      	ldr	r1, [pc, #108]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c54:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <HAL_RCC_OscConfig+0x478>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c5a:	f7fe fd5b 	bl	8004714 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c62:	f7fe fd57 	bl	8004714 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e05c      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c74:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0f0      	beq.n	8005c62 <HAL_RCC_OscConfig+0x416>
 8005c80:	e054      	b.n	8005d2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c82:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <HAL_RCC_OscConfig+0x478>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c88:	f7fe fd44 	bl	8004714 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c90:	f7fe fd40 	bl	8004714 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e045      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca2:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <HAL_RCC_OscConfig+0x470>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1f0      	bne.n	8005c90 <HAL_RCC_OscConfig+0x444>
 8005cae:	e03d      	b.n	8005d2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d107      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e038      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	40007000 	.word	0x40007000
 8005cc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cc8:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <HAL_RCC_OscConfig+0x4ec>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d028      	beq.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d121      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d11a      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d111      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	3b01      	subs	r3, #1
 8005d12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d107      	bne.n	8005d28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40023800 	.word	0x40023800

08005d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0cc      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d50:	4b68      	ldr	r3, [pc, #416]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d90c      	bls.n	8005d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5e:	4b65      	ldr	r3, [pc, #404]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d66:	4b63      	ldr	r3, [pc, #396]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d001      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0b8      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d020      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d90:	4b59      	ldr	r3, [pc, #356]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4a58      	ldr	r2, [pc, #352]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005da8:	4b53      	ldr	r3, [pc, #332]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	4a52      	ldr	r2, [pc, #328]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db4:	4b50      	ldr	r3, [pc, #320]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	494d      	ldr	r1, [pc, #308]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d044      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d107      	bne.n	8005dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dda:	4b47      	ldr	r3, [pc, #284]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d119      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e07f      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d003      	beq.n	8005dfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d107      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dfa:	4b3f      	ldr	r3, [pc, #252]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e06f      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0a:	4b3b      	ldr	r3, [pc, #236]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e067      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e1a:	4b37      	ldr	r3, [pc, #220]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f023 0203 	bic.w	r2, r3, #3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	4934      	ldr	r1, [pc, #208]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e2c:	f7fe fc72 	bl	8004714 <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e32:	e00a      	b.n	8005e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e34:	f7fe fc6e 	bl	8004714 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e04f      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e4a:	4b2b      	ldr	r3, [pc, #172]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 020c 	and.w	r2, r3, #12
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d1eb      	bne.n	8005e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e5c:	4b25      	ldr	r3, [pc, #148]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d20c      	bcs.n	8005e84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6a:	4b22      	ldr	r3, [pc, #136]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b20      	ldr	r3, [pc, #128]	; (8005ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e032      	b.n	8005eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e90:	4b19      	ldr	r3, [pc, #100]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4916      	ldr	r1, [pc, #88]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eae:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	490e      	ldr	r1, [pc, #56]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ec2:	f000 f821 	bl	8005f08 <HAL_RCC_GetSysClockFreq>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	490a      	ldr	r1, [pc, #40]	; (8005efc <HAL_RCC_ClockConfig+0x1c0>)
 8005ed4:	5ccb      	ldrb	r3, [r1, r3]
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	4a09      	ldr	r2, [pc, #36]	; (8005f00 <HAL_RCC_ClockConfig+0x1c4>)
 8005edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ede:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe f9fc 	bl	80042e0 <HAL_InitTick>

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40023c00 	.word	0x40023c00
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	080112d8 	.word	0x080112d8
 8005f00:	20000098 	.word	0x20000098
 8005f04:	2000009c 	.word	0x2000009c

08005f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f0c:	b094      	sub	sp, #80	; 0x50
 8005f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	647b      	str	r3, [r7, #68]	; 0x44
 8005f14:	2300      	movs	r3, #0
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f18:	2300      	movs	r3, #0
 8005f1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f20:	4b79      	ldr	r3, [pc, #484]	; (8006108 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 030c 	and.w	r3, r3, #12
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d00d      	beq.n	8005f48 <HAL_RCC_GetSysClockFreq+0x40>
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	f200 80e1 	bhi.w	80060f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_RCC_GetSysClockFreq+0x34>
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d003      	beq.n	8005f42 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f3a:	e0db      	b.n	80060f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f3c:	4b73      	ldr	r3, [pc, #460]	; (800610c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f40:	e0db      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f42:	4b73      	ldr	r3, [pc, #460]	; (8006110 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f46:	e0d8      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f48:	4b6f      	ldr	r3, [pc, #444]	; (8006108 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f52:	4b6d      	ldr	r3, [pc, #436]	; (8006108 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d063      	beq.n	8006026 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5e:	4b6a      	ldr	r3, [pc, #424]	; (8006108 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	099b      	lsrs	r3, r3, #6
 8005f64:	2200      	movs	r2, #0
 8005f66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f70:	633b      	str	r3, [r7, #48]	; 0x30
 8005f72:	2300      	movs	r3, #0
 8005f74:	637b      	str	r3, [r7, #52]	; 0x34
 8005f76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	f04f 0000 	mov.w	r0, #0
 8005f82:	f04f 0100 	mov.w	r1, #0
 8005f86:	0159      	lsls	r1, r3, #5
 8005f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f8c:	0150      	lsls	r0, r2, #5
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4621      	mov	r1, r4
 8005f94:	1a51      	subs	r1, r2, r1
 8005f96:	6139      	str	r1, [r7, #16]
 8005f98:	4629      	mov	r1, r5
 8005f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fac:	4659      	mov	r1, fp
 8005fae:	018b      	lsls	r3, r1, #6
 8005fb0:	4651      	mov	r1, sl
 8005fb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fb6:	4651      	mov	r1, sl
 8005fb8:	018a      	lsls	r2, r1, #6
 8005fba:	4651      	mov	r1, sl
 8005fbc:	ebb2 0801 	subs.w	r8, r2, r1
 8005fc0:	4659      	mov	r1, fp
 8005fc2:	eb63 0901 	sbc.w	r9, r3, r1
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	f04f 0300 	mov.w	r3, #0
 8005fce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fda:	4690      	mov	r8, r2
 8005fdc:	4699      	mov	r9, r3
 8005fde:	4623      	mov	r3, r4
 8005fe0:	eb18 0303 	adds.w	r3, r8, r3
 8005fe4:	60bb      	str	r3, [r7, #8]
 8005fe6:	462b      	mov	r3, r5
 8005fe8:	eb49 0303 	adc.w	r3, r9, r3
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	024b      	lsls	r3, r1, #9
 8005ffe:	4621      	mov	r1, r4
 8006000:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006004:	4621      	mov	r1, r4
 8006006:	024a      	lsls	r2, r1, #9
 8006008:	4610      	mov	r0, r2
 800600a:	4619      	mov	r1, r3
 800600c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600e:	2200      	movs	r2, #0
 8006010:	62bb      	str	r3, [r7, #40]	; 0x28
 8006012:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006014:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006018:	f7fa fc88 	bl	800092c <__aeabi_uldivmod>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4613      	mov	r3, r2
 8006022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006024:	e058      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006026:	4b38      	ldr	r3, [pc, #224]	; (8006108 <HAL_RCC_GetSysClockFreq+0x200>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	099b      	lsrs	r3, r3, #6
 800602c:	2200      	movs	r2, #0
 800602e:	4618      	mov	r0, r3
 8006030:	4611      	mov	r1, r2
 8006032:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006036:	623b      	str	r3, [r7, #32]
 8006038:	2300      	movs	r3, #0
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
 800603c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006040:	4642      	mov	r2, r8
 8006042:	464b      	mov	r3, r9
 8006044:	f04f 0000 	mov.w	r0, #0
 8006048:	f04f 0100 	mov.w	r1, #0
 800604c:	0159      	lsls	r1, r3, #5
 800604e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006052:	0150      	lsls	r0, r2, #5
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4641      	mov	r1, r8
 800605a:	ebb2 0a01 	subs.w	sl, r2, r1
 800605e:	4649      	mov	r1, r9
 8006060:	eb63 0b01 	sbc.w	fp, r3, r1
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006070:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006074:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006078:	ebb2 040a 	subs.w	r4, r2, sl
 800607c:	eb63 050b 	sbc.w	r5, r3, fp
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	00eb      	lsls	r3, r5, #3
 800608a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800608e:	00e2      	lsls	r2, r4, #3
 8006090:	4614      	mov	r4, r2
 8006092:	461d      	mov	r5, r3
 8006094:	4643      	mov	r3, r8
 8006096:	18e3      	adds	r3, r4, r3
 8006098:	603b      	str	r3, [r7, #0]
 800609a:	464b      	mov	r3, r9
 800609c:	eb45 0303 	adc.w	r3, r5, r3
 80060a0:	607b      	str	r3, [r7, #4]
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060ae:	4629      	mov	r1, r5
 80060b0:	028b      	lsls	r3, r1, #10
 80060b2:	4621      	mov	r1, r4
 80060b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060b8:	4621      	mov	r1, r4
 80060ba:	028a      	lsls	r2, r1, #10
 80060bc:	4610      	mov	r0, r2
 80060be:	4619      	mov	r1, r3
 80060c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c2:	2200      	movs	r2, #0
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	61fa      	str	r2, [r7, #28]
 80060c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060cc:	f7fa fc2e 	bl	800092c <__aeabi_uldivmod>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4613      	mov	r3, r2
 80060d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060d8:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <HAL_RCC_GetSysClockFreq+0x200>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	0c1b      	lsrs	r3, r3, #16
 80060de:	f003 0303 	and.w	r3, r3, #3
 80060e2:	3301      	adds	r3, #1
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80060e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060f2:	e002      	b.n	80060fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060f4:	4b05      	ldr	r3, [pc, #20]	; (800610c <HAL_RCC_GetSysClockFreq+0x204>)
 80060f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3750      	adds	r7, #80	; 0x50
 8006100:	46bd      	mov	sp, r7
 8006102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006106:	bf00      	nop
 8006108:	40023800 	.word	0x40023800
 800610c:	00f42400 	.word	0x00f42400
 8006110:	007a1200 	.word	0x007a1200

08006114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006118:	4b03      	ldr	r3, [pc, #12]	; (8006128 <HAL_RCC_GetHCLKFreq+0x14>)
 800611a:	681b      	ldr	r3, [r3, #0]
}
 800611c:	4618      	mov	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	20000098 	.word	0x20000098

0800612c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006130:	f7ff fff0 	bl	8006114 <HAL_RCC_GetHCLKFreq>
 8006134:	4602      	mov	r2, r0
 8006136:	4b05      	ldr	r3, [pc, #20]	; (800614c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	0a9b      	lsrs	r3, r3, #10
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	4903      	ldr	r1, [pc, #12]	; (8006150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006142:	5ccb      	ldrb	r3, [r1, r3]
 8006144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006148:	4618      	mov	r0, r3
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40023800 	.word	0x40023800
 8006150:	080112e8 	.word	0x080112e8

08006154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006158:	f7ff ffdc 	bl	8006114 <HAL_RCC_GetHCLKFreq>
 800615c:	4602      	mov	r2, r0
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	0b5b      	lsrs	r3, r3, #13
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	4903      	ldr	r1, [pc, #12]	; (8006178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800616a:	5ccb      	ldrb	r3, [r1, r3]
 800616c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006170:	4618      	mov	r0, r3
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40023800 	.word	0x40023800
 8006178:	080112e8 	.word	0x080112e8

0800617c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	220f      	movs	r2, #15
 800618a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800618c:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <HAL_RCC_GetClockConfig+0x5c>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 0203 	and.w	r2, r3, #3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006198:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <HAL_RCC_GetClockConfig+0x5c>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <HAL_RCC_GetClockConfig+0x5c>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80061b0:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <HAL_RCC_GetClockConfig+0x5c>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	08db      	lsrs	r3, r3, #3
 80061b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061be:	4b07      	ldr	r3, [pc, #28]	; (80061dc <HAL_RCC_GetClockConfig+0x60>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0207 	and.w	r2, r3, #7
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	601a      	str	r2, [r3, #0]
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40023800 	.word	0x40023800
 80061dc:	40023c00 	.word	0x40023c00

080061e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d105      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006204:	2b00      	cmp	r3, #0
 8006206:	d035      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006208:	4b62      	ldr	r3, [pc, #392]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800620e:	f7fe fa81 	bl	8004714 <HAL_GetTick>
 8006212:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006214:	e008      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006216:	f7fe fa7d 	bl	8004714 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e0b0      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006228:	4b5b      	ldr	r3, [pc, #364]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f0      	bne.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	019a      	lsls	r2, r3, #6
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	071b      	lsls	r3, r3, #28
 8006240:	4955      	ldr	r1, [pc, #340]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006242:	4313      	orrs	r3, r2
 8006244:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006248:	4b52      	ldr	r3, [pc, #328]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800624e:	f7fe fa61 	bl	8004714 <HAL_GetTick>
 8006252:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006254:	e008      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006256:	f7fe fa5d 	bl	8004714 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e090      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006268:	4b4b      	ldr	r3, [pc, #300]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f0      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8083 	beq.w	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	4b44      	ldr	r3, [pc, #272]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	4a43      	ldr	r2, [pc, #268]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800628c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006290:	6413      	str	r3, [r2, #64]	; 0x40
 8006292:	4b41      	ldr	r3, [pc, #260]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800629e:	4b3f      	ldr	r3, [pc, #252]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a3e      	ldr	r2, [pc, #248]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062aa:	f7fe fa33 	bl	8004714 <HAL_GetTick>
 80062ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062b0:	e008      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062b2:	f7fe fa2f 	bl	8004714 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e062      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062c4:	4b35      	ldr	r3, [pc, #212]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0f0      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062d0:	4b31      	ldr	r3, [pc, #196]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d02f      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d028      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062ee:	4b2a      	ldr	r3, [pc, #168]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062f8:	4b29      	ldr	r3, [pc, #164]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062fe:	4b28      	ldr	r3, [pc, #160]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006304:	4a24      	ldr	r2, [pc, #144]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800630a:	4b23      	ldr	r3, [pc, #140]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b01      	cmp	r3, #1
 8006314:	d114      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006316:	f7fe f9fd 	bl	8004714 <HAL_GetTick>
 800631a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631c:	e00a      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800631e:	f7fe f9f9 	bl	8004714 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	f241 3288 	movw	r2, #5000	; 0x1388
 800632c:	4293      	cmp	r3, r2
 800632e:	d901      	bls.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e02a      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006334:	4b18      	ldr	r3, [pc, #96]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0ee      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800634c:	d10d      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800634e:	4b12      	ldr	r3, [pc, #72]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800635e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006362:	490d      	ldr	r1, [pc, #52]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006364:	4313      	orrs	r3, r2
 8006366:	608b      	str	r3, [r1, #8]
 8006368:	e005      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800636a:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	4a0a      	ldr	r2, [pc, #40]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006370:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006374:	6093      	str	r3, [r2, #8]
 8006376:	4b08      	ldr	r3, [pc, #32]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006382:	4905      	ldr	r1, [pc, #20]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006384:	4313      	orrs	r3, r2
 8006386:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	42470068 	.word	0x42470068
 8006398:	40023800 	.word	0x40023800
 800639c:	40007000 	.word	0x40007000
 80063a0:	42470e40 	.word	0x42470e40

080063a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e066      	b.n	8006488 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	7f5b      	ldrb	r3, [r3, #29]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fd fdc8 	bl	8003f60 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	22ca      	movs	r2, #202	; 0xca
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2253      	movs	r2, #83	; 0x53
 80063e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fa45 	bl	8006876 <RTC_EnterInitMode>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d12c      	bne.n	8006450 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6812      	ldr	r2, [r2, #0]
 8006400:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006408:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6899      	ldr	r1, [r3, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	68d2      	ldr	r2, [r2, #12]
 8006430:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6919      	ldr	r1, [r3, #16]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	041a      	lsls	r2, r3, #16
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa4c 	bl	80068e4 <RTC_ExitInitMode>
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d113      	bne.n	800647e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006464:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699a      	ldr	r2, [r3, #24]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	22ff      	movs	r2, #255	; 0xff
 8006484:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006486:	7bfb      	ldrb	r3, [r7, #15]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006490:	b590      	push	{r4, r7, lr}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	7f1b      	ldrb	r3, [r3, #28]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d101      	bne.n	80064ac <HAL_RTC_SetTime+0x1c>
 80064a8:	2302      	movs	r3, #2
 80064aa:	e087      	b.n	80065bc <HAL_RTC_SetTime+0x12c>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2202      	movs	r2, #2
 80064b6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d126      	bne.n	800650c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d102      	bne.n	80064d2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2200      	movs	r2, #0
 80064d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fa29 	bl	800692e <RTC_ByteToBcd2>
 80064dc:	4603      	mov	r3, r0
 80064de:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	785b      	ldrb	r3, [r3, #1]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fa22 	bl	800692e <RTC_ByteToBcd2>
 80064ea:	4603      	mov	r3, r0
 80064ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80064ee:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	789b      	ldrb	r3, [r3, #2]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fa1a 	bl	800692e <RTC_ByteToBcd2>
 80064fa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80064fc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	78db      	ldrb	r3, [r3, #3]
 8006504:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	e018      	b.n	800653e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d102      	bne.n	8006520 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2200      	movs	r2, #0
 800651e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	785b      	ldrb	r3, [r3, #1]
 800652a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800652c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006532:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	78db      	ldrb	r3, [r3, #3]
 8006538:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	22ca      	movs	r2, #202	; 0xca
 8006544:	625a      	str	r2, [r3, #36]	; 0x24
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2253      	movs	r2, #83	; 0x53
 800654c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f991 	bl	8006876 <RTC_EnterInitMode>
 8006554:	4603      	mov	r3, r0
 8006556:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006558:	7cfb      	ldrb	r3, [r7, #19]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d120      	bne.n	80065a0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006568:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800656c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800657c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6899      	ldr	r1, [r3, #8]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	431a      	orrs	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 f9a4 	bl	80068e4 <RTC_ExitInitMode>
 800659c:	4603      	mov	r3, r0
 800659e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80065a0:	7cfb      	ldrb	r3, [r7, #19]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	22ff      	movs	r2, #255	; 0xff
 80065b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	771a      	strb	r2, [r3, #28]

  return status;
 80065ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd90      	pop	{r4, r7, pc}

080065c4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80065f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80065fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	0c1b      	lsrs	r3, r3, #16
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006606:	b2da      	uxtb	r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006616:	b2da      	uxtb	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006624:	b2da      	uxtb	r2, r3
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	0d9b      	lsrs	r3, r3, #22
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	b2da      	uxtb	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d11a      	bne.n	8006676 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f000 f98f 	bl	8006968 <RTC_Bcd2ToByte>
 800664a:	4603      	mov	r3, r0
 800664c:	461a      	mov	r2, r3
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	4618      	mov	r0, r3
 8006658:	f000 f986 	bl	8006968 <RTC_Bcd2ToByte>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	789b      	ldrb	r3, [r3, #2]
 8006668:	4618      	mov	r0, r3
 800666a:	f000 f97d 	bl	8006968 <RTC_Bcd2ToByte>
 800666e:	4603      	mov	r3, r0
 8006670:	461a      	mov	r2, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006680:	b590      	push	{r4, r7, lr}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	7f1b      	ldrb	r3, [r3, #28]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_RTC_SetDate+0x1c>
 8006698:	2302      	movs	r3, #2
 800669a:	e071      	b.n	8006780 <HAL_RTC_SetDate+0x100>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2201      	movs	r2, #1
 80066a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2202      	movs	r2, #2
 80066a6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10e      	bne.n	80066cc <HAL_RTC_SetDate+0x4c>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	785b      	ldrb	r3, [r3, #1]
 80066b2:	f003 0310 	and.w	r3, r3, #16
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d008      	beq.n	80066cc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	f023 0310 	bic.w	r3, r3, #16
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	330a      	adds	r3, #10
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d11c      	bne.n	800670c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	78db      	ldrb	r3, [r3, #3]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 f929 	bl	800692e <RTC_ByteToBcd2>
 80066dc:	4603      	mov	r3, r0
 80066de:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	785b      	ldrb	r3, [r3, #1]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 f922 	bl	800692e <RTC_ByteToBcd2>
 80066ea:	4603      	mov	r3, r0
 80066ec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80066ee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	789b      	ldrb	r3, [r3, #2]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 f91a 	bl	800692e <RTC_ByteToBcd2>
 80066fa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80066fc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	e00e      	b.n	800672a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	78db      	ldrb	r3, [r3, #3]
 8006710:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	785b      	ldrb	r3, [r3, #1]
 8006716:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006718:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800671e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	22ca      	movs	r2, #202	; 0xca
 8006730:	625a      	str	r2, [r3, #36]	; 0x24
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2253      	movs	r2, #83	; 0x53
 8006738:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f89b 	bl	8006876 <RTC_EnterInitMode>
 8006740:	4603      	mov	r3, r0
 8006742:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006744:	7cfb      	ldrb	r3, [r7, #19]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10c      	bne.n	8006764 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006754:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006758:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 f8c2 	bl	80068e4 <RTC_ExitInitMode>
 8006760:	4603      	mov	r3, r0
 8006762:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006764:	7cfb      	ldrb	r3, [r7, #19]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	22ff      	movs	r2, #255	; 0xff
 8006776:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	771a      	strb	r2, [r3, #28]

  return status;
 800677e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006780:	4618      	mov	r0, r3
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	bd90      	pop	{r4, r7, pc}

08006788 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80067a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	0c1b      	lsrs	r3, r3, #16
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	0a1b      	lsrs	r3, r3, #8
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	f003 031f 	and.w	r3, r3, #31
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	0b5b      	lsrs	r3, r3, #13
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d11a      	bne.n	800681c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	78db      	ldrb	r3, [r3, #3]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 f8bc 	bl	8006968 <RTC_Bcd2ToByte>
 80067f0:	4603      	mov	r3, r0
 80067f2:	461a      	mov	r2, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 f8b3 	bl	8006968 <RTC_Bcd2ToByte>
 8006802:	4603      	mov	r3, r0
 8006804:	461a      	mov	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	789b      	ldrb	r3, [r3, #2]
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f8aa 	bl	8006968 <RTC_Bcd2ToByte>
 8006814:	4603      	mov	r3, r0
 8006816:	461a      	mov	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006840:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006842:	f7fd ff67 	bl	8004714 <HAL_GetTick>
 8006846:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006848:	e009      	b.n	800685e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800684a:	f7fd ff63 	bl	8004714 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006858:	d901      	bls.n	800685e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e007      	b.n	800686e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0ee      	beq.n	800684a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d122      	bne.n	80068da <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068a2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068a4:	f7fd ff36 	bl	8004714 <HAL_GetTick>
 80068a8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80068aa:	e00c      	b.n	80068c6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068ac:	f7fd ff32 	bl	8004714 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ba:	d904      	bls.n	80068c6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2204      	movs	r2, #4
 80068c0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <RTC_EnterInitMode+0x64>
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d1e8      	bne.n	80068ac <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80068da:	7bfb      	ldrb	r3, [r7, #15]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068fe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10a      	bne.n	8006924 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff ff89 	bl	8006826 <HAL_RTC_WaitForSynchro>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d004      	beq.n	8006924 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2204      	movs	r2, #4
 800691e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	4603      	mov	r3, r0
 8006936:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800693c:	e005      	b.n	800694a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	3301      	adds	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	3b0a      	subs	r3, #10
 8006948:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800694a:	79fb      	ldrb	r3, [r7, #7]
 800694c:	2b09      	cmp	r3, #9
 800694e:	d8f6      	bhi.n	800693e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	b2da      	uxtb	r2, r3
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	4313      	orrs	r3, r2
 800695a:	b2db      	uxtb	r3, r3
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	091b      	lsrs	r3, r3, #4
 800697a:	b2db      	uxtb	r3, r3
 800697c:	461a      	mov	r2, r3
 800697e:	0092      	lsls	r2, r2, #2
 8006980:	4413      	add	r3, r2
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	b2da      	uxtb	r2, r3
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	4413      	add	r3, r2
 8006992:	b2db      	uxtb	r3, r3
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e07b      	b.n	8006aaa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d108      	bne.n	80069cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c2:	d009      	beq.n	80069d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	61da      	str	r2, [r3, #28]
 80069ca:	e005      	b.n	80069d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fd fae0 	bl	8003fb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5c:	ea42 0103 	orr.w	r1, r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	0c1b      	lsrs	r3, r3, #16
 8006a76:	f003 0104 	and.w	r1, r3, #4
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	f003 0210 	and.w	r2, r3, #16
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69da      	ldr	r2, [r3, #28]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b088      	sub	sp, #32
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	603b      	str	r3, [r7, #0]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_SPI_Transmit+0x22>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e126      	b.n	8006d22 <HAL_SPI_Transmit+0x270>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006adc:	f7fd fe1a 	bl	8004714 <HAL_GetTick>
 8006ae0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d002      	beq.n	8006af8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006af2:	2302      	movs	r3, #2
 8006af4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006af6:	e10b      	b.n	8006d10 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_SPI_Transmit+0x52>
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b08:	e102      	b.n	8006d10 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	88fa      	ldrh	r2, [r7, #6]
 8006b22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	88fa      	ldrh	r2, [r7, #6]
 8006b28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b50:	d10f      	bne.n	8006b72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	d007      	beq.n	8006b90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b98:	d14b      	bne.n	8006c32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_SPI_Transmit+0xf6>
 8006ba2:	8afb      	ldrh	r3, [r7, #22]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d13e      	bne.n	8006c26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	881a      	ldrh	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb8:	1c9a      	adds	r2, r3, #2
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bcc:	e02b      	b.n	8006c26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d112      	bne.n	8006c02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be0:	881a      	ldrh	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	1c9a      	adds	r2, r3, #2
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c00:	e011      	b.n	8006c26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c02:	f7fd fd87 	bl	8004714 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d803      	bhi.n	8006c1a <HAL_SPI_Transmit+0x168>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c18:	d102      	bne.n	8006c20 <HAL_SPI_Transmit+0x16e>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c24:	e074      	b.n	8006d10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1ce      	bne.n	8006bce <HAL_SPI_Transmit+0x11c>
 8006c30:	e04c      	b.n	8006ccc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <HAL_SPI_Transmit+0x18e>
 8006c3a:	8afb      	ldrh	r3, [r7, #22]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d140      	bne.n	8006cc2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	330c      	adds	r3, #12
 8006c4a:	7812      	ldrb	r2, [r2, #0]
 8006c4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006c66:	e02c      	b.n	8006cc2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d113      	bne.n	8006c9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	7812      	ldrb	r2, [r2, #0]
 8006c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c9c:	e011      	b.n	8006cc2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c9e:	f7fd fd39 	bl	8004714 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d803      	bhi.n	8006cb6 <HAL_SPI_Transmit+0x204>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cb4:	d102      	bne.n	8006cbc <HAL_SPI_Transmit+0x20a>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cc0:	e026      	b.n	8006d10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1cd      	bne.n	8006c68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fb13 	bl	80072fc <SPI_EndRxTxTransaction>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cea:	2300      	movs	r3, #0
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e000      	b.n	8006d10 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006d0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d20:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_SPI_Transmit_DMA+0x20>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e09b      	b.n	8006e84 <HAL_SPI_Transmit_DMA+0x158>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d002      	beq.n	8006d66 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006d60:	2302      	movs	r3, #2
 8006d62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d64:	e089      	b.n	8006e7a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <HAL_SPI_Transmit_DMA+0x46>
 8006d6c:	88fb      	ldrh	r3, [r7, #6]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d102      	bne.n	8006d78 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d76:	e080      	b.n	8006e7a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	88fa      	ldrh	r2, [r7, #6]
 8006d90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	88fa      	ldrh	r2, [r7, #6]
 8006d96:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dbe:	d10f      	bne.n	8006de0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dde:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de4:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <HAL_SPI_Transmit_DMA+0x160>)
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dec:	4a28      	ldr	r2, [pc, #160]	; (8006e90 <HAL_SPI_Transmit_DMA+0x164>)
 8006dee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df4:	4a27      	ldr	r2, [pc, #156]	; (8006e94 <HAL_SPI_Transmit_DMA+0x168>)
 8006df6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e08:	4619      	mov	r1, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e16:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006e18:	f7fd fe3c 	bl	8004a94 <HAL_DMA_Start_IT>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00c      	beq.n	8006e3c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e26:	f043 0210 	orr.w	r2, r3, #16
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006e3a:	e01e      	b.n	8006e7a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d007      	beq.n	8006e5a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e58:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0220 	orr.w	r2, r2, #32
 8006e68:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0202 	orr.w	r2, r2, #2
 8006e78:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	08007169 	.word	0x08007169
 8006e90:	080070c1 	.word	0x080070c1
 8006e94:	08007185 	.word	0x08007185

08006e98 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	099b      	lsrs	r3, r3, #6
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10f      	bne.n	8006edc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	099b      	lsrs	r3, r3, #6
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	4798      	blx	r3
    return;
 8006eda:	e0d7      	b.n	800708c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	085b      	lsrs	r3, r3, #1
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <HAL_SPI_IRQHandler+0x66>
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	09db      	lsrs	r3, r3, #7
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d004      	beq.n	8006efe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	4798      	blx	r3
    return;
 8006efc:	e0c6      	b.n	800708c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10c      	bne.n	8006f24 <HAL_SPI_IRQHandler+0x8c>
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	099b      	lsrs	r3, r3, #6
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	0a1b      	lsrs	r3, r3, #8
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 80b4 	beq.w	800708c <HAL_SPI_IRQHandler+0x1f4>
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	095b      	lsrs	r3, r3, #5
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 80ad 	beq.w	800708c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	099b      	lsrs	r3, r3, #6
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d023      	beq.n	8006f86 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d011      	beq.n	8006f6e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4e:	f043 0204 	orr.w	r2, r3, #4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	e00b      	b.n	8006f86 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f6e:	2300      	movs	r3, #0
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	613b      	str	r3, [r7, #16]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	693b      	ldr	r3, [r7, #16]
        return;
 8006f84:	e082      	b.n	800708c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	095b      	lsrs	r3, r3, #5
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d014      	beq.n	8006fbc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f96:	f043 0201 	orr.w	r2, r3, #1
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	0a1b      	lsrs	r3, r3, #8
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00c      	beq.n	8006fe2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fcc:	f043 0208 	orr.w	r2, r3, #8
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60bb      	str	r3, [r7, #8]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	60bb      	str	r3, [r7, #8]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d04f      	beq.n	800708a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ff8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <HAL_SPI_IRQHandler+0x17e>
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d034      	beq.n	8007080 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0203 	bic.w	r2, r2, #3
 8007024:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d011      	beq.n	8007052 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007032:	4a18      	ldr	r2, [pc, #96]	; (8007094 <HAL_SPI_IRQHandler+0x1fc>)
 8007034:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703a:	4618      	mov	r0, r3
 800703c:	f7fd fdf2 	bl	8004c24 <HAL_DMA_Abort_IT>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007056:	2b00      	cmp	r3, #0
 8007058:	d016      	beq.n	8007088 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800705e:	4a0d      	ldr	r2, [pc, #52]	; (8007094 <HAL_SPI_IRQHandler+0x1fc>)
 8007060:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007066:	4618      	mov	r0, r3
 8007068:	f7fd fddc 	bl	8004c24 <HAL_DMA_Abort_IT>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007076:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800707e:	e003      	b.n	8007088 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f813 	bl	80070ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007086:	e000      	b.n	800708a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007088:	bf00      	nop
    return;
 800708a:	bf00      	nop
  }
}
 800708c:	3720      	adds	r7, #32
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	080071c5 	.word	0x080071c5

08007098 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070ce:	f7fd fb21 	bl	8004714 <HAL_GetTick>
 80070d2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e2:	d03b      	beq.n	800715c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 0220 	bic.w	r2, r2, #32
 80070f2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0202 	bic.w	r2, r2, #2
 8007102:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	2164      	movs	r1, #100	; 0x64
 8007108:	6978      	ldr	r0, [r7, #20]
 800710a:	f000 f8f7 	bl	80072fc <SPI_EndRxTxTransaction>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007118:	f043 0220 	orr.w	r2, r3, #32
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2200      	movs	r2, #0
 8007142:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007154:	6978      	ldr	r0, [r7, #20]
 8007156:	f7ff ffa9 	bl	80070ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800715a:	e002      	b.n	8007162 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800715c:	6978      	ldr	r0, [r7, #20]
 800715e:	f7fb fb5f 	bl	8002820 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007174:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7ff ff8e 	bl	8007098 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800717c:	bf00      	nop
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0203 	bic.w	r2, r2, #3
 80071a0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a6:	f043 0210 	orr.w	r2, r3, #16
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7ff ff78 	bl	80070ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071bc:	bf00      	nop
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f7ff ff64 	bl	80070ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071e4:	bf00      	nop
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	4613      	mov	r3, r2
 80071fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071fc:	f7fd fa8a 	bl	8004714 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	4413      	add	r3, r2
 800720a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800720c:	f7fd fa82 	bl	8004714 <HAL_GetTick>
 8007210:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007212:	4b39      	ldr	r3, [pc, #228]	; (80072f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	015b      	lsls	r3, r3, #5
 8007218:	0d1b      	lsrs	r3, r3, #20
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	fb02 f303 	mul.w	r3, r2, r3
 8007220:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007222:	e054      	b.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800722a:	d050      	beq.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800722c:	f7fd fa72 	bl	8004714 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	429a      	cmp	r2, r3
 800723a:	d902      	bls.n	8007242 <SPI_WaitFlagStateUntilTimeout+0x56>
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d13d      	bne.n	80072be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007250:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800725a:	d111      	bne.n	8007280 <SPI_WaitFlagStateUntilTimeout+0x94>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007264:	d004      	beq.n	8007270 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800726e:	d107      	bne.n	8007280 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800727e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007288:	d10f      	bne.n	80072aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e017      	b.n	80072ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4013      	ands	r3, r2
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	429a      	cmp	r2, r3
 80072dc:	bf0c      	ite	eq
 80072de:	2301      	moveq	r3, #1
 80072e0:	2300      	movne	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d19b      	bne.n	8007224 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3720      	adds	r7, #32
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000098 	.word	0x20000098

080072fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af02      	add	r7, sp, #8
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007308:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <SPI_EndRxTxTransaction+0x7c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1b      	ldr	r2, [pc, #108]	; (800737c <SPI_EndRxTxTransaction+0x80>)
 800730e:	fba2 2303 	umull	r2, r3, r2, r3
 8007312:	0d5b      	lsrs	r3, r3, #21
 8007314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007318:	fb02 f303 	mul.w	r3, r2, r3
 800731c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007326:	d112      	bne.n	800734e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2200      	movs	r2, #0
 8007330:	2180      	movs	r1, #128	; 0x80
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f7ff ff5a 	bl	80071ec <SPI_WaitFlagStateUntilTimeout>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d016      	beq.n	800736c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007342:	f043 0220 	orr.w	r2, r3, #32
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e00f      	b.n	800736e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	3b01      	subs	r3, #1
 8007358:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007364:	2b80      	cmp	r3, #128	; 0x80
 8007366:	d0f2      	beq.n	800734e <SPI_EndRxTxTransaction+0x52>
 8007368:	e000      	b.n	800736c <SPI_EndRxTxTransaction+0x70>
        break;
 800736a:	bf00      	nop
  }

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000098 	.word	0x20000098
 800737c:	165e9f81 	.word	0x165e9f81

08007380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e041      	b.n	8007416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7fc fe92 	bl	80040d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f000 fa96 	bl	80078f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b01      	cmp	r3, #1
 8007432:	d001      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e04e      	b.n	80074d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0201 	orr.w	r2, r2, #1
 800744e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a23      	ldr	r2, [pc, #140]	; (80074e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d022      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007462:	d01d      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1f      	ldr	r2, [pc, #124]	; (80074e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d018      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a1e      	ldr	r2, [pc, #120]	; (80074ec <HAL_TIM_Base_Start_IT+0xcc>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d013      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1c      	ldr	r2, [pc, #112]	; (80074f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00e      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1b      	ldr	r2, [pc, #108]	; (80074f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d009      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a19      	ldr	r2, [pc, #100]	; (80074f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d004      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a18      	ldr	r2, [pc, #96]	; (80074fc <HAL_TIM_Base_Start_IT+0xdc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d111      	bne.n	80074c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b06      	cmp	r3, #6
 80074b0:	d010      	beq.n	80074d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f042 0201 	orr.w	r2, r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c2:	e007      	b.n	80074d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0201 	orr.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	40010000 	.word	0x40010000
 80074e8:	40000400 	.word	0x40000400
 80074ec:	40000800 	.word	0x40000800
 80074f0:	40000c00 	.word	0x40000c00
 80074f4:	40010400 	.word	0x40010400
 80074f8:	40014000 	.word	0x40014000
 80074fc:	40001800 	.word	0x40001800

08007500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b02      	cmp	r3, #2
 8007514:	d122      	bne.n	800755c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b02      	cmp	r3, #2
 8007522:	d11b      	bne.n	800755c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f06f 0202 	mvn.w	r2, #2
 800752c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f9b5 	bl	80078b2 <HAL_TIM_IC_CaptureCallback>
 8007548:	e005      	b.n	8007556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f9a7 	bl	800789e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f9b8 	bl	80078c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f003 0304 	and.w	r3, r3, #4
 8007566:	2b04      	cmp	r3, #4
 8007568:	d122      	bne.n	80075b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f003 0304 	and.w	r3, r3, #4
 8007574:	2b04      	cmp	r3, #4
 8007576:	d11b      	bne.n	80075b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f06f 0204 	mvn.w	r2, #4
 8007580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2202      	movs	r2, #2
 8007586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f98b 	bl	80078b2 <HAL_TIM_IC_CaptureCallback>
 800759c:	e005      	b.n	80075aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f97d 	bl	800789e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f98e 	bl	80078c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f003 0308 	and.w	r3, r3, #8
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	d122      	bne.n	8007604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d11b      	bne.n	8007604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f06f 0208 	mvn.w	r2, #8
 80075d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2204      	movs	r2, #4
 80075da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f961 	bl	80078b2 <HAL_TIM_IC_CaptureCallback>
 80075f0:	e005      	b.n	80075fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f953 	bl	800789e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f964 	bl	80078c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f003 0310 	and.w	r3, r3, #16
 800760e:	2b10      	cmp	r3, #16
 8007610:	d122      	bne.n	8007658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	2b10      	cmp	r3, #16
 800761e:	d11b      	bne.n	8007658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f06f 0210 	mvn.w	r2, #16
 8007628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2208      	movs	r2, #8
 800762e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f937 	bl	80078b2 <HAL_TIM_IC_CaptureCallback>
 8007644:	e005      	b.n	8007652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f929 	bl	800789e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f93a 	bl	80078c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b01      	cmp	r3, #1
 8007664:	d10e      	bne.n	8007684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b01      	cmp	r3, #1
 8007672:	d107      	bne.n	8007684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f06f 0201 	mvn.w	r2, #1
 800767c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7fc f80e 	bl	80036a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768e:	2b80      	cmp	r3, #128	; 0x80
 8007690:	d10e      	bne.n	80076b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769c:	2b80      	cmp	r3, #128	; 0x80
 800769e:	d107      	bne.n	80076b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fae0 	bl	8007c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	d10e      	bne.n	80076dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c8:	2b40      	cmp	r3, #64	; 0x40
 80076ca:	d107      	bne.n	80076dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f8ff 	bl	80078da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d10e      	bne.n	8007708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d107      	bne.n	8007708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0220 	mvn.w	r2, #32
 8007700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 faaa 	bl	8007c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_TIM_ConfigClockSource+0x1c>
 8007728:	2302      	movs	r3, #2
 800772a:	e0b4      	b.n	8007896 <HAL_TIM_ConfigClockSource+0x186>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800774a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007764:	d03e      	beq.n	80077e4 <HAL_TIM_ConfigClockSource+0xd4>
 8007766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800776a:	f200 8087 	bhi.w	800787c <HAL_TIM_ConfigClockSource+0x16c>
 800776e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007772:	f000 8086 	beq.w	8007882 <HAL_TIM_ConfigClockSource+0x172>
 8007776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777a:	d87f      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x16c>
 800777c:	2b70      	cmp	r3, #112	; 0x70
 800777e:	d01a      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0xa6>
 8007780:	2b70      	cmp	r3, #112	; 0x70
 8007782:	d87b      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x16c>
 8007784:	2b60      	cmp	r3, #96	; 0x60
 8007786:	d050      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x11a>
 8007788:	2b60      	cmp	r3, #96	; 0x60
 800778a:	d877      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x16c>
 800778c:	2b50      	cmp	r3, #80	; 0x50
 800778e:	d03c      	beq.n	800780a <HAL_TIM_ConfigClockSource+0xfa>
 8007790:	2b50      	cmp	r3, #80	; 0x50
 8007792:	d873      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x16c>
 8007794:	2b40      	cmp	r3, #64	; 0x40
 8007796:	d058      	beq.n	800784a <HAL_TIM_ConfigClockSource+0x13a>
 8007798:	2b40      	cmp	r3, #64	; 0x40
 800779a:	d86f      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x16c>
 800779c:	2b30      	cmp	r3, #48	; 0x30
 800779e:	d064      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x15a>
 80077a0:	2b30      	cmp	r3, #48	; 0x30
 80077a2:	d86b      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x16c>
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d060      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x15a>
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	d867      	bhi.n	800787c <HAL_TIM_ConfigClockSource+0x16c>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d05c      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x15a>
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d05a      	beq.n	800786a <HAL_TIM_ConfigClockSource+0x15a>
 80077b4:	e062      	b.n	800787c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6899      	ldr	r1, [r3, #8]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f000 f9ad 	bl	8007b24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	609a      	str	r2, [r3, #8]
      break;
 80077e2:	e04f      	b.n	8007884 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	6899      	ldr	r1, [r3, #8]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f000 f996 	bl	8007b24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007806:	609a      	str	r2, [r3, #8]
      break;
 8007808:	e03c      	b.n	8007884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6859      	ldr	r1, [r3, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	461a      	mov	r2, r3
 8007818:	f000 f90a 	bl	8007a30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2150      	movs	r1, #80	; 0x50
 8007822:	4618      	mov	r0, r3
 8007824:	f000 f963 	bl	8007aee <TIM_ITRx_SetConfig>
      break;
 8007828:	e02c      	b.n	8007884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	6859      	ldr	r1, [r3, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	461a      	mov	r2, r3
 8007838:	f000 f929 	bl	8007a8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2160      	movs	r1, #96	; 0x60
 8007842:	4618      	mov	r0, r3
 8007844:	f000 f953 	bl	8007aee <TIM_ITRx_SetConfig>
      break;
 8007848:	e01c      	b.n	8007884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	6859      	ldr	r1, [r3, #4]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	461a      	mov	r2, r3
 8007858:	f000 f8ea 	bl	8007a30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2140      	movs	r1, #64	; 0x40
 8007862:	4618      	mov	r0, r3
 8007864:	f000 f943 	bl	8007aee <TIM_ITRx_SetConfig>
      break;
 8007868:	e00c      	b.n	8007884 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4619      	mov	r1, r3
 8007874:	4610      	mov	r0, r2
 8007876:	f000 f93a 	bl	8007aee <TIM_ITRx_SetConfig>
      break;
 800787a:	e003      	b.n	8007884 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	73fb      	strb	r3, [r7, #15]
      break;
 8007880:	e000      	b.n	8007884 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
	...

080078f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a40      	ldr	r2, [pc, #256]	; (8007a04 <TIM_Base_SetConfig+0x114>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d013      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800790e:	d00f      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a3d      	ldr	r2, [pc, #244]	; (8007a08 <TIM_Base_SetConfig+0x118>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00b      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a3c      	ldr	r2, [pc, #240]	; (8007a0c <TIM_Base_SetConfig+0x11c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d007      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a3b      	ldr	r2, [pc, #236]	; (8007a10 <TIM_Base_SetConfig+0x120>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d003      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a3a      	ldr	r2, [pc, #232]	; (8007a14 <TIM_Base_SetConfig+0x124>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d108      	bne.n	8007942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a2f      	ldr	r2, [pc, #188]	; (8007a04 <TIM_Base_SetConfig+0x114>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d02b      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007950:	d027      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a2c      	ldr	r2, [pc, #176]	; (8007a08 <TIM_Base_SetConfig+0x118>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d023      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a2b      	ldr	r2, [pc, #172]	; (8007a0c <TIM_Base_SetConfig+0x11c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d01f      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a2a      	ldr	r2, [pc, #168]	; (8007a10 <TIM_Base_SetConfig+0x120>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01b      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a29      	ldr	r2, [pc, #164]	; (8007a14 <TIM_Base_SetConfig+0x124>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d017      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a28      	ldr	r2, [pc, #160]	; (8007a18 <TIM_Base_SetConfig+0x128>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d013      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a27      	ldr	r2, [pc, #156]	; (8007a1c <TIM_Base_SetConfig+0x12c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00f      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a26      	ldr	r2, [pc, #152]	; (8007a20 <TIM_Base_SetConfig+0x130>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00b      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a25      	ldr	r2, [pc, #148]	; (8007a24 <TIM_Base_SetConfig+0x134>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d007      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a24      	ldr	r2, [pc, #144]	; (8007a28 <TIM_Base_SetConfig+0x138>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d003      	beq.n	80079a2 <TIM_Base_SetConfig+0xb2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a23      	ldr	r2, [pc, #140]	; (8007a2c <TIM_Base_SetConfig+0x13c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d108      	bne.n	80079b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a0a      	ldr	r2, [pc, #40]	; (8007a04 <TIM_Base_SetConfig+0x114>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <TIM_Base_SetConfig+0xf8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a0c      	ldr	r2, [pc, #48]	; (8007a14 <TIM_Base_SetConfig+0x124>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d103      	bne.n	80079f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	615a      	str	r2, [r3, #20]
}
 80079f6:	bf00      	nop
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	40010000 	.word	0x40010000
 8007a08:	40000400 	.word	0x40000400
 8007a0c:	40000800 	.word	0x40000800
 8007a10:	40000c00 	.word	0x40000c00
 8007a14:	40010400 	.word	0x40010400
 8007a18:	40014000 	.word	0x40014000
 8007a1c:	40014400 	.word	0x40014400
 8007a20:	40014800 	.word	0x40014800
 8007a24:	40001800 	.word	0x40001800
 8007a28:	40001c00 	.word	0x40001c00
 8007a2c:	40002000 	.word	0x40002000

08007a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	f023 0201 	bic.w	r2, r3, #1
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f023 030a 	bic.w	r3, r3, #10
 8007a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	621a      	str	r2, [r3, #32]
}
 8007a82:	bf00      	nop
 8007a84:	371c      	adds	r7, #28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b087      	sub	sp, #28
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	f023 0210 	bic.w	r2, r3, #16
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ab8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	031b      	lsls	r3, r3, #12
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007aca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	621a      	str	r2, [r3, #32]
}
 8007ae2:	bf00      	nop
 8007ae4:	371c      	adds	r7, #28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b085      	sub	sp, #20
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	f043 0307 	orr.w	r3, r3, #7
 8007b10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	609a      	str	r2, [r3, #8]
}
 8007b18:	bf00      	nop
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	021a      	lsls	r2, r3, #8
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	431a      	orrs	r2, r3
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	609a      	str	r2, [r3, #8]
}
 8007b58:	bf00      	nop
 8007b5a:	371c      	adds	r7, #28
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e05a      	b.n	8007c32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a21      	ldr	r2, [pc, #132]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d022      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc8:	d01d      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1d      	ldr	r2, [pc, #116]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d018      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a1b      	ldr	r2, [pc, #108]	; (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d013      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a1a      	ldr	r2, [pc, #104]	; (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00e      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a18      	ldr	r2, [pc, #96]	; (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d009      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a17      	ldr	r2, [pc, #92]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d004      	beq.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a15      	ldr	r2, [pc, #84]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d10c      	bne.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	40010000 	.word	0x40010000
 8007c44:	40000400 	.word	0x40000400
 8007c48:	40000800 	.word	0x40000800
 8007c4c:	40000c00 	.word	0x40000c00
 8007c50:	40010400 	.word	0x40010400
 8007c54:	40014000 	.word	0x40014000
 8007c58:	40001800 	.word	0x40001800

08007c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e03f      	b.n	8007d16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d106      	bne.n	8007cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fc fa36 	bl	800411c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2224      	movs	r2, #36	; 0x24
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fe2b 	bl	8008924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695a      	ldr	r2, [r3, #20]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d11d      	bne.n	8007d74 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <HAL_UART_Receive_IT+0x26>
 8007d3e:	88fb      	ldrh	r3, [r7, #6]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e016      	b.n	8007d76 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Receive_IT+0x38>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e00f      	b.n	8007d76 <HAL_UART_Receive_IT+0x58>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d64:	88fb      	ldrh	r3, [r7, #6]
 8007d66:	461a      	mov	r2, r3
 8007d68:	68b9      	ldr	r1, [r7, #8]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fbd9 	bl	8008522 <UART_Start_Receive_IT>
 8007d70:	4603      	mov	r3, r0
 8007d72:	e000      	b.n	8007d76 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007d74:	2302      	movs	r3, #2
  }
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08c      	sub	sp, #48	; 0x30
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	d165      	bne.n	8007e66 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <HAL_UART_Transmit_DMA+0x26>
 8007da0:	88fb      	ldrh	r3, [r7, #6]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e05e      	b.n	8007e68 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <HAL_UART_Transmit_DMA+0x38>
 8007db4:	2302      	movs	r3, #2
 8007db6:	e057      	b.n	8007e68 <HAL_UART_Transmit_DMA+0xe8>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	88fa      	ldrh	r2, [r7, #6]
 8007dca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	88fa      	ldrh	r2, [r7, #6]
 8007dd0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2221      	movs	r2, #33	; 0x21
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de4:	4a22      	ldr	r2, [pc, #136]	; (8007e70 <HAL_UART_Transmit_DMA+0xf0>)
 8007de6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dec:	4a21      	ldr	r2, [pc, #132]	; (8007e74 <HAL_UART_Transmit_DMA+0xf4>)
 8007dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df4:	4a20      	ldr	r2, [pc, #128]	; (8007e78 <HAL_UART_Transmit_DMA+0xf8>)
 8007df6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007e00:	f107 0308 	add.w	r3, r7, #8
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0c:	6819      	ldr	r1, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3304      	adds	r3, #4
 8007e14:	461a      	mov	r2, r3
 8007e16:	88fb      	ldrh	r3, [r7, #6]
 8007e18:	f7fc fe3c 	bl	8004a94 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e24:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3314      	adds	r3, #20
 8007e34:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3314      	adds	r3, #20
 8007e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e4e:	627a      	str	r2, [r7, #36]	; 0x24
 8007e50:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e52:	6a39      	ldr	r1, [r7, #32]
 8007e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1e5      	bne.n	8007e2e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e000      	b.n	8007e68 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007e66:	2302      	movs	r3, #2
  }
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3730      	adds	r7, #48	; 0x30
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	080083d9 	.word	0x080083d9
 8007e74:	08008473 	.word	0x08008473
 8007e78:	0800848f 	.word	0x0800848f

08007e7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b0ba      	sub	sp, #232	; 0xe8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10f      	bne.n	8007ee2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec6:	f003 0320 	and.w	r3, r3, #32
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x66>
 8007ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fc66 	bl	80087ac <UART_Receive_IT>
      return;
 8007ee0:	e256      	b.n	8008390 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 80de 	beq.w	80080a8 <HAL_UART_IRQHandler+0x22c>
 8007eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d106      	bne.n	8007f06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007efc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 80d1 	beq.w	80080a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00b      	beq.n	8007f2a <HAL_UART_IRQHandler+0xae>
 8007f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d005      	beq.n	8007f2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	f043 0201 	orr.w	r2, r3, #1
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2e:	f003 0304 	and.w	r3, r3, #4
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00b      	beq.n	8007f4e <HAL_UART_IRQHandler+0xd2>
 8007f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d005      	beq.n	8007f4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f46:	f043 0202 	orr.w	r2, r3, #2
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00b      	beq.n	8007f72 <HAL_UART_IRQHandler+0xf6>
 8007f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6a:	f043 0204 	orr.w	r2, r3, #4
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f76:	f003 0308 	and.w	r3, r3, #8
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d011      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x126>
 8007f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d105      	bne.n	8007f96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d005      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	f043 0208 	orr.w	r2, r3, #8
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 81ed 	beq.w	8008386 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb0:	f003 0320 	and.w	r3, r3, #32
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d008      	beq.n	8007fca <HAL_UART_IRQHandler+0x14e>
 8007fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fbf1 	bl	80087ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd4:	2b40      	cmp	r3, #64	; 0x40
 8007fd6:	bf0c      	ite	eq
 8007fd8:	2301      	moveq	r3, #1
 8007fda:	2300      	movne	r3, #0
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	f003 0308 	and.w	r3, r3, #8
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <HAL_UART_IRQHandler+0x17a>
 8007fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d04f      	beq.n	8008096 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 faf9 	bl	80085ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008006:	2b40      	cmp	r3, #64	; 0x40
 8008008:	d141      	bne.n	800808e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3314      	adds	r3, #20
 8008010:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008018:	e853 3f00 	ldrex	r3, [r3]
 800801c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008020:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3314      	adds	r3, #20
 8008032:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008036:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800803a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008042:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008046:	e841 2300 	strex	r3, r2, [r1]
 800804a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800804e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1d9      	bne.n	800800a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805a:	2b00      	cmp	r3, #0
 800805c:	d013      	beq.n	8008086 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	4a7d      	ldr	r2, [pc, #500]	; (8008258 <HAL_UART_IRQHandler+0x3dc>)
 8008064:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	4618      	mov	r0, r3
 800806c:	f7fc fdda 	bl	8004c24 <HAL_DMA_Abort_IT>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d016      	beq.n	80080a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008080:	4610      	mov	r0, r2
 8008082:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008084:	e00e      	b.n	80080a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f990 	bl	80083ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800808c:	e00a      	b.n	80080a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f98c 	bl	80083ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008094:	e006      	b.n	80080a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f988 	bl	80083ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80080a2:	e170      	b.n	8008386 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a4:	bf00      	nop
    return;
 80080a6:	e16e      	b.n	8008386 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	f040 814a 	bne.w	8008346 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80080b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b6:	f003 0310 	and.w	r3, r3, #16
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 8143 	beq.w	8008346 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c4:	f003 0310 	and.w	r3, r3, #16
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 813c 	beq.w	8008346 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080ce:	2300      	movs	r3, #0
 80080d0:	60bb      	str	r3, [r7, #8]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	60bb      	str	r3, [r7, #8]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	60bb      	str	r3, [r7, #8]
 80080e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ee:	2b40      	cmp	r3, #64	; 0x40
 80080f0:	f040 80b4 	bne.w	800825c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008100:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 8140 	beq.w	800838a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800810e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008112:	429a      	cmp	r2, r3
 8008114:	f080 8139 	bcs.w	800838a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800811e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812a:	f000 8088 	beq.w	800823e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	330c      	adds	r3, #12
 8008134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008144:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800814c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	330c      	adds	r3, #12
 8008156:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800815a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800815e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008166:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1d9      	bne.n	800812e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3314      	adds	r3, #20
 8008180:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800818a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800818c:	f023 0301 	bic.w	r3, r3, #1
 8008190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3314      	adds	r3, #20
 800819a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800819e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80081a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e1      	bne.n	800817a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3314      	adds	r3, #20
 80081bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3314      	adds	r3, #20
 80081d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081e2:	e841 2300 	strex	r3, r2, [r1]
 80081e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1e3      	bne.n	80081b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	330c      	adds	r3, #12
 8008202:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008206:	e853 3f00 	ldrex	r3, [r3]
 800820a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800820c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800820e:	f023 0310 	bic.w	r3, r3, #16
 8008212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	330c      	adds	r3, #12
 800821c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008220:	65ba      	str	r2, [r7, #88]	; 0x58
 8008222:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008224:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008226:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008228:	e841 2300 	strex	r3, r2, [r1]
 800822c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800822e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1e3      	bne.n	80081fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008238:	4618      	mov	r0, r3
 800823a:	f7fc fc83 	bl	8004b44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008246:	b29b      	uxth	r3, r3
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	b29b      	uxth	r3, r3
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f8b6 	bl	80083c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008254:	e099      	b.n	800838a <HAL_UART_IRQHandler+0x50e>
 8008256:	bf00      	nop
 8008258:	080086b5 	.word	0x080086b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008264:	b29b      	uxth	r3, r3
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008270:	b29b      	uxth	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 808b 	beq.w	800838e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 8086 	beq.w	800838e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	330c      	adds	r3, #12
 8008288:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008294:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008298:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	330c      	adds	r3, #12
 80082a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80082a6:	647a      	str	r2, [r7, #68]	; 0x44
 80082a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e3      	bne.n	8008282 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3314      	adds	r3, #20
 80082c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	e853 3f00 	ldrex	r3, [r3]
 80082c8:	623b      	str	r3, [r7, #32]
   return(result);
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	f023 0301 	bic.w	r3, r3, #1
 80082d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3314      	adds	r3, #20
 80082da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082de:	633a      	str	r2, [r7, #48]	; 0x30
 80082e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e3      	bne.n	80082ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	330c      	adds	r3, #12
 8008306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	e853 3f00 	ldrex	r3, [r3]
 800830e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 0310 	bic.w	r3, r3, #16
 8008316:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	330c      	adds	r3, #12
 8008320:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008324:	61fa      	str	r2, [r7, #28]
 8008326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	69b9      	ldr	r1, [r7, #24]
 800832a:	69fa      	ldr	r2, [r7, #28]
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	617b      	str	r3, [r7, #20]
   return(result);
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e3      	bne.n	8008300 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008338:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f83e 	bl	80083c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008344:	e023      	b.n	800838e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834e:	2b00      	cmp	r3, #0
 8008350:	d009      	beq.n	8008366 <HAL_UART_IRQHandler+0x4ea>
 8008352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f9bc 	bl	80086dc <UART_Transmit_IT>
    return;
 8008364:	e014      	b.n	8008390 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00e      	beq.n	8008390 <HAL_UART_IRQHandler+0x514>
 8008372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837a:	2b00      	cmp	r3, #0
 800837c:	d008      	beq.n	8008390 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f9fc 	bl	800877c <UART_EndTransmit_IT>
    return;
 8008384:	e004      	b.n	8008390 <HAL_UART_IRQHandler+0x514>
    return;
 8008386:	bf00      	nop
 8008388:	e002      	b.n	8008390 <HAL_UART_IRQHandler+0x514>
      return;
 800838a:	bf00      	nop
 800838c:	e000      	b.n	8008390 <HAL_UART_IRQHandler+0x514>
      return;
 800838e:	bf00      	nop
  }
}
 8008390:	37e8      	adds	r7, #232	; 0xe8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop

08008398 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b090      	sub	sp, #64	; 0x40
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d137      	bne.n	8008464 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80083f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f6:	2200      	movs	r2, #0
 80083f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3314      	adds	r3, #20
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	623b      	str	r3, [r7, #32]
   return(result);
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008410:	63bb      	str	r3, [r7, #56]	; 0x38
 8008412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3314      	adds	r3, #20
 8008418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800841a:	633a      	str	r2, [r7, #48]	; 0x30
 800841c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e5      	bne.n	80083fa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800842e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	330c      	adds	r3, #12
 8008434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	60fb      	str	r3, [r7, #12]
   return(result);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008444:	637b      	str	r3, [r7, #52]	; 0x34
 8008446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	330c      	adds	r3, #12
 800844c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800844e:	61fa      	str	r2, [r7, #28]
 8008450:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	69b9      	ldr	r1, [r7, #24]
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	617b      	str	r3, [r7, #20]
   return(result);
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e5      	bne.n	800842e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008462:	e002      	b.n	800846a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008464:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008466:	f7fa f9c5 	bl	80027f4 <HAL_UART_TxCpltCallback>
}
 800846a:	bf00      	nop
 800846c:	3740      	adds	r7, #64	; 0x40
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7ff ff89 	bl	8008398 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008486:	bf00      	nop
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084aa:	2b80      	cmp	r3, #128	; 0x80
 80084ac:	bf0c      	ite	eq
 80084ae:	2301      	moveq	r3, #1
 80084b0:	2300      	movne	r3, #0
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b21      	cmp	r3, #33	; 0x21
 80084c0:	d108      	bne.n	80084d4 <UART_DMAError+0x46>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2200      	movs	r2, #0
 80084cc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80084ce:	68b8      	ldr	r0, [r7, #8]
 80084d0:	f000 f865 	bl	800859e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084de:	2b40      	cmp	r3, #64	; 0x40
 80084e0:	bf0c      	ite	eq
 80084e2:	2301      	moveq	r3, #1
 80084e4:	2300      	movne	r3, #0
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b22      	cmp	r3, #34	; 0x22
 80084f4:	d108      	bne.n	8008508 <UART_DMAError+0x7a>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d005      	beq.n	8008508 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2200      	movs	r2, #0
 8008500:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008502:	68b8      	ldr	r0, [r7, #8]
 8008504:	f000 f873 	bl	80085ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850c:	f043 0210 	orr.w	r2, r3, #16
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008514:	68b8      	ldr	r0, [r7, #8]
 8008516:	f7ff ff49 	bl	80083ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800851a:	bf00      	nop
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	4613      	mov	r3, r2
 800852e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	88fa      	ldrh	r2, [r7, #6]
 800853a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	88fa      	ldrh	r2, [r7, #6]
 8008540:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2222      	movs	r2, #34	; 0x22
 800854c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d007      	beq.n	8008570 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800856e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	695a      	ldr	r2, [r3, #20]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f042 0201 	orr.w	r2, r2, #1
 800857e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0220 	orr.w	r2, r2, #32
 800858e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800859e:	b480      	push	{r7}
 80085a0:	b089      	sub	sp, #36	; 0x24
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	330c      	adds	r3, #12
 80085ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085bc:	61fb      	str	r3, [r7, #28]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	330c      	adds	r3, #12
 80085c4:	69fa      	ldr	r2, [r7, #28]
 80085c6:	61ba      	str	r2, [r7, #24]
 80085c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	6979      	ldr	r1, [r7, #20]
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	613b      	str	r3, [r7, #16]
   return(result);
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e5      	bne.n	80085a6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2220      	movs	r2, #32
 80085de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80085e2:	bf00      	nop
 80085e4:	3724      	adds	r7, #36	; 0x24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b095      	sub	sp, #84	; 0x54
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	330c      	adds	r3, #12
 80085fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800860c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	330c      	adds	r3, #12
 8008614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008616:	643a      	str	r2, [r7, #64]	; 0x40
 8008618:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800861c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e5      	bne.n	80085f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3314      	adds	r3, #20
 8008630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	61fb      	str	r3, [r7, #28]
   return(result);
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	f023 0301 	bic.w	r3, r3, #1
 8008640:	64bb      	str	r3, [r7, #72]	; 0x48
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3314      	adds	r3, #20
 8008648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800864a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e5      	bne.n	800862a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008662:	2b01      	cmp	r3, #1
 8008664:	d119      	bne.n	800869a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	330c      	adds	r3, #12
 800866c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	60bb      	str	r3, [r7, #8]
   return(result);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f023 0310 	bic.w	r3, r3, #16
 800867c:	647b      	str	r3, [r7, #68]	; 0x44
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	330c      	adds	r3, #12
 8008684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008686:	61ba      	str	r2, [r7, #24]
 8008688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	6979      	ldr	r1, [r7, #20]
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	613b      	str	r3, [r7, #16]
   return(result);
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e5      	bne.n	8008666 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2220      	movs	r2, #32
 800869e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80086a8:	bf00      	nop
 80086aa:	3754      	adds	r7, #84	; 0x54
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7ff fe6c 	bl	80083ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b21      	cmp	r3, #33	; 0x21
 80086ee:	d13e      	bne.n	800876e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f8:	d114      	bne.n	8008724 <UART_Transmit_IT+0x48>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d110      	bne.n	8008724 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	881b      	ldrh	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008716:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a1b      	ldr	r3, [r3, #32]
 800871c:	1c9a      	adds	r2, r3, #2
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	621a      	str	r2, [r3, #32]
 8008722:	e008      	b.n	8008736 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	1c59      	adds	r1, r3, #1
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	6211      	str	r1, [r2, #32]
 800872e:	781a      	ldrb	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800873a:	b29b      	uxth	r3, r3
 800873c:	3b01      	subs	r3, #1
 800873e:	b29b      	uxth	r3, r3
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	4619      	mov	r1, r3
 8008744:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10f      	bne.n	800876a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68da      	ldr	r2, [r3, #12]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008758:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68da      	ldr	r2, [r3, #12]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008768:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	e000      	b.n	8008770 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800876e:	2302      	movs	r3, #2
  }
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008792:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7fa f829 	bl	80027f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08c      	sub	sp, #48	; 0x30
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b22      	cmp	r3, #34	; 0x22
 80087be:	f040 80ab 	bne.w	8008918 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ca:	d117      	bne.n	80087fc <UART_Receive_IT+0x50>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d113      	bne.n	80087fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80087d4:	2300      	movs	r3, #0
 80087d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087dc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f4:	1c9a      	adds	r2, r3, #2
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	629a      	str	r2, [r3, #40]	; 0x28
 80087fa:	e026      	b.n	800884a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008800:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880e:	d007      	beq.n	8008820 <UART_Receive_IT+0x74>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10a      	bne.n	800882e <UART_Receive_IT+0x82>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d106      	bne.n	800882e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882a:	701a      	strb	r2, [r3, #0]
 800882c:	e008      	b.n	8008840 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	b2db      	uxtb	r3, r3
 8008836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800883a:	b2da      	uxtb	r2, r3
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008844:	1c5a      	adds	r2, r3, #1
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800884e:	b29b      	uxth	r3, r3
 8008850:	3b01      	subs	r3, #1
 8008852:	b29b      	uxth	r3, r3
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	4619      	mov	r1, r3
 8008858:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800885a:	2b00      	cmp	r3, #0
 800885c:	d15a      	bne.n	8008914 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68da      	ldr	r2, [r3, #12]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f022 0220 	bic.w	r2, r2, #32
 800886c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68da      	ldr	r2, [r3, #12]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800887c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	695a      	ldr	r2, [r3, #20]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0201 	bic.w	r2, r2, #1
 800888c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2220      	movs	r2, #32
 8008892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	2b01      	cmp	r3, #1
 800889c:	d135      	bne.n	800890a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	330c      	adds	r3, #12
 80088aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	e853 3f00 	ldrex	r3, [r3]
 80088b2:	613b      	str	r3, [r7, #16]
   return(result);
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	f023 0310 	bic.w	r3, r3, #16
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	330c      	adds	r3, #12
 80088c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c4:	623a      	str	r2, [r7, #32]
 80088c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c8:	69f9      	ldr	r1, [r7, #28]
 80088ca:	6a3a      	ldr	r2, [r7, #32]
 80088cc:	e841 2300 	strex	r3, r2, [r1]
 80088d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e5      	bne.n	80088a4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b10      	cmp	r3, #16
 80088e4:	d10a      	bne.n	80088fc <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008900:	4619      	mov	r1, r3
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7ff fd5c 	bl	80083c0 <HAL_UARTEx_RxEventCallback>
 8008908:	e002      	b.n	8008910 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7f9 fcd4 	bl	80022b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	e002      	b.n	800891a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	e000      	b.n	800891a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008918:	2302      	movs	r3, #2
  }
}
 800891a:	4618      	mov	r0, r3
 800891c:	3730      	adds	r7, #48	; 0x30
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008928:	b0c0      	sub	sp, #256	; 0x100
 800892a:	af00      	add	r7, sp, #0
 800892c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800893c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008940:	68d9      	ldr	r1, [r3, #12]
 8008942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	ea40 0301 	orr.w	r3, r0, r1
 800894c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800894e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	431a      	orrs	r2, r3
 800895c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	431a      	orrs	r2, r3
 8008964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	4313      	orrs	r3, r2
 800896c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800897c:	f021 010c 	bic.w	r1, r1, #12
 8008980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800898a:	430b      	orrs	r3, r1
 800898c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800898e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800899a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800899e:	6999      	ldr	r1, [r3, #24]
 80089a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	ea40 0301 	orr.w	r3, r0, r1
 80089aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4b8f      	ldr	r3, [pc, #572]	; (8008bf0 <UART_SetConfig+0x2cc>)
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d005      	beq.n	80089c4 <UART_SetConfig+0xa0>
 80089b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	4b8d      	ldr	r3, [pc, #564]	; (8008bf4 <UART_SetConfig+0x2d0>)
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d104      	bne.n	80089ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80089c4:	f7fd fbc6 	bl	8006154 <HAL_RCC_GetPCLK2Freq>
 80089c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80089cc:	e003      	b.n	80089d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089ce:	f7fd fbad 	bl	800612c <HAL_RCC_GetPCLK1Freq>
 80089d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089e0:	f040 810c 	bne.w	8008bfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089e8:	2200      	movs	r2, #0
 80089ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80089ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80089f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80089f6:	4622      	mov	r2, r4
 80089f8:	462b      	mov	r3, r5
 80089fa:	1891      	adds	r1, r2, r2
 80089fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80089fe:	415b      	adcs	r3, r3
 8008a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a06:	4621      	mov	r1, r4
 8008a08:	eb12 0801 	adds.w	r8, r2, r1
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	eb43 0901 	adc.w	r9, r3, r1
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	f04f 0300 	mov.w	r3, #0
 8008a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a26:	4690      	mov	r8, r2
 8008a28:	4699      	mov	r9, r3
 8008a2a:	4623      	mov	r3, r4
 8008a2c:	eb18 0303 	adds.w	r3, r8, r3
 8008a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a34:	462b      	mov	r3, r5
 8008a36:	eb49 0303 	adc.w	r3, r9, r3
 8008a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008a4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008a52:	460b      	mov	r3, r1
 8008a54:	18db      	adds	r3, r3, r3
 8008a56:	653b      	str	r3, [r7, #80]	; 0x50
 8008a58:	4613      	mov	r3, r2
 8008a5a:	eb42 0303 	adc.w	r3, r2, r3
 8008a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8008a60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008a68:	f7f7 ff60 	bl	800092c <__aeabi_uldivmod>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4b61      	ldr	r3, [pc, #388]	; (8008bf8 <UART_SetConfig+0x2d4>)
 8008a72:	fba3 2302 	umull	r2, r3, r3, r2
 8008a76:	095b      	lsrs	r3, r3, #5
 8008a78:	011c      	lsls	r4, r3, #4
 8008a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008a88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	464b      	mov	r3, r9
 8008a90:	1891      	adds	r1, r2, r2
 8008a92:	64b9      	str	r1, [r7, #72]	; 0x48
 8008a94:	415b      	adcs	r3, r3
 8008a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a9c:	4641      	mov	r1, r8
 8008a9e:	eb12 0a01 	adds.w	sl, r2, r1
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	eb43 0b01 	adc.w	fp, r3, r1
 8008aa8:	f04f 0200 	mov.w	r2, #0
 8008aac:	f04f 0300 	mov.w	r3, #0
 8008ab0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ab4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008abc:	4692      	mov	sl, r2
 8008abe:	469b      	mov	fp, r3
 8008ac0:	4643      	mov	r3, r8
 8008ac2:	eb1a 0303 	adds.w	r3, sl, r3
 8008ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008aca:	464b      	mov	r3, r9
 8008acc:	eb4b 0303 	adc.w	r3, fp, r3
 8008ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ae0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ae4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	18db      	adds	r3, r3, r3
 8008aec:	643b      	str	r3, [r7, #64]	; 0x40
 8008aee:	4613      	mov	r3, r2
 8008af0:	eb42 0303 	adc.w	r3, r2, r3
 8008af4:	647b      	str	r3, [r7, #68]	; 0x44
 8008af6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008afa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008afe:	f7f7 ff15 	bl	800092c <__aeabi_uldivmod>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	4611      	mov	r1, r2
 8008b08:	4b3b      	ldr	r3, [pc, #236]	; (8008bf8 <UART_SetConfig+0x2d4>)
 8008b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8008b0e:	095b      	lsrs	r3, r3, #5
 8008b10:	2264      	movs	r2, #100	; 0x64
 8008b12:	fb02 f303 	mul.w	r3, r2, r3
 8008b16:	1acb      	subs	r3, r1, r3
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b1e:	4b36      	ldr	r3, [pc, #216]	; (8008bf8 <UART_SetConfig+0x2d4>)
 8008b20:	fba3 2302 	umull	r2, r3, r3, r2
 8008b24:	095b      	lsrs	r3, r3, #5
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b2c:	441c      	add	r4, r3
 8008b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008b40:	4642      	mov	r2, r8
 8008b42:	464b      	mov	r3, r9
 8008b44:	1891      	adds	r1, r2, r2
 8008b46:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b48:	415b      	adcs	r3, r3
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b50:	4641      	mov	r1, r8
 8008b52:	1851      	adds	r1, r2, r1
 8008b54:	6339      	str	r1, [r7, #48]	; 0x30
 8008b56:	4649      	mov	r1, r9
 8008b58:	414b      	adcs	r3, r1
 8008b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b5c:	f04f 0200 	mov.w	r2, #0
 8008b60:	f04f 0300 	mov.w	r3, #0
 8008b64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008b68:	4659      	mov	r1, fp
 8008b6a:	00cb      	lsls	r3, r1, #3
 8008b6c:	4651      	mov	r1, sl
 8008b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b72:	4651      	mov	r1, sl
 8008b74:	00ca      	lsls	r2, r1, #3
 8008b76:	4610      	mov	r0, r2
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	4642      	mov	r2, r8
 8008b7e:	189b      	adds	r3, r3, r2
 8008b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b84:	464b      	mov	r3, r9
 8008b86:	460a      	mov	r2, r1
 8008b88:	eb42 0303 	adc.w	r3, r2, r3
 8008b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	18db      	adds	r3, r3, r3
 8008ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008baa:	4613      	mov	r3, r2
 8008bac:	eb42 0303 	adc.w	r3, r2, r3
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008bba:	f7f7 feb7 	bl	800092c <__aeabi_uldivmod>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4b0d      	ldr	r3, [pc, #52]	; (8008bf8 <UART_SetConfig+0x2d4>)
 8008bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8008bc8:	095b      	lsrs	r3, r3, #5
 8008bca:	2164      	movs	r1, #100	; 0x64
 8008bcc:	fb01 f303 	mul.w	r3, r1, r3
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	3332      	adds	r3, #50	; 0x32
 8008bd6:	4a08      	ldr	r2, [pc, #32]	; (8008bf8 <UART_SetConfig+0x2d4>)
 8008bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bdc:	095b      	lsrs	r3, r3, #5
 8008bde:	f003 0207 	and.w	r2, r3, #7
 8008be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4422      	add	r2, r4
 8008bea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008bec:	e105      	b.n	8008dfa <UART_SetConfig+0x4d6>
 8008bee:	bf00      	nop
 8008bf0:	40011000 	.word	0x40011000
 8008bf4:	40011400 	.word	0x40011400
 8008bf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c00:	2200      	movs	r2, #0
 8008c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c0e:	4642      	mov	r2, r8
 8008c10:	464b      	mov	r3, r9
 8008c12:	1891      	adds	r1, r2, r2
 8008c14:	6239      	str	r1, [r7, #32]
 8008c16:	415b      	adcs	r3, r3
 8008c18:	627b      	str	r3, [r7, #36]	; 0x24
 8008c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c1e:	4641      	mov	r1, r8
 8008c20:	1854      	adds	r4, r2, r1
 8008c22:	4649      	mov	r1, r9
 8008c24:	eb43 0501 	adc.w	r5, r3, r1
 8008c28:	f04f 0200 	mov.w	r2, #0
 8008c2c:	f04f 0300 	mov.w	r3, #0
 8008c30:	00eb      	lsls	r3, r5, #3
 8008c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c36:	00e2      	lsls	r2, r4, #3
 8008c38:	4614      	mov	r4, r2
 8008c3a:	461d      	mov	r5, r3
 8008c3c:	4643      	mov	r3, r8
 8008c3e:	18e3      	adds	r3, r4, r3
 8008c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c44:	464b      	mov	r3, r9
 8008c46:	eb45 0303 	adc.w	r3, r5, r3
 8008c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c5e:	f04f 0200 	mov.w	r2, #0
 8008c62:	f04f 0300 	mov.w	r3, #0
 8008c66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	008b      	lsls	r3, r1, #2
 8008c6e:	4621      	mov	r1, r4
 8008c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c74:	4621      	mov	r1, r4
 8008c76:	008a      	lsls	r2, r1, #2
 8008c78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008c7c:	f7f7 fe56 	bl	800092c <__aeabi_uldivmod>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4b60      	ldr	r3, [pc, #384]	; (8008e08 <UART_SetConfig+0x4e4>)
 8008c86:	fba3 2302 	umull	r2, r3, r3, r2
 8008c8a:	095b      	lsrs	r3, r3, #5
 8008c8c:	011c      	lsls	r4, r3, #4
 8008c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008c9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ca0:	4642      	mov	r2, r8
 8008ca2:	464b      	mov	r3, r9
 8008ca4:	1891      	adds	r1, r2, r2
 8008ca6:	61b9      	str	r1, [r7, #24]
 8008ca8:	415b      	adcs	r3, r3
 8008caa:	61fb      	str	r3, [r7, #28]
 8008cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cb0:	4641      	mov	r1, r8
 8008cb2:	1851      	adds	r1, r2, r1
 8008cb4:	6139      	str	r1, [r7, #16]
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	414b      	adcs	r3, r1
 8008cba:	617b      	str	r3, [r7, #20]
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	f04f 0300 	mov.w	r3, #0
 8008cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008cc8:	4659      	mov	r1, fp
 8008cca:	00cb      	lsls	r3, r1, #3
 8008ccc:	4651      	mov	r1, sl
 8008cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cd2:	4651      	mov	r1, sl
 8008cd4:	00ca      	lsls	r2, r1, #3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	4619      	mov	r1, r3
 8008cda:	4603      	mov	r3, r0
 8008cdc:	4642      	mov	r2, r8
 8008cde:	189b      	adds	r3, r3, r2
 8008ce0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	460a      	mov	r2, r1
 8008ce8:	eb42 0303 	adc.w	r3, r2, r3
 8008cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008cfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008cfc:	f04f 0200 	mov.w	r2, #0
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d08:	4649      	mov	r1, r9
 8008d0a:	008b      	lsls	r3, r1, #2
 8008d0c:	4641      	mov	r1, r8
 8008d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d12:	4641      	mov	r1, r8
 8008d14:	008a      	lsls	r2, r1, #2
 8008d16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d1a:	f7f7 fe07 	bl	800092c <__aeabi_uldivmod>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4b39      	ldr	r3, [pc, #228]	; (8008e08 <UART_SetConfig+0x4e4>)
 8008d24:	fba3 1302 	umull	r1, r3, r3, r2
 8008d28:	095b      	lsrs	r3, r3, #5
 8008d2a:	2164      	movs	r1, #100	; 0x64
 8008d2c:	fb01 f303 	mul.w	r3, r1, r3
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	011b      	lsls	r3, r3, #4
 8008d34:	3332      	adds	r3, #50	; 0x32
 8008d36:	4a34      	ldr	r2, [pc, #208]	; (8008e08 <UART_SetConfig+0x4e4>)
 8008d38:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3c:	095b      	lsrs	r3, r3, #5
 8008d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d42:	441c      	add	r4, r3
 8008d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d48:	2200      	movs	r2, #0
 8008d4a:	673b      	str	r3, [r7, #112]	; 0x70
 8008d4c:	677a      	str	r2, [r7, #116]	; 0x74
 8008d4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008d52:	4642      	mov	r2, r8
 8008d54:	464b      	mov	r3, r9
 8008d56:	1891      	adds	r1, r2, r2
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	415b      	adcs	r3, r3
 8008d5c:	60fb      	str	r3, [r7, #12]
 8008d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d62:	4641      	mov	r1, r8
 8008d64:	1851      	adds	r1, r2, r1
 8008d66:	6039      	str	r1, [r7, #0]
 8008d68:	4649      	mov	r1, r9
 8008d6a:	414b      	adcs	r3, r1
 8008d6c:	607b      	str	r3, [r7, #4]
 8008d6e:	f04f 0200 	mov.w	r2, #0
 8008d72:	f04f 0300 	mov.w	r3, #0
 8008d76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d7a:	4659      	mov	r1, fp
 8008d7c:	00cb      	lsls	r3, r1, #3
 8008d7e:	4651      	mov	r1, sl
 8008d80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d84:	4651      	mov	r1, sl
 8008d86:	00ca      	lsls	r2, r1, #3
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	4642      	mov	r2, r8
 8008d90:	189b      	adds	r3, r3, r2
 8008d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d94:	464b      	mov	r3, r9
 8008d96:	460a      	mov	r2, r1
 8008d98:	eb42 0303 	adc.w	r3, r2, r3
 8008d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	663b      	str	r3, [r7, #96]	; 0x60
 8008da8:	667a      	str	r2, [r7, #100]	; 0x64
 8008daa:	f04f 0200 	mov.w	r2, #0
 8008dae:	f04f 0300 	mov.w	r3, #0
 8008db2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008db6:	4649      	mov	r1, r9
 8008db8:	008b      	lsls	r3, r1, #2
 8008dba:	4641      	mov	r1, r8
 8008dbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dc0:	4641      	mov	r1, r8
 8008dc2:	008a      	lsls	r2, r1, #2
 8008dc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008dc8:	f7f7 fdb0 	bl	800092c <__aeabi_uldivmod>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4b0d      	ldr	r3, [pc, #52]	; (8008e08 <UART_SetConfig+0x4e4>)
 8008dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8008dd6:	095b      	lsrs	r3, r3, #5
 8008dd8:	2164      	movs	r1, #100	; 0x64
 8008dda:	fb01 f303 	mul.w	r3, r1, r3
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	3332      	adds	r3, #50	; 0x32
 8008de4:	4a08      	ldr	r2, [pc, #32]	; (8008e08 <UART_SetConfig+0x4e4>)
 8008de6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dea:	095b      	lsrs	r3, r3, #5
 8008dec:	f003 020f 	and.w	r2, r3, #15
 8008df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4422      	add	r2, r4
 8008df8:	609a      	str	r2, [r3, #8]
}
 8008dfa:	bf00      	nop
 8008dfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e00:	46bd      	mov	sp, r7
 8008e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e06:	bf00      	nop
 8008e08:	51eb851f 	.word	0x51eb851f

08008e0c <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b10      	cmp	r3, #16
 8008e1c:	d11c      	bne.n	8008e58 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	4b1f      	ldr	r3, [pc, #124]	; (8008ea0 <FSMC_NAND_Init+0x94>)
 8008e24:	4013      	ands	r3, r2
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	6851      	ldr	r1, [r2, #4]
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	6892      	ldr	r2, [r2, #8]
 8008e2e:	4311      	orrs	r1, r2
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	68d2      	ldr	r2, [r2, #12]
 8008e34:	4311      	orrs	r1, r2
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	6912      	ldr	r2, [r2, #16]
 8008e3a:	4311      	orrs	r1, r2
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	6952      	ldr	r2, [r2, #20]
 8008e40:	0252      	lsls	r2, r2, #9
 8008e42:	4311      	orrs	r1, r2
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	6992      	ldr	r2, [r2, #24]
 8008e48:	0352      	lsls	r2, r2, #13
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	f043 0208 	orr.w	r2, r3, #8
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	e01b      	b.n	8008e90 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a1a      	ldr	r2, [r3, #32]
 8008e5c:	4b10      	ldr	r3, [pc, #64]	; (8008ea0 <FSMC_NAND_Init+0x94>)
 8008e5e:	4013      	ands	r3, r2
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	6851      	ldr	r1, [r2, #4]
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	6892      	ldr	r2, [r2, #8]
 8008e68:	4311      	orrs	r1, r2
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	68d2      	ldr	r2, [r2, #12]
 8008e6e:	4311      	orrs	r1, r2
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	6912      	ldr	r2, [r2, #16]
 8008e74:	4311      	orrs	r1, r2
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	6952      	ldr	r2, [r2, #20]
 8008e7a:	0252      	lsls	r2, r2, #9
 8008e7c:	4311      	orrs	r1, r2
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	6992      	ldr	r2, [r2, #24]
 8008e82:	0352      	lsls	r2, r2, #13
 8008e84:	430a      	orrs	r2, r1
 8008e86:	4313      	orrs	r3, r2
 8008e88:	f043 0208 	orr.w	r2, r3, #8
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	fff00181 	.word	0xfff00181

08008ea4 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b10      	cmp	r3, #16
 8008eb4:	d112      	bne.n	8008edc <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	021b      	lsls	r3, r3, #8
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	041b      	lsls	r3, r3, #16
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	061b      	lsls	r3, r3, #24
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	609a      	str	r2, [r3, #8]
 8008eda:	e011      	b.n	8008f00 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	021b      	lsls	r3, r3, #8
 8008eea:	431a      	orrs	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	041b      	lsls	r3, r3, #16
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	061b      	lsls	r3, r3, #24
 8008efa:	431a      	orrs	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b085      	sub	sp, #20
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b10      	cmp	r3, #16
 8008f1e:	d112      	bne.n	8008f46 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	021b      	lsls	r3, r3, #8
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	041b      	lsls	r3, r3, #16
 8008f36:	431a      	orrs	r2, r3
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	061b      	lsls	r3, r3, #24
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	60da      	str	r2, [r3, #12]
 8008f44:	e011      	b.n	8008f6a <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	021b      	lsls	r3, r3, #8
 8008f54:	431a      	orrs	r2, r3
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	041b      	lsls	r3, r3, #16
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	061b      	lsls	r3, r3, #24
 8008f64:	431a      	orrs	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NAND_DEVICE(Device));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Disable ECC feature */
  if (Bank == FSMC_NAND_BANK2)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	2b10      	cmp	r3, #16
 8008f86:	d106      	bne.n	8008f96 <FSMC_NAND_ECC_Disable+0x1e>
  {
    CLEAR_BIT(Device->PCR2, FSMC_PCR2_ECCEN);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	e005      	b.n	8008fa2 <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    CLEAR_BIT(Device->PCR3, FSMC_PCR2_ECCEN);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	621a      	str	r2, [r3, #32]
  }

  return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <__NVIC_SetPriority>:
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	6039      	str	r1, [r7, #0]
 8008fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	db0a      	blt.n	8008fda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	490c      	ldr	r1, [pc, #48]	; (8008ffc <__NVIC_SetPriority+0x4c>)
 8008fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fce:	0112      	lsls	r2, r2, #4
 8008fd0:	b2d2      	uxtb	r2, r2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008fd8:	e00a      	b.n	8008ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	4908      	ldr	r1, [pc, #32]	; (8009000 <__NVIC_SetPriority+0x50>)
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	f003 030f 	and.w	r3, r3, #15
 8008fe6:	3b04      	subs	r3, #4
 8008fe8:	0112      	lsls	r2, r2, #4
 8008fea:	b2d2      	uxtb	r2, r2
 8008fec:	440b      	add	r3, r1
 8008fee:	761a      	strb	r2, [r3, #24]
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	e000e100 	.word	0xe000e100
 8009000:	e000ed00 	.word	0xe000ed00

08009004 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009004:	b580      	push	{r7, lr}
 8009006:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009008:	4b05      	ldr	r3, [pc, #20]	; (8009020 <SysTick_Handler+0x1c>)
 800900a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800900c:	f002 f856 	bl	800b0bc <xTaskGetSchedulerState>
 8009010:	4603      	mov	r3, r0
 8009012:	2b01      	cmp	r3, #1
 8009014:	d001      	beq.n	800901a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009016:	f002 fe3f 	bl	800bc98 <xPortSysTickHandler>
  }
}
 800901a:	bf00      	nop
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	e000e010 	.word	0xe000e010

08009024 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009028:	2100      	movs	r1, #0
 800902a:	f06f 0004 	mvn.w	r0, #4
 800902e:	f7ff ffbf 	bl	8008fb0 <__NVIC_SetPriority>
#endif
}
 8009032:	bf00      	nop
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800903e:	f3ef 8305 	mrs	r3, IPSR
 8009042:	603b      	str	r3, [r7, #0]
  return(result);
 8009044:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009046:	2b00      	cmp	r3, #0
 8009048:	d003      	beq.n	8009052 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800904a:	f06f 0305 	mvn.w	r3, #5
 800904e:	607b      	str	r3, [r7, #4]
 8009050:	e00f      	b.n	8009072 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009052:	4b0a      	ldr	r3, [pc, #40]	; (800907c <osKernelInitialize+0x44>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d108      	bne.n	800906c <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800905a:	4809      	ldr	r0, [pc, #36]	; (8009080 <osKernelInitialize+0x48>)
 800905c:	f003 f818 	bl	800c090 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8009060:	4b06      	ldr	r3, [pc, #24]	; (800907c <osKernelInitialize+0x44>)
 8009062:	2201      	movs	r2, #1
 8009064:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009066:	2300      	movs	r3, #0
 8009068:	607b      	str	r3, [r7, #4]
 800906a:	e002      	b.n	8009072 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800906c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009070:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009072:	687b      	ldr	r3, [r7, #4]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	20001c84 	.word	0x20001c84
 8009080:	200000a4 	.word	0x200000a4

08009084 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800908a:	f3ef 8305 	mrs	r3, IPSR
 800908e:	603b      	str	r3, [r7, #0]
  return(result);
 8009090:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009092:	2b00      	cmp	r3, #0
 8009094:	d003      	beq.n	800909e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009096:	f06f 0305 	mvn.w	r3, #5
 800909a:	607b      	str	r3, [r7, #4]
 800909c:	e010      	b.n	80090c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800909e:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <osKernelStart+0x48>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d109      	bne.n	80090ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80090a6:	f7ff ffbd 	bl	8009024 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80090aa:	4b08      	ldr	r3, [pc, #32]	; (80090cc <osKernelStart+0x48>)
 80090ac:	2202      	movs	r2, #2
 80090ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80090b0:	f001 fba8 	bl	800a804 <vTaskStartScheduler>
      stat = osOK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	607b      	str	r3, [r7, #4]
 80090b8:	e002      	b.n	80090c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80090ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80090c0:	687b      	ldr	r3, [r7, #4]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20001c84 	.word	0x20001c84

080090d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08e      	sub	sp, #56	; 0x38
 80090d4:	af04      	add	r7, sp, #16
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80090dc:	2300      	movs	r3, #0
 80090de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090e0:	f3ef 8305 	mrs	r3, IPSR
 80090e4:	617b      	str	r3, [r7, #20]
  return(result);
 80090e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d17e      	bne.n	80091ea <osThreadNew+0x11a>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d07b      	beq.n	80091ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80090f2:	2380      	movs	r3, #128	; 0x80
 80090f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80090f6:	2318      	movs	r3, #24
 80090f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80090fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009102:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d045      	beq.n	8009196 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <osThreadNew+0x48>
        name = attr->name;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d008      	beq.n	800913e <osThreadNew+0x6e>
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	2b38      	cmp	r3, #56	; 0x38
 8009130:	d805      	bhi.n	800913e <osThreadNew+0x6e>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <osThreadNew+0x72>
        return (NULL);
 800913e:	2300      	movs	r3, #0
 8009140:	e054      	b.n	80091ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	089b      	lsrs	r3, r3, #2
 8009150:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00e      	beq.n	8009178 <osThreadNew+0xa8>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	2bbb      	cmp	r3, #187	; 0xbb
 8009160:	d90a      	bls.n	8009178 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009166:	2b00      	cmp	r3, #0
 8009168:	d006      	beq.n	8009178 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <osThreadNew+0xa8>
        mem = 1;
 8009172:	2301      	movs	r3, #1
 8009174:	61bb      	str	r3, [r7, #24]
 8009176:	e010      	b.n	800919a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10c      	bne.n	800919a <osThreadNew+0xca>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d108      	bne.n	800919a <osThreadNew+0xca>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d104      	bne.n	800919a <osThreadNew+0xca>
          mem = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	61bb      	str	r3, [r7, #24]
 8009194:	e001      	b.n	800919a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d110      	bne.n	80091c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80091a8:	9202      	str	r2, [sp, #8]
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	6a3a      	ldr	r2, [r7, #32]
 80091b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f001 f938 	bl	800a42c <xTaskCreateStatic>
 80091bc:	4603      	mov	r3, r0
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	e013      	b.n	80091ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d110      	bne.n	80091ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	f107 0310 	add.w	r3, r7, #16
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f001 f983 	bl	800a4e6 <xTaskCreate>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d001      	beq.n	80091ea <osThreadNew+0x11a>
            hTask = NULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80091ea:	693b      	ldr	r3, [r7, #16]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3728      	adds	r7, #40	; 0x28
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091fc:	f3ef 8305 	mrs	r3, IPSR
 8009200:	60bb      	str	r3, [r7, #8]
  return(result);
 8009202:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009204:	2b00      	cmp	r3, #0
 8009206:	d003      	beq.n	8009210 <osDelay+0x1c>
    stat = osErrorISR;
 8009208:	f06f 0305 	mvn.w	r3, #5
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	e007      	b.n	8009220 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009210:	2300      	movs	r3, #0
 8009212:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <osDelay+0x2c>
      vTaskDelay(ticks);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 fabe 	bl	800a79c <vTaskDelay>
    }
  }

  return (stat);
 8009220:	68fb      	ldr	r3, [r7, #12]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800922a:	b580      	push	{r7, lr}
 800922c:	b08a      	sub	sp, #40	; 0x28
 800922e:	af02      	add	r7, sp, #8
 8009230:	60f8      	str	r0, [r7, #12]
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009236:	2300      	movs	r3, #0
 8009238:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800923a:	f3ef 8305 	mrs	r3, IPSR
 800923e:	613b      	str	r3, [r7, #16]
  return(result);
 8009240:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009242:	2b00      	cmp	r3, #0
 8009244:	d175      	bne.n	8009332 <osSemaphoreNew+0x108>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d072      	beq.n	8009332 <osSemaphoreNew+0x108>
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	429a      	cmp	r2, r3
 8009252:	d86e      	bhi.n	8009332 <osSemaphoreNew+0x108>
    mem = -1;
 8009254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009258:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d015      	beq.n	800928c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d006      	beq.n	8009276 <osSemaphoreNew+0x4c>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	2b4f      	cmp	r3, #79	; 0x4f
 800926e:	d902      	bls.n	8009276 <osSemaphoreNew+0x4c>
        mem = 1;
 8009270:	2301      	movs	r3, #1
 8009272:	61bb      	str	r3, [r7, #24]
 8009274:	e00c      	b.n	8009290 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d108      	bne.n	8009290 <osSemaphoreNew+0x66>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d104      	bne.n	8009290 <osSemaphoreNew+0x66>
          mem = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	61bb      	str	r3, [r7, #24]
 800928a:	e001      	b.n	8009290 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800928c:	2300      	movs	r3, #0
 800928e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009296:	d04c      	beq.n	8009332 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d128      	bne.n	80092f0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d10a      	bne.n	80092ba <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	2203      	movs	r2, #3
 80092aa:	9200      	str	r2, [sp, #0]
 80092ac:	2200      	movs	r2, #0
 80092ae:	2100      	movs	r1, #0
 80092b0:	2001      	movs	r0, #1
 80092b2:	f000 fac5 	bl	8009840 <xQueueGenericCreateStatic>
 80092b6:	61f8      	str	r0, [r7, #28]
 80092b8:	e005      	b.n	80092c6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80092ba:	2203      	movs	r2, #3
 80092bc:	2100      	movs	r1, #0
 80092be:	2001      	movs	r0, #1
 80092c0:	f000 fb36 	bl	8009930 <xQueueGenericCreate>
 80092c4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d022      	beq.n	8009312 <osSemaphoreNew+0xe8>
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d01f      	beq.n	8009312 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80092d2:	2300      	movs	r3, #0
 80092d4:	2200      	movs	r2, #0
 80092d6:	2100      	movs	r1, #0
 80092d8:	69f8      	ldr	r0, [r7, #28]
 80092da:	f000 fbf1 	bl	8009ac0 <xQueueGenericSend>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d016      	beq.n	8009312 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80092e4:	69f8      	ldr	r0, [r7, #28]
 80092e6:	f000 fee5 	bl	800a0b4 <vQueueDelete>
            hSemaphore = NULL;
 80092ea:	2300      	movs	r3, #0
 80092ec:	61fb      	str	r3, [r7, #28]
 80092ee:	e010      	b.n	8009312 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d108      	bne.n	8009308 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	461a      	mov	r2, r3
 80092fc:	68b9      	ldr	r1, [r7, #8]
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 fb73 	bl	80099ea <xQueueCreateCountingSemaphoreStatic>
 8009304:	61f8      	str	r0, [r7, #28]
 8009306:	e004      	b.n	8009312 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009308:	68b9      	ldr	r1, [r7, #8]
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 fba4 	bl	8009a58 <xQueueCreateCountingSemaphore>
 8009310:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00c      	beq.n	8009332 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <osSemaphoreNew+0xfc>
          name = attr->name;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	e001      	b.n	800932a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009326:	2300      	movs	r3, #0
 8009328:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800932a:	6979      	ldr	r1, [r7, #20]
 800932c:	69f8      	ldr	r0, [r7, #28]
 800932e:	f000 fff5 	bl	800a31c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009332:	69fb      	ldr	r3, [r7, #28]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3720      	adds	r7, #32
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800933c:	b580      	push	{r7, lr}
 800933e:	b08a      	sub	sp, #40	; 0x28
 8009340:	af02      	add	r7, sp, #8
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009348:	2300      	movs	r3, #0
 800934a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800934c:	f3ef 8305 	mrs	r3, IPSR
 8009350:	613b      	str	r3, [r7, #16]
  return(result);
 8009352:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009354:	2b00      	cmp	r3, #0
 8009356:	d15f      	bne.n	8009418 <osMessageQueueNew+0xdc>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d05c      	beq.n	8009418 <osMessageQueueNew+0xdc>
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d059      	beq.n	8009418 <osMessageQueueNew+0xdc>
    mem = -1;
 8009364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009368:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d029      	beq.n	80093c4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d012      	beq.n	800939e <osMessageQueueNew+0x62>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	2b4f      	cmp	r3, #79	; 0x4f
 800937e:	d90e      	bls.n	800939e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00a      	beq.n	800939e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	695a      	ldr	r2, [r3, #20]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	68b9      	ldr	r1, [r7, #8]
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	429a      	cmp	r2, r3
 8009396:	d302      	bcc.n	800939e <osMessageQueueNew+0x62>
        mem = 1;
 8009398:	2301      	movs	r3, #1
 800939a:	61bb      	str	r3, [r7, #24]
 800939c:	e014      	b.n	80093c8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d110      	bne.n	80093c8 <osMessageQueueNew+0x8c>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10c      	bne.n	80093c8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d108      	bne.n	80093c8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <osMessageQueueNew+0x8c>
          mem = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	61bb      	str	r3, [r7, #24]
 80093c2:	e001      	b.n	80093c8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d10b      	bne.n	80093e6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	691a      	ldr	r2, [r3, #16]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	2100      	movs	r1, #0
 80093d8:	9100      	str	r1, [sp, #0]
 80093da:	68b9      	ldr	r1, [r7, #8]
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 fa2f 	bl	8009840 <xQueueGenericCreateStatic>
 80093e2:	61f8      	str	r0, [r7, #28]
 80093e4:	e008      	b.n	80093f8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d105      	bne.n	80093f8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80093ec:	2200      	movs	r2, #0
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 fa9d 	bl	8009930 <xQueueGenericCreate>
 80093f6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00c      	beq.n	8009418 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d003      	beq.n	800940c <osMessageQueueNew+0xd0>
        name = attr->name;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	617b      	str	r3, [r7, #20]
 800940a:	e001      	b.n	8009410 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009410:	6979      	ldr	r1, [r7, #20]
 8009412:	69f8      	ldr	r0, [r7, #28]
 8009414:	f000 ff82 	bl	800a31c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009418:	69fb      	ldr	r3, [r7, #28]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3720      	adds	r7, #32
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	603b      	str	r3, [r7, #0]
 8009430:	4613      	mov	r3, r2
 8009432:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009438:	2300      	movs	r3, #0
 800943a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800943c:	f3ef 8305 	mrs	r3, IPSR
 8009440:	617b      	str	r3, [r7, #20]
  return(result);
 8009442:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009444:	2b00      	cmp	r3, #0
 8009446:	d028      	beq.n	800949a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d005      	beq.n	800945a <osMessageQueuePut+0x36>
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <osMessageQueuePut+0x36>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800945a:	f06f 0303 	mvn.w	r3, #3
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	e038      	b.n	80094d4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009462:	2300      	movs	r3, #0
 8009464:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009466:	f107 0210 	add.w	r2, r7, #16
 800946a:	2300      	movs	r3, #0
 800946c:	68b9      	ldr	r1, [r7, #8]
 800946e:	69b8      	ldr	r0, [r7, #24]
 8009470:	f000 fc24 	bl	8009cbc <xQueueGenericSendFromISR>
 8009474:	4603      	mov	r3, r0
 8009476:	2b01      	cmp	r3, #1
 8009478:	d003      	beq.n	8009482 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800947a:	f06f 0302 	mvn.w	r3, #2
 800947e:	61fb      	str	r3, [r7, #28]
 8009480:	e028      	b.n	80094d4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d025      	beq.n	80094d4 <osMessageQueuePut+0xb0>
 8009488:	4b15      	ldr	r3, [pc, #84]	; (80094e0 <osMessageQueuePut+0xbc>)
 800948a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	e01c      	b.n	80094d4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <osMessageQueuePut+0x82>
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d103      	bne.n	80094ae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80094a6:	f06f 0303 	mvn.w	r3, #3
 80094aa:	61fb      	str	r3, [r7, #28]
 80094ac:	e012      	b.n	80094d4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80094ae:	2300      	movs	r3, #0
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	68b9      	ldr	r1, [r7, #8]
 80094b4:	69b8      	ldr	r0, [r7, #24]
 80094b6:	f000 fb03 	bl	8009ac0 <xQueueGenericSend>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d009      	beq.n	80094d4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80094c6:	f06f 0301 	mvn.w	r3, #1
 80094ca:	61fb      	str	r3, [r7, #28]
 80094cc:	e002      	b.n	80094d4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80094ce:	f06f 0302 	mvn.w	r3, #2
 80094d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80094d4:	69fb      	ldr	r3, [r7, #28]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3720      	adds	r7, #32
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	e000ed04 	.word	0xe000ed04

080094e4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b088      	sub	sp, #32
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
 80094f0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094fa:	f3ef 8305 	mrs	r3, IPSR
 80094fe:	617b      	str	r3, [r7, #20]
  return(result);
 8009500:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009502:	2b00      	cmp	r3, #0
 8009504:	d028      	beq.n	8009558 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <osMessageQueueGet+0x34>
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <osMessageQueueGet+0x34>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009518:	f06f 0303 	mvn.w	r3, #3
 800951c:	61fb      	str	r3, [r7, #28]
 800951e:	e037      	b.n	8009590 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009520:	2300      	movs	r3, #0
 8009522:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009524:	f107 0310 	add.w	r3, r7, #16
 8009528:	461a      	mov	r2, r3
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	69b8      	ldr	r0, [r7, #24]
 800952e:	f000 fd41 	bl	8009fb4 <xQueueReceiveFromISR>
 8009532:	4603      	mov	r3, r0
 8009534:	2b01      	cmp	r3, #1
 8009536:	d003      	beq.n	8009540 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009538:	f06f 0302 	mvn.w	r3, #2
 800953c:	61fb      	str	r3, [r7, #28]
 800953e:	e027      	b.n	8009590 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d024      	beq.n	8009590 <osMessageQueueGet+0xac>
 8009546:	4b15      	ldr	r3, [pc, #84]	; (800959c <osMessageQueueGet+0xb8>)
 8009548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	e01b      	b.n	8009590 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d002      	beq.n	8009564 <osMessageQueueGet+0x80>
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d103      	bne.n	800956c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009564:	f06f 0303 	mvn.w	r3, #3
 8009568:	61fb      	str	r3, [r7, #28]
 800956a:	e011      	b.n	8009590 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	68b9      	ldr	r1, [r7, #8]
 8009570:	69b8      	ldr	r0, [r7, #24]
 8009572:	f000 fc3f 	bl	8009df4 <xQueueReceive>
 8009576:	4603      	mov	r3, r0
 8009578:	2b01      	cmp	r3, #1
 800957a:	d009      	beq.n	8009590 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009582:	f06f 0301 	mvn.w	r3, #1
 8009586:	61fb      	str	r3, [r7, #28]
 8009588:	e002      	b.n	8009590 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800958a:	f06f 0302 	mvn.w	r3, #2
 800958e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009590:	69fb      	ldr	r3, [r7, #28]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3720      	adds	r7, #32
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	e000ed04 	.word	0xe000ed04

080095a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4a07      	ldr	r2, [pc, #28]	; (80095cc <vApplicationGetIdleTaskMemory+0x2c>)
 80095b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	4a06      	ldr	r2, [pc, #24]	; (80095d0 <vApplicationGetIdleTaskMemory+0x30>)
 80095b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2280      	movs	r2, #128	; 0x80
 80095bc:	601a      	str	r2, [r3, #0]
}
 80095be:	bf00      	nop
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	20005488 	.word	0x20005488
 80095d0:	20005544 	.word	0x20005544

080095d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	4a07      	ldr	r2, [pc, #28]	; (8009600 <vApplicationGetTimerTaskMemory+0x2c>)
 80095e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	4a06      	ldr	r2, [pc, #24]	; (8009604 <vApplicationGetTimerTaskMemory+0x30>)
 80095ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095f2:	601a      	str	r2, [r3, #0]
}
 80095f4:	bf00      	nop
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr
 8009600:	20005744 	.word	0x20005744
 8009604:	20005800 	.word	0x20005800

08009608 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f103 0208 	add.w	r2, r3, #8
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009620:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f103 0208 	add.w	r2, r3, #8
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f103 0208 	add.w	r2, r3, #8
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009656:	bf00      	nop
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009662:	b480      	push	{r7}
 8009664:	b085      	sub	sp, #20
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	601a      	str	r2, [r3, #0]
}
 800969e:	bf00      	nop
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096aa:	b480      	push	{r7}
 80096ac:	b085      	sub	sp, #20
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096c0:	d103      	bne.n	80096ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	60fb      	str	r3, [r7, #12]
 80096c8:	e00c      	b.n	80096e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	3308      	adds	r3, #8
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e002      	b.n	80096d8 <vListInsert+0x2e>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d2f6      	bcs.n	80096d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	601a      	str	r2, [r3, #0]
}
 8009710:	bf00      	nop
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	6892      	ldr	r2, [r2, #8]
 8009732:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	6852      	ldr	r2, [r2, #4]
 800973c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	429a      	cmp	r2, r3
 8009746:	d103      	bne.n	8009750 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	1e5a      	subs	r2, r3, #1
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800979a:	f002 f9eb 	bl	800bb74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a6:	68f9      	ldr	r1, [r7, #12]
 80097a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80097aa:	fb01 f303 	mul.w	r3, r1, r3
 80097ae:	441a      	add	r2, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ca:	3b01      	subs	r3, #1
 80097cc:	68f9      	ldr	r1, [r7, #12]
 80097ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80097d0:	fb01 f303 	mul.w	r3, r1, r3
 80097d4:	441a      	add	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	22ff      	movs	r2, #255	; 0xff
 80097de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	22ff      	movs	r2, #255	; 0xff
 80097e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d114      	bne.n	800981a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d01a      	beq.n	800982e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	3310      	adds	r3, #16
 80097fc:	4618      	mov	r0, r3
 80097fe:	f001 fa9b 	bl	800ad38 <xTaskRemoveFromEventList>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d012      	beq.n	800982e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009808:	4b0c      	ldr	r3, [pc, #48]	; (800983c <xQueueGenericReset+0xcc>)
 800980a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	e009      	b.n	800982e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3310      	adds	r3, #16
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fef2 	bl	8009608 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3324      	adds	r3, #36	; 0x24
 8009828:	4618      	mov	r0, r3
 800982a:	f7ff feed 	bl	8009608 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800982e:	f002 f9d1 	bl	800bbd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009832:	2301      	movs	r3, #1
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	e000ed04 	.word	0xe000ed04

08009840 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009840:	b580      	push	{r7, lr}
 8009842:	b08e      	sub	sp, #56	; 0x38
 8009844:	af02      	add	r7, sp, #8
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10a      	bne.n	8009886 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009882:	bf00      	nop
 8009884:	e7fe      	b.n	8009884 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <xQueueGenericCreateStatic+0x52>
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <xQueueGenericCreateStatic+0x56>
 8009892:	2301      	movs	r3, #1
 8009894:	e000      	b.n	8009898 <xQueueGenericCreateStatic+0x58>
 8009896:	2300      	movs	r3, #0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10a      	bne.n	80098b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800989c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a0:	f383 8811 	msr	BASEPRI, r3
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	623b      	str	r3, [r7, #32]
}
 80098ae:	bf00      	nop
 80098b0:	e7fe      	b.n	80098b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d102      	bne.n	80098be <xQueueGenericCreateStatic+0x7e>
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <xQueueGenericCreateStatic+0x82>
 80098be:	2301      	movs	r3, #1
 80098c0:	e000      	b.n	80098c4 <xQueueGenericCreateStatic+0x84>
 80098c2:	2300      	movs	r3, #0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10a      	bne.n	80098de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	61fb      	str	r3, [r7, #28]
}
 80098da:	bf00      	nop
 80098dc:	e7fe      	b.n	80098dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80098de:	2350      	movs	r3, #80	; 0x50
 80098e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	2b50      	cmp	r3, #80	; 0x50
 80098e6:	d00a      	beq.n	80098fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	61bb      	str	r3, [r7, #24]
}
 80098fa:	bf00      	nop
 80098fc:	e7fe      	b.n	80098fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80098fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00d      	beq.n	8009926 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800990a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990c:	2201      	movs	r2, #1
 800990e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009912:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	4613      	mov	r3, r2
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	68b9      	ldr	r1, [r7, #8]
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 f83f 	bl	80099a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009928:	4618      	mov	r0, r3
 800992a:	3730      	adds	r7, #48	; 0x30
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08a      	sub	sp, #40	; 0x28
 8009934:	af02      	add	r7, sp, #8
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	4613      	mov	r3, r2
 800993c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10a      	bne.n	800995a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	613b      	str	r3, [r7, #16]
}
 8009956:	bf00      	nop
 8009958:	e7fe      	b.n	8009958 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	fb02 f303 	mul.w	r3, r2, r3
 8009962:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	3350      	adds	r3, #80	; 0x50
 8009968:	4618      	mov	r0, r3
 800996a:	f002 fa25 	bl	800bdb8 <pvPortMalloc>
 800996e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d011      	beq.n	800999a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	3350      	adds	r3, #80	; 0x50
 800997e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009988:	79fa      	ldrb	r2, [r7, #7]
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	4613      	mov	r3, r2
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	68b9      	ldr	r1, [r7, #8]
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 f805 	bl	80099a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800999a:	69bb      	ldr	r3, [r7, #24]
	}
 800999c:	4618      	mov	r0, r3
 800999e:	3720      	adds	r7, #32
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d103      	bne.n	80099c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	e002      	b.n	80099c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80099d2:	2101      	movs	r1, #1
 80099d4:	69b8      	ldr	r0, [r7, #24]
 80099d6:	f7ff fecb 	bl	8009770 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	78fa      	ldrb	r2, [r7, #3]
 80099de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80099e2:	bf00      	nop
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b08a      	sub	sp, #40	; 0x28
 80099ee:	af02      	add	r7, sp, #8
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10a      	bne.n	8009a12 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	61bb      	str	r3, [r7, #24]
}
 8009a0e:	bf00      	nop
 8009a10:	e7fe      	b.n	8009a10 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d90a      	bls.n	8009a30 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	617b      	str	r3, [r7, #20]
}
 8009a2c:	bf00      	nop
 8009a2e:	e7fe      	b.n	8009a2e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009a30:	2302      	movs	r3, #2
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	2100      	movs	r1, #0
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f7ff ff00 	bl	8009840 <xQueueGenericCreateStatic>
 8009a40:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d002      	beq.n	8009a4e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009a4e:	69fb      	ldr	r3, [r7, #28]
	}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3720      	adds	r7, #32
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10a      	bne.n	8009a7e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	613b      	str	r3, [r7, #16]
}
 8009a7a:	bf00      	nop
 8009a7c:	e7fe      	b.n	8009a7c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d90a      	bls.n	8009a9c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60fb      	str	r3, [r7, #12]
}
 8009a98:	bf00      	nop
 8009a9a:	e7fe      	b.n	8009a9a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7ff ff45 	bl	8009930 <xQueueGenericCreate>
 8009aa6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d002      	beq.n	8009ab4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009ab4:	697b      	ldr	r3, [r7, #20]
	}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b08e      	sub	sp, #56	; 0x38
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10a      	bne.n	8009af2 <xQueueGenericSend+0x32>
	__asm volatile
 8009adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009aee:	bf00      	nop
 8009af0:	e7fe      	b.n	8009af0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d103      	bne.n	8009b00 <xQueueGenericSend+0x40>
 8009af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <xQueueGenericSend+0x44>
 8009b00:	2301      	movs	r3, #1
 8009b02:	e000      	b.n	8009b06 <xQueueGenericSend+0x46>
 8009b04:	2300      	movs	r3, #0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10a      	bne.n	8009b20 <xQueueGenericSend+0x60>
	__asm volatile
 8009b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b1c:	bf00      	nop
 8009b1e:	e7fe      	b.n	8009b1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d103      	bne.n	8009b2e <xQueueGenericSend+0x6e>
 8009b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d101      	bne.n	8009b32 <xQueueGenericSend+0x72>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e000      	b.n	8009b34 <xQueueGenericSend+0x74>
 8009b32:	2300      	movs	r3, #0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10a      	bne.n	8009b4e <xQueueGenericSend+0x8e>
	__asm volatile
 8009b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	623b      	str	r3, [r7, #32]
}
 8009b4a:	bf00      	nop
 8009b4c:	e7fe      	b.n	8009b4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b4e:	f001 fab5 	bl	800b0bc <xTaskGetSchedulerState>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <xQueueGenericSend+0x9e>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <xQueueGenericSend+0xa2>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e000      	b.n	8009b64 <xQueueGenericSend+0xa4>
 8009b62:	2300      	movs	r3, #0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <xQueueGenericSend+0xbe>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	61fb      	str	r3, [r7, #28]
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b7e:	f001 fff9 	bl	800bb74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d302      	bcc.n	8009b94 <xQueueGenericSend+0xd4>
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d129      	bne.n	8009be8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	68b9      	ldr	r1, [r7, #8]
 8009b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b9a:	f000 faae 	bl	800a0fa <prvCopyDataToQueue>
 8009b9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d010      	beq.n	8009bca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009baa:	3324      	adds	r3, #36	; 0x24
 8009bac:	4618      	mov	r0, r3
 8009bae:	f001 f8c3 	bl	800ad38 <xTaskRemoveFromEventList>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d013      	beq.n	8009be0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009bb8:	4b3f      	ldr	r3, [pc, #252]	; (8009cb8 <xQueueGenericSend+0x1f8>)
 8009bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bbe:	601a      	str	r2, [r3, #0]
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	e00a      	b.n	8009be0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d007      	beq.n	8009be0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009bd0:	4b39      	ldr	r3, [pc, #228]	; (8009cb8 <xQueueGenericSend+0x1f8>)
 8009bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009be0:	f001 fff8 	bl	800bbd4 <vPortExitCritical>
				return pdPASS;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e063      	b.n	8009cb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d103      	bne.n	8009bf6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bee:	f001 fff1 	bl	800bbd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	e05c      	b.n	8009cb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d106      	bne.n	8009c0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bfc:	f107 0314 	add.w	r3, r7, #20
 8009c00:	4618      	mov	r0, r3
 8009c02:	f001 f8fd 	bl	800ae00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c06:	2301      	movs	r3, #1
 8009c08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c0a:	f001 ffe3 	bl	800bbd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c0e:	f000 fe69 	bl	800a8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c12:	f001 ffaf 	bl	800bb74 <vPortEnterCritical>
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c1c:	b25b      	sxtb	r3, r3
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c22:	d103      	bne.n	8009c2c <xQueueGenericSend+0x16c>
 8009c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c32:	b25b      	sxtb	r3, r3
 8009c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c38:	d103      	bne.n	8009c42 <xQueueGenericSend+0x182>
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c42:	f001 ffc7 	bl	800bbd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c46:	1d3a      	adds	r2, r7, #4
 8009c48:	f107 0314 	add.w	r3, r7, #20
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f001 f8ec 	bl	800ae2c <xTaskCheckForTimeOut>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d124      	bne.n	8009ca4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c5c:	f000 fb45 	bl	800a2ea <prvIsQueueFull>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d018      	beq.n	8009c98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	3310      	adds	r3, #16
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f001 f812 	bl	800ac98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c76:	f000 fad0 	bl	800a21a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c7a:	f000 fe41 	bl	800a900 <xTaskResumeAll>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f47f af7c 	bne.w	8009b7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009c86:	4b0c      	ldr	r3, [pc, #48]	; (8009cb8 <xQueueGenericSend+0x1f8>)
 8009c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	e772      	b.n	8009b7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c9a:	f000 fabe 	bl	800a21a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c9e:	f000 fe2f 	bl	800a900 <xTaskResumeAll>
 8009ca2:	e76c      	b.n	8009b7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ca6:	f000 fab8 	bl	800a21a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009caa:	f000 fe29 	bl	800a900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009cae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3738      	adds	r7, #56	; 0x38
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	e000ed04 	.word	0xe000ed04

08009cbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b090      	sub	sp, #64	; 0x40
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10a      	bne.n	8009cea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ce6:	bf00      	nop
 8009ce8:	e7fe      	b.n	8009ce8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d103      	bne.n	8009cf8 <xQueueGenericSendFromISR+0x3c>
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <xQueueGenericSendFromISR+0x40>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e000      	b.n	8009cfe <xQueueGenericSendFromISR+0x42>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10a      	bne.n	8009d18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d14:	bf00      	nop
 8009d16:	e7fe      	b.n	8009d16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d103      	bne.n	8009d26 <xQueueGenericSendFromISR+0x6a>
 8009d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d101      	bne.n	8009d2a <xQueueGenericSendFromISR+0x6e>
 8009d26:	2301      	movs	r3, #1
 8009d28:	e000      	b.n	8009d2c <xQueueGenericSendFromISR+0x70>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10a      	bne.n	8009d46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	623b      	str	r3, [r7, #32]
}
 8009d42:	bf00      	nop
 8009d44:	e7fe      	b.n	8009d44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d46:	f001 fff7 	bl	800bd38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009d4a:	f3ef 8211 	mrs	r2, BASEPRI
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	61fa      	str	r2, [r7, #28]
 8009d60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009d62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d302      	bcc.n	8009d78 <xQueueGenericSendFromISR+0xbc>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d12f      	bne.n	8009dd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	68b9      	ldr	r1, [r7, #8]
 8009d8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d8e:	f000 f9b4 	bl	800a0fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d9a:	d112      	bne.n	8009dc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d016      	beq.n	8009dd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da6:	3324      	adds	r3, #36	; 0x24
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 ffc5 	bl	800ad38 <xTaskRemoveFromEventList>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00e      	beq.n	8009dd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00b      	beq.n	8009dd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	e007      	b.n	8009dd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009dc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	b25a      	sxtb	r2, r3
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009dd6:	e001      	b.n	8009ddc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dde:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009de6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3740      	adds	r7, #64	; 0x40
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
	...

08009df4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b08c      	sub	sp, #48	; 0x30
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e00:	2300      	movs	r3, #0
 8009e02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <xQueueReceive+0x30>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	623b      	str	r3, [r7, #32]
}
 8009e20:	bf00      	nop
 8009e22:	e7fe      	b.n	8009e22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d103      	bne.n	8009e32 <xQueueReceive+0x3e>
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <xQueueReceive+0x42>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e000      	b.n	8009e38 <xQueueReceive+0x44>
 8009e36:	2300      	movs	r3, #0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10a      	bne.n	8009e52 <xQueueReceive+0x5e>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	61fb      	str	r3, [r7, #28]
}
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e52:	f001 f933 	bl	800b0bc <xTaskGetSchedulerState>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d102      	bne.n	8009e62 <xQueueReceive+0x6e>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d101      	bne.n	8009e66 <xQueueReceive+0x72>
 8009e62:	2301      	movs	r3, #1
 8009e64:	e000      	b.n	8009e68 <xQueueReceive+0x74>
 8009e66:	2300      	movs	r3, #0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10a      	bne.n	8009e82 <xQueueReceive+0x8e>
	__asm volatile
 8009e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e70:	f383 8811 	msr	BASEPRI, r3
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	61bb      	str	r3, [r7, #24]
}
 8009e7e:	bf00      	nop
 8009e80:	e7fe      	b.n	8009e80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e82:	f001 fe77 	bl	800bb74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01f      	beq.n	8009ed2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e92:	68b9      	ldr	r1, [r7, #8]
 8009e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e96:	f000 f99a 	bl	800a1ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	1e5a      	subs	r2, r3, #1
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00f      	beq.n	8009eca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eac:	3310      	adds	r3, #16
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 ff42 	bl	800ad38 <xTaskRemoveFromEventList>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d007      	beq.n	8009eca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009eba:	4b3d      	ldr	r3, [pc, #244]	; (8009fb0 <xQueueReceive+0x1bc>)
 8009ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009eca:	f001 fe83 	bl	800bbd4 <vPortExitCritical>
				return pdPASS;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e069      	b.n	8009fa6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d103      	bne.n	8009ee0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ed8:	f001 fe7c 	bl	800bbd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009edc:	2300      	movs	r3, #0
 8009ede:	e062      	b.n	8009fa6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d106      	bne.n	8009ef4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ee6:	f107 0310 	add.w	r3, r7, #16
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 ff88 	bl	800ae00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ef4:	f001 fe6e 	bl	800bbd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ef8:	f000 fcf4 	bl	800a8e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009efc:	f001 fe3a 	bl	800bb74 <vPortEnterCritical>
 8009f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f06:	b25b      	sxtb	r3, r3
 8009f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f0c:	d103      	bne.n	8009f16 <xQueueReceive+0x122>
 8009f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f1c:	b25b      	sxtb	r3, r3
 8009f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f22:	d103      	bne.n	8009f2c <xQueueReceive+0x138>
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f2c:	f001 fe52 	bl	800bbd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f30:	1d3a      	adds	r2, r7, #4
 8009f32:	f107 0310 	add.w	r3, r7, #16
 8009f36:	4611      	mov	r1, r2
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f000 ff77 	bl	800ae2c <xTaskCheckForTimeOut>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d123      	bne.n	8009f8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f46:	f000 f9ba 	bl	800a2be <prvIsQueueEmpty>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d017      	beq.n	8009f80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	3324      	adds	r3, #36	; 0x24
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	4611      	mov	r1, r2
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 fe9d 	bl	800ac98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f60:	f000 f95b 	bl	800a21a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f64:	f000 fccc 	bl	800a900 <xTaskResumeAll>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d189      	bne.n	8009e82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009f6e:	4b10      	ldr	r3, [pc, #64]	; (8009fb0 <xQueueReceive+0x1bc>)
 8009f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f74:	601a      	str	r2, [r3, #0]
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	e780      	b.n	8009e82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f82:	f000 f94a 	bl	800a21a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f86:	f000 fcbb 	bl	800a900 <xTaskResumeAll>
 8009f8a:	e77a      	b.n	8009e82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f8e:	f000 f944 	bl	800a21a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f92:	f000 fcb5 	bl	800a900 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f98:	f000 f991 	bl	800a2be <prvIsQueueEmpty>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f43f af6f 	beq.w	8009e82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fa4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3730      	adds	r7, #48	; 0x30
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	e000ed04 	.word	0xe000ed04

08009fb4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08e      	sub	sp, #56	; 0x38
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10a      	bne.n	8009fe0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	623b      	str	r3, [r7, #32]
}
 8009fdc:	bf00      	nop
 8009fde:	e7fe      	b.n	8009fde <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d103      	bne.n	8009fee <xQueueReceiveFromISR+0x3a>
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <xQueueReceiveFromISR+0x3e>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e000      	b.n	8009ff4 <xQueueReceiveFromISR+0x40>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	61fb      	str	r3, [r7, #28]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a00e:	f001 fe93 	bl	800bd38 <vPortValidateInterruptPriority>
	__asm volatile
 800a012:	f3ef 8211 	mrs	r2, BASEPRI
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	61ba      	str	r2, [r7, #24]
 800a028:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a02a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a02c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a032:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	2b00      	cmp	r3, #0
 800a038:	d02f      	beq.n	800a09a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a044:	68b9      	ldr	r1, [r7, #8]
 800a046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a048:	f000 f8c1 	bl	800a1ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04e:	1e5a      	subs	r2, r3, #1
 800a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a052:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a054:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a05c:	d112      	bne.n	800a084 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d016      	beq.n	800a094 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	3310      	adds	r3, #16
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 fe64 	bl	800ad38 <xTaskRemoveFromEventList>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00e      	beq.n	800a094 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00b      	beq.n	800a094 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	601a      	str	r2, [r3, #0]
 800a082:	e007      	b.n	800a094 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a088:	3301      	adds	r3, #1
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	b25a      	sxtb	r2, r3
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a094:	2301      	movs	r3, #1
 800a096:	637b      	str	r3, [r7, #52]	; 0x34
 800a098:	e001      	b.n	800a09e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a09a:	2300      	movs	r3, #0
 800a09c:	637b      	str	r3, [r7, #52]	; 0x34
 800a09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f383 8811 	msr	BASEPRI, r3
}
 800a0a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3738      	adds	r7, #56	; 0x38
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10a      	bne.n	800a0dc <vQueueDelete+0x28>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	60bb      	str	r3, [r7, #8]
}
 800a0d8:	bf00      	nop
 800a0da:	e7fe      	b.n	800a0da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f000 f947 	bl	800a370 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d102      	bne.n	800a0f2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f001 ff07 	bl	800bf00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a0f2:	bf00      	nop
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b086      	sub	sp, #24
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	60f8      	str	r0, [r7, #12]
 800a102:	60b9      	str	r1, [r7, #8]
 800a104:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a106:	2300      	movs	r3, #0
 800a108:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10d      	bne.n	800a134 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d14d      	bne.n	800a1bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	4618      	mov	r0, r3
 800a126:	f000 ffe7 	bl	800b0f8 <xTaskPriorityDisinherit>
 800a12a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	609a      	str	r2, [r3, #8]
 800a132:	e043      	b.n	800a1bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d119      	bne.n	800a16e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6858      	ldr	r0, [r3, #4]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a142:	461a      	mov	r2, r3
 800a144:	68b9      	ldr	r1, [r7, #8]
 800a146:	f002 fa51 	bl	800c5ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	685a      	ldr	r2, [r3, #4]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	441a      	add	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	429a      	cmp	r2, r3
 800a162:	d32b      	bcc.n	800a1bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	605a      	str	r2, [r3, #4]
 800a16c:	e026      	b.n	800a1bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	68d8      	ldr	r0, [r3, #12]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	461a      	mov	r2, r3
 800a178:	68b9      	ldr	r1, [r7, #8]
 800a17a:	f002 fa37 	bl	800c5ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	68da      	ldr	r2, [r3, #12]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a186:	425b      	negs	r3, r3
 800a188:	441a      	add	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	429a      	cmp	r2, r3
 800a198:	d207      	bcs.n	800a1aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	689a      	ldr	r2, [r3, #8]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a2:	425b      	negs	r3, r3
 800a1a4:	441a      	add	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d105      	bne.n	800a1bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d002      	beq.n	800a1bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	1c5a      	adds	r2, r3, #1
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a1c4:	697b      	ldr	r3, [r7, #20]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d018      	beq.n	800a212 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68da      	ldr	r2, [r3, #12]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e8:	441a      	add	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68da      	ldr	r2, [r3, #12]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d303      	bcc.n	800a202 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68d9      	ldr	r1, [r3, #12]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20a:	461a      	mov	r2, r3
 800a20c:	6838      	ldr	r0, [r7, #0]
 800a20e:	f002 f9ed 	bl	800c5ec <memcpy>
	}
}
 800a212:	bf00      	nop
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b084      	sub	sp, #16
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a222:	f001 fca7 	bl	800bb74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a22c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a22e:	e011      	b.n	800a254 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a234:	2b00      	cmp	r3, #0
 800a236:	d012      	beq.n	800a25e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3324      	adds	r3, #36	; 0x24
 800a23c:	4618      	mov	r0, r3
 800a23e:	f000 fd7b 	bl	800ad38 <xTaskRemoveFromEventList>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a248:	f000 fe52 	bl	800aef0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	3b01      	subs	r3, #1
 800a250:	b2db      	uxtb	r3, r3
 800a252:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	dce9      	bgt.n	800a230 <prvUnlockQueue+0x16>
 800a25c:	e000      	b.n	800a260 <prvUnlockQueue+0x46>
					break;
 800a25e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	22ff      	movs	r2, #255	; 0xff
 800a264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a268:	f001 fcb4 	bl	800bbd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a26c:	f001 fc82 	bl	800bb74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a276:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a278:	e011      	b.n	800a29e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d012      	beq.n	800a2a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	3310      	adds	r3, #16
 800a286:	4618      	mov	r0, r3
 800a288:	f000 fd56 	bl	800ad38 <xTaskRemoveFromEventList>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a292:	f000 fe2d 	bl	800aef0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a296:	7bbb      	ldrb	r3, [r7, #14]
 800a298:	3b01      	subs	r3, #1
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a29e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	dce9      	bgt.n	800a27a <prvUnlockQueue+0x60>
 800a2a6:	e000      	b.n	800a2aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	22ff      	movs	r2, #255	; 0xff
 800a2ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a2b2:	f001 fc8f 	bl	800bbd4 <vPortExitCritical>
}
 800a2b6:	bf00      	nop
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2c6:	f001 fc55 	bl	800bb74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d102      	bne.n	800a2d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	60fb      	str	r3, [r7, #12]
 800a2d6:	e001      	b.n	800a2dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2dc:	f001 fc7a 	bl	800bbd4 <vPortExitCritical>

	return xReturn;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2f2:	f001 fc3f 	bl	800bb74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d102      	bne.n	800a308 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a302:	2301      	movs	r3, #1
 800a304:	60fb      	str	r3, [r7, #12]
 800a306:	e001      	b.n	800a30c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a308:	2300      	movs	r3, #0
 800a30a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a30c:	f001 fc62 	bl	800bbd4 <vPortExitCritical>

	return xReturn;
 800a310:	68fb      	ldr	r3, [r7, #12]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a326:	2300      	movs	r3, #0
 800a328:	60fb      	str	r3, [r7, #12]
 800a32a:	e014      	b.n	800a356 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a32c:	4a0f      	ldr	r2, [pc, #60]	; (800a36c <vQueueAddToRegistry+0x50>)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10b      	bne.n	800a350 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a338:	490c      	ldr	r1, [pc, #48]	; (800a36c <vQueueAddToRegistry+0x50>)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a342:	4a0a      	ldr	r2, [pc, #40]	; (800a36c <vQueueAddToRegistry+0x50>)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	00db      	lsls	r3, r3, #3
 800a348:	4413      	add	r3, r2
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a34e:	e006      	b.n	800a35e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	3301      	adds	r3, #1
 800a354:	60fb      	str	r3, [r7, #12]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2b07      	cmp	r3, #7
 800a35a:	d9e7      	bls.n	800a32c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a35c:	bf00      	nop
 800a35e:	bf00      	nop
 800a360:	3714      	adds	r7, #20
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	20005c00 	.word	0x20005c00

0800a370 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a378:	2300      	movs	r3, #0
 800a37a:	60fb      	str	r3, [r7, #12]
 800a37c:	e016      	b.n	800a3ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a37e:	4a10      	ldr	r2, [pc, #64]	; (800a3c0 <vQueueUnregisterQueue+0x50>)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	00db      	lsls	r3, r3, #3
 800a384:	4413      	add	r3, r2
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d10b      	bne.n	800a3a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a38e:	4a0c      	ldr	r2, [pc, #48]	; (800a3c0 <vQueueUnregisterQueue+0x50>)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2100      	movs	r1, #0
 800a394:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a398:	4a09      	ldr	r2, [pc, #36]	; (800a3c0 <vQueueUnregisterQueue+0x50>)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	4413      	add	r3, r2
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	605a      	str	r2, [r3, #4]
				break;
 800a3a4:	e006      	b.n	800a3b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b07      	cmp	r3, #7
 800a3b0:	d9e5      	bls.n	800a37e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a3b2:	bf00      	nop
 800a3b4:	bf00      	nop
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	20005c00 	.word	0x20005c00

0800a3c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3d4:	f001 fbce 	bl	800bb74 <vPortEnterCritical>
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3de:	b25b      	sxtb	r3, r3
 800a3e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3e4:	d103      	bne.n	800a3ee <vQueueWaitForMessageRestricted+0x2a>
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3f4:	b25b      	sxtb	r3, r3
 800a3f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3fa:	d103      	bne.n	800a404 <vQueueWaitForMessageRestricted+0x40>
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a404:	f001 fbe6 	bl	800bbd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d106      	bne.n	800a41e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	3324      	adds	r3, #36	; 0x24
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	68b9      	ldr	r1, [r7, #8]
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 fc61 	bl	800ace0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a41e:	6978      	ldr	r0, [r7, #20]
 800a420:	f7ff fefb 	bl	800a21a <prvUnlockQueue>
	}
 800a424:	bf00      	nop
 800a426:	3718      	adds	r7, #24
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b08e      	sub	sp, #56	; 0x38
 800a430:	af04      	add	r7, sp, #16
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
 800a438:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10a      	bne.n	800a456 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	623b      	str	r3, [r7, #32]
}
 800a452:	bf00      	nop
 800a454:	e7fe      	b.n	800a454 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10a      	bne.n	800a472 <xTaskCreateStatic+0x46>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a460:	f383 8811 	msr	BASEPRI, r3
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	61fb      	str	r3, [r7, #28]
}
 800a46e:	bf00      	nop
 800a470:	e7fe      	b.n	800a470 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a472:	23bc      	movs	r3, #188	; 0xbc
 800a474:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	2bbc      	cmp	r3, #188	; 0xbc
 800a47a:	d00a      	beq.n	800a492 <xTaskCreateStatic+0x66>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	61bb      	str	r3, [r7, #24]
}
 800a48e:	bf00      	nop
 800a490:	e7fe      	b.n	800a490 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a492:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	2b00      	cmp	r3, #0
 800a498:	d01e      	beq.n	800a4d8 <xTaskCreateStatic+0xac>
 800a49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d01b      	beq.n	800a4d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9303      	str	r3, [sp, #12]
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	9302      	str	r3, [sp, #8]
 800a4ba:	f107 0314 	add.w	r3, r7, #20
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 f850 	bl	800a570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4d2:	f000 f8f3 	bl	800a6bc <prvAddNewTaskToReadyList>
 800a4d6:	e001      	b.n	800a4dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4dc:	697b      	ldr	r3, [r7, #20]
	}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3728      	adds	r7, #40	; 0x28
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b08c      	sub	sp, #48	; 0x30
 800a4ea:	af04      	add	r7, sp, #16
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	603b      	str	r3, [r7, #0]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4f6:	88fb      	ldrh	r3, [r7, #6]
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f001 fc5c 	bl	800bdb8 <pvPortMalloc>
 800a500:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00e      	beq.n	800a526 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a508:	20bc      	movs	r0, #188	; 0xbc
 800a50a:	f001 fc55 	bl	800bdb8 <pvPortMalloc>
 800a50e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	631a      	str	r2, [r3, #48]	; 0x30
 800a51c:	e005      	b.n	800a52a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a51e:	6978      	ldr	r0, [r7, #20]
 800a520:	f001 fcee 	bl	800bf00 <vPortFree>
 800a524:	e001      	b.n	800a52a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a526:	2300      	movs	r3, #0
 800a528:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d017      	beq.n	800a560 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a538:	88fa      	ldrh	r2, [r7, #6]
 800a53a:	2300      	movs	r3, #0
 800a53c:	9303      	str	r3, [sp, #12]
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	9302      	str	r3, [sp, #8]
 800a542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a544:	9301      	str	r3, [sp, #4]
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	68b9      	ldr	r1, [r7, #8]
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f000 f80e 	bl	800a570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a554:	69f8      	ldr	r0, [r7, #28]
 800a556:	f000 f8b1 	bl	800a6bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a55a:	2301      	movs	r3, #1
 800a55c:	61bb      	str	r3, [r7, #24]
 800a55e:	e002      	b.n	800a566 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a564:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a566:	69bb      	ldr	r3, [r7, #24]
	}
 800a568:	4618      	mov	r0, r3
 800a56a:	3720      	adds	r7, #32
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a580:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	461a      	mov	r2, r3
 800a588:	21a5      	movs	r1, #165	; 0xa5
 800a58a:	f002 f83d 	bl	800c608 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a598:	3b01      	subs	r3, #1
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4413      	add	r3, r2
 800a59e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	f023 0307 	bic.w	r3, r3, #7
 800a5a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	f003 0307 	and.w	r3, r3, #7
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00a      	beq.n	800a5c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	617b      	str	r3, [r7, #20]
}
 800a5c4:	bf00      	nop
 800a5c6:	e7fe      	b.n	800a5c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d01f      	beq.n	800a60e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	61fb      	str	r3, [r7, #28]
 800a5d2:	e012      	b.n	800a5fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	4413      	add	r3, r2
 800a5da:	7819      	ldrb	r1, [r3, #0]
 800a5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	3334      	adds	r3, #52	; 0x34
 800a5e4:	460a      	mov	r2, r1
 800a5e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d006      	beq.n	800a602 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	61fb      	str	r3, [r7, #28]
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	2b0f      	cmp	r3, #15
 800a5fe:	d9e9      	bls.n	800a5d4 <prvInitialiseNewTask+0x64>
 800a600:	e000      	b.n	800a604 <prvInitialiseNewTask+0x94>
			{
				break;
 800a602:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a606:	2200      	movs	r2, #0
 800a608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a60c:	e003      	b.n	800a616 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	2200      	movs	r2, #0
 800a612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	2b37      	cmp	r3, #55	; 0x37
 800a61a:	d901      	bls.n	800a620 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a61c:	2337      	movs	r3, #55	; 0x37
 800a61e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a624:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a62a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	2200      	movs	r2, #0
 800a630:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a634:	3304      	adds	r3, #4
 800a636:	4618      	mov	r0, r3
 800a638:	f7ff f806 	bl	8009648 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	3318      	adds	r3, #24
 800a640:	4618      	mov	r0, r3
 800a642:	f7ff f801 	bl	8009648 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a64a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a654:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a65a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	2200      	movs	r2, #0
 800a660:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a666:	2200      	movs	r2, #0
 800a668:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	3354      	adds	r3, #84	; 0x54
 800a670:	2260      	movs	r2, #96	; 0x60
 800a672:	2100      	movs	r1, #0
 800a674:	4618      	mov	r0, r3
 800a676:	f001 ffc7 	bl	800c608 <memset>
 800a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67c:	4a0c      	ldr	r2, [pc, #48]	; (800a6b0 <prvInitialiseNewTask+0x140>)
 800a67e:	659a      	str	r2, [r3, #88]	; 0x58
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	4a0c      	ldr	r2, [pc, #48]	; (800a6b4 <prvInitialiseNewTask+0x144>)
 800a684:	65da      	str	r2, [r3, #92]	; 0x5c
 800a686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a688:	4a0b      	ldr	r2, [pc, #44]	; (800a6b8 <prvInitialiseNewTask+0x148>)
 800a68a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a68c:	683a      	ldr	r2, [r7, #0]
 800a68e:	68f9      	ldr	r1, [r7, #12]
 800a690:	69b8      	ldr	r0, [r7, #24]
 800a692:	f001 f941 	bl	800b918 <pxPortInitialiseStack>
 800a696:	4602      	mov	r2, r0
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d002      	beq.n	800a6a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6a8:	bf00      	nop
 800a6aa:	3720      	adds	r7, #32
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	08011318 	.word	0x08011318
 800a6b4:	08011338 	.word	0x08011338
 800a6b8:	080112f8 	.word	0x080112f8

0800a6bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6c4:	f001 fa56 	bl	800bb74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6c8:	4b2d      	ldr	r3, [pc, #180]	; (800a780 <prvAddNewTaskToReadyList+0xc4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	4a2c      	ldr	r2, [pc, #176]	; (800a780 <prvAddNewTaskToReadyList+0xc4>)
 800a6d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6d2:	4b2c      	ldr	r3, [pc, #176]	; (800a784 <prvAddNewTaskToReadyList+0xc8>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d109      	bne.n	800a6ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6da:	4a2a      	ldr	r2, [pc, #168]	; (800a784 <prvAddNewTaskToReadyList+0xc8>)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6e0:	4b27      	ldr	r3, [pc, #156]	; (800a780 <prvAddNewTaskToReadyList+0xc4>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d110      	bne.n	800a70a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6e8:	f000 fc26 	bl	800af38 <prvInitialiseTaskLists>
 800a6ec:	e00d      	b.n	800a70a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6ee:	4b26      	ldr	r3, [pc, #152]	; (800a788 <prvAddNewTaskToReadyList+0xcc>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d109      	bne.n	800a70a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6f6:	4b23      	ldr	r3, [pc, #140]	; (800a784 <prvAddNewTaskToReadyList+0xc8>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a700:	429a      	cmp	r2, r3
 800a702:	d802      	bhi.n	800a70a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a704:	4a1f      	ldr	r2, [pc, #124]	; (800a784 <prvAddNewTaskToReadyList+0xc8>)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a70a:	4b20      	ldr	r3, [pc, #128]	; (800a78c <prvAddNewTaskToReadyList+0xd0>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3301      	adds	r3, #1
 800a710:	4a1e      	ldr	r2, [pc, #120]	; (800a78c <prvAddNewTaskToReadyList+0xd0>)
 800a712:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a714:	4b1d      	ldr	r3, [pc, #116]	; (800a78c <prvAddNewTaskToReadyList+0xd0>)
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a720:	4b1b      	ldr	r3, [pc, #108]	; (800a790 <prvAddNewTaskToReadyList+0xd4>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d903      	bls.n	800a730 <prvAddNewTaskToReadyList+0x74>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72c:	4a18      	ldr	r2, [pc, #96]	; (800a790 <prvAddNewTaskToReadyList+0xd4>)
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a734:	4613      	mov	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	4a15      	ldr	r2, [pc, #84]	; (800a794 <prvAddNewTaskToReadyList+0xd8>)
 800a73e:	441a      	add	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	3304      	adds	r3, #4
 800a744:	4619      	mov	r1, r3
 800a746:	4610      	mov	r0, r2
 800a748:	f7fe ff8b 	bl	8009662 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a74c:	f001 fa42 	bl	800bbd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a750:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <prvAddNewTaskToReadyList+0xcc>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00e      	beq.n	800a776 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a758:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <prvAddNewTaskToReadyList+0xc8>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a762:	429a      	cmp	r2, r3
 800a764:	d207      	bcs.n	800a776 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a766:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <prvAddNewTaskToReadyList+0xdc>)
 800a768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a776:	bf00      	nop
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	20006114 	.word	0x20006114
 800a784:	20005c40 	.word	0x20005c40
 800a788:	20006120 	.word	0x20006120
 800a78c:	20006130 	.word	0x20006130
 800a790:	2000611c 	.word	0x2000611c
 800a794:	20005c44 	.word	0x20005c44
 800a798:	e000ed04 	.word	0xe000ed04

0800a79c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d017      	beq.n	800a7de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7ae:	4b13      	ldr	r3, [pc, #76]	; (800a7fc <vTaskDelay+0x60>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00a      	beq.n	800a7cc <vTaskDelay+0x30>
	__asm volatile
 800a7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ba:	f383 8811 	msr	BASEPRI, r3
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	60bb      	str	r3, [r7, #8]
}
 800a7c8:	bf00      	nop
 800a7ca:	e7fe      	b.n	800a7ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7cc:	f000 f88a 	bl	800a8e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fcfe 	bl	800b1d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7d8:	f000 f892 	bl	800a900 <xTaskResumeAll>
 800a7dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d107      	bne.n	800a7f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7e4:	4b06      	ldr	r3, [pc, #24]	; (800a800 <vTaskDelay+0x64>)
 800a7e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7f4:	bf00      	nop
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	2000613c 	.word	0x2000613c
 800a800:	e000ed04 	.word	0xe000ed04

0800a804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b08a      	sub	sp, #40	; 0x28
 800a808:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a80e:	2300      	movs	r3, #0
 800a810:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a812:	463a      	mov	r2, r7
 800a814:	1d39      	adds	r1, r7, #4
 800a816:	f107 0308 	add.w	r3, r7, #8
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fe fec0 	bl	80095a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	9202      	str	r2, [sp, #8]
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	2300      	movs	r3, #0
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	2300      	movs	r3, #0
 800a830:	460a      	mov	r2, r1
 800a832:	4924      	ldr	r1, [pc, #144]	; (800a8c4 <vTaskStartScheduler+0xc0>)
 800a834:	4824      	ldr	r0, [pc, #144]	; (800a8c8 <vTaskStartScheduler+0xc4>)
 800a836:	f7ff fdf9 	bl	800a42c <xTaskCreateStatic>
 800a83a:	4603      	mov	r3, r0
 800a83c:	4a23      	ldr	r2, [pc, #140]	; (800a8cc <vTaskStartScheduler+0xc8>)
 800a83e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a840:	4b22      	ldr	r3, [pc, #136]	; (800a8cc <vTaskStartScheduler+0xc8>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a848:	2301      	movs	r3, #1
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	e001      	b.n	800a852 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a84e:	2300      	movs	r3, #0
 800a850:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d102      	bne.n	800a85e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a858:	f000 fd10 	bl	800b27c <xTimerCreateTimerTask>
 800a85c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d11b      	bne.n	800a89c <vTaskStartScheduler+0x98>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	613b      	str	r3, [r7, #16]
}
 800a876:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a878:	4b15      	ldr	r3, [pc, #84]	; (800a8d0 <vTaskStartScheduler+0xcc>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	3354      	adds	r3, #84	; 0x54
 800a87e:	4a15      	ldr	r2, [pc, #84]	; (800a8d4 <vTaskStartScheduler+0xd0>)
 800a880:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a882:	4b15      	ldr	r3, [pc, #84]	; (800a8d8 <vTaskStartScheduler+0xd4>)
 800a884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a888:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a88a:	4b14      	ldr	r3, [pc, #80]	; (800a8dc <vTaskStartScheduler+0xd8>)
 800a88c:	2201      	movs	r2, #1
 800a88e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a890:	4b13      	ldr	r3, [pc, #76]	; (800a8e0 <vTaskStartScheduler+0xdc>)
 800a892:	2200      	movs	r2, #0
 800a894:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a896:	f001 f8cb 	bl	800ba30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a89a:	e00e      	b.n	800a8ba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8a2:	d10a      	bne.n	800a8ba <vTaskStartScheduler+0xb6>
	__asm volatile
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	60fb      	str	r3, [r7, #12]
}
 800a8b6:	bf00      	nop
 800a8b8:	e7fe      	b.n	800a8b8 <vTaskStartScheduler+0xb4>
}
 800a8ba:	bf00      	nop
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	0800f178 	.word	0x0800f178
 800a8c8:	0800af09 	.word	0x0800af09
 800a8cc:	20006138 	.word	0x20006138
 800a8d0:	20005c40 	.word	0x20005c40
 800a8d4:	200000b8 	.word	0x200000b8
 800a8d8:	20006134 	.word	0x20006134
 800a8dc:	20006120 	.word	0x20006120
 800a8e0:	20006118 	.word	0x20006118

0800a8e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8e8:	4b04      	ldr	r3, [pc, #16]	; (800a8fc <vTaskSuspendAll+0x18>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	4a03      	ldr	r2, [pc, #12]	; (800a8fc <vTaskSuspendAll+0x18>)
 800a8f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8f2:	bf00      	nop
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr
 800a8fc:	2000613c 	.word	0x2000613c

0800a900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a906:	2300      	movs	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a90e:	4b42      	ldr	r3, [pc, #264]	; (800aa18 <xTaskResumeAll+0x118>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10a      	bne.n	800a92c <xTaskResumeAll+0x2c>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	603b      	str	r3, [r7, #0]
}
 800a928:	bf00      	nop
 800a92a:	e7fe      	b.n	800a92a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a92c:	f001 f922 	bl	800bb74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a930:	4b39      	ldr	r3, [pc, #228]	; (800aa18 <xTaskResumeAll+0x118>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3b01      	subs	r3, #1
 800a936:	4a38      	ldr	r2, [pc, #224]	; (800aa18 <xTaskResumeAll+0x118>)
 800a938:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a93a:	4b37      	ldr	r3, [pc, #220]	; (800aa18 <xTaskResumeAll+0x118>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d162      	bne.n	800aa08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a942:	4b36      	ldr	r3, [pc, #216]	; (800aa1c <xTaskResumeAll+0x11c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d05e      	beq.n	800aa08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a94a:	e02f      	b.n	800a9ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a94c:	4b34      	ldr	r3, [pc, #208]	; (800aa20 <xTaskResumeAll+0x120>)
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3318      	adds	r3, #24
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fe fedf 	bl	800971c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3304      	adds	r3, #4
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe feda 	bl	800971c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96c:	4b2d      	ldr	r3, [pc, #180]	; (800aa24 <xTaskResumeAll+0x124>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	d903      	bls.n	800a97c <xTaskResumeAll+0x7c>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	4a2a      	ldr	r2, [pc, #168]	; (800aa24 <xTaskResumeAll+0x124>)
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a980:	4613      	mov	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4a27      	ldr	r2, [pc, #156]	; (800aa28 <xTaskResumeAll+0x128>)
 800a98a:	441a      	add	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	3304      	adds	r3, #4
 800a990:	4619      	mov	r1, r3
 800a992:	4610      	mov	r0, r2
 800a994:	f7fe fe65 	bl	8009662 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99c:	4b23      	ldr	r3, [pc, #140]	; (800aa2c <xTaskResumeAll+0x12c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d302      	bcc.n	800a9ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a9a6:	4b22      	ldr	r3, [pc, #136]	; (800aa30 <xTaskResumeAll+0x130>)
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9ac:	4b1c      	ldr	r3, [pc, #112]	; (800aa20 <xTaskResumeAll+0x120>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d1cb      	bne.n	800a94c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9ba:	f000 fb5f 	bl	800b07c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9be:	4b1d      	ldr	r3, [pc, #116]	; (800aa34 <xTaskResumeAll+0x134>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d010      	beq.n	800a9ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9ca:	f000 f847 	bl	800aa5c <xTaskIncrementTick>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d002      	beq.n	800a9da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9d4:	4b16      	ldr	r3, [pc, #88]	; (800aa30 <xTaskResumeAll+0x130>)
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f1      	bne.n	800a9ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a9e6:	4b13      	ldr	r3, [pc, #76]	; (800aa34 <xTaskResumeAll+0x134>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9ec:	4b10      	ldr	r3, [pc, #64]	; (800aa30 <xTaskResumeAll+0x130>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d009      	beq.n	800aa08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9f8:	4b0f      	ldr	r3, [pc, #60]	; (800aa38 <xTaskResumeAll+0x138>)
 800a9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa08:	f001 f8e4 	bl	800bbd4 <vPortExitCritical>

	return xAlreadyYielded;
 800aa0c:	68bb      	ldr	r3, [r7, #8]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	2000613c 	.word	0x2000613c
 800aa1c:	20006114 	.word	0x20006114
 800aa20:	200060d4 	.word	0x200060d4
 800aa24:	2000611c 	.word	0x2000611c
 800aa28:	20005c44 	.word	0x20005c44
 800aa2c:	20005c40 	.word	0x20005c40
 800aa30:	20006128 	.word	0x20006128
 800aa34:	20006124 	.word	0x20006124
 800aa38:	e000ed04 	.word	0xe000ed04

0800aa3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa42:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <xTaskGetTickCount+0x1c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa48:	687b      	ldr	r3, [r7, #4]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	20006118 	.word	0x20006118

0800aa5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa62:	2300      	movs	r3, #0
 800aa64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa66:	4b4f      	ldr	r3, [pc, #316]	; (800aba4 <xTaskIncrementTick+0x148>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f040 808f 	bne.w	800ab8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa70:	4b4d      	ldr	r3, [pc, #308]	; (800aba8 <xTaskIncrementTick+0x14c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa78:	4a4b      	ldr	r2, [pc, #300]	; (800aba8 <xTaskIncrementTick+0x14c>)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d120      	bne.n	800aac6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa84:	4b49      	ldr	r3, [pc, #292]	; (800abac <xTaskIncrementTick+0x150>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00a      	beq.n	800aaa4 <xTaskIncrementTick+0x48>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	603b      	str	r3, [r7, #0]
}
 800aaa0:	bf00      	nop
 800aaa2:	e7fe      	b.n	800aaa2 <xTaskIncrementTick+0x46>
 800aaa4:	4b41      	ldr	r3, [pc, #260]	; (800abac <xTaskIncrementTick+0x150>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	60fb      	str	r3, [r7, #12]
 800aaaa:	4b41      	ldr	r3, [pc, #260]	; (800abb0 <xTaskIncrementTick+0x154>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a3f      	ldr	r2, [pc, #252]	; (800abac <xTaskIncrementTick+0x150>)
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	4a3f      	ldr	r2, [pc, #252]	; (800abb0 <xTaskIncrementTick+0x154>)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	4b3e      	ldr	r3, [pc, #248]	; (800abb4 <xTaskIncrementTick+0x158>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3301      	adds	r3, #1
 800aabe:	4a3d      	ldr	r2, [pc, #244]	; (800abb4 <xTaskIncrementTick+0x158>)
 800aac0:	6013      	str	r3, [r2, #0]
 800aac2:	f000 fadb 	bl	800b07c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aac6:	4b3c      	ldr	r3, [pc, #240]	; (800abb8 <xTaskIncrementTick+0x15c>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d349      	bcc.n	800ab64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aad0:	4b36      	ldr	r3, [pc, #216]	; (800abac <xTaskIncrementTick+0x150>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d104      	bne.n	800aae4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aada:	4b37      	ldr	r3, [pc, #220]	; (800abb8 <xTaskIncrementTick+0x15c>)
 800aadc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aae0:	601a      	str	r2, [r3, #0]
					break;
 800aae2:	e03f      	b.n	800ab64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae4:	4b31      	ldr	r3, [pc, #196]	; (800abac <xTaskIncrementTick+0x150>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aaf4:	693a      	ldr	r2, [r7, #16]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d203      	bcs.n	800ab04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aafc:	4a2e      	ldr	r2, [pc, #184]	; (800abb8 <xTaskIncrementTick+0x15c>)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab02:	e02f      	b.n	800ab64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	3304      	adds	r3, #4
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fe fe07 	bl	800971c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d004      	beq.n	800ab20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	3318      	adds	r3, #24
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe fdfe 	bl	800971c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab24:	4b25      	ldr	r3, [pc, #148]	; (800abbc <xTaskIncrementTick+0x160>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d903      	bls.n	800ab34 <xTaskIncrementTick+0xd8>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab30:	4a22      	ldr	r2, [pc, #136]	; (800abbc <xTaskIncrementTick+0x160>)
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4a1f      	ldr	r2, [pc, #124]	; (800abc0 <xTaskIncrementTick+0x164>)
 800ab42:	441a      	add	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	3304      	adds	r3, #4
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	f7fe fd89 	bl	8009662 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab54:	4b1b      	ldr	r3, [pc, #108]	; (800abc4 <xTaskIncrementTick+0x168>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d3b8      	bcc.n	800aad0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab62:	e7b5      	b.n	800aad0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab64:	4b17      	ldr	r3, [pc, #92]	; (800abc4 <xTaskIncrementTick+0x168>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6a:	4915      	ldr	r1, [pc, #84]	; (800abc0 <xTaskIncrementTick+0x164>)
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d901      	bls.n	800ab80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab80:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <xTaskIncrementTick+0x16c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d007      	beq.n	800ab98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	617b      	str	r3, [r7, #20]
 800ab8c:	e004      	b.n	800ab98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab8e:	4b0f      	ldr	r3, [pc, #60]	; (800abcc <xTaskIncrementTick+0x170>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3301      	adds	r3, #1
 800ab94:	4a0d      	ldr	r2, [pc, #52]	; (800abcc <xTaskIncrementTick+0x170>)
 800ab96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab98:	697b      	ldr	r3, [r7, #20]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3718      	adds	r7, #24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	2000613c 	.word	0x2000613c
 800aba8:	20006118 	.word	0x20006118
 800abac:	200060cc 	.word	0x200060cc
 800abb0:	200060d0 	.word	0x200060d0
 800abb4:	2000612c 	.word	0x2000612c
 800abb8:	20006134 	.word	0x20006134
 800abbc:	2000611c 	.word	0x2000611c
 800abc0:	20005c44 	.word	0x20005c44
 800abc4:	20005c40 	.word	0x20005c40
 800abc8:	20006128 	.word	0x20006128
 800abcc:	20006124 	.word	0x20006124

0800abd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abd6:	4b2a      	ldr	r3, [pc, #168]	; (800ac80 <vTaskSwitchContext+0xb0>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abde:	4b29      	ldr	r3, [pc, #164]	; (800ac84 <vTaskSwitchContext+0xb4>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abe4:	e046      	b.n	800ac74 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800abe6:	4b27      	ldr	r3, [pc, #156]	; (800ac84 <vTaskSwitchContext+0xb4>)
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abec:	4b26      	ldr	r3, [pc, #152]	; (800ac88 <vTaskSwitchContext+0xb8>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	60fb      	str	r3, [r7, #12]
 800abf2:	e010      	b.n	800ac16 <vTaskSwitchContext+0x46>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10a      	bne.n	800ac10 <vTaskSwitchContext+0x40>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	607b      	str	r3, [r7, #4]
}
 800ac0c:	bf00      	nop
 800ac0e:	e7fe      	b.n	800ac0e <vTaskSwitchContext+0x3e>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3b01      	subs	r3, #1
 800ac14:	60fb      	str	r3, [r7, #12]
 800ac16:	491d      	ldr	r1, [pc, #116]	; (800ac8c <vTaskSwitchContext+0xbc>)
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	440b      	add	r3, r1
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d0e4      	beq.n	800abf4 <vTaskSwitchContext+0x24>
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4a15      	ldr	r2, [pc, #84]	; (800ac8c <vTaskSwitchContext+0xbc>)
 800ac36:	4413      	add	r3, r2
 800ac38:	60bb      	str	r3, [r7, #8]
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	605a      	str	r2, [r3, #4]
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	685a      	ldr	r2, [r3, #4]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d104      	bne.n	800ac5a <vTaskSwitchContext+0x8a>
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	605a      	str	r2, [r3, #4]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	4a0b      	ldr	r2, [pc, #44]	; (800ac90 <vTaskSwitchContext+0xc0>)
 800ac62:	6013      	str	r3, [r2, #0]
 800ac64:	4a08      	ldr	r2, [pc, #32]	; (800ac88 <vTaskSwitchContext+0xb8>)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac6a:	4b09      	ldr	r3, [pc, #36]	; (800ac90 <vTaskSwitchContext+0xc0>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3354      	adds	r3, #84	; 0x54
 800ac70:	4a08      	ldr	r2, [pc, #32]	; (800ac94 <vTaskSwitchContext+0xc4>)
 800ac72:	6013      	str	r3, [r2, #0]
}
 800ac74:	bf00      	nop
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	2000613c 	.word	0x2000613c
 800ac84:	20006128 	.word	0x20006128
 800ac88:	2000611c 	.word	0x2000611c
 800ac8c:	20005c44 	.word	0x20005c44
 800ac90:	20005c40 	.word	0x20005c40
 800ac94:	200000b8 	.word	0x200000b8

0800ac98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10a      	bne.n	800acbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	60fb      	str	r3, [r7, #12]
}
 800acba:	bf00      	nop
 800acbc:	e7fe      	b.n	800acbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acbe:	4b07      	ldr	r3, [pc, #28]	; (800acdc <vTaskPlaceOnEventList+0x44>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3318      	adds	r3, #24
 800acc4:	4619      	mov	r1, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7fe fcef 	bl	80096aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800accc:	2101      	movs	r1, #1
 800acce:	6838      	ldr	r0, [r7, #0]
 800acd0:	f000 fa80 	bl	800b1d4 <prvAddCurrentTaskToDelayedList>
}
 800acd4:	bf00      	nop
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	20005c40 	.word	0x20005c40

0800ace0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10a      	bne.n	800ad08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800acf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf6:	f383 8811 	msr	BASEPRI, r3
 800acfa:	f3bf 8f6f 	isb	sy
 800acfe:	f3bf 8f4f 	dsb	sy
 800ad02:	617b      	str	r3, [r7, #20]
}
 800ad04:	bf00      	nop
 800ad06:	e7fe      	b.n	800ad06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad08:	4b0a      	ldr	r3, [pc, #40]	; (800ad34 <vTaskPlaceOnEventListRestricted+0x54>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3318      	adds	r3, #24
 800ad0e:	4619      	mov	r1, r3
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f7fe fca6 	bl	8009662 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d002      	beq.n	800ad22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad22:	6879      	ldr	r1, [r7, #4]
 800ad24:	68b8      	ldr	r0, [r7, #8]
 800ad26:	f000 fa55 	bl	800b1d4 <prvAddCurrentTaskToDelayedList>
	}
 800ad2a:	bf00      	nop
 800ad2c:	3718      	adds	r7, #24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20005c40 	.word	0x20005c40

0800ad38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10a      	bne.n	800ad64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	60fb      	str	r3, [r7, #12]
}
 800ad60:	bf00      	nop
 800ad62:	e7fe      	b.n	800ad62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	3318      	adds	r3, #24
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fe fcd7 	bl	800971c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad6e:	4b1e      	ldr	r3, [pc, #120]	; (800ade8 <xTaskRemoveFromEventList+0xb0>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d11d      	bne.n	800adb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	3304      	adds	r3, #4
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fe fcce 	bl	800971c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad84:	4b19      	ldr	r3, [pc, #100]	; (800adec <xTaskRemoveFromEventList+0xb4>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d903      	bls.n	800ad94 <xTaskRemoveFromEventList+0x5c>
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad90:	4a16      	ldr	r2, [pc, #88]	; (800adec <xTaskRemoveFromEventList+0xb4>)
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad98:	4613      	mov	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	4a13      	ldr	r2, [pc, #76]	; (800adf0 <xTaskRemoveFromEventList+0xb8>)
 800ada2:	441a      	add	r2, r3
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	3304      	adds	r3, #4
 800ada8:	4619      	mov	r1, r3
 800adaa:	4610      	mov	r0, r2
 800adac:	f7fe fc59 	bl	8009662 <vListInsertEnd>
 800adb0:	e005      	b.n	800adbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	3318      	adds	r3, #24
 800adb6:	4619      	mov	r1, r3
 800adb8:	480e      	ldr	r0, [pc, #56]	; (800adf4 <xTaskRemoveFromEventList+0xbc>)
 800adba:	f7fe fc52 	bl	8009662 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc2:	4b0d      	ldr	r3, [pc, #52]	; (800adf8 <xTaskRemoveFromEventList+0xc0>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc8:	429a      	cmp	r2, r3
 800adca:	d905      	bls.n	800add8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800adcc:	2301      	movs	r3, #1
 800adce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800add0:	4b0a      	ldr	r3, [pc, #40]	; (800adfc <xTaskRemoveFromEventList+0xc4>)
 800add2:	2201      	movs	r2, #1
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	e001      	b.n	800addc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800add8:	2300      	movs	r3, #0
 800adda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800addc:	697b      	ldr	r3, [r7, #20]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3718      	adds	r7, #24
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	2000613c 	.word	0x2000613c
 800adec:	2000611c 	.word	0x2000611c
 800adf0:	20005c44 	.word	0x20005c44
 800adf4:	200060d4 	.word	0x200060d4
 800adf8:	20005c40 	.word	0x20005c40
 800adfc:	20006128 	.word	0x20006128

0800ae00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae08:	4b06      	ldr	r3, [pc, #24]	; (800ae24 <vTaskInternalSetTimeOutState+0x24>)
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae10:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <vTaskInternalSetTimeOutState+0x28>)
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	605a      	str	r2, [r3, #4]
}
 800ae18:	bf00      	nop
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr
 800ae24:	2000612c 	.word	0x2000612c
 800ae28:	20006118 	.word	0x20006118

0800ae2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b088      	sub	sp, #32
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10a      	bne.n	800ae52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	613b      	str	r3, [r7, #16]
}
 800ae4e:	bf00      	nop
 800ae50:	e7fe      	b.n	800ae50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10a      	bne.n	800ae6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5c:	f383 8811 	msr	BASEPRI, r3
 800ae60:	f3bf 8f6f 	isb	sy
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	60fb      	str	r3, [r7, #12]
}
 800ae6a:	bf00      	nop
 800ae6c:	e7fe      	b.n	800ae6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae6e:	f000 fe81 	bl	800bb74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae72:	4b1d      	ldr	r3, [pc, #116]	; (800aee8 <xTaskCheckForTimeOut+0xbc>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	69ba      	ldr	r2, [r7, #24]
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae8a:	d102      	bne.n	800ae92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	61fb      	str	r3, [r7, #28]
 800ae90:	e023      	b.n	800aeda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	4b15      	ldr	r3, [pc, #84]	; (800aeec <xTaskCheckForTimeOut+0xc0>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d007      	beq.n	800aeae <xTaskCheckForTimeOut+0x82>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	69ba      	ldr	r2, [r7, #24]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d302      	bcc.n	800aeae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	61fb      	str	r3, [r7, #28]
 800aeac:	e015      	b.n	800aeda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d20b      	bcs.n	800aed0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	1ad2      	subs	r2, r2, r3
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff ff9b 	bl	800ae00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aeca:	2300      	movs	r3, #0
 800aecc:	61fb      	str	r3, [r7, #28]
 800aece:	e004      	b.n	800aeda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	2200      	movs	r2, #0
 800aed4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aed6:	2301      	movs	r3, #1
 800aed8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aeda:	f000 fe7b 	bl	800bbd4 <vPortExitCritical>

	return xReturn;
 800aede:	69fb      	ldr	r3, [r7, #28]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3720      	adds	r7, #32
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	20006118 	.word	0x20006118
 800aeec:	2000612c 	.word	0x2000612c

0800aef0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aef0:	b480      	push	{r7}
 800aef2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aef4:	4b03      	ldr	r3, [pc, #12]	; (800af04 <vTaskMissedYield+0x14>)
 800aef6:	2201      	movs	r2, #1
 800aef8:	601a      	str	r2, [r3, #0]
}
 800aefa:	bf00      	nop
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	20006128 	.word	0x20006128

0800af08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af10:	f000 f852 	bl	800afb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af14:	4b06      	ldr	r3, [pc, #24]	; (800af30 <prvIdleTask+0x28>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d9f9      	bls.n	800af10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af1c:	4b05      	ldr	r3, [pc, #20]	; (800af34 <prvIdleTask+0x2c>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af2c:	e7f0      	b.n	800af10 <prvIdleTask+0x8>
 800af2e:	bf00      	nop
 800af30:	20005c44 	.word	0x20005c44
 800af34:	e000ed04 	.word	0xe000ed04

0800af38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af3e:	2300      	movs	r3, #0
 800af40:	607b      	str	r3, [r7, #4]
 800af42:	e00c      	b.n	800af5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	4613      	mov	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4a12      	ldr	r2, [pc, #72]	; (800af98 <prvInitialiseTaskLists+0x60>)
 800af50:	4413      	add	r3, r2
 800af52:	4618      	mov	r0, r3
 800af54:	f7fe fb58 	bl	8009608 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	3301      	adds	r3, #1
 800af5c:	607b      	str	r3, [r7, #4]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b37      	cmp	r3, #55	; 0x37
 800af62:	d9ef      	bls.n	800af44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af64:	480d      	ldr	r0, [pc, #52]	; (800af9c <prvInitialiseTaskLists+0x64>)
 800af66:	f7fe fb4f 	bl	8009608 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af6a:	480d      	ldr	r0, [pc, #52]	; (800afa0 <prvInitialiseTaskLists+0x68>)
 800af6c:	f7fe fb4c 	bl	8009608 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af70:	480c      	ldr	r0, [pc, #48]	; (800afa4 <prvInitialiseTaskLists+0x6c>)
 800af72:	f7fe fb49 	bl	8009608 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af76:	480c      	ldr	r0, [pc, #48]	; (800afa8 <prvInitialiseTaskLists+0x70>)
 800af78:	f7fe fb46 	bl	8009608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af7c:	480b      	ldr	r0, [pc, #44]	; (800afac <prvInitialiseTaskLists+0x74>)
 800af7e:	f7fe fb43 	bl	8009608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af82:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <prvInitialiseTaskLists+0x78>)
 800af84:	4a05      	ldr	r2, [pc, #20]	; (800af9c <prvInitialiseTaskLists+0x64>)
 800af86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af88:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <prvInitialiseTaskLists+0x7c>)
 800af8a:	4a05      	ldr	r2, [pc, #20]	; (800afa0 <prvInitialiseTaskLists+0x68>)
 800af8c:	601a      	str	r2, [r3, #0]
}
 800af8e:	bf00      	nop
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	20005c44 	.word	0x20005c44
 800af9c:	200060a4 	.word	0x200060a4
 800afa0:	200060b8 	.word	0x200060b8
 800afa4:	200060d4 	.word	0x200060d4
 800afa8:	200060e8 	.word	0x200060e8
 800afac:	20006100 	.word	0x20006100
 800afb0:	200060cc 	.word	0x200060cc
 800afb4:	200060d0 	.word	0x200060d0

0800afb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afbe:	e019      	b.n	800aff4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800afc0:	f000 fdd8 	bl	800bb74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afc4:	4b10      	ldr	r3, [pc, #64]	; (800b008 <prvCheckTasksWaitingTermination+0x50>)
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3304      	adds	r3, #4
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fe fba3 	bl	800971c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800afd6:	4b0d      	ldr	r3, [pc, #52]	; (800b00c <prvCheckTasksWaitingTermination+0x54>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3b01      	subs	r3, #1
 800afdc:	4a0b      	ldr	r2, [pc, #44]	; (800b00c <prvCheckTasksWaitingTermination+0x54>)
 800afde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afe0:	4b0b      	ldr	r3, [pc, #44]	; (800b010 <prvCheckTasksWaitingTermination+0x58>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	4a0a      	ldr	r2, [pc, #40]	; (800b010 <prvCheckTasksWaitingTermination+0x58>)
 800afe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afea:	f000 fdf3 	bl	800bbd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f810 	bl	800b014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aff4:	4b06      	ldr	r3, [pc, #24]	; (800b010 <prvCheckTasksWaitingTermination+0x58>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1e1      	bne.n	800afc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800affc:	bf00      	nop
 800affe:	bf00      	nop
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	200060e8 	.word	0x200060e8
 800b00c:	20006114 	.word	0x20006114
 800b010:	200060fc 	.word	0x200060fc

0800b014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3354      	adds	r3, #84	; 0x54
 800b020:	4618      	mov	r0, r3
 800b022:	f001 ff03 	bl	800ce2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d108      	bne.n	800b042 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b034:	4618      	mov	r0, r3
 800b036:	f000 ff63 	bl	800bf00 <vPortFree>
				vPortFree( pxTCB );
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 ff60 	bl	800bf00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b040:	e018      	b.n	800b074 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d103      	bne.n	800b054 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 ff57 	bl	800bf00 <vPortFree>
	}
 800b052:	e00f      	b.n	800b074 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d00a      	beq.n	800b074 <prvDeleteTCB+0x60>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	60fb      	str	r3, [r7, #12]
}
 800b070:	bf00      	nop
 800b072:	e7fe      	b.n	800b072 <prvDeleteTCB+0x5e>
	}
 800b074:	bf00      	nop
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b082:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <prvResetNextTaskUnblockTime+0x38>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d104      	bne.n	800b096 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b08c:	4b0a      	ldr	r3, [pc, #40]	; (800b0b8 <prvResetNextTaskUnblockTime+0x3c>)
 800b08e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b092:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b094:	e008      	b.n	800b0a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b096:	4b07      	ldr	r3, [pc, #28]	; (800b0b4 <prvResetNextTaskUnblockTime+0x38>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	4a04      	ldr	r2, [pc, #16]	; (800b0b8 <prvResetNextTaskUnblockTime+0x3c>)
 800b0a6:	6013      	str	r3, [r2, #0]
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	200060cc 	.word	0x200060cc
 800b0b8:	20006134 	.word	0x20006134

0800b0bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	; (800b0f0 <xTaskGetSchedulerState+0x34>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d102      	bne.n	800b0d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	607b      	str	r3, [r7, #4]
 800b0ce:	e008      	b.n	800b0e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0d0:	4b08      	ldr	r3, [pc, #32]	; (800b0f4 <xTaskGetSchedulerState+0x38>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0d8:	2302      	movs	r3, #2
 800b0da:	607b      	str	r3, [r7, #4]
 800b0dc:	e001      	b.n	800b0e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0e2:	687b      	ldr	r3, [r7, #4]
	}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	20006120 	.word	0x20006120
 800b0f4:	2000613c 	.word	0x2000613c

0800b0f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b104:	2300      	movs	r3, #0
 800b106:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d056      	beq.n	800b1bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b10e:	4b2e      	ldr	r3, [pc, #184]	; (800b1c8 <xTaskPriorityDisinherit+0xd0>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	693a      	ldr	r2, [r7, #16]
 800b114:	429a      	cmp	r2, r3
 800b116:	d00a      	beq.n	800b12e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11c:	f383 8811 	msr	BASEPRI, r3
 800b120:	f3bf 8f6f 	isb	sy
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	60fb      	str	r3, [r7, #12]
}
 800b12a:	bf00      	nop
 800b12c:	e7fe      	b.n	800b12c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10a      	bne.n	800b14c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	60bb      	str	r3, [r7, #8]
}
 800b148:	bf00      	nop
 800b14a:	e7fe      	b.n	800b14a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b150:	1e5a      	subs	r2, r3, #1
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b15e:	429a      	cmp	r2, r3
 800b160:	d02c      	beq.n	800b1bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b166:	2b00      	cmp	r3, #0
 800b168:	d128      	bne.n	800b1bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	3304      	adds	r3, #4
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fe fad4 	bl	800971c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b180:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b18c:	4b0f      	ldr	r3, [pc, #60]	; (800b1cc <xTaskPriorityDisinherit+0xd4>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	429a      	cmp	r2, r3
 800b192:	d903      	bls.n	800b19c <xTaskPriorityDisinherit+0xa4>
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b198:	4a0c      	ldr	r2, [pc, #48]	; (800b1cc <xTaskPriorityDisinherit+0xd4>)
 800b19a:	6013      	str	r3, [r2, #0]
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4413      	add	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4a09      	ldr	r2, [pc, #36]	; (800b1d0 <xTaskPriorityDisinherit+0xd8>)
 800b1aa:	441a      	add	r2, r3
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	f7fe fa55 	bl	8009662 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1bc:	697b      	ldr	r3, [r7, #20]
	}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3718      	adds	r7, #24
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	20005c40 	.word	0x20005c40
 800b1cc:	2000611c 	.word	0x2000611c
 800b1d0:	20005c44 	.word	0x20005c44

0800b1d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b1de:	4b21      	ldr	r3, [pc, #132]	; (800b264 <prvAddCurrentTaskToDelayedList+0x90>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1e4:	4b20      	ldr	r3, [pc, #128]	; (800b268 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe fa96 	bl	800971c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1f6:	d10a      	bne.n	800b20e <prvAddCurrentTaskToDelayedList+0x3a>
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d007      	beq.n	800b20e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1fe:	4b1a      	ldr	r3, [pc, #104]	; (800b268 <prvAddCurrentTaskToDelayedList+0x94>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3304      	adds	r3, #4
 800b204:	4619      	mov	r1, r3
 800b206:	4819      	ldr	r0, [pc, #100]	; (800b26c <prvAddCurrentTaskToDelayedList+0x98>)
 800b208:	f7fe fa2b 	bl	8009662 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b20c:	e026      	b.n	800b25c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4413      	add	r3, r2
 800b214:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b216:	4b14      	ldr	r3, [pc, #80]	; (800b268 <prvAddCurrentTaskToDelayedList+0x94>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	429a      	cmp	r2, r3
 800b224:	d209      	bcs.n	800b23a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b226:	4b12      	ldr	r3, [pc, #72]	; (800b270 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	4b0f      	ldr	r3, [pc, #60]	; (800b268 <prvAddCurrentTaskToDelayedList+0x94>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3304      	adds	r3, #4
 800b230:	4619      	mov	r1, r3
 800b232:	4610      	mov	r0, r2
 800b234:	f7fe fa39 	bl	80096aa <vListInsert>
}
 800b238:	e010      	b.n	800b25c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b23a:	4b0e      	ldr	r3, [pc, #56]	; (800b274 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	4b0a      	ldr	r3, [pc, #40]	; (800b268 <prvAddCurrentTaskToDelayedList+0x94>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	3304      	adds	r3, #4
 800b244:	4619      	mov	r1, r3
 800b246:	4610      	mov	r0, r2
 800b248:	f7fe fa2f 	bl	80096aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b24c:	4b0a      	ldr	r3, [pc, #40]	; (800b278 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	429a      	cmp	r2, r3
 800b254:	d202      	bcs.n	800b25c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b256:	4a08      	ldr	r2, [pc, #32]	; (800b278 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	6013      	str	r3, [r2, #0]
}
 800b25c:	bf00      	nop
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	20006118 	.word	0x20006118
 800b268:	20005c40 	.word	0x20005c40
 800b26c:	20006100 	.word	0x20006100
 800b270:	200060d0 	.word	0x200060d0
 800b274:	200060cc 	.word	0x200060cc
 800b278:	20006134 	.word	0x20006134

0800b27c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b08a      	sub	sp, #40	; 0x28
 800b280:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b286:	f000 fb07 	bl	800b898 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b28a:	4b1c      	ldr	r3, [pc, #112]	; (800b2fc <xTimerCreateTimerTask+0x80>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d021      	beq.n	800b2d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b292:	2300      	movs	r3, #0
 800b294:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b296:	2300      	movs	r3, #0
 800b298:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b29a:	1d3a      	adds	r2, r7, #4
 800b29c:	f107 0108 	add.w	r1, r7, #8
 800b2a0:	f107 030c 	add.w	r3, r7, #12
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fe f995 	bl	80095d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b2aa:	6879      	ldr	r1, [r7, #4]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	9202      	str	r2, [sp, #8]
 800b2b2:	9301      	str	r3, [sp, #4]
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	460a      	mov	r2, r1
 800b2bc:	4910      	ldr	r1, [pc, #64]	; (800b300 <xTimerCreateTimerTask+0x84>)
 800b2be:	4811      	ldr	r0, [pc, #68]	; (800b304 <xTimerCreateTimerTask+0x88>)
 800b2c0:	f7ff f8b4 	bl	800a42c <xTaskCreateStatic>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	4a10      	ldr	r2, [pc, #64]	; (800b308 <xTimerCreateTimerTask+0x8c>)
 800b2c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b2ca:	4b0f      	ldr	r3, [pc, #60]	; (800b308 <xTimerCreateTimerTask+0x8c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10a      	bne.n	800b2f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	613b      	str	r3, [r7, #16]
}
 800b2ee:	bf00      	nop
 800b2f0:	e7fe      	b.n	800b2f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b2f2:	697b      	ldr	r3, [r7, #20]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	20006170 	.word	0x20006170
 800b300:	0800f180 	.word	0x0800f180
 800b304:	0800b441 	.word	0x0800b441
 800b308:	20006174 	.word	0x20006174

0800b30c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08a      	sub	sp, #40	; 0x28
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b31a:	2300      	movs	r3, #0
 800b31c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10a      	bne.n	800b33a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	623b      	str	r3, [r7, #32]
}
 800b336:	bf00      	nop
 800b338:	e7fe      	b.n	800b338 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b33a:	4b1a      	ldr	r3, [pc, #104]	; (800b3a4 <xTimerGenericCommand+0x98>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d02a      	beq.n	800b398 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	2b05      	cmp	r3, #5
 800b352:	dc18      	bgt.n	800b386 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b354:	f7ff feb2 	bl	800b0bc <xTaskGetSchedulerState>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d109      	bne.n	800b372 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b35e:	4b11      	ldr	r3, [pc, #68]	; (800b3a4 <xTimerGenericCommand+0x98>)
 800b360:	6818      	ldr	r0, [r3, #0]
 800b362:	f107 0110 	add.w	r1, r7, #16
 800b366:	2300      	movs	r3, #0
 800b368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b36a:	f7fe fba9 	bl	8009ac0 <xQueueGenericSend>
 800b36e:	6278      	str	r0, [r7, #36]	; 0x24
 800b370:	e012      	b.n	800b398 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b372:	4b0c      	ldr	r3, [pc, #48]	; (800b3a4 <xTimerGenericCommand+0x98>)
 800b374:	6818      	ldr	r0, [r3, #0]
 800b376:	f107 0110 	add.w	r1, r7, #16
 800b37a:	2300      	movs	r3, #0
 800b37c:	2200      	movs	r2, #0
 800b37e:	f7fe fb9f 	bl	8009ac0 <xQueueGenericSend>
 800b382:	6278      	str	r0, [r7, #36]	; 0x24
 800b384:	e008      	b.n	800b398 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b386:	4b07      	ldr	r3, [pc, #28]	; (800b3a4 <xTimerGenericCommand+0x98>)
 800b388:	6818      	ldr	r0, [r3, #0]
 800b38a:	f107 0110 	add.w	r1, r7, #16
 800b38e:	2300      	movs	r3, #0
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	f7fe fc93 	bl	8009cbc <xQueueGenericSendFromISR>
 800b396:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3728      	adds	r7, #40	; 0x28
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20006170 	.word	0x20006170

0800b3a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b088      	sub	sp, #32
 800b3ac:	af02      	add	r7, sp, #8
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3b2:	4b22      	ldr	r3, [pc, #136]	; (800b43c <prvProcessExpiredTimer+0x94>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	3304      	adds	r3, #4
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fe f9ab 	bl	800971c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3cc:	f003 0304 	and.w	r3, r3, #4
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d022      	beq.n	800b41a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	699a      	ldr	r2, [r3, #24]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	18d1      	adds	r1, r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	6978      	ldr	r0, [r7, #20]
 800b3e2:	f000 f8d1 	bl	800b588 <prvInsertTimerInActiveList>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d01f      	beq.n	800b42c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	6978      	ldr	r0, [r7, #20]
 800b3f8:	f7ff ff88 	bl	800b30c <xTimerGenericCommand>
 800b3fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d113      	bne.n	800b42c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	60fb      	str	r3, [r7, #12]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b420:	f023 0301 	bic.w	r3, r3, #1
 800b424:	b2da      	uxtb	r2, r3
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	6a1b      	ldr	r3, [r3, #32]
 800b430:	6978      	ldr	r0, [r7, #20]
 800b432:	4798      	blx	r3
}
 800b434:	bf00      	nop
 800b436:	3718      	adds	r7, #24
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	20006168 	.word	0x20006168

0800b440 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b448:	f107 0308 	add.w	r3, r7, #8
 800b44c:	4618      	mov	r0, r3
 800b44e:	f000 f857 	bl	800b500 <prvGetNextExpireTime>
 800b452:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	4619      	mov	r1, r3
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 f803 	bl	800b464 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b45e:	f000 f8d5 	bl	800b60c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b462:	e7f1      	b.n	800b448 <prvTimerTask+0x8>

0800b464 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b46e:	f7ff fa39 	bl	800a8e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b472:	f107 0308 	add.w	r3, r7, #8
 800b476:	4618      	mov	r0, r3
 800b478:	f000 f866 	bl	800b548 <prvSampleTimeNow>
 800b47c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d130      	bne.n	800b4e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10a      	bne.n	800b4a0 <prvProcessTimerOrBlockTask+0x3c>
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d806      	bhi.n	800b4a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b492:	f7ff fa35 	bl	800a900 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b496:	68f9      	ldr	r1, [r7, #12]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7ff ff85 	bl	800b3a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b49e:	e024      	b.n	800b4ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d008      	beq.n	800b4b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b4a6:	4b13      	ldr	r3, [pc, #76]	; (800b4f4 <prvProcessTimerOrBlockTask+0x90>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d101      	bne.n	800b4b4 <prvProcessTimerOrBlockTask+0x50>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e000      	b.n	800b4b6 <prvProcessTimerOrBlockTask+0x52>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b4b8:	4b0f      	ldr	r3, [pc, #60]	; (800b4f8 <prvProcessTimerOrBlockTask+0x94>)
 800b4ba:	6818      	ldr	r0, [r3, #0]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	f7fe ff7d 	bl	800a3c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b4ca:	f7ff fa19 	bl	800a900 <xTaskResumeAll>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10a      	bne.n	800b4ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b4d4:	4b09      	ldr	r3, [pc, #36]	; (800b4fc <prvProcessTimerOrBlockTask+0x98>)
 800b4d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	f3bf 8f6f 	isb	sy
}
 800b4e4:	e001      	b.n	800b4ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b4e6:	f7ff fa0b 	bl	800a900 <xTaskResumeAll>
}
 800b4ea:	bf00      	nop
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	2000616c 	.word	0x2000616c
 800b4f8:	20006170 	.word	0x20006170
 800b4fc:	e000ed04 	.word	0xe000ed04

0800b500 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b508:	4b0e      	ldr	r3, [pc, #56]	; (800b544 <prvGetNextExpireTime+0x44>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <prvGetNextExpireTime+0x16>
 800b512:	2201      	movs	r2, #1
 800b514:	e000      	b.n	800b518 <prvGetNextExpireTime+0x18>
 800b516:	2200      	movs	r2, #0
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d105      	bne.n	800b530 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b524:	4b07      	ldr	r3, [pc, #28]	; (800b544 <prvGetNextExpireTime+0x44>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	60fb      	str	r3, [r7, #12]
 800b52e:	e001      	b.n	800b534 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b534:	68fb      	ldr	r3, [r7, #12]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3714      	adds	r7, #20
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	20006168 	.word	0x20006168

0800b548 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b550:	f7ff fa74 	bl	800aa3c <xTaskGetTickCount>
 800b554:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b556:	4b0b      	ldr	r3, [pc, #44]	; (800b584 <prvSampleTimeNow+0x3c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d205      	bcs.n	800b56c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b560:	f000 f936 	bl	800b7d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	601a      	str	r2, [r3, #0]
 800b56a:	e002      	b.n	800b572 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b572:	4a04      	ldr	r2, [pc, #16]	; (800b584 <prvSampleTimeNow+0x3c>)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b578:	68fb      	ldr	r3, [r7, #12]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	20006178 	.word	0x20006178

0800b588 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b596:	2300      	movs	r3, #0
 800b598:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d812      	bhi.n	800b5d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	1ad2      	subs	r2, r2, r3
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d302      	bcc.n	800b5c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	617b      	str	r3, [r7, #20]
 800b5c0:	e01b      	b.n	800b5fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b5c2:	4b10      	ldr	r3, [pc, #64]	; (800b604 <prvInsertTimerInActiveList+0x7c>)
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	4610      	mov	r0, r2
 800b5ce:	f7fe f86c 	bl	80096aa <vListInsert>
 800b5d2:	e012      	b.n	800b5fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d206      	bcs.n	800b5ea <prvInsertTimerInActiveList+0x62>
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d302      	bcc.n	800b5ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	617b      	str	r3, [r7, #20]
 800b5e8:	e007      	b.n	800b5fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5ea:	4b07      	ldr	r3, [pc, #28]	; (800b608 <prvInsertTimerInActiveList+0x80>)
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	4610      	mov	r0, r2
 800b5f6:	f7fe f858 	bl	80096aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b5fa:	697b      	ldr	r3, [r7, #20]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3718      	adds	r7, #24
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	2000616c 	.word	0x2000616c
 800b608:	20006168 	.word	0x20006168

0800b60c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b08e      	sub	sp, #56	; 0x38
 800b610:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b612:	e0ca      	b.n	800b7aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	da18      	bge.n	800b64c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b61a:	1d3b      	adds	r3, r7, #4
 800b61c:	3304      	adds	r3, #4
 800b61e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10a      	bne.n	800b63c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	61fb      	str	r3, [r7, #28]
}
 800b638:	bf00      	nop
 800b63a:	e7fe      	b.n	800b63a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b642:	6850      	ldr	r0, [r2, #4]
 800b644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b646:	6892      	ldr	r2, [r2, #8]
 800b648:	4611      	mov	r1, r2
 800b64a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f2c0 80aa 	blt.w	800b7a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d004      	beq.n	800b66a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b662:	3304      	adds	r3, #4
 800b664:	4618      	mov	r0, r3
 800b666:	f7fe f859 	bl	800971c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b66a:	463b      	mov	r3, r7
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7ff ff6b 	bl	800b548 <prvSampleTimeNow>
 800b672:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b09      	cmp	r3, #9
 800b678:	f200 8097 	bhi.w	800b7aa <prvProcessReceivedCommands+0x19e>
 800b67c:	a201      	add	r2, pc, #4	; (adr r2, 800b684 <prvProcessReceivedCommands+0x78>)
 800b67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b682:	bf00      	nop
 800b684:	0800b6ad 	.word	0x0800b6ad
 800b688:	0800b6ad 	.word	0x0800b6ad
 800b68c:	0800b6ad 	.word	0x0800b6ad
 800b690:	0800b721 	.word	0x0800b721
 800b694:	0800b735 	.word	0x0800b735
 800b698:	0800b77f 	.word	0x0800b77f
 800b69c:	0800b6ad 	.word	0x0800b6ad
 800b6a0:	0800b6ad 	.word	0x0800b6ad
 800b6a4:	0800b721 	.word	0x0800b721
 800b6a8:	0800b735 	.word	0x0800b735
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6b2:	f043 0301 	orr.w	r3, r3, #1
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	699b      	ldr	r3, [r3, #24]
 800b6c4:	18d1      	adds	r1, r2, r3
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6cc:	f7ff ff5c 	bl	800b588 <prvInsertTimerInActiveList>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d069      	beq.n	800b7aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d8:	6a1b      	ldr	r3, [r3, #32]
 800b6da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6e4:	f003 0304 	and.w	r3, r3, #4
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d05e      	beq.n	800b7aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f0:	699b      	ldr	r3, [r3, #24]
 800b6f2:	441a      	add	r2, r3
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6fe:	f7ff fe05 	bl	800b30c <xTimerGenericCommand>
 800b702:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d14f      	bne.n	800b7aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	61bb      	str	r3, [r7, #24]
}
 800b71c:	bf00      	nop
 800b71e:	e7fe      	b.n	800b71e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b726:	f023 0301 	bic.w	r3, r3, #1
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b732:	e03a      	b.n	800b7aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b73a:	f043 0301 	orr.w	r3, r3, #1
 800b73e:	b2da      	uxtb	r2, r3
 800b740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10a      	bne.n	800b76a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	617b      	str	r3, [r7, #20]
}
 800b766:	bf00      	nop
 800b768:	e7fe      	b.n	800b768 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76c:	699a      	ldr	r2, [r3, #24]
 800b76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b770:	18d1      	adds	r1, r2, r3
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b778:	f7ff ff06 	bl	800b588 <prvInsertTimerInActiveList>
					break;
 800b77c:	e015      	b.n	800b7aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b784:	f003 0302 	and.w	r3, r3, #2
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d103      	bne.n	800b794 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b78c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b78e:	f000 fbb7 	bl	800bf00 <vPortFree>
 800b792:	e00a      	b.n	800b7aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b79a:	f023 0301 	bic.w	r3, r3, #1
 800b79e:	b2da      	uxtb	r2, r3
 800b7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b7a6:	e000      	b.n	800b7aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b7a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7aa:	4b08      	ldr	r3, [pc, #32]	; (800b7cc <prvProcessReceivedCommands+0x1c0>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	1d39      	adds	r1, r7, #4
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fe fb1e 	bl	8009df4 <xQueueReceive>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f47f af2a 	bne.w	800b614 <prvProcessReceivedCommands+0x8>
	}
}
 800b7c0:	bf00      	nop
 800b7c2:	bf00      	nop
 800b7c4:	3730      	adds	r7, #48	; 0x30
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20006170 	.word	0x20006170

0800b7d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7d6:	e048      	b.n	800b86a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7d8:	4b2d      	ldr	r3, [pc, #180]	; (800b890 <prvSwitchTimerLists+0xc0>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7e2:	4b2b      	ldr	r3, [pc, #172]	; (800b890 <prvSwitchTimerLists+0xc0>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	3304      	adds	r3, #4
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7fd ff93 	bl	800971c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b804:	f003 0304 	and.w	r3, r3, #4
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d02e      	beq.n	800b86a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	4413      	add	r3, r2
 800b814:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d90e      	bls.n	800b83c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b82a:	4b19      	ldr	r3, [pc, #100]	; (800b890 <prvSwitchTimerLists+0xc0>)
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3304      	adds	r3, #4
 800b832:	4619      	mov	r1, r3
 800b834:	4610      	mov	r0, r2
 800b836:	f7fd ff38 	bl	80096aa <vListInsert>
 800b83a:	e016      	b.n	800b86a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b83c:	2300      	movs	r3, #0
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	2300      	movs	r3, #0
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	2100      	movs	r1, #0
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f7ff fd60 	bl	800b30c <xTimerGenericCommand>
 800b84c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d10a      	bne.n	800b86a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	603b      	str	r3, [r7, #0]
}
 800b866:	bf00      	nop
 800b868:	e7fe      	b.n	800b868 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b86a:	4b09      	ldr	r3, [pc, #36]	; (800b890 <prvSwitchTimerLists+0xc0>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1b1      	bne.n	800b7d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b874:	4b06      	ldr	r3, [pc, #24]	; (800b890 <prvSwitchTimerLists+0xc0>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b87a:	4b06      	ldr	r3, [pc, #24]	; (800b894 <prvSwitchTimerLists+0xc4>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a04      	ldr	r2, [pc, #16]	; (800b890 <prvSwitchTimerLists+0xc0>)
 800b880:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b882:	4a04      	ldr	r2, [pc, #16]	; (800b894 <prvSwitchTimerLists+0xc4>)
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	6013      	str	r3, [r2, #0]
}
 800b888:	bf00      	nop
 800b88a:	3718      	adds	r7, #24
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	20006168 	.word	0x20006168
 800b894:	2000616c 	.word	0x2000616c

0800b898 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b89e:	f000 f969 	bl	800bb74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b8a2:	4b15      	ldr	r3, [pc, #84]	; (800b8f8 <prvCheckForValidListAndQueue+0x60>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d120      	bne.n	800b8ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b8aa:	4814      	ldr	r0, [pc, #80]	; (800b8fc <prvCheckForValidListAndQueue+0x64>)
 800b8ac:	f7fd feac 	bl	8009608 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b8b0:	4813      	ldr	r0, [pc, #76]	; (800b900 <prvCheckForValidListAndQueue+0x68>)
 800b8b2:	f7fd fea9 	bl	8009608 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b8b6:	4b13      	ldr	r3, [pc, #76]	; (800b904 <prvCheckForValidListAndQueue+0x6c>)
 800b8b8:	4a10      	ldr	r2, [pc, #64]	; (800b8fc <prvCheckForValidListAndQueue+0x64>)
 800b8ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b8bc:	4b12      	ldr	r3, [pc, #72]	; (800b908 <prvCheckForValidListAndQueue+0x70>)
 800b8be:	4a10      	ldr	r2, [pc, #64]	; (800b900 <prvCheckForValidListAndQueue+0x68>)
 800b8c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	4b11      	ldr	r3, [pc, #68]	; (800b90c <prvCheckForValidListAndQueue+0x74>)
 800b8c8:	4a11      	ldr	r2, [pc, #68]	; (800b910 <prvCheckForValidListAndQueue+0x78>)
 800b8ca:	2110      	movs	r1, #16
 800b8cc:	200a      	movs	r0, #10
 800b8ce:	f7fd ffb7 	bl	8009840 <xQueueGenericCreateStatic>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	4a08      	ldr	r2, [pc, #32]	; (800b8f8 <prvCheckForValidListAndQueue+0x60>)
 800b8d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b8d8:	4b07      	ldr	r3, [pc, #28]	; (800b8f8 <prvCheckForValidListAndQueue+0x60>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d005      	beq.n	800b8ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b8e0:	4b05      	ldr	r3, [pc, #20]	; (800b8f8 <prvCheckForValidListAndQueue+0x60>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	490b      	ldr	r1, [pc, #44]	; (800b914 <prvCheckForValidListAndQueue+0x7c>)
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe fd18 	bl	800a31c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8ec:	f000 f972 	bl	800bbd4 <vPortExitCritical>
}
 800b8f0:	bf00      	nop
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20006170 	.word	0x20006170
 800b8fc:	20006140 	.word	0x20006140
 800b900:	20006154 	.word	0x20006154
 800b904:	20006168 	.word	0x20006168
 800b908:	2000616c 	.word	0x2000616c
 800b90c:	2000621c 	.word	0x2000621c
 800b910:	2000617c 	.word	0x2000617c
 800b914:	0800f188 	.word	0x0800f188

0800b918 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	3b04      	subs	r3, #4
 800b928:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3b04      	subs	r3, #4
 800b936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	f023 0201 	bic.w	r2, r3, #1
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	3b04      	subs	r3, #4
 800b946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b948:	4a0c      	ldr	r2, [pc, #48]	; (800b97c <pxPortInitialiseStack+0x64>)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3b14      	subs	r3, #20
 800b952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	3b04      	subs	r3, #4
 800b95e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f06f 0202 	mvn.w	r2, #2
 800b966:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	3b20      	subs	r3, #32
 800b96c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b96e:	68fb      	ldr	r3, [r7, #12]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	0800b981 	.word	0x0800b981

0800b980 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b986:	2300      	movs	r3, #0
 800b988:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b98a:	4b12      	ldr	r3, [pc, #72]	; (800b9d4 <prvTaskExitError+0x54>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b992:	d00a      	beq.n	800b9aa <prvTaskExitError+0x2a>
	__asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	60fb      	str	r3, [r7, #12]
}
 800b9a6:	bf00      	nop
 800b9a8:	e7fe      	b.n	800b9a8 <prvTaskExitError+0x28>
	__asm volatile
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	60bb      	str	r3, [r7, #8]
}
 800b9bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b9be:	bf00      	nop
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0fc      	beq.n	800b9c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b9c6:	bf00      	nop
 800b9c8:	bf00      	nop
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	200000b4 	.word	0x200000b4
	...

0800b9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b9e0:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <pxCurrentTCBConst2>)
 800b9e2:	6819      	ldr	r1, [r3, #0]
 800b9e4:	6808      	ldr	r0, [r1, #0]
 800b9e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ea:	f380 8809 	msr	PSP, r0
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f04f 0000 	mov.w	r0, #0
 800b9f6:	f380 8811 	msr	BASEPRI, r0
 800b9fa:	4770      	bx	lr
 800b9fc:	f3af 8000 	nop.w

0800ba00 <pxCurrentTCBConst2>:
 800ba00:	20005c40 	.word	0x20005c40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba04:	bf00      	nop
 800ba06:	bf00      	nop

0800ba08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba08:	4808      	ldr	r0, [pc, #32]	; (800ba2c <prvPortStartFirstTask+0x24>)
 800ba0a:	6800      	ldr	r0, [r0, #0]
 800ba0c:	6800      	ldr	r0, [r0, #0]
 800ba0e:	f380 8808 	msr	MSP, r0
 800ba12:	f04f 0000 	mov.w	r0, #0
 800ba16:	f380 8814 	msr	CONTROL, r0
 800ba1a:	b662      	cpsie	i
 800ba1c:	b661      	cpsie	f
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	df00      	svc	0
 800ba28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba2a:	bf00      	nop
 800ba2c:	e000ed08 	.word	0xe000ed08

0800ba30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba36:	4b46      	ldr	r3, [pc, #280]	; (800bb50 <xPortStartScheduler+0x120>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a46      	ldr	r2, [pc, #280]	; (800bb54 <xPortStartScheduler+0x124>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d10a      	bne.n	800ba56 <xPortStartScheduler+0x26>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	613b      	str	r3, [r7, #16]
}
 800ba52:	bf00      	nop
 800ba54:	e7fe      	b.n	800ba54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba56:	4b3e      	ldr	r3, [pc, #248]	; (800bb50 <xPortStartScheduler+0x120>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a3f      	ldr	r2, [pc, #252]	; (800bb58 <xPortStartScheduler+0x128>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d10a      	bne.n	800ba76 <xPortStartScheduler+0x46>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	60fb      	str	r3, [r7, #12]
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba76:	4b39      	ldr	r3, [pc, #228]	; (800bb5c <xPortStartScheduler+0x12c>)
 800ba78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	22ff      	movs	r2, #255	; 0xff
 800ba86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	4b31      	ldr	r3, [pc, #196]	; (800bb60 <xPortStartScheduler+0x130>)
 800ba9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba9e:	4b31      	ldr	r3, [pc, #196]	; (800bb64 <xPortStartScheduler+0x134>)
 800baa0:	2207      	movs	r2, #7
 800baa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baa4:	e009      	b.n	800baba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800baa6:	4b2f      	ldr	r3, [pc, #188]	; (800bb64 <xPortStartScheduler+0x134>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3b01      	subs	r3, #1
 800baac:	4a2d      	ldr	r2, [pc, #180]	; (800bb64 <xPortStartScheduler+0x134>)
 800baae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bab0:	78fb      	ldrb	r3, [r7, #3]
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baba:	78fb      	ldrb	r3, [r7, #3]
 800babc:	b2db      	uxtb	r3, r3
 800babe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bac2:	2b80      	cmp	r3, #128	; 0x80
 800bac4:	d0ef      	beq.n	800baa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bac6:	4b27      	ldr	r3, [pc, #156]	; (800bb64 <xPortStartScheduler+0x134>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f1c3 0307 	rsb	r3, r3, #7
 800bace:	2b04      	cmp	r3, #4
 800bad0:	d00a      	beq.n	800bae8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	60bb      	str	r3, [r7, #8]
}
 800bae4:	bf00      	nop
 800bae6:	e7fe      	b.n	800bae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bae8:	4b1e      	ldr	r3, [pc, #120]	; (800bb64 <xPortStartScheduler+0x134>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	021b      	lsls	r3, r3, #8
 800baee:	4a1d      	ldr	r2, [pc, #116]	; (800bb64 <xPortStartScheduler+0x134>)
 800baf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800baf2:	4b1c      	ldr	r3, [pc, #112]	; (800bb64 <xPortStartScheduler+0x134>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bafa:	4a1a      	ldr	r2, [pc, #104]	; (800bb64 <xPortStartScheduler+0x134>)
 800bafc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb06:	4b18      	ldr	r3, [pc, #96]	; (800bb68 <xPortStartScheduler+0x138>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a17      	ldr	r2, [pc, #92]	; (800bb68 <xPortStartScheduler+0x138>)
 800bb0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb12:	4b15      	ldr	r3, [pc, #84]	; (800bb68 <xPortStartScheduler+0x138>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a14      	ldr	r2, [pc, #80]	; (800bb68 <xPortStartScheduler+0x138>)
 800bb18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb1e:	f000 f8dd 	bl	800bcdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb22:	4b12      	ldr	r3, [pc, #72]	; (800bb6c <xPortStartScheduler+0x13c>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb28:	f000 f8fc 	bl	800bd24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb2c:	4b10      	ldr	r3, [pc, #64]	; (800bb70 <xPortStartScheduler+0x140>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a0f      	ldr	r2, [pc, #60]	; (800bb70 <xPortStartScheduler+0x140>)
 800bb32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb38:	f7ff ff66 	bl	800ba08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb3c:	f7ff f848 	bl	800abd0 <vTaskSwitchContext>
	prvTaskExitError();
 800bb40:	f7ff ff1e 	bl	800b980 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	e000ed00 	.word	0xe000ed00
 800bb54:	410fc271 	.word	0x410fc271
 800bb58:	410fc270 	.word	0x410fc270
 800bb5c:	e000e400 	.word	0xe000e400
 800bb60:	2000626c 	.word	0x2000626c
 800bb64:	20006270 	.word	0x20006270
 800bb68:	e000ed20 	.word	0xe000ed20
 800bb6c:	200000b4 	.word	0x200000b4
 800bb70:	e000ef34 	.word	0xe000ef34

0800bb74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
	__asm volatile
 800bb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	607b      	str	r3, [r7, #4]
}
 800bb8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb8e:	4b0f      	ldr	r3, [pc, #60]	; (800bbcc <vPortEnterCritical+0x58>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3301      	adds	r3, #1
 800bb94:	4a0d      	ldr	r2, [pc, #52]	; (800bbcc <vPortEnterCritical+0x58>)
 800bb96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb98:	4b0c      	ldr	r3, [pc, #48]	; (800bbcc <vPortEnterCritical+0x58>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d10f      	bne.n	800bbc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bba0:	4b0b      	ldr	r3, [pc, #44]	; (800bbd0 <vPortEnterCritical+0x5c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00a      	beq.n	800bbc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	603b      	str	r3, [r7, #0]
}
 800bbbc:	bf00      	nop
 800bbbe:	e7fe      	b.n	800bbbe <vPortEnterCritical+0x4a>
	}
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	200000b4 	.word	0x200000b4
 800bbd0:	e000ed04 	.word	0xe000ed04

0800bbd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bbda:	4b12      	ldr	r3, [pc, #72]	; (800bc24 <vPortExitCritical+0x50>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10a      	bne.n	800bbf8 <vPortExitCritical+0x24>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	607b      	str	r3, [r7, #4]
}
 800bbf4:	bf00      	nop
 800bbf6:	e7fe      	b.n	800bbf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bbf8:	4b0a      	ldr	r3, [pc, #40]	; (800bc24 <vPortExitCritical+0x50>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	4a09      	ldr	r2, [pc, #36]	; (800bc24 <vPortExitCritical+0x50>)
 800bc00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc02:	4b08      	ldr	r3, [pc, #32]	; (800bc24 <vPortExitCritical+0x50>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d105      	bne.n	800bc16 <vPortExitCritical+0x42>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	f383 8811 	msr	BASEPRI, r3
}
 800bc14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc16:	bf00      	nop
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	200000b4 	.word	0x200000b4
	...

0800bc30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc30:	f3ef 8009 	mrs	r0, PSP
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	4b15      	ldr	r3, [pc, #84]	; (800bc90 <pxCurrentTCBConst>)
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	f01e 0f10 	tst.w	lr, #16
 800bc40:	bf08      	it	eq
 800bc42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4a:	6010      	str	r0, [r2, #0]
 800bc4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc54:	f380 8811 	msr	BASEPRI, r0
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f7fe ffb6 	bl	800abd0 <vTaskSwitchContext>
 800bc64:	f04f 0000 	mov.w	r0, #0
 800bc68:	f380 8811 	msr	BASEPRI, r0
 800bc6c:	bc09      	pop	{r0, r3}
 800bc6e:	6819      	ldr	r1, [r3, #0]
 800bc70:	6808      	ldr	r0, [r1, #0]
 800bc72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc76:	f01e 0f10 	tst.w	lr, #16
 800bc7a:	bf08      	it	eq
 800bc7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc80:	f380 8809 	msr	PSP, r0
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	f3af 8000 	nop.w

0800bc90 <pxCurrentTCBConst>:
 800bc90:	20005c40 	.word	0x20005c40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop

0800bc98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	607b      	str	r3, [r7, #4]
}
 800bcb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bcb2:	f7fe fed3 	bl	800aa5c <xTaskIncrementTick>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d003      	beq.n	800bcc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcbc:	4b06      	ldr	r3, [pc, #24]	; (800bcd8 <xPortSysTickHandler+0x40>)
 800bcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	f383 8811 	msr	BASEPRI, r3
}
 800bcce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bcd0:	bf00      	nop
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	e000ed04 	.word	0xe000ed04

0800bcdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bcdc:	b480      	push	{r7}
 800bcde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bce0:	4b0b      	ldr	r3, [pc, #44]	; (800bd10 <vPortSetupTimerInterrupt+0x34>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bce6:	4b0b      	ldr	r3, [pc, #44]	; (800bd14 <vPortSetupTimerInterrupt+0x38>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcec:	4b0a      	ldr	r3, [pc, #40]	; (800bd18 <vPortSetupTimerInterrupt+0x3c>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a0a      	ldr	r2, [pc, #40]	; (800bd1c <vPortSetupTimerInterrupt+0x40>)
 800bcf2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf6:	099b      	lsrs	r3, r3, #6
 800bcf8:	4a09      	ldr	r2, [pc, #36]	; (800bd20 <vPortSetupTimerInterrupt+0x44>)
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcfe:	4b04      	ldr	r3, [pc, #16]	; (800bd10 <vPortSetupTimerInterrupt+0x34>)
 800bd00:	2207      	movs	r2, #7
 800bd02:	601a      	str	r2, [r3, #0]
}
 800bd04:	bf00      	nop
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	e000e010 	.word	0xe000e010
 800bd14:	e000e018 	.word	0xe000e018
 800bd18:	20000098 	.word	0x20000098
 800bd1c:	10624dd3 	.word	0x10624dd3
 800bd20:	e000e014 	.word	0xe000e014

0800bd24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd34 <vPortEnableVFP+0x10>
 800bd28:	6801      	ldr	r1, [r0, #0]
 800bd2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd2e:	6001      	str	r1, [r0, #0]
 800bd30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd32:	bf00      	nop
 800bd34:	e000ed88 	.word	0xe000ed88

0800bd38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd3e:	f3ef 8305 	mrs	r3, IPSR
 800bd42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b0f      	cmp	r3, #15
 800bd48:	d914      	bls.n	800bd74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd4a:	4a17      	ldr	r2, [pc, #92]	; (800bda8 <vPortValidateInterruptPriority+0x70>)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	4413      	add	r3, r2
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd54:	4b15      	ldr	r3, [pc, #84]	; (800bdac <vPortValidateInterruptPriority+0x74>)
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	7afa      	ldrb	r2, [r7, #11]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d20a      	bcs.n	800bd74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	607b      	str	r3, [r7, #4]
}
 800bd70:	bf00      	nop
 800bd72:	e7fe      	b.n	800bd72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd74:	4b0e      	ldr	r3, [pc, #56]	; (800bdb0 <vPortValidateInterruptPriority+0x78>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd7c:	4b0d      	ldr	r3, [pc, #52]	; (800bdb4 <vPortValidateInterruptPriority+0x7c>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d90a      	bls.n	800bd9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd88:	f383 8811 	msr	BASEPRI, r3
 800bd8c:	f3bf 8f6f 	isb	sy
 800bd90:	f3bf 8f4f 	dsb	sy
 800bd94:	603b      	str	r3, [r7, #0]
}
 800bd96:	bf00      	nop
 800bd98:	e7fe      	b.n	800bd98 <vPortValidateInterruptPriority+0x60>
	}
 800bd9a:	bf00      	nop
 800bd9c:	3714      	adds	r7, #20
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop
 800bda8:	e000e3f0 	.word	0xe000e3f0
 800bdac:	2000626c 	.word	0x2000626c
 800bdb0:	e000ed0c 	.word	0xe000ed0c
 800bdb4:	20006270 	.word	0x20006270

0800bdb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b088      	sub	sp, #32
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800bdc4:	4b48      	ldr	r3, [pc, #288]	; (800bee8 <pvPortMalloc+0x130>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10a      	bne.n	800bde2 <pvPortMalloc+0x2a>
	__asm volatile
 800bdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd0:	f383 8811 	msr	BASEPRI, r3
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	60fb      	str	r3, [r7, #12]
}
 800bdde:	bf00      	nop
 800bde0:	e7fe      	b.n	800bde0 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800bde2:	f7fe fd7f 	bl	800a8e4 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bde6:	4b41      	ldr	r3, [pc, #260]	; (800beec <pvPortMalloc+0x134>)
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4013      	ands	r3, r2
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d172      	bne.n	800bed8 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00d      	beq.n	800be14 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800bdf8:	2208      	movs	r2, #8
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f003 0307 	and.w	r3, r3, #7
 800be06:	2b00      	cmp	r3, #0
 800be08:	d004      	beq.n	800be14 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f023 0307 	bic.w	r3, r3, #7
 800be10:	3308      	adds	r3, #8
 800be12:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d05e      	beq.n	800bed8 <pvPortMalloc+0x120>
 800be1a:	4b35      	ldr	r3, [pc, #212]	; (800bef0 <pvPortMalloc+0x138>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	429a      	cmp	r2, r3
 800be22:	d859      	bhi.n	800bed8 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be24:	4b33      	ldr	r3, [pc, #204]	; (800bef4 <pvPortMalloc+0x13c>)
 800be26:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800be28:	4b32      	ldr	r3, [pc, #200]	; (800bef4 <pvPortMalloc+0x13c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be2e:	e004      	b.n	800be3a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	429a      	cmp	r2, r3
 800be42:	d903      	bls.n	800be4c <pvPortMalloc+0x94>
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1f1      	bne.n	800be30 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be4c:	4b26      	ldr	r3, [pc, #152]	; (800bee8 <pvPortMalloc+0x130>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	69fa      	ldr	r2, [r7, #28]
 800be52:	429a      	cmp	r2, r3
 800be54:	d040      	beq.n	800bed8 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2208      	movs	r2, #8
 800be5c:	4413      	add	r3, r2
 800be5e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	685a      	ldr	r2, [r3, #4]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	1ad2      	subs	r2, r2, r3
 800be70:	2308      	movs	r3, #8
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	429a      	cmp	r2, r3
 800be76:	d90f      	bls.n	800be98 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be78:	69fa      	ldr	r2, [r7, #28]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4413      	add	r3, r2
 800be7e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	685a      	ldr	r2, [r3, #4]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	1ad2      	subs	r2, r2, r3
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800be92:	6938      	ldr	r0, [r7, #16]
 800be94:	f000 f8a2 	bl	800bfdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be98:	4b15      	ldr	r3, [pc, #84]	; (800bef0 <pvPortMalloc+0x138>)
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	4a13      	ldr	r2, [pc, #76]	; (800bef0 <pvPortMalloc+0x138>)
 800bea4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bea6:	4b12      	ldr	r3, [pc, #72]	; (800bef0 <pvPortMalloc+0x138>)
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	4b13      	ldr	r3, [pc, #76]	; (800bef8 <pvPortMalloc+0x140>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d203      	bcs.n	800beba <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800beb2:	4b0f      	ldr	r3, [pc, #60]	; (800bef0 <pvPortMalloc+0x138>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a10      	ldr	r2, [pc, #64]	; (800bef8 <pvPortMalloc+0x140>)
 800beb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	4b0b      	ldr	r3, [pc, #44]	; (800beec <pvPortMalloc+0x134>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	431a      	orrs	r2, r3
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	2200      	movs	r2, #0
 800becc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bece:	4b0b      	ldr	r3, [pc, #44]	; (800befc <pvPortMalloc+0x144>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3301      	adds	r3, #1
 800bed4:	4a09      	ldr	r2, [pc, #36]	; (800befc <pvPortMalloc+0x144>)
 800bed6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bed8:	f7fe fd12 	bl	800a900 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800bedc:	697b      	ldr	r3, [r7, #20]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3720      	adds	r7, #32
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	2000627c 	.word	0x2000627c
 800beec:	20006290 	.word	0x20006290
 800bef0:	20006280 	.word	0x20006280
 800bef4:	20006274 	.word	0x20006274
 800bef8:	20006284 	.word	0x20006284
 800befc:	20006288 	.word	0x20006288

0800bf00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d04d      	beq.n	800bfae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf12:	2308      	movs	r3, #8
 800bf14:	425b      	negs	r3, r3
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	4413      	add	r3, r2
 800bf1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	4b24      	ldr	r3, [pc, #144]	; (800bfb8 <vPortFree+0xb8>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4013      	ands	r3, r2
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10a      	bne.n	800bf44 <vPortFree+0x44>
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	60fb      	str	r3, [r7, #12]
}
 800bf40:	bf00      	nop
 800bf42:	e7fe      	b.n	800bf42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00a      	beq.n	800bf62 <vPortFree+0x62>
	__asm volatile
 800bf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf50:	f383 8811 	msr	BASEPRI, r3
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	60bb      	str	r3, [r7, #8]
}
 800bf5e:	bf00      	nop
 800bf60:	e7fe      	b.n	800bf60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	685a      	ldr	r2, [r3, #4]
 800bf66:	4b14      	ldr	r3, [pc, #80]	; (800bfb8 <vPortFree+0xb8>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d01e      	beq.n	800bfae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d11a      	bne.n	800bfae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	4b0e      	ldr	r3, [pc, #56]	; (800bfb8 <vPortFree+0xb8>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	43db      	mvns	r3, r3
 800bf82:	401a      	ands	r2, r3
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf88:	f7fe fcac 	bl	800a8e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	4b0a      	ldr	r3, [pc, #40]	; (800bfbc <vPortFree+0xbc>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4413      	add	r3, r2
 800bf96:	4a09      	ldr	r2, [pc, #36]	; (800bfbc <vPortFree+0xbc>)
 800bf98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf9a:	6938      	ldr	r0, [r7, #16]
 800bf9c:	f000 f81e 	bl	800bfdc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bfa0:	4b07      	ldr	r3, [pc, #28]	; (800bfc0 <vPortFree+0xc0>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	4a06      	ldr	r2, [pc, #24]	; (800bfc0 <vPortFree+0xc0>)
 800bfa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bfaa:	f7fe fca9 	bl	800a900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bfae:	bf00      	nop
 800bfb0:	3718      	adds	r7, #24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20006290 	.word	0x20006290
 800bfbc:	20006280 	.word	0x20006280
 800bfc0:	2000628c 	.word	0x2000628c

0800bfc4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800bfc8:	4b03      	ldr	r3, [pc, #12]	; (800bfd8 <xPortGetFreeHeapSize+0x14>)
 800bfca:	681b      	ldr	r3, [r3, #0]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	20006280 	.word	0x20006280

0800bfdc <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bfe4:	4b28      	ldr	r3, [pc, #160]	; (800c088 <prvInsertBlockIntoFreeList+0xac>)
 800bfe6:	60fb      	str	r3, [r7, #12]
 800bfe8:	e002      	b.n	800bff0 <prvInsertBlockIntoFreeList+0x14>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	60fb      	str	r3, [r7, #12]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d8f7      	bhi.n	800bfea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	4413      	add	r3, r2
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d108      	bne.n	800c01e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	441a      	add	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	441a      	add	r2, r3
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d118      	bne.n	800c064 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	4b15      	ldr	r3, [pc, #84]	; (800c08c <prvInsertBlockIntoFreeList+0xb0>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d00d      	beq.n	800c05a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685a      	ldr	r2, [r3, #4]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	441a      	add	r2, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	601a      	str	r2, [r3, #0]
 800c058:	e008      	b.n	800c06c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c05a:	4b0c      	ldr	r3, [pc, #48]	; (800c08c <prvInsertBlockIntoFreeList+0xb0>)
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	601a      	str	r2, [r3, #0]
 800c062:	e003      	b.n	800c06c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	429a      	cmp	r2, r3
 800c072:	d002      	beq.n	800c07a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c07a:	bf00      	nop
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	20006274 	.word	0x20006274
 800c08c:	2000627c 	.word	0x2000627c

0800c090 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800c090:	b480      	push	{r7}
 800c092:	b08f      	sub	sp, #60	; 0x3c
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800c098:	2300      	movs	r3, #0
 800c09a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800c0a4:	4b5a      	ldr	r3, [pc, #360]	; (800c210 <vPortDefineHeapRegions+0x180>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00a      	beq.n	800c0c2 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	617b      	str	r3, [r7, #20]
}
 800c0be:	bf00      	nop
 800c0c0:	e7fe      	b.n	800c0c0 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c4:	00db      	lsls	r3, r3, #3
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800c0cc:	e07d      	b.n	800c1ca <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800c0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0dc:	f003 0307 	and.w	r3, r3, #7
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00e      	beq.n	800c102 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e6:	3307      	adds	r3, #7
 800c0e8:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ec:	f023 0307 	bic.w	r3, r3, #7
 800c0f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fa:	1ad3      	subs	r3, r2, r3
 800c0fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0fe:	4413      	add	r3, r2
 800c100:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800c106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d106      	bne.n	800c11a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	4a41      	ldr	r2, [pc, #260]	; (800c214 <vPortDefineHeapRegions+0x184>)
 800c110:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800c112:	4b40      	ldr	r3, [pc, #256]	; (800c214 <vPortDefineHeapRegions+0x184>)
 800c114:	2200      	movs	r2, #0
 800c116:	605a      	str	r2, [r3, #4]
 800c118:	e01f      	b.n	800c15a <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800c11a:	4b3d      	ldr	r3, [pc, #244]	; (800c210 <vPortDefineHeapRegions+0x180>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10a      	bne.n	800c138 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	613b      	str	r3, [r7, #16]
}
 800c134:	bf00      	nop
 800c136:	e7fe      	b.n	800c136 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800c138:	4b35      	ldr	r3, [pc, #212]	; (800c210 <vPortDefineHeapRegions+0x180>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	461a      	mov	r2, r3
 800c13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c140:	4293      	cmp	r3, r2
 800c142:	d80a      	bhi.n	800c15a <vPortDefineHeapRegions+0xca>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	60fb      	str	r3, [r7, #12]
}
 800c156:	bf00      	nop
 800c158:	e7fe      	b.n	800c158 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800c15a:	4b2d      	ldr	r3, [pc, #180]	; (800c210 <vPortDefineHeapRegions+0x180>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800c160:	69fa      	ldr	r2, [r7, #28]
 800c162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c164:	4413      	add	r3, r2
 800c166:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800c168:	2208      	movs	r2, #8
 800c16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16c:	1a9b      	subs	r3, r3, r2
 800c16e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c172:	f023 0307 	bic.w	r3, r3, #7
 800c176:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800c178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17a:	4a25      	ldr	r2, [pc, #148]	; (800c210 <vPortDefineHeapRegions+0x180>)
 800c17c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800c17e:	4b24      	ldr	r3, [pc, #144]	; (800c210 <vPortDefineHeapRegions+0x180>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2200      	movs	r2, #0
 800c184:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800c186:	4b22      	ldr	r3, [pc, #136]	; (800c210 <vPortDefineHeapRegions+0x180>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2200      	movs	r2, #0
 800c18c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800c192:	6a3b      	ldr	r3, [r7, #32]
 800c194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c196:	1ad2      	subs	r2, r2, r3
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800c19c:	4b1c      	ldr	r3, [pc, #112]	; (800c210 <vPortDefineHeapRegions+0x180>)
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	6a3b      	ldr	r3, [r7, #32]
 800c1a2:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d002      	beq.n	800c1b0 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	6a3a      	ldr	r2, [r7, #32]
 800c1ae:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800c1b0:	6a3b      	ldr	r3, [r7, #32]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1b6:	4413      	add	r3, r2
 800c1b8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800c1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1bc:	3301      	adds	r3, #1
 800c1be:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c2:	00db      	lsls	r3, r3, #3
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f47f af7d 	bne.w	800c0ce <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800c1d4:	4a10      	ldr	r2, [pc, #64]	; (800c218 <vPortDefineHeapRegions+0x188>)
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800c1da:	4a10      	ldr	r2, [pc, #64]	; (800c21c <vPortDefineHeapRegions+0x18c>)
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1de:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10a      	bne.n	800c1fc <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800c1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	60bb      	str	r3, [r7, #8]
}
 800c1f8:	bf00      	nop
 800c1fa:	e7fe      	b.n	800c1fa <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c1fc:	4b08      	ldr	r3, [pc, #32]	; (800c220 <vPortDefineHeapRegions+0x190>)
 800c1fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c202:	601a      	str	r2, [r3, #0]
}
 800c204:	bf00      	nop
 800c206:	373c      	adds	r7, #60	; 0x3c
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	2000627c 	.word	0x2000627c
 800c214:	20006274 	.word	0x20006274
 800c218:	20006284 	.word	0x20006284
 800c21c:	20006280 	.word	0x20006280
 800c220:	20006290 	.word	0x20006290

0800c224 <atol>:
 800c224:	220a      	movs	r2, #10
 800c226:	2100      	movs	r1, #0
 800c228:	f000 bf9e 	b.w	800d168 <strtol>

0800c22c <calloc>:
 800c22c:	4b02      	ldr	r3, [pc, #8]	; (800c238 <calloc+0xc>)
 800c22e:	460a      	mov	r2, r1
 800c230:	4601      	mov	r1, r0
 800c232:	6818      	ldr	r0, [r3, #0]
 800c234:	f000 b9f0 	b.w	800c618 <_calloc_r>
 800c238:	200000b8 	.word	0x200000b8

0800c23c <__errno>:
 800c23c:	4b01      	ldr	r3, [pc, #4]	; (800c244 <__errno+0x8>)
 800c23e:	6818      	ldr	r0, [r3, #0]
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	200000b8 	.word	0x200000b8

0800c248 <std>:
 800c248:	2300      	movs	r3, #0
 800c24a:	b510      	push	{r4, lr}
 800c24c:	4604      	mov	r4, r0
 800c24e:	e9c0 3300 	strd	r3, r3, [r0]
 800c252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c256:	6083      	str	r3, [r0, #8]
 800c258:	8181      	strh	r1, [r0, #12]
 800c25a:	6643      	str	r3, [r0, #100]	; 0x64
 800c25c:	81c2      	strh	r2, [r0, #14]
 800c25e:	6183      	str	r3, [r0, #24]
 800c260:	4619      	mov	r1, r3
 800c262:	2208      	movs	r2, #8
 800c264:	305c      	adds	r0, #92	; 0x5c
 800c266:	f000 f9cf 	bl	800c608 <memset>
 800c26a:	4b05      	ldr	r3, [pc, #20]	; (800c280 <std+0x38>)
 800c26c:	6263      	str	r3, [r4, #36]	; 0x24
 800c26e:	4b05      	ldr	r3, [pc, #20]	; (800c284 <std+0x3c>)
 800c270:	62a3      	str	r3, [r4, #40]	; 0x28
 800c272:	4b05      	ldr	r3, [pc, #20]	; (800c288 <std+0x40>)
 800c274:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c276:	4b05      	ldr	r3, [pc, #20]	; (800c28c <std+0x44>)
 800c278:	6224      	str	r4, [r4, #32]
 800c27a:	6323      	str	r3, [r4, #48]	; 0x30
 800c27c:	bd10      	pop	{r4, pc}
 800c27e:	bf00      	nop
 800c280:	0800cf45 	.word	0x0800cf45
 800c284:	0800cf67 	.word	0x0800cf67
 800c288:	0800cf9f 	.word	0x0800cf9f
 800c28c:	0800cfc3 	.word	0x0800cfc3

0800c290 <_cleanup_r>:
 800c290:	4901      	ldr	r1, [pc, #4]	; (800c298 <_cleanup_r+0x8>)
 800c292:	f000 b8af 	b.w	800c3f4 <_fwalk_reent>
 800c296:	bf00      	nop
 800c298:	0800d4c1 	.word	0x0800d4c1

0800c29c <__sfmoreglue>:
 800c29c:	b570      	push	{r4, r5, r6, lr}
 800c29e:	2268      	movs	r2, #104	; 0x68
 800c2a0:	1e4d      	subs	r5, r1, #1
 800c2a2:	4355      	muls	r5, r2
 800c2a4:	460e      	mov	r6, r1
 800c2a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2aa:	f000 fa37 	bl	800c71c <_malloc_r>
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	b140      	cbz	r0, 800c2c4 <__sfmoreglue+0x28>
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	e9c0 1600 	strd	r1, r6, [r0]
 800c2b8:	300c      	adds	r0, #12
 800c2ba:	60a0      	str	r0, [r4, #8]
 800c2bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2c0:	f000 f9a2 	bl	800c608 <memset>
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	bd70      	pop	{r4, r5, r6, pc}

0800c2c8 <__sfp_lock_acquire>:
 800c2c8:	4801      	ldr	r0, [pc, #4]	; (800c2d0 <__sfp_lock_acquire+0x8>)
 800c2ca:	f000 b984 	b.w	800c5d6 <__retarget_lock_acquire_recursive>
 800c2ce:	bf00      	nop
 800c2d0:	20006295 	.word	0x20006295

0800c2d4 <__sfp_lock_release>:
 800c2d4:	4801      	ldr	r0, [pc, #4]	; (800c2dc <__sfp_lock_release+0x8>)
 800c2d6:	f000 b97f 	b.w	800c5d8 <__retarget_lock_release_recursive>
 800c2da:	bf00      	nop
 800c2dc:	20006295 	.word	0x20006295

0800c2e0 <__sinit_lock_acquire>:
 800c2e0:	4801      	ldr	r0, [pc, #4]	; (800c2e8 <__sinit_lock_acquire+0x8>)
 800c2e2:	f000 b978 	b.w	800c5d6 <__retarget_lock_acquire_recursive>
 800c2e6:	bf00      	nop
 800c2e8:	20006296 	.word	0x20006296

0800c2ec <__sinit_lock_release>:
 800c2ec:	4801      	ldr	r0, [pc, #4]	; (800c2f4 <__sinit_lock_release+0x8>)
 800c2ee:	f000 b973 	b.w	800c5d8 <__retarget_lock_release_recursive>
 800c2f2:	bf00      	nop
 800c2f4:	20006296 	.word	0x20006296

0800c2f8 <__sinit>:
 800c2f8:	b510      	push	{r4, lr}
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	f7ff fff0 	bl	800c2e0 <__sinit_lock_acquire>
 800c300:	69a3      	ldr	r3, [r4, #24]
 800c302:	b11b      	cbz	r3, 800c30c <__sinit+0x14>
 800c304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c308:	f7ff bff0 	b.w	800c2ec <__sinit_lock_release>
 800c30c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c310:	6523      	str	r3, [r4, #80]	; 0x50
 800c312:	4b13      	ldr	r3, [pc, #76]	; (800c360 <__sinit+0x68>)
 800c314:	4a13      	ldr	r2, [pc, #76]	; (800c364 <__sinit+0x6c>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	62a2      	str	r2, [r4, #40]	; 0x28
 800c31a:	42a3      	cmp	r3, r4
 800c31c:	bf04      	itt	eq
 800c31e:	2301      	moveq	r3, #1
 800c320:	61a3      	streq	r3, [r4, #24]
 800c322:	4620      	mov	r0, r4
 800c324:	f000 f820 	bl	800c368 <__sfp>
 800c328:	6060      	str	r0, [r4, #4]
 800c32a:	4620      	mov	r0, r4
 800c32c:	f000 f81c 	bl	800c368 <__sfp>
 800c330:	60a0      	str	r0, [r4, #8]
 800c332:	4620      	mov	r0, r4
 800c334:	f000 f818 	bl	800c368 <__sfp>
 800c338:	2200      	movs	r2, #0
 800c33a:	60e0      	str	r0, [r4, #12]
 800c33c:	2104      	movs	r1, #4
 800c33e:	6860      	ldr	r0, [r4, #4]
 800c340:	f7ff ff82 	bl	800c248 <std>
 800c344:	68a0      	ldr	r0, [r4, #8]
 800c346:	2201      	movs	r2, #1
 800c348:	2109      	movs	r1, #9
 800c34a:	f7ff ff7d 	bl	800c248 <std>
 800c34e:	68e0      	ldr	r0, [r4, #12]
 800c350:	2202      	movs	r2, #2
 800c352:	2112      	movs	r1, #18
 800c354:	f7ff ff78 	bl	800c248 <std>
 800c358:	2301      	movs	r3, #1
 800c35a:	61a3      	str	r3, [r4, #24]
 800c35c:	e7d2      	b.n	800c304 <__sinit+0xc>
 800c35e:	bf00      	nop
 800c360:	08011358 	.word	0x08011358
 800c364:	0800c291 	.word	0x0800c291

0800c368 <__sfp>:
 800c368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36a:	4607      	mov	r7, r0
 800c36c:	f7ff ffac 	bl	800c2c8 <__sfp_lock_acquire>
 800c370:	4b1e      	ldr	r3, [pc, #120]	; (800c3ec <__sfp+0x84>)
 800c372:	681e      	ldr	r6, [r3, #0]
 800c374:	69b3      	ldr	r3, [r6, #24]
 800c376:	b913      	cbnz	r3, 800c37e <__sfp+0x16>
 800c378:	4630      	mov	r0, r6
 800c37a:	f7ff ffbd 	bl	800c2f8 <__sinit>
 800c37e:	3648      	adds	r6, #72	; 0x48
 800c380:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c384:	3b01      	subs	r3, #1
 800c386:	d503      	bpl.n	800c390 <__sfp+0x28>
 800c388:	6833      	ldr	r3, [r6, #0]
 800c38a:	b30b      	cbz	r3, 800c3d0 <__sfp+0x68>
 800c38c:	6836      	ldr	r6, [r6, #0]
 800c38e:	e7f7      	b.n	800c380 <__sfp+0x18>
 800c390:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c394:	b9d5      	cbnz	r5, 800c3cc <__sfp+0x64>
 800c396:	4b16      	ldr	r3, [pc, #88]	; (800c3f0 <__sfp+0x88>)
 800c398:	60e3      	str	r3, [r4, #12]
 800c39a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c39e:	6665      	str	r5, [r4, #100]	; 0x64
 800c3a0:	f000 f918 	bl	800c5d4 <__retarget_lock_init_recursive>
 800c3a4:	f7ff ff96 	bl	800c2d4 <__sfp_lock_release>
 800c3a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3b0:	6025      	str	r5, [r4, #0]
 800c3b2:	61a5      	str	r5, [r4, #24]
 800c3b4:	2208      	movs	r2, #8
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3bc:	f000 f924 	bl	800c608 <memset>
 800c3c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3cc:	3468      	adds	r4, #104	; 0x68
 800c3ce:	e7d9      	b.n	800c384 <__sfp+0x1c>
 800c3d0:	2104      	movs	r1, #4
 800c3d2:	4638      	mov	r0, r7
 800c3d4:	f7ff ff62 	bl	800c29c <__sfmoreglue>
 800c3d8:	4604      	mov	r4, r0
 800c3da:	6030      	str	r0, [r6, #0]
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	d1d5      	bne.n	800c38c <__sfp+0x24>
 800c3e0:	f7ff ff78 	bl	800c2d4 <__sfp_lock_release>
 800c3e4:	230c      	movs	r3, #12
 800c3e6:	603b      	str	r3, [r7, #0]
 800c3e8:	e7ee      	b.n	800c3c8 <__sfp+0x60>
 800c3ea:	bf00      	nop
 800c3ec:	08011358 	.word	0x08011358
 800c3f0:	ffff0001 	.word	0xffff0001

0800c3f4 <_fwalk_reent>:
 800c3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	4688      	mov	r8, r1
 800c3fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c400:	2700      	movs	r7, #0
 800c402:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c406:	f1b9 0901 	subs.w	r9, r9, #1
 800c40a:	d505      	bpl.n	800c418 <_fwalk_reent+0x24>
 800c40c:	6824      	ldr	r4, [r4, #0]
 800c40e:	2c00      	cmp	r4, #0
 800c410:	d1f7      	bne.n	800c402 <_fwalk_reent+0xe>
 800c412:	4638      	mov	r0, r7
 800c414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c418:	89ab      	ldrh	r3, [r5, #12]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d907      	bls.n	800c42e <_fwalk_reent+0x3a>
 800c41e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c422:	3301      	adds	r3, #1
 800c424:	d003      	beq.n	800c42e <_fwalk_reent+0x3a>
 800c426:	4629      	mov	r1, r5
 800c428:	4630      	mov	r0, r6
 800c42a:	47c0      	blx	r8
 800c42c:	4307      	orrs	r7, r0
 800c42e:	3568      	adds	r5, #104	; 0x68
 800c430:	e7e9      	b.n	800c406 <_fwalk_reent+0x12>
	...

0800c434 <gmtime_r>:
 800c434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c438:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c43c:	460c      	mov	r4, r1
 800c43e:	4a4f      	ldr	r2, [pc, #316]	; (800c57c <gmtime_r+0x148>)
 800c440:	2300      	movs	r3, #0
 800c442:	4630      	mov	r0, r6
 800c444:	4639      	mov	r1, r7
 800c446:	f7f4 fa21 	bl	800088c <__aeabi_ldivmod>
 800c44a:	4639      	mov	r1, r7
 800c44c:	4605      	mov	r5, r0
 800c44e:	4a4b      	ldr	r2, [pc, #300]	; (800c57c <gmtime_r+0x148>)
 800c450:	4630      	mov	r0, r6
 800c452:	2300      	movs	r3, #0
 800c454:	f7f4 fa1a 	bl	800088c <__aeabi_ldivmod>
 800c458:	2a00      	cmp	r2, #0
 800c45a:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800c45e:	bfb7      	itett	lt
 800c460:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800c464:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800c468:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800c46c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800c470:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800c474:	fbb2 f1f0 	udiv	r1, r2, r0
 800c478:	fb00 2211 	mls	r2, r0, r1, r2
 800c47c:	203c      	movs	r0, #60	; 0x3c
 800c47e:	60a1      	str	r1, [r4, #8]
 800c480:	fbb2 f1f0 	udiv	r1, r2, r0
 800c484:	fb00 2211 	mls	r2, r0, r1, r2
 800c488:	6061      	str	r1, [r4, #4]
 800c48a:	6022      	str	r2, [r4, #0]
 800c48c:	2107      	movs	r1, #7
 800c48e:	1cda      	adds	r2, r3, #3
 800c490:	fb92 f1f1 	sdiv	r1, r2, r1
 800c494:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c498:	1a52      	subs	r2, r2, r1
 800c49a:	bf48      	it	mi
 800c49c:	3207      	addmi	r2, #7
 800c49e:	4d38      	ldr	r5, [pc, #224]	; (800c580 <gmtime_r+0x14c>)
 800c4a0:	4838      	ldr	r0, [pc, #224]	; (800c584 <gmtime_r+0x150>)
 800c4a2:	61a2      	str	r2, [r4, #24]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	bfb7      	itett	lt
 800c4a8:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800c4ac:	fb93 f5f5 	sdivge	r5, r3, r5
 800c4b0:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800c4b4:	fb92 f5f5 	sdivlt	r5, r2, r5
 800c4b8:	fb00 3005 	mla	r0, r0, r5, r3
 800c4bc:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800c4c0:	fbb0 f2f2 	udiv	r2, r0, r2
 800c4c4:	4402      	add	r2, r0
 800c4c6:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800c4ca:	fbb0 f1f3 	udiv	r1, r0, r3
 800c4ce:	1a52      	subs	r2, r2, r1
 800c4d0:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c4d4:	492c      	ldr	r1, [pc, #176]	; (800c588 <gmtime_r+0x154>)
 800c4d6:	fbb0 f1f1 	udiv	r1, r0, r1
 800c4da:	2764      	movs	r7, #100	; 0x64
 800c4dc:	1a52      	subs	r2, r2, r1
 800c4de:	fbb2 f1fc 	udiv	r1, r2, ip
 800c4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4e6:	fbb1 f6f7 	udiv	r6, r1, r7
 800c4ea:	1af3      	subs	r3, r6, r3
 800c4ec:	4403      	add	r3, r0
 800c4ee:	fb0c 3311 	mls	r3, ip, r1, r3
 800c4f2:	2299      	movs	r2, #153	; 0x99
 800c4f4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800c4f8:	f10e 0e02 	add.w	lr, lr, #2
 800c4fc:	f103 0c01 	add.w	ip, r3, #1
 800c500:	fbbe f0f2 	udiv	r0, lr, r2
 800c504:	4342      	muls	r2, r0
 800c506:	3202      	adds	r2, #2
 800c508:	f04f 0805 	mov.w	r8, #5
 800c50c:	fbb2 f2f8 	udiv	r2, r2, r8
 800c510:	ebac 0c02 	sub.w	ip, ip, r2
 800c514:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800c518:	4596      	cmp	lr, r2
 800c51a:	bf94      	ite	ls
 800c51c:	2202      	movls	r2, #2
 800c51e:	f06f 0209 	mvnhi.w	r2, #9
 800c522:	4410      	add	r0, r2
 800c524:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c528:	fb02 1505 	mla	r5, r2, r5, r1
 800c52c:	2801      	cmp	r0, #1
 800c52e:	bf98      	it	ls
 800c530:	3501      	addls	r5, #1
 800c532:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c536:	d30d      	bcc.n	800c554 <gmtime_r+0x120>
 800c538:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c53c:	61e3      	str	r3, [r4, #28]
 800c53e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800c542:	2300      	movs	r3, #0
 800c544:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800c548:	f8c4 c00c 	str.w	ip, [r4, #12]
 800c54c:	6223      	str	r3, [r4, #32]
 800c54e:	4620      	mov	r0, r4
 800c550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c554:	078a      	lsls	r2, r1, #30
 800c556:	d102      	bne.n	800c55e <gmtime_r+0x12a>
 800c558:	fb07 1616 	mls	r6, r7, r6, r1
 800c55c:	b95e      	cbnz	r6, 800c576 <gmtime_r+0x142>
 800c55e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c562:	fbb1 f6f2 	udiv	r6, r1, r2
 800c566:	fb02 1216 	mls	r2, r2, r6, r1
 800c56a:	fab2 f282 	clz	r2, r2
 800c56e:	0952      	lsrs	r2, r2, #5
 800c570:	333b      	adds	r3, #59	; 0x3b
 800c572:	4413      	add	r3, r2
 800c574:	e7e2      	b.n	800c53c <gmtime_r+0x108>
 800c576:	2201      	movs	r2, #1
 800c578:	e7fa      	b.n	800c570 <gmtime_r+0x13c>
 800c57a:	bf00      	nop
 800c57c:	00015180 	.word	0x00015180
 800c580:	00023ab1 	.word	0x00023ab1
 800c584:	fffdc54f 	.word	0xfffdc54f
 800c588:	00023ab0 	.word	0x00023ab0

0800c58c <__libc_init_array>:
 800c58c:	b570      	push	{r4, r5, r6, lr}
 800c58e:	4d0d      	ldr	r5, [pc, #52]	; (800c5c4 <__libc_init_array+0x38>)
 800c590:	4c0d      	ldr	r4, [pc, #52]	; (800c5c8 <__libc_init_array+0x3c>)
 800c592:	1b64      	subs	r4, r4, r5
 800c594:	10a4      	asrs	r4, r4, #2
 800c596:	2600      	movs	r6, #0
 800c598:	42a6      	cmp	r6, r4
 800c59a:	d109      	bne.n	800c5b0 <__libc_init_array+0x24>
 800c59c:	4d0b      	ldr	r5, [pc, #44]	; (800c5cc <__libc_init_array+0x40>)
 800c59e:	4c0c      	ldr	r4, [pc, #48]	; (800c5d0 <__libc_init_array+0x44>)
 800c5a0:	f001 fa2e 	bl	800da00 <_init>
 800c5a4:	1b64      	subs	r4, r4, r5
 800c5a6:	10a4      	asrs	r4, r4, #2
 800c5a8:	2600      	movs	r6, #0
 800c5aa:	42a6      	cmp	r6, r4
 800c5ac:	d105      	bne.n	800c5ba <__libc_init_array+0x2e>
 800c5ae:	bd70      	pop	{r4, r5, r6, pc}
 800c5b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5b4:	4798      	blx	r3
 800c5b6:	3601      	adds	r6, #1
 800c5b8:	e7ee      	b.n	800c598 <__libc_init_array+0xc>
 800c5ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5be:	4798      	blx	r3
 800c5c0:	3601      	adds	r6, #1
 800c5c2:	e7f2      	b.n	800c5aa <__libc_init_array+0x1e>
 800c5c4:	08011498 	.word	0x08011498
 800c5c8:	08011498 	.word	0x08011498
 800c5cc:	08011498 	.word	0x08011498
 800c5d0:	0801149c 	.word	0x0801149c

0800c5d4 <__retarget_lock_init_recursive>:
 800c5d4:	4770      	bx	lr

0800c5d6 <__retarget_lock_acquire_recursive>:
 800c5d6:	4770      	bx	lr

0800c5d8 <__retarget_lock_release_recursive>:
 800c5d8:	4770      	bx	lr
	...

0800c5dc <free>:
 800c5dc:	4b02      	ldr	r3, [pc, #8]	; (800c5e8 <free+0xc>)
 800c5de:	4601      	mov	r1, r0
 800c5e0:	6818      	ldr	r0, [r3, #0]
 800c5e2:	f000 b82f 	b.w	800c644 <_free_r>
 800c5e6:	bf00      	nop
 800c5e8:	200000b8 	.word	0x200000b8

0800c5ec <memcpy>:
 800c5ec:	440a      	add	r2, r1
 800c5ee:	4291      	cmp	r1, r2
 800c5f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c5f4:	d100      	bne.n	800c5f8 <memcpy+0xc>
 800c5f6:	4770      	bx	lr
 800c5f8:	b510      	push	{r4, lr}
 800c5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c602:	4291      	cmp	r1, r2
 800c604:	d1f9      	bne.n	800c5fa <memcpy+0xe>
 800c606:	bd10      	pop	{r4, pc}

0800c608 <memset>:
 800c608:	4402      	add	r2, r0
 800c60a:	4603      	mov	r3, r0
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d100      	bne.n	800c612 <memset+0xa>
 800c610:	4770      	bx	lr
 800c612:	f803 1b01 	strb.w	r1, [r3], #1
 800c616:	e7f9      	b.n	800c60c <memset+0x4>

0800c618 <_calloc_r>:
 800c618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c61a:	fba1 2402 	umull	r2, r4, r1, r2
 800c61e:	b94c      	cbnz	r4, 800c634 <_calloc_r+0x1c>
 800c620:	4611      	mov	r1, r2
 800c622:	9201      	str	r2, [sp, #4]
 800c624:	f000 f87a 	bl	800c71c <_malloc_r>
 800c628:	9a01      	ldr	r2, [sp, #4]
 800c62a:	4605      	mov	r5, r0
 800c62c:	b930      	cbnz	r0, 800c63c <_calloc_r+0x24>
 800c62e:	4628      	mov	r0, r5
 800c630:	b003      	add	sp, #12
 800c632:	bd30      	pop	{r4, r5, pc}
 800c634:	220c      	movs	r2, #12
 800c636:	6002      	str	r2, [r0, #0]
 800c638:	2500      	movs	r5, #0
 800c63a:	e7f8      	b.n	800c62e <_calloc_r+0x16>
 800c63c:	4621      	mov	r1, r4
 800c63e:	f7ff ffe3 	bl	800c608 <memset>
 800c642:	e7f4      	b.n	800c62e <_calloc_r+0x16>

0800c644 <_free_r>:
 800c644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c646:	2900      	cmp	r1, #0
 800c648:	d044      	beq.n	800c6d4 <_free_r+0x90>
 800c64a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c64e:	9001      	str	r0, [sp, #4]
 800c650:	2b00      	cmp	r3, #0
 800c652:	f1a1 0404 	sub.w	r4, r1, #4
 800c656:	bfb8      	it	lt
 800c658:	18e4      	addlt	r4, r4, r3
 800c65a:	f000 ffff 	bl	800d65c <__malloc_lock>
 800c65e:	4a1e      	ldr	r2, [pc, #120]	; (800c6d8 <_free_r+0x94>)
 800c660:	9801      	ldr	r0, [sp, #4]
 800c662:	6813      	ldr	r3, [r2, #0]
 800c664:	b933      	cbnz	r3, 800c674 <_free_r+0x30>
 800c666:	6063      	str	r3, [r4, #4]
 800c668:	6014      	str	r4, [r2, #0]
 800c66a:	b003      	add	sp, #12
 800c66c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c670:	f000 bffa 	b.w	800d668 <__malloc_unlock>
 800c674:	42a3      	cmp	r3, r4
 800c676:	d908      	bls.n	800c68a <_free_r+0x46>
 800c678:	6825      	ldr	r5, [r4, #0]
 800c67a:	1961      	adds	r1, r4, r5
 800c67c:	428b      	cmp	r3, r1
 800c67e:	bf01      	itttt	eq
 800c680:	6819      	ldreq	r1, [r3, #0]
 800c682:	685b      	ldreq	r3, [r3, #4]
 800c684:	1949      	addeq	r1, r1, r5
 800c686:	6021      	streq	r1, [r4, #0]
 800c688:	e7ed      	b.n	800c666 <_free_r+0x22>
 800c68a:	461a      	mov	r2, r3
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	b10b      	cbz	r3, 800c694 <_free_r+0x50>
 800c690:	42a3      	cmp	r3, r4
 800c692:	d9fa      	bls.n	800c68a <_free_r+0x46>
 800c694:	6811      	ldr	r1, [r2, #0]
 800c696:	1855      	adds	r5, r2, r1
 800c698:	42a5      	cmp	r5, r4
 800c69a:	d10b      	bne.n	800c6b4 <_free_r+0x70>
 800c69c:	6824      	ldr	r4, [r4, #0]
 800c69e:	4421      	add	r1, r4
 800c6a0:	1854      	adds	r4, r2, r1
 800c6a2:	42a3      	cmp	r3, r4
 800c6a4:	6011      	str	r1, [r2, #0]
 800c6a6:	d1e0      	bne.n	800c66a <_free_r+0x26>
 800c6a8:	681c      	ldr	r4, [r3, #0]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	6053      	str	r3, [r2, #4]
 800c6ae:	4421      	add	r1, r4
 800c6b0:	6011      	str	r1, [r2, #0]
 800c6b2:	e7da      	b.n	800c66a <_free_r+0x26>
 800c6b4:	d902      	bls.n	800c6bc <_free_r+0x78>
 800c6b6:	230c      	movs	r3, #12
 800c6b8:	6003      	str	r3, [r0, #0]
 800c6ba:	e7d6      	b.n	800c66a <_free_r+0x26>
 800c6bc:	6825      	ldr	r5, [r4, #0]
 800c6be:	1961      	adds	r1, r4, r5
 800c6c0:	428b      	cmp	r3, r1
 800c6c2:	bf04      	itt	eq
 800c6c4:	6819      	ldreq	r1, [r3, #0]
 800c6c6:	685b      	ldreq	r3, [r3, #4]
 800c6c8:	6063      	str	r3, [r4, #4]
 800c6ca:	bf04      	itt	eq
 800c6cc:	1949      	addeq	r1, r1, r5
 800c6ce:	6021      	streq	r1, [r4, #0]
 800c6d0:	6054      	str	r4, [r2, #4]
 800c6d2:	e7ca      	b.n	800c66a <_free_r+0x26>
 800c6d4:	b003      	add	sp, #12
 800c6d6:	bd30      	pop	{r4, r5, pc}
 800c6d8:	20006298 	.word	0x20006298

0800c6dc <sbrk_aligned>:
 800c6dc:	b570      	push	{r4, r5, r6, lr}
 800c6de:	4e0e      	ldr	r6, [pc, #56]	; (800c718 <sbrk_aligned+0x3c>)
 800c6e0:	460c      	mov	r4, r1
 800c6e2:	6831      	ldr	r1, [r6, #0]
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	b911      	cbnz	r1, 800c6ee <sbrk_aligned+0x12>
 800c6e8:	f000 fbfc 	bl	800cee4 <_sbrk_r>
 800c6ec:	6030      	str	r0, [r6, #0]
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	f000 fbf7 	bl	800cee4 <_sbrk_r>
 800c6f6:	1c43      	adds	r3, r0, #1
 800c6f8:	d00a      	beq.n	800c710 <sbrk_aligned+0x34>
 800c6fa:	1cc4      	adds	r4, r0, #3
 800c6fc:	f024 0403 	bic.w	r4, r4, #3
 800c700:	42a0      	cmp	r0, r4
 800c702:	d007      	beq.n	800c714 <sbrk_aligned+0x38>
 800c704:	1a21      	subs	r1, r4, r0
 800c706:	4628      	mov	r0, r5
 800c708:	f000 fbec 	bl	800cee4 <_sbrk_r>
 800c70c:	3001      	adds	r0, #1
 800c70e:	d101      	bne.n	800c714 <sbrk_aligned+0x38>
 800c710:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c714:	4620      	mov	r0, r4
 800c716:	bd70      	pop	{r4, r5, r6, pc}
 800c718:	2000629c 	.word	0x2000629c

0800c71c <_malloc_r>:
 800c71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c720:	1ccd      	adds	r5, r1, #3
 800c722:	f025 0503 	bic.w	r5, r5, #3
 800c726:	3508      	adds	r5, #8
 800c728:	2d0c      	cmp	r5, #12
 800c72a:	bf38      	it	cc
 800c72c:	250c      	movcc	r5, #12
 800c72e:	2d00      	cmp	r5, #0
 800c730:	4607      	mov	r7, r0
 800c732:	db01      	blt.n	800c738 <_malloc_r+0x1c>
 800c734:	42a9      	cmp	r1, r5
 800c736:	d905      	bls.n	800c744 <_malloc_r+0x28>
 800c738:	230c      	movs	r3, #12
 800c73a:	603b      	str	r3, [r7, #0]
 800c73c:	2600      	movs	r6, #0
 800c73e:	4630      	mov	r0, r6
 800c740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c744:	4e2e      	ldr	r6, [pc, #184]	; (800c800 <_malloc_r+0xe4>)
 800c746:	f000 ff89 	bl	800d65c <__malloc_lock>
 800c74a:	6833      	ldr	r3, [r6, #0]
 800c74c:	461c      	mov	r4, r3
 800c74e:	bb34      	cbnz	r4, 800c79e <_malloc_r+0x82>
 800c750:	4629      	mov	r1, r5
 800c752:	4638      	mov	r0, r7
 800c754:	f7ff ffc2 	bl	800c6dc <sbrk_aligned>
 800c758:	1c43      	adds	r3, r0, #1
 800c75a:	4604      	mov	r4, r0
 800c75c:	d14d      	bne.n	800c7fa <_malloc_r+0xde>
 800c75e:	6834      	ldr	r4, [r6, #0]
 800c760:	4626      	mov	r6, r4
 800c762:	2e00      	cmp	r6, #0
 800c764:	d140      	bne.n	800c7e8 <_malloc_r+0xcc>
 800c766:	6823      	ldr	r3, [r4, #0]
 800c768:	4631      	mov	r1, r6
 800c76a:	4638      	mov	r0, r7
 800c76c:	eb04 0803 	add.w	r8, r4, r3
 800c770:	f000 fbb8 	bl	800cee4 <_sbrk_r>
 800c774:	4580      	cmp	r8, r0
 800c776:	d13a      	bne.n	800c7ee <_malloc_r+0xd2>
 800c778:	6821      	ldr	r1, [r4, #0]
 800c77a:	3503      	adds	r5, #3
 800c77c:	1a6d      	subs	r5, r5, r1
 800c77e:	f025 0503 	bic.w	r5, r5, #3
 800c782:	3508      	adds	r5, #8
 800c784:	2d0c      	cmp	r5, #12
 800c786:	bf38      	it	cc
 800c788:	250c      	movcc	r5, #12
 800c78a:	4629      	mov	r1, r5
 800c78c:	4638      	mov	r0, r7
 800c78e:	f7ff ffa5 	bl	800c6dc <sbrk_aligned>
 800c792:	3001      	adds	r0, #1
 800c794:	d02b      	beq.n	800c7ee <_malloc_r+0xd2>
 800c796:	6823      	ldr	r3, [r4, #0]
 800c798:	442b      	add	r3, r5
 800c79a:	6023      	str	r3, [r4, #0]
 800c79c:	e00e      	b.n	800c7bc <_malloc_r+0xa0>
 800c79e:	6822      	ldr	r2, [r4, #0]
 800c7a0:	1b52      	subs	r2, r2, r5
 800c7a2:	d41e      	bmi.n	800c7e2 <_malloc_r+0xc6>
 800c7a4:	2a0b      	cmp	r2, #11
 800c7a6:	d916      	bls.n	800c7d6 <_malloc_r+0xba>
 800c7a8:	1961      	adds	r1, r4, r5
 800c7aa:	42a3      	cmp	r3, r4
 800c7ac:	6025      	str	r5, [r4, #0]
 800c7ae:	bf18      	it	ne
 800c7b0:	6059      	strne	r1, [r3, #4]
 800c7b2:	6863      	ldr	r3, [r4, #4]
 800c7b4:	bf08      	it	eq
 800c7b6:	6031      	streq	r1, [r6, #0]
 800c7b8:	5162      	str	r2, [r4, r5]
 800c7ba:	604b      	str	r3, [r1, #4]
 800c7bc:	4638      	mov	r0, r7
 800c7be:	f104 060b 	add.w	r6, r4, #11
 800c7c2:	f000 ff51 	bl	800d668 <__malloc_unlock>
 800c7c6:	f026 0607 	bic.w	r6, r6, #7
 800c7ca:	1d23      	adds	r3, r4, #4
 800c7cc:	1af2      	subs	r2, r6, r3
 800c7ce:	d0b6      	beq.n	800c73e <_malloc_r+0x22>
 800c7d0:	1b9b      	subs	r3, r3, r6
 800c7d2:	50a3      	str	r3, [r4, r2]
 800c7d4:	e7b3      	b.n	800c73e <_malloc_r+0x22>
 800c7d6:	6862      	ldr	r2, [r4, #4]
 800c7d8:	42a3      	cmp	r3, r4
 800c7da:	bf0c      	ite	eq
 800c7dc:	6032      	streq	r2, [r6, #0]
 800c7de:	605a      	strne	r2, [r3, #4]
 800c7e0:	e7ec      	b.n	800c7bc <_malloc_r+0xa0>
 800c7e2:	4623      	mov	r3, r4
 800c7e4:	6864      	ldr	r4, [r4, #4]
 800c7e6:	e7b2      	b.n	800c74e <_malloc_r+0x32>
 800c7e8:	4634      	mov	r4, r6
 800c7ea:	6876      	ldr	r6, [r6, #4]
 800c7ec:	e7b9      	b.n	800c762 <_malloc_r+0x46>
 800c7ee:	230c      	movs	r3, #12
 800c7f0:	603b      	str	r3, [r7, #0]
 800c7f2:	4638      	mov	r0, r7
 800c7f4:	f000 ff38 	bl	800d668 <__malloc_unlock>
 800c7f8:	e7a1      	b.n	800c73e <_malloc_r+0x22>
 800c7fa:	6025      	str	r5, [r4, #0]
 800c7fc:	e7de      	b.n	800c7bc <_malloc_r+0xa0>
 800c7fe:	bf00      	nop
 800c800:	20006298 	.word	0x20006298

0800c804 <__sfputc_r>:
 800c804:	6893      	ldr	r3, [r2, #8]
 800c806:	3b01      	subs	r3, #1
 800c808:	2b00      	cmp	r3, #0
 800c80a:	b410      	push	{r4}
 800c80c:	6093      	str	r3, [r2, #8]
 800c80e:	da08      	bge.n	800c822 <__sfputc_r+0x1e>
 800c810:	6994      	ldr	r4, [r2, #24]
 800c812:	42a3      	cmp	r3, r4
 800c814:	db01      	blt.n	800c81a <__sfputc_r+0x16>
 800c816:	290a      	cmp	r1, #10
 800c818:	d103      	bne.n	800c822 <__sfputc_r+0x1e>
 800c81a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c81e:	f000 bce7 	b.w	800d1f0 <__swbuf_r>
 800c822:	6813      	ldr	r3, [r2, #0]
 800c824:	1c58      	adds	r0, r3, #1
 800c826:	6010      	str	r0, [r2, #0]
 800c828:	7019      	strb	r1, [r3, #0]
 800c82a:	4608      	mov	r0, r1
 800c82c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c830:	4770      	bx	lr

0800c832 <__sfputs_r>:
 800c832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c834:	4606      	mov	r6, r0
 800c836:	460f      	mov	r7, r1
 800c838:	4614      	mov	r4, r2
 800c83a:	18d5      	adds	r5, r2, r3
 800c83c:	42ac      	cmp	r4, r5
 800c83e:	d101      	bne.n	800c844 <__sfputs_r+0x12>
 800c840:	2000      	movs	r0, #0
 800c842:	e007      	b.n	800c854 <__sfputs_r+0x22>
 800c844:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c848:	463a      	mov	r2, r7
 800c84a:	4630      	mov	r0, r6
 800c84c:	f7ff ffda 	bl	800c804 <__sfputc_r>
 800c850:	1c43      	adds	r3, r0, #1
 800c852:	d1f3      	bne.n	800c83c <__sfputs_r+0xa>
 800c854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c858 <_vfiprintf_r>:
 800c858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85c:	460d      	mov	r5, r1
 800c85e:	b09d      	sub	sp, #116	; 0x74
 800c860:	4614      	mov	r4, r2
 800c862:	4698      	mov	r8, r3
 800c864:	4606      	mov	r6, r0
 800c866:	b118      	cbz	r0, 800c870 <_vfiprintf_r+0x18>
 800c868:	6983      	ldr	r3, [r0, #24]
 800c86a:	b90b      	cbnz	r3, 800c870 <_vfiprintf_r+0x18>
 800c86c:	f7ff fd44 	bl	800c2f8 <__sinit>
 800c870:	4b89      	ldr	r3, [pc, #548]	; (800ca98 <_vfiprintf_r+0x240>)
 800c872:	429d      	cmp	r5, r3
 800c874:	d11b      	bne.n	800c8ae <_vfiprintf_r+0x56>
 800c876:	6875      	ldr	r5, [r6, #4]
 800c878:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c87a:	07d9      	lsls	r1, r3, #31
 800c87c:	d405      	bmi.n	800c88a <_vfiprintf_r+0x32>
 800c87e:	89ab      	ldrh	r3, [r5, #12]
 800c880:	059a      	lsls	r2, r3, #22
 800c882:	d402      	bmi.n	800c88a <_vfiprintf_r+0x32>
 800c884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c886:	f7ff fea6 	bl	800c5d6 <__retarget_lock_acquire_recursive>
 800c88a:	89ab      	ldrh	r3, [r5, #12]
 800c88c:	071b      	lsls	r3, r3, #28
 800c88e:	d501      	bpl.n	800c894 <_vfiprintf_r+0x3c>
 800c890:	692b      	ldr	r3, [r5, #16]
 800c892:	b9eb      	cbnz	r3, 800c8d0 <_vfiprintf_r+0x78>
 800c894:	4629      	mov	r1, r5
 800c896:	4630      	mov	r0, r6
 800c898:	f000 fd0e 	bl	800d2b8 <__swsetup_r>
 800c89c:	b1c0      	cbz	r0, 800c8d0 <_vfiprintf_r+0x78>
 800c89e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8a0:	07dc      	lsls	r4, r3, #31
 800c8a2:	d50e      	bpl.n	800c8c2 <_vfiprintf_r+0x6a>
 800c8a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8a8:	b01d      	add	sp, #116	; 0x74
 800c8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ae:	4b7b      	ldr	r3, [pc, #492]	; (800ca9c <_vfiprintf_r+0x244>)
 800c8b0:	429d      	cmp	r5, r3
 800c8b2:	d101      	bne.n	800c8b8 <_vfiprintf_r+0x60>
 800c8b4:	68b5      	ldr	r5, [r6, #8]
 800c8b6:	e7df      	b.n	800c878 <_vfiprintf_r+0x20>
 800c8b8:	4b79      	ldr	r3, [pc, #484]	; (800caa0 <_vfiprintf_r+0x248>)
 800c8ba:	429d      	cmp	r5, r3
 800c8bc:	bf08      	it	eq
 800c8be:	68f5      	ldreq	r5, [r6, #12]
 800c8c0:	e7da      	b.n	800c878 <_vfiprintf_r+0x20>
 800c8c2:	89ab      	ldrh	r3, [r5, #12]
 800c8c4:	0598      	lsls	r0, r3, #22
 800c8c6:	d4ed      	bmi.n	800c8a4 <_vfiprintf_r+0x4c>
 800c8c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8ca:	f7ff fe85 	bl	800c5d8 <__retarget_lock_release_recursive>
 800c8ce:	e7e9      	b.n	800c8a4 <_vfiprintf_r+0x4c>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d4:	2320      	movs	r3, #32
 800c8d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8da:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8de:	2330      	movs	r3, #48	; 0x30
 800c8e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800caa4 <_vfiprintf_r+0x24c>
 800c8e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8e8:	f04f 0901 	mov.w	r9, #1
 800c8ec:	4623      	mov	r3, r4
 800c8ee:	469a      	mov	sl, r3
 800c8f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8f4:	b10a      	cbz	r2, 800c8fa <_vfiprintf_r+0xa2>
 800c8f6:	2a25      	cmp	r2, #37	; 0x25
 800c8f8:	d1f9      	bne.n	800c8ee <_vfiprintf_r+0x96>
 800c8fa:	ebba 0b04 	subs.w	fp, sl, r4
 800c8fe:	d00b      	beq.n	800c918 <_vfiprintf_r+0xc0>
 800c900:	465b      	mov	r3, fp
 800c902:	4622      	mov	r2, r4
 800c904:	4629      	mov	r1, r5
 800c906:	4630      	mov	r0, r6
 800c908:	f7ff ff93 	bl	800c832 <__sfputs_r>
 800c90c:	3001      	adds	r0, #1
 800c90e:	f000 80aa 	beq.w	800ca66 <_vfiprintf_r+0x20e>
 800c912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c914:	445a      	add	r2, fp
 800c916:	9209      	str	r2, [sp, #36]	; 0x24
 800c918:	f89a 3000 	ldrb.w	r3, [sl]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 80a2 	beq.w	800ca66 <_vfiprintf_r+0x20e>
 800c922:	2300      	movs	r3, #0
 800c924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c92c:	f10a 0a01 	add.w	sl, sl, #1
 800c930:	9304      	str	r3, [sp, #16]
 800c932:	9307      	str	r3, [sp, #28]
 800c934:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c938:	931a      	str	r3, [sp, #104]	; 0x68
 800c93a:	4654      	mov	r4, sl
 800c93c:	2205      	movs	r2, #5
 800c93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c942:	4858      	ldr	r0, [pc, #352]	; (800caa4 <_vfiprintf_r+0x24c>)
 800c944:	f7f3 fc4c 	bl	80001e0 <memchr>
 800c948:	9a04      	ldr	r2, [sp, #16]
 800c94a:	b9d8      	cbnz	r0, 800c984 <_vfiprintf_r+0x12c>
 800c94c:	06d1      	lsls	r1, r2, #27
 800c94e:	bf44      	itt	mi
 800c950:	2320      	movmi	r3, #32
 800c952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c956:	0713      	lsls	r3, r2, #28
 800c958:	bf44      	itt	mi
 800c95a:	232b      	movmi	r3, #43	; 0x2b
 800c95c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c960:	f89a 3000 	ldrb.w	r3, [sl]
 800c964:	2b2a      	cmp	r3, #42	; 0x2a
 800c966:	d015      	beq.n	800c994 <_vfiprintf_r+0x13c>
 800c968:	9a07      	ldr	r2, [sp, #28]
 800c96a:	4654      	mov	r4, sl
 800c96c:	2000      	movs	r0, #0
 800c96e:	f04f 0c0a 	mov.w	ip, #10
 800c972:	4621      	mov	r1, r4
 800c974:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c978:	3b30      	subs	r3, #48	; 0x30
 800c97a:	2b09      	cmp	r3, #9
 800c97c:	d94e      	bls.n	800ca1c <_vfiprintf_r+0x1c4>
 800c97e:	b1b0      	cbz	r0, 800c9ae <_vfiprintf_r+0x156>
 800c980:	9207      	str	r2, [sp, #28]
 800c982:	e014      	b.n	800c9ae <_vfiprintf_r+0x156>
 800c984:	eba0 0308 	sub.w	r3, r0, r8
 800c988:	fa09 f303 	lsl.w	r3, r9, r3
 800c98c:	4313      	orrs	r3, r2
 800c98e:	9304      	str	r3, [sp, #16]
 800c990:	46a2      	mov	sl, r4
 800c992:	e7d2      	b.n	800c93a <_vfiprintf_r+0xe2>
 800c994:	9b03      	ldr	r3, [sp, #12]
 800c996:	1d19      	adds	r1, r3, #4
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	9103      	str	r1, [sp, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	bfbb      	ittet	lt
 800c9a0:	425b      	neglt	r3, r3
 800c9a2:	f042 0202 	orrlt.w	r2, r2, #2
 800c9a6:	9307      	strge	r3, [sp, #28]
 800c9a8:	9307      	strlt	r3, [sp, #28]
 800c9aa:	bfb8      	it	lt
 800c9ac:	9204      	strlt	r2, [sp, #16]
 800c9ae:	7823      	ldrb	r3, [r4, #0]
 800c9b0:	2b2e      	cmp	r3, #46	; 0x2e
 800c9b2:	d10c      	bne.n	800c9ce <_vfiprintf_r+0x176>
 800c9b4:	7863      	ldrb	r3, [r4, #1]
 800c9b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c9b8:	d135      	bne.n	800ca26 <_vfiprintf_r+0x1ce>
 800c9ba:	9b03      	ldr	r3, [sp, #12]
 800c9bc:	1d1a      	adds	r2, r3, #4
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	9203      	str	r2, [sp, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	bfb8      	it	lt
 800c9c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c9ca:	3402      	adds	r4, #2
 800c9cc:	9305      	str	r3, [sp, #20]
 800c9ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cab4 <_vfiprintf_r+0x25c>
 800c9d2:	7821      	ldrb	r1, [r4, #0]
 800c9d4:	2203      	movs	r2, #3
 800c9d6:	4650      	mov	r0, sl
 800c9d8:	f7f3 fc02 	bl	80001e0 <memchr>
 800c9dc:	b140      	cbz	r0, 800c9f0 <_vfiprintf_r+0x198>
 800c9de:	2340      	movs	r3, #64	; 0x40
 800c9e0:	eba0 000a 	sub.w	r0, r0, sl
 800c9e4:	fa03 f000 	lsl.w	r0, r3, r0
 800c9e8:	9b04      	ldr	r3, [sp, #16]
 800c9ea:	4303      	orrs	r3, r0
 800c9ec:	3401      	adds	r4, #1
 800c9ee:	9304      	str	r3, [sp, #16]
 800c9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f4:	482c      	ldr	r0, [pc, #176]	; (800caa8 <_vfiprintf_r+0x250>)
 800c9f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9fa:	2206      	movs	r2, #6
 800c9fc:	f7f3 fbf0 	bl	80001e0 <memchr>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d03f      	beq.n	800ca84 <_vfiprintf_r+0x22c>
 800ca04:	4b29      	ldr	r3, [pc, #164]	; (800caac <_vfiprintf_r+0x254>)
 800ca06:	bb1b      	cbnz	r3, 800ca50 <_vfiprintf_r+0x1f8>
 800ca08:	9b03      	ldr	r3, [sp, #12]
 800ca0a:	3307      	adds	r3, #7
 800ca0c:	f023 0307 	bic.w	r3, r3, #7
 800ca10:	3308      	adds	r3, #8
 800ca12:	9303      	str	r3, [sp, #12]
 800ca14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca16:	443b      	add	r3, r7
 800ca18:	9309      	str	r3, [sp, #36]	; 0x24
 800ca1a:	e767      	b.n	800c8ec <_vfiprintf_r+0x94>
 800ca1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca20:	460c      	mov	r4, r1
 800ca22:	2001      	movs	r0, #1
 800ca24:	e7a5      	b.n	800c972 <_vfiprintf_r+0x11a>
 800ca26:	2300      	movs	r3, #0
 800ca28:	3401      	adds	r4, #1
 800ca2a:	9305      	str	r3, [sp, #20]
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	f04f 0c0a 	mov.w	ip, #10
 800ca32:	4620      	mov	r0, r4
 800ca34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca38:	3a30      	subs	r2, #48	; 0x30
 800ca3a:	2a09      	cmp	r2, #9
 800ca3c:	d903      	bls.n	800ca46 <_vfiprintf_r+0x1ee>
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d0c5      	beq.n	800c9ce <_vfiprintf_r+0x176>
 800ca42:	9105      	str	r1, [sp, #20]
 800ca44:	e7c3      	b.n	800c9ce <_vfiprintf_r+0x176>
 800ca46:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e7f0      	b.n	800ca32 <_vfiprintf_r+0x1da>
 800ca50:	ab03      	add	r3, sp, #12
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	462a      	mov	r2, r5
 800ca56:	4b16      	ldr	r3, [pc, #88]	; (800cab0 <_vfiprintf_r+0x258>)
 800ca58:	a904      	add	r1, sp, #16
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f3af 8000 	nop.w
 800ca60:	4607      	mov	r7, r0
 800ca62:	1c78      	adds	r0, r7, #1
 800ca64:	d1d6      	bne.n	800ca14 <_vfiprintf_r+0x1bc>
 800ca66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca68:	07d9      	lsls	r1, r3, #31
 800ca6a:	d405      	bmi.n	800ca78 <_vfiprintf_r+0x220>
 800ca6c:	89ab      	ldrh	r3, [r5, #12]
 800ca6e:	059a      	lsls	r2, r3, #22
 800ca70:	d402      	bmi.n	800ca78 <_vfiprintf_r+0x220>
 800ca72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca74:	f7ff fdb0 	bl	800c5d8 <__retarget_lock_release_recursive>
 800ca78:	89ab      	ldrh	r3, [r5, #12]
 800ca7a:	065b      	lsls	r3, r3, #25
 800ca7c:	f53f af12 	bmi.w	800c8a4 <_vfiprintf_r+0x4c>
 800ca80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca82:	e711      	b.n	800c8a8 <_vfiprintf_r+0x50>
 800ca84:	ab03      	add	r3, sp, #12
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	462a      	mov	r2, r5
 800ca8a:	4b09      	ldr	r3, [pc, #36]	; (800cab0 <_vfiprintf_r+0x258>)
 800ca8c:	a904      	add	r1, sp, #16
 800ca8e:	4630      	mov	r0, r6
 800ca90:	f000 f880 	bl	800cb94 <_printf_i>
 800ca94:	e7e4      	b.n	800ca60 <_vfiprintf_r+0x208>
 800ca96:	bf00      	nop
 800ca98:	08011318 	.word	0x08011318
 800ca9c:	08011338 	.word	0x08011338
 800caa0:	080112f8 	.word	0x080112f8
 800caa4:	0801135c 	.word	0x0801135c
 800caa8:	08011366 	.word	0x08011366
 800caac:	00000000 	.word	0x00000000
 800cab0:	0800c833 	.word	0x0800c833
 800cab4:	08011362 	.word	0x08011362

0800cab8 <_printf_common>:
 800cab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cabc:	4616      	mov	r6, r2
 800cabe:	4699      	mov	r9, r3
 800cac0:	688a      	ldr	r2, [r1, #8]
 800cac2:	690b      	ldr	r3, [r1, #16]
 800cac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cac8:	4293      	cmp	r3, r2
 800caca:	bfb8      	it	lt
 800cacc:	4613      	movlt	r3, r2
 800cace:	6033      	str	r3, [r6, #0]
 800cad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cad4:	4607      	mov	r7, r0
 800cad6:	460c      	mov	r4, r1
 800cad8:	b10a      	cbz	r2, 800cade <_printf_common+0x26>
 800cada:	3301      	adds	r3, #1
 800cadc:	6033      	str	r3, [r6, #0]
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	0699      	lsls	r1, r3, #26
 800cae2:	bf42      	ittt	mi
 800cae4:	6833      	ldrmi	r3, [r6, #0]
 800cae6:	3302      	addmi	r3, #2
 800cae8:	6033      	strmi	r3, [r6, #0]
 800caea:	6825      	ldr	r5, [r4, #0]
 800caec:	f015 0506 	ands.w	r5, r5, #6
 800caf0:	d106      	bne.n	800cb00 <_printf_common+0x48>
 800caf2:	f104 0a19 	add.w	sl, r4, #25
 800caf6:	68e3      	ldr	r3, [r4, #12]
 800caf8:	6832      	ldr	r2, [r6, #0]
 800cafa:	1a9b      	subs	r3, r3, r2
 800cafc:	42ab      	cmp	r3, r5
 800cafe:	dc26      	bgt.n	800cb4e <_printf_common+0x96>
 800cb00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb04:	1e13      	subs	r3, r2, #0
 800cb06:	6822      	ldr	r2, [r4, #0]
 800cb08:	bf18      	it	ne
 800cb0a:	2301      	movne	r3, #1
 800cb0c:	0692      	lsls	r2, r2, #26
 800cb0e:	d42b      	bmi.n	800cb68 <_printf_common+0xb0>
 800cb10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb14:	4649      	mov	r1, r9
 800cb16:	4638      	mov	r0, r7
 800cb18:	47c0      	blx	r8
 800cb1a:	3001      	adds	r0, #1
 800cb1c:	d01e      	beq.n	800cb5c <_printf_common+0xa4>
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	68e5      	ldr	r5, [r4, #12]
 800cb22:	6832      	ldr	r2, [r6, #0]
 800cb24:	f003 0306 	and.w	r3, r3, #6
 800cb28:	2b04      	cmp	r3, #4
 800cb2a:	bf08      	it	eq
 800cb2c:	1aad      	subeq	r5, r5, r2
 800cb2e:	68a3      	ldr	r3, [r4, #8]
 800cb30:	6922      	ldr	r2, [r4, #16]
 800cb32:	bf0c      	ite	eq
 800cb34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb38:	2500      	movne	r5, #0
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	bfc4      	itt	gt
 800cb3e:	1a9b      	subgt	r3, r3, r2
 800cb40:	18ed      	addgt	r5, r5, r3
 800cb42:	2600      	movs	r6, #0
 800cb44:	341a      	adds	r4, #26
 800cb46:	42b5      	cmp	r5, r6
 800cb48:	d11a      	bne.n	800cb80 <_printf_common+0xc8>
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	e008      	b.n	800cb60 <_printf_common+0xa8>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	4652      	mov	r2, sl
 800cb52:	4649      	mov	r1, r9
 800cb54:	4638      	mov	r0, r7
 800cb56:	47c0      	blx	r8
 800cb58:	3001      	adds	r0, #1
 800cb5a:	d103      	bne.n	800cb64 <_printf_common+0xac>
 800cb5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb64:	3501      	adds	r5, #1
 800cb66:	e7c6      	b.n	800caf6 <_printf_common+0x3e>
 800cb68:	18e1      	adds	r1, r4, r3
 800cb6a:	1c5a      	adds	r2, r3, #1
 800cb6c:	2030      	movs	r0, #48	; 0x30
 800cb6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb72:	4422      	add	r2, r4
 800cb74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb7c:	3302      	adds	r3, #2
 800cb7e:	e7c7      	b.n	800cb10 <_printf_common+0x58>
 800cb80:	2301      	movs	r3, #1
 800cb82:	4622      	mov	r2, r4
 800cb84:	4649      	mov	r1, r9
 800cb86:	4638      	mov	r0, r7
 800cb88:	47c0      	blx	r8
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	d0e6      	beq.n	800cb5c <_printf_common+0xa4>
 800cb8e:	3601      	adds	r6, #1
 800cb90:	e7d9      	b.n	800cb46 <_printf_common+0x8e>
	...

0800cb94 <_printf_i>:
 800cb94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb98:	7e0f      	ldrb	r7, [r1, #24]
 800cb9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb9c:	2f78      	cmp	r7, #120	; 0x78
 800cb9e:	4691      	mov	r9, r2
 800cba0:	4680      	mov	r8, r0
 800cba2:	460c      	mov	r4, r1
 800cba4:	469a      	mov	sl, r3
 800cba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cbaa:	d807      	bhi.n	800cbbc <_printf_i+0x28>
 800cbac:	2f62      	cmp	r7, #98	; 0x62
 800cbae:	d80a      	bhi.n	800cbc6 <_printf_i+0x32>
 800cbb0:	2f00      	cmp	r7, #0
 800cbb2:	f000 80d8 	beq.w	800cd66 <_printf_i+0x1d2>
 800cbb6:	2f58      	cmp	r7, #88	; 0x58
 800cbb8:	f000 80a3 	beq.w	800cd02 <_printf_i+0x16e>
 800cbbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cbc4:	e03a      	b.n	800cc3c <_printf_i+0xa8>
 800cbc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cbca:	2b15      	cmp	r3, #21
 800cbcc:	d8f6      	bhi.n	800cbbc <_printf_i+0x28>
 800cbce:	a101      	add	r1, pc, #4	; (adr r1, 800cbd4 <_printf_i+0x40>)
 800cbd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbd4:	0800cc2d 	.word	0x0800cc2d
 800cbd8:	0800cc41 	.word	0x0800cc41
 800cbdc:	0800cbbd 	.word	0x0800cbbd
 800cbe0:	0800cbbd 	.word	0x0800cbbd
 800cbe4:	0800cbbd 	.word	0x0800cbbd
 800cbe8:	0800cbbd 	.word	0x0800cbbd
 800cbec:	0800cc41 	.word	0x0800cc41
 800cbf0:	0800cbbd 	.word	0x0800cbbd
 800cbf4:	0800cbbd 	.word	0x0800cbbd
 800cbf8:	0800cbbd 	.word	0x0800cbbd
 800cbfc:	0800cbbd 	.word	0x0800cbbd
 800cc00:	0800cd4d 	.word	0x0800cd4d
 800cc04:	0800cc71 	.word	0x0800cc71
 800cc08:	0800cd2f 	.word	0x0800cd2f
 800cc0c:	0800cbbd 	.word	0x0800cbbd
 800cc10:	0800cbbd 	.word	0x0800cbbd
 800cc14:	0800cd6f 	.word	0x0800cd6f
 800cc18:	0800cbbd 	.word	0x0800cbbd
 800cc1c:	0800cc71 	.word	0x0800cc71
 800cc20:	0800cbbd 	.word	0x0800cbbd
 800cc24:	0800cbbd 	.word	0x0800cbbd
 800cc28:	0800cd37 	.word	0x0800cd37
 800cc2c:	682b      	ldr	r3, [r5, #0]
 800cc2e:	1d1a      	adds	r2, r3, #4
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	602a      	str	r2, [r5, #0]
 800cc34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e0a3      	b.n	800cd88 <_printf_i+0x1f4>
 800cc40:	6820      	ldr	r0, [r4, #0]
 800cc42:	6829      	ldr	r1, [r5, #0]
 800cc44:	0606      	lsls	r6, r0, #24
 800cc46:	f101 0304 	add.w	r3, r1, #4
 800cc4a:	d50a      	bpl.n	800cc62 <_printf_i+0xce>
 800cc4c:	680e      	ldr	r6, [r1, #0]
 800cc4e:	602b      	str	r3, [r5, #0]
 800cc50:	2e00      	cmp	r6, #0
 800cc52:	da03      	bge.n	800cc5c <_printf_i+0xc8>
 800cc54:	232d      	movs	r3, #45	; 0x2d
 800cc56:	4276      	negs	r6, r6
 800cc58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc5c:	485e      	ldr	r0, [pc, #376]	; (800cdd8 <_printf_i+0x244>)
 800cc5e:	230a      	movs	r3, #10
 800cc60:	e019      	b.n	800cc96 <_printf_i+0x102>
 800cc62:	680e      	ldr	r6, [r1, #0]
 800cc64:	602b      	str	r3, [r5, #0]
 800cc66:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc6a:	bf18      	it	ne
 800cc6c:	b236      	sxthne	r6, r6
 800cc6e:	e7ef      	b.n	800cc50 <_printf_i+0xbc>
 800cc70:	682b      	ldr	r3, [r5, #0]
 800cc72:	6820      	ldr	r0, [r4, #0]
 800cc74:	1d19      	adds	r1, r3, #4
 800cc76:	6029      	str	r1, [r5, #0]
 800cc78:	0601      	lsls	r1, r0, #24
 800cc7a:	d501      	bpl.n	800cc80 <_printf_i+0xec>
 800cc7c:	681e      	ldr	r6, [r3, #0]
 800cc7e:	e002      	b.n	800cc86 <_printf_i+0xf2>
 800cc80:	0646      	lsls	r6, r0, #25
 800cc82:	d5fb      	bpl.n	800cc7c <_printf_i+0xe8>
 800cc84:	881e      	ldrh	r6, [r3, #0]
 800cc86:	4854      	ldr	r0, [pc, #336]	; (800cdd8 <_printf_i+0x244>)
 800cc88:	2f6f      	cmp	r7, #111	; 0x6f
 800cc8a:	bf0c      	ite	eq
 800cc8c:	2308      	moveq	r3, #8
 800cc8e:	230a      	movne	r3, #10
 800cc90:	2100      	movs	r1, #0
 800cc92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc96:	6865      	ldr	r5, [r4, #4]
 800cc98:	60a5      	str	r5, [r4, #8]
 800cc9a:	2d00      	cmp	r5, #0
 800cc9c:	bfa2      	ittt	ge
 800cc9e:	6821      	ldrge	r1, [r4, #0]
 800cca0:	f021 0104 	bicge.w	r1, r1, #4
 800cca4:	6021      	strge	r1, [r4, #0]
 800cca6:	b90e      	cbnz	r6, 800ccac <_printf_i+0x118>
 800cca8:	2d00      	cmp	r5, #0
 800ccaa:	d04d      	beq.n	800cd48 <_printf_i+0x1b4>
 800ccac:	4615      	mov	r5, r2
 800ccae:	fbb6 f1f3 	udiv	r1, r6, r3
 800ccb2:	fb03 6711 	mls	r7, r3, r1, r6
 800ccb6:	5dc7      	ldrb	r7, [r0, r7]
 800ccb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ccbc:	4637      	mov	r7, r6
 800ccbe:	42bb      	cmp	r3, r7
 800ccc0:	460e      	mov	r6, r1
 800ccc2:	d9f4      	bls.n	800ccae <_printf_i+0x11a>
 800ccc4:	2b08      	cmp	r3, #8
 800ccc6:	d10b      	bne.n	800cce0 <_printf_i+0x14c>
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	07de      	lsls	r6, r3, #31
 800cccc:	d508      	bpl.n	800cce0 <_printf_i+0x14c>
 800ccce:	6923      	ldr	r3, [r4, #16]
 800ccd0:	6861      	ldr	r1, [r4, #4]
 800ccd2:	4299      	cmp	r1, r3
 800ccd4:	bfde      	ittt	le
 800ccd6:	2330      	movle	r3, #48	; 0x30
 800ccd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ccdc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cce0:	1b52      	subs	r2, r2, r5
 800cce2:	6122      	str	r2, [r4, #16]
 800cce4:	f8cd a000 	str.w	sl, [sp]
 800cce8:	464b      	mov	r3, r9
 800ccea:	aa03      	add	r2, sp, #12
 800ccec:	4621      	mov	r1, r4
 800ccee:	4640      	mov	r0, r8
 800ccf0:	f7ff fee2 	bl	800cab8 <_printf_common>
 800ccf4:	3001      	adds	r0, #1
 800ccf6:	d14c      	bne.n	800cd92 <_printf_i+0x1fe>
 800ccf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccfc:	b004      	add	sp, #16
 800ccfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd02:	4835      	ldr	r0, [pc, #212]	; (800cdd8 <_printf_i+0x244>)
 800cd04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cd08:	6829      	ldr	r1, [r5, #0]
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd10:	6029      	str	r1, [r5, #0]
 800cd12:	061d      	lsls	r5, r3, #24
 800cd14:	d514      	bpl.n	800cd40 <_printf_i+0x1ac>
 800cd16:	07df      	lsls	r7, r3, #31
 800cd18:	bf44      	itt	mi
 800cd1a:	f043 0320 	orrmi.w	r3, r3, #32
 800cd1e:	6023      	strmi	r3, [r4, #0]
 800cd20:	b91e      	cbnz	r6, 800cd2a <_printf_i+0x196>
 800cd22:	6823      	ldr	r3, [r4, #0]
 800cd24:	f023 0320 	bic.w	r3, r3, #32
 800cd28:	6023      	str	r3, [r4, #0]
 800cd2a:	2310      	movs	r3, #16
 800cd2c:	e7b0      	b.n	800cc90 <_printf_i+0xfc>
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	f043 0320 	orr.w	r3, r3, #32
 800cd34:	6023      	str	r3, [r4, #0]
 800cd36:	2378      	movs	r3, #120	; 0x78
 800cd38:	4828      	ldr	r0, [pc, #160]	; (800cddc <_printf_i+0x248>)
 800cd3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd3e:	e7e3      	b.n	800cd08 <_printf_i+0x174>
 800cd40:	0659      	lsls	r1, r3, #25
 800cd42:	bf48      	it	mi
 800cd44:	b2b6      	uxthmi	r6, r6
 800cd46:	e7e6      	b.n	800cd16 <_printf_i+0x182>
 800cd48:	4615      	mov	r5, r2
 800cd4a:	e7bb      	b.n	800ccc4 <_printf_i+0x130>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	6826      	ldr	r6, [r4, #0]
 800cd50:	6961      	ldr	r1, [r4, #20]
 800cd52:	1d18      	adds	r0, r3, #4
 800cd54:	6028      	str	r0, [r5, #0]
 800cd56:	0635      	lsls	r5, r6, #24
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	d501      	bpl.n	800cd60 <_printf_i+0x1cc>
 800cd5c:	6019      	str	r1, [r3, #0]
 800cd5e:	e002      	b.n	800cd66 <_printf_i+0x1d2>
 800cd60:	0670      	lsls	r0, r6, #25
 800cd62:	d5fb      	bpl.n	800cd5c <_printf_i+0x1c8>
 800cd64:	8019      	strh	r1, [r3, #0]
 800cd66:	2300      	movs	r3, #0
 800cd68:	6123      	str	r3, [r4, #16]
 800cd6a:	4615      	mov	r5, r2
 800cd6c:	e7ba      	b.n	800cce4 <_printf_i+0x150>
 800cd6e:	682b      	ldr	r3, [r5, #0]
 800cd70:	1d1a      	adds	r2, r3, #4
 800cd72:	602a      	str	r2, [r5, #0]
 800cd74:	681d      	ldr	r5, [r3, #0]
 800cd76:	6862      	ldr	r2, [r4, #4]
 800cd78:	2100      	movs	r1, #0
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	f7f3 fa30 	bl	80001e0 <memchr>
 800cd80:	b108      	cbz	r0, 800cd86 <_printf_i+0x1f2>
 800cd82:	1b40      	subs	r0, r0, r5
 800cd84:	6060      	str	r0, [r4, #4]
 800cd86:	6863      	ldr	r3, [r4, #4]
 800cd88:	6123      	str	r3, [r4, #16]
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd90:	e7a8      	b.n	800cce4 <_printf_i+0x150>
 800cd92:	6923      	ldr	r3, [r4, #16]
 800cd94:	462a      	mov	r2, r5
 800cd96:	4649      	mov	r1, r9
 800cd98:	4640      	mov	r0, r8
 800cd9a:	47d0      	blx	sl
 800cd9c:	3001      	adds	r0, #1
 800cd9e:	d0ab      	beq.n	800ccf8 <_printf_i+0x164>
 800cda0:	6823      	ldr	r3, [r4, #0]
 800cda2:	079b      	lsls	r3, r3, #30
 800cda4:	d413      	bmi.n	800cdce <_printf_i+0x23a>
 800cda6:	68e0      	ldr	r0, [r4, #12]
 800cda8:	9b03      	ldr	r3, [sp, #12]
 800cdaa:	4298      	cmp	r0, r3
 800cdac:	bfb8      	it	lt
 800cdae:	4618      	movlt	r0, r3
 800cdb0:	e7a4      	b.n	800ccfc <_printf_i+0x168>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	4632      	mov	r2, r6
 800cdb6:	4649      	mov	r1, r9
 800cdb8:	4640      	mov	r0, r8
 800cdba:	47d0      	blx	sl
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d09b      	beq.n	800ccf8 <_printf_i+0x164>
 800cdc0:	3501      	adds	r5, #1
 800cdc2:	68e3      	ldr	r3, [r4, #12]
 800cdc4:	9903      	ldr	r1, [sp, #12]
 800cdc6:	1a5b      	subs	r3, r3, r1
 800cdc8:	42ab      	cmp	r3, r5
 800cdca:	dcf2      	bgt.n	800cdb2 <_printf_i+0x21e>
 800cdcc:	e7eb      	b.n	800cda6 <_printf_i+0x212>
 800cdce:	2500      	movs	r5, #0
 800cdd0:	f104 0619 	add.w	r6, r4, #25
 800cdd4:	e7f5      	b.n	800cdc2 <_printf_i+0x22e>
 800cdd6:	bf00      	nop
 800cdd8:	0801136d 	.word	0x0801136d
 800cddc:	0801137e 	.word	0x0801137e

0800cde0 <iprintf>:
 800cde0:	b40f      	push	{r0, r1, r2, r3}
 800cde2:	4b0a      	ldr	r3, [pc, #40]	; (800ce0c <iprintf+0x2c>)
 800cde4:	b513      	push	{r0, r1, r4, lr}
 800cde6:	681c      	ldr	r4, [r3, #0]
 800cde8:	b124      	cbz	r4, 800cdf4 <iprintf+0x14>
 800cdea:	69a3      	ldr	r3, [r4, #24]
 800cdec:	b913      	cbnz	r3, 800cdf4 <iprintf+0x14>
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f7ff fa82 	bl	800c2f8 <__sinit>
 800cdf4:	ab05      	add	r3, sp, #20
 800cdf6:	9a04      	ldr	r2, [sp, #16]
 800cdf8:	68a1      	ldr	r1, [r4, #8]
 800cdfa:	9301      	str	r3, [sp, #4]
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f7ff fd2b 	bl	800c858 <_vfiprintf_r>
 800ce02:	b002      	add	sp, #8
 800ce04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce08:	b004      	add	sp, #16
 800ce0a:	4770      	bx	lr
 800ce0c:	200000b8 	.word	0x200000b8

0800ce10 <cleanup_glue>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	460c      	mov	r4, r1
 800ce14:	6809      	ldr	r1, [r1, #0]
 800ce16:	4605      	mov	r5, r0
 800ce18:	b109      	cbz	r1, 800ce1e <cleanup_glue+0xe>
 800ce1a:	f7ff fff9 	bl	800ce10 <cleanup_glue>
 800ce1e:	4621      	mov	r1, r4
 800ce20:	4628      	mov	r0, r5
 800ce22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce26:	f7ff bc0d 	b.w	800c644 <_free_r>
	...

0800ce2c <_reclaim_reent>:
 800ce2c:	4b2c      	ldr	r3, [pc, #176]	; (800cee0 <_reclaim_reent+0xb4>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4283      	cmp	r3, r0
 800ce32:	b570      	push	{r4, r5, r6, lr}
 800ce34:	4604      	mov	r4, r0
 800ce36:	d051      	beq.n	800cedc <_reclaim_reent+0xb0>
 800ce38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ce3a:	b143      	cbz	r3, 800ce4e <_reclaim_reent+0x22>
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d14a      	bne.n	800ced8 <_reclaim_reent+0xac>
 800ce42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce44:	6819      	ldr	r1, [r3, #0]
 800ce46:	b111      	cbz	r1, 800ce4e <_reclaim_reent+0x22>
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f7ff fbfb 	bl	800c644 <_free_r>
 800ce4e:	6961      	ldr	r1, [r4, #20]
 800ce50:	b111      	cbz	r1, 800ce58 <_reclaim_reent+0x2c>
 800ce52:	4620      	mov	r0, r4
 800ce54:	f7ff fbf6 	bl	800c644 <_free_r>
 800ce58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ce5a:	b111      	cbz	r1, 800ce62 <_reclaim_reent+0x36>
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	f7ff fbf1 	bl	800c644 <_free_r>
 800ce62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ce64:	b111      	cbz	r1, 800ce6c <_reclaim_reent+0x40>
 800ce66:	4620      	mov	r0, r4
 800ce68:	f7ff fbec 	bl	800c644 <_free_r>
 800ce6c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ce6e:	b111      	cbz	r1, 800ce76 <_reclaim_reent+0x4a>
 800ce70:	4620      	mov	r0, r4
 800ce72:	f7ff fbe7 	bl	800c644 <_free_r>
 800ce76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ce78:	b111      	cbz	r1, 800ce80 <_reclaim_reent+0x54>
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f7ff fbe2 	bl	800c644 <_free_r>
 800ce80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ce82:	b111      	cbz	r1, 800ce8a <_reclaim_reent+0x5e>
 800ce84:	4620      	mov	r0, r4
 800ce86:	f7ff fbdd 	bl	800c644 <_free_r>
 800ce8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ce8c:	b111      	cbz	r1, 800ce94 <_reclaim_reent+0x68>
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f7ff fbd8 	bl	800c644 <_free_r>
 800ce94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce96:	b111      	cbz	r1, 800ce9e <_reclaim_reent+0x72>
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f7ff fbd3 	bl	800c644 <_free_r>
 800ce9e:	69a3      	ldr	r3, [r4, #24]
 800cea0:	b1e3      	cbz	r3, 800cedc <_reclaim_reent+0xb0>
 800cea2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cea4:	4620      	mov	r0, r4
 800cea6:	4798      	blx	r3
 800cea8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ceaa:	b1b9      	cbz	r1, 800cedc <_reclaim_reent+0xb0>
 800ceac:	4620      	mov	r0, r4
 800ceae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ceb2:	f7ff bfad 	b.w	800ce10 <cleanup_glue>
 800ceb6:	5949      	ldr	r1, [r1, r5]
 800ceb8:	b941      	cbnz	r1, 800cecc <_reclaim_reent+0xa0>
 800ceba:	3504      	adds	r5, #4
 800cebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cebe:	2d80      	cmp	r5, #128	; 0x80
 800cec0:	68d9      	ldr	r1, [r3, #12]
 800cec2:	d1f8      	bne.n	800ceb6 <_reclaim_reent+0x8a>
 800cec4:	4620      	mov	r0, r4
 800cec6:	f7ff fbbd 	bl	800c644 <_free_r>
 800ceca:	e7ba      	b.n	800ce42 <_reclaim_reent+0x16>
 800cecc:	680e      	ldr	r6, [r1, #0]
 800cece:	4620      	mov	r0, r4
 800ced0:	f7ff fbb8 	bl	800c644 <_free_r>
 800ced4:	4631      	mov	r1, r6
 800ced6:	e7ef      	b.n	800ceb8 <_reclaim_reent+0x8c>
 800ced8:	2500      	movs	r5, #0
 800ceda:	e7ef      	b.n	800cebc <_reclaim_reent+0x90>
 800cedc:	bd70      	pop	{r4, r5, r6, pc}
 800cede:	bf00      	nop
 800cee0:	200000b8 	.word	0x200000b8

0800cee4 <_sbrk_r>:
 800cee4:	b538      	push	{r3, r4, r5, lr}
 800cee6:	4d06      	ldr	r5, [pc, #24]	; (800cf00 <_sbrk_r+0x1c>)
 800cee8:	2300      	movs	r3, #0
 800ceea:	4604      	mov	r4, r0
 800ceec:	4608      	mov	r0, r1
 800ceee:	602b      	str	r3, [r5, #0]
 800cef0:	f7f7 fb0a 	bl	8004508 <_sbrk>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d102      	bne.n	800cefe <_sbrk_r+0x1a>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	b103      	cbz	r3, 800cefe <_sbrk_r+0x1a>
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	200062a0 	.word	0x200062a0

0800cf04 <siprintf>:
 800cf04:	b40e      	push	{r1, r2, r3}
 800cf06:	b500      	push	{lr}
 800cf08:	b09c      	sub	sp, #112	; 0x70
 800cf0a:	ab1d      	add	r3, sp, #116	; 0x74
 800cf0c:	9002      	str	r0, [sp, #8]
 800cf0e:	9006      	str	r0, [sp, #24]
 800cf10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf14:	4809      	ldr	r0, [pc, #36]	; (800cf3c <siprintf+0x38>)
 800cf16:	9107      	str	r1, [sp, #28]
 800cf18:	9104      	str	r1, [sp, #16]
 800cf1a:	4909      	ldr	r1, [pc, #36]	; (800cf40 <siprintf+0x3c>)
 800cf1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf20:	9105      	str	r1, [sp, #20]
 800cf22:	6800      	ldr	r0, [r0, #0]
 800cf24:	9301      	str	r3, [sp, #4]
 800cf26:	a902      	add	r1, sp, #8
 800cf28:	f000 fc2e 	bl	800d788 <_svfiprintf_r>
 800cf2c:	9b02      	ldr	r3, [sp, #8]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	701a      	strb	r2, [r3, #0]
 800cf32:	b01c      	add	sp, #112	; 0x70
 800cf34:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf38:	b003      	add	sp, #12
 800cf3a:	4770      	bx	lr
 800cf3c:	200000b8 	.word	0x200000b8
 800cf40:	ffff0208 	.word	0xffff0208

0800cf44 <__sread>:
 800cf44:	b510      	push	{r4, lr}
 800cf46:	460c      	mov	r4, r1
 800cf48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf4c:	f000 fd1c 	bl	800d988 <_read_r>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	bfab      	itete	ge
 800cf54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf56:	89a3      	ldrhlt	r3, [r4, #12]
 800cf58:	181b      	addge	r3, r3, r0
 800cf5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf5e:	bfac      	ite	ge
 800cf60:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf62:	81a3      	strhlt	r3, [r4, #12]
 800cf64:	bd10      	pop	{r4, pc}

0800cf66 <__swrite>:
 800cf66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf6a:	461f      	mov	r7, r3
 800cf6c:	898b      	ldrh	r3, [r1, #12]
 800cf6e:	05db      	lsls	r3, r3, #23
 800cf70:	4605      	mov	r5, r0
 800cf72:	460c      	mov	r4, r1
 800cf74:	4616      	mov	r6, r2
 800cf76:	d505      	bpl.n	800cf84 <__swrite+0x1e>
 800cf78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf7c:	2302      	movs	r3, #2
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f000 fada 	bl	800d538 <_lseek_r>
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf8e:	81a3      	strh	r3, [r4, #12]
 800cf90:	4632      	mov	r2, r6
 800cf92:	463b      	mov	r3, r7
 800cf94:	4628      	mov	r0, r5
 800cf96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf9a:	f000 b97b 	b.w	800d294 <_write_r>

0800cf9e <__sseek>:
 800cf9e:	b510      	push	{r4, lr}
 800cfa0:	460c      	mov	r4, r1
 800cfa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa6:	f000 fac7 	bl	800d538 <_lseek_r>
 800cfaa:	1c43      	adds	r3, r0, #1
 800cfac:	89a3      	ldrh	r3, [r4, #12]
 800cfae:	bf15      	itete	ne
 800cfb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfba:	81a3      	strheq	r3, [r4, #12]
 800cfbc:	bf18      	it	ne
 800cfbe:	81a3      	strhne	r3, [r4, #12]
 800cfc0:	bd10      	pop	{r4, pc}

0800cfc2 <__sclose>:
 800cfc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfc6:	f000 b9e5 	b.w	800d394 <_close_r>

0800cfca <strcat>:
 800cfca:	b510      	push	{r4, lr}
 800cfcc:	4602      	mov	r2, r0
 800cfce:	7814      	ldrb	r4, [r2, #0]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	3201      	adds	r2, #1
 800cfd4:	2c00      	cmp	r4, #0
 800cfd6:	d1fa      	bne.n	800cfce <strcat+0x4>
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfe2:	2a00      	cmp	r2, #0
 800cfe4:	d1f9      	bne.n	800cfda <strcat+0x10>
 800cfe6:	bd10      	pop	{r4, pc}

0800cfe8 <strchr>:
 800cfe8:	b2c9      	uxtb	r1, r1
 800cfea:	4603      	mov	r3, r0
 800cfec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cff0:	b11a      	cbz	r2, 800cffa <strchr+0x12>
 800cff2:	428a      	cmp	r2, r1
 800cff4:	d1f9      	bne.n	800cfea <strchr+0x2>
 800cff6:	4618      	mov	r0, r3
 800cff8:	4770      	bx	lr
 800cffa:	2900      	cmp	r1, #0
 800cffc:	bf18      	it	ne
 800cffe:	2300      	movne	r3, #0
 800d000:	e7f9      	b.n	800cff6 <strchr+0xe>

0800d002 <strcpy>:
 800d002:	4603      	mov	r3, r0
 800d004:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d008:	f803 2b01 	strb.w	r2, [r3], #1
 800d00c:	2a00      	cmp	r2, #0
 800d00e:	d1f9      	bne.n	800d004 <strcpy+0x2>
 800d010:	4770      	bx	lr

0800d012 <strncpy>:
 800d012:	b510      	push	{r4, lr}
 800d014:	3901      	subs	r1, #1
 800d016:	4603      	mov	r3, r0
 800d018:	b132      	cbz	r2, 800d028 <strncpy+0x16>
 800d01a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d01e:	f803 4b01 	strb.w	r4, [r3], #1
 800d022:	3a01      	subs	r2, #1
 800d024:	2c00      	cmp	r4, #0
 800d026:	d1f7      	bne.n	800d018 <strncpy+0x6>
 800d028:	441a      	add	r2, r3
 800d02a:	2100      	movs	r1, #0
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d100      	bne.n	800d032 <strncpy+0x20>
 800d030:	bd10      	pop	{r4, pc}
 800d032:	f803 1b01 	strb.w	r1, [r3], #1
 800d036:	e7f9      	b.n	800d02c <strncpy+0x1a>

0800d038 <strstr>:
 800d038:	780a      	ldrb	r2, [r1, #0]
 800d03a:	b570      	push	{r4, r5, r6, lr}
 800d03c:	b96a      	cbnz	r2, 800d05a <strstr+0x22>
 800d03e:	bd70      	pop	{r4, r5, r6, pc}
 800d040:	429a      	cmp	r2, r3
 800d042:	d109      	bne.n	800d058 <strstr+0x20>
 800d044:	460c      	mov	r4, r1
 800d046:	4605      	mov	r5, r0
 800d048:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d0f6      	beq.n	800d03e <strstr+0x6>
 800d050:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d054:	429e      	cmp	r6, r3
 800d056:	d0f7      	beq.n	800d048 <strstr+0x10>
 800d058:	3001      	adds	r0, #1
 800d05a:	7803      	ldrb	r3, [r0, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d1ef      	bne.n	800d040 <strstr+0x8>
 800d060:	4618      	mov	r0, r3
 800d062:	e7ec      	b.n	800d03e <strstr+0x6>

0800d064 <_strtol_l.constprop.0>:
 800d064:	2b01      	cmp	r3, #1
 800d066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d06a:	d001      	beq.n	800d070 <_strtol_l.constprop.0+0xc>
 800d06c:	2b24      	cmp	r3, #36	; 0x24
 800d06e:	d906      	bls.n	800d07e <_strtol_l.constprop.0+0x1a>
 800d070:	f7ff f8e4 	bl	800c23c <__errno>
 800d074:	2316      	movs	r3, #22
 800d076:	6003      	str	r3, [r0, #0]
 800d078:	2000      	movs	r0, #0
 800d07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d07e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d164 <_strtol_l.constprop.0+0x100>
 800d082:	460d      	mov	r5, r1
 800d084:	462e      	mov	r6, r5
 800d086:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d08a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d08e:	f017 0708 	ands.w	r7, r7, #8
 800d092:	d1f7      	bne.n	800d084 <_strtol_l.constprop.0+0x20>
 800d094:	2c2d      	cmp	r4, #45	; 0x2d
 800d096:	d132      	bne.n	800d0fe <_strtol_l.constprop.0+0x9a>
 800d098:	782c      	ldrb	r4, [r5, #0]
 800d09a:	2701      	movs	r7, #1
 800d09c:	1cb5      	adds	r5, r6, #2
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d05b      	beq.n	800d15a <_strtol_l.constprop.0+0xf6>
 800d0a2:	2b10      	cmp	r3, #16
 800d0a4:	d109      	bne.n	800d0ba <_strtol_l.constprop.0+0x56>
 800d0a6:	2c30      	cmp	r4, #48	; 0x30
 800d0a8:	d107      	bne.n	800d0ba <_strtol_l.constprop.0+0x56>
 800d0aa:	782c      	ldrb	r4, [r5, #0]
 800d0ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d0b0:	2c58      	cmp	r4, #88	; 0x58
 800d0b2:	d14d      	bne.n	800d150 <_strtol_l.constprop.0+0xec>
 800d0b4:	786c      	ldrb	r4, [r5, #1]
 800d0b6:	2310      	movs	r3, #16
 800d0b8:	3502      	adds	r5, #2
 800d0ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d0be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d0c2:	f04f 0c00 	mov.w	ip, #0
 800d0c6:	fbb8 f9f3 	udiv	r9, r8, r3
 800d0ca:	4666      	mov	r6, ip
 800d0cc:	fb03 8a19 	mls	sl, r3, r9, r8
 800d0d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d0d4:	f1be 0f09 	cmp.w	lr, #9
 800d0d8:	d816      	bhi.n	800d108 <_strtol_l.constprop.0+0xa4>
 800d0da:	4674      	mov	r4, lr
 800d0dc:	42a3      	cmp	r3, r4
 800d0de:	dd24      	ble.n	800d12a <_strtol_l.constprop.0+0xc6>
 800d0e0:	f1bc 0f00 	cmp.w	ip, #0
 800d0e4:	db1e      	blt.n	800d124 <_strtol_l.constprop.0+0xc0>
 800d0e6:	45b1      	cmp	r9, r6
 800d0e8:	d31c      	bcc.n	800d124 <_strtol_l.constprop.0+0xc0>
 800d0ea:	d101      	bne.n	800d0f0 <_strtol_l.constprop.0+0x8c>
 800d0ec:	45a2      	cmp	sl, r4
 800d0ee:	db19      	blt.n	800d124 <_strtol_l.constprop.0+0xc0>
 800d0f0:	fb06 4603 	mla	r6, r6, r3, r4
 800d0f4:	f04f 0c01 	mov.w	ip, #1
 800d0f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0fc:	e7e8      	b.n	800d0d0 <_strtol_l.constprop.0+0x6c>
 800d0fe:	2c2b      	cmp	r4, #43	; 0x2b
 800d100:	bf04      	itt	eq
 800d102:	782c      	ldrbeq	r4, [r5, #0]
 800d104:	1cb5      	addeq	r5, r6, #2
 800d106:	e7ca      	b.n	800d09e <_strtol_l.constprop.0+0x3a>
 800d108:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d10c:	f1be 0f19 	cmp.w	lr, #25
 800d110:	d801      	bhi.n	800d116 <_strtol_l.constprop.0+0xb2>
 800d112:	3c37      	subs	r4, #55	; 0x37
 800d114:	e7e2      	b.n	800d0dc <_strtol_l.constprop.0+0x78>
 800d116:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d11a:	f1be 0f19 	cmp.w	lr, #25
 800d11e:	d804      	bhi.n	800d12a <_strtol_l.constprop.0+0xc6>
 800d120:	3c57      	subs	r4, #87	; 0x57
 800d122:	e7db      	b.n	800d0dc <_strtol_l.constprop.0+0x78>
 800d124:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d128:	e7e6      	b.n	800d0f8 <_strtol_l.constprop.0+0x94>
 800d12a:	f1bc 0f00 	cmp.w	ip, #0
 800d12e:	da05      	bge.n	800d13c <_strtol_l.constprop.0+0xd8>
 800d130:	2322      	movs	r3, #34	; 0x22
 800d132:	6003      	str	r3, [r0, #0]
 800d134:	4646      	mov	r6, r8
 800d136:	b942      	cbnz	r2, 800d14a <_strtol_l.constprop.0+0xe6>
 800d138:	4630      	mov	r0, r6
 800d13a:	e79e      	b.n	800d07a <_strtol_l.constprop.0+0x16>
 800d13c:	b107      	cbz	r7, 800d140 <_strtol_l.constprop.0+0xdc>
 800d13e:	4276      	negs	r6, r6
 800d140:	2a00      	cmp	r2, #0
 800d142:	d0f9      	beq.n	800d138 <_strtol_l.constprop.0+0xd4>
 800d144:	f1bc 0f00 	cmp.w	ip, #0
 800d148:	d000      	beq.n	800d14c <_strtol_l.constprop.0+0xe8>
 800d14a:	1e69      	subs	r1, r5, #1
 800d14c:	6011      	str	r1, [r2, #0]
 800d14e:	e7f3      	b.n	800d138 <_strtol_l.constprop.0+0xd4>
 800d150:	2430      	movs	r4, #48	; 0x30
 800d152:	2b00      	cmp	r3, #0
 800d154:	d1b1      	bne.n	800d0ba <_strtol_l.constprop.0+0x56>
 800d156:	2308      	movs	r3, #8
 800d158:	e7af      	b.n	800d0ba <_strtol_l.constprop.0+0x56>
 800d15a:	2c30      	cmp	r4, #48	; 0x30
 800d15c:	d0a5      	beq.n	800d0aa <_strtol_l.constprop.0+0x46>
 800d15e:	230a      	movs	r3, #10
 800d160:	e7ab      	b.n	800d0ba <_strtol_l.constprop.0+0x56>
 800d162:	bf00      	nop
 800d164:	08011390 	.word	0x08011390

0800d168 <strtol>:
 800d168:	4613      	mov	r3, r2
 800d16a:	460a      	mov	r2, r1
 800d16c:	4601      	mov	r1, r0
 800d16e:	4802      	ldr	r0, [pc, #8]	; (800d178 <strtol+0x10>)
 800d170:	6800      	ldr	r0, [r0, #0]
 800d172:	f7ff bf77 	b.w	800d064 <_strtol_l.constprop.0>
 800d176:	bf00      	nop
 800d178:	200000b8 	.word	0x200000b8

0800d17c <_vsniprintf_r>:
 800d17c:	b530      	push	{r4, r5, lr}
 800d17e:	4614      	mov	r4, r2
 800d180:	2c00      	cmp	r4, #0
 800d182:	b09b      	sub	sp, #108	; 0x6c
 800d184:	4605      	mov	r5, r0
 800d186:	461a      	mov	r2, r3
 800d188:	da05      	bge.n	800d196 <_vsniprintf_r+0x1a>
 800d18a:	238b      	movs	r3, #139	; 0x8b
 800d18c:	6003      	str	r3, [r0, #0]
 800d18e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d192:	b01b      	add	sp, #108	; 0x6c
 800d194:	bd30      	pop	{r4, r5, pc}
 800d196:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d19a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d19e:	bf14      	ite	ne
 800d1a0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d1a4:	4623      	moveq	r3, r4
 800d1a6:	9302      	str	r3, [sp, #8]
 800d1a8:	9305      	str	r3, [sp, #20]
 800d1aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1ae:	9100      	str	r1, [sp, #0]
 800d1b0:	9104      	str	r1, [sp, #16]
 800d1b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d1b6:	4669      	mov	r1, sp
 800d1b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d1ba:	f000 fae5 	bl	800d788 <_svfiprintf_r>
 800d1be:	1c43      	adds	r3, r0, #1
 800d1c0:	bfbc      	itt	lt
 800d1c2:	238b      	movlt	r3, #139	; 0x8b
 800d1c4:	602b      	strlt	r3, [r5, #0]
 800d1c6:	2c00      	cmp	r4, #0
 800d1c8:	d0e3      	beq.n	800d192 <_vsniprintf_r+0x16>
 800d1ca:	9b00      	ldr	r3, [sp, #0]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	701a      	strb	r2, [r3, #0]
 800d1d0:	e7df      	b.n	800d192 <_vsniprintf_r+0x16>
	...

0800d1d4 <vsniprintf>:
 800d1d4:	b507      	push	{r0, r1, r2, lr}
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	4613      	mov	r3, r2
 800d1da:	460a      	mov	r2, r1
 800d1dc:	4601      	mov	r1, r0
 800d1de:	4803      	ldr	r0, [pc, #12]	; (800d1ec <vsniprintf+0x18>)
 800d1e0:	6800      	ldr	r0, [r0, #0]
 800d1e2:	f7ff ffcb 	bl	800d17c <_vsniprintf_r>
 800d1e6:	b003      	add	sp, #12
 800d1e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1ec:	200000b8 	.word	0x200000b8

0800d1f0 <__swbuf_r>:
 800d1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f2:	460e      	mov	r6, r1
 800d1f4:	4614      	mov	r4, r2
 800d1f6:	4605      	mov	r5, r0
 800d1f8:	b118      	cbz	r0, 800d202 <__swbuf_r+0x12>
 800d1fa:	6983      	ldr	r3, [r0, #24]
 800d1fc:	b90b      	cbnz	r3, 800d202 <__swbuf_r+0x12>
 800d1fe:	f7ff f87b 	bl	800c2f8 <__sinit>
 800d202:	4b21      	ldr	r3, [pc, #132]	; (800d288 <__swbuf_r+0x98>)
 800d204:	429c      	cmp	r4, r3
 800d206:	d12b      	bne.n	800d260 <__swbuf_r+0x70>
 800d208:	686c      	ldr	r4, [r5, #4]
 800d20a:	69a3      	ldr	r3, [r4, #24]
 800d20c:	60a3      	str	r3, [r4, #8]
 800d20e:	89a3      	ldrh	r3, [r4, #12]
 800d210:	071a      	lsls	r2, r3, #28
 800d212:	d52f      	bpl.n	800d274 <__swbuf_r+0x84>
 800d214:	6923      	ldr	r3, [r4, #16]
 800d216:	b36b      	cbz	r3, 800d274 <__swbuf_r+0x84>
 800d218:	6923      	ldr	r3, [r4, #16]
 800d21a:	6820      	ldr	r0, [r4, #0]
 800d21c:	1ac0      	subs	r0, r0, r3
 800d21e:	6963      	ldr	r3, [r4, #20]
 800d220:	b2f6      	uxtb	r6, r6
 800d222:	4283      	cmp	r3, r0
 800d224:	4637      	mov	r7, r6
 800d226:	dc04      	bgt.n	800d232 <__swbuf_r+0x42>
 800d228:	4621      	mov	r1, r4
 800d22a:	4628      	mov	r0, r5
 800d22c:	f000 f948 	bl	800d4c0 <_fflush_r>
 800d230:	bb30      	cbnz	r0, 800d280 <__swbuf_r+0x90>
 800d232:	68a3      	ldr	r3, [r4, #8]
 800d234:	3b01      	subs	r3, #1
 800d236:	60a3      	str	r3, [r4, #8]
 800d238:	6823      	ldr	r3, [r4, #0]
 800d23a:	1c5a      	adds	r2, r3, #1
 800d23c:	6022      	str	r2, [r4, #0]
 800d23e:	701e      	strb	r6, [r3, #0]
 800d240:	6963      	ldr	r3, [r4, #20]
 800d242:	3001      	adds	r0, #1
 800d244:	4283      	cmp	r3, r0
 800d246:	d004      	beq.n	800d252 <__swbuf_r+0x62>
 800d248:	89a3      	ldrh	r3, [r4, #12]
 800d24a:	07db      	lsls	r3, r3, #31
 800d24c:	d506      	bpl.n	800d25c <__swbuf_r+0x6c>
 800d24e:	2e0a      	cmp	r6, #10
 800d250:	d104      	bne.n	800d25c <__swbuf_r+0x6c>
 800d252:	4621      	mov	r1, r4
 800d254:	4628      	mov	r0, r5
 800d256:	f000 f933 	bl	800d4c0 <_fflush_r>
 800d25a:	b988      	cbnz	r0, 800d280 <__swbuf_r+0x90>
 800d25c:	4638      	mov	r0, r7
 800d25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d260:	4b0a      	ldr	r3, [pc, #40]	; (800d28c <__swbuf_r+0x9c>)
 800d262:	429c      	cmp	r4, r3
 800d264:	d101      	bne.n	800d26a <__swbuf_r+0x7a>
 800d266:	68ac      	ldr	r4, [r5, #8]
 800d268:	e7cf      	b.n	800d20a <__swbuf_r+0x1a>
 800d26a:	4b09      	ldr	r3, [pc, #36]	; (800d290 <__swbuf_r+0xa0>)
 800d26c:	429c      	cmp	r4, r3
 800d26e:	bf08      	it	eq
 800d270:	68ec      	ldreq	r4, [r5, #12]
 800d272:	e7ca      	b.n	800d20a <__swbuf_r+0x1a>
 800d274:	4621      	mov	r1, r4
 800d276:	4628      	mov	r0, r5
 800d278:	f000 f81e 	bl	800d2b8 <__swsetup_r>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d0cb      	beq.n	800d218 <__swbuf_r+0x28>
 800d280:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d284:	e7ea      	b.n	800d25c <__swbuf_r+0x6c>
 800d286:	bf00      	nop
 800d288:	08011318 	.word	0x08011318
 800d28c:	08011338 	.word	0x08011338
 800d290:	080112f8 	.word	0x080112f8

0800d294 <_write_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4d07      	ldr	r5, [pc, #28]	; (800d2b4 <_write_r+0x20>)
 800d298:	4604      	mov	r4, r0
 800d29a:	4608      	mov	r0, r1
 800d29c:	4611      	mov	r1, r2
 800d29e:	2200      	movs	r2, #0
 800d2a0:	602a      	str	r2, [r5, #0]
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	f7f4 f940 	bl	8001528 <_write>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	d102      	bne.n	800d2b2 <_write_r+0x1e>
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	b103      	cbz	r3, 800d2b2 <_write_r+0x1e>
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	bd38      	pop	{r3, r4, r5, pc}
 800d2b4:	200062a0 	.word	0x200062a0

0800d2b8 <__swsetup_r>:
 800d2b8:	4b32      	ldr	r3, [pc, #200]	; (800d384 <__swsetup_r+0xcc>)
 800d2ba:	b570      	push	{r4, r5, r6, lr}
 800d2bc:	681d      	ldr	r5, [r3, #0]
 800d2be:	4606      	mov	r6, r0
 800d2c0:	460c      	mov	r4, r1
 800d2c2:	b125      	cbz	r5, 800d2ce <__swsetup_r+0x16>
 800d2c4:	69ab      	ldr	r3, [r5, #24]
 800d2c6:	b913      	cbnz	r3, 800d2ce <__swsetup_r+0x16>
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	f7ff f815 	bl	800c2f8 <__sinit>
 800d2ce:	4b2e      	ldr	r3, [pc, #184]	; (800d388 <__swsetup_r+0xd0>)
 800d2d0:	429c      	cmp	r4, r3
 800d2d2:	d10f      	bne.n	800d2f4 <__swsetup_r+0x3c>
 800d2d4:	686c      	ldr	r4, [r5, #4]
 800d2d6:	89a3      	ldrh	r3, [r4, #12]
 800d2d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2dc:	0719      	lsls	r1, r3, #28
 800d2de:	d42c      	bmi.n	800d33a <__swsetup_r+0x82>
 800d2e0:	06dd      	lsls	r5, r3, #27
 800d2e2:	d411      	bmi.n	800d308 <__swsetup_r+0x50>
 800d2e4:	2309      	movs	r3, #9
 800d2e6:	6033      	str	r3, [r6, #0]
 800d2e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2ec:	81a3      	strh	r3, [r4, #12]
 800d2ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2f2:	e03e      	b.n	800d372 <__swsetup_r+0xba>
 800d2f4:	4b25      	ldr	r3, [pc, #148]	; (800d38c <__swsetup_r+0xd4>)
 800d2f6:	429c      	cmp	r4, r3
 800d2f8:	d101      	bne.n	800d2fe <__swsetup_r+0x46>
 800d2fa:	68ac      	ldr	r4, [r5, #8]
 800d2fc:	e7eb      	b.n	800d2d6 <__swsetup_r+0x1e>
 800d2fe:	4b24      	ldr	r3, [pc, #144]	; (800d390 <__swsetup_r+0xd8>)
 800d300:	429c      	cmp	r4, r3
 800d302:	bf08      	it	eq
 800d304:	68ec      	ldreq	r4, [r5, #12]
 800d306:	e7e6      	b.n	800d2d6 <__swsetup_r+0x1e>
 800d308:	0758      	lsls	r0, r3, #29
 800d30a:	d512      	bpl.n	800d332 <__swsetup_r+0x7a>
 800d30c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d30e:	b141      	cbz	r1, 800d322 <__swsetup_r+0x6a>
 800d310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d314:	4299      	cmp	r1, r3
 800d316:	d002      	beq.n	800d31e <__swsetup_r+0x66>
 800d318:	4630      	mov	r0, r6
 800d31a:	f7ff f993 	bl	800c644 <_free_r>
 800d31e:	2300      	movs	r3, #0
 800d320:	6363      	str	r3, [r4, #52]	; 0x34
 800d322:	89a3      	ldrh	r3, [r4, #12]
 800d324:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d328:	81a3      	strh	r3, [r4, #12]
 800d32a:	2300      	movs	r3, #0
 800d32c:	6063      	str	r3, [r4, #4]
 800d32e:	6923      	ldr	r3, [r4, #16]
 800d330:	6023      	str	r3, [r4, #0]
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	f043 0308 	orr.w	r3, r3, #8
 800d338:	81a3      	strh	r3, [r4, #12]
 800d33a:	6923      	ldr	r3, [r4, #16]
 800d33c:	b94b      	cbnz	r3, 800d352 <__swsetup_r+0x9a>
 800d33e:	89a3      	ldrh	r3, [r4, #12]
 800d340:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d348:	d003      	beq.n	800d352 <__swsetup_r+0x9a>
 800d34a:	4621      	mov	r1, r4
 800d34c:	4630      	mov	r0, r6
 800d34e:	f000 f92b 	bl	800d5a8 <__smakebuf_r>
 800d352:	89a0      	ldrh	r0, [r4, #12]
 800d354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d358:	f010 0301 	ands.w	r3, r0, #1
 800d35c:	d00a      	beq.n	800d374 <__swsetup_r+0xbc>
 800d35e:	2300      	movs	r3, #0
 800d360:	60a3      	str	r3, [r4, #8]
 800d362:	6963      	ldr	r3, [r4, #20]
 800d364:	425b      	negs	r3, r3
 800d366:	61a3      	str	r3, [r4, #24]
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	b943      	cbnz	r3, 800d37e <__swsetup_r+0xc6>
 800d36c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d370:	d1ba      	bne.n	800d2e8 <__swsetup_r+0x30>
 800d372:	bd70      	pop	{r4, r5, r6, pc}
 800d374:	0781      	lsls	r1, r0, #30
 800d376:	bf58      	it	pl
 800d378:	6963      	ldrpl	r3, [r4, #20]
 800d37a:	60a3      	str	r3, [r4, #8]
 800d37c:	e7f4      	b.n	800d368 <__swsetup_r+0xb0>
 800d37e:	2000      	movs	r0, #0
 800d380:	e7f7      	b.n	800d372 <__swsetup_r+0xba>
 800d382:	bf00      	nop
 800d384:	200000b8 	.word	0x200000b8
 800d388:	08011318 	.word	0x08011318
 800d38c:	08011338 	.word	0x08011338
 800d390:	080112f8 	.word	0x080112f8

0800d394 <_close_r>:
 800d394:	b538      	push	{r3, r4, r5, lr}
 800d396:	4d06      	ldr	r5, [pc, #24]	; (800d3b0 <_close_r+0x1c>)
 800d398:	2300      	movs	r3, #0
 800d39a:	4604      	mov	r4, r0
 800d39c:	4608      	mov	r0, r1
 800d39e:	602b      	str	r3, [r5, #0]
 800d3a0:	f7f7 f87d 	bl	800449e <_close>
 800d3a4:	1c43      	adds	r3, r0, #1
 800d3a6:	d102      	bne.n	800d3ae <_close_r+0x1a>
 800d3a8:	682b      	ldr	r3, [r5, #0]
 800d3aa:	b103      	cbz	r3, 800d3ae <_close_r+0x1a>
 800d3ac:	6023      	str	r3, [r4, #0]
 800d3ae:	bd38      	pop	{r3, r4, r5, pc}
 800d3b0:	200062a0 	.word	0x200062a0

0800d3b4 <__sflush_r>:
 800d3b4:	898a      	ldrh	r2, [r1, #12]
 800d3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	0710      	lsls	r0, r2, #28
 800d3be:	460c      	mov	r4, r1
 800d3c0:	d458      	bmi.n	800d474 <__sflush_r+0xc0>
 800d3c2:	684b      	ldr	r3, [r1, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	dc05      	bgt.n	800d3d4 <__sflush_r+0x20>
 800d3c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	dc02      	bgt.n	800d3d4 <__sflush_r+0x20>
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3d6:	2e00      	cmp	r6, #0
 800d3d8:	d0f9      	beq.n	800d3ce <__sflush_r+0x1a>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3e0:	682f      	ldr	r7, [r5, #0]
 800d3e2:	602b      	str	r3, [r5, #0]
 800d3e4:	d032      	beq.n	800d44c <__sflush_r+0x98>
 800d3e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	075a      	lsls	r2, r3, #29
 800d3ec:	d505      	bpl.n	800d3fa <__sflush_r+0x46>
 800d3ee:	6863      	ldr	r3, [r4, #4]
 800d3f0:	1ac0      	subs	r0, r0, r3
 800d3f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3f4:	b10b      	cbz	r3, 800d3fa <__sflush_r+0x46>
 800d3f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3f8:	1ac0      	subs	r0, r0, r3
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d400:	6a21      	ldr	r1, [r4, #32]
 800d402:	4628      	mov	r0, r5
 800d404:	47b0      	blx	r6
 800d406:	1c43      	adds	r3, r0, #1
 800d408:	89a3      	ldrh	r3, [r4, #12]
 800d40a:	d106      	bne.n	800d41a <__sflush_r+0x66>
 800d40c:	6829      	ldr	r1, [r5, #0]
 800d40e:	291d      	cmp	r1, #29
 800d410:	d82c      	bhi.n	800d46c <__sflush_r+0xb8>
 800d412:	4a2a      	ldr	r2, [pc, #168]	; (800d4bc <__sflush_r+0x108>)
 800d414:	40ca      	lsrs	r2, r1
 800d416:	07d6      	lsls	r6, r2, #31
 800d418:	d528      	bpl.n	800d46c <__sflush_r+0xb8>
 800d41a:	2200      	movs	r2, #0
 800d41c:	6062      	str	r2, [r4, #4]
 800d41e:	04d9      	lsls	r1, r3, #19
 800d420:	6922      	ldr	r2, [r4, #16]
 800d422:	6022      	str	r2, [r4, #0]
 800d424:	d504      	bpl.n	800d430 <__sflush_r+0x7c>
 800d426:	1c42      	adds	r2, r0, #1
 800d428:	d101      	bne.n	800d42e <__sflush_r+0x7a>
 800d42a:	682b      	ldr	r3, [r5, #0]
 800d42c:	b903      	cbnz	r3, 800d430 <__sflush_r+0x7c>
 800d42e:	6560      	str	r0, [r4, #84]	; 0x54
 800d430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d432:	602f      	str	r7, [r5, #0]
 800d434:	2900      	cmp	r1, #0
 800d436:	d0ca      	beq.n	800d3ce <__sflush_r+0x1a>
 800d438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d43c:	4299      	cmp	r1, r3
 800d43e:	d002      	beq.n	800d446 <__sflush_r+0x92>
 800d440:	4628      	mov	r0, r5
 800d442:	f7ff f8ff 	bl	800c644 <_free_r>
 800d446:	2000      	movs	r0, #0
 800d448:	6360      	str	r0, [r4, #52]	; 0x34
 800d44a:	e7c1      	b.n	800d3d0 <__sflush_r+0x1c>
 800d44c:	6a21      	ldr	r1, [r4, #32]
 800d44e:	2301      	movs	r3, #1
 800d450:	4628      	mov	r0, r5
 800d452:	47b0      	blx	r6
 800d454:	1c41      	adds	r1, r0, #1
 800d456:	d1c7      	bne.n	800d3e8 <__sflush_r+0x34>
 800d458:	682b      	ldr	r3, [r5, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d0c4      	beq.n	800d3e8 <__sflush_r+0x34>
 800d45e:	2b1d      	cmp	r3, #29
 800d460:	d001      	beq.n	800d466 <__sflush_r+0xb2>
 800d462:	2b16      	cmp	r3, #22
 800d464:	d101      	bne.n	800d46a <__sflush_r+0xb6>
 800d466:	602f      	str	r7, [r5, #0]
 800d468:	e7b1      	b.n	800d3ce <__sflush_r+0x1a>
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d470:	81a3      	strh	r3, [r4, #12]
 800d472:	e7ad      	b.n	800d3d0 <__sflush_r+0x1c>
 800d474:	690f      	ldr	r7, [r1, #16]
 800d476:	2f00      	cmp	r7, #0
 800d478:	d0a9      	beq.n	800d3ce <__sflush_r+0x1a>
 800d47a:	0793      	lsls	r3, r2, #30
 800d47c:	680e      	ldr	r6, [r1, #0]
 800d47e:	bf08      	it	eq
 800d480:	694b      	ldreq	r3, [r1, #20]
 800d482:	600f      	str	r7, [r1, #0]
 800d484:	bf18      	it	ne
 800d486:	2300      	movne	r3, #0
 800d488:	eba6 0807 	sub.w	r8, r6, r7
 800d48c:	608b      	str	r3, [r1, #8]
 800d48e:	f1b8 0f00 	cmp.w	r8, #0
 800d492:	dd9c      	ble.n	800d3ce <__sflush_r+0x1a>
 800d494:	6a21      	ldr	r1, [r4, #32]
 800d496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d498:	4643      	mov	r3, r8
 800d49a:	463a      	mov	r2, r7
 800d49c:	4628      	mov	r0, r5
 800d49e:	47b0      	blx	r6
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	dc06      	bgt.n	800d4b2 <__sflush_r+0xfe>
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4aa:	81a3      	strh	r3, [r4, #12]
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4b0:	e78e      	b.n	800d3d0 <__sflush_r+0x1c>
 800d4b2:	4407      	add	r7, r0
 800d4b4:	eba8 0800 	sub.w	r8, r8, r0
 800d4b8:	e7e9      	b.n	800d48e <__sflush_r+0xda>
 800d4ba:	bf00      	nop
 800d4bc:	20400001 	.word	0x20400001

0800d4c0 <_fflush_r>:
 800d4c0:	b538      	push	{r3, r4, r5, lr}
 800d4c2:	690b      	ldr	r3, [r1, #16]
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	b913      	cbnz	r3, 800d4d0 <_fflush_r+0x10>
 800d4ca:	2500      	movs	r5, #0
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	b118      	cbz	r0, 800d4da <_fflush_r+0x1a>
 800d4d2:	6983      	ldr	r3, [r0, #24]
 800d4d4:	b90b      	cbnz	r3, 800d4da <_fflush_r+0x1a>
 800d4d6:	f7fe ff0f 	bl	800c2f8 <__sinit>
 800d4da:	4b14      	ldr	r3, [pc, #80]	; (800d52c <_fflush_r+0x6c>)
 800d4dc:	429c      	cmp	r4, r3
 800d4de:	d11b      	bne.n	800d518 <_fflush_r+0x58>
 800d4e0:	686c      	ldr	r4, [r5, #4]
 800d4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d0ef      	beq.n	800d4ca <_fflush_r+0xa>
 800d4ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4ec:	07d0      	lsls	r0, r2, #31
 800d4ee:	d404      	bmi.n	800d4fa <_fflush_r+0x3a>
 800d4f0:	0599      	lsls	r1, r3, #22
 800d4f2:	d402      	bmi.n	800d4fa <_fflush_r+0x3a>
 800d4f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4f6:	f7ff f86e 	bl	800c5d6 <__retarget_lock_acquire_recursive>
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	4621      	mov	r1, r4
 800d4fe:	f7ff ff59 	bl	800d3b4 <__sflush_r>
 800d502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d504:	07da      	lsls	r2, r3, #31
 800d506:	4605      	mov	r5, r0
 800d508:	d4e0      	bmi.n	800d4cc <_fflush_r+0xc>
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	059b      	lsls	r3, r3, #22
 800d50e:	d4dd      	bmi.n	800d4cc <_fflush_r+0xc>
 800d510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d512:	f7ff f861 	bl	800c5d8 <__retarget_lock_release_recursive>
 800d516:	e7d9      	b.n	800d4cc <_fflush_r+0xc>
 800d518:	4b05      	ldr	r3, [pc, #20]	; (800d530 <_fflush_r+0x70>)
 800d51a:	429c      	cmp	r4, r3
 800d51c:	d101      	bne.n	800d522 <_fflush_r+0x62>
 800d51e:	68ac      	ldr	r4, [r5, #8]
 800d520:	e7df      	b.n	800d4e2 <_fflush_r+0x22>
 800d522:	4b04      	ldr	r3, [pc, #16]	; (800d534 <_fflush_r+0x74>)
 800d524:	429c      	cmp	r4, r3
 800d526:	bf08      	it	eq
 800d528:	68ec      	ldreq	r4, [r5, #12]
 800d52a:	e7da      	b.n	800d4e2 <_fflush_r+0x22>
 800d52c:	08011318 	.word	0x08011318
 800d530:	08011338 	.word	0x08011338
 800d534:	080112f8 	.word	0x080112f8

0800d538 <_lseek_r>:
 800d538:	b538      	push	{r3, r4, r5, lr}
 800d53a:	4d07      	ldr	r5, [pc, #28]	; (800d558 <_lseek_r+0x20>)
 800d53c:	4604      	mov	r4, r0
 800d53e:	4608      	mov	r0, r1
 800d540:	4611      	mov	r1, r2
 800d542:	2200      	movs	r2, #0
 800d544:	602a      	str	r2, [r5, #0]
 800d546:	461a      	mov	r2, r3
 800d548:	f7f6 ffd0 	bl	80044ec <_lseek>
 800d54c:	1c43      	adds	r3, r0, #1
 800d54e:	d102      	bne.n	800d556 <_lseek_r+0x1e>
 800d550:	682b      	ldr	r3, [r5, #0]
 800d552:	b103      	cbz	r3, 800d556 <_lseek_r+0x1e>
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	bd38      	pop	{r3, r4, r5, pc}
 800d558:	200062a0 	.word	0x200062a0

0800d55c <__swhatbuf_r>:
 800d55c:	b570      	push	{r4, r5, r6, lr}
 800d55e:	460e      	mov	r6, r1
 800d560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d564:	2900      	cmp	r1, #0
 800d566:	b096      	sub	sp, #88	; 0x58
 800d568:	4614      	mov	r4, r2
 800d56a:	461d      	mov	r5, r3
 800d56c:	da08      	bge.n	800d580 <__swhatbuf_r+0x24>
 800d56e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d572:	2200      	movs	r2, #0
 800d574:	602a      	str	r2, [r5, #0]
 800d576:	061a      	lsls	r2, r3, #24
 800d578:	d410      	bmi.n	800d59c <__swhatbuf_r+0x40>
 800d57a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d57e:	e00e      	b.n	800d59e <__swhatbuf_r+0x42>
 800d580:	466a      	mov	r2, sp
 800d582:	f000 fa13 	bl	800d9ac <_fstat_r>
 800d586:	2800      	cmp	r0, #0
 800d588:	dbf1      	blt.n	800d56e <__swhatbuf_r+0x12>
 800d58a:	9a01      	ldr	r2, [sp, #4]
 800d58c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d590:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d594:	425a      	negs	r2, r3
 800d596:	415a      	adcs	r2, r3
 800d598:	602a      	str	r2, [r5, #0]
 800d59a:	e7ee      	b.n	800d57a <__swhatbuf_r+0x1e>
 800d59c:	2340      	movs	r3, #64	; 0x40
 800d59e:	2000      	movs	r0, #0
 800d5a0:	6023      	str	r3, [r4, #0]
 800d5a2:	b016      	add	sp, #88	; 0x58
 800d5a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d5a8 <__smakebuf_r>:
 800d5a8:	898b      	ldrh	r3, [r1, #12]
 800d5aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5ac:	079d      	lsls	r5, r3, #30
 800d5ae:	4606      	mov	r6, r0
 800d5b0:	460c      	mov	r4, r1
 800d5b2:	d507      	bpl.n	800d5c4 <__smakebuf_r+0x1c>
 800d5b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5b8:	6023      	str	r3, [r4, #0]
 800d5ba:	6123      	str	r3, [r4, #16]
 800d5bc:	2301      	movs	r3, #1
 800d5be:	6163      	str	r3, [r4, #20]
 800d5c0:	b002      	add	sp, #8
 800d5c2:	bd70      	pop	{r4, r5, r6, pc}
 800d5c4:	ab01      	add	r3, sp, #4
 800d5c6:	466a      	mov	r2, sp
 800d5c8:	f7ff ffc8 	bl	800d55c <__swhatbuf_r>
 800d5cc:	9900      	ldr	r1, [sp, #0]
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	f7ff f8a3 	bl	800c71c <_malloc_r>
 800d5d6:	b948      	cbnz	r0, 800d5ec <__smakebuf_r+0x44>
 800d5d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5dc:	059a      	lsls	r2, r3, #22
 800d5de:	d4ef      	bmi.n	800d5c0 <__smakebuf_r+0x18>
 800d5e0:	f023 0303 	bic.w	r3, r3, #3
 800d5e4:	f043 0302 	orr.w	r3, r3, #2
 800d5e8:	81a3      	strh	r3, [r4, #12]
 800d5ea:	e7e3      	b.n	800d5b4 <__smakebuf_r+0xc>
 800d5ec:	4b0d      	ldr	r3, [pc, #52]	; (800d624 <__smakebuf_r+0x7c>)
 800d5ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800d5f0:	89a3      	ldrh	r3, [r4, #12]
 800d5f2:	6020      	str	r0, [r4, #0]
 800d5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5f8:	81a3      	strh	r3, [r4, #12]
 800d5fa:	9b00      	ldr	r3, [sp, #0]
 800d5fc:	6163      	str	r3, [r4, #20]
 800d5fe:	9b01      	ldr	r3, [sp, #4]
 800d600:	6120      	str	r0, [r4, #16]
 800d602:	b15b      	cbz	r3, 800d61c <__smakebuf_r+0x74>
 800d604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d608:	4630      	mov	r0, r6
 800d60a:	f000 f9e1 	bl	800d9d0 <_isatty_r>
 800d60e:	b128      	cbz	r0, 800d61c <__smakebuf_r+0x74>
 800d610:	89a3      	ldrh	r3, [r4, #12]
 800d612:	f023 0303 	bic.w	r3, r3, #3
 800d616:	f043 0301 	orr.w	r3, r3, #1
 800d61a:	81a3      	strh	r3, [r4, #12]
 800d61c:	89a0      	ldrh	r0, [r4, #12]
 800d61e:	4305      	orrs	r5, r0
 800d620:	81a5      	strh	r5, [r4, #12]
 800d622:	e7cd      	b.n	800d5c0 <__smakebuf_r+0x18>
 800d624:	0800c291 	.word	0x0800c291

0800d628 <memmove>:
 800d628:	4288      	cmp	r0, r1
 800d62a:	b510      	push	{r4, lr}
 800d62c:	eb01 0402 	add.w	r4, r1, r2
 800d630:	d902      	bls.n	800d638 <memmove+0x10>
 800d632:	4284      	cmp	r4, r0
 800d634:	4623      	mov	r3, r4
 800d636:	d807      	bhi.n	800d648 <memmove+0x20>
 800d638:	1e43      	subs	r3, r0, #1
 800d63a:	42a1      	cmp	r1, r4
 800d63c:	d008      	beq.n	800d650 <memmove+0x28>
 800d63e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d642:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d646:	e7f8      	b.n	800d63a <memmove+0x12>
 800d648:	4402      	add	r2, r0
 800d64a:	4601      	mov	r1, r0
 800d64c:	428a      	cmp	r2, r1
 800d64e:	d100      	bne.n	800d652 <memmove+0x2a>
 800d650:	bd10      	pop	{r4, pc}
 800d652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d65a:	e7f7      	b.n	800d64c <memmove+0x24>

0800d65c <__malloc_lock>:
 800d65c:	4801      	ldr	r0, [pc, #4]	; (800d664 <__malloc_lock+0x8>)
 800d65e:	f7fe bfba 	b.w	800c5d6 <__retarget_lock_acquire_recursive>
 800d662:	bf00      	nop
 800d664:	20006294 	.word	0x20006294

0800d668 <__malloc_unlock>:
 800d668:	4801      	ldr	r0, [pc, #4]	; (800d670 <__malloc_unlock+0x8>)
 800d66a:	f7fe bfb5 	b.w	800c5d8 <__retarget_lock_release_recursive>
 800d66e:	bf00      	nop
 800d670:	20006294 	.word	0x20006294

0800d674 <_realloc_r>:
 800d674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d678:	4680      	mov	r8, r0
 800d67a:	4614      	mov	r4, r2
 800d67c:	460e      	mov	r6, r1
 800d67e:	b921      	cbnz	r1, 800d68a <_realloc_r+0x16>
 800d680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d684:	4611      	mov	r1, r2
 800d686:	f7ff b849 	b.w	800c71c <_malloc_r>
 800d68a:	b92a      	cbnz	r2, 800d698 <_realloc_r+0x24>
 800d68c:	f7fe ffda 	bl	800c644 <_free_r>
 800d690:	4625      	mov	r5, r4
 800d692:	4628      	mov	r0, r5
 800d694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d698:	f000 f9aa 	bl	800d9f0 <_malloc_usable_size_r>
 800d69c:	4284      	cmp	r4, r0
 800d69e:	4607      	mov	r7, r0
 800d6a0:	d802      	bhi.n	800d6a8 <_realloc_r+0x34>
 800d6a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6a6:	d812      	bhi.n	800d6ce <_realloc_r+0x5a>
 800d6a8:	4621      	mov	r1, r4
 800d6aa:	4640      	mov	r0, r8
 800d6ac:	f7ff f836 	bl	800c71c <_malloc_r>
 800d6b0:	4605      	mov	r5, r0
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d0ed      	beq.n	800d692 <_realloc_r+0x1e>
 800d6b6:	42bc      	cmp	r4, r7
 800d6b8:	4622      	mov	r2, r4
 800d6ba:	4631      	mov	r1, r6
 800d6bc:	bf28      	it	cs
 800d6be:	463a      	movcs	r2, r7
 800d6c0:	f7fe ff94 	bl	800c5ec <memcpy>
 800d6c4:	4631      	mov	r1, r6
 800d6c6:	4640      	mov	r0, r8
 800d6c8:	f7fe ffbc 	bl	800c644 <_free_r>
 800d6cc:	e7e1      	b.n	800d692 <_realloc_r+0x1e>
 800d6ce:	4635      	mov	r5, r6
 800d6d0:	e7df      	b.n	800d692 <_realloc_r+0x1e>

0800d6d2 <__ssputs_r>:
 800d6d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d6:	688e      	ldr	r6, [r1, #8]
 800d6d8:	429e      	cmp	r6, r3
 800d6da:	4682      	mov	sl, r0
 800d6dc:	460c      	mov	r4, r1
 800d6de:	4690      	mov	r8, r2
 800d6e0:	461f      	mov	r7, r3
 800d6e2:	d838      	bhi.n	800d756 <__ssputs_r+0x84>
 800d6e4:	898a      	ldrh	r2, [r1, #12]
 800d6e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d6ea:	d032      	beq.n	800d752 <__ssputs_r+0x80>
 800d6ec:	6825      	ldr	r5, [r4, #0]
 800d6ee:	6909      	ldr	r1, [r1, #16]
 800d6f0:	eba5 0901 	sub.w	r9, r5, r1
 800d6f4:	6965      	ldr	r5, [r4, #20]
 800d6f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d6fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d6fe:	3301      	adds	r3, #1
 800d700:	444b      	add	r3, r9
 800d702:	106d      	asrs	r5, r5, #1
 800d704:	429d      	cmp	r5, r3
 800d706:	bf38      	it	cc
 800d708:	461d      	movcc	r5, r3
 800d70a:	0553      	lsls	r3, r2, #21
 800d70c:	d531      	bpl.n	800d772 <__ssputs_r+0xa0>
 800d70e:	4629      	mov	r1, r5
 800d710:	f7ff f804 	bl	800c71c <_malloc_r>
 800d714:	4606      	mov	r6, r0
 800d716:	b950      	cbnz	r0, 800d72e <__ssputs_r+0x5c>
 800d718:	230c      	movs	r3, #12
 800d71a:	f8ca 3000 	str.w	r3, [sl]
 800d71e:	89a3      	ldrh	r3, [r4, #12]
 800d720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d724:	81a3      	strh	r3, [r4, #12]
 800d726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d72e:	6921      	ldr	r1, [r4, #16]
 800d730:	464a      	mov	r2, r9
 800d732:	f7fe ff5b 	bl	800c5ec <memcpy>
 800d736:	89a3      	ldrh	r3, [r4, #12]
 800d738:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d73c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d740:	81a3      	strh	r3, [r4, #12]
 800d742:	6126      	str	r6, [r4, #16]
 800d744:	6165      	str	r5, [r4, #20]
 800d746:	444e      	add	r6, r9
 800d748:	eba5 0509 	sub.w	r5, r5, r9
 800d74c:	6026      	str	r6, [r4, #0]
 800d74e:	60a5      	str	r5, [r4, #8]
 800d750:	463e      	mov	r6, r7
 800d752:	42be      	cmp	r6, r7
 800d754:	d900      	bls.n	800d758 <__ssputs_r+0x86>
 800d756:	463e      	mov	r6, r7
 800d758:	6820      	ldr	r0, [r4, #0]
 800d75a:	4632      	mov	r2, r6
 800d75c:	4641      	mov	r1, r8
 800d75e:	f7ff ff63 	bl	800d628 <memmove>
 800d762:	68a3      	ldr	r3, [r4, #8]
 800d764:	1b9b      	subs	r3, r3, r6
 800d766:	60a3      	str	r3, [r4, #8]
 800d768:	6823      	ldr	r3, [r4, #0]
 800d76a:	4433      	add	r3, r6
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	2000      	movs	r0, #0
 800d770:	e7db      	b.n	800d72a <__ssputs_r+0x58>
 800d772:	462a      	mov	r2, r5
 800d774:	f7ff ff7e 	bl	800d674 <_realloc_r>
 800d778:	4606      	mov	r6, r0
 800d77a:	2800      	cmp	r0, #0
 800d77c:	d1e1      	bne.n	800d742 <__ssputs_r+0x70>
 800d77e:	6921      	ldr	r1, [r4, #16]
 800d780:	4650      	mov	r0, sl
 800d782:	f7fe ff5f 	bl	800c644 <_free_r>
 800d786:	e7c7      	b.n	800d718 <__ssputs_r+0x46>

0800d788 <_svfiprintf_r>:
 800d788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78c:	4698      	mov	r8, r3
 800d78e:	898b      	ldrh	r3, [r1, #12]
 800d790:	061b      	lsls	r3, r3, #24
 800d792:	b09d      	sub	sp, #116	; 0x74
 800d794:	4607      	mov	r7, r0
 800d796:	460d      	mov	r5, r1
 800d798:	4614      	mov	r4, r2
 800d79a:	d50e      	bpl.n	800d7ba <_svfiprintf_r+0x32>
 800d79c:	690b      	ldr	r3, [r1, #16]
 800d79e:	b963      	cbnz	r3, 800d7ba <_svfiprintf_r+0x32>
 800d7a0:	2140      	movs	r1, #64	; 0x40
 800d7a2:	f7fe ffbb 	bl	800c71c <_malloc_r>
 800d7a6:	6028      	str	r0, [r5, #0]
 800d7a8:	6128      	str	r0, [r5, #16]
 800d7aa:	b920      	cbnz	r0, 800d7b6 <_svfiprintf_r+0x2e>
 800d7ac:	230c      	movs	r3, #12
 800d7ae:	603b      	str	r3, [r7, #0]
 800d7b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7b4:	e0d1      	b.n	800d95a <_svfiprintf_r+0x1d2>
 800d7b6:	2340      	movs	r3, #64	; 0x40
 800d7b8:	616b      	str	r3, [r5, #20]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d7be:	2320      	movs	r3, #32
 800d7c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7c8:	2330      	movs	r3, #48	; 0x30
 800d7ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d974 <_svfiprintf_r+0x1ec>
 800d7ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7d2:	f04f 0901 	mov.w	r9, #1
 800d7d6:	4623      	mov	r3, r4
 800d7d8:	469a      	mov	sl, r3
 800d7da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7de:	b10a      	cbz	r2, 800d7e4 <_svfiprintf_r+0x5c>
 800d7e0:	2a25      	cmp	r2, #37	; 0x25
 800d7e2:	d1f9      	bne.n	800d7d8 <_svfiprintf_r+0x50>
 800d7e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d7e8:	d00b      	beq.n	800d802 <_svfiprintf_r+0x7a>
 800d7ea:	465b      	mov	r3, fp
 800d7ec:	4622      	mov	r2, r4
 800d7ee:	4629      	mov	r1, r5
 800d7f0:	4638      	mov	r0, r7
 800d7f2:	f7ff ff6e 	bl	800d6d2 <__ssputs_r>
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	f000 80aa 	beq.w	800d950 <_svfiprintf_r+0x1c8>
 800d7fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7fe:	445a      	add	r2, fp
 800d800:	9209      	str	r2, [sp, #36]	; 0x24
 800d802:	f89a 3000 	ldrb.w	r3, [sl]
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 80a2 	beq.w	800d950 <_svfiprintf_r+0x1c8>
 800d80c:	2300      	movs	r3, #0
 800d80e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d816:	f10a 0a01 	add.w	sl, sl, #1
 800d81a:	9304      	str	r3, [sp, #16]
 800d81c:	9307      	str	r3, [sp, #28]
 800d81e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d822:	931a      	str	r3, [sp, #104]	; 0x68
 800d824:	4654      	mov	r4, sl
 800d826:	2205      	movs	r2, #5
 800d828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d82c:	4851      	ldr	r0, [pc, #324]	; (800d974 <_svfiprintf_r+0x1ec>)
 800d82e:	f7f2 fcd7 	bl	80001e0 <memchr>
 800d832:	9a04      	ldr	r2, [sp, #16]
 800d834:	b9d8      	cbnz	r0, 800d86e <_svfiprintf_r+0xe6>
 800d836:	06d0      	lsls	r0, r2, #27
 800d838:	bf44      	itt	mi
 800d83a:	2320      	movmi	r3, #32
 800d83c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d840:	0711      	lsls	r1, r2, #28
 800d842:	bf44      	itt	mi
 800d844:	232b      	movmi	r3, #43	; 0x2b
 800d846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d84a:	f89a 3000 	ldrb.w	r3, [sl]
 800d84e:	2b2a      	cmp	r3, #42	; 0x2a
 800d850:	d015      	beq.n	800d87e <_svfiprintf_r+0xf6>
 800d852:	9a07      	ldr	r2, [sp, #28]
 800d854:	4654      	mov	r4, sl
 800d856:	2000      	movs	r0, #0
 800d858:	f04f 0c0a 	mov.w	ip, #10
 800d85c:	4621      	mov	r1, r4
 800d85e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d862:	3b30      	subs	r3, #48	; 0x30
 800d864:	2b09      	cmp	r3, #9
 800d866:	d94e      	bls.n	800d906 <_svfiprintf_r+0x17e>
 800d868:	b1b0      	cbz	r0, 800d898 <_svfiprintf_r+0x110>
 800d86a:	9207      	str	r2, [sp, #28]
 800d86c:	e014      	b.n	800d898 <_svfiprintf_r+0x110>
 800d86e:	eba0 0308 	sub.w	r3, r0, r8
 800d872:	fa09 f303 	lsl.w	r3, r9, r3
 800d876:	4313      	orrs	r3, r2
 800d878:	9304      	str	r3, [sp, #16]
 800d87a:	46a2      	mov	sl, r4
 800d87c:	e7d2      	b.n	800d824 <_svfiprintf_r+0x9c>
 800d87e:	9b03      	ldr	r3, [sp, #12]
 800d880:	1d19      	adds	r1, r3, #4
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	9103      	str	r1, [sp, #12]
 800d886:	2b00      	cmp	r3, #0
 800d888:	bfbb      	ittet	lt
 800d88a:	425b      	neglt	r3, r3
 800d88c:	f042 0202 	orrlt.w	r2, r2, #2
 800d890:	9307      	strge	r3, [sp, #28]
 800d892:	9307      	strlt	r3, [sp, #28]
 800d894:	bfb8      	it	lt
 800d896:	9204      	strlt	r2, [sp, #16]
 800d898:	7823      	ldrb	r3, [r4, #0]
 800d89a:	2b2e      	cmp	r3, #46	; 0x2e
 800d89c:	d10c      	bne.n	800d8b8 <_svfiprintf_r+0x130>
 800d89e:	7863      	ldrb	r3, [r4, #1]
 800d8a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d8a2:	d135      	bne.n	800d910 <_svfiprintf_r+0x188>
 800d8a4:	9b03      	ldr	r3, [sp, #12]
 800d8a6:	1d1a      	adds	r2, r3, #4
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	9203      	str	r2, [sp, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	bfb8      	it	lt
 800d8b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d8b4:	3402      	adds	r4, #2
 800d8b6:	9305      	str	r3, [sp, #20]
 800d8b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d984 <_svfiprintf_r+0x1fc>
 800d8bc:	7821      	ldrb	r1, [r4, #0]
 800d8be:	2203      	movs	r2, #3
 800d8c0:	4650      	mov	r0, sl
 800d8c2:	f7f2 fc8d 	bl	80001e0 <memchr>
 800d8c6:	b140      	cbz	r0, 800d8da <_svfiprintf_r+0x152>
 800d8c8:	2340      	movs	r3, #64	; 0x40
 800d8ca:	eba0 000a 	sub.w	r0, r0, sl
 800d8ce:	fa03 f000 	lsl.w	r0, r3, r0
 800d8d2:	9b04      	ldr	r3, [sp, #16]
 800d8d4:	4303      	orrs	r3, r0
 800d8d6:	3401      	adds	r4, #1
 800d8d8:	9304      	str	r3, [sp, #16]
 800d8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8de:	4826      	ldr	r0, [pc, #152]	; (800d978 <_svfiprintf_r+0x1f0>)
 800d8e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8e4:	2206      	movs	r2, #6
 800d8e6:	f7f2 fc7b 	bl	80001e0 <memchr>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	d038      	beq.n	800d960 <_svfiprintf_r+0x1d8>
 800d8ee:	4b23      	ldr	r3, [pc, #140]	; (800d97c <_svfiprintf_r+0x1f4>)
 800d8f0:	bb1b      	cbnz	r3, 800d93a <_svfiprintf_r+0x1b2>
 800d8f2:	9b03      	ldr	r3, [sp, #12]
 800d8f4:	3307      	adds	r3, #7
 800d8f6:	f023 0307 	bic.w	r3, r3, #7
 800d8fa:	3308      	adds	r3, #8
 800d8fc:	9303      	str	r3, [sp, #12]
 800d8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d900:	4433      	add	r3, r6
 800d902:	9309      	str	r3, [sp, #36]	; 0x24
 800d904:	e767      	b.n	800d7d6 <_svfiprintf_r+0x4e>
 800d906:	fb0c 3202 	mla	r2, ip, r2, r3
 800d90a:	460c      	mov	r4, r1
 800d90c:	2001      	movs	r0, #1
 800d90e:	e7a5      	b.n	800d85c <_svfiprintf_r+0xd4>
 800d910:	2300      	movs	r3, #0
 800d912:	3401      	adds	r4, #1
 800d914:	9305      	str	r3, [sp, #20]
 800d916:	4619      	mov	r1, r3
 800d918:	f04f 0c0a 	mov.w	ip, #10
 800d91c:	4620      	mov	r0, r4
 800d91e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d922:	3a30      	subs	r2, #48	; 0x30
 800d924:	2a09      	cmp	r2, #9
 800d926:	d903      	bls.n	800d930 <_svfiprintf_r+0x1a8>
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d0c5      	beq.n	800d8b8 <_svfiprintf_r+0x130>
 800d92c:	9105      	str	r1, [sp, #20]
 800d92e:	e7c3      	b.n	800d8b8 <_svfiprintf_r+0x130>
 800d930:	fb0c 2101 	mla	r1, ip, r1, r2
 800d934:	4604      	mov	r4, r0
 800d936:	2301      	movs	r3, #1
 800d938:	e7f0      	b.n	800d91c <_svfiprintf_r+0x194>
 800d93a:	ab03      	add	r3, sp, #12
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	462a      	mov	r2, r5
 800d940:	4b0f      	ldr	r3, [pc, #60]	; (800d980 <_svfiprintf_r+0x1f8>)
 800d942:	a904      	add	r1, sp, #16
 800d944:	4638      	mov	r0, r7
 800d946:	f3af 8000 	nop.w
 800d94a:	1c42      	adds	r2, r0, #1
 800d94c:	4606      	mov	r6, r0
 800d94e:	d1d6      	bne.n	800d8fe <_svfiprintf_r+0x176>
 800d950:	89ab      	ldrh	r3, [r5, #12]
 800d952:	065b      	lsls	r3, r3, #25
 800d954:	f53f af2c 	bmi.w	800d7b0 <_svfiprintf_r+0x28>
 800d958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d95a:	b01d      	add	sp, #116	; 0x74
 800d95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d960:	ab03      	add	r3, sp, #12
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	462a      	mov	r2, r5
 800d966:	4b06      	ldr	r3, [pc, #24]	; (800d980 <_svfiprintf_r+0x1f8>)
 800d968:	a904      	add	r1, sp, #16
 800d96a:	4638      	mov	r0, r7
 800d96c:	f7ff f912 	bl	800cb94 <_printf_i>
 800d970:	e7eb      	b.n	800d94a <_svfiprintf_r+0x1c2>
 800d972:	bf00      	nop
 800d974:	0801135c 	.word	0x0801135c
 800d978:	08011366 	.word	0x08011366
 800d97c:	00000000 	.word	0x00000000
 800d980:	0800d6d3 	.word	0x0800d6d3
 800d984:	08011362 	.word	0x08011362

0800d988 <_read_r>:
 800d988:	b538      	push	{r3, r4, r5, lr}
 800d98a:	4d07      	ldr	r5, [pc, #28]	; (800d9a8 <_read_r+0x20>)
 800d98c:	4604      	mov	r4, r0
 800d98e:	4608      	mov	r0, r1
 800d990:	4611      	mov	r1, r2
 800d992:	2200      	movs	r2, #0
 800d994:	602a      	str	r2, [r5, #0]
 800d996:	461a      	mov	r2, r3
 800d998:	f7f6 fd64 	bl	8004464 <_read>
 800d99c:	1c43      	adds	r3, r0, #1
 800d99e:	d102      	bne.n	800d9a6 <_read_r+0x1e>
 800d9a0:	682b      	ldr	r3, [r5, #0]
 800d9a2:	b103      	cbz	r3, 800d9a6 <_read_r+0x1e>
 800d9a4:	6023      	str	r3, [r4, #0]
 800d9a6:	bd38      	pop	{r3, r4, r5, pc}
 800d9a8:	200062a0 	.word	0x200062a0

0800d9ac <_fstat_r>:
 800d9ac:	b538      	push	{r3, r4, r5, lr}
 800d9ae:	4d07      	ldr	r5, [pc, #28]	; (800d9cc <_fstat_r+0x20>)
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	4604      	mov	r4, r0
 800d9b4:	4608      	mov	r0, r1
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	602b      	str	r3, [r5, #0]
 800d9ba:	f7f6 fd7c 	bl	80044b6 <_fstat>
 800d9be:	1c43      	adds	r3, r0, #1
 800d9c0:	d102      	bne.n	800d9c8 <_fstat_r+0x1c>
 800d9c2:	682b      	ldr	r3, [r5, #0]
 800d9c4:	b103      	cbz	r3, 800d9c8 <_fstat_r+0x1c>
 800d9c6:	6023      	str	r3, [r4, #0]
 800d9c8:	bd38      	pop	{r3, r4, r5, pc}
 800d9ca:	bf00      	nop
 800d9cc:	200062a0 	.word	0x200062a0

0800d9d0 <_isatty_r>:
 800d9d0:	b538      	push	{r3, r4, r5, lr}
 800d9d2:	4d06      	ldr	r5, [pc, #24]	; (800d9ec <_isatty_r+0x1c>)
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	4604      	mov	r4, r0
 800d9d8:	4608      	mov	r0, r1
 800d9da:	602b      	str	r3, [r5, #0]
 800d9dc:	f7f6 fd7b 	bl	80044d6 <_isatty>
 800d9e0:	1c43      	adds	r3, r0, #1
 800d9e2:	d102      	bne.n	800d9ea <_isatty_r+0x1a>
 800d9e4:	682b      	ldr	r3, [r5, #0]
 800d9e6:	b103      	cbz	r3, 800d9ea <_isatty_r+0x1a>
 800d9e8:	6023      	str	r3, [r4, #0]
 800d9ea:	bd38      	pop	{r3, r4, r5, pc}
 800d9ec:	200062a0 	.word	0x200062a0

0800d9f0 <_malloc_usable_size_r>:
 800d9f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9f4:	1f18      	subs	r0, r3, #4
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	bfbc      	itt	lt
 800d9fa:	580b      	ldrlt	r3, [r1, r0]
 800d9fc:	18c0      	addlt	r0, r0, r3
 800d9fe:	4770      	bx	lr

0800da00 <_init>:
 800da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da02:	bf00      	nop
 800da04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da06:	bc08      	pop	{r3}
 800da08:	469e      	mov	lr, r3
 800da0a:	4770      	bx	lr

0800da0c <_fini>:
 800da0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0e:	bf00      	nop
 800da10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da12:	bc08      	pop	{r3}
 800da14:	469e      	mov	lr, r3
 800da16:	4770      	bx	lr
