
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003074  08011b98  08011b98  00021b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c0c  08014c0c  0003013c  2**0
                  CONTENTS
  4 .ARM          00000008  08014c0c  08014c0c  00024c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c14  08014c14  0003013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c14  08014c14  00024c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c18  08014c18  00024c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08014c1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003013c  2**0
                  CONTENTS
 10 .bss          00009b0c  20000140  20000140  00030140  2**3
                  ALLOC
 11 ._user_heap_stack 00003004  20009c4c  20009c4c  00030140  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000288f9  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f84  00000000  00000000  00058a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f30  00000000  00000000  0005d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000089d6  00000000  00000000  0005f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002881d  00000000  00000000  000682f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5b8e  00000000  00000000  00090b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001766a1  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001d68  00000000  00000000  001766f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008bdc  00000000  00000000  00178460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000140 	.word	0x20000140
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011b80 	.word	0x08011b80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000144 	.word	0x20000144
 80001cc:	08011b80 	.word	0x08011b80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <tmpPrint>:
	uint8_t tmpBuf[32] = {0};
	uint8_t tmpLen = 0;
	char tmpChar[256];

	void tmpPrint(const char *func, uint8_t *buf, uint8_t len)
	{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71fb      	strb	r3, [r7, #7]
		strcpy(tmpChar, "to_nand:");
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <tmpPrint+0x5c>)
 8000c40:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <tmpPrint+0x60>)
 8000c42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c44:	c303      	stmia	r3!, {r0, r1}
 8000c46:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) sprintf(tmpChar+strlen(tmpChar), " %02X", *(uint8_t *)(buf + i));
 8000c48:	2300      	movs	r3, #0
 8000c4a:	75fb      	strb	r3, [r7, #23]
 8000c4c:	e010      	b.n	8000c70 <tmpPrint+0x40>
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <tmpPrint+0x5c>)
 8000c50:	f7ff fabe 	bl	80001d0 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <tmpPrint+0x5c>)
 8000c58:	1898      	adds	r0, r3, r2
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
 8000c5c:	68ba      	ldr	r2, [r7, #8]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	490b      	ldr	r1, [pc, #44]	; (8000c94 <tmpPrint+0x64>)
 8000c66:	f010 fabd 	bl	80111e4 <siprintf>
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	75fb      	strb	r3, [r7, #23]
 8000c70:	7dfa      	ldrb	r2, [r7, #23]
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d3ea      	bcc.n	8000c4e <tmpPrint+0x1e>
		Report(0, "\t\t%s\r\n", tmpChar);
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <tmpPrint+0x5c>)
 8000c7a:	4907      	ldr	r1, [pc, #28]	; (8000c98 <tmpPrint+0x68>)
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f002 f895 	bl	8002dac <Report>
	}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000180 	.word	0x20000180
 8000c90:	08011b98 	.word	0x08011b98
 8000c94:	08011ba4 	.word	0x08011ba4
 8000c98:	08011bac 	.word	0x08011bac

08000c9c <io_nand_init>:
#endif

//-------------------------------------------------------------------------------------------
void io_nand_init(NAND_HandleTypeDef *hnand)
{
 8000c9c:	b5b0      	push	{r4, r5, r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
    if (HAL_NAND_ECC_Disable(hnand) != HAL_OK) devError |= devNAND;
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f005 fb3a 	bl	800631e <HAL_NAND_ECC_Disable>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <io_nand_init+0x22>
 8000cb0:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <io_nand_init+0x98>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	f043 0320 	orr.w	r3, r3, #32
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <io_nand_init+0x98>)
 8000cbc:	801a      	strh	r2, [r3, #0]

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    if (HAL_NAND_RegisterCallback(hnand, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

    if (NAND_Read_ID(hnand, &nandID) == HAL_OK) {//read ID information from chip
 8000cbe:	491e      	ldr	r1, [pc, #120]	; (8000d38 <io_nand_init+0x9c>)
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f867 	bl	8000d94 <NAND_Read_ID>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d12e      	bne.n	8000d2a <io_nand_init+0x8e>

    	nandState = HAL_NAND_GetState(hnand);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f005 fb4f 	bl	8006370 <HAL_NAND_GetState>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <io_nand_init+0xa0>)
 8000cd8:	701a      	strb	r2, [r3, #0]

    	memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand->Config, sizeof(s_chipConf));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <io_nand_init+0xa4>)
 8000ce2:	6810      	ldr	r0, [r2, #0]
 8000ce4:	6851      	ldr	r1, [r2, #4]
 8000ce6:	6895      	ldr	r5, [r2, #8]
 8000ce8:	68d4      	ldr	r4, [r2, #12]
 8000cea:	6018      	str	r0, [r3, #0]
 8000cec:	6059      	str	r1, [r3, #4]
 8000cee:	609d      	str	r5, [r3, #8]
 8000cf0:	60dc      	str	r4, [r3, #12]
 8000cf2:	6910      	ldr	r0, [r2, #16]
 8000cf4:	6951      	ldr	r1, [r2, #20]
 8000cf6:	6118      	str	r0, [r3, #16]
 8000cf8:	6159      	str	r1, [r3, #20]
    	chipConf.PlaneSize *= chipConf.BlockNbr;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <io_nand_init+0xa4>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <io_nand_init+0xa4>)
 8000d00:	68d2      	ldr	r2, [r2, #12]
 8000d02:	fb02 f303 	mul.w	r3, r2, r3
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <io_nand_init+0xa4>)
 8000d08:	6153      	str	r3, [r2, #20]

    	total_pages = chipConf.BlockSize * chipConf.BlockNbr;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <io_nand_init+0xa4>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <io_nand_init+0xa4>)
 8000d10:	68d2      	ldr	r2, [r2, #12]
 8000d12:	fb02 f303 	mul.w	r3, r2, r3
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <io_nand_init+0xa8>)
 8000d18:	6013      	str	r3, [r2, #0]
    	total_bytes = total_pages * chipConf.PageSize;//chipConf.PlaneSize;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <io_nand_init+0xa4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <io_nand_init+0xa8>)
 8000d20:	6812      	ldr	r2, [r2, #0]
 8000d22:	fb02 f303 	mul.w	r3, r2, r3
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <io_nand_init+0xac>)
 8000d28:	6013      	str	r3, [r2, #0]

    }

}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bdb0      	pop	{r4, r5, r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000490 	.word	0x20000490
 8000d38:	200014c8 	.word	0x200014c8
 8000d3c:	20000085 	.word	0x20000085
 8000d40:	200014d0 	.word	0x200014d0
 8000d44:	200014a8 	.word	0x200014a8
 8000d48:	200014ac 	.word	0x200014ac

08000d4c <io_nand_get_page_size>:
//-------------------------------------------------------------------------------------------
uint32_t io_nand_get_page_size(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
    return chipConf.PageSize;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <io_nand_get_page_size+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200014d0 	.word	0x200014d0

08000d64 <io_nand_get_block_number>:
uint32_t io_nand_get_block_number(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
	return chipConf.BlockNbr;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <io_nand_get_block_number+0x14>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200014d0 	.word	0x200014d0

08000d7c <io_nand_get_block_size>:
uint32_t io_nand_get_block_size(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	return chipConf.BlockSize;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <io_nand_get_block_size+0x14>)
 8000d82:	689b      	ldr	r3, [r3, #8]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200014d0 	.word	0x200014d0

08000d94 <NAND_Read_ID>:
{
	return chipConf.PlaneSize;
}
//-----------------------------------------------------------------------------------------
HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d101      	bne.n	8000dae <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 8000daa:	2302      	movs	r3, #2
 8000dac:	e059      	b.n	8000e62 <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d152      	bne.n	8000e60 <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d101      	bne.n	8000dc8 <NAND_Read_ID+0x34>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e04c      	b.n	8000e62 <NAND_Read_ID+0xce>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <NAND_Read_ID+0xdc>)
 8000dda:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000dde:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <NAND_Read_ID+0xdc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de8:	2290      	movs	r2, #144	; 0x90
 8000dea:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dec:	f3bf 8f4f 	dsb	sy
}
 8000df0:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <NAND_Read_ID+0xdc>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dfe:	f3bf 8f4f 	dsb	sy
}
 8000e02:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d123      	bne.n	8000e54 <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <NAND_Read_ID+0xdc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <NAND_Read_ID+0xdc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3310      	adds	r3, #16
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	0e1b      	lsrs	r3, r3, #24
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	711a      	strb	r2, [r3, #4]


	    	hnand->State = HAL_NAND_STATE_READY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e000      	b.n	8000e62 <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200014b0 	.word	0x200014b0

08000e74 <io_nand_read_8b>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read_8b (uint32_t addr, uint8_t *pBuffer, uint32_t size, uint32_t offset)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b090      	sub	sp, #64	; 0x40
 8000e78:	af04      	add	r7, sp, #16
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	603b      	str	r3, [r7, #0]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	68f9      	ldr	r1, [r7, #12]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fce7 	bl	800185c <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 8000e8e:	4b6c      	ldr	r3, [pc, #432]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d101      	bne.n	8000ea0 <io_nand_read_8b+0x2c>
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	e1da      	b.n	8001256 <io_nand_read_8b+0x3e2>

    __HAL_LOCK(nandPort);
 8000ea0:	4b67      	ldr	r3, [pc, #412]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d101      	bne.n	8000eb0 <io_nand_read_8b+0x3c>
 8000eac:	2302      	movs	r3, #2
 8000eae:	e1d2      	b.n	8001256 <io_nand_read_8b+0x3e2>
 8000eb0:	4b63      	ldr	r3, [pc, #396]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 8000eba:	4b61      	ldr	r3, [pc, #388]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 8000ec4:	4b5f      	ldr	r3, [pc, #380]	; (8001044 <io_nand_read_8b+0x1d0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 8000eca:	8a3b      	ldrh	r3, [r7, #16]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	8abb      	ldrh	r3, [r7, #20]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	8a7b      	ldrh	r3, [r7, #18]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	4b5a      	ldr	r3, [pc, #360]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000edc:	fb00 f303 	mul.w	r3, r0, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a57      	ldr	r2, [pc, #348]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000ee4:	6812      	ldr	r2, [r2, #0]
 8000ee6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	440b      	add	r3, r1
 8000eee:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 8000ef0:	4b55      	ldr	r3, [pc, #340]	; (8001048 <io_nand_read_8b+0x1d4>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d910      	bls.n	8000f1a <io_nand_read_8b+0xa6>
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8000ef8:	8a3b      	ldrh	r3, [r7, #16]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
 8000efa:	461a      	mov	r2, r3
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8000efc:	8a7b      	ldrh	r3, [r7, #18]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
 8000efe:	4619      	mov	r1, r3
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8000f00:	8abb      	ldrh	r3, [r7, #20]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
 8000f02:	4618      	mov	r0, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	9303      	str	r3, [sp, #12]
 8000f08:	9002      	str	r0, [sp, #8]
 8000f0a:	9101      	str	r1, [sp, #4]
 8000f0c:	9200      	str	r2, [sp, #0]
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	4a4e      	ldr	r2, [pc, #312]	; (800104c <io_nand_read_8b+0x1d8>)
 8000f12:	494f      	ldr	r1, [pc, #316]	; (8001050 <io_nand_read_8b+0x1dc>)
 8000f14:	2001      	movs	r0, #1
 8000f16:	f001 ff49 	bl	8002dac <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	77fb      	strb	r3, [r7, #31]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 8000f1e:	2220      	movs	r2, #32
 8000f20:	2100      	movs	r1, #0
 8000f22:	484c      	ldr	r0, [pc, #304]	; (8001054 <io_nand_read_8b+0x1e0>)
 8000f24:	f010 f848 	bl	8010fb8 <memset>
    tmpLen = 0;
 8000f28:	4b4b      	ldr	r3, [pc, #300]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
    __DSB();

    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d009      	beq.n	8000f58 <io_nand_read_8b+0xe4>
 8000f44:	4b44      	ldr	r3, [pc, #272]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	b2d1      	uxtb	r1, r2
 8000f4c:	4a42      	ldr	r2, [pc, #264]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000f4e:	7011      	strb	r1, [r2, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b40      	ldr	r3, [pc, #256]	; (8001054 <io_nand_read_8b+0x1e0>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	5499      	strb	r1, [r3, r2]

    // Cards with page size <= 512 bytes
    if ((nandPort->Config.PageSize) <= 512U) {
 8000f58:	4b39      	ldr	r3, [pc, #228]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f62:	d87b      	bhi.n	800105c <io_nand_read_8b+0x1e8>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f70:	f3bf 8f4f 	dsb	sy
}
 8000f74:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);;
 8000f76:	7ffb      	ldrb	r3, [r7, #31]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00a      	beq.n	8000f92 <io_nand_read_8b+0x11e>
 8000f7c:	4b36      	ldr	r3, [pc, #216]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	b2d1      	uxtb	r1, r2
 8000f84:	4a34      	ldr	r2, [pc, #208]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000f86:	7011      	strb	r1, [r2, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2d9      	uxtb	r1, r3
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <io_nand_read_8b+0x1e0>)
 8000f90:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	6a3a      	ldr	r2, [r7, #32]
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9e:	f3bf 8f4f 	dsb	sy
}
 8000fa2:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 8000fa4:	7ffb      	ldrb	r3, [r7, #31]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00a      	beq.n	8000fc0 <io_nand_read_8b+0x14c>
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	b2d1      	uxtb	r1, r2
 8000fb2:	4a29      	ldr	r2, [pc, #164]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000fb4:	7011      	strb	r1, [r2, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	b2d9      	uxtb	r1, r3
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <io_nand_read_8b+0x1e0>)
 8000fbe:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	0a1a      	lsrs	r2, r3, #8
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00b      	beq.n	8000ff2 <io_nand_read_8b+0x17e>
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	0a19      	lsrs	r1, r3, #8
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	b2d0      	uxtb	r0, r2
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <io_nand_read_8b+0x1e4>)
 8000fe8:	7010      	strb	r0, [r2, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	b2c9      	uxtb	r1, r1
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <io_nand_read_8b+0x1e0>)
 8000ff0:	5499      	strb	r1, [r3, r2]
        if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <io_nand_read_8b+0x1cc>)
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001006:	f0c0 80ad 	bcc.w	8001164 <io_nand_read_8b+0x2f0>
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	0c1a      	lsrs	r2, r3, #16
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001018:	f3bf 8f4f 	dsb	sy
}
 800101c:	bf00      	nop
			__DSB();
			if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 800101e:	7ffb      	ldrb	r3, [r7, #31]
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 809f 	beq.w	8001164 <io_nand_read_8b+0x2f0>
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	0c19      	lsrs	r1, r3, #16
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <io_nand_read_8b+0x1e4>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	b2d0      	uxtb	r0, r2
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <io_nand_read_8b+0x1e4>)
 8001034:	7010      	strb	r0, [r2, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	b2c9      	uxtb	r1, r1
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <io_nand_read_8b+0x1e0>)
 800103c:	5499      	strb	r1, [r3, r2]
 800103e:	e091      	b.n	8001164 <io_nand_read_8b+0x2f0>
 8001040:	20000078 	.word	0x20000078
 8001044:	200014b0 	.word	0x200014b0
 8001048:	20000068 	.word	0x20000068
 800104c:	080148c0 	.word	0x080148c0
 8001050:	08011bb4 	.word	0x08011bb4
 8001054:	2000015c 	.word	0x2000015c
 8001058:	2000017c 	.word	0x2000017c
        }
    } else {// (hnand->Config.PageSize) > 512
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001068:	f3bf 8f4f 	dsb	sy
}
 800106c:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00a      	beq.n	800108a <io_nand_read_8b+0x216>
 8001074:	4b7a      	ldr	r3, [pc, #488]	; (8001260 <io_nand_read_8b+0x3ec>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	b2d1      	uxtb	r1, r2
 800107c:	4a78      	ldr	r2, [pc, #480]	; (8001260 <io_nand_read_8b+0x3ec>)
 800107e:	7011      	strb	r1, [r2, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2d9      	uxtb	r1, r3
 8001086:	4b77      	ldr	r3, [pc, #476]	; (8001264 <io_nand_read_8b+0x3f0>)
 8001088:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	0a1a      	lsrs	r2, r3, #8
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001098:	f3bf 8f4f 	dsb	sy
}
 800109c:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_2ND_CYCLE(offset);
 800109e:	7ffb      	ldrb	r3, [r7, #31]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00b      	beq.n	80010bc <io_nand_read_8b+0x248>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	0a19      	lsrs	r1, r3, #8
 80010a8:	4b6d      	ldr	r3, [pc, #436]	; (8001260 <io_nand_read_8b+0x3ec>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	b2d0      	uxtb	r0, r2
 80010b0:	4a6b      	ldr	r2, [pc, #428]	; (8001260 <io_nand_read_8b+0x3ec>)
 80010b2:	7010      	strb	r0, [r2, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	b2c9      	uxtb	r1, r1
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <io_nand_read_8b+0x3f0>)
 80010ba:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c2:	6a3a      	ldr	r2, [r7, #32]
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010c8:	f3bf 8f4f 	dsb	sy
}
 80010cc:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 80010ce:	7ffb      	ldrb	r3, [r7, #31]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00a      	beq.n	80010ea <io_nand_read_8b+0x276>
 80010d4:	4b62      	ldr	r3, [pc, #392]	; (8001260 <io_nand_read_8b+0x3ec>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	b2d1      	uxtb	r1, r2
 80010dc:	4a60      	ldr	r2, [pc, #384]	; (8001260 <io_nand_read_8b+0x3ec>)
 80010de:	7011      	strb	r1, [r2, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	b2d9      	uxtb	r1, r3
 80010e6:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <io_nand_read_8b+0x3f0>)
 80010e8:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	0a1a      	lsrs	r2, r3, #8
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010f8:	f3bf 8f4f 	dsb	sy
}
 80010fc:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 80010fe:	7ffb      	ldrb	r3, [r7, #31]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <io_nand_read_8b+0x2a8>
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	0a19      	lsrs	r1, r3, #8
 8001108:	4b55      	ldr	r3, [pc, #340]	; (8001260 <io_nand_read_8b+0x3ec>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	b2d0      	uxtb	r0, r2
 8001110:	4a53      	ldr	r2, [pc, #332]	; (8001260 <io_nand_read_8b+0x3ec>)
 8001112:	7010      	strb	r0, [r2, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	b2c9      	uxtb	r1, r1
 8001118:	4b52      	ldr	r3, [pc, #328]	; (8001264 <io_nand_read_8b+0x3f0>)
 800111a:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 800111c:	4b52      	ldr	r3, [pc, #328]	; (8001268 <io_nand_read_8b+0x3f4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	4a51      	ldr	r2, [pc, #324]	; (8001268 <io_nand_read_8b+0x3f4>)
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001130:	d318      	bcc.n	8001164 <io_nand_read_8b+0x2f0>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	0c1a      	lsrs	r2, r3, #16
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001140:	f3bf 8f4f 	dsb	sy
}
 8001144:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8001146:	7ffb      	ldrb	r3, [r7, #31]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00b      	beq.n	8001164 <io_nand_read_8b+0x2f0>
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	0c19      	lsrs	r1, r3, #16
 8001150:	4b43      	ldr	r3, [pc, #268]	; (8001260 <io_nand_read_8b+0x3ec>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	b2d0      	uxtb	r0, r2
 8001158:	4a41      	ldr	r2, [pc, #260]	; (8001260 <io_nand_read_8b+0x3ec>)
 800115a:	7010      	strb	r0, [r2, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	b2c9      	uxtb	r1, r1
 8001160:	4b40      	ldr	r3, [pc, #256]	; (8001264 <io_nand_read_8b+0x3f0>)
 8001162:	5499      	strb	r1, [r3, r2]
    	}
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116a:	2230      	movs	r2, #48	; 0x30
 800116c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800116e:	f3bf 8f4f 	dsb	sy
}
 8001172:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_TRUE1;
 8001174:	7ffb      	ldrb	r3, [r7, #31]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d009      	beq.n	800118e <io_nand_read_8b+0x31a>
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <io_nand_read_8b+0x3ec>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	b2d1      	uxtb	r1, r2
 8001182:	4a37      	ldr	r2, [pc, #220]	; (8001260 <io_nand_read_8b+0x3ec>)
 8001184:	7011      	strb	r1, [r2, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <io_nand_read_8b+0x3f0>)
 800118a:	2130      	movs	r1, #48	; 0x30
 800118c:	5499      	strb	r1, [r3, r2]


    uint32_t tickstart = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
    // Check if an extra command is needed for reading pages
    if (nandPort->Config.ExtraCommandEnable == ENABLE) {
 8001192:	4b35      	ldr	r3, [pc, #212]	; (8001268 <io_nand_read_8b+0x3f4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800119a:	2b01      	cmp	r3, #1
 800119c:	d134      	bne.n	8001208 <io_nand_read_8b+0x394>
        tickstart = HAL_GetTick();
 800119e:	f004 f8af 	bl	8005300 <HAL_GetTick>
 80011a2:	61b8      	str	r0, [r7, #24]
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80011a4:	e013      	b.n	80011ce <io_nand_read_8b+0x35a>
            if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 80011a6:	f004 f8ab 	bl	8005300 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d90b      	bls.n	80011ce <io_nand_read_8b+0x35a>
            	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80011b6:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <io_nand_read_8b+0x3f4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2203      	movs	r2, #3
 80011bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            	__HAL_UNLOCK(nandPort);
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <io_nand_read_8b+0x3f4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2020 	strb.w	r2, [r3, #32]
            	return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e043      	b.n	8001256 <io_nand_read_8b+0x3e2>
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <io_nand_read_8b+0x3f4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f005 f8da 	bl	800638c <HAL_NAND_Read_Status>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b40      	cmp	r3, #64	; 0x40
 80011dc:	d1e3      	bne.n	80011a6 <io_nand_read_8b+0x332>
            }
        }

        // Go back to read mode
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80011e8:	f3bf 8f4f 	dsb	sy
}
 80011ec:	bf00      	nop
        __DSB();
        if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d009      	beq.n	8001208 <io_nand_read_8b+0x394>
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <io_nand_read_8b+0x3ec>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	b2d1      	uxtb	r1, r2
 80011fc:	4a18      	ldr	r2, [pc, #96]	; (8001260 <io_nand_read_8b+0x3ec>)
 80011fe:	7011      	strb	r1, [r2, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <io_nand_read_8b+0x3f0>)
 8001204:	2100      	movs	r1, #0
 8001206:	5499      	strb	r1, [r3, r2]
    }

    // Get Data into Buffer
    uint8_t *buff = pBuffer;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) *buff++ = *(uint8_t *)deviceaddress;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001210:	e008      	b.n	8001224 <io_nand_read_8b+0x3b0>
 8001212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	1c59      	adds	r1, r3, #1
 8001218:	62f9      	str	r1, [r7, #44]	; 0x2c
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001220:	3301      	adds	r3, #1
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
 8001224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3f2      	bcc.n	8001212 <io_nand_read_8b+0x39e>

    nandPort->State = HAL_NAND_STATE_READY;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <io_nand_read_8b+0x3f4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <io_nand_read_8b+0x3f4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2020 	strb.w	r2, [r3, #32]

    if (tflag) tmpPrint(__func__, tmpBuf, tmpLen);
 8001240:	7ffb      	ldrb	r3, [r7, #31]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <io_nand_read_8b+0x3e0>
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <io_nand_read_8b+0x3ec>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4905      	ldr	r1, [pc, #20]	; (8001264 <io_nand_read_8b+0x3f0>)
 800124e:	4807      	ldr	r0, [pc, #28]	; (800126c <io_nand_read_8b+0x3f8>)
 8001250:	f7ff fcee 	bl	8000c30 <tmpPrint>

    return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3730      	adds	r7, #48	; 0x30
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000017c 	.word	0x2000017c
 8001264:	2000015c 	.word	0x2000015c
 8001268:	20000078 	.word	0x20000078
 800126c:	080148c0 	.word	0x080148c0

08001270 <io_nand_write_8b>:
//-----------------------------------------------------------------------------
uint32_t io_nand_write_8b(uint32_t addr, uint8_t *pBuffer, uint32_t size, uint32_t offset)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b090      	sub	sp, #64	; 0x40
 8001274:	af04      	add	r7, sp, #16
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	68f9      	ldr	r1, [r7, #12]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fae9 	bl	800185c <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 800128a:	4b77      	ldr	r3, [pc, #476]	; (8001468 <io_nand_write_8b+0x1f8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d101      	bne.n	800129c <io_nand_write_8b+0x2c>
 8001298:	2302      	movs	r3, #2
 800129a:	e1d6      	b.n	800164a <io_nand_write_8b+0x3da>

    __HAL_LOCK(nandPort);
 800129c:	4b72      	ldr	r3, [pc, #456]	; (8001468 <io_nand_write_8b+0x1f8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <io_nand_write_8b+0x3c>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e1ce      	b.n	800164a <io_nand_write_8b+0x3da>
 80012ac:	4b6e      	ldr	r3, [pc, #440]	; (8001468 <io_nand_write_8b+0x1f8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 80012b6:	4b6c      	ldr	r3, [pc, #432]	; (8001468 <io_nand_write_8b+0x1f8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2202      	movs	r2, #2
 80012bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 80012c0:	4b6a      	ldr	r3, [pc, #424]	; (800146c <io_nand_write_8b+0x1fc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 80012c6:	8a3b      	ldrh	r3, [r7, #16]
 80012c8:	4619      	mov	r1, r3
 80012ca:	8abb      	ldrh	r3, [r7, #20]
 80012cc:	461a      	mov	r2, r3
 80012ce:	8a7b      	ldrh	r3, [r7, #18]
 80012d0:	4618      	mov	r0, r3
 80012d2:	4b65      	ldr	r3, [pc, #404]	; (8001468 <io_nand_write_8b+0x1f8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d8:	fb00 f303 	mul.w	r3, r0, r3
 80012dc:	4413      	add	r3, r2
 80012de:	4a62      	ldr	r2, [pc, #392]	; (8001468 <io_nand_write_8b+0x1f8>)
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	440b      	add	r3, r1
 80012ea:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 80012ec:	4b60      	ldr	r3, [pc, #384]	; (8001470 <io_nand_write_8b+0x200>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d910      	bls.n	8001316 <io_nand_write_8b+0xa6>
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 80012f4:	8a3b      	ldrh	r3, [r7, #16]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
 80012f6:	461a      	mov	r2, r3
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 80012f8:	8a7b      	ldrh	r3, [r7, #18]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
 80012fa:	4619      	mov	r1, r3
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 80012fc:	8abb      	ldrh	r3, [r7, #20]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%lu\r\n",
 80012fe:	4618      	mov	r0, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	9002      	str	r0, [sp, #8]
 8001306:	9101      	str	r1, [sp, #4]
 8001308:	9200      	str	r2, [sp, #0]
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	4a59      	ldr	r2, [pc, #356]	; (8001474 <io_nand_write_8b+0x204>)
 800130e:	495a      	ldr	r1, [pc, #360]	; (8001478 <io_nand_write_8b+0x208>)
 8001310:	2001      	movs	r0, #1
 8001312:	f001 fd4b 	bl	8002dac <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 8001316:	2301      	movs	r3, #1
 8001318:	77fb      	strb	r3, [r7, #31]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 800131a:	2220      	movs	r2, #32
 800131c:	2100      	movs	r1, #0
 800131e:	4857      	ldr	r0, [pc, #348]	; (800147c <io_nand_write_8b+0x20c>)
 8001320:	f00f fe4a 	bl	8010fb8 <memset>
    tmpLen = 0;
 8001324:	4b56      	ldr	r3, [pc, #344]	; (8001480 <io_nand_write_8b+0x210>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001334:	f3bf 8f4f 	dsb	sy
}
 8001338:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 800133a:	7ffb      	ldrb	r3, [r7, #31]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d009      	beq.n	8001354 <io_nand_write_8b+0xe4>
 8001340:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <io_nand_write_8b+0x210>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	b2d1      	uxtb	r1, r2
 8001348:	4a4d      	ldr	r2, [pc, #308]	; (8001480 <io_nand_write_8b+0x210>)
 800134a:	7011      	strb	r1, [r2, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b4b      	ldr	r3, [pc, #300]	; (800147c <io_nand_write_8b+0x20c>)
 8001350:	2100      	movs	r1, #0
 8001352:	5499      	strb	r1, [r3, r2]
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800135e:	f3bf 8f4f 	dsb	sy
}
 8001362:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_WRITE0;
 8001364:	7ffb      	ldrb	r3, [r7, #31]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <io_nand_write_8b+0x10e>
 800136a:	4b45      	ldr	r3, [pc, #276]	; (8001480 <io_nand_write_8b+0x210>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	b2d1      	uxtb	r1, r2
 8001372:	4a43      	ldr	r2, [pc, #268]	; (8001480 <io_nand_write_8b+0x210>)
 8001374:	7011      	strb	r1, [r2, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b40      	ldr	r3, [pc, #256]	; (800147c <io_nand_write_8b+0x20c>)
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	5499      	strb	r1, [r3, r2]

    /* Cards with page size <= 512 bytes */
    if (nandPort->Config.PageSize <= 512U) {
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <io_nand_write_8b+0x1f8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001388:	d87c      	bhi.n	8001484 <io_nand_write_8b+0x214>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001396:	f3bf 8f4f 	dsb	sy
}
 800139a:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 800139c:	7ffb      	ldrb	r3, [r7, #31]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00a      	beq.n	80013b8 <io_nand_write_8b+0x148>
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <io_nand_write_8b+0x210>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	b2d1      	uxtb	r1, r2
 80013aa:	4a35      	ldr	r2, [pc, #212]	; (8001480 <io_nand_write_8b+0x210>)
 80013ac:	7011      	strb	r1, [r2, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2d9      	uxtb	r1, r3
 80013b4:	4b31      	ldr	r3, [pc, #196]	; (800147c <io_nand_write_8b+0x20c>)
 80013b6:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013be:	6a3a      	ldr	r2, [r7, #32]
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013c4:	f3bf 8f4f 	dsb	sy
}
 80013c8:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00a      	beq.n	80013e6 <io_nand_write_8b+0x176>
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <io_nand_write_8b+0x210>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	b2d1      	uxtb	r1, r2
 80013d8:	4a29      	ldr	r2, [pc, #164]	; (8001480 <io_nand_write_8b+0x210>)
 80013da:	7011      	strb	r1, [r2, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	b2d9      	uxtb	r1, r3
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <io_nand_write_8b+0x20c>)
 80013e4:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	0a1a      	lsrs	r2, r3, #8
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013f4:	f3bf 8f4f 	dsb	sy
}
 80013f8:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 80013fa:	7ffb      	ldrb	r3, [r7, #31]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00b      	beq.n	8001418 <io_nand_write_8b+0x1a8>
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	0a19      	lsrs	r1, r3, #8
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <io_nand_write_8b+0x210>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	b2d0      	uxtb	r0, r2
 800140c:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <io_nand_write_8b+0x210>)
 800140e:	7010      	strb	r0, [r2, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	b2c9      	uxtb	r1, r1
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <io_nand_write_8b+0x20c>)
 8001416:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <io_nand_write_8b+0x1f8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <io_nand_write_8b+0x1f8>)
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	f0c0 80ae 	bcc.w	800158c <io_nand_write_8b+0x31c>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	0c1a      	lsrs	r2, r3, #16
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800143e:	f3bf 8f4f 	dsb	sy
}
 8001442:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8001444:	7ffb      	ldrb	r3, [r7, #31]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80a0 	beq.w	800158c <io_nand_write_8b+0x31c>
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	0c19      	lsrs	r1, r3, #16
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <io_nand_write_8b+0x210>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	b2d0      	uxtb	r0, r2
 8001458:	4a09      	ldr	r2, [pc, #36]	; (8001480 <io_nand_write_8b+0x210>)
 800145a:	7010      	strb	r0, [r2, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	b2c9      	uxtb	r1, r1
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <io_nand_write_8b+0x20c>)
 8001462:	5499      	strb	r1, [r3, r2]
 8001464:	e092      	b.n	800158c <io_nand_write_8b+0x31c>
 8001466:	bf00      	nop
 8001468:	20000078 	.word	0x20000078
 800146c:	200014b0 	.word	0x200014b0
 8001470:	20000068 	.word	0x20000068
 8001474:	080148d0 	.word	0x080148d0
 8001478:	08011bb4 	.word	0x08011bb4
 800147c:	2000015c 	.word	0x2000015c
 8001480:	2000017c 	.word	0x2000017c
        }
    } else {/* (hnand->Config.PageSize) > 512 */
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001490:	f3bf 8f4f 	dsb	sy
}
 8001494:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 8001496:	7ffb      	ldrb	r3, [r7, #31]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00a      	beq.n	80014b2 <io_nand_write_8b+0x242>
 800149c:	4b6d      	ldr	r3, [pc, #436]	; (8001654 <io_nand_write_8b+0x3e4>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	b2d1      	uxtb	r1, r2
 80014a4:	4a6b      	ldr	r2, [pc, #428]	; (8001654 <io_nand_write_8b+0x3e4>)
 80014a6:	7011      	strb	r1, [r2, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2d9      	uxtb	r1, r3
 80014ae:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <io_nand_write_8b+0x3e8>)
 80014b0:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	0a1a      	lsrs	r2, r3, #8
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014c0:	f3bf 8f4f 	dsb	sy
}
 80014c4:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_2ND_CYCLE(offset);
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00b      	beq.n	80014e4 <io_nand_write_8b+0x274>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	0a19      	lsrs	r1, r3, #8
 80014d0:	4b60      	ldr	r3, [pc, #384]	; (8001654 <io_nand_write_8b+0x3e4>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	b2d0      	uxtb	r0, r2
 80014d8:	4a5e      	ldr	r2, [pc, #376]	; (8001654 <io_nand_write_8b+0x3e4>)
 80014da:	7010      	strb	r0, [r2, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	b2c9      	uxtb	r1, r1
 80014e0:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <io_nand_write_8b+0x3e8>)
 80014e2:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ea:	6a3a      	ldr	r2, [r7, #32]
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014f0:	f3bf 8f4f 	dsb	sy
}
 80014f4:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 80014f6:	7ffb      	ldrb	r3, [r7, #31]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00a      	beq.n	8001512 <io_nand_write_8b+0x2a2>
 80014fc:	4b55      	ldr	r3, [pc, #340]	; (8001654 <io_nand_write_8b+0x3e4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	b2d1      	uxtb	r1, r2
 8001504:	4a53      	ldr	r2, [pc, #332]	; (8001654 <io_nand_write_8b+0x3e4>)
 8001506:	7011      	strb	r1, [r2, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	b2d9      	uxtb	r1, r3
 800150e:	4b52      	ldr	r3, [pc, #328]	; (8001658 <io_nand_write_8b+0x3e8>)
 8001510:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	0a1a      	lsrs	r2, r3, #8
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001520:	f3bf 8f4f 	dsb	sy
}
 8001524:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 8001526:	7ffb      	ldrb	r3, [r7, #31]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00b      	beq.n	8001544 <io_nand_write_8b+0x2d4>
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	0a19      	lsrs	r1, r3, #8
 8001530:	4b48      	ldr	r3, [pc, #288]	; (8001654 <io_nand_write_8b+0x3e4>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	b2d0      	uxtb	r0, r2
 8001538:	4a46      	ldr	r2, [pc, #280]	; (8001654 <io_nand_write_8b+0x3e4>)
 800153a:	7010      	strb	r0, [r2, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	b2c9      	uxtb	r1, r1
 8001540:	4b45      	ldr	r3, [pc, #276]	; (8001658 <io_nand_write_8b+0x3e8>)
 8001542:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001544:	4b45      	ldr	r3, [pc, #276]	; (800165c <io_nand_write_8b+0x3ec>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	4a44      	ldr	r2, [pc, #272]	; (800165c <io_nand_write_8b+0x3ec>)
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001558:	d318      	bcc.n	800158c <io_nand_write_8b+0x31c>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	0c1a      	lsrs	r2, r3, #16
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 800156e:	7ffb      	ldrb	r3, [r7, #31]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00b      	beq.n	800158c <io_nand_write_8b+0x31c>
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	0c19      	lsrs	r1, r3, #16
 8001578:	4b36      	ldr	r3, [pc, #216]	; (8001654 <io_nand_write_8b+0x3e4>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	b2d0      	uxtb	r0, r2
 8001580:	4a34      	ldr	r2, [pc, #208]	; (8001654 <io_nand_write_8b+0x3e4>)
 8001582:	7010      	strb	r0, [r2, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	b2c9      	uxtb	r1, r1
 8001588:	4b33      	ldr	r3, [pc, #204]	; (8001658 <io_nand_write_8b+0x3e8>)
 800158a:	5499      	strb	r1, [r3, r2]
        }
    }


    /* Write data to memory */
    uint8_t *buff = pBuffer;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) {
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
 8001594:	e00b      	b.n	80015ae <io_nand_write_8b+0x33e>
    	*(__IO uint8_t *)deviceaddress = *buff++;
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800159c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015a2:	f3bf 8f4f 	dsb	sy
}
 80015a6:	bf00      	nop
    for (uint32_t index = 0; index < size; index++) {
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	3301      	adds	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d3ef      	bcc.n	8001596 <io_nand_write_8b+0x326>
    	__DSB();
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	2210      	movs	r2, #16
 80015be:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015c0:	f3bf 8f4f 	dsb	sy
}
 80015c4:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_WRITE_TRUE1;
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d021      	beq.n	8001610 <io_nand_write_8b+0x3a0>
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <io_nand_write_8b+0x3e4>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	b2d1      	uxtb	r1, r2
 80015d4:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <io_nand_write_8b+0x3e4>)
 80015d6:	7011      	strb	r1, [r2, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <io_nand_write_8b+0x3e8>)
 80015dc:	2110      	movs	r1, #16
 80015de:	5499      	strb	r1, [r3, r2]

    /* Read status until NAND is ready */
    uint32_t tickstart;
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80015e0:	e016      	b.n	8001610 <io_nand_write_8b+0x3a0>
        tickstart = HAL_GetTick();
 80015e2:	f003 fe8d 	bl	8005300 <HAL_GetTick>
 80015e6:	61b8      	str	r0, [r7, #24]
        if ((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 80015e8:	f003 fe8a 	bl	8005300 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f6:	d90b      	bls.n	8001610 <io_nand_write_8b+0x3a0>
        	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <io_nand_write_8b+0x3ec>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2203      	movs	r2, #3
 80015fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        	__HAL_UNLOCK(nandPort);
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <io_nand_write_8b+0x3ec>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2020 	strb.w	r2, [r3, #32]
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e01c      	b.n	800164a <io_nand_write_8b+0x3da>
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <io_nand_write_8b+0x3ec>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f004 feb9 	bl	800638c <HAL_NAND_Read_Status>
 800161a:	4603      	mov	r3, r0
 800161c:	2b40      	cmp	r3, #64	; 0x40
 800161e:	d1e0      	bne.n	80015e2 <io_nand_write_8b+0x372>
        }
    }

    nandPort->State = HAL_NAND_STATE_READY;
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <io_nand_write_8b+0x3ec>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <io_nand_write_8b+0x3ec>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2020 	strb.w	r2, [r3, #32]

    if (tflag) tmpPrint(__func__, tmpBuf, tmpLen);
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <io_nand_write_8b+0x3d8>
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <io_nand_write_8b+0x3e4>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4905      	ldr	r1, [pc, #20]	; (8001658 <io_nand_write_8b+0x3e8>)
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <io_nand_write_8b+0x3f0>)
 8001644:	f7ff faf4 	bl	8000c30 <tmpPrint>

    return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3730      	adds	r7, #48	; 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000017c 	.word	0x2000017c
 8001658:	2000015c 	.word	0x2000015c
 800165c:	20000078 	.word	0x20000078
 8001660:	080148d0 	.word	0x080148d0

08001664 <io_nand_erase_block>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef io_nand_erase_block(NAND_AddressTypeDef *pAddress)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af04      	add	r7, sp, #16
 800166a:	6078      	str	r0, [r7, #4]
//NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);

	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 800166c:	4b74      	ldr	r3, [pc, #464]	; (8001840 <io_nand_erase_block+0x1dc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d101      	bne.n	800167e <io_nand_erase_block+0x1a>

		return HAL_BUSY;
 800167a:	2302      	movs	r3, #2
 800167c:	e0dc      	b.n	8001838 <io_nand_erase_block+0x1d4>

	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 800167e:	4b70      	ldr	r3, [pc, #448]	; (8001840 <io_nand_erase_block+0x1dc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b01      	cmp	r3, #1
 800168a:	f040 80d2 	bne.w	8001832 <io_nand_erase_block+0x1ce>

		__HAL_LOCK(nandPort);
 800168e:	4b6c      	ldr	r3, [pc, #432]	; (8001840 <io_nand_erase_block+0x1dc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <io_nand_erase_block+0x3a>
 800169a:	2302      	movs	r3, #2
 800169c:	e0cc      	b.n	8001838 <io_nand_erase_block+0x1d4>
 800169e:	4b68      	ldr	r3, [pc, #416]	; (8001840 <io_nand_erase_block+0x1dc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 80016a8:	4b65      	ldr	r3, [pc, #404]	; (8001840 <io_nand_erase_block+0x1dc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		uint32_t deviceaddress = devAdr;
 80016b2:	4b64      	ldr	r3, [pc, #400]	; (8001844 <io_nand_erase_block+0x1e0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = ARRAY_ADDRESS(pAddress, nandPort);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	889b      	ldrh	r3, [r3, #4]
 80016c2:	461a      	mov	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	885b      	ldrh	r3, [r3, #2]
 80016c8:	4618      	mov	r0, r3
 80016ca:	4b5d      	ldr	r3, [pc, #372]	; (8001840 <io_nand_erase_block+0x1dc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d0:	fb00 f303 	mul.w	r3, r0, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	4a5a      	ldr	r2, [pc, #360]	; (8001840 <io_nand_erase_block+0x1dc>)
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	440b      	add	r3, r1
 80016e2:	613b      	str	r3, [r7, #16]


		if (dbg > logOn)
 80016e4:	4b58      	ldr	r3, [pc, #352]	; (8001848 <io_nand_erase_block+0x1e4>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d910      	bls.n	800170e <io_nand_erase_block+0xaa>
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
					  __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	881b      	ldrh	r3, [r3, #0]
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 80016f0:	461a      	mov	r2, r3
					  __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	885b      	ldrh	r3, [r3, #2]
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 80016f6:	4619      	mov	r1, r3
					  __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	889b      	ldrh	r3, [r3, #4]
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	9101      	str	r1, [sp, #4]
 8001700:	9200      	str	r2, [sp, #0]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4a51      	ldr	r2, [pc, #324]	; (800184c <io_nand_erase_block+0x1e8>)
 8001706:	4952      	ldr	r1, [pc, #328]	; (8001850 <io_nand_erase_block+0x1ec>)
 8001708:	2001      	movs	r0, #1
 800170a:	f001 fb4f 	bl	8002dac <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 8001712:	2220      	movs	r2, #32
 8001714:	2100      	movs	r1, #0
 8001716:	484f      	ldr	r0, [pc, #316]	; (8001854 <io_nand_erase_block+0x1f0>)
 8001718:	f00f fc4e 	bl	8010fb8 <memset>
    tmpLen = 0;
 800171c:	4b4e      	ldr	r3, [pc, #312]	; (8001858 <io_nand_erase_block+0x1f4>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

		/* Send Erase block command sequence */
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	2260      	movs	r2, #96	; 0x60
 800172a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800172c:	f3bf 8f4f 	dsb	sy
}
 8001730:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = NAND_CMD_ERASE0;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d009      	beq.n	800174c <io_nand_erase_block+0xe8>
 8001738:	4b47      	ldr	r3, [pc, #284]	; (8001858 <io_nand_erase_block+0x1f4>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	b2d1      	uxtb	r1, r2
 8001740:	4a45      	ldr	r2, [pc, #276]	; (8001858 <io_nand_erase_block+0x1f4>)
 8001742:	7011      	strb	r1, [r2, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b43      	ldr	r3, [pc, #268]	; (8001854 <io_nand_erase_block+0x1f0>)
 8001748:	2160      	movs	r1, #96	; 0x60
 800174a:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001758:	f3bf 8f4f 	dsb	sy
}
 800175c:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00a      	beq.n	800177a <io_nand_erase_block+0x116>
 8001764:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <io_nand_erase_block+0x1f4>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	b2d1      	uxtb	r1, r2
 800176c:	4a3a      	ldr	r2, [pc, #232]	; (8001858 <io_nand_erase_block+0x1f4>)
 800176e:	7011      	strb	r1, [r2, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	b2d9      	uxtb	r1, r3
 8001776:	4b37      	ldr	r3, [pc, #220]	; (8001854 <io_nand_erase_block+0x1f0>)
 8001778:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	0a1a      	lsrs	r2, r3, #8
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001788:	f3bf 8f4f 	dsb	sy
}
 800178c:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00b      	beq.n	80017ac <io_nand_erase_block+0x148>
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	0a19      	lsrs	r1, r3, #8
 8001798:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <io_nand_erase_block+0x1f4>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	b2d0      	uxtb	r0, r2
 80017a0:	4a2d      	ldr	r2, [pc, #180]	; (8001858 <io_nand_erase_block+0x1f4>)
 80017a2:	7010      	strb	r0, [r2, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	b2c9      	uxtb	r1, r1
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <io_nand_erase_block+0x1f0>)
 80017aa:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	0c1a      	lsrs	r2, r3, #16
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017ba:	f3bf 8f4f 	dsb	sy
}
 80017be:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <io_nand_erase_block+0x17a>
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	0c19      	lsrs	r1, r3, #16
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <io_nand_erase_block+0x1f4>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	b2d0      	uxtb	r0, r2
 80017d2:	4a21      	ldr	r2, [pc, #132]	; (8001858 <io_nand_erase_block+0x1f4>)
 80017d4:	7010      	strb	r0, [r2, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	b2c9      	uxtb	r1, r1
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <io_nand_erase_block+0x1f0>)
 80017dc:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e4:	22d0      	movs	r2, #208	; 0xd0
 80017e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017e8:	f3bf 8f4f 	dsb	sy
}
 80017ec:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = NAND_CMD_ERASE1;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d009      	beq.n	8001808 <io_nand_erase_block+0x1a4>
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <io_nand_erase_block+0x1f4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	b2d1      	uxtb	r1, r2
 80017fc:	4a16      	ldr	r2, [pc, #88]	; (8001858 <io_nand_erase_block+0x1f4>)
 80017fe:	7011      	strb	r1, [r2, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <io_nand_erase_block+0x1f0>)
 8001804:	21d0      	movs	r1, #208	; 0xd0
 8001806:	5499      	strb	r1, [r3, r2]

		nandPort->State = HAL_NAND_STATE_READY;
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <io_nand_erase_block+0x1dc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <io_nand_erase_block+0x1dc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2020 	strb.w	r2, [r3, #32]

		if (tflag) tmpPrint(__func__, tmpBuf, tmpLen);
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <io_nand_erase_block+0x1d2>
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <io_nand_erase_block+0x1f4>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	490a      	ldr	r1, [pc, #40]	; (8001854 <io_nand_erase_block+0x1f0>)
 800182a:	4808      	ldr	r0, [pc, #32]	; (800184c <io_nand_erase_block+0x1e8>)
 800182c:	f7ff fa00 	bl	8000c30 <tmpPrint>
 8001830:	e001      	b.n	8001836 <io_nand_erase_block+0x1d2>

	} else {

		return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <io_nand_erase_block+0x1d4>

	}

	return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000078 	.word	0x20000078
 8001844:	200014b0 	.word	0x200014b0
 8001848:	20000068 	.word	0x20000068
 800184c:	080148e4 	.word	0x080148e4
 8001850:	08011bf4 	.word	0x08011bf4
 8001854:	2000015c 	.word	0x2000015c
 8001858:	2000017c 	.word	0x2000017c

0800185c <io_uint32_to_flash_adr>:
{
	return  ((adr->Plane * chipConf.PlaneSize) + (adr->Block * chipConf.BlockSize) + adr->Page);
}
//-----------------------------------------------------------------------------------------
NAND_AddressTypeDef io_uint32_to_flash_adr(uint32_t addr)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
NAND_AddressTypeDef a;

	a.Plane = addr / chipConf.PlaneSize;
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <io_uint32_to_flash_adr+0x7c>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	817b      	strh	r3, [r7, #10]
	a.Block = (addr - a.Plane * chipConf.PlaneSize) / chipConf.BlockSize;
 8001874:	897b      	ldrh	r3, [r7, #10]
 8001876:	461a      	mov	r2, r3
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <io_uint32_to_flash_adr+0x7c>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	fb02 f303 	mul.w	r3, r2, r3
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	1ad2      	subs	r2, r2, r3
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <io_uint32_to_flash_adr+0x7c>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	b29b      	uxth	r3, r3
 800188e:	81bb      	strh	r3, [r7, #12]
	a.Page  = addr - (a.Plane * chipConf.PlaneSize) - (a.Block * chipConf.BlockSize);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b29a      	uxth	r2, r3
 8001894:	8979      	ldrh	r1, [r7, #10]
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <io_uint32_to_flash_adr+0x7c>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	b29b      	uxth	r3, r3
 800189c:	fb11 f303 	smulbb	r3, r1, r3
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	89b9      	ldrh	r1, [r7, #12]
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <io_uint32_to_flash_adr+0x7c>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	fb11 f303 	smulbb	r3, r1, r3
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	813b      	strh	r3, [r7, #8]

	return a;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	461a      	mov	r2, r3
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	6010      	str	r0, [r2, #0]
 80018c6:	889b      	ldrh	r3, [r3, #4]
 80018c8:	8093      	strh	r3, [r2, #4]
}
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200014d0 	.word	0x200014d0

080018dc <io_nand_read>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read(uint32_t addr, uint8_t *buffer, uint32_t size, uint32_t offset)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]

	if (io_nand_read_8b(addr, buffer, size, offset) != HAL_OK) devError |= devNAND;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff fabf 	bl	8000e74 <io_nand_read_8b>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <io_nand_read+0x2e>
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <io_nand_read+0x38>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	f043 0320 	orr.w	r3, r3, #32
 8001904:	b29a      	uxth	r2, r3
 8001906:	4b03      	ldr	r3, [pc, #12]	; (8001914 <io_nand_read+0x38>)
 8001908:	801a      	strh	r2, [r3, #0]

    return 0;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000490 	.word	0x20000490

08001918 <io_nand_write>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_write(uint32_t addr, uint8_t *buffer, uint32_t size, uint32_t offset)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]

	if (io_nand_write_8b(addr, buffer, size, offset) != HAL_OK) devError |= devNAND;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7ff fc9f 	bl	8001270 <io_nand_write_8b>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <io_nand_write+0x2e>
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <io_nand_write+0x38>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	f043 0320 	orr.w	r3, r3, #32
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b03      	ldr	r3, [pc, #12]	; (8001950 <io_nand_write+0x38>)
 8001944:	801a      	strh	r2, [r3, #0]

	return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000490 	.word	0x20000490

08001954 <io_nand_block_erase>:
//-----------------------------------------------------------------------------------------
void io_nand_block_erase(uint32_t addr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
NAND_AddressTypeDef nans = io_uint32_to_flash_adr(addr);
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff7a 	bl	800185c <io_uint32_to_flash_adr>

	if (io_nand_erase_block(&nans) != HAL_OK) devError |= devNAND;
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe79 	bl	8001664 <io_nand_erase_block>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <io_nand_block_erase+0x32>
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <io_nand_block_erase+0x3c>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	b29a      	uxth	r2, r3
 8001982:	4b03      	ldr	r3, [pc, #12]	; (8001990 <io_nand_block_erase+0x3c>)
 8001984:	801a      	strh	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000490 	.word	0x20000490

08001994 <io_nand_get_status>:
//-----------------------------------------------------------------------------------------
unsigned char io_nand_get_status()
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
unsigned char ret = 2;//STA_NODISK;
 800199a:	2302      	movs	r3, #2
 800199c:	71fb      	strb	r3, [r7, #7]


	switch ((unsigned char)HAL_NAND_GetState(nandPort)) {
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <io_nand_get_status+0x38>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f004 fce4 	bl	8006370 <HAL_NAND_GetState>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <io_nand_get_status+0x20>
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d003      	beq.n	80019ba <io_nand_get_status+0x26>
 80019b2:	e005      	b.n	80019c0 <io_nand_get_status+0x2c>
		case HAL_NAND_STATE_RESET://     = 0x00U,  //NAND not yet initialized or disabled
			ret = 1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	71fb      	strb	r3, [r7, #7]
		break;
 80019b8:	e002      	b.n	80019c0 <io_nand_get_status+0x2c>
		case HAL_NAND_STATE_READY://     = 0x01U,  //NAND initialized and ready for use
			ret = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	71fb      	strb	r3, [r7, #7]
		break;
 80019be:	bf00      	nop
//RES_PARERR		/* 4: Invalid Parameter */
//#define STA_NOINIT		0x01	/* Drive not initialized */
//#define STA_NODISK		0x02	/* No medium in the drive */
//#define STA_PROTECT		0x04	/* Write protected */

	return ret;
 80019c0:	79fb      	ldrb	r3, [r7, #7]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000078 	.word	0x20000078

080019d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80019d4:	f3bf 8f4f 	dsb	sy
}
 80019d8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <__NVIC_SystemReset+0x24>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019e2:	4904      	ldr	r1, [pc, #16]	; (80019f4 <__NVIC_SystemReset+0x24>)
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_SystemReset+0x28>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ea:	f3bf 8f4f 	dsb	sy
}
 80019ee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <__NVIC_SystemReset+0x20>
 80019f4:	e000ed00 	.word	0xe000ed00
 80019f8:	05fa0004 	.word	0x05fa0004

080019fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a02:	f003 fc47 	bl	8005294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a06:	f000 f88f 	bl	8001b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a0a:	f000 fa33 	bl	8001e74 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a0e:	f000 f9fb 	bl	8001e08 <MX_DMA_Init>
  MX_TIM2_Init();
 8001a12:	f000 f983 	bl	8001d1c <MX_TIM2_Init>
  MX_RTC_Init();
 8001a16:	f000 f8f1 	bl	8001bfc <MX_RTC_Init>
  MX_FSMC_Init();
 8001a1a:	f000 fad1 	bl	8001fc0 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8001a1e:	f000 f9c9 	bl	8001db4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001a22:	f000 f945 	bl	8001cb0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001a26:	f008 f889 	bl	8009b3c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


#ifdef SET_FAT_FS
	dbg = logDump;
 8001a2a:	4b30      	ldr	r3, [pc, #192]	; (8001aec <main+0xf0>)
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	701a      	strb	r2, [r3, #0]
#endif


  for (uint8_t i = 0; i < 4; i++) {
 8001a30:	2300      	movs	r3, #0
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	e01e      	b.n	8001a74 <main+0x78>
	  HAL_Delay(150);
 8001a36:	2096      	movs	r0, #150	; 0x96
 8001a38:	f003 fc6e 	bl	8005318 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	482b      	ldr	r0, [pc, #172]	; (8001af0 <main+0xf4>)
 8001a42:	f004 fb0d 	bl	8006060 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a4c:	4829      	ldr	r0, [pc, #164]	; (8001af4 <main+0xf8>)
 8001a4e:	f004 fb07 	bl	8006060 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8001a52:	2096      	movs	r0, #150	; 0x96
 8001a54:	f003 fc60 	bl	8005318 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	4824      	ldr	r0, [pc, #144]	; (8001af0 <main+0xf4>)
 8001a5e:	f004 faff 	bl	8006060 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a68:	4822      	ldr	r0, [pc, #136]	; (8001af4 <main+0xf8>)
 8001a6a:	f004 faf9 	bl	8006060 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	3301      	adds	r3, #1
 8001a72:	71fb      	strb	r3, [r7, #7]
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d9dd      	bls.n	8001a36 <main+0x3a>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <main+0xfc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f006 fa94 	bl	8007fac <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <main+0x100>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	491d      	ldr	r1, [pc, #116]	; (8001b00 <main+0x104>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f006 ff0c 	bl	80088aa <HAL_UART_Receive_IT>

  set_Date(epoch);
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <main+0x108>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 f88e 	bl	8002bb8 <set_Date>

  ST7789_Reset();
 8001a9c:	f002 fe6e 	bl	800477c <ST7789_Reset>
  ST7789_Init(back_color);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <main+0x10c>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 fe83 	bl	80047b0 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001aaa:	f00b fc8d 	bl	800d3c8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <main+0x110>)
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f00b feb5 	bl	800d822 <osSemaphoreNew>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <main+0x114>)
 8001abc:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(uint16_t), &myQue_attributes);
 8001abe:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <main+0x118>)
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	2010      	movs	r0, #16
 8001ac4:	f00b ff36 	bl	800d934 <osMessageQueueNew>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <main+0x11c>)
 8001acc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <main+0x120>)
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4813      	ldr	r0, [pc, #76]	; (8001b20 <main+0x124>)
 8001ad4:	f00b fcc4 	bl	800d460 <osThreadNew>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <main+0x128>)
 8001adc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ade:	f00b fc99 	bl	800d414 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f003 fc18 	bl	8005318 <HAL_Delay>
 8001ae8:	e7fb      	b.n	8001ae2 <main+0xe6>
 8001aea:	bf00      	nop
 8001aec:	20000068 	.word	0x20000068
 8001af0:	40020800 	.word	0x40020800
 8001af4:	40020c00 	.word	0x40020c00
 8001af8:	20000070 	.word	0x20000070
 8001afc:	20000074 	.word	0x20000074
 8001b00:	200014a0 	.word	0x200014a0
 8001b04:	20000064 	.word	0x20000064
 8001b08:	200014a6 	.word	0x200014a6
 8001b0c:	08014934 	.word	0x08014934
 8001b10:	2000048c 	.word	0x2000048c
 8001b14:	0801491c 	.word	0x0801491c
 8001b18:	20000488 	.word	0x20000488
 8001b1c:	080148f8 	.word	0x080148f8
 8001b20:	08003579 	.word	0x08003579
 8001b24:	20000484 	.word	0x20000484

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b094      	sub	sp, #80	; 0x50
 8001b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2e:	f107 0320 	add.w	r3, r7, #32
 8001b32:	2230      	movs	r2, #48	; 0x30
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f00f fa3e 	bl	8010fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <SystemClock_Config+0xcc>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <SystemClock_Config+0xcc>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <SystemClock_Config+0xcc>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <SystemClock_Config+0xd0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <SystemClock_Config+0xd0>)
 8001b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <SystemClock_Config+0xd0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b9c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ba0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 fc12 	bl	80063d8 <HAL_RCC_OscConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001bba:	f002 fc27 	bl	800440c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001bca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2105      	movs	r1, #5
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f004 fe73 	bl	80068c8 <HAL_RCC_ClockConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001be8:	f002 fc10 	bl	800440c <Error_Handler>
  }
}
 8001bec:	bf00      	nop
 8001bee:	3750      	adds	r7, #80	; 0x50
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40007000 	.word	0x40007000

08001bfc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c10:	2300      	movs	r3, #0
 8001c12:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <MX_RTC_Init+0xac>)
 8001c16:	4a25      	ldr	r2, [pc, #148]	; (8001cac <MX_RTC_Init+0xb0>)
 8001c18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <MX_RTC_Init+0xac>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <MX_RTC_Init+0xac>)
 8001c22:	227f      	movs	r2, #127	; 0x7f
 8001c24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <MX_RTC_Init+0xac>)
 8001c28:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001c2c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <MX_RTC_Init+0xac>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_RTC_Init+0xac>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <MX_RTC_Init+0xac>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c40:	4819      	ldr	r0, [pc, #100]	; (8001ca8 <MX_RTC_Init+0xac>)
 8001c42:	f005 f975 	bl	8006f30 <HAL_RTC_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001c4c:	f002 fbde 	bl	800440c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8001c50:	2315      	movs	r3, #21
 8001c52:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8001c54:	2334      	movs	r3, #52	; 0x34
 8001c56:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8001c58:	230c      	movs	r3, #12
 8001c5a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2200      	movs	r2, #0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480f      	ldr	r0, [pc, #60]	; (8001ca8 <MX_RTC_Init+0xac>)
 8001c6c:	f005 f9d6 	bl	800701c <HAL_RTC_SetTime>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001c76:	f002 fbc9 	bl	800440c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_RTC_Init+0xac>)
 8001c92:	f005 fabb 	bl	800720c <HAL_RTC_SetDate>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001c9c:	f002 fbb6 	bl	800440c <Error_Handler>

  //set_Date(epoch);

  /* USER CODE END RTC_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000280 	.word	0x20000280
 8001cac:	40002800 	.word	0x40002800

08001cb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <MX_SPI1_Init+0x68>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001cfc:	220a      	movs	r2, #10
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_SPI1_Init+0x64>)
 8001d02:	f005 fc13 	bl	800752c <HAL_SPI_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d0c:	f002 fb7e 	bl	800440c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200002a0 	.word	0x200002a0
 8001d18:	40013000 	.word	0x40013000

08001d1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d30:	463b      	mov	r3, r7
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d42:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001d46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d50:	22f9      	movs	r2, #249	; 0xf9
 8001d52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d60:	4813      	ldr	r0, [pc, #76]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d62:	f006 f8d3 	bl	8007f0c <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d6c:	f002 fb4e 	bl	800440c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d7e:	f006 fa8d 	bl	800829c <HAL_TIM_ConfigClockSource>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d88:	f002 fb40 	bl	800440c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d9a:	f006 fca9 	bl	80086f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001da4:	f002 fb32 	bl	800440c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000358 	.word	0x20000358

08001db4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_USART3_UART_Init+0x4c>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <MX_USART3_UART_Init+0x50>)
 8001dbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <MX_USART3_UART_Init+0x4c>)
 8001dc0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001dc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <MX_USART3_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <MX_USART3_UART_Init+0x4c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <MX_USART3_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <MX_USART3_UART_Init+0x4c>)
 8001dda:	220c      	movs	r2, #12
 8001ddc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <MX_USART3_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <MX_USART3_UART_Init+0x4c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_USART3_UART_Init+0x4c>)
 8001dec:	f006 fd10 	bl	8008810 <HAL_UART_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001df6:	f002 fb09 	bl	800440c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200003a0 	.word	0x200003a0
 8001e04:	40004800 	.word	0x40004800

08001e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <MX_DMA_Init+0x68>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <MX_DMA_Init+0x68>)
 8001e18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <MX_DMA_Init+0x68>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <MX_DMA_Init+0x68>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <MX_DMA_Init+0x68>)
 8001e34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <MX_DMA_Init+0x68>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2105      	movs	r1, #5
 8001e4a:	200e      	movs	r0, #14
 8001e4c:	f003 fb40 	bl	80054d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e50:	200e      	movs	r0, #14
 8001e52:	f003 fb59 	bl	8005508 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2103      	movs	r1, #3
 8001e5a:	203b      	movs	r0, #59	; 0x3b
 8001e5c:	f003 fb38 	bl	80054d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001e60:	203b      	movs	r0, #59	; 0x3b
 8001e62:	f003 fb51 	bl	8005508 <HAL_NVIC_EnableIRQ>

}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800

08001e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	; 0x30
 8001e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	4b48      	ldr	r3, [pc, #288]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a47      	ldr	r2, [pc, #284]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b45      	ldr	r3, [pc, #276]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a40      	ldr	r2, [pc, #256]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b3e      	ldr	r3, [pc, #248]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a39      	ldr	r2, [pc, #228]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001ecc:	f043 0310 	orr.w	r3, r3, #16
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a32      	ldr	r2, [pc, #200]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <MX_GPIO_Init+0x13c>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	210e      	movs	r1, #14
 8001f36:	481f      	ldr	r0, [pc, #124]	; (8001fb4 <MX_GPIO_Init+0x140>)
 8001f38:	f004 f892 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f42:	481d      	ldr	r0, [pc, #116]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001f44:	f004 f88c 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2180      	movs	r1, #128	; 0x80
 8001f4c:	481b      	ldr	r0, [pc, #108]	; (8001fbc <MX_GPIO_Init+0x148>)
 8001f4e:	f004 f887 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 8001f52:	230e      	movs	r3, #14
 8001f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f56:	2301      	movs	r3, #1
 8001f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <MX_GPIO_Init+0x140>)
 8001f6a:	f003 fedd 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 8001f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	4619      	mov	r1, r3
 8001f86:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001f88:	f003 fece 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f94:	2302      	movs	r3, #2
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4806      	ldr	r0, [pc, #24]	; (8001fbc <MX_GPIO_Init+0x148>)
 8001fa4:	f003 fec0 	bl	8005d28 <HAL_GPIO_Init>

}
 8001fa8:	bf00      	nop
 8001faa:	3730      	adds	r7, #48	; 0x30
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020c00 	.word	0x40020c00
 8001fbc:	40020800 	.word	0x40020800

08001fc0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 8001fc6:	4b32      	ldr	r3, [pc, #200]	; (8002090 <MX_FSMC_Init+0xd0>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8001fda:	463b      	mov	r3, r7
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <MX_FSMC_Init+0xd4>)
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <MX_FSMC_Init+0xd8>)
 8001fea:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001fec:	4b29      	ldr	r3, [pc, #164]	; (8002094 <MX_FSMC_Init+0xd4>)
 8001fee:	2210      	movs	r2, #16
 8001ff0:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <MX_FSMC_Init+0xd4>)
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <MX_FSMC_Init+0xd4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <MX_FSMC_Init+0xd4>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_512BYTE;
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <MX_FSMC_Init+0xd4>)
 8002006:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800200a:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <MX_FSMC_Init+0xd4>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <MX_FSMC_Init+0xd4>)
 8002014:	2200      	movs	r2, #0
 8002016:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <MX_FSMC_Init+0xd4>)
 800201a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800201e:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 64;//16;
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <MX_FSMC_Init+0xd4>)
 8002022:	2240      	movs	r2, #64	; 0x40
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 64;//131072;
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_FSMC_Init+0xd4>)
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <MX_FSMC_Init+0xd4>)
 800202e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_FSMC_Init+0xd4>)
 8002036:	2201      	movs	r2, #1
 8002038:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 1024;//134217728;
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <MX_FSMC_Init+0xd4>)
 800203c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002040:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_FSMC_Init+0xd4>)
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800204a:	23fc      	movs	r3, #252	; 0xfc
 800204c:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 800204e:	23fc      	movs	r3, #252	; 0xfc
 8002050:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 8002052:	23fc      	movs	r3, #252	; 0xfc
 8002054:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 8002056:	23fc      	movs	r3, #252	; 0xfc
 8002058:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 800205a:	23fc      	movs	r3, #252	; 0xfc
 800205c:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 800205e:	23fc      	movs	r3, #252	; 0xfc
 8002060:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 8002062:	23fc      	movs	r3, #252	; 0xfc
 8002064:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 8002066:	23fc      	movs	r3, #252	; 0xfc
 8002068:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800206a:	463a      	mov	r2, r7
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	4619      	mov	r1, r3
 8002072:	4808      	ldr	r0, [pc, #32]	; (8002094 <MX_FSMC_Init+0xd4>)
 8002074:	f004 f827 	bl	80060c6 <HAL_NAND_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 800207e:	f002 f9c5 	bl	800440c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */


  io_nand_init(&hnand1);
 8002082:	4804      	ldr	r0, [pc, #16]	; (8002094 <MX_FSMC_Init+0xd4>)
 8002084:	f7fe fe0a 	bl	8000c9c <io_nand_init>


  /* USER CODE END FSMC_Init 2 */
}
 8002088:	bf00      	nop
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200014c4 	.word	0x200014c4
 8002094:	20000444 	.word	0x20000444
 8002098:	a0000060 	.word	0xa0000060

0800209c <pageIsEmpty>:

/* USER CODE BEGIN 4 */

//-------------------------------------------------------------------------------------------
bool pageIsEmpty(uint32_t page)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
bool ret = false;
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]

	io_nand_read(page, rdBuf, chipConf.PageSize, 0)	;
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <pageIsEmpty+0x5c>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2300      	movs	r3, #0
 80020ae:	4913      	ldr	r1, [pc, #76]	; (80020fc <pageIsEmpty+0x60>)
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff fc13 	bl	80018dc <io_nand_read>
	if (!(devError & devNAND)) {
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <pageIsEmpty+0x64>)
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d115      	bne.n	80020ee <pageIsEmpty+0x52>
		ret = true;
 80020c2:	2301      	movs	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	e00b      	b.n	80020e4 <pageIsEmpty+0x48>
			if (*(uint8_t *)(rdBuf + i) != EMPTY) {
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <pageIsEmpty+0x60>)
 80020d0:	4413      	add	r3, r2
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2bff      	cmp	r3, #255	; 0xff
 80020d6:	d002      	beq.n	80020de <pageIsEmpty+0x42>
				ret = false;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
				break;
 80020dc:	e007      	b.n	80020ee <pageIsEmpty+0x52>
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	3301      	adds	r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <pageIsEmpty+0x5c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d3ee      	bcc.n	80020cc <pageIsEmpty+0x30>
			}
		}
	}

	return ret;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200014d0 	.word	0x200014d0
 80020fc:	200014e8 	.word	0x200014e8
 8002100:	20000490 	.word	0x20000490

08002104 <fsErrName>:
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#ifdef SET_FAT_FS

static char *fsErrName(int fr)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	switch (fr) {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b13      	cmp	r3, #19
 8002110:	d850      	bhi.n	80021b4 <fsErrName+0xb0>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <fsErrName+0x14>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002169 	.word	0x08002169
 800211c:	0800216d 	.word	0x0800216d
 8002120:	08002171 	.word	0x08002171
 8002124:	08002175 	.word	0x08002175
 8002128:	08002179 	.word	0x08002179
 800212c:	0800217d 	.word	0x0800217d
 8002130:	08002181 	.word	0x08002181
 8002134:	08002185 	.word	0x08002185
 8002138:	08002185 	.word	0x08002185
 800213c:	08002189 	.word	0x08002189
 8002140:	0800218d 	.word	0x0800218d
 8002144:	08002191 	.word	0x08002191
 8002148:	08002195 	.word	0x08002195
 800214c:	08002199 	.word	0x08002199
 8002150:	0800219d 	.word	0x0800219d
 8002154:	080021a1 	.word	0x080021a1
 8002158:	080021a5 	.word	0x080021a5
 800215c:	080021a9 	.word	0x080021a9
 8002160:	080021ad 	.word	0x080021ad
 8002164:	080021b1 	.word	0x080021b1
		case FR_OK:				// (0) Succeeded
			return "Succeeded";
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <fsErrName+0xc0>)
 800216a:	e024      	b.n	80021b6 <fsErrName+0xb2>
		case FR_DISK_ERR://			(1) A hard error occurred in the low level disk I/O layer
			return "Error disk I/O";
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <fsErrName+0xc4>)
 800216e:	e022      	b.n	80021b6 <fsErrName+0xb2>
		case FR_INT_ERR://			(2) Assertion failed
			return "Assertion failed";
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <fsErrName+0xc8>)
 8002172:	e020      	b.n	80021b6 <fsErrName+0xb2>
		case FR_NOT_READY://		(3) The physical drive cannot work
			return "Drive not ready";
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <fsErrName+0xcc>)
 8002176:	e01e      	b.n	80021b6 <fsErrName+0xb2>
		case FR_NO_FILE://			(4) Could not find the file
			return "No file";
 8002178:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <fsErrName+0xd0>)
 800217a:	e01c      	b.n	80021b6 <fsErrName+0xb2>
		case FR_NO_PATH://			(5) Could not find the path
			return "No path";
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <fsErrName+0xd4>)
 800217e:	e01a      	b.n	80021b6 <fsErrName+0xb2>
		case FR_INVALID_NAME://		(6) The path name format is invalid
			return "Path error";
 8002180:	4b16      	ldr	r3, [pc, #88]	; (80021dc <fsErrName+0xd8>)
 8002182:	e018      	b.n	80021b6 <fsErrName+0xb2>
		case FR_DENIED://			(7) Access denied due to prohibited access or directory full
		case FR_EXIST://			(8) Access denied due to prohibited access
			return "Access denied";
 8002184:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <fsErrName+0xdc>)
 8002186:	e016      	b.n	80021b6 <fsErrName+0xb2>
		case FR_INVALID_OBJECT://	(9) The file/directory object is invalid
			return "Invalid file/dir";
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <fsErrName+0xe0>)
 800218a:	e014      	b.n	80021b6 <fsErrName+0xb2>
		case FR_WRITE_PROTECTED://	(10) The physical drive is write protected
			return "Write protected";
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <fsErrName+0xe4>)
 800218e:	e012      	b.n	80021b6 <fsErrName+0xb2>
		case FR_INVALID_DRIVE://	(11) The logical drive number is invalid
			return "Invalid drive number";
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <fsErrName+0xe8>)
 8002192:	e010      	b.n	80021b6 <fsErrName+0xb2>
		case FR_NOT_ENABLED://		(12) The volume has no work area
			return "Volume no area";
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <fsErrName+0xec>)
 8002196:	e00e      	b.n	80021b6 <fsErrName+0xb2>
		case FR_NO_FILESYSTEM://	(13) There is no valid FAT volume
			return "Volume has't filesystem";
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <fsErrName+0xf0>)
 800219a:	e00c      	b.n	80021b6 <fsErrName+0xb2>
		case FR_MKFS_ABORTED://		(14) The f_mkfs() aborted due to any problem
			return "f_mkfs() aborted";
 800219c:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <fsErrName+0xf4>)
 800219e:	e00a      	b.n	80021b6 <fsErrName+0xb2>
		case FR_TIMEOUT://			(15) Could not get a grant to access the volume within defined period
			return "Timeout access";
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <fsErrName+0xf8>)
 80021a2:	e008      	b.n	80021b6 <fsErrName+0xb2>
		case FR_LOCKED://			(16) The operation is rejected according to the file sharing policy
			return "File locked";
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <fsErrName+0xfc>)
 80021a6:	e006      	b.n	80021b6 <fsErrName+0xb2>
		case FR_NOT_ENOUGH_CORE://	(17) LFN working buffer could not be allocated
			return "Allocated buf error";
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <fsErrName+0x100>)
 80021aa:	e004      	b.n	80021b6 <fsErrName+0xb2>
		case FR_TOO_MANY_OPEN_FILES://	(18) Number of open files > _FS_LOCK
			return "Open file limit";
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <fsErrName+0x104>)
 80021ae:	e002      	b.n	80021b6 <fsErrName+0xb2>
		case FR_INVALID_PARAMETER://	(19) Given parameter is invalid
			return "Invalid parameter";
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <fsErrName+0x108>)
 80021b2:	e000      	b.n	80021b6 <fsErrName+0xb2>
	}
	return "Unknown error";
 80021b4:	4b16      	ldr	r3, [pc, #88]	; (8002210 <fsErrName+0x10c>)
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	08011d80 	.word	0x08011d80
 80021c8:	08011d8c 	.word	0x08011d8c
 80021cc:	08011d9c 	.word	0x08011d9c
 80021d0:	08011db0 	.word	0x08011db0
 80021d4:	08011dc0 	.word	0x08011dc0
 80021d8:	08011dc8 	.word	0x08011dc8
 80021dc:	08011dd0 	.word	0x08011dd0
 80021e0:	08011ddc 	.word	0x08011ddc
 80021e4:	08011dec 	.word	0x08011dec
 80021e8:	08011e00 	.word	0x08011e00
 80021ec:	08011e10 	.word	0x08011e10
 80021f0:	08011e28 	.word	0x08011e28
 80021f4:	08011e38 	.word	0x08011e38
 80021f8:	08011e50 	.word	0x08011e50
 80021fc:	08011e64 	.word	0x08011e64
 8002200:	08011e74 	.word	0x08011e74
 8002204:	08011e80 	.word	0x08011e80
 8002208:	08011e94 	.word	0x08011e94
 800220c:	08011ea4 	.word	0x08011ea4
 8002210:	08011eb8 	.word	0x08011eb8

08002214 <attrName>:
//------------------------------------------------------------------------------------------
static char *attrName(uint8_t attr)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
	switch (attr) {
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	3b01      	subs	r3, #1
 8002222:	2b1f      	cmp	r3, #31
 8002224:	d84c      	bhi.n	80022c0 <attrName+0xac>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <attrName+0x18>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	080022ad 	.word	0x080022ad
 8002230:	080022b1 	.word	0x080022b1
 8002234:	080022c1 	.word	0x080022c1
 8002238:	080022b5 	.word	0x080022b5
 800223c:	080022c1 	.word	0x080022c1
 8002240:	080022c1 	.word	0x080022c1
 8002244:	080022c1 	.word	0x080022c1
 8002248:	080022c1 	.word	0x080022c1
 800224c:	080022c1 	.word	0x080022c1
 8002250:	080022c1 	.word	0x080022c1
 8002254:	080022c1 	.word	0x080022c1
 8002258:	080022c1 	.word	0x080022c1
 800225c:	080022c1 	.word	0x080022c1
 8002260:	080022c1 	.word	0x080022c1
 8002264:	080022c1 	.word	0x080022c1
 8002268:	080022b9 	.word	0x080022b9
 800226c:	080022c1 	.word	0x080022c1
 8002270:	080022c1 	.word	0x080022c1
 8002274:	080022c1 	.word	0x080022c1
 8002278:	080022c1 	.word	0x080022c1
 800227c:	080022c1 	.word	0x080022c1
 8002280:	080022c1 	.word	0x080022c1
 8002284:	080022c1 	.word	0x080022c1
 8002288:	080022c1 	.word	0x080022c1
 800228c:	080022c1 	.word	0x080022c1
 8002290:	080022c1 	.word	0x080022c1
 8002294:	080022c1 	.word	0x080022c1
 8002298:	080022c1 	.word	0x080022c1
 800229c:	080022c1 	.word	0x080022c1
 80022a0:	080022c1 	.word	0x080022c1
 80022a4:	080022c1 	.word	0x080022c1
 80022a8:	080022bd 	.word	0x080022bd
		case AM_RDO://	0x01	/* Read only */
			return "Read only";
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <attrName+0xbc>)
 80022ae:	e008      	b.n	80022c2 <attrName+0xae>
		case AM_HID://	0x02	/* Hidden */
			return "Hidden";
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <attrName+0xc0>)
 80022b2:	e006      	b.n	80022c2 <attrName+0xae>
		case AM_SYS://	0x04	/* System */
			return "System";
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <attrName+0xc4>)
 80022b6:	e004      	b.n	80022c2 <attrName+0xae>
		case AM_DIR://	0x10	/* Directory */
			return "Directory";
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <attrName+0xc8>)
 80022ba:	e002      	b.n	80022c2 <attrName+0xae>
		case AM_ARC://	0x20	/* Archive */
			return "Archive";
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <attrName+0xcc>)
 80022be:	e000      	b.n	80022c2 <attrName+0xae>
		default : return "Unknown";
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <attrName+0xd0>)
	}
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	08011ec8 	.word	0x08011ec8
 80022d4:	08011ed4 	.word	0x08011ed4
 80022d8:	08011edc 	.word	0x08011edc
 80022dc:	08011ee4 	.word	0x08011ee4
 80022e0:	08011ef0 	.word	0x08011ef0
 80022e4:	08011ef8 	.word	0x08011ef8

080022e8 <drvMount>:
//------------------------------------------------------------------------------------------
bool drvMount(const char *path)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af04      	add	r7, sp, #16
 80022ee:	6078      	str	r0, [r7, #4]
bool ret = false;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]
uint8_t lg = dbg;
 80022f4:	4b48      	ldr	r3, [pc, #288]	; (8002418 <drvMount+0x130>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	737b      	strb	r3, [r7, #13]

	FRESULT res = f_mount(&FatFs, path, 1);
 80022fa:	2201      	movs	r2, #1
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4847      	ldr	r0, [pc, #284]	; (800241c <drvMount+0x134>)
 8002300:	f009 fbc4 	bl	800ba8c <f_mount>
 8002304:	4603      	mov	r3, r0
 8002306:	73bb      	strb	r3, [r7, #14]
	if (res == FR_NO_FILESYSTEM) {
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	2b0d      	cmp	r3, #13
 800230c:	d155      	bne.n	80023ba <drvMount+0xd2>
		if (lg > logOff) Report(1, "[%s] Mount drive '%.*s' error #%u (%s)%s", __func__, sizeof(path), path, res, fsErrName(res), eol);
 800230e:	7b7b      	ldrb	r3, [r7, #13]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d012      	beq.n	800233a <drvMount+0x52>
 8002314:	7bbc      	ldrb	r4, [r7, #14]
 8002316:	7bbb      	ldrb	r3, [r7, #14]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fef3 	bl	8002104 <fsErrName>
 800231e:	4602      	mov	r2, r0
 8002320:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <drvMount+0x138>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	9303      	str	r3, [sp, #12]
 8002326:	9202      	str	r2, [sp, #8]
 8002328:	9401      	str	r4, [sp, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	2304      	movs	r3, #4
 8002330:	4a3c      	ldr	r2, [pc, #240]	; (8002424 <drvMount+0x13c>)
 8002332:	493d      	ldr	r1, [pc, #244]	; (8002428 <drvMount+0x140>)
 8002334:	2001      	movs	r0, #1
 8002336:	f000 fd39 	bl	8002dac <Report>
		res = f_mkfs(path, FM_FAT, io_nand_get_block_size() * io_nand_get_page_size(), fs_work, sizeof(fs_work));
 800233a:	f7fe fd1f 	bl	8000d7c <io_nand_get_block_size>
 800233e:	4604      	mov	r4, r0
 8002340:	f7fe fd04 	bl	8000d4c <io_nand_get_page_size>
 8002344:	4603      	mov	r3, r0
 8002346:	fb03 f204 	mul.w	r2, r3, r4
 800234a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <drvMount+0x144>)
 8002352:	2101      	movs	r1, #1
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f00a fa49 	bl	800c7ec <f_mkfs>
 800235a:	4603      	mov	r3, r0
 800235c:	73bb      	strb	r3, [r7, #14]
		if (!res) {
 800235e:	7bbb      	ldrb	r3, [r7, #14]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d115      	bne.n	8002390 <drvMount+0xa8>
			if (lg > logOff) Report(1, "[%s] Make FAT fs on drive '%.*s' OK%s", __func__, sizeof(path), path, eol);
 8002364:	7b7b      	ldrb	r3, [r7, #13]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <drvMount+0x98>
 800236a:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <drvMount+0x138>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2304      	movs	r3, #4
 8002376:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <drvMount+0x13c>)
 8002378:	492d      	ldr	r1, [pc, #180]	; (8002430 <drvMount+0x148>)
 800237a:	2001      	movs	r0, #1
 800237c:	f000 fd16 	bl	8002dac <Report>
			res = f_mount(&FatFs, path, 1);
 8002380:	2201      	movs	r2, #1
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4825      	ldr	r0, [pc, #148]	; (800241c <drvMount+0x134>)
 8002386:	f009 fb81 	bl	800ba8c <f_mount>
 800238a:	4603      	mov	r3, r0
 800238c:	73bb      	strb	r3, [r7, #14]
 800238e:	e014      	b.n	80023ba <drvMount+0xd2>
    	} else {
    		if (lg > logOff) Report(1, "[%s] Make FAT fs error #%u (%s)%s", __func__, res, fsErrName(res), eol);
 8002390:	7b7b      	ldrb	r3, [r7, #13]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00f      	beq.n	80023b6 <drvMount+0xce>
 8002396:	7bbc      	ldrb	r4, [r7, #14]
 8002398:	7bbb      	ldrb	r3, [r7, #14]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff feb2 	bl	8002104 <fsErrName>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <drvMount+0x138>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	9200      	str	r2, [sp, #0]
 80023aa:	4623      	mov	r3, r4
 80023ac:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <drvMount+0x13c>)
 80023ae:	4921      	ldr	r1, [pc, #132]	; (8002434 <drvMount+0x14c>)
 80023b0:	2001      	movs	r0, #1
 80023b2:	f000 fcfb 	bl	8002dac <Report>
    		return ret;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	e02a      	b.n	8002410 <drvMount+0x128>
    	}
	}

	if (!res) {
 80023ba:	7bbb      	ldrb	r3, [r7, #14]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d110      	bne.n	80023e2 <drvMount+0xfa>
		ret = true;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
		if (lg > logOff) Report(1, "[%s] Mount drive '%.*s' OK%s", __func__, sizeof(path), path, eol);
 80023c4:	7b7b      	ldrb	r3, [r7, #13]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d021      	beq.n	800240e <drvMount+0x126>
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <drvMount+0x138>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2304      	movs	r3, #4
 80023d6:	4a13      	ldr	r2, [pc, #76]	; (8002424 <drvMount+0x13c>)
 80023d8:	4917      	ldr	r1, [pc, #92]	; (8002438 <drvMount+0x150>)
 80023da:	2001      	movs	r0, #1
 80023dc:	f000 fce6 	bl	8002dac <Report>
 80023e0:	e015      	b.n	800240e <drvMount+0x126>
	} else {
		if (lg > logOff) Report(1, "[%s] Mount drive '%.*s' error #%u (%s)%s", __func__, sizeof(path), path, res, fsErrName(res), eol);
 80023e2:	7b7b      	ldrb	r3, [r7, #13]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d012      	beq.n	800240e <drvMount+0x126>
 80023e8:	7bbc      	ldrb	r4, [r7, #14]
 80023ea:	7bbb      	ldrb	r3, [r7, #14]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fe89 	bl	8002104 <fsErrName>
 80023f2:	4602      	mov	r2, r0
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <drvMount+0x138>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	9303      	str	r3, [sp, #12]
 80023fa:	9202      	str	r2, [sp, #8]
 80023fc:	9401      	str	r4, [sp, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2304      	movs	r3, #4
 8002404:	4a07      	ldr	r2, [pc, #28]	; (8002424 <drvMount+0x13c>)
 8002406:	4908      	ldr	r1, [pc, #32]	; (8002428 <drvMount+0x140>)
 8002408:	2001      	movs	r0, #1
 800240a:	f000 fccf 	bl	8002dac <Report>
	}


	return ret;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	20000068 	.word	0x20000068
 800241c:	20002cec 	.word	0x20002cec
 8002420:	20000004 	.word	0x20000004
 8002424:	08014944 	.word	0x08014944
 8002428:	08011f00 	.word	0x08011f00
 800242c:	20003554 	.word	0x20003554
 8002430:	08011f2c 	.word	0x08011f2c
 8002434:	08011f54 	.word	0x08011f54
 8002438:	08011f78 	.word	0x08011f78

0800243c <dirList>:
//--------------------------------------------------------------------------------------------------------
bool dirList(const char *name_dir, DIR *dir)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b091      	sub	sp, #68	; 0x44
 8002440:	af04      	add	r7, sp, #16
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
bool ret = false;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
uint8_t lg = dbg;
 800244c:	4b49      	ldr	r3, [pc, #292]	; (8002574 <dirList+0x138>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	FRESULT res = f_opendir(dir, name_dir);
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	6838      	ldr	r0, [r7, #0]
 8002458:	f00a f90b 	bl	800c672 <f_opendir>
 800245c:	4603      	mov	r3, r0
 800245e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if (res == FR_OK) {
 8002462:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002466:	2b00      	cmp	r3, #0
 8002468:	d15d      	bne.n	8002526 <dirList+0xea>
		FILINFO fno;
		int cnt = -1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (lg > logOff) Report(1, "[%s] Read folder '%s':%s", __func__, name_dir, eol);
 8002470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <dirList+0x4e>
 8002478:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <dirList+0x13c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a3e      	ldr	r2, [pc, #248]	; (800257c <dirList+0x140>)
 8002482:	493f      	ldr	r1, [pc, #252]	; (8002580 <dirList+0x144>)
 8002484:	2001      	movs	r0, #1
 8002486:	f000 fc91 	bl	8002dac <Report>
		for (;;) {
			res = f_readdir(dir, &fno);
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	4619      	mov	r1, r3
 8002490:	6838      	ldr	r0, [r7, #0]
 8002492:	f00a f967 	bl	800c764 <f_readdir>
 8002496:	4603      	mov	r3, r0
 8002498:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			cnt++;
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	3301      	adds	r3, #1
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
			if (res || fno.fname[0] == 0) {
 80024a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <dirList+0x74>
 80024aa:	7d7b      	ldrb	r3, [r7, #21]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10e      	bne.n	80024ce <dirList+0x92>
				if (!cnt) {
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d14f      	bne.n	8002556 <dirList+0x11a>
					if (lg > logOff) Report(0, "\tFolder '%s' is empty%s", name_dir, eol);
 80024b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d04b      	beq.n	8002556 <dirList+0x11a>
 80024be:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <dirList+0x13c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	492f      	ldr	r1, [pc, #188]	; (8002584 <dirList+0x148>)
 80024c6:	2000      	movs	r0, #0
 80024c8:	f000 fc70 	bl	8002dac <Report>
				}
				break;
 80024cc:	e043      	b.n	8002556 <dirList+0x11a>
			} else if (fno.fattrib & AM_DIR) {// It is a directory
 80024ce:	7d3b      	ldrb	r3, [r7, #20]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00f      	beq.n	80024f8 <dirList+0xbc>
				if (lg > logOff) Report(0, "\tIt is folder -> '%s'%s", fno.fname, eol);
 80024d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0d4      	beq.n	800248a <dirList+0x4e>
 80024e0:	4b25      	ldr	r3, [pc, #148]	; (8002578 <dirList+0x13c>)
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	f103 0209 	add.w	r2, r3, #9
 80024ec:	460b      	mov	r3, r1
 80024ee:	4926      	ldr	r1, [pc, #152]	; (8002588 <dirList+0x14c>)
 80024f0:	2000      	movs	r0, #0
 80024f2:	f000 fc5b 	bl	8002dac <Report>
 80024f6:	e7c8      	b.n	800248a <dirList+0x4e>
			} else {// It is a file.
				if (lg > logOff) Report(0, "\tname:%s, size:%u bytes, attr:%s%s",
 80024f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0c4      	beq.n	800248a <dirList+0x4e>
 8002500:	68fc      	ldr	r4, [r7, #12]
 8002502:	7d3b      	ldrb	r3, [r7, #20]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fe85 	bl	8002214 <attrName>
 800250a:	4601      	mov	r1, r0
 800250c:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <dirList+0x13c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f107 020c 	add.w	r2, r7, #12
 8002514:	3209      	adds	r2, #9
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	9100      	str	r1, [sp, #0]
 800251a:	4623      	mov	r3, r4
 800251c:	491b      	ldr	r1, [pc, #108]	; (800258c <dirList+0x150>)
 800251e:	2000      	movs	r0, #0
 8002520:	f000 fc44 	bl	8002dac <Report>
			res = f_readdir(dir, &fno);
 8002524:	e7b1      	b.n	800248a <dirList+0x4e>
							attrName(fno.fattrib),
							eol);
			}
		}
	} else {
		if (lg > logOff) Report(1, "[%s] Read folder '%s' error #%u (%s)%s", __func__, name_dir, res, fsErrName(res), eol);
 8002526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800252a:	2b00      	cmp	r3, #0
 800252c:	d014      	beq.n	8002558 <dirList+0x11c>
 800252e:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 8002532:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fde4 	bl	8002104 <fsErrName>
 800253c:	4602      	mov	r2, r0
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <dirList+0x13c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	9201      	str	r2, [sp, #4]
 8002546:	9400      	str	r4, [sp, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a0c      	ldr	r2, [pc, #48]	; (800257c <dirList+0x140>)
 800254c:	4910      	ldr	r1, [pc, #64]	; (8002590 <dirList+0x154>)
 800254e:	2001      	movs	r0, #1
 8002550:	f000 fc2c 	bl	8002dac <Report>
 8002554:	e000      	b.n	8002558 <dirList+0x11c>
				break;
 8002556:	bf00      	nop
	}
	if (res == FR_OK) ret = true;
 8002558:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <dirList+0x12a>
 8002560:	2301      	movs	r3, #1
 8002562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	return ret;
 8002566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800256a:	4618      	mov	r0, r3
 800256c:	3734      	adds	r7, #52	; 0x34
 800256e:	46bd      	mov	sp, r7
 8002570:	bd90      	pop	{r4, r7, pc}
 8002572:	bf00      	nop
 8002574:	20000068 	.word	0x20000068
 8002578:	20000004 	.word	0x20000004
 800257c:	08014950 	.word	0x08014950
 8002580:	08011f98 	.word	0x08011f98
 8002584:	08011fb4 	.word	0x08011fb4
 8002588:	08011fcc 	.word	0x08011fcc
 800258c:	08011fe4 	.word	0x08011fe4
 8002590:	08012008 	.word	0x08012008

08002594 <wrFile>:
		devError |= devFS;
	}
}
//--------------------------------------------------------------------------------------------------------
void wrFile(const char *name, char *text, bool update)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	f6ad 0de4 	subw	sp, sp, #2276	; 0x8e4
 800259a:	af04      	add	r7, sp, #16
 800259c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80025a0:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 80025a4:	6018      	str	r0, [r3, #0]
 80025a6:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80025aa:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 80025ae:	6019      	str	r1, [r3, #0]
 80025b0:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80025b4:	f6a3 03c9 	subw	r3, r3, #2249	; 0x8c9
 80025b8:	701a      	strb	r2, [r3, #0]
char tmp[128];
FIL fp;
FRESULT res = FR_NO_FILE;
 80025ba:	2304      	movs	r3, #4
 80025bc:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
uint8_t lg = dbg;
 80025c0:	4b62      	ldr	r3, [pc, #392]	; (800274c <wrFile+0x1b8>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	f887 38ce 	strb.w	r3, [r7, #2254]	; 0x8ce

	sprintf(tmp, "/%s", cfg);
 80025c8:	4b61      	ldr	r3, [pc, #388]	; (8002750 <wrFile+0x1bc>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	f607 0344 	addw	r3, r7, #2116	; 0x844
 80025d0:	4960      	ldr	r1, [pc, #384]	; (8002754 <wrFile+0x1c0>)
 80025d2:	4618      	mov	r0, r3
 80025d4:	f00e fe06 	bl	80111e4 <siprintf>
	if (!update) {
 80025d8:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80025dc:	f6a3 03c9 	subw	r3, r3, #2249	; 0x8c9
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	f083 0301 	eor.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d027      	beq.n	800263c <wrFile+0xa8>
		res = f_open(&fp, tmp, FA_READ);
 80025ec:	f607 0144 	addw	r1, r7, #2116	; 0x844
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2201      	movs	r2, #1
 80025f6:	4618      	mov	r0, r3
 80025f8:	f009 faac 	bl	800bb54 <f_open>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
		if (res == FR_OK) {
 8002602:	f897 38cf 	ldrb.w	r3, [r7, #2255]	; 0x8cf
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <wrFile+0xa8>
			res = f_close(&fp);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4618      	mov	r0, r3
 8002610:	f00a f800 	bl	800c614 <f_close>
 8002614:	4603      	mov	r3, r0
 8002616:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
			if (lg > logOff) Report(1, "[%s] File '%s' allready present and update has't been ordered%s", __func__, tmp, eol);
 800261a:	f897 38ce 	ldrb.w	r3, [r7, #2254]	; 0x8ce
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 808e 	beq.w	8002740 <wrFile+0x1ac>
 8002624:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <wrFile+0x1c4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f607 0244 	addw	r2, r7, #2116	; 0x844
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	4613      	mov	r3, r2
 8002630:	4a4a      	ldr	r2, [pc, #296]	; (800275c <wrFile+0x1c8>)
 8002632:	494b      	ldr	r1, [pc, #300]	; (8002760 <wrFile+0x1cc>)
 8002634:	2001      	movs	r0, #1
 8002636:	f000 fbb9 	bl	8002dac <Report>
 800263a:	e082      	b.n	8002742 <wrFile+0x1ae>
			return;
		}
	}

	res = f_open(&fp, tmp, FA_CREATE_ALWAYS | FA_WRITE);
 800263c:	f607 0144 	addw	r1, r7, #2116	; 0x844
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	220a      	movs	r2, #10
 8002646:	4618      	mov	r0, r3
 8002648:	f009 fa84 	bl	800bb54 <f_open>
 800264c:	4603      	mov	r3, r0
 800264e:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
	if (!res) {
 8002652:	f897 38cf 	ldrb.w	r3, [r7, #2255]	; 0x8cf
 8002656:	2b00      	cmp	r3, #0
 8002658:	d158      	bne.n	800270c <wrFile+0x178>
		if (lg > logOff) Report(1, "[%s] Create new file '%s' OK%s", __func__, tmp, eol);
 800265a:	f897 38ce 	ldrb.w	r3, [r7, #2254]	; 0x8ce
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <wrFile+0xe4>
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <wrFile+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f607 0244 	addw	r2, r7, #2116	; 0x844
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	4a3b      	ldr	r2, [pc, #236]	; (800275c <wrFile+0x1c8>)
 8002670:	493c      	ldr	r1, [pc, #240]	; (8002764 <wrFile+0x1d0>)
 8002672:	2001      	movs	r0, #1
 8002674:	f000 fb9a 	bl	8002dac <Report>
		int wrt = 0, dl = strlen(text);
 8002678:	2300      	movs	r3, #0
 800267a:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
 800267e:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8002682:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	f7fd fda2 	bl	80001d0 <strlen>
 800268c:	4603      	mov	r3, r0
 800268e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

		wrt = f_puts(text, &fp);
 8002692:	f107 0214 	add.w	r2, r7, #20
 8002696:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800269a:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 800269e:	4611      	mov	r1, r2
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	f00a fd83 	bl	800d1ac <f_puts>
 80026a6:	f8c7 08c8 	str.w	r0, [r7, #2248]	; 0x8c8
		if (wrt != dl) {
 80026aa:	f8d7 28c8 	ldr.w	r2, [r7, #2248]	; 0x8c8
 80026ae:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d016      	beq.n	80026e4 <wrFile+0x150>
			devError |= devFS;
 80026b6:	4b2c      	ldr	r3, [pc, #176]	; (8002768 <wrFile+0x1d4>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026be:	b29a      	uxth	r2, r3
 80026c0:	4b29      	ldr	r3, [pc, #164]	; (8002768 <wrFile+0x1d4>)
 80026c2:	801a      	strh	r2, [r3, #0]
			if (lg > logOff) Report(1, "[%s] Error while write file '%s'%s", __func__, tmp, eol);
 80026c4:	f897 38ce 	ldrb.w	r3, [r7, #2254]	; 0x8ce
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d016      	beq.n	80026fa <wrFile+0x166>
 80026cc:	4b22      	ldr	r3, [pc, #136]	; (8002758 <wrFile+0x1c4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f607 0244 	addw	r2, r7, #2116	; 0x844
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	4a20      	ldr	r2, [pc, #128]	; (800275c <wrFile+0x1c8>)
 80026da:	4924      	ldr	r1, [pc, #144]	; (800276c <wrFile+0x1d8>)
 80026dc:	2001      	movs	r0, #1
 80026de:	f000 fb65 	bl	8002dac <Report>
 80026e2:	e00a      	b.n	80026fa <wrFile+0x166>
		} else Report(1, "[%s] File file '%s' write OK%s", __func__, tmp, eol);
 80026e4:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <wrFile+0x1c4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f607 0244 	addw	r2, r7, #2116	; 0x844
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	4a1a      	ldr	r2, [pc, #104]	; (800275c <wrFile+0x1c8>)
 80026f2:	491f      	ldr	r1, [pc, #124]	; (8002770 <wrFile+0x1dc>)
 80026f4:	2001      	movs	r0, #1
 80026f6:	f000 fb59 	bl	8002dac <Report>

		res = f_close(&fp);
 80026fa:	f107 0314 	add.w	r3, r7, #20
 80026fe:	4618      	mov	r0, r3
 8002700:	f009 ff88 	bl	800c614 <f_close>
 8002704:	4603      	mov	r3, r0
 8002706:	f887 38cf 	strb.w	r3, [r7, #2255]	; 0x8cf
 800270a:	e01a      	b.n	8002742 <wrFile+0x1ae>
	} else {
		if (lg > logOff) Report(1, "[%s] Create new file '%s' error #%u (%s)%s", __func__, tmp, res, fsErrName(res), eol);
 800270c:	f897 38ce 	ldrb.w	r3, [r7, #2254]	; 0x8ce
 8002710:	2b00      	cmp	r3, #0
 8002712:	d016      	beq.n	8002742 <wrFile+0x1ae>
 8002714:	f897 48cf 	ldrb.w	r4, [r7, #2255]	; 0x8cf
 8002718:	f897 38cf 	ldrb.w	r3, [r7, #2255]	; 0x8cf
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fcf1 	bl	8002104 <fsErrName>
 8002722:	4601      	mov	r1, r0
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <wrFile+0x1c4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f607 0244 	addw	r2, r7, #2116	; 0x844
 800272c:	9302      	str	r3, [sp, #8]
 800272e:	9101      	str	r1, [sp, #4]
 8002730:	9400      	str	r4, [sp, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	4a09      	ldr	r2, [pc, #36]	; (800275c <wrFile+0x1c8>)
 8002736:	490f      	ldr	r1, [pc, #60]	; (8002774 <wrFile+0x1e0>)
 8002738:	2001      	movs	r0, #1
 800273a:	f000 fb37 	bl	8002dac <Report>
 800273e:	e000      	b.n	8002742 <wrFile+0x1ae>
			return;
 8002740:	bf00      	nop
	}

}
 8002742:	f607 07d4 	addw	r7, r7, #2260	; 0x8d4
 8002746:	46bd      	mov	sp, r7
 8002748:	bd90      	pop	{r4, r7, pc}
 800274a:	bf00      	nop
 800274c:	20000068 	.word	0x20000068
 8002750:	2000009c 	.word	0x2000009c
 8002754:	08012044 	.word	0x08012044
 8002758:	20000004 	.word	0x20000004
 800275c:	08014958 	.word	0x08014958
 8002760:	08012048 	.word	0x08012048
 8002764:	08012088 	.word	0x08012088
 8002768:	20000490 	.word	0x20000490
 800276c:	080120a8 	.word	0x080120a8
 8002770:	080120cc 	.word	0x080120cc
 8002774:	080120ec 	.word	0x080120ec

08002778 <rdFile>:
//--------------------------------------------------------------------------------------------------------
void rdFile(const char *name)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	f6ad 0dc8 	subw	sp, sp, #2248	; 0x8c8
 800277e:	af02      	add	r7, sp, #8
 8002780:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8002784:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8002788:	6018      	str	r0, [r3, #0]
char tmp[128];
FIL fp;
uint8_t lg = dbg;
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <rdFile+0xbc>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	f887 38bf 	strb.w	r3, [r7, #2239]	; 0x8bf

	if (!f_open(&fp, name, FA_READ)) {
 8002792:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8002796:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 800279a:	f107 000c 	add.w	r0, r7, #12
 800279e:	2201      	movs	r2, #1
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	f009 f9d7 	bl	800bb54 <f_open>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d12d      	bne.n	8002808 <rdFile+0x90>
		if (lg != logOff) Report(1, "[%s] File '%s' open for reading OK%s", __func__, name, eol);
 80027ac:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d018      	beq.n	80027e6 <rdFile+0x6e>
 80027b4:	4b20      	ldr	r3, [pc, #128]	; (8002838 <rdFile+0xc0>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80027bc:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 80027c0:	9200      	str	r2, [sp, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1d      	ldr	r2, [pc, #116]	; (800283c <rdFile+0xc4>)
 80027c6:	491e      	ldr	r1, [pc, #120]	; (8002840 <rdFile+0xc8>)
 80027c8:	2001      	movs	r0, #1
 80027ca:	f000 faef 	bl	8002dac <Report>

		while (f_gets(tmp, sizeof(tmp) - 1, &fp) != NULL)
 80027ce:	e00a      	b.n	80027e6 <rdFile+0x6e>
			if (lg != logOff) Report(0, "%s", tmp);
 80027d0:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <rdFile+0x6e>
 80027d8:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 80027dc:	461a      	mov	r2, r3
 80027de:	4919      	ldr	r1, [pc, #100]	; (8002844 <rdFile+0xcc>)
 80027e0:	2000      	movs	r0, #0
 80027e2:	f000 fae3 	bl	8002dac <Report>
		while (f_gets(tmp, sizeof(tmp) - 1, &fp) != NULL)
 80027e6:	f107 020c 	add.w	r2, r7, #12
 80027ea:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 80027ee:	217f      	movs	r1, #127	; 0x7f
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00a fc27 	bl	800d044 <f_gets>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e9      	bne.n	80027d0 <rdFile+0x58>

		f_close(&fp);
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	4618      	mov	r0, r3
 8002802:	f009 ff07 	bl	800c614 <f_close>
	} else {
		if (lg != logOff) Report(1, "[%s] Error while open for reading file '%s'%s", __func__, name, eol);
	}

}
 8002806:	e010      	b.n	800282a <rdFile+0xb2>
		if (lg != logOff) Report(1, "[%s] Error while open for reading file '%s'%s", __func__, name, eol);
 8002808:	f897 38bf 	ldrb.w	r3, [r7, #2239]	; 0x8bf
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00c      	beq.n	800282a <rdFile+0xb2>
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <rdFile+0xc0>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8002818:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 800281c:	9200      	str	r2, [sp, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a06      	ldr	r2, [pc, #24]	; (800283c <rdFile+0xc4>)
 8002822:	4909      	ldr	r1, [pc, #36]	; (8002848 <rdFile+0xd0>)
 8002824:	2001      	movs	r0, #1
 8002826:	f000 fac1 	bl	8002dac <Report>
}
 800282a:	bf00      	nop
 800282c:	f507 670c 	add.w	r7, r7, #2240	; 0x8c0
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000068 	.word	0x20000068
 8002838:	20000004 	.word	0x20000004
 800283c:	08014960 	.word	0x08014960
 8002840:	08012118 	.word	0x08012118
 8002844:	08012140 	.word	0x08012140
 8002848:	08012144 	.word	0x08012144

0800284c <get_qStat>:
//--------------------------------------------------------------------------------------------------------

#endif
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	dc18      	bgt.n	800288c <get_qStat+0x40>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f113 0f06 	cmn.w	r3, #6
 8002860:	db2a      	blt.n	80028b8 <get_qStat+0x6c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3306      	adds	r3, #6
 8002866:	2b06      	cmp	r3, #6
 8002868:	d826      	bhi.n	80028b8 <get_qStat+0x6c>
 800286a:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <get_qStat+0x24>)
 800286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002870:	080028b1 	.word	0x080028b1
 8002874:	080028ad 	.word	0x080028ad
 8002878:	080028a9 	.word	0x080028a9
 800287c:	080028a5 	.word	0x080028a5
 8002880:	080028a1 	.word	0x080028a1
 8002884:	0800289d 	.word	0x0800289d
 8002888:	08002899 	.word	0x08002899
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <get_qStat+0x68>
 8002896:	e00f      	b.n	80028b8 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <get_qStat+0x7c>)
 800289a:	e00e      	b.n	80028ba <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <get_qStat+0x80>)
 800289e:	e00c      	b.n	80028ba <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <get_qStat+0x84>)
 80028a2:	e00a      	b.n	80028ba <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <get_qStat+0x88>)
 80028a6:	e008      	b.n	80028ba <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <get_qStat+0x8c>)
 80028aa:	e006      	b.n	80028ba <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <get_qStat+0x90>)
 80028ae:	e004      	b.n	80028ba <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <get_qStat+0x94>)
 80028b2:	e002      	b.n	80028ba <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <get_qStat+0x98>)
 80028b6:	e000      	b.n	80028ba <get_qStat+0x6e>
	}

	return "UnknownError";
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <get_qStat+0x9c>)
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	08012174 	.word	0x08012174
 80028cc:	0801217c 	.word	0x0801217c
 80028d0:	08012184 	.word	0x08012184
 80028d4:	08012194 	.word	0x08012194
 80028d8:	080121a4 	.word	0x080121a4
 80028dc:	080121b8 	.word	0x080121b8
 80028e0:	080121c8 	.word	0x080121c8
 80028e4:	080121d4 	.word	0x080121d4
 80028e8:	080121e8 	.word	0x080121e8

080028ec <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d00a      	beq.n	8002912 <get_logName+0x26>
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	dc0a      	bgt.n	8002916 <get_logName+0x2a>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <get_logName+0x1e>
 8002904:	2b01      	cmp	r3, #1
 8002906:	d002      	beq.n	800290e <get_logName+0x22>
 8002908:	e005      	b.n	8002916 <get_logName+0x2a>
		case logOff:
			return "logOff";
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <get_logName+0x38>)
 800290c:	e004      	b.n	8002918 <get_logName+0x2c>
		case logOn:
			return "logOn";
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <get_logName+0x3c>)
 8002910:	e002      	b.n	8002918 <get_logName+0x2c>
		case logDump:
			return "logDump";
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <get_logName+0x40>)
 8002914:	e000      	b.n	8002918 <get_logName+0x2c>
	}

	return "???";
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <get_logName+0x44>)
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	080121f8 	.word	0x080121f8
 8002928:	08012200 	.word	0x08012200
 800292c:	08012208 	.word	0x08012208
 8002930:	08012210 	.word	0x08012210

08002934 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8002940:	2330      	movs	r3, #48	; 0x30
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	2300      	movs	r3, #0
 800294a:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <hex2bin+0x28>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <hex2bin+0x2c>
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	e0b2      	b.n	8002ac6 <hex2bin+0x192>
    if (len > 8) len = 8;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	2b08      	cmp	r3, #8
 8002964:	d901      	bls.n	800296a <hex2bin+0x36>
 8002966:	2308      	movs	r3, #8
 8002968:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	f1c3 0308 	rsb	r3, r3, #8
 8002970:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8002974:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002978:	f107 0210 	add.w	r2, r7, #16
 800297c:	4413      	add	r3, r2
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4618      	mov	r0, r3
 8002984:	f00e fb0a 	bl	8010f9c <memcpy>

    k = j = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800298e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002992:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8002996:	e090      	b.n	8002aba <hex2bin+0x186>
        jk = j + 2;
 8002998:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800299c:	3302      	adds	r3, #2
 800299e:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 80029a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029a8:	e066      	b.n	8002a78 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 80029aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ae:	3328      	adds	r3, #40	; 0x28
 80029b0:	443b      	add	r3, r7
 80029b2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80029b6:	2b2f      	cmp	r3, #47	; 0x2f
 80029b8:	d918      	bls.n	80029ec <hex2bin+0xb8>
 80029ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029be:	3328      	adds	r3, #40	; 0x28
 80029c0:	443b      	add	r3, r7
 80029c2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80029c6:	2b39      	cmp	r3, #57	; 0x39
 80029c8:	d810      	bhi.n	80029ec <hex2bin+0xb8>
 80029ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ce:	3328      	adds	r3, #40	; 0x28
 80029d0:	443b      	add	r3, r7
 80029d2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80029d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	3a30      	subs	r2, #48	; 0x30
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	3328      	adds	r3, #40	; 0x28
 80029e4:	443b      	add	r3, r7
 80029e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80029ea:	e040      	b.n	8002a6e <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 80029ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f0:	3328      	adds	r3, #40	; 0x28
 80029f2:	443b      	add	r3, r7
 80029f4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80029f8:	2b60      	cmp	r3, #96	; 0x60
 80029fa:	d918      	bls.n	8002a2e <hex2bin+0xfa>
 80029fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a00:	3328      	adds	r3, #40	; 0x28
 8002a02:	443b      	add	r3, r7
 8002a04:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002a08:	2b66      	cmp	r3, #102	; 0x66
 8002a0a:	d810      	bhi.n	8002a2e <hex2bin+0xfa>
 8002a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a10:	3328      	adds	r3, #40	; 0x28
 8002a12:	443b      	add	r3, r7
 8002a14:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	3a57      	subs	r2, #87	; 0x57
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	3328      	adds	r3, #40	; 0x28
 8002a26:	443b      	add	r3, r7
 8002a28:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002a2c:	e01f      	b.n	8002a6e <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8002a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a32:	3328      	adds	r3, #40	; 0x28
 8002a34:	443b      	add	r3, r7
 8002a36:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002a3a:	2b40      	cmp	r3, #64	; 0x40
 8002a3c:	d917      	bls.n	8002a6e <hex2bin+0x13a>
 8002a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a42:	3328      	adds	r3, #40	; 0x28
 8002a44:	443b      	add	r3, r7
 8002a46:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002a4a:	2b46      	cmp	r3, #70	; 0x46
 8002a4c:	d80f      	bhi.n	8002a6e <hex2bin+0x13a>
 8002a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a52:	3328      	adds	r3, #40	; 0x28
 8002a54:	443b      	add	r3, r7
 8002a56:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	3a37      	subs	r2, #55	; 0x37
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	3328      	adds	r3, #40	; 0x28
 8002a68:	443b      	add	r3, r7
 8002a6a:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 8002a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a72:	3301      	adds	r3, #1
 8002a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a7c:	7ffb      	ldrb	r3, [r7, #31]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d393      	bcc.n	80029aa <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 8002a82:	7b3b      	ldrb	r3, [r7, #12]
 8002a84:	011a      	lsls	r2, r3, #4
 8002a86:	7b7b      	ldrb	r3, [r7, #13]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 8002a90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a94:	f1c3 0303 	rsb	r3, r3, #3
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	6a3a      	ldr	r2, [r7, #32]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	623b      	str	r3, [r7, #32]
        k++;
 8002aa6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 8002ab0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 8002aba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	f67f af6a 	bls.w	8002998 <hex2bin+0x64>
    }

    return ret;
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3728      	adds	r7, #40	; 0x28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
	if (on)
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ae6:	4807      	ldr	r0, [pc, #28]	; (8002b04 <errLedOn+0x34>)
 8002ae8:	f003 faba 	bl	8006060 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 8002aec:	e005      	b.n	8002afa <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 8002aee:	2200      	movs	r2, #0
 8002af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002af4:	4803      	ldr	r0, [pc, #12]	; (8002b04 <errLedOn+0x34>)
 8002af6:	f003 fab3 	bl	8006060 <HAL_GPIO_WritePin>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40020c00 	.word	0x40020c00

08002b08 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
	return secCounter;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <get_secCounter+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000494 	.word	0x20000494

08002b20 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
	secCounter++;
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <inc_secCounter+0x18>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	4a03      	ldr	r2, [pc, #12]	; (8002b38 <inc_secCounter+0x18>)
 8002b2c:	6013      	str	r3, [r2, #0]
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	20000494 	.word	0x20000494

08002b3c <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
	return msCounter;
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <get_msCounter+0x18>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000498 	.word	0x20000498

08002b58 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
	msCounter++;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <inc_msCounter+0x20>)
 8002b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b62:	1c50      	adds	r0, r2, #1
 8002b64:	f143 0100 	adc.w	r1, r3, #0
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <inc_msCounter+0x20>)
 8002b6a:	e9c3 0100 	strd	r0, r1, [r3]
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	20000498 	.word	0x20000498

08002b7c <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8002b84:	f7ff ffc0 	bl	8002b08 <get_secCounter>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8002b9e:	f7ff ffb3 	bl	8002b08 <get_secCounter>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	bf94      	ite	ls
 8002baa:	2301      	movls	r3, #1
 8002bac:	2300      	movhi	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b094      	sub	sp, #80	; 0x50
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8002bcc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002bd0:	f107 0320 	add.w	r3, r7, #32
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f00e f90e 	bl	8010df8 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8002bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8002be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8002bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <set_Date+0xb0>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002c12:	f107 030c 	add.w	r3, r7, #12
 8002c16:	2200      	movs	r2, #0
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4814      	ldr	r0, [pc, #80]	; (8002c6c <set_Date+0xb4>)
 8002c1c:	f004 f9fe 	bl	800701c <HAL_RTC_SetTime>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <set_Date+0x7e>
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <set_Date+0xb8>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	f043 0308 	orr.w	r3, r3, #8
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <set_Date+0xb8>)
 8002c32:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8002c34:	e014      	b.n	8002c60 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002c36:	f107 0308 	add.w	r3, r7, #8
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	480b      	ldr	r0, [pc, #44]	; (8002c6c <set_Date+0xb4>)
 8002c40:	f004 fae4 	bl	800720c <HAL_RTC_SetDate>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <set_Date+0xa2>
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <set_Date+0xb8>)
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	f043 0308 	orr.w	r3, r3, #8
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <set_Date+0xb8>)
 8002c56:	801a      	strh	r2, [r3, #0]
}
 8002c58:	e002      	b.n	8002c60 <set_Date+0xa8>
			setDate = true;
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <set_Date+0xbc>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
}
 8002c60:	bf00      	nop
 8002c62:	3750      	adds	r7, #80	; 0x50
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	200014a5 	.word	0x200014a5
 8002c6c:	20000280 	.word	0x20000280
 8002c70:	20000490 	.word	0x20000490
 8002c74:	200014a4 	.word	0x200014a4

08002c78 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b093      	sub	sp, #76	; 0x4c
 8002c7c:	af04      	add	r7, sp, #16
 8002c7e:	6078      	str	r0, [r7, #4]
int ret = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8002c84:	4b40      	ldr	r3, [pc, #256]	; (8002d88 <sec2str+0x110>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d040      	beq.n	8002d14 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8002c92:	f7ff ff39 	bl	8002b08 <get_secCounter>
 8002c96:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	4a3c      	ldr	r2, [pc, #240]	; (8002d8c <sec2str+0x114>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	4a39      	ldr	r2, [pc, #228]	; (8002d8c <sec2str+0x114>)
 8002ca8:	fba2 1203 	umull	r1, r2, r2, r3
 8002cac:	0c12      	lsrs	r2, r2, #16
 8002cae:	4938      	ldr	r1, [pc, #224]	; (8002d90 <sec2str+0x118>)
 8002cb0:	fb01 f202 	mul.w	r2, r1, r2
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	4a36      	ldr	r2, [pc, #216]	; (8002d94 <sec2str+0x11c>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	0adb      	lsrs	r3, r3, #11
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	4a33      	ldr	r2, [pc, #204]	; (8002d94 <sec2str+0x11c>)
 8002cc8:	fba2 1203 	umull	r1, r2, r2, r3
 8002ccc:	0ad2      	lsrs	r2, r2, #11
 8002cce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002cd2:	fb01 f202 	mul.w	r2, r1, r2
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	4a2e      	ldr	r2, [pc, #184]	; (8002d98 <sec2str+0x120>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8002ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <sec2str+0x120>)
 8002cea:	fba3 1302 	umull	r1, r3, r3, r2
 8002cee:	0959      	lsrs	r1, r3, #5
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a5b      	subs	r3, r3, r1
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d08:	4924      	ldr	r1, [pc, #144]	; (8002d9c <sec2str+0x124>)
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f00e fa6a 	bl	80111e4 <siprintf>
 8002d10:	6378      	str	r0, [r7, #52]	; 0x34
 8002d12:	e034      	b.n	8002d7e <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8002d14:	f107 030c 	add.w	r3, r7, #12
 8002d18:	2200      	movs	r2, #0
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4820      	ldr	r0, [pc, #128]	; (8002da0 <sec2str+0x128>)
 8002d1e:	f004 faf9 	bl	8007314 <HAL_RTC_GetDate>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <sec2str+0xc0>
 8002d28:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <sec2str+0x12c>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	f043 0308 	orr.w	r3, r3, #8
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <sec2str+0x12c>)
 8002d34:	801a      	strh	r2, [r3, #0]
 8002d36:	e022      	b.n	8002d7e <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8002d38:	f107 0310 	add.w	r3, r7, #16
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4817      	ldr	r0, [pc, #92]	; (8002da0 <sec2str+0x128>)
 8002d42:	f004 fa05 	bl	8007150 <HAL_RTC_GetTime>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <sec2str+0xe4>
 8002d4c:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <sec2str+0x12c>)
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	f043 0308 	orr.w	r3, r3, #8
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <sec2str+0x12c>)
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	e010      	b.n	8002d7e <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8002d5c:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8002d5e:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8002d60:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8002d62:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002d64:	7c3b      	ldrb	r3, [r7, #16]
 8002d66:	7c7a      	ldrb	r2, [r7, #17]
 8002d68:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8002d6a:	9102      	str	r1, [sp, #8]
 8002d6c:	9201      	str	r2, [sp, #4]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	4623      	mov	r3, r4
 8002d72:	4602      	mov	r2, r0
 8002d74:	490c      	ldr	r1, [pc, #48]	; (8002da8 <sec2str+0x130>)
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f00e fa34 	bl	80111e4 <siprintf>
 8002d7c:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	373c      	adds	r7, #60	; 0x3c
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd90      	pop	{r4, r7, pc}
 8002d88:	200014a4 	.word	0x200014a4
 8002d8c:	c22e4507 	.word	0xc22e4507
 8002d90:	00015180 	.word	0x00015180
 8002d94:	91a2b3c5 	.word	0x91a2b3c5
 8002d98:	88888889 	.word	0x88888889
 8002d9c:	08012214 	.word	0x08012214
 8002da0:	20000280 	.word	0x20000280
 8002da4:	20000490 	.word	0x20000490
 8002da8:	0801222c 	.word	0x0801222c

08002dac <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 8002dac:	b40e      	push	{r1, r2, r3}
 8002dae:	b590      	push	{r4, r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8002db8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dbc:	613b      	str	r3, [r7, #16]
int dl = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8002dc2:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <Report+0xb4>)
 8002dc4:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d010      	beq.n	8002df4 <Report+0x48>
		dl = sec2str(buf);
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f7ff ff50 	bl	8002c78 <sec2str>
 8002dd8:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7fd f9f8 	bl	80001d0 <strlen>
 8002de0:	4603      	mov	r3, r0
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <Report+0xb8>)
 8002dea:	6810      	ldr	r0, [r2, #0]
 8002dec:	6018      	str	r0, [r3, #0]
		dl += 3;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	3303      	adds	r3, #3
 8002df2:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8002df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002df8:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	18d0      	adds	r0, r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	1ad1      	subs	r1, r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0a:	f00e fb11 	bl	8011430 <vsniprintf>

	uartRdy = false;
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <Report+0xbc>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <Report+0xc0>)
 8002e16:	681c      	ldr	r4, [r3, #0]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7fd f9d9 	bl	80001d0 <strlen>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	68f9      	ldr	r1, [r7, #12]
 8002e26:	4620      	mov	r0, r4
 8002e28:	f005 fd70 	bl	800890c <HAL_UART_Transmit_DMA>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <Report+0x94>
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <Report+0xc4>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <Report+0xc4>)
 8002e3e:	801a      	strh	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 8002e40:	bf00      	nop
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <Report+0xbc>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f083 0301 	eor.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f8      	bne.n	8002e42 <Report+0x96>

	va_end(args);

	return 0;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002e5c:	b003      	add	sp, #12
 8002e5e:	4770      	bx	lr
 8002e60:	200004a0 	.word	0x200004a0
 8002e64:	08012248 	.word	0x08012248
 8002e68:	20000060 	.word	0x20000060
 8002e6c:	20000074 	.word	0x20000074
 8002e70:	20000490 	.word	0x20000490

08002e74 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b090      	sub	sp, #64	; 0x40
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4aaa      	ldr	r2, [pc, #680]	; (800312c <HAL_UART_RxCpltCallback+0x2b8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	f040 825d 	bne.w	8003342 <HAL_UART_RxCpltCallback+0x4ce>

		rxBuf[ruk++] = (char)rxByte;
 8002e88:	4ba9      	ldr	r3, [pc, #676]	; (8003130 <HAL_UART_RxCpltCallback+0x2bc>)
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	b291      	uxth	r1, r2
 8002e90:	4aa7      	ldr	r2, [pc, #668]	; (8003130 <HAL_UART_RxCpltCallback+0x2bc>)
 8002e92:	8011      	strh	r1, [r2, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4ba7      	ldr	r3, [pc, #668]	; (8003134 <HAL_UART_RxCpltCallback+0x2c0>)
 8002e98:	7819      	ldrb	r1, [r3, #0]
 8002e9a:	4ba7      	ldr	r3, [pc, #668]	; (8003138 <HAL_UART_RxCpltCallback+0x2c4>)
 8002e9c:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 8002e9e:	4ba5      	ldr	r3, [pc, #660]	; (8003134 <HAL_UART_RxCpltCallback+0x2c0>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b0a      	cmp	r3, #10
 8002ea4:	f040 8248 	bne.w	8003338 <HAL_UART_RxCpltCallback+0x4c4>
			rxBuf[--ruk] = '\0';
 8002ea8:	4ba1      	ldr	r3, [pc, #644]	; (8003130 <HAL_UART_RxCpltCallback+0x2bc>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b9f      	ldr	r3, [pc, #636]	; (8003130 <HAL_UART_RxCpltCallback+0x2bc>)
 8002eb2:	801a      	strh	r2, [r3, #0]
 8002eb4:	4b9e      	ldr	r3, [pc, #632]	; (8003130 <HAL_UART_RxCpltCallback+0x2bc>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b9f      	ldr	r3, [pc, #636]	; (8003138 <HAL_UART_RxCpltCallback+0x2c4>)
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 8002eca:	4b9c      	ldr	r3, [pc, #624]	; (800313c <HAL_UART_RxCpltCallback+0x2c8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	83bb      	strh	r3, [r7, #28]
			int8_t idx = -1;
 8002ed4:	23ff      	movs	r3, #255	; 0xff
 8002ed6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			if (strlen(rxBuf) >= 4) {
 8002eda:	4897      	ldr	r0, [pc, #604]	; (8003138 <HAL_UART_RxCpltCallback+0x2c4>)
 8002edc:	f7fd f978 	bl	80001d0 <strlen>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	f240 81fe 	bls.w	80032e4 <HAL_UART_RxCpltCallback+0x470>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002eee:	e018      	b.n	8002f22 <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8002ef0:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002ef4:	4a92      	ldr	r2, [pc, #584]	; (8003140 <HAL_UART_RxCpltCallback+0x2cc>)
 8002ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efa:	4619      	mov	r1, r3
 8002efc:	488e      	ldr	r0, [pc, #568]	; (8003138 <HAL_UART_RxCpltCallback+0x2c4>)
 8002efe:	f00e f9c8 	bl	8011292 <strstr>
 8002f02:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <HAL_UART_RxCpltCallback+0xa0>
														  //"check:"
														  //"area:"
														  //"save:"
														  //"log:"
														  //"help"
						idx = i;
 8002f0a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002f0e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 8002f12:	e00a      	b.n	8002f2a <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002f14:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002f22:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002f26:	2b0a      	cmp	r3, #10
 8002f28:	dde2      	ble.n	8002ef0 <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 8002f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2c:	4a82      	ldr	r2, [pc, #520]	; (8003138 <HAL_UART_RxCpltCallback+0x2c4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	f040 81d8 	bne.w	80032e4 <HAL_UART_RxCpltCallback+0x470>
 8002f34:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f3c:	f000 81d2 	beq.w	80032e4 <HAL_UART_RxCpltCallback+0x470>
					nandLen = MAX_LEN_DATA;//256;
 8002f40:	4b80      	ldr	r3, [pc, #512]	; (8003144 <HAL_UART_RxCpltCallback+0x2d0>)
 8002f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f46:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 8002f48:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002f4c:	4a7c      	ldr	r2, [pc, #496]	; (8003140 <HAL_UART_RxCpltCallback+0x2cc>)
 8002f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd f93c 	bl	80001d0 <strlen>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5c:	4413      	add	r3, r2
 8002f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
 8002f64:	2300      	movs	r3, #0
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f68:	2300      	movs	r3, #0
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 8002f6c:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002f70:	2b0a      	cmp	r3, #10
 8002f72:	f200 8197 	bhi.w	80032a4 <HAL_UART_RxCpltCallback+0x430>
 8002f76:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <HAL_UART_RxCpltCallback+0x108>)
 8002f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7c:	08002fa9 	.word	0x08002fa9
 8002f80:	08002fb1 	.word	0x08002fb1
 8002f84:	08003009 	.word	0x08003009
 8002f88:	08003077 	.word	0x08003077
 8002f8c:	08003097 	.word	0x08003097
 8002f90:	080031f3 	.word	0x080031f3
 8002f94:	08003229 	.word	0x08003229
 8002f98:	0800324b 	.word	0x0800324b
 8002f9c:	08002fa9 	.word	0x08002fa9
 8002fa0:	08002fa9 	.word	0x08002fa9
 8002fa4:	08002fa9 	.word	0x08002fa9
						case cmdHelp:
						case cmdInfo:
						case cmdRestart:
						case cmdMem:
							cmd_flag = 1;
 8002fa8:	4b64      	ldr	r3, [pc, #400]	; (800313c <HAL_UART_RxCpltCallback+0x2c8>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
						break;
 8002fae:	e179      	b.n	80032a4 <HAL_UART_RxCpltCallback+0x430>
						case cmdEpoch:
							if (strlen(uk) < 10) {
 8002fb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002fb2:	f7fd f90d 	bl	80001d0 <strlen>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b09      	cmp	r3, #9
 8002fba:	d802      	bhi.n	8002fc2 <HAL_UART_RxCpltCallback+0x14e>
								qcmd.attr = 1;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	777b      	strb	r3, [r7, #29]
 8002fc0:	e01e      	b.n	8003000 <HAL_UART_RxCpltCallback+0x18c>
							} else {
								uki = strchr(uk, ':');
 8002fc2:	213a      	movs	r1, #58	; 0x3a
 8002fc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002fc6:	f00e f93c 	bl	8011242 <strchr>
 8002fca:	6378      	str	r0, [r7, #52]	; 0x34
								if (uki) {
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00c      	beq.n	8002fec <HAL_UART_RxCpltCallback+0x178>
									tZone = (uint8_t)atol(uki + 1);
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f00d ff04 	bl	8010de4 <atol>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_UART_RxCpltCallback+0x2d4>)
 8002fe2:	701a      	strb	r2, [r3, #0]
									*uki = '\0';
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e002      	b.n	8002ff2 <HAL_UART_RxCpltCallback+0x17e>
								} else {
									tZone = 0;
 8002fec:	4b56      	ldr	r3, [pc, #344]	; (8003148 <HAL_UART_RxCpltCallback+0x2d4>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
								}
								epoch = (uint32_t)atol(uk);
 8002ff2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ff4:	f00d fef6 	bl	8010de4 <atol>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b53      	ldr	r3, [pc, #332]	; (800314c <HAL_UART_RxCpltCallback+0x2d8>)
 8002ffe:	601a      	str	r2, [r3, #0]
							}
							cmd_flag = 1;
 8003000:	4b4e      	ldr	r3, [pc, #312]	; (800313c <HAL_UART_RxCpltCallback+0x2c8>)
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
						break;
 8003006:	e14d      	b.n	80032a4 <HAL_UART_RxCpltCallback+0x430>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 8003008:	213a      	movs	r1, #58	; 0x3a
 800300a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800300c:	f00e f919 	bl	8011242 <strchr>
 8003010:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_UART_RxCpltCallback+0x1bc>
								nandLen = atol(uki + 1);
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301a:	3301      	adds	r3, #1
 800301c:	4618      	mov	r0, r3
 800301e:	f00d fee1 	bl	8010de4 <atol>
 8003022:	4603      	mov	r3, r0
 8003024:	b29a      	uxth	r2, r3
 8003026:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_UART_RxCpltCallback+0x2d0>)
 8003028:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 800302a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8003030:	4947      	ldr	r1, [pc, #284]	; (8003150 <HAL_UART_RxCpltCallback+0x2dc>)
 8003032:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003034:	f00e f92d 	bl	8011292 <strstr>
 8003038:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 800303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00f      	beq.n	8003060 <HAL_UART_RxCpltCallback+0x1ec>
								uki += 2;
 8003040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003042:	3302      	adds	r3, #2
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 8003046:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003048:	f7fd f8c2 	bl	80001d0 <strlen>
 800304c:	4603      	mov	r3, r0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	4619      	mov	r1, r3
 8003052:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003054:	f7ff fc6e 	bl	8002934 <hex2bin>
 8003058:	4603      	mov	r3, r0
 800305a:	4a3e      	ldr	r2, [pc, #248]	; (8003154 <HAL_UART_RxCpltCallback+0x2e0>)
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e006      	b.n	800306e <HAL_UART_RxCpltCallback+0x1fa>
							} else {
								nandAdr = atol(uk);
 8003060:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003062:	f00d febf 	bl	8010de4 <atol>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	4b3a      	ldr	r3, [pc, #232]	; (8003154 <HAL_UART_RxCpltCallback+0x2e0>)
 800306c:	601a      	str	r2, [r3, #0]
							}
//							nandAdr += devAdr;
							check = true;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 8003074:	e116      	b.n	80032a4 <HAL_UART_RxCpltCallback+0x430>
						case cmdNext://"next";
							//if (nandAdr < devAdr) nandAdr = devAdr;
							nandLen = 512;
 8003076:	4b33      	ldr	r3, [pc, #204]	; (8003144 <HAL_UART_RxCpltCallback+0x2d0>)
 8003078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800307c:	801a      	strh	r2, [r3, #0]
							nandAdr += nandLen;
 800307e:	4b31      	ldr	r3, [pc, #196]	; (8003144 <HAL_UART_RxCpltCallback+0x2d0>)
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	4b33      	ldr	r3, [pc, #204]	; (8003154 <HAL_UART_RxCpltCallback+0x2e0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4413      	add	r3, r2
 800308a:	4a32      	ldr	r2, [pc, #200]	; (8003154 <HAL_UART_RxCpltCallback+0x2e0>)
 800308c:	6013      	str	r3, [r2, #0]
							cmd_flag = 1;//check = true;
 800308e:	4b2b      	ldr	r3, [pc, #172]	; (800313c <HAL_UART_RxCpltCallback+0x2c8>)
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
						break;
 8003094:	e106      	b.n	80032a4 <HAL_UART_RxCpltCallback+0x430>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 8003096:	2300      	movs	r3, #0
 8003098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 800309c:	492c      	ldr	r1, [pc, #176]	; (8003150 <HAL_UART_RxCpltCallback+0x2dc>)
 800309e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030a0:	f00e f8f7 	bl	8011292 <strstr>
 80030a4:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 80030a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HAL_UART_RxCpltCallback+0x24e>
								if (uki == uk) {
 80030ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d108      	bne.n	80030c6 <HAL_UART_RxCpltCallback+0x252>
									uki += 2;
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	3302      	adds	r3, #2
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80030c0:	e001      	b.n	80030c6 <HAL_UART_RxCpltCallback+0x252>
								}
							} else uki = uk;
 80030c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 80030c6:	213a      	movs	r1, #58	; 0x3a
 80030c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030ca:	f00e f8ba 	bl	8011242 <strchr>
 80030ce:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80e3 	beq.w	800329e <HAL_UART_RxCpltCallback+0x42a>
								ukb = uke + 1;
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	3301      	adds	r3, #1
 80030dc:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	2210      	movs	r2, #16
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f00d ff66 	bl	8010fb8 <memset>
								memcpy(tmp, uki, uke - uki);
 80030ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030fa:	4618      	mov	r0, r3
 80030fc:	f00d ff4e 	bl	8010f9c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 8003100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003104:	2b00      	cmp	r3, #0
 8003106:	d027      	beq.n	8003158 <HAL_UART_RxCpltCallback+0x2e4>
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd f85f 	bl	80001d0 <strlen>
 8003112:	4603      	mov	r3, r0
 8003114:	b2da      	uxtb	r2, r3
 8003116:	f107 030c 	add.w	r3, r7, #12
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fc09 	bl	8002934 <hex2bin>
 8003122:	4603      	mov	r3, r0
 8003124:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_UART_RxCpltCallback+0x2e0>)
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	e01f      	b.n	800316a <HAL_UART_RxCpltCallback+0x2f6>
 800312a:	bf00      	nop
 800312c:	40004800 	.word	0x40004800
 8003130:	200014a2 	.word	0x200014a2
 8003134:	200014a0 	.word	0x200014a0
 8003138:	20000ca0 	.word	0x20000ca0
 800313c:	20000492 	.word	0x20000492
 8003140:	20000008 	.word	0x20000008
 8003144:	200014b8 	.word	0x200014b8
 8003148:	200014a5 	.word	0x200014a5
 800314c:	20000064 	.word	0x20000064
 8003150:	0801224c 	.word	0x0801224c
 8003154:	200014b4 	.word	0x200014b4
								else nandAdr = atol(tmp);
 8003158:	f107 030c 	add.w	r3, r7, #12
 800315c:	4618      	mov	r0, r3
 800315e:	f00d fe41 	bl	8010de4 <atol>
 8003162:	4603      	mov	r3, r0
 8003164:	461a      	mov	r2, r3
 8003166:	4b79      	ldr	r3, [pc, #484]	; (800334c <HAL_UART_RxCpltCallback+0x4d8>)
 8003168:	601a      	str	r2, [r3, #0]
								uki = ukb;
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 800316e:	213a      	movs	r1, #58	; 0x3a
 8003170:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003172:	f00e f866 	bl	8011242 <strchr>
 8003176:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_UART_RxCpltCallback+0x322>
									nandLen = atol(uke + 1);
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	3301      	adds	r3, #1
 8003182:	4618      	mov	r0, r3
 8003184:	f00d fe2e 	bl	8010de4 <atol>
 8003188:	4603      	mov	r3, r0
 800318a:	b29a      	uxth	r2, r3
 800318c:	4b70      	ldr	r3, [pc, #448]	; (8003350 <HAL_UART_RxCpltCallback+0x4dc>)
 800318e:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 8003196:	496f      	ldr	r1, [pc, #444]	; (8003354 <HAL_UART_RxCpltCallback+0x4e0>)
 8003198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800319a:	f00e f87a 	bl	8011292 <strstr>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d006      	beq.n	80031b2 <HAL_UART_RxCpltCallback+0x33e>
									ukb += 2;
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	3302      	adds	r3, #2
 80031a8:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80031b0:	e002      	b.n	80031b8 <HAL_UART_RxCpltCallback+0x344>
								} else hex = false;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 80031b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00d      	beq.n	80031dc <HAL_UART_RxCpltCallback+0x368>
 80031c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c2:	f7fd f805 	bl	80001d0 <strlen>
 80031c6:	4603      	mov	r3, r0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	4619      	mov	r1, r3
 80031cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ce:	f7ff fbb1 	bl	8002934 <hex2bin>
 80031d2:	4603      	mov	r3, r0
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b60      	ldr	r3, [pc, #384]	; (8003358 <HAL_UART_RxCpltCallback+0x4e4>)
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	e006      	b.n	80031ea <HAL_UART_RxCpltCallback+0x376>
									else nandByte = (uint8_t)atol(ukb);
 80031dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031de:	f00d fe01 	bl	8010de4 <atol>
 80031e2:	4603      	mov	r3, r0
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4b5c      	ldr	r3, [pc, #368]	; (8003358 <HAL_UART_RxCpltCallback+0x4e4>)
 80031e8:	701a      	strb	r2, [r3, #0]
//								nandAdr += devAdr;
								check = true;
 80031ea:	2301      	movs	r3, #1
 80031ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							}
						}
						break;
 80031f0:	e055      	b.n	800329e <HAL_UART_RxCpltCallback+0x42a>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 80031f2:	495a      	ldr	r1, [pc, #360]	; (800335c <HAL_UART_RxCpltCallback+0x4e8>)
 80031f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031f6:	f00e f84c 	bl	8011292 <strstr>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_UART_RxCpltCallback+0x392>
								qcmd.attr = 1;
 8003200:	2301      	movs	r3, #1
 8003202:	777b      	strb	r3, [r7, #29]
 8003204:	e00c      	b.n	8003220 <HAL_UART_RxCpltCallback+0x3ac>
							} else {
								uint32_t blk = atol(uk);
 8003206:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003208:	f00d fdec 	bl	8010de4 <atol>
 800320c:	4603      	mov	r3, r0
 800320e:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 8003210:	4b53      	ldr	r3, [pc, #332]	; (8003360 <HAL_UART_RxCpltCallback+0x4ec>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	6a3a      	ldr	r2, [r7, #32]
 8003216:	429a      	cmp	r2, r3
 8003218:	d202      	bcs.n	8003220 <HAL_UART_RxCpltCallback+0x3ac>
 800321a:	4a52      	ldr	r2, [pc, #328]	; (8003364 <HAL_UART_RxCpltCallback+0x4f0>)
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	6013      	str	r3, [r2, #0]
							}
							cmd_flag = 1;
 8003220:	4b51      	ldr	r3, [pc, #324]	; (8003368 <HAL_UART_RxCpltCallback+0x4f4>)
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
						break;
 8003226:	e03d      	b.n	80032a4 <HAL_UART_RxCpltCallback+0x430>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 8003228:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800322a:	f00d fddb 	bl	8010de4 <atol>
 800322e:	4603      	mov	r3, r0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < total_pages) {//128MB / 2K = 65536 - pages
 8003232:	4b4e      	ldr	r3, [pc, #312]	; (800336c <HAL_UART_RxCpltCallback+0x4f8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003238:	429a      	cmp	r2, r3
 800323a:	d232      	bcs.n	80032a2 <HAL_UART_RxCpltCallback+0x42e>
								nandPage = page;
 800323c:	4a4c      	ldr	r2, [pc, #304]	; (8003370 <HAL_UART_RxCpltCallback+0x4fc>)
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	6013      	str	r3, [r2, #0]
								cmd_flag = 1;
 8003242:	4b49      	ldr	r3, [pc, #292]	; (8003368 <HAL_UART_RxCpltCallback+0x4f4>)
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8003248:	e02b      	b.n	80032a2 <HAL_UART_RxCpltCallback+0x42e>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 800324a:	2303      	movs	r3, #3
 800324c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							if (strstr(uk, "off")) {
 8003250:	4948      	ldr	r1, [pc, #288]	; (8003374 <HAL_UART_RxCpltCallback+0x500>)
 8003252:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003254:	f00e f81d 	bl	8011292 <strstr>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_UART_RxCpltCallback+0x3f2>
								lg = logOff;
 800325e:	2300      	movs	r3, #0
 8003260:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003264:	e014      	b.n	8003290 <HAL_UART_RxCpltCallback+0x41c>
							} else if (strstr(uk, "on")) {
 8003266:	4944      	ldr	r1, [pc, #272]	; (8003378 <HAL_UART_RxCpltCallback+0x504>)
 8003268:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800326a:	f00e f812 	bl	8011292 <strstr>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_UART_RxCpltCallback+0x408>
								lg = logOn;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800327a:	e009      	b.n	8003290 <HAL_UART_RxCpltCallback+0x41c>
							} else if (strstr(uk, "dump")) {
 800327c:	493f      	ldr	r1, [pc, #252]	; (800337c <HAL_UART_RxCpltCallback+0x508>)
 800327e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003280:	f00e f807 	bl	8011292 <strstr>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_UART_RxCpltCallback+0x41c>
								lg = logDump;
 800328a:	2302      	movs	r3, #2
 800328c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							}
							qcmd.attr = lg;
 8003290:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003294:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 8003296:	4b34      	ldr	r3, [pc, #208]	; (8003368 <HAL_UART_RxCpltCallback+0x4f4>)
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
						}
						break;
 800329c:	e002      	b.n	80032a4 <HAL_UART_RxCpltCallback+0x430>
						break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_UART_RxCpltCallback+0x430>
						break;
 80032a2:	bf00      	nop
					}
					qcmd.cmd = idx;
 80032a4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80032a8:	773b      	strb	r3, [r7, #28]
					if (check) {
 80032aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d018      	beq.n	80032e4 <HAL_UART_RxCpltCallback+0x470>
						if ((nandAdr + nandLen) >= total_bytes) {
 80032b2:	4b27      	ldr	r3, [pc, #156]	; (8003350 <HAL_UART_RxCpltCallback+0x4dc>)
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b24      	ldr	r3, [pc, #144]	; (800334c <HAL_UART_RxCpltCallback+0x4d8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	441a      	add	r2, r3
 80032be:	4b30      	ldr	r3, [pc, #192]	; (8003380 <HAL_UART_RxCpltCallback+0x50c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d30b      	bcc.n	80032de <HAL_UART_RxCpltCallback+0x46a>
							nandLen = total_bytes - nandAdr - 1;
 80032c6:	4b2e      	ldr	r3, [pc, #184]	; (8003380 <HAL_UART_RxCpltCallback+0x50c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	4b1f      	ldr	r3, [pc, #124]	; (800334c <HAL_UART_RxCpltCallback+0x4d8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <HAL_UART_RxCpltCallback+0x4dc>)
 80032dc:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 80032de:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_UART_RxCpltCallback+0x4f4>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (idx == -1) {
 80032e4:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ec:	d104      	bne.n	80032f8 <HAL_UART_RxCpltCallback+0x484>
				qcmd.cmd = cmdErr;
 80032ee:	230b      	movs	r3, #11
 80032f0:	773b      	strb	r3, [r7, #28]
				cmd_flag = 1;
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_UART_RxCpltCallback+0x4f4>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
			}
			if (cmd_flag) {
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_UART_RxCpltCallback+0x4f4>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d015      	beq.n	800332c <HAL_UART_RxCpltCallback+0x4b8>
				if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8003300:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_UART_RxCpltCallback+0x510>)
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	f107 011c 	add.w	r1, r7, #28
 8003308:	2300      	movs	r3, #0
 800330a:	2205      	movs	r2, #5
 800330c:	f00a fb86 	bl	800da1c <osMessageQueuePut>
 8003310:	4603      	mov	r3, r0
 8003312:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <HAL_UART_RxCpltCallback+0x514>)
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <HAL_UART_RxCpltCallback+0x514>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d006      	beq.n	800332c <HAL_UART_RxCpltCallback+0x4b8>
 800331e:	4b1b      	ldr	r3, [pc, #108]	; (800338c <HAL_UART_RxCpltCallback+0x518>)
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003326:	b29a      	uxth	r2, r3
 8003328:	4b18      	ldr	r3, [pc, #96]	; (800338c <HAL_UART_RxCpltCallback+0x518>)
 800332a:	801a      	strh	r2, [r3, #0]
			}
			ruk = 0;
 800332c:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_UART_RxCpltCallback+0x51c>)
 800332e:	2200      	movs	r2, #0
 8003330:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8003332:	4b18      	ldr	r3, [pc, #96]	; (8003394 <HAL_UART_RxCpltCallback+0x520>)
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8003338:	2201      	movs	r2, #1
 800333a:	4917      	ldr	r1, [pc, #92]	; (8003398 <HAL_UART_RxCpltCallback+0x524>)
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f005 fab4 	bl	80088aa <HAL_UART_Receive_IT>
	}
}
 8003342:	bf00      	nop
 8003344:	3740      	adds	r7, #64	; 0x40
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200014b4 	.word	0x200014b4
 8003350:	200014b8 	.word	0x200014b8
 8003354:	0801224c 	.word	0x0801224c
 8003358:	20000084 	.word	0x20000084
 800335c:	08012250 	.word	0x08012250
 8003360:	200014d0 	.word	0x200014d0
 8003364:	200014bc 	.word	0x200014bc
 8003368:	20000492 	.word	0x20000492
 800336c:	200014a8 	.word	0x200014a8
 8003370:	200014c0 	.word	0x200014c0
 8003374:	08012254 	.word	0x08012254
 8003378:	08012258 	.word	0x08012258
 800337c:	0801225c 	.word	0x0801225c
 8003380:	200014ac 	.word	0x200014ac
 8003384:	20000488 	.word	0x20000488
 8003388:	200024e8 	.word	0x200024e8
 800338c:	20000490 	.word	0x20000490
 8003390:	200014a2 	.word	0x200014a2
 8003394:	20000ca0 	.word	0x20000ca0
 8003398:	200014a0 	.word	0x200014a0

0800339c <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <HAL_UART_TxCpltCallback+0x24>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d102      	bne.n	80033b4 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_UART_TxCpltCallback+0x28>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	701a      	strb	r2, [r3, #0]
	}
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40004800 	.word	0x40004800
 80033c4:	20000060 	.word	0x20000060

080033c8 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a05      	ldr	r2, [pc, #20]	; (80033ec <HAL_SPI_TxCpltCallback+0x24>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d102      	bne.n	80033e0 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_SPI_TxCpltCallback+0x28>)
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
	}
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	40013000 	.word	0x40013000
 80033f0:	20000061 	.word	0x20000061

080033f4 <showBuf>:
	}
}
*/
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08e      	sub	sp, #56	; 0x38
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60ba      	str	r2, [r7, #8]
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	4603      	mov	r3, r0
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	460b      	mov	r3, r1
 8003404:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8003406:	2320      	movs	r3, #32
 8003408:	613b      	str	r3, [r7, #16]
uint32_t ind = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
uint32_t addr = adr + devAdr;
 8003412:	4b50      	ldr	r3, [pc, #320]	; (8003554 <showBuf+0x160>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	4413      	add	r3, r2
 800341a:	627b      	str	r3, [r7, #36]	; 0x24

	if (type == 2) {
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d10e      	bne.n	8003440 <showBuf+0x4c>
		if (rd) {
 8003422:	7bbb      	ldrb	r3, [r7, #14]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <showBuf+0x48>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 8003428:	4b4b      	ldr	r3, [pc, #300]	; (8003558 <showBuf+0x164>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3b01      	subs	r3, #1
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	4013      	ands	r3, r2
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
			max_ind = chipConf.PageSize;
 8003434:	4b48      	ldr	r3, [pc, #288]	; (8003558 <showBuf+0x164>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
 800343a:	e001      	b.n	8003440 <showBuf+0x4c>
		} else ind = max_ind;
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 8003440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	429a      	cmp	r2, r3
 8003446:	d271      	bcs.n	800352c <showBuf+0x138>
		bool done = false;
 8003448:	2300      	movs	r3, #0
 800344a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint32_t ix = 0, sch = len / step;
 800344e:	2300      	movs	r3, #0
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	61bb      	str	r3, [r7, #24]
		if (len % step) sch++;
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	fbb3 f1f2 	udiv	r1, r3, r2
 8003464:	fb01 f202 	mul.w	r2, r1, r2
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <showBuf+0x80>
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	3301      	adds	r3, #1
 8003472:	61bb      	str	r3, [r7, #24]
		stx[0] = '\0';
 8003474:	4b39      	ldr	r3, [pc, #228]	; (800355c <showBuf+0x168>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
		while (!done) {
 800347a:	e046      	b.n	800350a <showBuf+0x116>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)addr);
 800347c:	4837      	ldr	r0, [pc, #220]	; (800355c <showBuf+0x168>)
 800347e:	f7fc fea7 	bl	80001d0 <strlen>
 8003482:	4603      	mov	r3, r0
 8003484:	4a35      	ldr	r2, [pc, #212]	; (800355c <showBuf+0x168>)
 8003486:	4413      	add	r3, r2
 8003488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348a:	4935      	ldr	r1, [pc, #212]	; (8003560 <showBuf+0x16c>)
 800348c:	4618      	mov	r0, r3
 800348e:	f00d fea9 	bl	80111e4 <siprintf>
			for (int i = 0; i < step; i++) {
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	e01d      	b.n	80034d4 <showBuf+0xe0>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 8003498:	4830      	ldr	r0, [pc, #192]	; (800355c <showBuf+0x168>)
 800349a:	f7fc fe99 	bl	80001d0 <strlen>
 800349e:	4603      	mov	r3, r0
 80034a0:	4a2e      	ldr	r2, [pc, #184]	; (800355c <showBuf+0x168>)
 80034a2:	1898      	adds	r0, r3, r2
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	4413      	add	r3, r2
 80034aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034ac:	4413      	add	r3, r2
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	492c      	ldr	r1, [pc, #176]	; (8003564 <showBuf+0x170>)
 80034b4:	f00d fe96 	bl	80111e4 <siprintf>
				ix++;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	3301      	adds	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
				if (ix == len) {
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d103      	bne.n	80034ce <showBuf+0xda>
					done = true;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					break;
 80034cc:	e006      	b.n	80034dc <showBuf+0xe8>
			for (int i = 0; i < step; i++) {
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	3301      	adds	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	429a      	cmp	r2, r3
 80034da:	dbdd      	blt.n	8003498 <showBuf+0xa4>
				}
			}
			strcat(stx, eol);
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <showBuf+0x174>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4619      	mov	r1, r3
 80034e2:	481e      	ldr	r0, [pc, #120]	; (800355c <showBuf+0x168>)
 80034e4:	f00d fe9e 	bl	8011224 <strcat>
			addr += step;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ec:	4413      	add	r3, r2
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
			ind += step;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f4:	4413      	add	r3, r2
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	61bb      	str	r3, [r7, #24]
			if (!sch) done = true;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <showBuf+0x116>
 8003504:	2301      	movs	r3, #1
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (!done) {
 800350a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800350e:	f083 0301 	eor.w	r3, r3, #1
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1b1      	bne.n	800347c <showBuf+0x88>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 8003518:	4b14      	ldr	r3, [pc, #80]	; (800356c <showBuf+0x178>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d014      	beq.n	800354a <showBuf+0x156>
 8003520:	4a0e      	ldr	r2, [pc, #56]	; (800355c <showBuf+0x168>)
 8003522:	4913      	ldr	r1, [pc, #76]	; (8003570 <showBuf+0x17c>)
 8003524:	2000      	movs	r0, #0
 8003526:	f7ff fc41 	bl	8002dac <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 800352a:	e00e      	b.n	800354a <showBuf+0x156>
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <showBuf+0x178>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <showBuf+0x156>
 8003534:	7bbb      	ldrb	r3, [r7, #14]
 8003536:	4a0c      	ldr	r2, [pc, #48]	; (8003568 <showBuf+0x174>)
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	9201      	str	r2, [sp, #4]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003542:	490c      	ldr	r1, [pc, #48]	; (8003574 <showBuf+0x180>)
 8003544:	2000      	movs	r0, #0
 8003546:	f7ff fc31 	bl	8002dac <Report>
}
 800354a:	bf00      	nop
 800354c:	3730      	adds	r7, #48	; 0x30
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200014b0 	.word	0x200014b0
 8003558:	200014d0 	.word	0x200014d0
 800355c:	200024ec 	.word	0x200024ec
 8003560:	08012264 	.word	0x08012264
 8003564:	0801226c 	.word	0x0801226c
 8003568:	20000004 	.word	0x20000004
 800356c:	20000068 	.word	0x20000068
 8003570:	08012140 	.word	0x08012140
 8003574:	08012274 	.word	0x08012274

08003578 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8003578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800357a:	f2ad 4dc4 	subw	sp, sp, #1220	; 0x4c4
 800357e:	af0c      	add	r7, sp, #48	; 0x30
 8003580:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003584:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8003588:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(250);
 800358a:	20fa      	movs	r0, #250	; 0xfa
 800358c:	f001 fec4 	bl	8005318 <HAL_Delay>
	if (dbg != logOff) {
 8003590:	4b93      	ldr	r3, [pc, #588]	; (80037e0 <defThread+0x268>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d018      	beq.n	80035ca <defThread+0x52>
		Report(0, "%s", eol);
 8003598:	4b92      	ldr	r3, [pc, #584]	; (80037e4 <defThread+0x26c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	4992      	ldr	r1, [pc, #584]	; (80037e8 <defThread+0x270>)
 80035a0:	2000      	movs	r0, #0
 80035a2:	f7ff fc03 	bl	8002dac <Report>
		Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 80035a6:	4b91      	ldr	r3, [pc, #580]	; (80037ec <defThread+0x274>)
 80035a8:	681c      	ldr	r4, [r3, #0]
 80035aa:	f00d faeb 	bl	8010b84 <xPortGetFreeHeapSize>
 80035ae:	4602      	mov	r2, r0
 80035b0:	4b8c      	ldr	r3, [pc, #560]	; (80037e4 <defThread+0x26c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	9302      	str	r3, [sp, #8]
 80035b6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80035ba:	9301      	str	r3, [sp, #4]
 80035bc:	9200      	str	r2, [sp, #0]
 80035be:	4b8c      	ldr	r3, [pc, #560]	; (80037f0 <defThread+0x278>)
 80035c0:	4622      	mov	r2, r4
 80035c2:	498c      	ldr	r1, [pc, #560]	; (80037f4 <defThread+0x27c>)
 80035c4:	2001      	movs	r0, #1
 80035c6:	f7ff fbf1 	bl	8002dac <Report>
	}

#ifdef SET_FAT_FS

	//"RAM","NAND","CF","SD1","SD2","USB1","USB2","USB3"
	memcpy(USERPath, "NAND", 4);//"0:/"
 80035ca:	4b8b      	ldr	r3, [pc, #556]	; (80037f8 <defThread+0x280>)
 80035cc:	4a8b      	ldr	r2, [pc, #556]	; (80037fc <defThread+0x284>)
 80035ce:	6810      	ldr	r0, [r2, #0]
 80035d0:	6018      	str	r0, [r3, #0]

	mnt = drvMount(USERPath);
 80035d2:	4889      	ldr	r0, [pc, #548]	; (80037f8 <defThread+0x280>)
 80035d4:	f7fe fe88 	bl	80022e8 <drvMount>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	4b88      	ldr	r3, [pc, #544]	; (8003800 <defThread+0x288>)
 80035de:	701a      	strb	r2, [r3, #0]
    if (mnt) {
 80035e0:	4b87      	ldr	r3, [pc, #540]	; (8003800 <defThread+0x288>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d053      	beq.n	8003690 <defThread+0x118>
      	  dir_open = dirList(dirName, &dir);
 80035e8:	4b86      	ldr	r3, [pc, #536]	; (8003804 <defThread+0x28c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4986      	ldr	r1, [pc, #536]	; (8003808 <defThread+0x290>)
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe ff24 	bl	800243c <dirList>
 80035f4:	4603      	mov	r3, r0
 80035f6:	461a      	mov	r2, r3
 80035f8:	4b84      	ldr	r3, [pc, #528]	; (800380c <defThread+0x294>)
 80035fa:	701a      	strb	r2, [r3, #0]
      	  if (dir_open) {
 80035fc:	4b83      	ldr	r3, [pc, #524]	; (800380c <defThread+0x294>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d045      	beq.n	8003690 <defThread+0x118>
      		  sprintf(stx,"#Configuration file:%s"
 8003604:	4b77      	ldr	r3, [pc, #476]	; (80037e4 <defThread+0x26c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	4b81      	ldr	r3, [pc, #516]	; (8003810 <defThread+0x298>)
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	6179      	str	r1, [r7, #20]
 8003610:	4b74      	ldr	r3, [pc, #464]	; (80037e4 <defThread+0x26c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a7e      	ldr	r2, [pc, #504]	; (8003810 <defThread+0x298>)
 8003616:	6852      	ldr	r2, [r2, #4]
 8003618:	4972      	ldr	r1, [pc, #456]	; (80037e4 <defThread+0x26c>)
 800361a:	6809      	ldr	r1, [r1, #0]
      			  	  "PlaneNbr:%lu%s"
      			  	  "PlaneSize:%lu MB%s",
					  eol,
					  chipConf.PageSize, eol,
					  chipConf.SpareAreaSize, eol,
					  chipConf.BlockSize * chipConf.PageSize, eol,
 800361c:	487c      	ldr	r0, [pc, #496]	; (8003810 <defThread+0x298>)
 800361e:	6880      	ldr	r0, [r0, #8]
 8003620:	4c7b      	ldr	r4, [pc, #492]	; (8003810 <defThread+0x298>)
 8003622:	6824      	ldr	r4, [r4, #0]
      		  sprintf(stx,"#Configuration file:%s"
 8003624:	fb04 f000 	mul.w	r0, r4, r0
 8003628:	6138      	str	r0, [r7, #16]
 800362a:	4c6e      	ldr	r4, [pc, #440]	; (80037e4 <defThread+0x26c>)
 800362c:	6824      	ldr	r4, [r4, #0]
 800362e:	4d78      	ldr	r5, [pc, #480]	; (8003810 <defThread+0x298>)
 8003630:	68ed      	ldr	r5, [r5, #12]
 8003632:	4e6c      	ldr	r6, [pc, #432]	; (80037e4 <defThread+0x26c>)
 8003634:	6836      	ldr	r6, [r6, #0]
 8003636:	4876      	ldr	r0, [pc, #472]	; (8003810 <defThread+0x298>)
 8003638:	6900      	ldr	r0, [r0, #16]
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	4869      	ldr	r0, [pc, #420]	; (80037e4 <defThread+0x26c>)
 800363e:	6800      	ldr	r0, [r0, #0]
 8003640:	60b8      	str	r0, [r7, #8]
					  chipConf.BlockNbr, eol,
					  chipConf.PlaneNbr, eol,
					  chipConf.PlaneSize / 1024 / 1024,  eol);
 8003642:	4873      	ldr	r0, [pc, #460]	; (8003810 <defThread+0x298>)
 8003644:	6940      	ldr	r0, [r0, #20]
      		  sprintf(stx,"#Configuration file:%s"
 8003646:	0d00      	lsrs	r0, r0, #20
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	4866      	ldr	r0, [pc, #408]	; (80037e4 <defThread+0x26c>)
 800364c:	6800      	ldr	r0, [r0, #0]
 800364e:	900a      	str	r0, [sp, #40]	; 0x28
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	9009      	str	r0, [sp, #36]	; 0x24
 8003654:	68b8      	ldr	r0, [r7, #8]
 8003656:	9008      	str	r0, [sp, #32]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	9007      	str	r0, [sp, #28]
 800365c:	9606      	str	r6, [sp, #24]
 800365e:	9505      	str	r5, [sp, #20]
 8003660:	9404      	str	r4, [sp, #16]
 8003662:	6938      	ldr	r0, [r7, #16]
 8003664:	9003      	str	r0, [sp, #12]
 8003666:	9102      	str	r1, [sp, #8]
 8003668:	9201      	str	r2, [sp, #4]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4968      	ldr	r1, [pc, #416]	; (8003814 <defThread+0x29c>)
 8003672:	4869      	ldr	r0, [pc, #420]	; (8003818 <defThread+0x2a0>)
 8003674:	f00d fdb6 	bl	80111e4 <siprintf>
      		  wrFile(cfg, stx, false);
 8003678:	4b68      	ldr	r3, [pc, #416]	; (800381c <defThread+0x2a4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2200      	movs	r2, #0
 800367e:	4966      	ldr	r1, [pc, #408]	; (8003818 <defThread+0x2a0>)
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe ff87 	bl	8002594 <wrFile>
      		  rdFile(cfg);
 8003686:	4b65      	ldr	r3, [pc, #404]	; (800381c <defThread+0x2a4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff f874 	bl	8002778 <rdFile>
    }
#endif



	uint8_t byte = logOff;
 8003690:	2300      	movs	r3, #0
 8003692:	f887 3469 	strb.w	r3, [r7, #1129]	; 0x469
	uint8_t next_block_erase = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	f887 348f 	strb.w	r3, [r7, #1167]	; 0x48f
	uint32_t iBlk, stik;
	uint8_t nand_show = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	f887 3483 	strb.w	r3, [r7, #1155]	; 0x483
	bool readed = false;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 3482 	strb.w	r3, [r7, #1154]	; 0x482
	char cid[32] = {0};
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80036ae:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	60da      	str	r2, [r3, #12]
 80036bc:	611a      	str	r2, [r3, #16]
 80036be:	615a      	str	r2, [r3, #20]
 80036c0:	619a      	str	r2, [r3, #24]
	uint32_t BlockSizeKB = (chipConf.BlockSize * chipConf.PageSize) / 1024;
 80036c2:	4b53      	ldr	r3, [pc, #332]	; (8003810 <defThread+0x298>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4a52      	ldr	r2, [pc, #328]	; (8003810 <defThread+0x298>)
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	0a9b      	lsrs	r3, r3, #10
 80036d0:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
	uint32_t PlaneSizeMB = (chipConf.PlaneNbr * (chipConf.BlockSize * chipConf.PageSize * chipConf.BlockNbr)) / 1024 / 1024;
 80036d4:	4b4e      	ldr	r3, [pc, #312]	; (8003810 <defThread+0x298>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	4a4d      	ldr	r2, [pc, #308]	; (8003810 <defThread+0x298>)
 80036da:	6892      	ldr	r2, [r2, #8]
 80036dc:	494c      	ldr	r1, [pc, #304]	; (8003810 <defThread+0x298>)
 80036de:	6809      	ldr	r1, [r1, #0]
 80036e0:	fb01 f202 	mul.w	r2, r1, r2
 80036e4:	494a      	ldr	r1, [pc, #296]	; (8003810 <defThread+0x298>)
 80036e6:	68c9      	ldr	r1, [r1, #12]
 80036e8:	fb01 f202 	mul.w	r2, r1, r2
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	0d1b      	lsrs	r3, r3, #20
 80036f2:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 80036f6:	4b4a      	ldr	r3, [pc, #296]	; (8003820 <defThread+0x2a8>)
 80036f8:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	if (nandState == HAL_NAND_STATE_READY) {
 80036fc:	4b49      	ldr	r3, [pc, #292]	; (8003824 <defThread+0x2ac>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	f040 80a1 	bne.w	8003848 <defThread+0x2d0>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8003706:	4b46      	ldr	r3, [pc, #280]	; (8003820 <defThread+0x2a8>)
 8003708:	785b      	ldrb	r3, [r3, #1]
 800370a:	22f1      	movs	r2, #241	; 0xf1
 800370c:	4293      	cmp	r3, r2
 800370e:	d108      	bne.n	8003722 <defThread+0x1aa>
 8003710:	4b45      	ldr	r3, [pc, #276]	; (8003828 <defThread+0x2b0>)
 8003712:	6819      	ldr	r1, [r3, #0]
 8003714:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8003718:	2220      	movs	r2, #32
 800371a:	4618      	mov	r0, r3
 800371c:	f00d fda6 	bl	801126c <strncpy>
 8003720:	e006      	b.n	8003730 <defThread+0x1b8>
									   else strcpy(cid, "UNKNOWN");
 8003722:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8003726:	4a41      	ldr	r2, [pc, #260]	; (800382c <defThread+0x2b4>)
 8003728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800372c:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8003730:	4b39      	ldr	r3, [pc, #228]	; (8003818 <defThread+0x2a0>)
 8003732:	4a3f      	ldr	r2, [pc, #252]	; (8003830 <defThread+0x2b8>)
 8003734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003738:	6018      	str	r0, [r3, #0]
 800373a:	3304      	adds	r3, #4
 800373c:	8019      	strh	r1, [r3, #0]
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 800373e:	2300      	movs	r3, #0
 8003740:	f887 3481 	strb.w	r3, [r7, #1153]	; 0x481
 8003744:	e016      	b.n	8003774 <defThread+0x1fc>
 8003746:	4834      	ldr	r0, [pc, #208]	; (8003818 <defThread+0x2a0>)
 8003748:	f7fc fd42 	bl	80001d0 <strlen>
 800374c:	4603      	mov	r3, r0
 800374e:	4a32      	ldr	r2, [pc, #200]	; (8003818 <defThread+0x2a0>)
 8003750:	1898      	adds	r0, r3, r2
 8003752:	f997 3481 	ldrsb.w	r3, [r7, #1153]	; 0x481
 8003756:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 800375a:	4413      	add	r3, r2
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	4934      	ldr	r1, [pc, #208]	; (8003834 <defThread+0x2bc>)
 8003762:	f00d fd3f 	bl	80111e4 <siprintf>
 8003766:	f997 3481 	ldrsb.w	r3, [r7, #1153]	; 0x481
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3301      	adds	r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f887 3481 	strb.w	r3, [r7, #1153]	; 0x481
 8003774:	f897 3481 	ldrb.w	r3, [r7, #1153]	; 0x481
 8003778:	2b04      	cmp	r3, #4
 800377a:	d9e4      	bls.n	8003746 <defThread+0x1ce>
		sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 800377c:	4826      	ldr	r0, [pc, #152]	; (8003818 <defThread+0x2a0>)
 800377e:	f7fc fd27 	bl	80001d0 <strlen>
 8003782:	4603      	mov	r3, r0
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <defThread+0x2a0>)
 8003786:	1898      	adds	r0, r3, r2
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <defThread+0x2a8>)
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	461a      	mov	r2, r3
 800378e:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8003792:	4929      	ldr	r1, [pc, #164]	; (8003838 <defThread+0x2c0>)
 8003794:	f00d fd26 	bl	80111e4 <siprintf>
		sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB"
 8003798:	481f      	ldr	r0, [pc, #124]	; (8003818 <defThread+0x2a0>)
 800379a:	f7fc fd19 	bl	80001d0 <strlen>
 800379e:	4603      	mov	r3, r0
 80037a0:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <defThread+0x2a0>)
 80037a2:	189c      	adds	r4, r3, r2
 80037a4:	4b1a      	ldr	r3, [pc, #104]	; (8003810 <defThread+0x298>)
 80037a6:	681d      	ldr	r5, [r3, #0]
 80037a8:	4b19      	ldr	r3, [pc, #100]	; (8003810 <defThread+0x298>)
 80037aa:	685e      	ldr	r6, [r3, #4]
 80037ac:	4b18      	ldr	r3, [pc, #96]	; (8003810 <defThread+0x298>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a17      	ldr	r2, [pc, #92]	; (8003810 <defThread+0x298>)
 80037b2:	6912      	ldr	r2, [r2, #16]
 80037b4:	4921      	ldr	r1, [pc, #132]	; (800383c <defThread+0x2c4>)
 80037b6:	6809      	ldr	r1, [r1, #0]
 80037b8:	4821      	ldr	r0, [pc, #132]	; (8003840 <defThread+0x2c8>)
 80037ba:	6800      	ldr	r0, [r0, #0]
 80037bc:	9005      	str	r0, [sp, #20]
 80037be:	9104      	str	r1, [sp, #16]
 80037c0:	f8d7 1460 	ldr.w	r1, [r7, #1120]	; 0x460
 80037c4:	9103      	str	r1, [sp, #12]
 80037c6:	9202      	str	r2, [sp, #8]
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	4633      	mov	r3, r6
 80037d2:	462a      	mov	r2, r5
 80037d4:	491b      	ldr	r1, [pc, #108]	; (8003844 <defThread+0x2cc>)
 80037d6:	4620      	mov	r0, r4
 80037d8:	f00d fd04 	bl	80111e4 <siprintf>
 80037dc:	e041      	b.n	8003862 <defThread+0x2ea>
 80037de:	bf00      	nop
 80037e0:	20000068 	.word	0x20000068
 80037e4:	20000004 	.word	0x20000004
 80037e8:	08012140 	.word	0x08012140
 80037ec:	20000000 	.word	0x20000000
 80037f0:	08014968 	.word	0x08014968
 80037f4:	0801229c 	.word	0x0801229c
 80037f8:	20003db0 	.word	0x20003db0
 80037fc:	080122c8 	.word	0x080122c8
 8003800:	20003550 	.word	0x20003550
 8003804:	200000a0 	.word	0x200000a0
 8003808:	20003520 	.word	0x20003520
 800380c:	20003d54 	.word	0x20003d54
 8003810:	200014d0 	.word	0x200014d0
 8003814:	080122d0 	.word	0x080122d0
 8003818:	200024ec 	.word	0x200024ec
 800381c:	2000009c 	.word	0x2000009c
 8003820:	200014c8 	.word	0x200014c8
 8003824:	20000085 	.word	0x20000085
 8003828:	20000088 	.word	0x20000088
 800382c:	08012348 	.word	0x08012348
 8003830:	08012350 	.word	0x08012350
 8003834:	0801226c 	.word	0x0801226c
 8003838:	08012358 	.word	0x08012358
 800383c:	200014a8 	.word	0x200014a8
 8003840:	200014ac 	.word	0x200014ac
 8003844:	08012370 	.word	0x08012370
						chipConf.PlaneNbr,
						PlaneSizeMB,
						total_pages, total_bytes);
	} else {
		sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
				nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8003848:	4bb5      	ldr	r3, [pc, #724]	; (8003b20 <defThread+0x5a8>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	f003 0303 	and.w	r3, r3, #3
		sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 8003850:	4ab4      	ldr	r2, [pc, #720]	; (8003b24 <defThread+0x5ac>)
 8003852:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003856:	4bb2      	ldr	r3, [pc, #712]	; (8003b20 <defThread+0x5a8>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	49b3      	ldr	r1, [pc, #716]	; (8003b28 <defThread+0x5b0>)
 800385c:	48b3      	ldr	r0, [pc, #716]	; (8003b2c <defThread+0x5b4>)
 800385e:	f00d fcc1 	bl	80111e4 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8003862:	4bb3      	ldr	r3, [pc, #716]	; (8003b30 <defThread+0x5b8>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d006      	beq.n	8003878 <defThread+0x300>
 800386a:	4bb2      	ldr	r3, [pc, #712]	; (8003b34 <defThread+0x5bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4aaf      	ldr	r2, [pc, #700]	; (8003b2c <defThread+0x5b4>)
 8003870:	49b1      	ldr	r1, [pc, #708]	; (8003b38 <defThread+0x5c0>)
 8003872:	2001      	movs	r0, #1
 8003874:	f7ff fa9a 	bl	8002dac <Report>

	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 8003878:	2300      	movs	r3, #0
 800387a:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 800387e:	4baf      	ldr	r3, [pc, #700]	; (8003b3c <defThread+0x5c4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	785b      	ldrb	r3, [r3, #1]
 8003884:	b29b      	uxth	r3, r3
 8003886:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800388a:	9200      	str	r2, [sp, #0]
 800388c:	22ef      	movs	r2, #239	; 0xef
 800388e:	2100      	movs	r1, #0
 8003890:	2000      	movs	r0, #0
 8003892:	f001 f872 	bl	800497a <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8003896:	4ba9      	ldr	r3, [pc, #676]	; (8003b3c <defThread+0x5c4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	b29b      	uxth	r3, r3
 800389e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80038a2:	b299      	uxth	r1, r3
 80038a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	23ef      	movs	r3, #239	; 0xef
 80038ac:	22ef      	movs	r2, #239	; 0xef
 80038ae:	2000      	movs	r0, #0
 80038b0:	f001 f863 	bl	800497a <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 80038b4:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 80038b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038bc:	49a0      	ldr	r1, [pc, #640]	; (8003b40 <defThread+0x5c8>)
 80038be:	4618      	mov	r0, r3
 80038c0:	f00d fc90 	bl	80111e4 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 80038c4:	4b9f      	ldr	r3, [pc, #636]	; (8003b44 <defThread+0x5cc>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	23f0      	movs	r3, #240	; 0xf0
 80038ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038d8:	4611      	mov	r1, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	f001 f95a 	bl	8004b94 <mkLineCenter>
	sprintf(screen+strlen(screen),
 80038e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fc73 	bl	80001d0 <strlen>
 80038ea:	4602      	mov	r2, r0
 80038ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f0:	1898      	adds	r0, r3, r2
 80038f2:	4b95      	ldr	r3, [pc, #596]	; (8003b48 <defThread+0x5d0>)
 80038f4:	681c      	ldr	r4, [r3, #0]
 80038f6:	4b94      	ldr	r3, [pc, #592]	; (8003b48 <defThread+0x5d0>)
 80038f8:	685d      	ldr	r5, [r3, #4]
 80038fa:	4b93      	ldr	r3, [pc, #588]	; (8003b48 <defThread+0x5d0>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	4a92      	ldr	r2, [pc, #584]	; (8003b48 <defThread+0x5d0>)
 8003900:	6912      	ldr	r2, [r2, #16]
 8003902:	f8d7 1460 	ldr.w	r1, [r7, #1120]	; 0x460
 8003906:	9103      	str	r1, [sp, #12]
 8003908:	9202      	str	r2, [sp, #8]
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	462b      	mov	r3, r5
 8003914:	4622      	mov	r2, r4
 8003916:	498d      	ldr	r1, [pc, #564]	; (8003b4c <defThread+0x5d4>)
 8003918:	f00d fc64 	bl	80111e4 <siprintf>
				chipConf.SpareAreaSize,
				BlockSizeKB,
				chipConf.BlockNbr,
				chipConf.PlaneNbr,
				PlaneSizeMB);
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 800391c:	4b8c      	ldr	r3, [pc, #560]	; (8003b50 <defThread+0x5d8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00e      	beq.n	8003942 <defThread+0x3ca>
 8003924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fc51 	bl	80001d0 <strlen>
 800392e:	4602      	mov	r2, r0
 8003930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003934:	4413      	add	r3, r2
 8003936:	4a86      	ldr	r2, [pc, #536]	; (8003b50 <defThread+0x5d8>)
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	4986      	ldr	r1, [pc, #536]	; (8003b54 <defThread+0x5dc>)
 800393c:	4618      	mov	r0, r3
 800393e:	f00d fc51 	bl	80111e4 <siprintf>
	ST7789_WriteString(0,
						tFont->height + (tFont->height * 0.85),
 8003942:	4b80      	ldr	r3, [pc, #512]	; (8003b44 <defThread+0x5cc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	4618      	mov	r0, r3
 800394a:	f7fc ff15 	bl	8000778 <__aeabi_i2d>
 800394e:	4604      	mov	r4, r0
 8003950:	460d      	mov	r5, r1
 8003952:	4b7c      	ldr	r3, [pc, #496]	; (8003b44 <defThread+0x5cc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc ff0d 	bl	8000778 <__aeabi_i2d>
 800395e:	a36e      	add	r3, pc, #440	; (adr r3, 8003b18 <defThread+0x5a0>)
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f7fc fc8c 	bl	8000280 <__aeabi_dmul>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4620      	mov	r0, r4
 800396e:	4629      	mov	r1, r5
 8003970:	f7fc fdb6 	bl	80004e0 <__adddf3>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8003978:	4610      	mov	r0, r2
 800397a:	4619      	mov	r1, r3
 800397c:	f7fc ff66 	bl	800084c <__aeabi_d2uiz>
 8003980:	4603      	mov	r3, r0
 8003982:	b298      	uxth	r0, r3
 8003984:	4b6f      	ldr	r3, [pc, #444]	; (8003b44 <defThread+0x5cc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a73      	ldr	r2, [pc, #460]	; (8003b58 <defThread+0x5e0>)
 800398a:	8812      	ldrh	r2, [r2, #0]
 800398c:	43d2      	mvns	r2, r2
 800398e:	b292      	uxth	r2, r2
 8003990:	4971      	ldr	r1, [pc, #452]	; (8003b58 <defThread+0x5e0>)
 8003992:	8809      	ldrh	r1, [r1, #0]
 8003994:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003998:	9102      	str	r1, [sp, #8]
 800399a:	9201      	str	r2, [sp, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	9200      	str	r2, [sp, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4622      	mov	r2, r4
 80039a4:	4601      	mov	r1, r0
 80039a6:	2000      	movs	r0, #0
 80039a8:	f001 f89e 	bl	8004ae8 <ST7789_WriteString>
						screen,
						*tFont,
						~back_color,
						back_color);
	ipsOn(1);
 80039ac:	2001      	movs	r0, #1
 80039ae:	f000 fe55 	bl	800465c <ipsOn>

	bool loop = true;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 347d 	strb.w	r3, [r7, #1149]	; 0x47d
	bool led = false;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f887 347c 	strb.w	r3, [r7, #1148]	; 0x47c
	uint32_t tmr = get_tmr(1);
 80039be:	2001      	movs	r0, #1
 80039c0:	f7ff f8dc 	bl	8002b7c <get_tmr>
 80039c4:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478

	uint32_t page_offset = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
	uint32_t page_addr = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
	s_qcmd qcmd = {0};
 80039d4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80039d8:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 80039dc:	2200      	movs	r2, #0
 80039de:	801a      	strh	r2, [r3, #0]
	uint8_t prio = 0;
 80039e0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80039e4:	f2a3 4369 	subw	r3, r3, #1129	; 0x469
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
	osStatus_t qs = osOK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c

  /* Infinite loop */

	while (loop) {
 80039f2:	f000 bc78 	b.w	80042e6 <defThread+0xd6e>

		if (check_tmr(tmr)) {
 80039f6:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 80039fa:	f7ff f8cc 	bl	8002b96 <check_tmr>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80bb 	beq.w	8003b7c <defThread+0x604>
			tmr = get_tmr(1);
 8003a06:	2001      	movs	r0, #1
 8003a08:	f7ff f8b8 	bl	8002b7c <get_tmr>
 8003a0c:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
			//
			sec2str(screen);
 8003a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff f92f 	bl	8002c78 <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 8003a1a:	4b48      	ldr	r3, [pc, #288]	; (8003b3c <defThread+0x5c4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	23f0      	movs	r3, #240	; 0xf0
 8003a24:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 f8af 	bl	8004b94 <mkLineCenter>
 8003a36:	4601      	mov	r1, r0
 8003a38:	4b40      	ldr	r3, [pc, #256]	; (8003b3c <defThread+0x5c4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003a40:	9202      	str	r2, [sp, #8]
 8003a42:	221f      	movs	r2, #31
 8003a44:	9201      	str	r2, [sp, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	9200      	str	r2, [sp, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	460a      	mov	r2, r1
 8003a4e:	2100      	movs	r1, #0
 8003a50:	2008      	movs	r0, #8
 8003a52:	f001 f849 	bl	8004ae8 <ST7789_WriteString>

			sprintf(screen, "Error: 0x%04X", devError);
 8003a56:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <defThread+0x5e4>)
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a60:	493f      	ldr	r1, [pc, #252]	; (8003b60 <defThread+0x5e8>)
 8003a62:	4618      	mov	r0, r3
 8003a64:	f00d fbbe 	bl	80111e4 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 8003a68:	4b3c      	ldr	r3, [pc, #240]	; (8003b5c <defThread+0x5e4>)
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <defThread+0x502>
 8003a70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003a74:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
 8003a78:	e002      	b.n	8003a80 <defThread+0x508>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8003a80:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <defThread+0x5c4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	785b      	ldrb	r3, [r3, #1]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003a8c:	b29c      	uxth	r4, r3
 8003a8e:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <defThread+0x5c4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	23f0      	movs	r3, #240	; 0xf0
 8003a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 f875 	bl	8004b94 <mkLineCenter>
 8003aaa:	4601      	mov	r1, r0
 8003aac:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <defThread+0x5c4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ab4:	9202      	str	r2, [sp, #8]
 8003ab6:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8003aba:	9201      	str	r2, [sp, #4]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	9200      	str	r2, [sp, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	460a      	mov	r2, r1
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f001 f80e 	bl	8004ae8 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 8003acc:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <defThread+0x5ec>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d019      	beq.n	8003b08 <defThread+0x590>
				if (qs != qStat) {
 8003ad4:	4b23      	ldr	r3, [pc, #140]	; (8003b64 <defThread+0x5ec>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d013      	beq.n	8003b08 <defThread+0x590>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <defThread+0x5b8>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00b      	beq.n	8003b00 <defThread+0x588>
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <defThread+0x5ec>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fead 	bl	800284c <get_qStat>
 8003af2:	4602      	mov	r2, r0
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <defThread+0x5bc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	491b      	ldr	r1, [pc, #108]	; (8003b68 <defThread+0x5f0>)
 8003afa:	2001      	movs	r0, #1
 8003afc:	f7ff f956 	bl	8002dac <Report>
					qs = qStat;
 8003b00:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <defThread+0x5ec>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
				}
			}

			if (devError) led = true; else led = false;
 8003b08:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <defThread+0x5e4>)
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d02d      	beq.n	8003b6c <defThread+0x5f4>
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 347c 	strb.w	r3, [r7, #1148]	; 0x47c
 8003b16:	e02c      	b.n	8003b72 <defThread+0x5fa>
 8003b18:	33333333 	.word	0x33333333
 8003b1c:	3feb3333 	.word	0x3feb3333
 8003b20:	20000085 	.word	0x20000085
 8003b24:	2000008c 	.word	0x2000008c
 8003b28:	080123f4 	.word	0x080123f4
 8003b2c:	200024ec 	.word	0x200024ec
 8003b30:	20000068 	.word	0x20000068
 8003b34:	20000004 	.word	0x20000004
 8003b38:	08012414 	.word	0x08012414
 8003b3c:	2000007c 	.word	0x2000007c
 8003b40:	0801241c 	.word	0x0801241c
 8003b44:	20000080 	.word	0x20000080
 8003b48:	200014d0 	.word	0x200014d0
 8003b4c:	08012428 	.word	0x08012428
 8003b50:	200014c4 	.word	0x200014c4
 8003b54:	08012484 	.word	0x08012484
 8003b58:	200014a6 	.word	0x200014a6
 8003b5c:	20000490 	.word	0x20000490
 8003b60:	08012494 	.word	0x08012494
 8003b64:	200024e8 	.word	0x200024e8
 8003b68:	080124a4 	.word	0x080124a4
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 347c 	strb.w	r3, [r7, #1148]	; 0x47c
			errLedOn(led);
 8003b72:	f897 347c 	ldrb.w	r3, [r7, #1148]	; 0x47c
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe ffaa 	bl	8002ad0 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 8003b7c:	4bae      	ldr	r3, [pc, #696]	; (8003e38 <defThread+0x8c0>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8003b84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003b88:	2305      	movs	r3, #5
 8003b8a:	f009 ffa7 	bl	800dadc <osMessageQueueGet>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4aaa      	ldr	r2, [pc, #680]	; (8003e3c <defThread+0x8c4>)
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4ba9      	ldr	r3, [pc, #676]	; (8003e3c <defThread+0x8c4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d028      	beq.n	8003bee <defThread+0x676>
			if (qs != qStat) qs = qStat;
 8003b9c:	4ba7      	ldr	r3, [pc, #668]	; (8003e3c <defThread+0x8c4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d003      	beq.n	8003bb0 <defThread+0x638>
 8003ba8:	4ba4      	ldr	r3, [pc, #656]	; (8003e3c <defThread+0x8c4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
			if (qStat != osErrorTimeout) {
 8003bb0:	4ba2      	ldr	r3, [pc, #648]	; (8003e3c <defThread+0x8c4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f113 0f02 	cmn.w	r3, #2
 8003bb8:	f000 8335 	beq.w	8004226 <defThread+0xcae>
				devError |= devQUE;
 8003bbc:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <defThread+0x8c8>)
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	4b9e      	ldr	r3, [pc, #632]	; (8003e40 <defThread+0x8c8>)
 8003bc8:	801a      	strh	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003bca:	4b9e      	ldr	r3, [pc, #632]	; (8003e44 <defThread+0x8cc>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8329 	beq.w	8004226 <defThread+0xcae>
 8003bd4:	4b99      	ldr	r3, [pc, #612]	; (8003e3c <defThread+0x8c4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe fe37 	bl	800284c <get_qStat>
 8003bde:	4602      	mov	r2, r0
 8003be0:	4b99      	ldr	r3, [pc, #612]	; (8003e48 <defThread+0x8d0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4999      	ldr	r1, [pc, #612]	; (8003e4c <defThread+0x8d4>)
 8003be6:	2001      	movs	r0, #1
 8003be8:	f7ff f8e0 	bl	8002dac <Report>
 8003bec:	e31b      	b.n	8004226 <defThread+0xcae>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 8003bee:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003bf2:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b95      	ldr	r3, [pc, #596]	; (8003e50 <defThread+0x8d8>)
 8003bfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c04:	4993      	ldr	r1, [pc, #588]	; (8003e54 <defThread+0x8dc>)
 8003c06:	4618      	mov	r0, r3
 8003c08:	f00d faec 	bl	80111e4 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 8003c0c:	4b92      	ldr	r3, [pc, #584]	; (8003e58 <defThread+0x8e0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003c1c:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 8003c1e:	4b8e      	ldr	r3, [pc, #568]	; (8003e58 <defThread+0x8e0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	23f0      	movs	r3, #240	; 0xf0
 8003c28:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 ffad 	bl	8004b94 <mkLineCenter>
 8003c3a:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 8003c3c:	4b86      	ldr	r3, [pc, #536]	; (8003e58 <defThread+0x8e0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2200      	movs	r2, #0
 8003c42:	9202      	str	r2, [sp, #8]
 8003c44:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003c48:	9201      	str	r2, [sp, #4]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	9200      	str	r2, [sp, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	460a      	mov	r2, r1
 8003c52:	4621      	mov	r1, r4
 8003c54:	2000      	movs	r0, #0
 8003c56:	f000 ff47 	bl	8004ae8 <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			if (dbg > logOn)
 8003c5a:	4b7a      	ldr	r3, [pc, #488]	; (8003e44 <defThread+0x8cc>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d91e      	bls.n	8003ca0 <defThread+0x728>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 8003c62:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003c66:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003c72:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003c76:	785b      	ldrb	r3, [r3, #1]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003c7e:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	4b72      	ldr	r3, [pc, #456]	; (8003e50 <defThread+0x8d8>)
 8003c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c8c:	4a6e      	ldr	r2, [pc, #440]	; (8003e48 <defThread+0x8d0>)
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	9201      	str	r2, [sp, #4]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	4603      	mov	r3, r0
 8003c96:	460a      	mov	r2, r1
 8003c98:	4970      	ldr	r1, [pc, #448]	; (8003e5c <defThread+0x8e4>)
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f7ff f886 	bl	8002dac <Report>
			//
			nand_show = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 3483 	strb.w	r3, [r7, #1155]	; 0x483
			switch (qcmd.cmd) {
 8003ca6:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003caa:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b0b      	cmp	r3, #11
 8003cb2:	f200 82a6 	bhi.w	8004202 <defThread+0xc8a>
 8003cb6:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <defThread+0x744>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003d6b 	.word	0x08003d6b
 8003cc0:	08003ea1 	.word	0x08003ea1
 8003cc4:	08003f4b 	.word	0x08003f4b
 8003cc8:	08003f4b 	.word	0x08003f4b
 8003ccc:	080040bf 	.word	0x080040bf
 8003cd0:	08003fcd 	.word	0x08003fcd
 8003cd4:	08004057 	.word	0x08004057
 8003cd8:	08003edb 	.word	0x08003edb
 8003cdc:	08003d73 	.word	0x08003d73
 8003ce0:	08003d51 	.word	0x08003d51
 8003ce4:	08003cfd 	.word	0x08003cfd
 8003ce8:	08003ced 	.word	0x08003ced
				case cmdErr:
					Report(1, "!!! Error command !!!%s", eol);
 8003cec:	4b56      	ldr	r3, [pc, #344]	; (8003e48 <defThread+0x8d0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	495b      	ldr	r1, [pc, #364]	; (8003e60 <defThread+0x8e8>)
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	f7ff f859 	bl	8002dac <Report>
				break;
 8003cfa:	e282      	b.n	8004202 <defThread+0xc8a>
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 8003cfc:	4b52      	ldr	r3, [pc, #328]	; (8003e48 <defThread+0x8d0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	4958      	ldr	r1, [pc, #352]	; (8003e64 <defThread+0x8ec>)
 8003d04:	4858      	ldr	r0, [pc, #352]	; (8003e68 <defThread+0x8f0>)
 8003d06:	f00d fa6d 	bl	80111e4 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
 8003d10:	e014      	b.n	8003d3c <defThread+0x7c4>
 8003d12:	4855      	ldr	r0, [pc, #340]	; (8003e68 <defThread+0x8f0>)
 8003d14:	f7fc fa5c 	bl	80001d0 <strlen>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4a53      	ldr	r2, [pc, #332]	; (8003e68 <defThread+0x8f0>)
 8003d1c:	1898      	adds	r0, r3, r2
 8003d1e:	f897 346b 	ldrb.w	r3, [r7, #1131]	; 0x46b
 8003d22:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <defThread+0x8f4>)
 8003d24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003d28:	4b47      	ldr	r3, [pc, #284]	; (8003e48 <defThread+0x8d0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4950      	ldr	r1, [pc, #320]	; (8003e70 <defThread+0x8f8>)
 8003d2e:	f00d fa59 	bl	80111e4 <siprintf>
 8003d32:	f897 346b 	ldrb.w	r3, [r7, #1131]	; 0x46b
 8003d36:	3301      	adds	r3, #1
 8003d38:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
 8003d3c:	f897 346b 	ldrb.w	r3, [r7, #1131]	; 0x46b
 8003d40:	2b0a      	cmp	r3, #10
 8003d42:	d9e6      	bls.n	8003d12 <defThread+0x79a>
					Report(1, "%s", stx);
 8003d44:	4a48      	ldr	r2, [pc, #288]	; (8003e68 <defThread+0x8f0>)
 8003d46:	494b      	ldr	r1, [pc, #300]	; (8003e74 <defThread+0x8fc>)
 8003d48:	2001      	movs	r0, #1
 8003d4a:	f7ff f82f 	bl	8002dac <Report>
				break;
 8003d4e:	e258      	b.n	8004202 <defThread+0xc8a>
				case cmdMem:
					Report(1, "FreeRTOS memory: free=%lu heap=%lu bytes%s", xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003d50:	f00c ff18 	bl	8010b84 <xPortGetFreeHeapSize>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b3c      	ldr	r3, [pc, #240]	; (8003e48 <defThread+0x8d0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003d60:	4945      	ldr	r1, [pc, #276]	; (8003e78 <defThread+0x900>)
 8003d62:	2001      	movs	r0, #1
 8003d64:	f7ff f822 	bl	8002dac <Report>
				break;
 8003d68:	e24b      	b.n	8004202 <defThread+0xc8a>
				case cmdRestart:
					loop = false;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f887 347d 	strb.w	r3, [r7, #1149]	; 0x47d
				break;
 8003d70:	e247      	b.n	8004202 <defThread+0xc8a>
				case cmdInfo:
					if (dbg != logOff) {
 8003d72:	4b34      	ldr	r3, [pc, #208]	; (8003e44 <defThread+0x8cc>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 823a 	beq.w	80041f0 <defThread+0xc78>
						strcpy(stx, "NAND:");
 8003d7c:	4b3a      	ldr	r3, [pc, #232]	; (8003e68 <defThread+0x8f0>)
 8003d7e:	4a3f      	ldr	r2, [pc, #252]	; (8003e7c <defThread+0x904>)
 8003d80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d84:	6018      	str	r0, [r3, #0]
 8003d86:	3304      	adds	r3, #4
 8003d88:	8019      	strh	r1, [r3, #0]
						//uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
						for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 346a 	strb.w	r3, [r7, #1130]	; 0x46a
 8003d90:	e016      	b.n	8003dc0 <defThread+0x848>
 8003d92:	4835      	ldr	r0, [pc, #212]	; (8003e68 <defThread+0x8f0>)
 8003d94:	f7fc fa1c 	bl	80001d0 <strlen>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4a33      	ldr	r2, [pc, #204]	; (8003e68 <defThread+0x8f0>)
 8003d9c:	1898      	adds	r0, r3, r2
 8003d9e:	f997 346a 	ldrsb.w	r3, [r7, #1130]	; 0x46a
 8003da2:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8003da6:	4413      	add	r3, r2
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	4934      	ldr	r1, [pc, #208]	; (8003e80 <defThread+0x908>)
 8003dae:	f00d fa19 	bl	80111e4 <siprintf>
 8003db2:	f997 346a 	ldrsb.w	r3, [r7, #1130]	; 0x46a
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f887 346a 	strb.w	r3, [r7, #1130]	; 0x46a
 8003dc0:	f897 346a 	ldrb.w	r3, [r7, #1130]	; 0x46a
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d9e4      	bls.n	8003d92 <defThread+0x81a>
						sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8003dc8:	4827      	ldr	r0, [pc, #156]	; (8003e68 <defThread+0x8f0>)
 8003dca:	f7fc fa01 	bl	80001d0 <strlen>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <defThread+0x8f0>)
 8003dd2:	1898      	adds	r0, r3, r2
 8003dd4:	4b2b      	ldr	r3, [pc, #172]	; (8003e84 <defThread+0x90c>)
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8003dde:	492a      	ldr	r1, [pc, #168]	; (8003e88 <defThread+0x910>)
 8003de0:	f00d fa00 	bl	80111e4 <siprintf>
						sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB"
 8003de4:	4820      	ldr	r0, [pc, #128]	; (8003e68 <defThread+0x8f0>)
 8003de6:	f7fc f9f3 	bl	80001d0 <strlen>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4a1e      	ldr	r2, [pc, #120]	; (8003e68 <defThread+0x8f0>)
 8003dee:	189c      	adds	r4, r3, r2
 8003df0:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <defThread+0x914>)
 8003df2:	681d      	ldr	r5, [r3, #0]
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <defThread+0x914>)
 8003df6:	685e      	ldr	r6, [r3, #4]
 8003df8:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <defThread+0x914>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <defThread+0x914>)
 8003dfe:	6912      	ldr	r2, [r2, #16]
 8003e00:	4923      	ldr	r1, [pc, #140]	; (8003e90 <defThread+0x918>)
 8003e02:	6809      	ldr	r1, [r1, #0]
 8003e04:	4823      	ldr	r0, [pc, #140]	; (8003e94 <defThread+0x91c>)
 8003e06:	6800      	ldr	r0, [r0, #0]
 8003e08:	9005      	str	r0, [sp, #20]
 8003e0a:	9104      	str	r1, [sp, #16]
 8003e0c:	f8d7 1460 	ldr.w	r1, [r7, #1120]	; 0x460
 8003e10:	9103      	str	r1, [sp, #12]
 8003e12:	9202      	str	r2, [sp, #8]
 8003e14:	9301      	str	r3, [sp, #4]
 8003e16:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	4633      	mov	r3, r6
 8003e1e:	462a      	mov	r2, r5
 8003e20:	491d      	ldr	r1, [pc, #116]	; (8003e98 <defThread+0x920>)
 8003e22:	4620      	mov	r0, r4
 8003e24:	f00d f9de 	bl	80111e4 <siprintf>
												BlockSizeKB,
												chipConf.BlockNbr,
												chipConf.PlaneNbr,
												PlaneSizeMB,
												total_pages, total_bytes);
						Report(1, "%s%s", stx, eol);
 8003e28:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <defThread+0x8d0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <defThread+0x8f0>)
 8003e2e:	491b      	ldr	r1, [pc, #108]	; (8003e9c <defThread+0x924>)
 8003e30:	2001      	movs	r0, #1
 8003e32:	f7fe ffbb 	bl	8002dac <Report>
					}
				break;
 8003e36:	e1db      	b.n	80041f0 <defThread+0xc78>
 8003e38:	20000488 	.word	0x20000488
 8003e3c:	200024e8 	.word	0x200024e8
 8003e40:	20000490 	.word	0x20000490
 8003e44:	20000068 	.word	0x20000068
 8003e48:	20000004 	.word	0x20000004
 8003e4c:	080124a4 	.word	0x080124a4
 8003e50:	20000034 	.word	0x20000034
 8003e54:	080124b0 	.word	0x080124b0
 8003e58:	2000007c 	.word	0x2000007c
 8003e5c:	080124b8 	.word	0x080124b8
 8003e60:	080124d0 	.word	0x080124d0
 8003e64:	080124e8 	.word	0x080124e8
 8003e68:	200024ec 	.word	0x200024ec
 8003e6c:	20000008 	.word	0x20000008
 8003e70:	08012504 	.word	0x08012504
 8003e74:	08012140 	.word	0x08012140
 8003e78:	0801250c 	.word	0x0801250c
 8003e7c:	08012350 	.word	0x08012350
 8003e80:	0801226c 	.word	0x0801226c
 8003e84:	200014c8 	.word	0x200014c8
 8003e88:	08012358 	.word	0x08012358
 8003e8c:	200014d0 	.word	0x200014d0
 8003e90:	200014a8 	.word	0x200014a8
 8003e94:	200014ac 	.word	0x200014ac
 8003e98:	08012370 	.word	0x08012370
 8003e9c:	08012414 	.word	0x08012414
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 8003ea0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003ea4:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <defThread+0x942>
						set_Date(epoch);
 8003eae:	4b94      	ldr	r3, [pc, #592]	; (8004100 <defThread+0xb88>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe fe80 	bl	8002bb8 <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 8003eb8:	e19c      	b.n	80041f4 <defThread+0xc7c>
						sec2str(stx);
 8003eba:	4892      	ldr	r0, [pc, #584]	; (8004104 <defThread+0xb8c>)
 8003ebc:	f7fe fedc 	bl	8002c78 <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 8003ec0:	4b91      	ldr	r3, [pc, #580]	; (8004108 <defThread+0xb90>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8195 	beq.w	80041f4 <defThread+0xc7c>
 8003eca:	4b90      	ldr	r3, [pc, #576]	; (800410c <defThread+0xb94>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a8d      	ldr	r2, [pc, #564]	; (8004104 <defThread+0xb8c>)
 8003ed0:	498f      	ldr	r1, [pc, #572]	; (8004110 <defThread+0xb98>)
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f7fe ff6a 	bl	8002dac <Report>
				break;
 8003ed8:	e18c      	b.n	80041f4 <defThread+0xc7c>
				case cmdLog:
					if (qcmd.attr < logNone) {
 8003eda:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003ede:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003ee2:	785b      	ldrb	r3, [r3, #1]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d81e      	bhi.n	8003f26 <defThread+0x9ae>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 8003ee8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003eec:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fcfa 	bl	80028ec <get_logName>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003efe:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003f02:	785b      	ldrb	r3, [r3, #1]
 8003f04:	4619      	mov	r1, r3
 8003f06:	4b81      	ldr	r3, [pc, #516]	; (800410c <defThread+0xb94>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4981      	ldr	r1, [pc, #516]	; (8004114 <defThread+0xb9c>)
 8003f10:	2001      	movs	r0, #1
 8003f12:	f7fe ff4b 	bl	8002dac <Report>
						dbg = qcmd.attr;
 8003f16:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003f1a:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003f1e:	785a      	ldrb	r2, [r3, #1]
 8003f20:	4b79      	ldr	r3, [pc, #484]	; (8004108 <defThread+0xb90>)
 8003f22:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 8003f24:	e16d      	b.n	8004202 <defThread+0xc8a>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 8003f26:	4b78      	ldr	r3, [pc, #480]	; (8004108 <defThread+0xb90>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe fcde 	bl	80028ec <get_logName>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b75      	ldr	r3, [pc, #468]	; (8004108 <defThread+0xb90>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	4619      	mov	r1, r3
 8003f38:	4b74      	ldr	r3, [pc, #464]	; (800410c <defThread+0xb94>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4975      	ldr	r1, [pc, #468]	; (8004118 <defThread+0xba0>)
 8003f42:	2001      	movs	r0, #1
 8003f44:	f7fe ff32 	bl	8002dac <Report>
				break;
 8003f48:	e15b      	b.n	8004202 <defThread+0xc8a>
				case cmdRead:
				case cmdNext:
				{
					if (qcmd.cmd == cmdRead) {
 8003f4a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003f4e:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d10d      	bne.n	8003f74 <defThread+0x9fc>
						readed = true;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 3482 	strb.w	r3, [r7, #1154]	; 0x482
						page_offset = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
						page_addr = nandAdr;
 8003f64:	4b6d      	ldr	r3, [pc, #436]	; (800411c <defThread+0xba4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
						nand_show = 1;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 3483 	strb.w	r3, [r7, #1155]	; 0x483
 8003f72:	e01c      	b.n	8003fae <defThread+0xa36>
					} else {
						page_offset += nandLen;
 8003f74:	4b6a      	ldr	r3, [pc, #424]	; (8004120 <defThread+0xba8>)
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8003f7e:	4413      	add	r3, r2
 8003f80:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
						if (!(page_offset % chipConf.PageSize)) {
 8003f84:	4b67      	ldr	r3, [pc, #412]	; (8004124 <defThread+0xbac>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8003f8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f90:	fb01 f202 	mul.w	r2, r1, r2
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <defThread+0xa30>
							page_offset = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
							nandAdr = page_addr;
 8003fa0:	4a5e      	ldr	r2, [pc, #376]	; (800411c <defThread+0xba4>)
 8003fa2:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8003fa6:	6013      	str	r3, [r2, #0]
						}
						nand_show = 1;//2;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 3483 	strb.w	r3, [r7, #1155]	; 0x483
					}
					io_nand_read(page_addr / chipConf.PageSize, rdBuf, nandLen, page_offset);
 8003fae:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <defThread+0xbac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8003fb6:	fbb2 f0f3 	udiv	r0, r2, r3
 8003fba:	4b59      	ldr	r3, [pc, #356]	; (8004120 <defThread+0xba8>)
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8003fc4:	4958      	ldr	r1, [pc, #352]	; (8004128 <defThread+0xbb0>)
 8003fc6:	f7fd fc89 	bl	80018dc <io_nand_read>
				}
				break;
 8003fca:	e11a      	b.n	8004202 <defThread+0xc8a>
				/*case cmdNext:
					if (dbg != logOff) Report(1, "Read next nand adr:0x%X len:%lu%s", nandAdr, nandLen, eol);
					nand_show = 2;
				break;*/
				case cmdErase:
					if (!qcmd.attr) {
 8003fcc:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003fd0:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8003fd4:	785b      	ldrb	r3, [r3, #1]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d12a      	bne.n	8004030 <defThread+0xab8>
						uint32_t bk = nandBlk;// * chipConf.PageSize;
 8003fda:	4b54      	ldr	r3, [pc, #336]	; (800412c <defThread+0xbb4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
						io_nand_block_erase(bk);
 8003fe2:	f8d7 0454 	ldr.w	r0, [r7, #1108]	; 0x454
 8003fe6:	f7fd fcb5 	bl	8001954 <io_nand_block_erase>
						if (dbg != logOff) {
 8003fea:	4b47      	ldr	r3, [pc, #284]	; (8004108 <defThread+0xb90>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 8102 	beq.w	80041f8 <defThread+0xc80>
							if (devError & devNAND) {
 8003ff4:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <defThread+0xbb8>)
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00b      	beq.n	8004018 <defThread+0xaa0>
								Report(1, "Erase nand block:%lu addr:%u Error !%s", nandBlk, bk, eol);
 8004000:	4b4a      	ldr	r3, [pc, #296]	; (800412c <defThread+0xbb4>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b41      	ldr	r3, [pc, #260]	; (800410c <defThread+0xb94>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800400e:	4949      	ldr	r1, [pc, #292]	; (8004134 <defThread+0xbbc>)
 8004010:	2001      	movs	r0, #1
 8004012:	f7fe fecb 	bl	8002dac <Report>
						iBlk = 0;
						next_block_erase = 1;
						if (dbg != logOff) Report(1, "Erase chip ");
						stik = HAL_GetTick();
					}
				break;
 8004016:	e0ef      	b.n	80041f8 <defThread+0xc80>
								Report(1, "Erase nand block:%lu addr:%u Ok !%s", nandBlk, bk, eol);
 8004018:	4b44      	ldr	r3, [pc, #272]	; (800412c <defThread+0xbb4>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b3b      	ldr	r3, [pc, #236]	; (800410c <defThread+0xb94>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8004026:	4944      	ldr	r1, [pc, #272]	; (8004138 <defThread+0xbc0>)
 8004028:	2001      	movs	r0, #1
 800402a:	f7fe febf 	bl	8002dac <Report>
				break;
 800402e:	e0e3      	b.n	80041f8 <defThread+0xc80>
						iBlk = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
						next_block_erase = 1;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 348f 	strb.w	r3, [r7, #1167]	; 0x48f
						if (dbg != logOff) Report(1, "Erase chip ");
 800403c:	4b32      	ldr	r3, [pc, #200]	; (8004108 <defThread+0xb90>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <defThread+0xad4>
 8004044:	493d      	ldr	r1, [pc, #244]	; (800413c <defThread+0xbc4>)
 8004046:	2001      	movs	r0, #1
 8004048:	f7fe feb0 	bl	8002dac <Report>
						stik = HAL_GetTick();
 800404c:	f001 f958 	bl	8005300 <HAL_GetTick>
 8004050:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
				break;
 8004054:	e0d0      	b.n	80041f8 <defThread+0xc80>
				case cmdCheck:
				{
					uint32_t adr = nandPage * chipConf.PageSize;//nand_PageToBlock(nandPage);
 8004056:	4b33      	ldr	r3, [pc, #204]	; (8004124 <defThread+0xbac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a39      	ldr	r2, [pc, #228]	; (8004140 <defThread+0xbc8>)
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
					if (!pageIsEmpty(adr)) {
 8004066:	f8d7 0458 	ldr.w	r0, [r7, #1112]	; 0x458
 800406a:	f7fe f817 	bl	800209c <pageIsEmpty>
 800406e:	4603      	mov	r3, r0
 8004070:	f083 0301 	eor.w	r3, r3, #1
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d010      	beq.n	800409c <defThread+0xb24>
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu Not empty%s", nandPage, adr, eol);
 800407a:	4b23      	ldr	r3, [pc, #140]	; (8004108 <defThread+0xb90>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80bc 	beq.w	80041fc <defThread+0xc84>
 8004084:	4b2e      	ldr	r3, [pc, #184]	; (8004140 <defThread+0xbc8>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b20      	ldr	r3, [pc, #128]	; (800410c <defThread+0xb94>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8004092:	492c      	ldr	r1, [pc, #176]	; (8004144 <defThread+0xbcc>)
 8004094:	2001      	movs	r0, #1
 8004096:	f7fe fe89 	bl	8002dac <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu is Empty%s", nandPage, adr, eol);
					}
				}
				break;
 800409a:	e0af      	b.n	80041fc <defThread+0xc84>
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu is Empty%s", nandPage, adr, eol);
 800409c:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <defThread+0xb90>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80ab 	beq.w	80041fc <defThread+0xc84>
 80040a6:	4b26      	ldr	r3, [pc, #152]	; (8004140 <defThread+0xbc8>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b18      	ldr	r3, [pc, #96]	; (800410c <defThread+0xb94>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80040b4:	4924      	ldr	r1, [pc, #144]	; (8004148 <defThread+0xbd0>)
 80040b6:	2001      	movs	r0, #1
 80040b8:	f7fe fe78 	bl	8002dac <Report>
				break;
 80040bc:	e09e      	b.n	80041fc <defThread+0xc84>
				case cmdWrite:
				{
					uint32_t wadr = nandAdr / chipConf.PageSize;
 80040be:	4b17      	ldr	r3, [pc, #92]	; (800411c <defThread+0xba4>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4b18      	ldr	r3, [pc, #96]	; (8004124 <defThread+0xbac>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
					if (!pageIsEmpty(wadr)) {
 80040ce:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 80040d2:	f7fd ffe3 	bl	800209c <pageIsEmpty>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f083 0301 	eor.w	r3, r3, #1
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d038      	beq.n	8004154 <defThread+0xbdc>
						io_nand_block_erase(wadr);
 80040e2:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 80040e6:	f7fd fc35 	bl	8001954 <io_nand_block_erase>
						sprintf(stx, "Erase nand addr:%lu done", wadr + devAdr);
 80040ea:	4b18      	ldr	r3, [pc, #96]	; (800414c <defThread+0xbd4>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80040f2:	4413      	add	r3, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	4916      	ldr	r1, [pc, #88]	; (8004150 <defThread+0xbd8>)
 80040f8:	4802      	ldr	r0, [pc, #8]	; (8004104 <defThread+0xb8c>)
 80040fa:	f00d f873 	bl	80111e4 <siprintf>
 80040fe:	e033      	b.n	8004168 <defThread+0xbf0>
 8004100:	20000064 	.word	0x20000064
 8004104:	200024ec 	.word	0x200024ec
 8004108:	20000068 	.word	0x20000068
 800410c:	20000004 	.word	0x20000004
 8004110:	08012538 	.word	0x08012538
 8004114:	08012554 	.word	0x08012554
 8004118:	08012570 	.word	0x08012570
 800411c:	200014b4 	.word	0x200014b4
 8004120:	200014b8 	.word	0x200014b8
 8004124:	200014d0 	.word	0x200014d0
 8004128:	200014e8 	.word	0x200014e8
 800412c:	200014bc 	.word	0x200014bc
 8004130:	20000490 	.word	0x20000490
 8004134:	08012590 	.word	0x08012590
 8004138:	080125b8 	.word	0x080125b8
 800413c:	080125dc 	.word	0x080125dc
 8004140:	200014c0 	.word	0x200014c0
 8004144:	080125e8 	.word	0x080125e8
 8004148:	0801260c 	.word	0x0801260c
 800414c:	200014b0 	.word	0x200014b0
 8004150:	0801262c 	.word	0x0801262c
					} else {
						sprintf(stx, "Addr:%lu is Empty", wadr + devAdr);
 8004154:	4b80      	ldr	r3, [pc, #512]	; (8004358 <defThread+0xde0>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800415c:	4413      	add	r3, r2
 800415e:	461a      	mov	r2, r3
 8004160:	497e      	ldr	r1, [pc, #504]	; (800435c <defThread+0xde4>)
 8004162:	487f      	ldr	r0, [pc, #508]	; (8004360 <defThread+0xde8>)
 8004164:	f00d f83e 	bl	80111e4 <siprintf>
					}
					if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8004168:	4b7e      	ldr	r3, [pc, #504]	; (8004364 <defThread+0xdec>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d006      	beq.n	800417e <defThread+0xc06>
 8004170:	4b7d      	ldr	r3, [pc, #500]	; (8004368 <defThread+0xdf0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a7a      	ldr	r2, [pc, #488]	; (8004360 <defThread+0xde8>)
 8004176:	497d      	ldr	r1, [pc, #500]	; (800436c <defThread+0xdf4>)
 8004178:	2001      	movs	r0, #1
 800417a:	f7fe fe17 	bl	8002dac <Report>
					memset(wrBuf, EMPTY, chipConf.PageSize);
 800417e:	4b7c      	ldr	r3, [pc, #496]	; (8004370 <defThread+0xdf8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	21ff      	movs	r1, #255	; 0xff
 8004186:	487b      	ldr	r0, [pc, #492]	; (8004374 <defThread+0xdfc>)
 8004188:	f00c ff16 	bl	8010fb8 <memset>
					uint32_t ofs = 0;//(nandAdr - devAdr) % chipConf.PageSize;
 800418c:	2300      	movs	r3, #0
 800418e:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
					memset(wrBuf /* + ofs*/, nandByte, nandLen);
 8004192:	4b79      	ldr	r3, [pc, #484]	; (8004378 <defThread+0xe00>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	4619      	mov	r1, r3
 8004198:	4b78      	ldr	r3, [pc, #480]	; (800437c <defThread+0xe04>)
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	4875      	ldr	r0, [pc, #468]	; (8004374 <defThread+0xdfc>)
 80041a0:	f00c ff0a 	bl	8010fb8 <memset>
					////showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
					//if (NAND_Write_Page_8b(nandPort, &addr, wrBuf, nandLen, ofs) != HAL_OK) devError |= devNAND;
					//if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%lu (page:%lu blk:%lu)%s",
					//	      	  	  	  	  	  nandAdr, nandByte, nandLen, ofs, addr.Page, addr.Block, eol);
					io_nand_write(wadr, wrBuf, nandLen, ofs);
 80041a4:	4b75      	ldr	r3, [pc, #468]	; (800437c <defThread+0xe04>)
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80041ae:	4971      	ldr	r1, [pc, #452]	; (8004374 <defThread+0xdfc>)
 80041b0:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 80041b4:	f7fd fbb0 	bl	8001918 <io_nand_write>
					if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%lu%s",
 80041b8:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <defThread+0xdec>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01f      	beq.n	8004200 <defThread+0xc88>
 80041c0:	4b6f      	ldr	r3, [pc, #444]	; (8004380 <defThread+0xe08>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b64      	ldr	r3, [pc, #400]	; (8004358 <defThread+0xde0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	441a      	add	r2, r3
 80041ca:	4b6b      	ldr	r3, [pc, #428]	; (8004378 <defThread+0xe00>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	4b6a      	ldr	r3, [pc, #424]	; (800437c <defThread+0xe04>)
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	4619      	mov	r1, r3
 80041d6:	4b64      	ldr	r3, [pc, #400]	; (8004368 <defThread+0xdf0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	9302      	str	r3, [sp, #8]
 80041dc:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	9100      	str	r1, [sp, #0]
 80041e4:	4603      	mov	r3, r0
 80041e6:	4967      	ldr	r1, [pc, #412]	; (8004384 <defThread+0xe0c>)
 80041e8:	2001      	movs	r0, #1
 80041ea:	f7fe fddf 	bl	8002dac <Report>
							nandAdr + devAdr, nandByte, nandLen, ofs, eol);
				}
				break;
 80041ee:	e007      	b.n	8004200 <defThread+0xc88>
				break;
 80041f0:	bf00      	nop
 80041f2:	e006      	b.n	8004202 <defThread+0xc8a>
				break;
 80041f4:	bf00      	nop
 80041f6:	e004      	b.n	8004202 <defThread+0xc8a>
				break;
 80041f8:	bf00      	nop
 80041fa:	e002      	b.n	8004202 <defThread+0xc8a>
				break;
 80041fc:	bf00      	nop
 80041fe:	e000      	b.n	8004202 <defThread+0xc8a>
				break;
 8004200:	bf00      	nop
			}
			if (nand_show) {
 8004202:	f897 3483 	ldrb.w	r3, [r7, #1155]	; 0x483
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00d      	beq.n	8004226 <defThread+0xcae>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 800420a:	4b5d      	ldr	r3, [pc, #372]	; (8004380 <defThread+0xe08>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4b5b      	ldr	r3, [pc, #364]	; (800437c <defThread+0xe04>)
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	461c      	mov	r4, r3
 8004214:	f897 1482 	ldrb.w	r1, [r7, #1154]	; 0x482
 8004218:	f897 0483 	ldrb.w	r0, [r7, #1155]	; 0x483
 800421c:	4b5a      	ldr	r3, [pc, #360]	; (8004388 <defThread+0xe10>)
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	4623      	mov	r3, r4
 8004222:	f7ff f8e7 	bl	80033f4 <showBuf>
			}
		}

		// Erase all blocks (chipConf.BlockNbr)
		if (next_block_erase) {
 8004226:	f897 348f 	ldrb.w	r3, [r7, #1167]	; 0x48f
 800422a:	2b00      	cmp	r3, #0
 800422c:	d058      	beq.n	80042e0 <defThread+0xd68>
			byte = dbg;
 800422e:	4b4d      	ldr	r3, [pc, #308]	; (8004364 <defThread+0xdec>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	f887 3469 	strb.w	r3, [r7, #1129]	; 0x469
			dbg = logOff;//disable print log !
 8004236:	4b4b      	ldr	r3, [pc, #300]	; (8004364 <defThread+0xdec>)
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
			io_nand_block_erase(iBlk);
 800423c:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 8004240:	f7fd fb88 	bl	8001954 <io_nand_block_erase>
			dbg = byte;//restore dbg value !
 8004244:	4a47      	ldr	r2, [pc, #284]	; (8004364 <defThread+0xdec>)
 8004246:	f897 3469 	ldrb.w	r3, [r7, #1129]	; 0x469
 800424a:	7013      	strb	r3, [r2, #0]
			if (devError & devNAND) {
 800424c:	4b4f      	ldr	r3, [pc, #316]	; (800438c <defThread+0xe14>)
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <defThread+0xce8>
				next_block_erase = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	f887 348f 	strb.w	r3, [r7, #1167]	; 0x48f
 800425e:	e01c      	b.n	800429a <defThread+0xd22>
			} else {
				if (!(iBlk % (chipConf.PageSize * 1024))) Report(0, ".");
 8004260:	4b43      	ldr	r3, [pc, #268]	; (8004370 <defThread+0xdf8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	029a      	lsls	r2, r3, #10
 8004266:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800426a:	fbb3 f1f2 	udiv	r1, r3, r2
 800426e:	fb01 f202 	mul.w	r2, r1, r2
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d103      	bne.n	8004280 <defThread+0xd08>
 8004278:	4945      	ldr	r1, [pc, #276]	; (8004390 <defThread+0xe18>)
 800427a:	2000      	movs	r0, #0
 800427c:	f7fe fd96 	bl	8002dac <Report>
				if (iBlk >= (chipConf.PlaneSize * chipConf.PlaneNbr)) next_block_erase = 0;
 8004280:	4b3b      	ldr	r3, [pc, #236]	; (8004370 <defThread+0xdf8>)
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	4a3a      	ldr	r2, [pc, #232]	; (8004370 <defThread+0xdf8>)
 8004286:	6912      	ldr	r2, [r2, #16]
 8004288:	fb02 f303 	mul.w	r3, r2, r3
 800428c:	f8d7 2488 	ldr.w	r2, [r7, #1160]	; 0x488
 8004290:	429a      	cmp	r2, r3
 8004292:	d302      	bcc.n	800429a <defThread+0xd22>
 8004294:	2300      	movs	r3, #0
 8004296:	f887 348f 	strb.w	r3, [r7, #1167]	; 0x48f
			}
			iBlk += chipConf.PageSize;
 800429a:	4b35      	ldr	r3, [pc, #212]	; (8004370 <defThread+0xdf8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8d7 2488 	ldr.w	r2, [r7, #1160]	; 0x488
 80042a2:	4413      	add	r3, r2
 80042a4:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
			if (!next_block_erase) {
 80042a8:	f897 348f 	ldrb.w	r3, [r7, #1167]	; 0x48f
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d117      	bne.n	80042e0 <defThread+0xd68>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 80042b0:	4b2c      	ldr	r3, [pc, #176]	; (8004364 <defThread+0xdec>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d013      	beq.n	80042e0 <defThread+0xd68>
 80042b8:	f001 f822 	bl	8005300 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	4a33      	ldr	r2, [pc, #204]	; (8004394 <defThread+0xe1c>)
 80042c6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ca:	099a      	lsrs	r2, r3, #6
 80042cc:	4b26      	ldr	r3, [pc, #152]	; (8004368 <defThread+0xdf0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	4613      	mov	r3, r2
 80042d4:	f8d7 2488 	ldr.w	r2, [r7, #1160]	; 0x488
 80042d8:	492f      	ldr	r1, [pc, #188]	; (8004398 <defThread+0xe20>)
 80042da:	2000      	movs	r0, #0
 80042dc:	f7fe fd66 	bl	8002dac <Report>
			}
		}
		//
		osDelay(5);
 80042e0:	2005      	movs	r0, #5
 80042e2:	f009 f94f 	bl	800d584 <osDelay>
	while (loop) {
 80042e6:	f897 347d 	ldrb.w	r3, [r7, #1149]	; 0x47d
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f47f ab83 	bne.w	80039f6 <defThread+0x47e>
#ifdef SET_FAT_FS
	/*if (dir_open) {
		dirClose(dirName, &dir);
		dir_open = false;
	}*/
	if (mnt) {
 80042f0:	4b2a      	ldr	r3, [pc, #168]	; (800439c <defThread+0xe24>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d014      	beq.n	8004322 <defThread+0xdaa>
		f_mount(NULL, USERPath, 1);
 80042f8:	2201      	movs	r2, #1
 80042fa:	4929      	ldr	r1, [pc, #164]	; (80043a0 <defThread+0xe28>)
 80042fc:	2000      	movs	r0, #0
 80042fe:	f007 fbc5 	bl	800ba8c <f_mount>
		mnt = false;
 8004302:	4b26      	ldr	r3, [pc, #152]	; (800439c <defThread+0xe24>)
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
		if (dbg != logOff) Report(1, "Umount drive '%.*s'%s", sizeof(USERPath), USERPath, eol);
 8004308:	4b16      	ldr	r3, [pc, #88]	; (8004364 <defThread+0xdec>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <defThread+0xdaa>
 8004310:	4b15      	ldr	r3, [pc, #84]	; (8004368 <defThread+0xdf0>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <defThread+0xe28>)
 8004318:	2204      	movs	r2, #4
 800431a:	4922      	ldr	r1, [pc, #136]	; (80043a4 <defThread+0xe2c>)
 800431c:	2001      	movs	r0, #1
 800431e:	f7fe fd45 	bl	8002dac <Report>
	}
#endif

	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <defThread+0xdec>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d011      	beq.n	800434e <defThread+0xdd6>
 800432a:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <defThread+0xe30>)
 800432c:	681c      	ldr	r4, [r3, #0]
 800432e:	f00c fc29 	bl	8010b84 <xPortGetFreeHeapSize>
 8004332:	4602      	mov	r2, r0
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <defThread+0xdf0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	9302      	str	r3, [sp, #8]
 800433a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	9200      	str	r2, [sp, #0]
 8004342:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <defThread+0xe34>)
 8004344:	4622      	mov	r2, r4
 8004346:	491a      	ldr	r1, [pc, #104]	; (80043b0 <defThread+0xe38>)
 8004348:	2001      	movs	r0, #1
 800434a:	f7fe fd2f 	bl	8002dac <Report>
	osDelay(250);
 800434e:	20fa      	movs	r0, #250	; 0xfa
 8004350:	f009 f918 	bl	800d584 <osDelay>

	NVIC_SystemReset();
 8004354:	f7fd fb3c 	bl	80019d0 <__NVIC_SystemReset>
 8004358:	200014b0 	.word	0x200014b0
 800435c:	08012648 	.word	0x08012648
 8004360:	200024ec 	.word	0x200024ec
 8004364:	20000068 	.word	0x20000068
 8004368:	20000004 	.word	0x20000004
 800436c:	08012414 	.word	0x08012414
 8004370:	200014d0 	.word	0x200014d0
 8004374:	20001ce8 	.word	0x20001ce8
 8004378:	20000084 	.word	0x20000084
 800437c:	200014b8 	.word	0x200014b8
 8004380:	200014b4 	.word	0x200014b4
 8004384:	0801265c 	.word	0x0801265c
 8004388:	200014e8 	.word	0x200014e8
 800438c:	20000490 	.word	0x20000490
 8004390:	08012690 	.word	0x08012690
 8004394:	10624dd3 	.word	0x10624dd3
 8004398:	08012694 	.word	0x08012694
 800439c:	20003550 	.word	0x20003550
 80043a0:	20003db0 	.word	0x20003db0
 80043a4:	080126ac 	.word	0x080126ac
 80043a8:	20000000 	.word	0x20000000
 80043ac:	08014968 	.word	0x08014968
 80043b0:	080126c4 	.word	0x080126c4

080043b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b5b0      	push	{r4, r5, r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a10      	ldr	r2, [pc, #64]	; (8004404 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d102      	bne.n	80043cc <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80043c6:	f000 ff87 	bl	80052d8 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 80043ca:	e016      	b.n	80043fa <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d4:	d111      	bne.n	80043fa <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 80043d6:	f7fe fbb1 	bl	8002b3c <get_msCounter>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	f002 0403 	and.w	r4, r2, #3
 80043e2:	2500      	movs	r5, #0
 80043e4:	1ee3      	subs	r3, r4, #3
 80043e6:	432b      	orrs	r3, r5
 80043e8:	d105      	bne.n	80043f6 <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 80043ea:	f7fe fb99 	bl	8002b20 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 80043ee:	2180      	movs	r1, #128	; 0x80
 80043f0:	4805      	ldr	r0, [pc, #20]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80043f2:	f001 fe4e 	bl	8006092 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 80043f6:	f7fe fbaf 	bl	8002b58 <inc_msCounter>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bdb0      	pop	{r4, r5, r7, pc}
 8004402:	bf00      	nop
 8004404:	40010000 	.word	0x40010000
 8004408:	40020800 	.word	0x40020800

0800440c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	devError |= devSYS;
 8004412:	4b11      	ldr	r3, [pc, #68]	; (8004458 <Error_Handler+0x4c>)
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441a:	b29a      	uxth	r2, r3
 800441c:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <Error_Handler+0x4c>)
 800441e:	801a      	strh	r2, [r3, #0]

	int8_t cnt = 10;
 8004420:	230a      	movs	r3, #10
 8004422:	71fb      	strb	r3, [r7, #7]
	while (--cnt) {
 8004424:	e008      	b.n	8004438 <Error_Handler+0x2c>
		errLedOn(true);
 8004426:	2001      	movs	r0, #1
 8004428:	f7fe fb52 	bl	8002ad0 <errLedOn>
		errLedOn(false);
 800442c:	2000      	movs	r0, #0
 800442e:	f7fe fb4f 	bl	8002ad0 <errLedOn>
		HAL_Delay(150);
 8004432:	2096      	movs	r0, #150	; 0x96
 8004434:	f000 ff70 	bl	8005318 <HAL_Delay>
	while (--cnt) {
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	3b01      	subs	r3, #1
 800443c:	b2db      	uxtb	r3, r3
 800443e:	71fb      	strb	r3, [r7, #7]
 8004440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1ee      	bne.n	8004426 <Error_Handler+0x1a>
	}
	errLedOn(true);
 8004448:	2001      	movs	r0, #1
 800444a:	f7fe fb41 	bl	8002ad0 <errLedOn>

  /* USER CODE END Error_Handler_Debug */
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20000490 	.word	0x20000490

0800445c <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8004466:	2200      	movs	r2, #0
 8004468:	2104      	movs	r1, #4
 800446a:	480c      	ldr	r0, [pc, #48]	; (800449c <ST7789_WriteCommand+0x40>)
 800446c:	f001 fdf8 	bl	8006060 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <ST7789_WriteCommand+0x44>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	2396      	movs	r3, #150	; 0x96
 8004476:	1df9      	adds	r1, r7, #7
 8004478:	2201      	movs	r2, #1
 800447a:	f003 f8e0 	bl	800763e <HAL_SPI_Transmit>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d006      	beq.n	8004492 <ST7789_WriteCommand+0x36>
 8004484:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <ST7789_WriteCommand+0x48>)
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	f043 0310 	orr.w	r3, r3, #16
 800448c:	b29a      	uxth	r2, r3
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <ST7789_WriteCommand+0x48>)
 8004490:	801a      	strh	r2, [r3, #0]
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40020000 	.word	0x40020000
 80044a0:	2000006c 	.word	0x2000006c
 80044a4:	20000490 	.word	0x20000490

080044a8 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 80044b2:	2200      	movs	r2, #0
 80044b4:	2104      	movs	r1, #4
 80044b6:	480e      	ldr	r0, [pc, #56]	; (80044f0 <ST7789_WriteCommands+0x48>)
 80044b8:	f001 fdd2 	bl	8006060 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 80044bc:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <ST7789_WriteCommands+0x4c>)
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	2196      	movs	r1, #150	; 0x96
 80044c6:	460b      	mov	r3, r1
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	f003 f8b5 	bl	800763e <HAL_SPI_Transmit>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d006      	beq.n	80044e8 <ST7789_WriteCommands+0x40>
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <ST7789_WriteCommands+0x50>)
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	f043 0310 	orr.w	r3, r3, #16
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <ST7789_WriteCommands+0x50>)
 80044e6:	801a      	strh	r2, [r3, #0]
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40020000 	.word	0x40020000
 80044f4:	2000006c 	.word	0x2000006c
 80044f8:	20000490 	.word	0x20000490

080044fc <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 800450a:	2201      	movs	r2, #1
 800450c:	2104      	movs	r1, #4
 800450e:	481f      	ldr	r0, [pc, #124]	; (800458c <ST7789_WriteData+0x90>)
 8004510:	f001 fda6 	bl	8006060 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8004514:	e028      	b.n	8004568 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800451c:	4293      	cmp	r3, r2
 800451e:	bf28      	it	cs
 8004520:	4613      	movcs	r3, r2
 8004522:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8004524:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <ST7789_WriteData+0x94>)
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 800452a:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <ST7789_WriteData+0x98>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	89ba      	ldrh	r2, [r7, #12]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4618      	mov	r0, r3
 8004534:	f003 f9c0 	bl	80078b8 <HAL_SPI_Transmit_DMA>
 8004538:	4603      	mov	r3, r0
 800453a:	461a      	mov	r2, r3
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	4313      	orrs	r3, r2
 8004540:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8004542:	e002      	b.n	800454a <ST7789_WriteData+0x4e>
 8004544:	2001      	movs	r0, #1
 8004546:	f000 fee7 	bl	8005318 <HAL_Delay>
 800454a:	4b11      	ldr	r3, [pc, #68]	; (8004590 <ST7789_WriteData+0x94>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	f083 0301 	eor.w	r3, r3, #1
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f5      	bne.n	8004544 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8004558:	89bb      	ldrh	r3, [r7, #12]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8004560:	89bb      	ldrh	r3, [r7, #12]
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1d3      	bne.n	8004516 <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d006      	beq.n	8004582 <ST7789_WriteData+0x86>
 8004574:	4b08      	ldr	r3, [pc, #32]	; (8004598 <ST7789_WriteData+0x9c>)
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	f043 0310 	orr.w	r3, r3, #16
 800457c:	b29a      	uxth	r2, r3
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <ST7789_WriteData+0x9c>)
 8004580:	801a      	strh	r2, [r3, #0]
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40020000 	.word	0x40020000
 8004590:	20000061 	.word	0x20000061
 8004594:	2000006c 	.word	0x2000006c
 8004598:	20000490 	.word	0x20000490

0800459c <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 80045aa:	2201      	movs	r2, #1
 80045ac:	2104      	movs	r1, #4
 80045ae:	4814      	ldr	r0, [pc, #80]	; (8004600 <ST7789_WriteDataLine+0x64>)
 80045b0:	f001 fd56 	bl	8006060 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 80045b4:	4b13      	ldr	r3, [pc, #76]	; (8004604 <ST7789_WriteDataLine+0x68>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 80045ba:	4b13      	ldr	r3, [pc, #76]	; (8004608 <ST7789_WriteDataLine+0x6c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	b292      	uxth	r2, r2
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f003 f977 	bl	80078b8 <HAL_SPI_Transmit_DMA>
 80045ca:	4603      	mov	r3, r0
 80045cc:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 80045ce:	e002      	b.n	80045d6 <ST7789_WriteDataLine+0x3a>
 80045d0:	2001      	movs	r0, #1
 80045d2:	f000 fea1 	bl	8005318 <HAL_Delay>
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <ST7789_WriteDataLine+0x68>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	f083 0301 	eor.w	r3, r3, #1
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f5      	bne.n	80045d0 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d006      	beq.n	80045f8 <ST7789_WriteDataLine+0x5c>
 80045ea:	4b08      	ldr	r3, [pc, #32]	; (800460c <ST7789_WriteDataLine+0x70>)
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	f043 0310 	orr.w	r3, r3, #16
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <ST7789_WriteDataLine+0x70>)
 80045f6:	801a      	strh	r2, [r3, #0]
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40020000 	.word	0x40020000
 8004604:	20000061 	.word	0x20000061
 8004608:	2000006c 	.word	0x2000006c
 800460c:	20000490 	.word	0x20000490

08004610 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 800461a:	2201      	movs	r2, #1
 800461c:	2104      	movs	r1, #4
 800461e:	480c      	ldr	r0, [pc, #48]	; (8004650 <ST7789_WriteSmallData+0x40>)
 8004620:	f001 fd1e 	bl	8006060 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <ST7789_WriteSmallData+0x44>)
 8004626:	6818      	ldr	r0, [r3, #0]
 8004628:	2396      	movs	r3, #150	; 0x96
 800462a:	1df9      	adds	r1, r7, #7
 800462c:	2201      	movs	r2, #1
 800462e:	f003 f806 	bl	800763e <HAL_SPI_Transmit>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <ST7789_WriteSmallData+0x36>
 8004638:	4b07      	ldr	r3, [pc, #28]	; (8004658 <ST7789_WriteSmallData+0x48>)
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	f043 0310 	orr.w	r3, r3, #16
 8004640:	b29a      	uxth	r2, r3
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <ST7789_WriteSmallData+0x48>)
 8004644:	801a      	strh	r2, [r3, #0]
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40020000 	.word	0x40020000
 8004654:	2000006c 	.word	0x2000006c
 8004658:	20000490 	.word	0x20000490

0800465c <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <ipsOn+0x18>
 800466c:	2029      	movs	r0, #41	; 0x29
 800466e:	f7ff fef5 	bl	800445c <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8004672:	e002      	b.n	800467a <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8004674:	2028      	movs	r0, #40	; 0x28
 8004676:	f7ff fef1 	bl	800445c <ST7789_WriteCommand>
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800468e:	2036      	movs	r0, #54	; 0x36
 8004690:	f7ff fee4 	bl	800445c <ST7789_WriteCommand>
	switch (m) {
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	2b03      	cmp	r3, #3
 8004698:	d81a      	bhi.n	80046d0 <ST7789_SetRotation+0x4c>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <ST7789_SetRotation+0x1c>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046b1 	.word	0x080046b1
 80046a4:	080046b9 	.word	0x080046b9
 80046a8:	080046c1 	.word	0x080046c1
 80046ac:	080046c9 	.word	0x080046c9
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80046b0:	20c0      	movs	r0, #192	; 0xc0
 80046b2:	f7ff ffad 	bl	8004610 <ST7789_WriteSmallData>
		break;
 80046b6:	e00c      	b.n	80046d2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80046b8:	20a0      	movs	r0, #160	; 0xa0
 80046ba:	f7ff ffa9 	bl	8004610 <ST7789_WriteSmallData>
		break;
 80046be:	e008      	b.n	80046d2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80046c0:	2000      	movs	r0, #0
 80046c2:	f7ff ffa5 	bl	8004610 <ST7789_WriteSmallData>
		break;
 80046c6:	e004      	b.n	80046d2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80046c8:	2060      	movs	r0, #96	; 0x60
 80046ca:	f7ff ffa1 	bl	8004610 <ST7789_WriteSmallData>
		break;
 80046ce:	e000      	b.n	80046d2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80046d0:	bf00      	nop
	}
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop

080046dc <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80046dc:	b590      	push	{r4, r7, lr}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4604      	mov	r4, r0
 80046e4:	4608      	mov	r0, r1
 80046e6:	4611      	mov	r1, r2
 80046e8:	461a      	mov	r2, r3
 80046ea:	4623      	mov	r3, r4
 80046ec:	80fb      	strh	r3, [r7, #6]
 80046ee:	4603      	mov	r3, r0
 80046f0:	80bb      	strh	r3, [r7, #4]
 80046f2:	460b      	mov	r3, r1
 80046f4:	807b      	strh	r3, [r7, #2]
 80046f6:	4613      	mov	r3, r2
 80046f8:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	82fb      	strh	r3, [r7, #22]
 80046fe:	887b      	ldrh	r3, [r7, #2]
 8004700:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8004702:	88bb      	ldrh	r3, [r7, #4]
 8004704:	827b      	strh	r3, [r7, #18]
 8004706:	883b      	ldrh	r3, [r7, #0]
 8004708:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800470a:	202a      	movs	r0, #42	; 0x2a
 800470c:	f7ff fea6 	bl	800445c <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8004710:	8afb      	ldrh	r3, [r7, #22]
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	b29b      	uxth	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	733b      	strb	r3, [r7, #12]
 800471a:	8afb      	ldrh	r3, [r7, #22]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	737b      	strb	r3, [r7, #13]
 8004720:	8abb      	ldrh	r3, [r7, #20]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	b29b      	uxth	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	73bb      	strb	r3, [r7, #14]
 800472a:	8abb      	ldrh	r3, [r7, #20]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8004730:	f107 030c 	add.w	r3, r7, #12
 8004734:	2104      	movs	r1, #4
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fee0 	bl	80044fc <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800473c:	202b      	movs	r0, #43	; 0x2b
 800473e:	f7ff fe8d 	bl	800445c <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8004742:	8a7b      	ldrh	r3, [r7, #18]
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	b29b      	uxth	r3, r3
 8004748:	b2db      	uxtb	r3, r3
 800474a:	723b      	strb	r3, [r7, #8]
 800474c:	8a7b      	ldrh	r3, [r7, #18]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	727b      	strb	r3, [r7, #9]
 8004752:	8a3b      	ldrh	r3, [r7, #16]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	b29b      	uxth	r3, r3
 8004758:	b2db      	uxtb	r3, r3
 800475a:	72bb      	strb	r3, [r7, #10]
 800475c:	8a3b      	ldrh	r3, [r7, #16]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8004762:	f107 0308 	add.w	r3, r7, #8
 8004766:	2104      	movs	r1, #4
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fec7 	bl	80044fc <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 800476e:	202c      	movs	r0, #44	; 0x2c
 8004770:	f7ff fe74 	bl	800445c <ST7789_WriteCommand>
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd90      	pop	{r4, r7, pc}

0800477c <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8004780:	2014      	movs	r0, #20
 8004782:	f000 fdc9 	bl	8005318 <HAL_Delay>
    ST7789_RST_Clr();
 8004786:	2200      	movs	r2, #0
 8004788:	2102      	movs	r1, #2
 800478a:	4808      	ldr	r0, [pc, #32]	; (80047ac <ST7789_Reset+0x30>)
 800478c:	f001 fc68 	bl	8006060 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8004790:	200a      	movs	r0, #10
 8004792:	f000 fdc1 	bl	8005318 <HAL_Delay>
    ST7789_RST_Set();
 8004796:	2201      	movs	r2, #1
 8004798:	2102      	movs	r1, #2
 800479a:	4804      	ldr	r0, [pc, #16]	; (80047ac <ST7789_Reset+0x30>)
 800479c:	f001 fc60 	bl	8006060 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 80047a0:	2014      	movs	r0, #20
 80047a2:	f000 fdb9 	bl	8005318 <HAL_Delay>
}
 80047a6:	bf00      	nop
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40020000 	.word	0x40020000

080047b0 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 80047b0:	b590      	push	{r4, r7, lr}
 80047b2:	b08f      	sub	sp, #60	; 0x3c
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80047ba:	203a      	movs	r0, #58	; 0x3a
 80047bc:	f7ff fe4e 	bl	800445c <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 80047c0:	2055      	movs	r0, #85	; 0x55
 80047c2:	f7ff ff25 	bl	8004610 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80047c6:	20b2      	movs	r0, #178	; 0xb2
 80047c8:	f7ff fe48 	bl	800445c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80047cc:	4a3a      	ldr	r2, [pc, #232]	; (80048b8 <ST7789_Init+0x108>)
 80047ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047d6:	6018      	str	r0, [r3, #0]
 80047d8:	3304      	adds	r3, #4
 80047da:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80047dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047e0:	2105      	movs	r1, #5
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff fe8a 	bl	80044fc <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80047e8:	2003      	movs	r0, #3
 80047ea:	f7ff ff4b 	bl	8004684 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 80047ee:	20b7      	movs	r0, #183	; 0xb7
 80047f0:	f7ff fe34 	bl	800445c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80047f4:	2035      	movs	r0, #53	; 0x35
 80047f6:	f7ff ff0b 	bl	8004610 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80047fa:	20bb      	movs	r0, #187	; 0xbb
 80047fc:	f7ff fe2e 	bl	800445c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8004800:	2019      	movs	r0, #25
 8004802:	f7ff ff05 	bl	8004610 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8004806:	20c0      	movs	r0, #192	; 0xc0
 8004808:	f7ff fe28 	bl	800445c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 800480c:	202c      	movs	r0, #44	; 0x2c
 800480e:	f7ff feff 	bl	8004610 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8004812:	20c2      	movs	r0, #194	; 0xc2
 8004814:	f7ff fe22 	bl	800445c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8004818:	2001      	movs	r0, #1
 800481a:	f7ff fef9 	bl	8004610 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 800481e:	20ff      	movs	r0, #255	; 0xff
 8004820:	f7ff fef6 	bl	8004610 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8004824:	20c3      	movs	r0, #195	; 0xc3
 8004826:	f7ff fe19 	bl	800445c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800482a:	2012      	movs	r0, #18
 800482c:	f7ff fef0 	bl	8004610 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8004830:	20c4      	movs	r0, #196	; 0xc4
 8004832:	f7ff fe13 	bl	800445c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8004836:	2020      	movs	r0, #32
 8004838:	f7ff feea 	bl	8004610 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 800483c:	20c6      	movs	r0, #198	; 0xc6
 800483e:	f7ff fe0d 	bl	800445c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8004842:	200f      	movs	r0, #15
 8004844:	f7ff fee4 	bl	8004610 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8004848:	20d0      	movs	r0, #208	; 0xd0
 800484a:	f7ff fe07 	bl	800445c <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 800484e:	20a4      	movs	r0, #164	; 0xa4
 8004850:	f7ff fede 	bl	8004610 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8004854:	20a1      	movs	r0, #161	; 0xa1
 8004856:	f7ff fedb 	bl	8004610 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800485a:	20e0      	movs	r0, #224	; 0xe0
 800485c:	f7ff fdfe 	bl	800445c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8004860:	4b16      	ldr	r3, [pc, #88]	; (80048bc <ST7789_Init+0x10c>)
 8004862:	f107 041c 	add.w	r4, r7, #28
 8004866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004868:	c407      	stmia	r4!, {r0, r1, r2}
 800486a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800486c:	f107 031c 	add.w	r3, r7, #28
 8004870:	210e      	movs	r1, #14
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff fe42 	bl	80044fc <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8004878:	20e1      	movs	r0, #225	; 0xe1
 800487a:	f7ff fdef 	bl	800445c <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800487e:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <ST7789_Init+0x110>)
 8004880:	f107 040c 	add.w	r4, r7, #12
 8004884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004886:	c407      	stmia	r4!, {r0, r1, r2}
 8004888:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800488a:	f107 030c 	add.w	r3, r7, #12
 800488e:	210e      	movs	r1, #14
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fe33 	bl	80044fc <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <ST7789_Init+0x114>)
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 800489a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800489e:	2104      	movs	r1, #4
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fe01 	bl	80044a8 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 f80d 	bl	80048c8 <ST7789_Fill_Color>
}
 80048ae:	bf00      	nop
 80048b0:	373c      	adds	r7, #60	; 0x3c
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd90      	pop	{r4, r7, pc}
 80048b6:	bf00      	nop
 80048b8:	080126f0 	.word	0x080126f0
 80048bc:	080126f8 	.word	0x080126f8
 80048c0:	08012708 	.word	0x08012708
 80048c4:	28131121 	.word	0x28131121

080048c8 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b0fc      	sub	sp, #496	; 0x1f0
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4602      	mov	r2, r0
 80048d0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80048d4:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80048d8:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80048da:	23ef      	movs	r3, #239	; 0xef
 80048dc:	22ef      	movs	r2, #239	; 0xef
 80048de:	2100      	movs	r1, #0
 80048e0:	2000      	movs	r0, #0
 80048e2:	f7ff fefb 	bl	80046dc <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 80048e6:	2300      	movs	r3, #0
 80048e8:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 80048ec:	2300      	movs	r3, #0
 80048ee:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80048f2:	e024      	b.n	800493e <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 80048f4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80048f8:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	b29b      	uxth	r3, r3
 8004902:	b21a      	sxth	r2, r3
 8004904:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004908:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	b21b      	sxth	r3, r3
 8004912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004916:	b21b      	sxth	r3, r3
 8004918:	4313      	orrs	r3, r2
 800491a:	b219      	sxth	r1, r3
 800491c:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004920:	f107 020c 	add.w	r2, r7, #12
 8004924:	4413      	add	r3, r2
 8004926:	b28a      	uxth	r2, r1
 8004928:	801a      	strh	r2, [r3, #0]
		i += 2;
 800492a:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 800492e:	3302      	adds	r3, #2
 8004930:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8004934:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004938:	3301      	adds	r3, #1
 800493a:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800493e:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004942:	2bef      	cmp	r3, #239	; 0xef
 8004944:	d9d6      	bls.n	80048f4 <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 8004946:	2300      	movs	r3, #0
 8004948:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800494c:	e00b      	b.n	8004966 <ST7789_Fill_Color+0x9e>
 800494e:	f107 030c 	add.w	r3, r7, #12
 8004952:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fe20 	bl	800459c <ST7789_WriteDataLine>
 800495c:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004960:	3301      	adds	r3, #1
 8004962:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004966:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800496a:	2bef      	cmp	r3, #239	; 0xef
 800496c:	d9ef      	bls.n	800494e <ST7789_Fill_Color+0x86>

//#endif
}
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800497a:	b590      	push	{r4, r7, lr}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	4604      	mov	r4, r0
 8004982:	4608      	mov	r0, r1
 8004984:	4611      	mov	r1, r2
 8004986:	461a      	mov	r2, r3
 8004988:	4623      	mov	r3, r4
 800498a:	80fb      	strh	r3, [r7, #6]
 800498c:	4603      	mov	r3, r0
 800498e:	80bb      	strh	r3, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	807b      	strh	r3, [r7, #2]
 8004994:	4613      	mov	r3, r2
 8004996:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8004998:	887b      	ldrh	r3, [r7, #2]
 800499a:	2bef      	cmp	r3, #239	; 0xef
 800499c:	d82b      	bhi.n	80049f6 <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 800499e:	883b      	ldrh	r3, [r7, #0]
 80049a0:	2bef      	cmp	r3, #239	; 0xef
 80049a2:	d828      	bhi.n	80049f6 <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 80049a4:	8c3b      	ldrh	r3, [r7, #32]
 80049a6:	0a1b      	lsrs	r3, r3, #8
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	723b      	strb	r3, [r7, #8]
 80049ae:	8c3b      	ldrh	r3, [r7, #32]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80049b4:	883b      	ldrh	r3, [r7, #0]
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	88b9      	ldrh	r1, [r7, #4]
 80049ba:	88f8      	ldrh	r0, [r7, #6]
 80049bc:	f7ff fe8e 	bl	80046dc <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 80049c0:	88bb      	ldrh	r3, [r7, #4]
 80049c2:	81fb      	strh	r3, [r7, #14]
 80049c4:	e012      	b.n	80049ec <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	81bb      	strh	r3, [r7, #12]
 80049ca:	e008      	b.n	80049de <ST7789_Fill+0x64>
 80049cc:	f107 0308 	add.w	r3, r7, #8
 80049d0:	2102      	movs	r1, #2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fd92 	bl	80044fc <ST7789_WriteData>
 80049d8:	89bb      	ldrh	r3, [r7, #12]
 80049da:	3301      	adds	r3, #1
 80049dc:	81bb      	strh	r3, [r7, #12]
 80049de:	89ba      	ldrh	r2, [r7, #12]
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d9f2      	bls.n	80049cc <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 80049e6:	89fb      	ldrh	r3, [r7, #14]
 80049e8:	3301      	adds	r3, #1
 80049ea:	81fb      	strh	r3, [r7, #14]
 80049ec:	89fa      	ldrh	r2, [r7, #14]
 80049ee:	883b      	ldrh	r3, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d9e8      	bls.n	80049c6 <ST7789_Fill+0x4c>
 80049f4:	e000      	b.n	80049f8 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80049f6:	bf00      	nop
	}
}
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd90      	pop	{r4, r7, pc}

080049fe <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80049fe:	b082      	sub	sp, #8
 8004a00:	b590      	push	{r4, r7, lr}
 8004a02:	b089      	sub	sp, #36	; 0x24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	637b      	str	r3, [r7, #52]	; 0x34
 8004a08:	4603      	mov	r3, r0
 8004a0a:	80fb      	strh	r3, [r7, #6]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	80bb      	strh	r3, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8004a14:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29c      	uxth	r4, r3
 8004a24:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	88bb      	ldrh	r3, [r7, #4]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	88b9      	ldrh	r1, [r7, #4]
 8004a36:	88f8      	ldrh	r0, [r7, #6]
 8004a38:	4622      	mov	r2, r4
 8004a3a:	f7ff fe4f 	bl	80046dc <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8004a3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a40:	0a1b      	lsrs	r3, r3, #8
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	733b      	strb	r3, [r7, #12]
 8004a48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8004a4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	723b      	strb	r3, [r7, #8]
 8004a5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	e02f      	b.n	8004acc <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8004a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	3b20      	subs	r3, #32
 8004a72:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	440b      	add	r3, r1
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4413      	add	r3, r2
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	e015      	b.n	8004aba <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <ST7789_WriteChar+0xa8>
				uk = cdata;
 8004a9e:	f107 030c 	add.w	r3, r7, #12
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e002      	b.n	8004aac <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 8004aa6:	f107 0308 	add.w	r3, r7, #8
 8004aaa:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 8004aac:	2102      	movs	r1, #2
 8004aae:	6978      	ldr	r0, [r7, #20]
 8004ab0:	f7ff fd24 	bl	80044fc <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004abe:	461a      	mov	r2, r3
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d3e3      	bcc.n	8004a8e <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d3c9      	bcc.n	8004a6c <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3724      	adds	r7, #36	; 0x24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004ae4:	b002      	add	sp, #8
 8004ae6:	4770      	bx	lr

08004ae8 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004ae8:	b082      	sub	sp, #8
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af04      	add	r7, sp, #16
 8004af0:	603a      	str	r2, [r7, #0]
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	4603      	mov	r3, r0
 8004af6:	80fb      	strh	r3, [r7, #6]
 8004af8:	460b      	mov	r3, r1
 8004afa:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d03f      	beq.n	8004b82 <ST7789_WriteString+0x9a>

	while (*str) {
 8004b02:	e039      	b.n	8004b78 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	7d3a      	ldrb	r2, [r7, #20]
 8004b08:	4413      	add	r3, r2
 8004b0a:	2bef      	cmp	r3, #239	; 0xef
 8004b0c:	dd13      	ble.n	8004b36 <ST7789_WriteString+0x4e>
			x = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004b12:	7d7b      	ldrb	r3, [r7, #21]
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	88bb      	ldrh	r3, [r7, #4]
 8004b18:	4413      	add	r3, r2
 8004b1a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8004b1c:	88bb      	ldrh	r3, [r7, #4]
 8004b1e:	7d7a      	ldrb	r2, [r7, #21]
 8004b20:	4413      	add	r3, r2
 8004b22:	2bef      	cmp	r3, #239	; 0xef
 8004b24:	dc2f      	bgt.n	8004b86 <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d103      	bne.n	8004b36 <ST7789_WriteString+0x4e>
				str++;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	3301      	adds	r3, #1
 8004b32:	603b      	str	r3, [r7, #0]
				continue;
 8004b34:	e020      	b.n	8004b78 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b0a      	cmp	r3, #10
 8004b3c:	d012      	beq.n	8004b64 <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	88b9      	ldrh	r1, [r7, #4]
 8004b44:	88f8      	ldrh	r0, [r7, #6]
 8004b46:	8c3b      	ldrh	r3, [r7, #32]
 8004b48:	9302      	str	r3, [sp, #8]
 8004b4a:	8bbb      	ldrh	r3, [r7, #28]
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f7ff ff53 	bl	80049fe <ST7789_WriteChar>
			x += font.width;
 8004b58:	7d3b      	ldrb	r3, [r7, #20]
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	4413      	add	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
 8004b62:	e006      	b.n	8004b72 <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004b68:	7d7b      	ldrb	r3, [r7, #21]
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	88bb      	ldrh	r3, [r7, #4]
 8004b6e:	4413      	add	r3, r2
 8004b70:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	3301      	adds	r3, #1
 8004b76:	603b      	str	r3, [r7, #0]
	while (*str) {
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1c1      	bne.n	8004b04 <ST7789_WriteString+0x1c>
 8004b80:	e002      	b.n	8004b88 <ST7789_WriteString+0xa0>
	if (!str) return;
 8004b82:	bf00      	nop
 8004b84:	e000      	b.n	8004b88 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 8004b86:	bf00      	nop
	}
}
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b90:	b002      	add	sp, #8
 8004b92:	4770      	bx	lr

08004b94 <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b0a4      	sub	sp, #144	; 0x90
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	f107 0310 	add.w	r3, r7, #16
 8004ba8:	227c      	movs	r2, #124	; 0x7c
 8004baa:	2100      	movs	r1, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f00c fa03 	bl	8010fb8 <memset>

	memset(st, 0x20, 127);
 8004bb2:	f107 030c 	add.w	r3, r7, #12
 8004bb6:	227f      	movs	r2, #127	; 0x7f
 8004bb8:	2120      	movs	r1, #32
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f00c f9fc 	bl	8010fb8 <memset>
	int8_t k = strlen(str);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fb fb05 	bl	80001d0 <strlen>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 8004bcc:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004bd0:	887b      	ldrh	r3, [r7, #2]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	da25      	bge.n	8004c22 <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 8004bd6:	887a      	ldrh	r2, [r7, #2]
 8004bd8:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	0fda      	lsrs	r2, r3, #31
 8004be0:	4413      	add	r3, r2
 8004be2:	105b      	asrs	r3, r3, #1
 8004be4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8004be8:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004bec:	f107 020c 	add.w	r2, r7, #12
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f00c f9cf 	bl	8010f9c <memcpy>
		st[k + n*2 + 1] = '\0';
 8004bfe:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004c02:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4413      	add	r3, r2
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	3390      	adds	r3, #144	; 0x90
 8004c0e:	443b      	add	r3, r7
 8004c10:	2200      	movs	r2, #0
 8004c12:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 8004c16:	f107 030c 	add.w	r3, r7, #12
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f00c fb1d 	bl	801125c <strcpy>
	}

	return str;
 8004c22:	687b      	ldr	r3, [r7, #4]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3790      	adds	r7, #144	; 0x90
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	607b      	str	r3, [r7, #4]
 8004c36:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <HAL_MspInit+0x74>)
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <HAL_MspInit+0x74>)
 8004c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c40:	6453      	str	r3, [r2, #68]	; 0x44
 8004c42:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <HAL_MspInit+0x74>)
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	603b      	str	r3, [r7, #0]
 8004c52:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <HAL_MspInit+0x74>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <HAL_MspInit+0x74>)
 8004c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c5e:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <HAL_MspInit+0x74>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	210f      	movs	r1, #15
 8004c6e:	f06f 0001 	mvn.w	r0, #1
 8004c72:	f000 fc2d 	bl	80054d0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004c76:	2200      	movs	r2, #0
 8004c78:	2105      	movs	r1, #5
 8004c7a:	2005      	movs	r0, #5
 8004c7c:	f000 fc28 	bl	80054d0 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004c80:	2005      	movs	r0, #5
 8004c82:	f000 fc41 	bl	8005508 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004c86:	2200      	movs	r2, #0
 8004c88:	2105      	movs	r1, #5
 8004c8a:	2005      	movs	r0, #5
 8004c8c:	f000 fc20 	bl	80054d0 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004c90:	2005      	movs	r0, #5
 8004c92:	f000 fc39 	bl	8005508 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800

08004ca4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004cac:	f107 0308 	add.w	r3, r7, #8
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	; (8004cf0 <HAL_RTC_MspInit+0x4c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d110      	bne.n	8004ce6 <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <HAL_RTC_MspInit+0x50>)
 8004cca:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ccc:	f107 0308 	add.w	r3, r7, #8
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f002 f84b 	bl	8006d6c <HAL_RCCEx_PeriphCLKConfig>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8004cdc:	f7ff fb96 	bl	800440c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RTC_MspInit+0x54>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004ce6:	bf00      	nop
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40002800 	.word	0x40002800
 8004cf4:	00190300 	.word	0x00190300
 8004cf8:	42470e3c 	.word	0x42470e3c

08004cfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d04:	f107 0314 	add.w	r3, r7, #20
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	605a      	str	r2, [r3, #4]
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a39      	ldr	r2, [pc, #228]	; (8004e00 <HAL_SPI_MspInit+0x104>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d16b      	bne.n	8004df6 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	4b38      	ldr	r3, [pc, #224]	; (8004e04 <HAL_SPI_MspInit+0x108>)
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	4a37      	ldr	r2, [pc, #220]	; (8004e04 <HAL_SPI_MspInit+0x108>)
 8004d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d2e:	4b35      	ldr	r3, [pc, #212]	; (8004e04 <HAL_SPI_MspInit+0x108>)
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <HAL_SPI_MspInit+0x108>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	4a30      	ldr	r2, [pc, #192]	; (8004e04 <HAL_SPI_MspInit+0x108>)
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	6313      	str	r3, [r2, #48]	; 0x30
 8004d4a:	4b2e      	ldr	r3, [pc, #184]	; (8004e04 <HAL_SPI_MspInit+0x108>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 8004d56:	23a0      	movs	r3, #160	; 0xa0
 8004d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d62:	2303      	movs	r3, #3
 8004d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d66:	2305      	movs	r3, #5
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d6a:	f107 0314 	add.w	r3, r7, #20
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4825      	ldr	r0, [pc, #148]	; (8004e08 <HAL_SPI_MspInit+0x10c>)
 8004d72:	f000 ffd9 	bl	8005d28 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8004d76:	4b25      	ldr	r3, [pc, #148]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004d78:	4a25      	ldr	r2, [pc, #148]	; (8004e10 <HAL_SPI_MspInit+0x114>)
 8004d7a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004d7c:	4b23      	ldr	r3, [pc, #140]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004d7e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004d82:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d84:	4b21      	ldr	r3, [pc, #132]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004d86:	2240      	movs	r2, #64	; 0x40
 8004d88:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d8a:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d90:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d96:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d98:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004da4:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004daa:	4b18      	ldr	r3, [pc, #96]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004dac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004db0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004db2:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004db4:	2204      	movs	r2, #4
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004db8:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004dba:	2203      	movs	r2, #3
 8004dbc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004dbe:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004dc4:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004dca:	4810      	ldr	r0, [pc, #64]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004dcc:	f000 fbaa 	bl	8005524 <HAL_DMA_Init>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8004dd6:	f7ff fb19 	bl	800440c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a0b      	ldr	r2, [pc, #44]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004dde:	649a      	str	r2, [r3, #72]	; 0x48
 8004de0:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <HAL_SPI_MspInit+0x110>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8004de6:	2200      	movs	r2, #0
 8004de8:	2102      	movs	r1, #2
 8004dea:	2023      	movs	r0, #35	; 0x23
 8004dec:	f000 fb70 	bl	80054d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004df0:	2023      	movs	r0, #35	; 0x23
 8004df2:	f000 fb89 	bl	8005508 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004df6:	bf00      	nop
 8004df8:	3728      	adds	r7, #40	; 0x28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40013000 	.word	0x40013000
 8004e04:	40023800 	.word	0x40023800
 8004e08:	40020000 	.word	0x40020000
 8004e0c:	200002f8 	.word	0x200002f8
 8004e10:	40026458 	.word	0x40026458

08004e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d115      	bne.n	8004e52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <HAL_TIM_Base_MspInit+0x48>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	4a0b      	ldr	r2, [pc, #44]	; (8004e5c <HAL_TIM_Base_MspInit+0x48>)
 8004e30:	f043 0301 	orr.w	r3, r3, #1
 8004e34:	6413      	str	r3, [r2, #64]	; 0x40
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <HAL_TIM_Base_MspInit+0x48>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004e42:	2200      	movs	r2, #0
 8004e44:	2101      	movs	r1, #1
 8004e46:	201c      	movs	r0, #28
 8004e48:	f000 fb42 	bl	80054d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e4c:	201c      	movs	r0, #28
 8004e4e:	f000 fb5b 	bl	8005508 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800

08004e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	; 0x28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e68:	f107 0314 	add.w	r3, r7, #20
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	605a      	str	r2, [r3, #4]
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a35      	ldr	r2, [pc, #212]	; (8004f54 <HAL_UART_MspInit+0xf4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d163      	bne.n	8004f4a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	4b34      	ldr	r3, [pc, #208]	; (8004f58 <HAL_UART_MspInit+0xf8>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	4a33      	ldr	r2, [pc, #204]	; (8004f58 <HAL_UART_MspInit+0xf8>)
 8004e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e90:	6413      	str	r3, [r2, #64]	; 0x40
 8004e92:	4b31      	ldr	r3, [pc, #196]	; (8004f58 <HAL_UART_MspInit+0xf8>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	4b2d      	ldr	r3, [pc, #180]	; (8004f58 <HAL_UART_MspInit+0xf8>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	4a2c      	ldr	r2, [pc, #176]	; (8004f58 <HAL_UART_MspInit+0xf8>)
 8004ea8:	f043 0302 	orr.w	r3, r3, #2
 8004eac:	6313      	str	r3, [r2, #48]	; 0x30
 8004eae:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <HAL_UART_MspInit+0xf8>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 8004eba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ecc:	2307      	movs	r3, #7
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4821      	ldr	r0, [pc, #132]	; (8004f5c <HAL_UART_MspInit+0xfc>)
 8004ed8:	f000 ff26 	bl	8005d28 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004edc:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004ede:	4a21      	ldr	r2, [pc, #132]	; (8004f64 <HAL_UART_MspInit+0x104>)
 8004ee0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004ee2:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004ee4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ee8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004eea:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004eec:	2240      	movs	r2, #64	; 0x40
 8004eee:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004efc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004efe:	4b18      	ldr	r3, [pc, #96]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f04:	4b16      	ldr	r3, [pc, #88]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004f0a:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004f12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f16:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f18:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004f1e:	4810      	ldr	r0, [pc, #64]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004f20:	f000 fb00 	bl	8005524 <HAL_DMA_Init>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004f2a:	f7ff fa6f 	bl	800440c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a0b      	ldr	r2, [pc, #44]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004f32:	635a      	str	r2, [r3, #52]	; 0x34
 8004f34:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <HAL_UART_MspInit+0x100>)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2105      	movs	r1, #5
 8004f3e:	2027      	movs	r0, #39	; 0x27
 8004f40:	f000 fac6 	bl	80054d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004f44:	2027      	movs	r0, #39	; 0x27
 8004f46:	f000 fadf 	bl	8005508 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004f4a:	bf00      	nop
 8004f4c:	3728      	adds	r7, #40	; 0x28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40004800 	.word	0x40004800
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40020400 	.word	0x40020400
 8004f60:	200003e4 	.word	0x200003e4
 8004f64:	40026058 	.word	0x40026058

08004f68 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	605a      	str	r2, [r3, #4]
 8004f76:	609a      	str	r2, [r3, #8]
 8004f78:	60da      	str	r2, [r3, #12]
 8004f7a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004f7c:	4b20      	ldr	r3, [pc, #128]	; (8005000 <HAL_FSMC_MspInit+0x98>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d139      	bne.n	8004ff8 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8004f84:	4b1e      	ldr	r3, [pc, #120]	; (8005000 <HAL_FSMC_MspInit+0x98>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	603b      	str	r3, [r7, #0]
 8004f8e:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <HAL_FSMC_MspInit+0x9c>)
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <HAL_FSMC_MspInit+0x9c>)
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	6393      	str	r3, [r2, #56]	; 0x38
 8004f9a:	4b1a      	ldr	r3, [pc, #104]	; (8005004 <HAL_FSMC_MspInit+0x9c>)
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8004fa6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8004faa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fac:	2302      	movs	r3, #2
 8004fae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004fb8:	230c      	movs	r3, #12
 8004fba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fbc:	1d3b      	adds	r3, r7, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4811      	ldr	r0, [pc, #68]	; (8005008 <HAL_FSMC_MspInit+0xa0>)
 8004fc2:	f000 feb1 	bl	8005d28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 8004fc6:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8004fca:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004fd8:	230c      	movs	r3, #12
 8004fda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fdc:	1d3b      	adds	r3, r7, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	480a      	ldr	r0, [pc, #40]	; (800500c <HAL_FSMC_MspInit+0xa4>)
 8004fe2:	f000 fea1 	bl	8005d28 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2105      	movs	r1, #5
 8004fea:	2030      	movs	r0, #48	; 0x30
 8004fec:	f000 fa70 	bl	80054d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004ff0:	2030      	movs	r0, #48	; 0x30
 8004ff2:	f000 fa89 	bl	8005508 <HAL_NVIC_EnableIRQ>
 8004ff6:	e000      	b.n	8004ffa <HAL_FSMC_MspInit+0x92>
    return;
 8004ff8:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20003d58 	.word	0x20003d58
 8005004:	40023800 	.word	0x40023800
 8005008:	40021000 	.word	0x40021000
 800500c:	40020c00 	.word	0x40020c00

08005010 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8005018:	f7ff ffa6 	bl	8004f68 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 800501c:	bf00      	nop
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08c      	sub	sp, #48	; 0x30
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8005034:	2200      	movs	r2, #0
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	2019      	movs	r0, #25
 800503a:	f000 fa49 	bl	80054d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800503e:	2019      	movs	r0, #25
 8005040:	f000 fa62 	bl	8005508 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	4b1f      	ldr	r3, [pc, #124]	; (80050c8 <HAL_InitTick+0xa4>)
 800504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504c:	4a1e      	ldr	r2, [pc, #120]	; (80050c8 <HAL_InitTick+0xa4>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	6453      	str	r3, [r2, #68]	; 0x44
 8005054:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <HAL_InitTick+0xa4>)
 8005056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005060:	f107 0210 	add.w	r2, r7, #16
 8005064:	f107 0314 	add.w	r3, r7, #20
 8005068:	4611      	mov	r1, r2
 800506a:	4618      	mov	r0, r3
 800506c:	f001 fe4c 	bl	8006d08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005070:	f001 fe36 	bl	8006ce0 <HAL_RCC_GetPCLK2Freq>
 8005074:	4603      	mov	r3, r0
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	4a13      	ldr	r2, [pc, #76]	; (80050cc <HAL_InitTick+0xa8>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	0c9b      	lsrs	r3, r3, #18
 8005084:	3b01      	subs	r3, #1
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005088:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <HAL_InitTick+0xac>)
 800508a:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <HAL_InitTick+0xb0>)
 800508c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800508e:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <HAL_InitTick+0xac>)
 8005090:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005094:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005096:	4a0e      	ldr	r2, [pc, #56]	; (80050d0 <HAL_InitTick+0xac>)
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800509c:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <HAL_InitTick+0xac>)
 800509e:	2200      	movs	r2, #0
 80050a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050a2:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <HAL_InitTick+0xac>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80050a8:	4809      	ldr	r0, [pc, #36]	; (80050d0 <HAL_InitTick+0xac>)
 80050aa:	f002 ff2f 	bl	8007f0c <HAL_TIM_Base_Init>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80050b4:	4806      	ldr	r0, [pc, #24]	; (80050d0 <HAL_InitTick+0xac>)
 80050b6:	f002 ff79 	bl	8007fac <HAL_TIM_Base_Start_IT>
 80050ba:	4603      	mov	r3, r0
 80050bc:	e000      	b.n	80050c0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3730      	adds	r7, #48	; 0x30
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40023800 	.word	0x40023800
 80050cc:	431bde83 	.word	0x431bde83
 80050d0:	20003d5c 	.word	0x20003d5c
 80050d4:	40010000 	.word	0x40010000

080050d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050dc:	bf00      	nop
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050e6:	b480      	push	{r7}
 80050e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050ea:	e7fe      	b.n	80050ea <HardFault_Handler+0x4>

080050ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050f0:	e7fe      	b.n	80050f0 <MemManage_Handler+0x4>

080050f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050f6:	e7fe      	b.n	80050f6 <BusFault_Handler+0x4>

080050f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050fc:	e7fe      	b.n	80050fc <UsageFault_Handler+0x4>

080050fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050fe:	b480      	push	{r7}
 8005100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005102:	bf00      	nop
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005120:	4802      	ldr	r0, [pc, #8]	; (800512c <DMA1_Stream3_IRQHandler+0x10>)
 8005122:	f000 fb97 	bl	8005854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	200003e4 	.word	0x200003e4

08005130 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005134:	4802      	ldr	r0, [pc, #8]	; (8005140 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005136:	f002 ffa9 	bl	800808c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20003d5c 	.word	0x20003d5c

08005144 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005148:	4802      	ldr	r0, [pc, #8]	; (8005154 <TIM2_IRQHandler+0x10>)
 800514a:	f002 ff9f 	bl	800808c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800514e:	bf00      	nop
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000358 	.word	0x20000358

08005158 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800515c:	4802      	ldr	r0, [pc, #8]	; (8005168 <SPI1_IRQHandler+0x10>)
 800515e:	f002 fc61 	bl	8007a24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005162:	bf00      	nop
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	200002a0 	.word	0x200002a0

0800516c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005170:	4802      	ldr	r0, [pc, #8]	; (800517c <USART3_IRQHandler+0x10>)
 8005172:	f003 fc49 	bl	8008a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005176:	bf00      	nop
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	200003a0 	.word	0x200003a0

08005180 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8005184:	4802      	ldr	r0, [pc, #8]	; (8005190 <FSMC_IRQHandler+0x10>)
 8005186:	f000 ffec 	bl	8006162 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 800518a:	bf00      	nop
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000444 	.word	0x20000444

08005194 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005198:	4802      	ldr	r0, [pc, #8]	; (80051a4 <DMA2_Stream3_IRQHandler+0x10>)
 800519a:	f000 fb5b 	bl	8005854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800519e:	bf00      	nop
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	200002f8 	.word	0x200002f8

080051a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051b0:	4a14      	ldr	r2, [pc, #80]	; (8005204 <_sbrk+0x5c>)
 80051b2:	4b15      	ldr	r3, [pc, #84]	; (8005208 <_sbrk+0x60>)
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051bc:	4b13      	ldr	r3, [pc, #76]	; (800520c <_sbrk+0x64>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051c4:	4b11      	ldr	r3, [pc, #68]	; (800520c <_sbrk+0x64>)
 80051c6:	4a12      	ldr	r2, [pc, #72]	; (8005210 <_sbrk+0x68>)
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051ca:	4b10      	ldr	r3, [pc, #64]	; (800520c <_sbrk+0x64>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d207      	bcs.n	80051e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051d8:	f00b fe08 	bl	8010dec <__errno>
 80051dc:	4603      	mov	r3, r0
 80051de:	220c      	movs	r2, #12
 80051e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051e6:	e009      	b.n	80051fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051e8:	4b08      	ldr	r3, [pc, #32]	; (800520c <_sbrk+0x64>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051ee:	4b07      	ldr	r3, [pc, #28]	; (800520c <_sbrk+0x64>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	4a05      	ldr	r2, [pc, #20]	; (800520c <_sbrk+0x64>)
 80051f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20020000 	.word	0x20020000
 8005208:	00002000 	.word	0x00002000
 800520c:	20003da4 	.word	0x20003da4
 8005210:	20009c50 	.word	0x20009c50

08005214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005218:	4b08      	ldr	r3, [pc, #32]	; (800523c <SystemInit+0x28>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	4a07      	ldr	r2, [pc, #28]	; (800523c <SystemInit+0x28>)
 8005220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <SystemInit+0x28>)
 800522a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800522e:	609a      	str	r2, [r3, #8]
#endif
}
 8005230:	bf00      	nop
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	e000ed00 	.word	0xe000ed00

08005240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005278 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005246:	e003      	b.n	8005250 <LoopCopyDataInit>

08005248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800524a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800524c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800524e:	3104      	adds	r1, #4

08005250 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005250:	480b      	ldr	r0, [pc, #44]	; (8005280 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005252:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005258:	d3f6      	bcc.n	8005248 <CopyDataInit>
  ldr  r2, =_sbss
 800525a:	4a0b      	ldr	r2, [pc, #44]	; (8005288 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800525c:	e002      	b.n	8005264 <LoopFillZerobss>

0800525e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800525e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005260:	f842 3b04 	str.w	r3, [r2], #4

08005264 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005264:	4b09      	ldr	r3, [pc, #36]	; (800528c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005268:	d3f9      	bcc.n	800525e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800526a:	f7ff ffd3 	bl	8005214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800526e:	f00b fe6f 	bl	8010f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005272:	f7fc fbc3 	bl	80019fc <main>
  bx  lr    
 8005276:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005278:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800527c:	08014c1c 	.word	0x08014c1c
  ldr  r0, =_sdata
 8005280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005284:	2000013c 	.word	0x2000013c
  ldr  r2, =_sbss
 8005288:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 800528c:	20009c4c 	.word	0x20009c4c

08005290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005290:	e7fe      	b.n	8005290 <ADC_IRQHandler>
	...

08005294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005298:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <HAL_Init+0x40>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a0d      	ldr	r2, [pc, #52]	; (80052d4 <HAL_Init+0x40>)
 800529e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_Init+0x40>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <HAL_Init+0x40>)
 80052aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052b0:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <HAL_Init+0x40>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a07      	ldr	r2, [pc, #28]	; (80052d4 <HAL_Init+0x40>)
 80052b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052bc:	2003      	movs	r0, #3
 80052be:	f000 f8fc 	bl	80054ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052c2:	200f      	movs	r0, #15
 80052c4:	f7ff feae 	bl	8005024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052c8:	f7ff fcb0 	bl	8004c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40023c00 	.word	0x40023c00

080052d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052dc:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <HAL_IncTick+0x20>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <HAL_IncTick+0x24>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4413      	add	r3, r2
 80052e8:	4a04      	ldr	r2, [pc, #16]	; (80052fc <HAL_IncTick+0x24>)
 80052ea:	6013      	str	r3, [r2, #0]
}
 80052ec:	bf00      	nop
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	200000ac 	.word	0x200000ac
 80052fc:	20003da8 	.word	0x20003da8

08005300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  return uwTick;
 8005304:	4b03      	ldr	r3, [pc, #12]	; (8005314 <HAL_GetTick+0x14>)
 8005306:	681b      	ldr	r3, [r3, #0]
}
 8005308:	4618      	mov	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20003da8 	.word	0x20003da8

08005318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005320:	f7ff ffee 	bl	8005300 <HAL_GetTick>
 8005324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005330:	d005      	beq.n	800533e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005332:	4b0a      	ldr	r3, [pc, #40]	; (800535c <HAL_Delay+0x44>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800533e:	bf00      	nop
 8005340:	f7ff ffde 	bl	8005300 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	429a      	cmp	r2, r3
 800534e:	d8f7      	bhi.n	8005340 <HAL_Delay+0x28>
  {
  }
}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	200000ac 	.word	0x200000ac

08005360 <__NVIC_SetPriorityGrouping>:
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005370:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800537c:	4013      	ands	r3, r2
 800537e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800538c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005392:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	60d3      	str	r3, [r2, #12]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	e000ed00 	.word	0xe000ed00

080053a8 <__NVIC_GetPriorityGrouping>:
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <__NVIC_GetPriorityGrouping+0x18>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	f003 0307 	and.w	r3, r3, #7
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	e000ed00 	.word	0xe000ed00

080053c4 <__NVIC_EnableIRQ>:
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	db0b      	blt.n	80053ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053d6:	79fb      	ldrb	r3, [r7, #7]
 80053d8:	f003 021f 	and.w	r2, r3, #31
 80053dc:	4907      	ldr	r1, [pc, #28]	; (80053fc <__NVIC_EnableIRQ+0x38>)
 80053de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	2001      	movs	r0, #1
 80053e6:	fa00 f202 	lsl.w	r2, r0, r2
 80053ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	e000e100 	.word	0xe000e100

08005400 <__NVIC_SetPriority>:
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	6039      	str	r1, [r7, #0]
 800540a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800540c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005410:	2b00      	cmp	r3, #0
 8005412:	db0a      	blt.n	800542a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	b2da      	uxtb	r2, r3
 8005418:	490c      	ldr	r1, [pc, #48]	; (800544c <__NVIC_SetPriority+0x4c>)
 800541a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541e:	0112      	lsls	r2, r2, #4
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	440b      	add	r3, r1
 8005424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005428:	e00a      	b.n	8005440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	b2da      	uxtb	r2, r3
 800542e:	4908      	ldr	r1, [pc, #32]	; (8005450 <__NVIC_SetPriority+0x50>)
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	3b04      	subs	r3, #4
 8005438:	0112      	lsls	r2, r2, #4
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	440b      	add	r3, r1
 800543e:	761a      	strb	r2, [r3, #24]
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	e000e100 	.word	0xe000e100
 8005450:	e000ed00 	.word	0xe000ed00

08005454 <NVIC_EncodePriority>:
{
 8005454:	b480      	push	{r7}
 8005456:	b089      	sub	sp, #36	; 0x24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f1c3 0307 	rsb	r3, r3, #7
 800546e:	2b04      	cmp	r3, #4
 8005470:	bf28      	it	cs
 8005472:	2304      	movcs	r3, #4
 8005474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	3304      	adds	r3, #4
 800547a:	2b06      	cmp	r3, #6
 800547c:	d902      	bls.n	8005484 <NVIC_EncodePriority+0x30>
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	3b03      	subs	r3, #3
 8005482:	e000      	b.n	8005486 <NVIC_EncodePriority+0x32>
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43da      	mvns	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	401a      	ands	r2, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800549c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	fa01 f303 	lsl.w	r3, r1, r3
 80054a6:	43d9      	mvns	r1, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054ac:	4313      	orrs	r3, r2
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3724      	adds	r7, #36	; 0x24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff ff4c 	bl	8005360 <__NVIC_SetPriorityGrouping>
}
 80054c8:	bf00      	nop
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054e2:	f7ff ff61 	bl	80053a8 <__NVIC_GetPriorityGrouping>
 80054e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	6978      	ldr	r0, [r7, #20]
 80054ee:	f7ff ffb1 	bl	8005454 <NVIC_EncodePriority>
 80054f2:	4602      	mov	r2, r0
 80054f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054f8:	4611      	mov	r1, r2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff ff80 	bl	8005400 <__NVIC_SetPriority>
}
 8005500:	bf00      	nop
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff ff54 	bl	80053c4 <__NVIC_EnableIRQ>
}
 800551c:	bf00      	nop
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005530:	f7ff fee6 	bl	8005300 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e099      	b.n	8005674 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005560:	e00f      	b.n	8005582 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005562:	f7ff fecd 	bl	8005300 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b05      	cmp	r3, #5
 800556e:	d908      	bls.n	8005582 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2203      	movs	r2, #3
 800557a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e078      	b.n	8005674 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e8      	bne.n	8005562 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4b38      	ldr	r3, [pc, #224]	; (800567c <HAL_DMA_Init+0x158>)
 800559c:	4013      	ands	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d107      	bne.n	80055ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	4313      	orrs	r3, r2
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f023 0307 	bic.w	r3, r3, #7
 8005602:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b04      	cmp	r3, #4
 8005614:	d117      	bne.n	8005646 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00e      	beq.n	8005646 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fb01 	bl	8005c30 <DMA_CheckFifoParam>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2240      	movs	r2, #64	; 0x40
 8005638:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005642:	2301      	movs	r3, #1
 8005644:	e016      	b.n	8005674 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fab8 	bl	8005bc4 <DMA_CalcBaseAndBitshift>
 8005654:	4603      	mov	r3, r0
 8005656:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565c:	223f      	movs	r2, #63	; 0x3f
 800565e:	409a      	lsls	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	f010803f 	.word	0xf010803f

08005680 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005696:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_DMA_Start_IT+0x26>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e040      	b.n	8005728 <HAL_DMA_Start_IT+0xa8>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d12f      	bne.n	800571a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2202      	movs	r2, #2
 80056be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fa4a 	bl	8005b68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d8:	223f      	movs	r2, #63	; 0x3f
 80056da:	409a      	lsls	r2, r3
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0216 	orr.w	r2, r2, #22
 80056ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0208 	orr.w	r2, r2, #8
 8005706:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e005      	b.n	8005726 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005722:	2302      	movs	r3, #2
 8005724:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005726:	7dfb      	ldrb	r3, [r7, #23]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800573e:	f7ff fddf 	bl	8005300 <HAL_GetTick>
 8005742:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d008      	beq.n	8005762 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2280      	movs	r2, #128	; 0x80
 8005754:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e052      	b.n	8005808 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0216 	bic.w	r2, r2, #22
 8005770:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695a      	ldr	r2, [r3, #20]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005780:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <HAL_DMA_Abort+0x62>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578e:	2b00      	cmp	r3, #0
 8005790:	d007      	beq.n	80057a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0208 	bic.w	r2, r2, #8
 80057a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0201 	bic.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057b2:	e013      	b.n	80057dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057b4:	f7ff fda4 	bl	8005300 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b05      	cmp	r3, #5
 80057c0:	d90c      	bls.n	80057dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2203      	movs	r2, #3
 80057cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e015      	b.n	8005808 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e4      	bne.n	80057b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ee:	223f      	movs	r2, #63	; 0x3f
 80057f0:	409a      	lsls	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d004      	beq.n	800582e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2280      	movs	r2, #128	; 0x80
 8005828:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e00c      	b.n	8005848 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2205      	movs	r2, #5
 8005832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005860:	4b8e      	ldr	r3, [pc, #568]	; (8005a9c <HAL_DMA_IRQHandler+0x248>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a8e      	ldr	r2, [pc, #568]	; (8005aa0 <HAL_DMA_IRQHandler+0x24c>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	0a9b      	lsrs	r3, r3, #10
 800586c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005872:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587e:	2208      	movs	r2, #8
 8005880:	409a      	lsls	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01a      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d013      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0204 	bic.w	r2, r2, #4
 80058a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ac:	2208      	movs	r2, #8
 80058ae:	409a      	lsls	r2, r3
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b8:	f043 0201 	orr.w	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c4:	2201      	movs	r2, #1
 80058c6:	409a      	lsls	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d012      	beq.n	80058f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e2:	2201      	movs	r2, #1
 80058e4:	409a      	lsls	r2, r3
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ee:	f043 0202 	orr.w	r2, r3, #2
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fa:	2204      	movs	r2, #4
 80058fc:	409a      	lsls	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4013      	ands	r3, r2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d012      	beq.n	800592c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00b      	beq.n	800592c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005918:	2204      	movs	r2, #4
 800591a:	409a      	lsls	r2, r3
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005924:	f043 0204 	orr.w	r2, r3, #4
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005930:	2210      	movs	r2, #16
 8005932:	409a      	lsls	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d043      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b00      	cmp	r3, #0
 8005948:	d03c      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594e:	2210      	movs	r2, #16
 8005950:	409a      	lsls	r2, r3
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d018      	beq.n	8005996 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d108      	bne.n	8005984 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d024      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	4798      	blx	r3
 8005982:	e01f      	b.n	80059c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01b      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
 8005994:	e016      	b.n	80059c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d107      	bne.n	80059b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0208 	bic.w	r2, r2, #8
 80059b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c8:	2220      	movs	r2, #32
 80059ca:	409a      	lsls	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 808f 	beq.w	8005af4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 8087 	beq.w	8005af4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ea:	2220      	movs	r2, #32
 80059ec:	409a      	lsls	r2, r3
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b05      	cmp	r3, #5
 80059fc:	d136      	bne.n	8005a6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0216 	bic.w	r2, r2, #22
 8005a0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695a      	ldr	r2, [r3, #20]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d103      	bne.n	8005a2e <HAL_DMA_IRQHandler+0x1da>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0208 	bic.w	r2, r2, #8
 8005a3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a42:	223f      	movs	r2, #63	; 0x3f
 8005a44:	409a      	lsls	r2, r3
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d07e      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	4798      	blx	r3
        }
        return;
 8005a6a:	e079      	b.n	8005b60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01d      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10d      	bne.n	8005aa4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d031      	beq.n	8005af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	4798      	blx	r3
 8005a98:	e02c      	b.n	8005af4 <HAL_DMA_IRQHandler+0x2a0>
 8005a9a:	bf00      	nop
 8005a9c:	200000a4 	.word	0x200000a4
 8005aa0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d023      	beq.n	8005af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
 8005ab4:	e01e      	b.n	8005af4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10f      	bne.n	8005ae4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0210 	bic.w	r2, r2, #16
 8005ad2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d032      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d022      	beq.n	8005b4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2205      	movs	r2, #5
 8005b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0201 	bic.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	3301      	adds	r3, #1
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d307      	bcc.n	8005b3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f2      	bne.n	8005b20 <HAL_DMA_IRQHandler+0x2cc>
 8005b3a:	e000      	b.n	8005b3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	4798      	blx	r3
 8005b5e:	e000      	b.n	8005b62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b60:	bf00      	nop
    }
  }
}
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d108      	bne.n	8005ba8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ba6:	e007      	b.n	8005bb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	60da      	str	r2, [r3, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	3b10      	subs	r3, #16
 8005bd4:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <DMA_CalcBaseAndBitshift+0x64>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	091b      	lsrs	r3, r3, #4
 8005bdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bde:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <DMA_CalcBaseAndBitshift+0x68>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d909      	bls.n	8005c06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	1d1a      	adds	r2, r3, #4
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	659a      	str	r2, [r3, #88]	; 0x58
 8005c04:	e007      	b.n	8005c16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c0e:	f023 0303 	bic.w	r3, r3, #3
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	aaaaaaab 	.word	0xaaaaaaab
 8005c2c:	0801498c 	.word	0x0801498c

08005c30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d11f      	bne.n	8005c8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d856      	bhi.n	8005cfe <DMA_CheckFifoParam+0xce>
 8005c50:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <DMA_CheckFifoParam+0x28>)
 8005c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c56:	bf00      	nop
 8005c58:	08005c69 	.word	0x08005c69
 8005c5c:	08005c7b 	.word	0x08005c7b
 8005c60:	08005c69 	.word	0x08005c69
 8005c64:	08005cff 	.word	0x08005cff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d046      	beq.n	8005d02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c78:	e043      	b.n	8005d02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c82:	d140      	bne.n	8005d06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c88:	e03d      	b.n	8005d06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c92:	d121      	bne.n	8005cd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d837      	bhi.n	8005d0a <DMA_CheckFifoParam+0xda>
 8005c9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <DMA_CheckFifoParam+0x70>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005cb1 	.word	0x08005cb1
 8005ca4:	08005cb7 	.word	0x08005cb7
 8005ca8:	08005cb1 	.word	0x08005cb1
 8005cac:	08005cc9 	.word	0x08005cc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb4:	e030      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d025      	beq.n	8005d0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cc6:	e022      	b.n	8005d0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cd0:	d11f      	bne.n	8005d12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005cd6:	e01c      	b.n	8005d12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d903      	bls.n	8005ce6 <DMA_CheckFifoParam+0xb6>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d003      	beq.n	8005cec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ce4:	e018      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cea:	e015      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00e      	beq.n	8005d16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cfc:	e00b      	b.n	8005d16 <DMA_CheckFifoParam+0xe6>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e00a      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      break;
 8005d02:	bf00      	nop
 8005d04:	e008      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      break;
 8005d06:	bf00      	nop
 8005d08:	e006      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      break;
 8005d0a:	bf00      	nop
 8005d0c:	e004      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e002      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d12:	bf00      	nop
 8005d14:	e000      	b.n	8005d18 <DMA_CheckFifoParam+0xe8>
      break;
 8005d16:	bf00      	nop
    }
  } 
  
  return status; 
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop

08005d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b089      	sub	sp, #36	; 0x24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	e16b      	b.n	800601c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d44:	2201      	movs	r2, #1
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4013      	ands	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	f040 815a 	bne.w	8006016 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d005      	beq.n	8005d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d130      	bne.n	8005ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	2203      	movs	r2, #3
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	43db      	mvns	r3, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005db0:	2201      	movs	r2, #1
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 0201 	and.w	r2, r3, #1
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d017      	beq.n	8005e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	2203      	movs	r2, #3
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d123      	bne.n	8005e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	08da      	lsrs	r2, r3, #3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3208      	adds	r2, #8
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	220f      	movs	r2, #15
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4013      	ands	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	08da      	lsrs	r2, r3, #3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3208      	adds	r2, #8
 8005e66:	69b9      	ldr	r1, [r7, #24]
 8005e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	2203      	movs	r2, #3
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4013      	ands	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 0203 	and.w	r2, r3, #3
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80b4 	beq.w	8006016 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	4b60      	ldr	r3, [pc, #384]	; (8006034 <HAL_GPIO_Init+0x30c>)
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	4a5f      	ldr	r2, [pc, #380]	; (8006034 <HAL_GPIO_Init+0x30c>)
 8005eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ebe:	4b5d      	ldr	r3, [pc, #372]	; (8006034 <HAL_GPIO_Init+0x30c>)
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eca:	4a5b      	ldr	r2, [pc, #364]	; (8006038 <HAL_GPIO_Init+0x310>)
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	089b      	lsrs	r3, r3, #2
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	220f      	movs	r2, #15
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4013      	ands	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a52      	ldr	r2, [pc, #328]	; (800603c <HAL_GPIO_Init+0x314>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d02b      	beq.n	8005f4e <HAL_GPIO_Init+0x226>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a51      	ldr	r2, [pc, #324]	; (8006040 <HAL_GPIO_Init+0x318>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d025      	beq.n	8005f4a <HAL_GPIO_Init+0x222>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a50      	ldr	r2, [pc, #320]	; (8006044 <HAL_GPIO_Init+0x31c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d01f      	beq.n	8005f46 <HAL_GPIO_Init+0x21e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a4f      	ldr	r2, [pc, #316]	; (8006048 <HAL_GPIO_Init+0x320>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d019      	beq.n	8005f42 <HAL_GPIO_Init+0x21a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a4e      	ldr	r2, [pc, #312]	; (800604c <HAL_GPIO_Init+0x324>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <HAL_GPIO_Init+0x216>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a4d      	ldr	r2, [pc, #308]	; (8006050 <HAL_GPIO_Init+0x328>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00d      	beq.n	8005f3a <HAL_GPIO_Init+0x212>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a4c      	ldr	r2, [pc, #304]	; (8006054 <HAL_GPIO_Init+0x32c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d007      	beq.n	8005f36 <HAL_GPIO_Init+0x20e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a4b      	ldr	r2, [pc, #300]	; (8006058 <HAL_GPIO_Init+0x330>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d101      	bne.n	8005f32 <HAL_GPIO_Init+0x20a>
 8005f2e:	2307      	movs	r3, #7
 8005f30:	e00e      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f32:	2308      	movs	r3, #8
 8005f34:	e00c      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f36:	2306      	movs	r3, #6
 8005f38:	e00a      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f3a:	2305      	movs	r3, #5
 8005f3c:	e008      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f3e:	2304      	movs	r3, #4
 8005f40:	e006      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f42:	2303      	movs	r3, #3
 8005f44:	e004      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e002      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	f002 0203 	and.w	r2, r2, #3
 8005f56:	0092      	lsls	r2, r2, #2
 8005f58:	4093      	lsls	r3, r2
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f60:	4935      	ldr	r1, [pc, #212]	; (8006038 <HAL_GPIO_Init+0x310>)
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	089b      	lsrs	r3, r3, #2
 8005f66:	3302      	adds	r3, #2
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f6e:	4b3b      	ldr	r3, [pc, #236]	; (800605c <HAL_GPIO_Init+0x334>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	43db      	mvns	r3, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f92:	4a32      	ldr	r2, [pc, #200]	; (800605c <HAL_GPIO_Init+0x334>)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f98:	4b30      	ldr	r3, [pc, #192]	; (800605c <HAL_GPIO_Init+0x334>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fbc:	4a27      	ldr	r2, [pc, #156]	; (800605c <HAL_GPIO_Init+0x334>)
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005fc2:	4b26      	ldr	r3, [pc, #152]	; (800605c <HAL_GPIO_Init+0x334>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fe6:	4a1d      	ldr	r2, [pc, #116]	; (800605c <HAL_GPIO_Init+0x334>)
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fec:	4b1b      	ldr	r3, [pc, #108]	; (800605c <HAL_GPIO_Init+0x334>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006010:	4a12      	ldr	r2, [pc, #72]	; (800605c <HAL_GPIO_Init+0x334>)
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	3301      	adds	r3, #1
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b0f      	cmp	r3, #15
 8006020:	f67f ae90 	bls.w	8005d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	3724      	adds	r7, #36	; 0x24
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40023800 	.word	0x40023800
 8006038:	40013800 	.word	0x40013800
 800603c:	40020000 	.word	0x40020000
 8006040:	40020400 	.word	0x40020400
 8006044:	40020800 	.word	0x40020800
 8006048:	40020c00 	.word	0x40020c00
 800604c:	40021000 	.word	0x40021000
 8006050:	40021400 	.word	0x40021400
 8006054:	40021800 	.word	0x40021800
 8006058:	40021c00 	.word	0x40021c00
 800605c:	40013c00 	.word	0x40013c00

08006060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	807b      	strh	r3, [r7, #2]
 800606c:	4613      	mov	r3, r2
 800606e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006070:	787b      	ldrb	r3, [r7, #1]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800607c:	e003      	b.n	8006086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800607e:	887b      	ldrh	r3, [r7, #2]
 8006080:	041a      	lsls	r2, r3, #16
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	619a      	str	r2, [r3, #24]
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060a4:	887a      	ldrh	r2, [r7, #2]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4013      	ands	r3, r2
 80060aa:	041a      	lsls	r2, r3, #16
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	43d9      	mvns	r1, r3
 80060b0:	887b      	ldrh	r3, [r7, #2]
 80060b2:	400b      	ands	r3, r1
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	619a      	str	r2, [r3, #24]
}
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e03e      	b.n	800615a <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d106      	bne.n	80060f6 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7fe ff8d 	bl	8005010 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3304      	adds	r3, #4
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f003 fc49 	bl	8009998 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	461a      	mov	r2, r3
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	f003 fc8d 	bl	8009a30 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	461a      	mov	r2, r3
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	f003 fcba 	bl	8009a9a <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b10      	cmp	r3, #16
 800612c:	d108      	bne.n	8006140 <HAL_NAND_Init+0x7a>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f042 0204 	orr.w	r2, r2, #4
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e007      	b.n	8006150 <HAL_NAND_Init+0x8a>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6a1a      	ldr	r2, [r3, #32]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0204 	orr.w	r2, r2, #4
 800614e:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b10      	cmp	r3, #16
 8006170:	d10a      	bne.n	8006188 <HAL_NAND_IRQHandler+0x26>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b01      	cmp	r3, #1
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	e009      	b.n	800619c <HAL_NAND_IRQHandler+0x3a>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b01      	cmp	r3, #1
 8006194:	bf0c      	ite	eq
 8006196:	2301      	moveq	r3, #1
 8006198:	2300      	movne	r3, #0
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d017      	beq.n	80061d0 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f8b2 	bl	800630a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d108      	bne.n	80061c0 <HAL_NAND_IRQHandler+0x5e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0201 	bic.w	r2, r2, #1
 80061bc:	605a      	str	r2, [r3, #4]
 80061be:	e007      	b.n	80061d0 <HAL_NAND_IRQHandler+0x6e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0201 	bic.w	r2, r2, #1
 80061ce:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d10a      	bne.n	80061ee <HAL_NAND_IRQHandler+0x8c>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	bf0c      	ite	eq
 80061e6:	2301      	moveq	r3, #1
 80061e8:	2300      	movne	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	e009      	b.n	8006202 <HAL_NAND_IRQHandler+0xa0>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	bf0c      	ite	eq
 80061fc:	2301      	moveq	r3, #1
 80061fe:	2300      	movne	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d017      	beq.n	8006236 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f87f 	bl	800630a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b10      	cmp	r3, #16
 8006212:	d108      	bne.n	8006226 <HAL_NAND_IRQHandler+0xc4>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0202 	bic.w	r2, r2, #2
 8006222:	605a      	str	r2, [r3, #4]
 8006224:	e007      	b.n	8006236 <HAL_NAND_IRQHandler+0xd4>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0202 	bic.w	r2, r2, #2
 8006234:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b10      	cmp	r3, #16
 800623c:	d10a      	bne.n	8006254 <HAL_NAND_IRQHandler+0xf2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b04      	cmp	r3, #4
 800624a:	bf0c      	ite	eq
 800624c:	2301      	moveq	r3, #1
 800624e:	2300      	movne	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	e009      	b.n	8006268 <HAL_NAND_IRQHandler+0x106>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b04      	cmp	r3, #4
 8006260:	bf0c      	ite	eq
 8006262:	2301      	moveq	r3, #1
 8006264:	2300      	movne	r3, #0
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d017      	beq.n	800629c <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f84c 	bl	800630a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2b10      	cmp	r3, #16
 8006278:	d108      	bne.n	800628c <HAL_NAND_IRQHandler+0x12a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0204 	bic.w	r2, r2, #4
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	e007      	b.n	800629c <HAL_NAND_IRQHandler+0x13a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0204 	bic.w	r2, r2, #4
 800629a:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d10a      	bne.n	80062ba <HAL_NAND_IRQHandler+0x158>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	bf0c      	ite	eq
 80062b2:	2301      	moveq	r3, #1
 80062b4:	2300      	movne	r3, #0
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	e009      	b.n	80062ce <HAL_NAND_IRQHandler+0x16c>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	bf0c      	ite	eq
 80062c8:	2301      	moveq	r3, #1
 80062ca:	2300      	movne	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d017      	beq.n	8006302 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f819 	bl	800630a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d108      	bne.n	80062f2 <HAL_NAND_IRQHandler+0x190>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ee:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 80062f0:	e007      	b.n	8006302 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006300:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <HAL_NAND_ECC_Disable>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_ECC_Disable(NAND_HandleTypeDef *hnand)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d101      	bne.n	8006336 <HAL_NAND_ECC_Disable+0x18>
  {
    return HAL_BUSY;
 8006332:	2302      	movs	r3, #2
 8006334:	e018      	b.n	8006368 <HAL_NAND_ECC_Disable+0x4a>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b01      	cmp	r3, #1
 8006340:	d111      	bne.n	8006366 <HAL_NAND_ECC_Disable+0x48>
  {
    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2202      	movs	r2, #2
 8006346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable ECC feature */
    (void)FMC_NAND_ECC_Disable(hnand->Instance, hnand->Init.NandBank);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f003 fbd5 	bl	8009b04 <FSMC_NAND_ECC_Disable>

    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	e000      	b.n	8006368 <HAL_NAND_ECC_Disable+0x4a>
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  return hnand->State;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800637e:	b2db      	uxtb	r3, r3
}
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 8006394:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006398:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a0:	2270      	movs	r2, #112	; 0x70
 80063a2:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e007      	b.n	80063ca <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 80063c4:	2340      	movs	r3, #64	; 0x40
 80063c6:	e000      	b.n	80063ca <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 80063c8:	2300      	movs	r3, #0
  }
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
	...

080063d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e267      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d075      	beq.n	80064e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063f6:	4b88      	ldr	r3, [pc, #544]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 030c 	and.w	r3, r3, #12
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d00c      	beq.n	800641c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006402:	4b85      	ldr	r3, [pc, #532]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800640a:	2b08      	cmp	r3, #8
 800640c:	d112      	bne.n	8006434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800640e:	4b82      	ldr	r3, [pc, #520]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641a:	d10b      	bne.n	8006434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800641c:	4b7e      	ldr	r3, [pc, #504]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d05b      	beq.n	80064e0 <HAL_RCC_OscConfig+0x108>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d157      	bne.n	80064e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e242      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800643c:	d106      	bne.n	800644c <HAL_RCC_OscConfig+0x74>
 800643e:	4b76      	ldr	r3, [pc, #472]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a75      	ldr	r2, [pc, #468]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e01d      	b.n	8006488 <HAL_RCC_OscConfig+0xb0>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006454:	d10c      	bne.n	8006470 <HAL_RCC_OscConfig+0x98>
 8006456:	4b70      	ldr	r3, [pc, #448]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a6f      	ldr	r2, [pc, #444]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 800645c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	4b6d      	ldr	r3, [pc, #436]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a6c      	ldr	r2, [pc, #432]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	e00b      	b.n	8006488 <HAL_RCC_OscConfig+0xb0>
 8006470:	4b69      	ldr	r3, [pc, #420]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a68      	ldr	r2, [pc, #416]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	4b66      	ldr	r3, [pc, #408]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a65      	ldr	r2, [pc, #404]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d013      	beq.n	80064b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006490:	f7fe ff36 	bl	8005300 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006498:	f7fe ff32 	bl	8005300 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b64      	cmp	r3, #100	; 0x64
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e207      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064aa:	4b5b      	ldr	r3, [pc, #364]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0f0      	beq.n	8006498 <HAL_RCC_OscConfig+0xc0>
 80064b6:	e014      	b.n	80064e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b8:	f7fe ff22 	bl	8005300 <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064c0:	f7fe ff1e 	bl	8005300 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	; 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e1f3      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d2:	4b51      	ldr	r3, [pc, #324]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1f0      	bne.n	80064c0 <HAL_RCC_OscConfig+0xe8>
 80064de:	e000      	b.n	80064e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d063      	beq.n	80065b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064ee:	4b4a      	ldr	r3, [pc, #296]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064fa:	4b47      	ldr	r3, [pc, #284]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006502:	2b08      	cmp	r3, #8
 8006504:	d11c      	bne.n	8006540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006506:	4b44      	ldr	r3, [pc, #272]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d116      	bne.n	8006540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006512:	4b41      	ldr	r3, [pc, #260]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_RCC_OscConfig+0x152>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d001      	beq.n	800652a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e1c7      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652a:	4b3b      	ldr	r3, [pc, #236]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	4937      	ldr	r1, [pc, #220]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 800653a:	4313      	orrs	r3, r2
 800653c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653e:	e03a      	b.n	80065b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d020      	beq.n	800658a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006548:	4b34      	ldr	r3, [pc, #208]	; (800661c <HAL_RCC_OscConfig+0x244>)
 800654a:	2201      	movs	r2, #1
 800654c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654e:	f7fe fed7 	bl	8005300 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006554:	e008      	b.n	8006568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006556:	f7fe fed3 	bl	8005300 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e1a8      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006568:	4b2b      	ldr	r3, [pc, #172]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d0f0      	beq.n	8006556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006574:	4b28      	ldr	r3, [pc, #160]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	4925      	ldr	r1, [pc, #148]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 8006584:	4313      	orrs	r3, r2
 8006586:	600b      	str	r3, [r1, #0]
 8006588:	e015      	b.n	80065b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800658a:	4b24      	ldr	r3, [pc, #144]	; (800661c <HAL_RCC_OscConfig+0x244>)
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fe feb6 	bl	8005300 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006598:	f7fe feb2 	bl	8005300 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e187      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065aa:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d036      	beq.n	8006630 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d016      	beq.n	80065f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ca:	4b15      	ldr	r3, [pc, #84]	; (8006620 <HAL_RCC_OscConfig+0x248>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d0:	f7fe fe96 	bl	8005300 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065d8:	f7fe fe92 	bl	8005300 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e167      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ea:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <HAL_RCC_OscConfig+0x240>)
 80065ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f0      	beq.n	80065d8 <HAL_RCC_OscConfig+0x200>
 80065f6:	e01b      	b.n	8006630 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065f8:	4b09      	ldr	r3, [pc, #36]	; (8006620 <HAL_RCC_OscConfig+0x248>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065fe:	f7fe fe7f 	bl	8005300 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006604:	e00e      	b.n	8006624 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006606:	f7fe fe7b 	bl	8005300 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d907      	bls.n	8006624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e150      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
 8006618:	40023800 	.word	0x40023800
 800661c:	42470000 	.word	0x42470000
 8006620:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006624:	4b88      	ldr	r3, [pc, #544]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 8006626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1ea      	bne.n	8006606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8097 	beq.w	800676c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800663e:	2300      	movs	r3, #0
 8006640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006642:	4b81      	ldr	r3, [pc, #516]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10f      	bne.n	800666e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800664e:	2300      	movs	r3, #0
 8006650:	60bb      	str	r3, [r7, #8]
 8006652:	4b7d      	ldr	r3, [pc, #500]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	4a7c      	ldr	r2, [pc, #496]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 8006658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665c:	6413      	str	r3, [r2, #64]	; 0x40
 800665e:	4b7a      	ldr	r3, [pc, #488]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006666:	60bb      	str	r3, [r7, #8]
 8006668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800666a:	2301      	movs	r3, #1
 800666c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666e:	4b77      	ldr	r3, [pc, #476]	; (800684c <HAL_RCC_OscConfig+0x474>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d118      	bne.n	80066ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800667a:	4b74      	ldr	r3, [pc, #464]	; (800684c <HAL_RCC_OscConfig+0x474>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a73      	ldr	r2, [pc, #460]	; (800684c <HAL_RCC_OscConfig+0x474>)
 8006680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006686:	f7fe fe3b 	bl	8005300 <HAL_GetTick>
 800668a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800668c:	e008      	b.n	80066a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800668e:	f7fe fe37 	bl	8005300 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e10c      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a0:	4b6a      	ldr	r3, [pc, #424]	; (800684c <HAL_RCC_OscConfig+0x474>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0f0      	beq.n	800668e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d106      	bne.n	80066c2 <HAL_RCC_OscConfig+0x2ea>
 80066b4:	4b64      	ldr	r3, [pc, #400]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 80066b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b8:	4a63      	ldr	r2, [pc, #396]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	6713      	str	r3, [r2, #112]	; 0x70
 80066c0:	e01c      	b.n	80066fc <HAL_RCC_OscConfig+0x324>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	2b05      	cmp	r3, #5
 80066c8:	d10c      	bne.n	80066e4 <HAL_RCC_OscConfig+0x30c>
 80066ca:	4b5f      	ldr	r3, [pc, #380]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 80066cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ce:	4a5e      	ldr	r2, [pc, #376]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 80066d0:	f043 0304 	orr.w	r3, r3, #4
 80066d4:	6713      	str	r3, [r2, #112]	; 0x70
 80066d6:	4b5c      	ldr	r3, [pc, #368]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 80066d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066da:	4a5b      	ldr	r2, [pc, #364]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	6713      	str	r3, [r2, #112]	; 0x70
 80066e2:	e00b      	b.n	80066fc <HAL_RCC_OscConfig+0x324>
 80066e4:	4b58      	ldr	r3, [pc, #352]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 80066e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e8:	4a57      	ldr	r2, [pc, #348]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 80066ea:	f023 0301 	bic.w	r3, r3, #1
 80066ee:	6713      	str	r3, [r2, #112]	; 0x70
 80066f0:	4b55      	ldr	r3, [pc, #340]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 80066f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f4:	4a54      	ldr	r2, [pc, #336]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 80066f6:	f023 0304 	bic.w	r3, r3, #4
 80066fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d015      	beq.n	8006730 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fe fdfc 	bl	8005300 <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670a:	e00a      	b.n	8006722 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800670c:	f7fe fdf8 	bl	8005300 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	f241 3288 	movw	r2, #5000	; 0x1388
 800671a:	4293      	cmp	r3, r2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e0cb      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006722:	4b49      	ldr	r3, [pc, #292]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0ee      	beq.n	800670c <HAL_RCC_OscConfig+0x334>
 800672e:	e014      	b.n	800675a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006730:	f7fe fde6 	bl	8005300 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006736:	e00a      	b.n	800674e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006738:	f7fe fde2 	bl	8005300 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	f241 3288 	movw	r2, #5000	; 0x1388
 8006746:	4293      	cmp	r3, r2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e0b5      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800674e:	4b3e      	ldr	r3, [pc, #248]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 8006750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1ee      	bne.n	8006738 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800675a:	7dfb      	ldrb	r3, [r7, #23]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d105      	bne.n	800676c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006760:	4b39      	ldr	r3, [pc, #228]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	4a38      	ldr	r2, [pc, #224]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 8006766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800676a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80a1 	beq.w	80068b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006776:	4b34      	ldr	r3, [pc, #208]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 030c 	and.w	r3, r3, #12
 800677e:	2b08      	cmp	r3, #8
 8006780:	d05c      	beq.n	800683c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d141      	bne.n	800680e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678a:	4b31      	ldr	r3, [pc, #196]	; (8006850 <HAL_RCC_OscConfig+0x478>)
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006790:	f7fe fdb6 	bl	8005300 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006798:	f7fe fdb2 	bl	8005300 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e087      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067aa:	4b27      	ldr	r3, [pc, #156]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f0      	bne.n	8006798 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69da      	ldr	r2, [r3, #28]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	019b      	lsls	r3, r3, #6
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	3b01      	subs	r3, #1
 80067d0:	041b      	lsls	r3, r3, #16
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	061b      	lsls	r3, r3, #24
 80067da:	491b      	ldr	r1, [pc, #108]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e0:	4b1b      	ldr	r3, [pc, #108]	; (8006850 <HAL_RCC_OscConfig+0x478>)
 80067e2:	2201      	movs	r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e6:	f7fe fd8b 	bl	8005300 <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ec:	e008      	b.n	8006800 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ee:	f7fe fd87 	bl	8005300 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e05c      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006800:	4b11      	ldr	r3, [pc, #68]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0f0      	beq.n	80067ee <HAL_RCC_OscConfig+0x416>
 800680c:	e054      	b.n	80068b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680e:	4b10      	ldr	r3, [pc, #64]	; (8006850 <HAL_RCC_OscConfig+0x478>)
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006814:	f7fe fd74 	bl	8005300 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800681c:	f7fe fd70 	bl	8005300 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e045      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800682e:	4b06      	ldr	r3, [pc, #24]	; (8006848 <HAL_RCC_OscConfig+0x470>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f0      	bne.n	800681c <HAL_RCC_OscConfig+0x444>
 800683a:	e03d      	b.n	80068b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d107      	bne.n	8006854 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e038      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
 8006848:	40023800 	.word	0x40023800
 800684c:	40007000 	.word	0x40007000
 8006850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006854:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <HAL_RCC_OscConfig+0x4ec>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d028      	beq.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800686c:	429a      	cmp	r2, r3
 800686e:	d121      	bne.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687a:	429a      	cmp	r2, r3
 800687c:	d11a      	bne.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006884:	4013      	ands	r3, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800688a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800688c:	4293      	cmp	r3, r2
 800688e:	d111      	bne.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	3b01      	subs	r3, #1
 800689e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d107      	bne.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d001      	beq.n	80068b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e000      	b.n	80068ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40023800 	.word	0x40023800

080068c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e0cc      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068dc:	4b68      	ldr	r3, [pc, #416]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d90c      	bls.n	8006904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ea:	4b65      	ldr	r3, [pc, #404]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f2:	4b63      	ldr	r3, [pc, #396]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e0b8      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d020      	beq.n	8006952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d005      	beq.n	8006928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800691c:	4b59      	ldr	r3, [pc, #356]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	4a58      	ldr	r2, [pc, #352]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006934:	4b53      	ldr	r3, [pc, #332]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	4a52      	ldr	r2, [pc, #328]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800693e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006940:	4b50      	ldr	r3, [pc, #320]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	494d      	ldr	r1, [pc, #308]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 800694e:	4313      	orrs	r3, r2
 8006950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d044      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d107      	bne.n	8006976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006966:	4b47      	ldr	r3, [pc, #284]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d119      	bne.n	80069a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e07f      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b02      	cmp	r3, #2
 800697c:	d003      	beq.n	8006986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006982:	2b03      	cmp	r3, #3
 8006984:	d107      	bne.n	8006996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006986:	4b3f      	ldr	r3, [pc, #252]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d109      	bne.n	80069a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e06f      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006996:	4b3b      	ldr	r3, [pc, #236]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e067      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069a6:	4b37      	ldr	r3, [pc, #220]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f023 0203 	bic.w	r2, r3, #3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	4934      	ldr	r1, [pc, #208]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069b8:	f7fe fca2 	bl	8005300 <HAL_GetTick>
 80069bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069be:	e00a      	b.n	80069d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069c0:	f7fe fc9e 	bl	8005300 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e04f      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d6:	4b2b      	ldr	r3, [pc, #172]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 020c 	and.w	r2, r3, #12
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d1eb      	bne.n	80069c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069e8:	4b25      	ldr	r3, [pc, #148]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d20c      	bcs.n	8006a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069f6:	4b22      	ldr	r3, [pc, #136]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fe:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d001      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e032      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a1c:	4b19      	ldr	r3, [pc, #100]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	4916      	ldr	r1, [pc, #88]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a3a:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	490e      	ldr	r1, [pc, #56]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a4e:	f000 f821 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8006a52:	4602      	mov	r2, r0
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	490a      	ldr	r1, [pc, #40]	; (8006a88 <HAL_RCC_ClockConfig+0x1c0>)
 8006a60:	5ccb      	ldrb	r3, [r1, r3]
 8006a62:	fa22 f303 	lsr.w	r3, r2, r3
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <HAL_RCC_ClockConfig+0x1c4>)
 8006a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a6a:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <HAL_RCC_ClockConfig+0x1c8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe fad8 	bl	8005024 <HAL_InitTick>

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40023c00 	.word	0x40023c00
 8006a84:	40023800 	.word	0x40023800
 8006a88:	08014974 	.word	0x08014974
 8006a8c:	200000a4 	.word	0x200000a4
 8006a90:	200000a8 	.word	0x200000a8

08006a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a98:	b094      	sub	sp, #80	; 0x50
 8006a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aac:	4b79      	ldr	r3, [pc, #484]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 030c 	and.w	r3, r3, #12
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d00d      	beq.n	8006ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	f200 80e1 	bhi.w	8006c80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d003      	beq.n	8006ace <HAL_RCC_GetSysClockFreq+0x3a>
 8006ac6:	e0db      	b.n	8006c80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ac8:	4b73      	ldr	r3, [pc, #460]	; (8006c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8006aca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006acc:	e0db      	b.n	8006c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ace:	4b73      	ldr	r3, [pc, #460]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x208>)
 8006ad0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ad2:	e0d8      	b.n	8006c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ad4:	4b6f      	ldr	r3, [pc, #444]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006adc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ade:	4b6d      	ldr	r3, [pc, #436]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d063      	beq.n	8006bb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aea:	4b6a      	ldr	r3, [pc, #424]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	099b      	lsrs	r3, r3, #6
 8006af0:	2200      	movs	r2, #0
 8006af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006af4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afc:	633b      	str	r3, [r7, #48]	; 0x30
 8006afe:	2300      	movs	r3, #0
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34
 8006b02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b06:	4622      	mov	r2, r4
 8006b08:	462b      	mov	r3, r5
 8006b0a:	f04f 0000 	mov.w	r0, #0
 8006b0e:	f04f 0100 	mov.w	r1, #0
 8006b12:	0159      	lsls	r1, r3, #5
 8006b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b18:	0150      	lsls	r0, r2, #5
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4621      	mov	r1, r4
 8006b20:	1a51      	subs	r1, r2, r1
 8006b22:	6139      	str	r1, [r7, #16]
 8006b24:	4629      	mov	r1, r5
 8006b26:	eb63 0301 	sbc.w	r3, r3, r1
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b38:	4659      	mov	r1, fp
 8006b3a:	018b      	lsls	r3, r1, #6
 8006b3c:	4651      	mov	r1, sl
 8006b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b42:	4651      	mov	r1, sl
 8006b44:	018a      	lsls	r2, r1, #6
 8006b46:	4651      	mov	r1, sl
 8006b48:	ebb2 0801 	subs.w	r8, r2, r1
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	eb63 0901 	sbc.w	r9, r3, r1
 8006b52:	f04f 0200 	mov.w	r2, #0
 8006b56:	f04f 0300 	mov.w	r3, #0
 8006b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b66:	4690      	mov	r8, r2
 8006b68:	4699      	mov	r9, r3
 8006b6a:	4623      	mov	r3, r4
 8006b6c:	eb18 0303 	adds.w	r3, r8, r3
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	462b      	mov	r3, r5
 8006b74:	eb49 0303 	adc.w	r3, r9, r3
 8006b78:	60fb      	str	r3, [r7, #12]
 8006b7a:	f04f 0200 	mov.w	r2, #0
 8006b7e:	f04f 0300 	mov.w	r3, #0
 8006b82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b86:	4629      	mov	r1, r5
 8006b88:	024b      	lsls	r3, r1, #9
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b90:	4621      	mov	r1, r4
 8006b92:	024a      	lsls	r2, r1, #9
 8006b94:	4610      	mov	r0, r2
 8006b96:	4619      	mov	r1, r3
 8006b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ba0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ba4:	f7f9 fec2 	bl	800092c <__aeabi_uldivmod>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4613      	mov	r3, r2
 8006bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb0:	e058      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bb2:	4b38      	ldr	r3, [pc, #224]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	099b      	lsrs	r3, r3, #6
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006bc2:	623b      	str	r3, [r7, #32]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006bcc:	4642      	mov	r2, r8
 8006bce:	464b      	mov	r3, r9
 8006bd0:	f04f 0000 	mov.w	r0, #0
 8006bd4:	f04f 0100 	mov.w	r1, #0
 8006bd8:	0159      	lsls	r1, r3, #5
 8006bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bde:	0150      	lsls	r0, r2, #5
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4641      	mov	r1, r8
 8006be6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006bea:	4649      	mov	r1, r9
 8006bec:	eb63 0b01 	sbc.w	fp, r3, r1
 8006bf0:	f04f 0200 	mov.w	r2, #0
 8006bf4:	f04f 0300 	mov.w	r3, #0
 8006bf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006bfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c04:	ebb2 040a 	subs.w	r4, r2, sl
 8006c08:	eb63 050b 	sbc.w	r5, r3, fp
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	00eb      	lsls	r3, r5, #3
 8006c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c1a:	00e2      	lsls	r2, r4, #3
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	461d      	mov	r5, r3
 8006c20:	4643      	mov	r3, r8
 8006c22:	18e3      	adds	r3, r4, r3
 8006c24:	603b      	str	r3, [r7, #0]
 8006c26:	464b      	mov	r3, r9
 8006c28:	eb45 0303 	adc.w	r3, r5, r3
 8006c2c:	607b      	str	r3, [r7, #4]
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	028b      	lsls	r3, r1, #10
 8006c3e:	4621      	mov	r1, r4
 8006c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c44:	4621      	mov	r1, r4
 8006c46:	028a      	lsls	r2, r1, #10
 8006c48:	4610      	mov	r0, r2
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c4e:	2200      	movs	r2, #0
 8006c50:	61bb      	str	r3, [r7, #24]
 8006c52:	61fa      	str	r2, [r7, #28]
 8006c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c58:	f7f9 fe68 	bl	800092c <__aeabi_uldivmod>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4613      	mov	r3, r2
 8006c62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c64:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	0c1b      	lsrs	r3, r3, #16
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	3301      	adds	r3, #1
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c7e:	e002      	b.n	8006c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c80:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3750      	adds	r7, #80	; 0x50
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c92:	bf00      	nop
 8006c94:	40023800 	.word	0x40023800
 8006c98:	00f42400 	.word	0x00f42400
 8006c9c:	007a1200 	.word	0x007a1200

08006ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ca4:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	200000a4 	.word	0x200000a4

08006cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006cbc:	f7ff fff0 	bl	8006ca0 <HAL_RCC_GetHCLKFreq>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	0a9b      	lsrs	r3, r3, #10
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	4903      	ldr	r1, [pc, #12]	; (8006cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cce:	5ccb      	ldrb	r3, [r1, r3]
 8006cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	08014984 	.word	0x08014984

08006ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ce4:	f7ff ffdc 	bl	8006ca0 <HAL_RCC_GetHCLKFreq>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	0b5b      	lsrs	r3, r3, #13
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	4903      	ldr	r1, [pc, #12]	; (8006d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cf6:	5ccb      	ldrb	r3, [r1, r3]
 8006cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40023800 	.word	0x40023800
 8006d04:	08014984 	.word	0x08014984

08006d08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	220f      	movs	r2, #15
 8006d16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d18:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <HAL_RCC_GetClockConfig+0x5c>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 0203 	and.w	r2, r3, #3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d24:	4b0f      	ldr	r3, [pc, #60]	; (8006d64 <HAL_RCC_GetClockConfig+0x5c>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d30:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <HAL_RCC_GetClockConfig+0x5c>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006d3c:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <HAL_RCC_GetClockConfig+0x5c>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	08db      	lsrs	r3, r3, #3
 8006d42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d4a:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <HAL_RCC_GetClockConfig+0x60>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0207 	and.w	r2, r3, #7
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	601a      	str	r2, [r3, #0]
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40023800 	.word	0x40023800
 8006d68:	40023c00 	.word	0x40023c00

08006d6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d105      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d035      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d94:	4b62      	ldr	r3, [pc, #392]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d9a:	f7fe fab1 	bl	8005300 <HAL_GetTick>
 8006d9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006da0:	e008      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006da2:	f7fe faad 	bl	8005300 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e0b0      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006db4:	4b5b      	ldr	r3, [pc, #364]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1f0      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	019a      	lsls	r2, r3, #6
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	071b      	lsls	r3, r3, #28
 8006dcc:	4955      	ldr	r1, [pc, #340]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006dd4:	4b52      	ldr	r3, [pc, #328]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dda:	f7fe fa91 	bl	8005300 <HAL_GetTick>
 8006dde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006de0:	e008      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006de2:	f7fe fa8d 	bl	8005300 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d901      	bls.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e090      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006df4:	4b4b      	ldr	r3, [pc, #300]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0f0      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8083 	beq.w	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	4b44      	ldr	r3, [pc, #272]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	4a43      	ldr	r2, [pc, #268]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e1e:	4b41      	ldr	r3, [pc, #260]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e2a:	4b3f      	ldr	r3, [pc, #252]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a3e      	ldr	r2, [pc, #248]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e36:	f7fe fa63 	bl	8005300 <HAL_GetTick>
 8006e3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e3e:	f7fe fa5f 	bl	8005300 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e062      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e50:	4b35      	ldr	r3, [pc, #212]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0f0      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e5c:	4b31      	ldr	r3, [pc, #196]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d02f      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d028      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e7a:	4b2a      	ldr	r3, [pc, #168]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e84:	4b29      	ldr	r3, [pc, #164]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e86:	2201      	movs	r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e8a:	4b28      	ldr	r3, [pc, #160]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e90:	4a24      	ldr	r2, [pc, #144]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e96:	4b23      	ldr	r3, [pc, #140]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d114      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ea2:	f7fe fa2d 	bl	8005300 <HAL_GetTick>
 8006ea6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea8:	e00a      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eaa:	f7fe fa29 	bl	8005300 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e02a      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec0:	4b18      	ldr	r3, [pc, #96]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0ee      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed8:	d10d      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006eda:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eee:	490d      	ldr	r1, [pc, #52]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	608b      	str	r3, [r1, #8]
 8006ef4:	e005      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006ef6:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	4a0a      	ldr	r2, [pc, #40]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006efc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f00:	6093      	str	r3, [r2, #8]
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f0e:	4905      	ldr	r1, [pc, #20]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	42470068 	.word	0x42470068
 8006f24:	40023800 	.word	0x40023800
 8006f28:	40007000 	.word	0x40007000
 8006f2c:	42470e40 	.word	0x42470e40

08006f30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e066      	b.n	8007014 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	7f5b      	ldrb	r3, [r3, #29]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d105      	bne.n	8006f5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fd fea4 	bl	8004ca4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	22ca      	movs	r2, #202	; 0xca
 8006f68:	625a      	str	r2, [r3, #36]	; 0x24
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2253      	movs	r2, #83	; 0x53
 8006f70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa45 	bl	8007402 <RTC_EnterInitMode>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d12c      	bne.n	8006fdc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6812      	ldr	r2, [r2, #0]
 8006f8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f94:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6899      	ldr	r1, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	68d2      	ldr	r2, [r2, #12]
 8006fbc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6919      	ldr	r1, [r3, #16]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	041a      	lsls	r2, r3, #16
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fa4c 	bl	8007470 <RTC_ExitInitMode>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d113      	bne.n	800700a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ff0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699a      	ldr	r2, [r3, #24]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	22ff      	movs	r2, #255	; 0xff
 8007010:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007012:	7bfb      	ldrb	r3, [r7, #15]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800701c:	b590      	push	{r4, r7, lr}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	7f1b      	ldrb	r3, [r3, #28]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d101      	bne.n	8007038 <HAL_RTC_SetTime+0x1c>
 8007034:	2302      	movs	r3, #2
 8007036:	e087      	b.n	8007148 <HAL_RTC_SetTime+0x12c>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2201      	movs	r2, #1
 800703c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2202      	movs	r2, #2
 8007042:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d126      	bne.n	8007098 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d102      	bne.n	800705e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f000 fa29 	bl	80074ba <RTC_ByteToBcd2>
 8007068:	4603      	mov	r3, r0
 800706a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	785b      	ldrb	r3, [r3, #1]
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fa22 	bl	80074ba <RTC_ByteToBcd2>
 8007076:	4603      	mov	r3, r0
 8007078:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800707a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	789b      	ldrb	r3, [r3, #2]
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fa1a 	bl	80074ba <RTC_ByteToBcd2>
 8007086:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007088:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	78db      	ldrb	r3, [r3, #3]
 8007090:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]
 8007096:	e018      	b.n	80070ca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d102      	bne.n	80070ac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2200      	movs	r2, #0
 80070aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80070b8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80070be:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	78db      	ldrb	r3, [r3, #3]
 80070c4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	22ca      	movs	r2, #202	; 0xca
 80070d0:	625a      	str	r2, [r3, #36]	; 0x24
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2253      	movs	r2, #83	; 0x53
 80070d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f991 	bl	8007402 <RTC_EnterInitMode>
 80070e0:	4603      	mov	r3, r0
 80070e2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80070e4:	7cfb      	ldrb	r3, [r7, #19]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d120      	bne.n	800712c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80070f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80070f8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007108:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6899      	ldr	r1, [r3, #8]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	431a      	orrs	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 f9a4 	bl	8007470 <RTC_ExitInitMode>
 8007128:	4603      	mov	r3, r0
 800712a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800712c:	7cfb      	ldrb	r3, [r7, #19]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d102      	bne.n	8007138 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	22ff      	movs	r2, #255	; 0xff
 800713e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	771a      	strb	r2, [r3, #28]

  return status;
 8007146:	7cfb      	ldrb	r3, [r7, #19]
}
 8007148:	4618      	mov	r0, r3
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	bd90      	pop	{r4, r7, pc}

08007150 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007182:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007186:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	0c1b      	lsrs	r3, r3, #16
 800718c:	b2db      	uxtb	r3, r3
 800718e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007192:	b2da      	uxtb	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	0a1b      	lsrs	r3, r3, #8
 800719c:	b2db      	uxtb	r3, r3
 800719e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	0d9b      	lsrs	r3, r3, #22
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d11a      	bne.n	8007202 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 f98f 	bl	80074f4 <RTC_Bcd2ToByte>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461a      	mov	r2, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 f986 	bl	80074f4 <RTC_Bcd2ToByte>
 80071e8:	4603      	mov	r3, r0
 80071ea:	461a      	mov	r2, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	789b      	ldrb	r3, [r3, #2]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 f97d 	bl	80074f4 <RTC_Bcd2ToByte>
 80071fa:	4603      	mov	r3, r0
 80071fc:	461a      	mov	r2, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800720c:	b590      	push	{r4, r7, lr}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	7f1b      	ldrb	r3, [r3, #28]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_RTC_SetDate+0x1c>
 8007224:	2302      	movs	r3, #2
 8007226:	e071      	b.n	800730c <HAL_RTC_SetDate+0x100>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2201      	movs	r2, #1
 800722c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2202      	movs	r2, #2
 8007232:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10e      	bne.n	8007258 <HAL_RTC_SetDate+0x4c>
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	785b      	ldrb	r3, [r3, #1]
 800723e:	f003 0310 	and.w	r3, r3, #16
 8007242:	2b00      	cmp	r3, #0
 8007244:	d008      	beq.n	8007258 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	f023 0310 	bic.w	r3, r3, #16
 800724e:	b2db      	uxtb	r3, r3
 8007250:	330a      	adds	r3, #10
 8007252:	b2da      	uxtb	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d11c      	bne.n	8007298 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	78db      	ldrb	r3, [r3, #3]
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f929 	bl	80074ba <RTC_ByteToBcd2>
 8007268:	4603      	mov	r3, r0
 800726a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	4618      	mov	r0, r3
 8007272:	f000 f922 	bl	80074ba <RTC_ByteToBcd2>
 8007276:	4603      	mov	r3, r0
 8007278:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800727a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	789b      	ldrb	r3, [r3, #2]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 f91a 	bl	80074ba <RTC_ByteToBcd2>
 8007286:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007288:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	e00e      	b.n	80072b6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	78db      	ldrb	r3, [r3, #3]
 800729c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	785b      	ldrb	r3, [r3, #1]
 80072a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80072a4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80072aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	22ca      	movs	r2, #202	; 0xca
 80072bc:	625a      	str	r2, [r3, #36]	; 0x24
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2253      	movs	r2, #83	; 0x53
 80072c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 f89b 	bl	8007402 <RTC_EnterInitMode>
 80072cc:	4603      	mov	r3, r0
 80072ce:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80072d0:	7cfb      	ldrb	r3, [r7, #19]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10c      	bne.n	80072f0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80072e4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 f8c2 	bl	8007470 <RTC_ExitInitMode>
 80072ec:	4603      	mov	r3, r0
 80072ee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80072f0:	7cfb      	ldrb	r3, [r7, #19]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	22ff      	movs	r2, #255	; 0xff
 8007302:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	771a      	strb	r2, [r3, #28]

  return status;
 800730a:	7cfb      	ldrb	r3, [r7, #19]
}
 800730c:	4618      	mov	r0, r3
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	bd90      	pop	{r4, r7, pc}

08007314 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800732e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007332:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	0c1b      	lsrs	r3, r3, #16
 8007338:	b2da      	uxtb	r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	0a1b      	lsrs	r3, r3, #8
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f003 031f 	and.w	r3, r3, #31
 8007348:	b2da      	uxtb	r2, r3
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007356:	b2da      	uxtb	r2, r3
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	0b5b      	lsrs	r3, r3, #13
 8007360:	b2db      	uxtb	r3, r3
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	b2da      	uxtb	r2, r3
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d11a      	bne.n	80073a8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	78db      	ldrb	r3, [r3, #3]
 8007376:	4618      	mov	r0, r3
 8007378:	f000 f8bc 	bl	80074f4 <RTC_Bcd2ToByte>
 800737c:	4603      	mov	r3, r0
 800737e:	461a      	mov	r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	785b      	ldrb	r3, [r3, #1]
 8007388:	4618      	mov	r0, r3
 800738a:	f000 f8b3 	bl	80074f4 <RTC_Bcd2ToByte>
 800738e:	4603      	mov	r3, r0
 8007390:	461a      	mov	r2, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	789b      	ldrb	r3, [r3, #2]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 f8aa 	bl	80074f4 <RTC_Bcd2ToByte>
 80073a0:	4603      	mov	r3, r0
 80073a2:	461a      	mov	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073cc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073ce:	f7fd ff97 	bl	8005300 <HAL_GetTick>
 80073d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80073d4:	e009      	b.n	80073ea <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073d6:	f7fd ff93 	bl	8005300 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073e4:	d901      	bls.n	80073ea <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e007      	b.n	80073fa <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0ee      	beq.n	80073d6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	d122      	bne.n	8007466 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800742e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007430:	f7fd ff66 	bl	8005300 <HAL_GetTick>
 8007434:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007436:	e00c      	b.n	8007452 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007438:	f7fd ff62 	bl	8005300 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007446:	d904      	bls.n	8007452 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2204      	movs	r2, #4
 800744c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <RTC_EnterInitMode+0x64>
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d1e8      	bne.n	8007438 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007466:	7bfb      	ldrb	r3, [r7, #15]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800748a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10a      	bne.n	80074b0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff ff89 	bl	80073b2 <HAL_RTC_WaitForSynchro>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d004      	beq.n	80074b0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2204      	movs	r2, #4
 80074aa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	4603      	mov	r3, r0
 80074c2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80074c8:	e005      	b.n	80074d6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	3301      	adds	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	3b0a      	subs	r3, #10
 80074d4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	2b09      	cmp	r3, #9
 80074da:	d8f6      	bhi.n	80074ca <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	b2db      	uxtb	r3, r3
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4603      	mov	r3, r0
 80074fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	091b      	lsrs	r3, r3, #4
 8007506:	b2db      	uxtb	r3, r3
 8007508:	461a      	mov	r2, r3
 800750a:	0092      	lsls	r2, r2, #2
 800750c:	4413      	add	r3, r2
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	b2da      	uxtb	r2, r3
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	4413      	add	r3, r2
 800751e:	b2db      	uxtb	r3, r3
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e07b      	b.n	8007636 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d108      	bne.n	8007558 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800754e:	d009      	beq.n	8007564 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	61da      	str	r2, [r3, #28]
 8007556:	e005      	b.n	8007564 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fd fbbc 	bl	8004cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800759a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075ac:	431a      	orrs	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	431a      	orrs	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075de:	431a      	orrs	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e8:	ea42 0103 	orr.w	r1, r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	0c1b      	lsrs	r3, r3, #16
 8007602:	f003 0104 	and.w	r1, r3, #4
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	f003 0210 	and.w	r2, r3, #16
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	69da      	ldr	r2, [r3, #28]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007624:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b088      	sub	sp, #32
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	603b      	str	r3, [r7, #0]
 800764a:	4613      	mov	r3, r2
 800764c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007658:	2b01      	cmp	r3, #1
 800765a:	d101      	bne.n	8007660 <HAL_SPI_Transmit+0x22>
 800765c:	2302      	movs	r3, #2
 800765e:	e126      	b.n	80078ae <HAL_SPI_Transmit+0x270>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007668:	f7fd fe4a 	bl	8005300 <HAL_GetTick>
 800766c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800766e:	88fb      	ldrh	r3, [r7, #6]
 8007670:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b01      	cmp	r3, #1
 800767c:	d002      	beq.n	8007684 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800767e:	2302      	movs	r3, #2
 8007680:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007682:	e10b      	b.n	800789c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <HAL_SPI_Transmit+0x52>
 800768a:	88fb      	ldrh	r3, [r7, #6]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007694:	e102      	b.n	800789c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2203      	movs	r2, #3
 800769a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	88fa      	ldrh	r2, [r7, #6]
 80076ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	88fa      	ldrh	r2, [r7, #6]
 80076b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076dc:	d10f      	bne.n	80076fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007708:	2b40      	cmp	r3, #64	; 0x40
 800770a:	d007      	beq.n	800771c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800771a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007724:	d14b      	bne.n	80077be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <HAL_SPI_Transmit+0xf6>
 800772e:	8afb      	ldrh	r3, [r7, #22]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d13e      	bne.n	80077b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007738:	881a      	ldrh	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007744:	1c9a      	adds	r2, r3, #2
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800774e:	b29b      	uxth	r3, r3
 8007750:	3b01      	subs	r3, #1
 8007752:	b29a      	uxth	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007758:	e02b      	b.n	80077b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b02      	cmp	r3, #2
 8007766:	d112      	bne.n	800778e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	881a      	ldrh	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	1c9a      	adds	r2, r3, #2
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	86da      	strh	r2, [r3, #54]	; 0x36
 800778c:	e011      	b.n	80077b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800778e:	f7fd fdb7 	bl	8005300 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	d803      	bhi.n	80077a6 <HAL_SPI_Transmit+0x168>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077a4:	d102      	bne.n	80077ac <HAL_SPI_Transmit+0x16e>
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d102      	bne.n	80077b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077b0:	e074      	b.n	800789c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1ce      	bne.n	800775a <HAL_SPI_Transmit+0x11c>
 80077bc:	e04c      	b.n	8007858 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_SPI_Transmit+0x18e>
 80077c6:	8afb      	ldrh	r3, [r7, #22]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d140      	bne.n	800784e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	7812      	ldrb	r2, [r2, #0]
 80077d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	3b01      	subs	r3, #1
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077f2:	e02c      	b.n	800784e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d113      	bne.n	800782a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	330c      	adds	r3, #12
 800780c:	7812      	ldrb	r2, [r2, #0]
 800780e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800781e:	b29b      	uxth	r3, r3
 8007820:	3b01      	subs	r3, #1
 8007822:	b29a      	uxth	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	86da      	strh	r2, [r3, #54]	; 0x36
 8007828:	e011      	b.n	800784e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800782a:	f7fd fd69 	bl	8005300 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d803      	bhi.n	8007842 <HAL_SPI_Transmit+0x204>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007840:	d102      	bne.n	8007848 <HAL_SPI_Transmit+0x20a>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800784c:	e026      	b.n	800789c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007852:	b29b      	uxth	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1cd      	bne.n	80077f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 fb13 	bl	8007e88 <SPI_EndRxTxTransaction>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2220      	movs	r2, #32
 800786c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007876:	2300      	movs	r3, #0
 8007878:	613b      	str	r3, [r7, #16]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	613b      	str	r3, [r7, #16]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	613b      	str	r3, [r7, #16]
 800788a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	77fb      	strb	r3, [r7, #31]
 8007898:	e000      	b.n	800789c <HAL_SPI_Transmit+0x25e>
  }

error:
 800789a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	4613      	mov	r3, r2
 80078c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_SPI_Transmit_DMA+0x20>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e09b      	b.n	8007a10 <HAL_SPI_Transmit_DMA+0x158>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d002      	beq.n	80078f2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80078ec:	2302      	movs	r3, #2
 80078ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078f0:	e089      	b.n	8007a06 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <HAL_SPI_Transmit_DMA+0x46>
 80078f8:	88fb      	ldrh	r3, [r7, #6]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d102      	bne.n	8007904 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007902:	e080      	b.n	8007a06 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2203      	movs	r2, #3
 8007908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	88fa      	ldrh	r2, [r7, #6]
 800791c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	88fa      	ldrh	r2, [r7, #6]
 8007922:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800794a:	d10f      	bne.n	800796c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800795a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800796a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007970:	4a29      	ldr	r2, [pc, #164]	; (8007a18 <HAL_SPI_Transmit_DMA+0x160>)
 8007972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007978:	4a28      	ldr	r2, [pc, #160]	; (8007a1c <HAL_SPI_Transmit_DMA+0x164>)
 800797a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007980:	4a27      	ldr	r2, [pc, #156]	; (8007a20 <HAL_SPI_Transmit_DMA+0x168>)
 8007982:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007988:	2200      	movs	r2, #0
 800798a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007994:	4619      	mov	r1, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	330c      	adds	r3, #12
 800799c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80079a4:	f7fd fe6c 	bl	8005680 <HAL_DMA_Start_IT>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00c      	beq.n	80079c8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	f043 0210 	orr.w	r2, r3, #16
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80079c6:	e01e      	b.n	8007a06 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d2:	2b40      	cmp	r3, #64	; 0x40
 80079d4:	d007      	beq.n	80079e6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079e4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0220 	orr.w	r2, r2, #32
 80079f4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0202 	orr.w	r2, r2, #2
 8007a04:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	08007cf5 	.word	0x08007cf5
 8007a1c:	08007c4d 	.word	0x08007c4d
 8007a20:	08007d11 	.word	0x08007d11

08007a24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	099b      	lsrs	r3, r3, #6
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10f      	bne.n	8007a68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	099b      	lsrs	r3, r3, #6
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	4798      	blx	r3
    return;
 8007a66:	e0d7      	b.n	8007c18 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	085b      	lsrs	r3, r3, #1
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00a      	beq.n	8007a8a <HAL_SPI_IRQHandler+0x66>
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	09db      	lsrs	r3, r3, #7
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	4798      	blx	r3
    return;
 8007a88:	e0c6      	b.n	8007c18 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	095b      	lsrs	r3, r3, #5
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10c      	bne.n	8007ab0 <HAL_SPI_IRQHandler+0x8c>
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	099b      	lsrs	r3, r3, #6
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d106      	bne.n	8007ab0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	0a1b      	lsrs	r3, r3, #8
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80b4 	beq.w	8007c18 <HAL_SPI_IRQHandler+0x1f4>
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80ad 	beq.w	8007c18 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	099b      	lsrs	r3, r3, #6
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d023      	beq.n	8007b12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d011      	beq.n	8007afa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ada:	f043 0204 	orr.w	r2, r3, #4
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	e00b      	b.n	8007b12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007afa:	2300      	movs	r3, #0
 8007afc:	613b      	str	r3, [r7, #16]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	693b      	ldr	r3, [r7, #16]
        return;
 8007b10:	e082      	b.n	8007c18 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	095b      	lsrs	r3, r3, #5
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d014      	beq.n	8007b48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b22:	f043 0201 	orr.w	r2, r3, #1
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	60fb      	str	r3, [r7, #12]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	0a1b      	lsrs	r3, r3, #8
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00c      	beq.n	8007b6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b58:	f043 0208 	orr.w	r2, r3, #8
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b60:	2300      	movs	r3, #0
 8007b62:	60bb      	str	r3, [r7, #8]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	60bb      	str	r3, [r7, #8]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d04f      	beq.n	8007c16 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d104      	bne.n	8007ba2 <HAL_SPI_IRQHandler+0x17e>
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d034      	beq.n	8007c0c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 0203 	bic.w	r2, r2, #3
 8007bb0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d011      	beq.n	8007bde <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bbe:	4a18      	ldr	r2, [pc, #96]	; (8007c20 <HAL_SPI_IRQHandler+0x1fc>)
 8007bc0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fd fe22 	bl	8005810 <HAL_DMA_Abort_IT>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d016      	beq.n	8007c14 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bea:	4a0d      	ldr	r2, [pc, #52]	; (8007c20 <HAL_SPI_IRQHandler+0x1fc>)
 8007bec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fd fe0c 	bl	8005810 <HAL_DMA_Abort_IT>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007c0a:	e003      	b.n	8007c14 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f813 	bl	8007c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007c12:	e000      	b.n	8007c16 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007c14:	bf00      	nop
    return;
 8007c16:	bf00      	nop
  }
}
 8007c18:	3720      	adds	r7, #32
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	08007d51 	.word	0x08007d51

08007c24 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c5a:	f7fd fb51 	bl	8005300 <HAL_GetTick>
 8007c5e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c6e:	d03b      	beq.n	8007ce8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0220 	bic.w	r2, r2, #32
 8007c7e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0202 	bic.w	r2, r2, #2
 8007c8e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	2164      	movs	r1, #100	; 0x64
 8007c94:	6978      	ldr	r0, [r7, #20]
 8007c96:	f000 f8f7 	bl	8007e88 <SPI_EndRxTxTransaction>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca4:	f043 0220 	orr.w	r2, r3, #32
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ce0:	6978      	ldr	r0, [r7, #20]
 8007ce2:	f7ff ffa9 	bl	8007c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007ce6:	e002      	b.n	8007cee <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007ce8:	6978      	ldr	r0, [r7, #20]
 8007cea:	f7fb fb6d 	bl	80033c8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d00:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7ff ff8e 	bl	8007c24 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d08:	bf00      	nop
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 0203 	bic.w	r2, r2, #3
 8007d2c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d32:	f043 0210 	orr.w	r2, r3, #16
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f7ff ff78 	bl	8007c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff ff64 	bl	8007c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d70:	bf00      	nop
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	4613      	mov	r3, r2
 8007d86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d88:	f7fd faba 	bl	8005300 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	4413      	add	r3, r2
 8007d96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d98:	f7fd fab2 	bl	8005300 <HAL_GetTick>
 8007d9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d9e:	4b39      	ldr	r3, [pc, #228]	; (8007e84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	015b      	lsls	r3, r3, #5
 8007da4:	0d1b      	lsrs	r3, r3, #20
 8007da6:	69fa      	ldr	r2, [r7, #28]
 8007da8:	fb02 f303 	mul.w	r3, r2, r3
 8007dac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dae:	e054      	b.n	8007e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007db6:	d050      	beq.n	8007e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007db8:	f7fd faa2 	bl	8005300 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	69fa      	ldr	r2, [r7, #28]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d902      	bls.n	8007dce <SPI_WaitFlagStateUntilTimeout+0x56>
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d13d      	bne.n	8007e4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ddc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007de6:	d111      	bne.n	8007e0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df0:	d004      	beq.n	8007dfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dfa:	d107      	bne.n	8007e0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e14:	d10f      	bne.n	8007e36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e017      	b.n	8007e7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4013      	ands	r3, r2
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	bf0c      	ite	eq
 8007e6a:	2301      	moveq	r3, #1
 8007e6c:	2300      	movne	r3, #0
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d19b      	bne.n	8007db0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3720      	adds	r7, #32
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	200000a4 	.word	0x200000a4

08007e88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e94:	4b1b      	ldr	r3, [pc, #108]	; (8007f04 <SPI_EndRxTxTransaction+0x7c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1b      	ldr	r2, [pc, #108]	; (8007f08 <SPI_EndRxTxTransaction+0x80>)
 8007e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9e:	0d5b      	lsrs	r3, r3, #21
 8007ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ea4:	fb02 f303 	mul.w	r3, r2, r3
 8007ea8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eb2:	d112      	bne.n	8007eda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2180      	movs	r1, #128	; 0x80
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f7ff ff5a 	bl	8007d78 <SPI_WaitFlagStateUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d016      	beq.n	8007ef8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ece:	f043 0220 	orr.w	r2, r3, #32
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e00f      	b.n	8007efa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef0:	2b80      	cmp	r3, #128	; 0x80
 8007ef2:	d0f2      	beq.n	8007eda <SPI_EndRxTxTransaction+0x52>
 8007ef4:	e000      	b.n	8007ef8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007ef6:	bf00      	nop
  }

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	200000a4 	.word	0x200000a4
 8007f08:	165e9f81 	.word	0x165e9f81

08007f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e041      	b.n	8007fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d106      	bne.n	8007f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7fc ff6e 	bl	8004e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3304      	adds	r3, #4
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	f000 fa96 	bl	800847c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d001      	beq.n	8007fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e04e      	b.n	8008062 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0201 	orr.w	r2, r2, #1
 8007fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a23      	ldr	r2, [pc, #140]	; (8008070 <HAL_TIM_Base_Start_IT+0xc4>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d022      	beq.n	800802c <HAL_TIM_Base_Start_IT+0x80>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fee:	d01d      	beq.n	800802c <HAL_TIM_Base_Start_IT+0x80>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a1f      	ldr	r2, [pc, #124]	; (8008074 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d018      	beq.n	800802c <HAL_TIM_Base_Start_IT+0x80>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a1e      	ldr	r2, [pc, #120]	; (8008078 <HAL_TIM_Base_Start_IT+0xcc>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d013      	beq.n	800802c <HAL_TIM_Base_Start_IT+0x80>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a1c      	ldr	r2, [pc, #112]	; (800807c <HAL_TIM_Base_Start_IT+0xd0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00e      	beq.n	800802c <HAL_TIM_Base_Start_IT+0x80>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a1b      	ldr	r2, [pc, #108]	; (8008080 <HAL_TIM_Base_Start_IT+0xd4>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d009      	beq.n	800802c <HAL_TIM_Base_Start_IT+0x80>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a19      	ldr	r2, [pc, #100]	; (8008084 <HAL_TIM_Base_Start_IT+0xd8>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d004      	beq.n	800802c <HAL_TIM_Base_Start_IT+0x80>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a18      	ldr	r2, [pc, #96]	; (8008088 <HAL_TIM_Base_Start_IT+0xdc>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d111      	bne.n	8008050 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f003 0307 	and.w	r3, r3, #7
 8008036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b06      	cmp	r3, #6
 800803c:	d010      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f042 0201 	orr.w	r2, r2, #1
 800804c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800804e:	e007      	b.n	8008060 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	40010000 	.word	0x40010000
 8008074:	40000400 	.word	0x40000400
 8008078:	40000800 	.word	0x40000800
 800807c:	40000c00 	.word	0x40000c00
 8008080:	40010400 	.word	0x40010400
 8008084:	40014000 	.word	0x40014000
 8008088:	40001800 	.word	0x40001800

0800808c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d122      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d11b      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0202 	mvn.w	r2, #2
 80080b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f9b5 	bl	800843e <HAL_TIM_IC_CaptureCallback>
 80080d4:	e005      	b.n	80080e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f9a7 	bl	800842a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f9b8 	bl	8008452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d122      	bne.n	800813c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b04      	cmp	r3, #4
 8008102:	d11b      	bne.n	800813c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0204 	mvn.w	r2, #4
 800810c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f98b 	bl	800843e <HAL_TIM_IC_CaptureCallback>
 8008128:	e005      	b.n	8008136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f97d 	bl	800842a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f98e 	bl	8008452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b08      	cmp	r3, #8
 8008148:	d122      	bne.n	8008190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 0308 	and.w	r3, r3, #8
 8008154:	2b08      	cmp	r3, #8
 8008156:	d11b      	bne.n	8008190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f06f 0208 	mvn.w	r2, #8
 8008160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2204      	movs	r2, #4
 8008166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f961 	bl	800843e <HAL_TIM_IC_CaptureCallback>
 800817c:	e005      	b.n	800818a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f953 	bl	800842a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f964 	bl	8008452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f003 0310 	and.w	r3, r3, #16
 800819a:	2b10      	cmp	r3, #16
 800819c:	d122      	bne.n	80081e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b10      	cmp	r3, #16
 80081aa:	d11b      	bne.n	80081e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f06f 0210 	mvn.w	r2, #16
 80081b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2208      	movs	r2, #8
 80081ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f937 	bl	800843e <HAL_TIM_IC_CaptureCallback>
 80081d0:	e005      	b.n	80081de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f929 	bl	800842a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f93a 	bl	8008452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d10e      	bne.n	8008210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d107      	bne.n	8008210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f06f 0201 	mvn.w	r2, #1
 8008208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fc f8d2 	bl	80043b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800821a:	2b80      	cmp	r3, #128	; 0x80
 800821c:	d10e      	bne.n	800823c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008228:	2b80      	cmp	r3, #128	; 0x80
 800822a:	d107      	bne.n	800823c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fae0 	bl	80087fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008246:	2b40      	cmp	r3, #64	; 0x40
 8008248:	d10e      	bne.n	8008268 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008254:	2b40      	cmp	r3, #64	; 0x40
 8008256:	d107      	bne.n	8008268 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f8ff 	bl	8008466 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b20      	cmp	r3, #32
 8008274:	d10e      	bne.n	8008294 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b20      	cmp	r3, #32
 8008282:	d107      	bne.n	8008294 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f06f 0220 	mvn.w	r2, #32
 800828c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 faaa 	bl	80087e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d101      	bne.n	80082b8 <HAL_TIM_ConfigClockSource+0x1c>
 80082b4:	2302      	movs	r3, #2
 80082b6:	e0b4      	b.n	8008422 <HAL_TIM_ConfigClockSource+0x186>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082f0:	d03e      	beq.n	8008370 <HAL_TIM_ConfigClockSource+0xd4>
 80082f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082f6:	f200 8087 	bhi.w	8008408 <HAL_TIM_ConfigClockSource+0x16c>
 80082fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082fe:	f000 8086 	beq.w	800840e <HAL_TIM_ConfigClockSource+0x172>
 8008302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008306:	d87f      	bhi.n	8008408 <HAL_TIM_ConfigClockSource+0x16c>
 8008308:	2b70      	cmp	r3, #112	; 0x70
 800830a:	d01a      	beq.n	8008342 <HAL_TIM_ConfigClockSource+0xa6>
 800830c:	2b70      	cmp	r3, #112	; 0x70
 800830e:	d87b      	bhi.n	8008408 <HAL_TIM_ConfigClockSource+0x16c>
 8008310:	2b60      	cmp	r3, #96	; 0x60
 8008312:	d050      	beq.n	80083b6 <HAL_TIM_ConfigClockSource+0x11a>
 8008314:	2b60      	cmp	r3, #96	; 0x60
 8008316:	d877      	bhi.n	8008408 <HAL_TIM_ConfigClockSource+0x16c>
 8008318:	2b50      	cmp	r3, #80	; 0x50
 800831a:	d03c      	beq.n	8008396 <HAL_TIM_ConfigClockSource+0xfa>
 800831c:	2b50      	cmp	r3, #80	; 0x50
 800831e:	d873      	bhi.n	8008408 <HAL_TIM_ConfigClockSource+0x16c>
 8008320:	2b40      	cmp	r3, #64	; 0x40
 8008322:	d058      	beq.n	80083d6 <HAL_TIM_ConfigClockSource+0x13a>
 8008324:	2b40      	cmp	r3, #64	; 0x40
 8008326:	d86f      	bhi.n	8008408 <HAL_TIM_ConfigClockSource+0x16c>
 8008328:	2b30      	cmp	r3, #48	; 0x30
 800832a:	d064      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x15a>
 800832c:	2b30      	cmp	r3, #48	; 0x30
 800832e:	d86b      	bhi.n	8008408 <HAL_TIM_ConfigClockSource+0x16c>
 8008330:	2b20      	cmp	r3, #32
 8008332:	d060      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x15a>
 8008334:	2b20      	cmp	r3, #32
 8008336:	d867      	bhi.n	8008408 <HAL_TIM_ConfigClockSource+0x16c>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d05c      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x15a>
 800833c:	2b10      	cmp	r3, #16
 800833e:	d05a      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x15a>
 8008340:	e062      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6818      	ldr	r0, [r3, #0]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	6899      	ldr	r1, [r3, #8]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f000 f9ad 	bl	80086b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008364:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	609a      	str	r2, [r3, #8]
      break;
 800836e:	e04f      	b.n	8008410 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	6899      	ldr	r1, [r3, #8]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f000 f996 	bl	80086b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689a      	ldr	r2, [r3, #8]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008392:	609a      	str	r2, [r3, #8]
      break;
 8008394:	e03c      	b.n	8008410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	6859      	ldr	r1, [r3, #4]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	461a      	mov	r2, r3
 80083a4:	f000 f90a 	bl	80085bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2150      	movs	r1, #80	; 0x50
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 f963 	bl	800867a <TIM_ITRx_SetConfig>
      break;
 80083b4:	e02c      	b.n	8008410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	6859      	ldr	r1, [r3, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	461a      	mov	r2, r3
 80083c4:	f000 f929 	bl	800861a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2160      	movs	r1, #96	; 0x60
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 f953 	bl	800867a <TIM_ITRx_SetConfig>
      break;
 80083d4:	e01c      	b.n	8008410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	6859      	ldr	r1, [r3, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	461a      	mov	r2, r3
 80083e4:	f000 f8ea 	bl	80085bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2140      	movs	r1, #64	; 0x40
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 f943 	bl	800867a <TIM_ITRx_SetConfig>
      break;
 80083f4:	e00c      	b.n	8008410 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4619      	mov	r1, r3
 8008400:	4610      	mov	r0, r2
 8008402:	f000 f93a 	bl	800867a <TIM_ITRx_SetConfig>
      break;
 8008406:	e003      	b.n	8008410 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	73fb      	strb	r3, [r7, #15]
      break;
 800840c:	e000      	b.n	8008410 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800840e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008420:	7bfb      	ldrb	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008432:	bf00      	nop
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008446:	bf00      	nop
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
	...

0800847c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a40      	ldr	r2, [pc, #256]	; (8008590 <TIM_Base_SetConfig+0x114>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d013      	beq.n	80084bc <TIM_Base_SetConfig+0x40>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800849a:	d00f      	beq.n	80084bc <TIM_Base_SetConfig+0x40>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a3d      	ldr	r2, [pc, #244]	; (8008594 <TIM_Base_SetConfig+0x118>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00b      	beq.n	80084bc <TIM_Base_SetConfig+0x40>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a3c      	ldr	r2, [pc, #240]	; (8008598 <TIM_Base_SetConfig+0x11c>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d007      	beq.n	80084bc <TIM_Base_SetConfig+0x40>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a3b      	ldr	r2, [pc, #236]	; (800859c <TIM_Base_SetConfig+0x120>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d003      	beq.n	80084bc <TIM_Base_SetConfig+0x40>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a3a      	ldr	r2, [pc, #232]	; (80085a0 <TIM_Base_SetConfig+0x124>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d108      	bne.n	80084ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a2f      	ldr	r2, [pc, #188]	; (8008590 <TIM_Base_SetConfig+0x114>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d02b      	beq.n	800852e <TIM_Base_SetConfig+0xb2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084dc:	d027      	beq.n	800852e <TIM_Base_SetConfig+0xb2>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a2c      	ldr	r2, [pc, #176]	; (8008594 <TIM_Base_SetConfig+0x118>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d023      	beq.n	800852e <TIM_Base_SetConfig+0xb2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a2b      	ldr	r2, [pc, #172]	; (8008598 <TIM_Base_SetConfig+0x11c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d01f      	beq.n	800852e <TIM_Base_SetConfig+0xb2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a2a      	ldr	r2, [pc, #168]	; (800859c <TIM_Base_SetConfig+0x120>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d01b      	beq.n	800852e <TIM_Base_SetConfig+0xb2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a29      	ldr	r2, [pc, #164]	; (80085a0 <TIM_Base_SetConfig+0x124>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d017      	beq.n	800852e <TIM_Base_SetConfig+0xb2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a28      	ldr	r2, [pc, #160]	; (80085a4 <TIM_Base_SetConfig+0x128>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d013      	beq.n	800852e <TIM_Base_SetConfig+0xb2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a27      	ldr	r2, [pc, #156]	; (80085a8 <TIM_Base_SetConfig+0x12c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d00f      	beq.n	800852e <TIM_Base_SetConfig+0xb2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a26      	ldr	r2, [pc, #152]	; (80085ac <TIM_Base_SetConfig+0x130>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d00b      	beq.n	800852e <TIM_Base_SetConfig+0xb2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a25      	ldr	r2, [pc, #148]	; (80085b0 <TIM_Base_SetConfig+0x134>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d007      	beq.n	800852e <TIM_Base_SetConfig+0xb2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a24      	ldr	r2, [pc, #144]	; (80085b4 <TIM_Base_SetConfig+0x138>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d003      	beq.n	800852e <TIM_Base_SetConfig+0xb2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a23      	ldr	r2, [pc, #140]	; (80085b8 <TIM_Base_SetConfig+0x13c>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d108      	bne.n	8008540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	4313      	orrs	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a0a      	ldr	r2, [pc, #40]	; (8008590 <TIM_Base_SetConfig+0x114>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d003      	beq.n	8008574 <TIM_Base_SetConfig+0xf8>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a0c      	ldr	r2, [pc, #48]	; (80085a0 <TIM_Base_SetConfig+0x124>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d103      	bne.n	800857c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	691a      	ldr	r2, [r3, #16]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	615a      	str	r2, [r3, #20]
}
 8008582:	bf00      	nop
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	40010000 	.word	0x40010000
 8008594:	40000400 	.word	0x40000400
 8008598:	40000800 	.word	0x40000800
 800859c:	40000c00 	.word	0x40000c00
 80085a0:	40010400 	.word	0x40010400
 80085a4:	40014000 	.word	0x40014000
 80085a8:	40014400 	.word	0x40014400
 80085ac:	40014800 	.word	0x40014800
 80085b0:	40001800 	.word	0x40001800
 80085b4:	40001c00 	.word	0x40001c00
 80085b8:	40002000 	.word	0x40002000

080085bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	f023 0201 	bic.w	r2, r3, #1
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	011b      	lsls	r3, r3, #4
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f023 030a 	bic.w	r3, r3, #10
 80085f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800861a:	b480      	push	{r7}
 800861c:	b087      	sub	sp, #28
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	f023 0210 	bic.w	r2, r3, #16
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	031b      	lsls	r3, r3, #12
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	4313      	orrs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008656:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	011b      	lsls	r3, r3, #4
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	4313      	orrs	r3, r2
 8008660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	621a      	str	r2, [r3, #32]
}
 800866e:	bf00      	nop
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	f043 0307 	orr.w	r3, r3, #7
 800869c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	609a      	str	r2, [r3, #8]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	021a      	lsls	r2, r3, #8
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	431a      	orrs	r2, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	4313      	orrs	r3, r2
 80086dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	609a      	str	r2, [r3, #8]
}
 80086e4:	bf00      	nop
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008700:	2b01      	cmp	r3, #1
 8008702:	d101      	bne.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008704:	2302      	movs	r3, #2
 8008706:	e05a      	b.n	80087be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a21      	ldr	r2, [pc, #132]	; (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d022      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008754:	d01d      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a1d      	ldr	r2, [pc, #116]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d018      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a1b      	ldr	r2, [pc, #108]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d013      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a1a      	ldr	r2, [pc, #104]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d00e      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a18      	ldr	r2, [pc, #96]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d009      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a17      	ldr	r2, [pc, #92]	; (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d004      	beq.n	8008792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a15      	ldr	r2, [pc, #84]	; (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d10c      	bne.n	80087ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	40010000 	.word	0x40010000
 80087d0:	40000400 	.word	0x40000400
 80087d4:	40000800 	.word	0x40000800
 80087d8:	40000c00 	.word	0x40000c00
 80087dc:	40010400 	.word	0x40010400
 80087e0:	40014000 	.word	0x40014000
 80087e4:	40001800 	.word	0x40001800

080087e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e03f      	b.n	80088a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7fc fb12 	bl	8004e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2224      	movs	r2, #36	; 0x24
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fe2b 	bl	80094b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	691a      	ldr	r2, [r3, #16]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	695a      	ldr	r2, [r3, #20]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2220      	movs	r2, #32
 8008894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2220      	movs	r2, #32
 800889c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	4613      	mov	r3, r2
 80088b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	d11d      	bne.n	8008900 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <HAL_UART_Receive_IT+0x26>
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e016      	b.n	8008902 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d101      	bne.n	80088e2 <HAL_UART_Receive_IT+0x38>
 80088de:	2302      	movs	r3, #2
 80088e0:	e00f      	b.n	8008902 <HAL_UART_Receive_IT+0x58>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80088f0:	88fb      	ldrh	r3, [r7, #6]
 80088f2:	461a      	mov	r2, r3
 80088f4:	68b9      	ldr	r1, [r7, #8]
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 fbd9 	bl	80090ae <UART_Start_Receive_IT>
 80088fc:	4603      	mov	r3, r0
 80088fe:	e000      	b.n	8008902 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008900:	2302      	movs	r3, #2
  }
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
	...

0800890c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08c      	sub	sp, #48	; 0x30
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	4613      	mov	r3, r2
 8008918:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b20      	cmp	r3, #32
 8008924:	d165      	bne.n	80089f2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <HAL_UART_Transmit_DMA+0x26>
 800892c:	88fb      	ldrh	r3, [r7, #6]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e05e      	b.n	80089f4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800893c:	2b01      	cmp	r3, #1
 800893e:	d101      	bne.n	8008944 <HAL_UART_Transmit_DMA+0x38>
 8008940:	2302      	movs	r3, #2
 8008942:	e057      	b.n	80089f4 <HAL_UART_Transmit_DMA+0xe8>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	88fa      	ldrh	r2, [r7, #6]
 8008956:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	88fa      	ldrh	r2, [r7, #6]
 800895c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2221      	movs	r2, #33	; 0x21
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008970:	4a22      	ldr	r2, [pc, #136]	; (80089fc <HAL_UART_Transmit_DMA+0xf0>)
 8008972:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008978:	4a21      	ldr	r2, [pc, #132]	; (8008a00 <HAL_UART_Transmit_DMA+0xf4>)
 800897a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008980:	4a20      	ldr	r2, [pc, #128]	; (8008a04 <HAL_UART_Transmit_DMA+0xf8>)
 8008982:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008988:	2200      	movs	r2, #0
 800898a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800898c:	f107 0308 	add.w	r3, r7, #8
 8008990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008998:	6819      	ldr	r1, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3304      	adds	r3, #4
 80089a0:	461a      	mov	r2, r3
 80089a2:	88fb      	ldrh	r3, [r7, #6]
 80089a4:	f7fc fe6c 	bl	8005680 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089b0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3314      	adds	r3, #20
 80089c0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	617b      	str	r3, [r7, #20]
   return(result);
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3314      	adds	r3, #20
 80089d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089da:	627a      	str	r2, [r7, #36]	; 0x24
 80089dc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6a39      	ldr	r1, [r7, #32]
 80089e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e5      	bne.n	80089ba <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	e000      	b.n	80089f4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80089f2:	2302      	movs	r3, #2
  }
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3730      	adds	r7, #48	; 0x30
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	08008f65 	.word	0x08008f65
 8008a00:	08008fff 	.word	0x08008fff
 8008a04:	0800901b 	.word	0x0800901b

08008a08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b0ba      	sub	sp, #232	; 0xe8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3e:	f003 030f 	and.w	r3, r3, #15
 8008a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10f      	bne.n	8008a6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d009      	beq.n	8008a6e <HAL_UART_IRQHandler+0x66>
 8008a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fc66 	bl	8009338 <UART_Receive_IT>
      return;
 8008a6c:	e256      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 80de 	beq.w	8008c34 <HAL_UART_IRQHandler+0x22c>
 8008a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d106      	bne.n	8008a92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 80d1 	beq.w	8008c34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <HAL_UART_IRQHandler+0xae>
 8008a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	f043 0201 	orr.w	r2, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <HAL_UART_IRQHandler+0xd2>
 8008ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	f043 0202 	orr.w	r2, r3, #2
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ade:	f003 0302 	and.w	r3, r3, #2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <HAL_UART_IRQHandler+0xf6>
 8008ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	f043 0204 	orr.w	r2, r3, #4
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b02:	f003 0308 	and.w	r3, r3, #8
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d011      	beq.n	8008b2e <HAL_UART_IRQHandler+0x126>
 8008b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d105      	bne.n	8008b22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	f043 0208 	orr.w	r2, r3, #8
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 81ed 	beq.w	8008f12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d008      	beq.n	8008b56 <HAL_UART_IRQHandler+0x14e>
 8008b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b48:	f003 0320 	and.w	r3, r3, #32
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fbf1 	bl	8009338 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	bf0c      	ite	eq
 8008b64:	2301      	moveq	r3, #1
 8008b66:	2300      	movne	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d103      	bne.n	8008b82 <HAL_UART_IRQHandler+0x17a>
 8008b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d04f      	beq.n	8008c22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 faf9 	bl	800917a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b92:	2b40      	cmp	r3, #64	; 0x40
 8008b94:	d141      	bne.n	8008c1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3314      	adds	r3, #20
 8008b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3314      	adds	r3, #20
 8008bbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008bc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008bce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008bd2:	e841 2300 	strex	r3, r2, [r1]
 8008bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1d9      	bne.n	8008b96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d013      	beq.n	8008c12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	4a7d      	ldr	r2, [pc, #500]	; (8008de4 <HAL_UART_IRQHandler+0x3dc>)
 8008bf0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fc fe0a 	bl	8005810 <HAL_DMA_Abort_IT>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d016      	beq.n	8008c30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c10:	e00e      	b.n	8008c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f990 	bl	8008f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c18:	e00a      	b.n	8008c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f98c 	bl	8008f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c20:	e006      	b.n	8008c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f988 	bl	8008f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008c2e:	e170      	b.n	8008f12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c30:	bf00      	nop
    return;
 8008c32:	e16e      	b.n	8008f12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	f040 814a 	bne.w	8008ed2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c42:	f003 0310 	and.w	r3, r3, #16
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 8143 	beq.w	8008ed2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 813c 	beq.w	8008ed2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60bb      	str	r3, [r7, #8]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60bb      	str	r3, [r7, #8]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	60bb      	str	r3, [r7, #8]
 8008c6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7a:	2b40      	cmp	r3, #64	; 0x40
 8008c7c:	f040 80b4 	bne.w	8008de8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 8140 	beq.w	8008f16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	f080 8139 	bcs.w	8008f16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008caa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb6:	f000 8088 	beq.w	8008dca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	330c      	adds	r3, #12
 8008ce2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ce6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cf6:	e841 2300 	strex	r3, r2, [r1]
 8008cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1d9      	bne.n	8008cba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3314      	adds	r3, #20
 8008d0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d18:	f023 0301 	bic.w	r3, r3, #1
 8008d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3314      	adds	r3, #20
 8008d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e1      	bne.n	8008d06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3314      	adds	r3, #20
 8008d48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3314      	adds	r3, #20
 8008d62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e3      	bne.n	8008d42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	330c      	adds	r3, #12
 8008d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9a:	f023 0310 	bic.w	r3, r3, #16
 8008d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	330c      	adds	r3, #12
 8008da8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008dac:	65ba      	str	r2, [r7, #88]	; 0x58
 8008dae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e3      	bne.n	8008d88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fc fcb3 	bl	8005730 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f8b6 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008de0:	e099      	b.n	8008f16 <HAL_UART_IRQHandler+0x50e>
 8008de2:	bf00      	nop
 8008de4:	08009241 	.word	0x08009241
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 808b 	beq.w	8008f1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 8086 	beq.w	8008f1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	330c      	adds	r3, #12
 8008e14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008e32:	647a      	str	r2, [r7, #68]	; 0x44
 8008e34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e3      	bne.n	8008e0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3314      	adds	r3, #20
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	623b      	str	r3, [r7, #32]
   return(result);
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	f023 0301 	bic.w	r3, r3, #1
 8008e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3314      	adds	r3, #20
 8008e66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e6a:	633a      	str	r2, [r7, #48]	; 0x30
 8008e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e3      	bne.n	8008e46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	330c      	adds	r3, #12
 8008e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	e853 3f00 	ldrex	r3, [r3]
 8008e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0310 	bic.w	r3, r3, #16
 8008ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	330c      	adds	r3, #12
 8008eac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008eb0:	61fa      	str	r2, [r7, #28]
 8008eb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	69b9      	ldr	r1, [r7, #24]
 8008eb6:	69fa      	ldr	r2, [r7, #28]
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e3      	bne.n	8008e8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f83e 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ed0:	e023      	b.n	8008f1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x4ea>
 8008ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f9bc 	bl	8009268 <UART_Transmit_IT>
    return;
 8008ef0:	e014      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00e      	beq.n	8008f1c <HAL_UART_IRQHandler+0x514>
 8008efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d008      	beq.n	8008f1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f9fc 	bl	8009308 <UART_EndTransmit_IT>
    return;
 8008f10:	e004      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
    return;
 8008f12:	bf00      	nop
 8008f14:	e002      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
      return;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <HAL_UART_IRQHandler+0x514>
      return;
 8008f1a:	bf00      	nop
  }
}
 8008f1c:	37e8      	adds	r7, #232	; 0xe8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop

08008f24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b090      	sub	sp, #64	; 0x40
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d137      	bne.n	8008ff0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f82:	2200      	movs	r2, #0
 8008f84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3314      	adds	r3, #20
 8008f8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	e853 3f00 	ldrex	r3, [r3]
 8008f94:	623b      	str	r3, [r7, #32]
   return(result);
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3314      	adds	r3, #20
 8008fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fa6:	633a      	str	r2, [r7, #48]	; 0x30
 8008fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e5      	bne.n	8008f86 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	330c      	adds	r3, #12
 8008fc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	330c      	adds	r3, #12
 8008fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fda:	61fa      	str	r2, [r7, #28]
 8008fdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	69b9      	ldr	r1, [r7, #24]
 8008fe0:	69fa      	ldr	r2, [r7, #28]
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	617b      	str	r3, [r7, #20]
   return(result);
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e5      	bne.n	8008fba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fee:	e002      	b.n	8008ff6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008ff0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008ff2:	f7fa f9d3 	bl	800339c <HAL_UART_TxCpltCallback>
}
 8008ff6:	bf00      	nop
 8008ff8:	3740      	adds	r7, #64	; 0x40
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f7ff ff89 	bl	8008f24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009012:	bf00      	nop
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009036:	2b80      	cmp	r3, #128	; 0x80
 8009038:	bf0c      	ite	eq
 800903a:	2301      	moveq	r3, #1
 800903c:	2300      	movne	r3, #0
 800903e:	b2db      	uxtb	r3, r3
 8009040:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b21      	cmp	r3, #33	; 0x21
 800904c:	d108      	bne.n	8009060 <UART_DMAError+0x46>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2200      	movs	r2, #0
 8009058:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800905a:	68b8      	ldr	r0, [r7, #8]
 800905c:	f000 f865 	bl	800912a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906a:	2b40      	cmp	r3, #64	; 0x40
 800906c:	bf0c      	ite	eq
 800906e:	2301      	moveq	r3, #1
 8009070:	2300      	movne	r3, #0
 8009072:	b2db      	uxtb	r3, r3
 8009074:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b22      	cmp	r3, #34	; 0x22
 8009080:	d108      	bne.n	8009094 <UART_DMAError+0x7a>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2200      	movs	r2, #0
 800908c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800908e:	68b8      	ldr	r0, [r7, #8]
 8009090:	f000 f873 	bl	800917a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009098:	f043 0210 	orr.w	r2, r3, #16
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090a0:	68b8      	ldr	r0, [r7, #8]
 80090a2:	f7ff ff49 	bl	8008f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090a6:	bf00      	nop
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b085      	sub	sp, #20
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	60f8      	str	r0, [r7, #12]
 80090b6:	60b9      	str	r1, [r7, #8]
 80090b8:	4613      	mov	r3, r2
 80090ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	88fa      	ldrh	r2, [r7, #6]
 80090c6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	88fa      	ldrh	r2, [r7, #6]
 80090cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2222      	movs	r2, #34	; 0x22
 80090d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d007      	beq.n	80090fc <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	695a      	ldr	r2, [r3, #20]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f042 0201 	orr.w	r2, r2, #1
 800910a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f042 0220 	orr.w	r2, r2, #32
 800911a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800912a:	b480      	push	{r7}
 800912c:	b089      	sub	sp, #36	; 0x24
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	330c      	adds	r3, #12
 8009138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	60bb      	str	r3, [r7, #8]
   return(result);
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009148:	61fb      	str	r3, [r7, #28]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	330c      	adds	r3, #12
 8009150:	69fa      	ldr	r2, [r7, #28]
 8009152:	61ba      	str	r2, [r7, #24]
 8009154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6979      	ldr	r1, [r7, #20]
 8009158:	69ba      	ldr	r2, [r7, #24]
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	613b      	str	r3, [r7, #16]
   return(result);
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e5      	bne.n	8009132 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2220      	movs	r2, #32
 800916a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800916e:	bf00      	nop
 8009170:	3724      	adds	r7, #36	; 0x24
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800917a:	b480      	push	{r7}
 800917c:	b095      	sub	sp, #84	; 0x54
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	330c      	adds	r3, #12
 8009188:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009198:	64fb      	str	r3, [r7, #76]	; 0x4c
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	330c      	adds	r3, #12
 80091a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091a2:	643a      	str	r2, [r7, #64]	; 0x40
 80091a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e5      	bne.n	8009182 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3314      	adds	r3, #20
 80091bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	6a3b      	ldr	r3, [r7, #32]
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	f023 0301 	bic.w	r3, r3, #1
 80091cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3314      	adds	r3, #20
 80091d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e5      	bne.n	80091b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d119      	bne.n	8009226 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	330c      	adds	r3, #12
 80091f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	60bb      	str	r3, [r7, #8]
   return(result);
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f023 0310 	bic.w	r3, r3, #16
 8009208:	647b      	str	r3, [r7, #68]	; 0x44
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	330c      	adds	r3, #12
 8009210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009212:	61ba      	str	r2, [r7, #24]
 8009214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	6979      	ldr	r1, [r7, #20]
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	613b      	str	r3, [r7, #16]
   return(result);
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e5      	bne.n	80091f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2220      	movs	r2, #32
 800922a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009234:	bf00      	nop
 8009236:	3754      	adds	r7, #84	; 0x54
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f7ff fe6c 	bl	8008f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009260:	bf00      	nop
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b21      	cmp	r3, #33	; 0x21
 800927a:	d13e      	bne.n	80092fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009284:	d114      	bne.n	80092b0 <UART_Transmit_IT+0x48>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d110      	bne.n	80092b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	881b      	ldrh	r3, [r3, #0]
 8009298:	461a      	mov	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	1c9a      	adds	r2, r3, #2
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	621a      	str	r2, [r3, #32]
 80092ae:	e008      	b.n	80092c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a1b      	ldr	r3, [r3, #32]
 80092b4:	1c59      	adds	r1, r3, #1
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6211      	str	r1, [r2, #32]
 80092ba:	781a      	ldrb	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	4619      	mov	r1, r3
 80092d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10f      	bne.n	80092f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e000      	b.n	80092fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092fa:	2302      	movs	r3, #2
  }
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68da      	ldr	r2, [r3, #12]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800931e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2220      	movs	r2, #32
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7fa f837 	bl	800339c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08c      	sub	sp, #48	; 0x30
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b22      	cmp	r3, #34	; 0x22
 800934a:	f040 80ab 	bne.w	80094a4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009356:	d117      	bne.n	8009388 <UART_Receive_IT+0x50>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d113      	bne.n	8009388 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009360:	2300      	movs	r3, #0
 8009362:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009368:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	b29b      	uxth	r3, r3
 8009372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009376:	b29a      	uxth	r2, r3
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009380:	1c9a      	adds	r2, r3, #2
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	629a      	str	r2, [r3, #40]	; 0x28
 8009386:	e026      	b.n	80093d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800938e:	2300      	movs	r3, #0
 8009390:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800939a:	d007      	beq.n	80093ac <UART_Receive_IT+0x74>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <UART_Receive_IT+0x82>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d106      	bne.n	80093ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b6:	701a      	strb	r2, [r3, #0]
 80093b8:	e008      	b.n	80093cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d0:	1c5a      	adds	r2, r3, #1
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093da:	b29b      	uxth	r3, r3
 80093dc:	3b01      	subs	r3, #1
 80093de:	b29b      	uxth	r3, r3
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	4619      	mov	r1, r3
 80093e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d15a      	bne.n	80094a0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68da      	ldr	r2, [r3, #12]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 0220 	bic.w	r2, r2, #32
 80093f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68da      	ldr	r2, [r3, #12]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	695a      	ldr	r2, [r3, #20]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 0201 	bic.w	r2, r2, #1
 8009418:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2220      	movs	r2, #32
 800941e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009426:	2b01      	cmp	r3, #1
 8009428:	d135      	bne.n	8009496 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	330c      	adds	r3, #12
 8009436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	613b      	str	r3, [r7, #16]
   return(result);
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	f023 0310 	bic.w	r3, r3, #16
 8009446:	627b      	str	r3, [r7, #36]	; 0x24
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	330c      	adds	r3, #12
 800944e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009450:	623a      	str	r2, [r7, #32]
 8009452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	69f9      	ldr	r1, [r7, #28]
 8009456:	6a3a      	ldr	r2, [r7, #32]
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	61bb      	str	r3, [r7, #24]
   return(result);
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e5      	bne.n	8009430 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0310 	and.w	r3, r3, #16
 800946e:	2b10      	cmp	r3, #16
 8009470:	d10a      	bne.n	8009488 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009472:	2300      	movs	r3, #0
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7ff fd5c 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
 8009494:	e002      	b.n	800949c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7f9 fcec 	bl	8002e74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	e002      	b.n	80094a6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	e000      	b.n	80094a6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80094a4:	2302      	movs	r3, #2
  }
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3730      	adds	r7, #48	; 0x30
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
	...

080094b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094b4:	b0c0      	sub	sp, #256	; 0x100
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80094c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094cc:	68d9      	ldr	r1, [r3, #12]
 80094ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	ea40 0301 	orr.w	r3, r0, r1
 80094d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80094da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	431a      	orrs	r2, r3
 80094e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	431a      	orrs	r2, r3
 80094f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80094fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009508:	f021 010c 	bic.w	r1, r1, #12
 800950c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009516:	430b      	orrs	r3, r1
 8009518:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800951a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800952a:	6999      	ldr	r1, [r3, #24]
 800952c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	ea40 0301 	orr.w	r3, r0, r1
 8009536:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	4b8f      	ldr	r3, [pc, #572]	; (800977c <UART_SetConfig+0x2cc>)
 8009540:	429a      	cmp	r2, r3
 8009542:	d005      	beq.n	8009550 <UART_SetConfig+0xa0>
 8009544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	4b8d      	ldr	r3, [pc, #564]	; (8009780 <UART_SetConfig+0x2d0>)
 800954c:	429a      	cmp	r2, r3
 800954e:	d104      	bne.n	800955a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009550:	f7fd fbc6 	bl	8006ce0 <HAL_RCC_GetPCLK2Freq>
 8009554:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009558:	e003      	b.n	8009562 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800955a:	f7fd fbad 	bl	8006cb8 <HAL_RCC_GetPCLK1Freq>
 800955e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009566:	69db      	ldr	r3, [r3, #28]
 8009568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800956c:	f040 810c 	bne.w	8009788 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009574:	2200      	movs	r2, #0
 8009576:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800957a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800957e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009582:	4622      	mov	r2, r4
 8009584:	462b      	mov	r3, r5
 8009586:	1891      	adds	r1, r2, r2
 8009588:	65b9      	str	r1, [r7, #88]	; 0x58
 800958a:	415b      	adcs	r3, r3
 800958c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800958e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009592:	4621      	mov	r1, r4
 8009594:	eb12 0801 	adds.w	r8, r2, r1
 8009598:	4629      	mov	r1, r5
 800959a:	eb43 0901 	adc.w	r9, r3, r1
 800959e:	f04f 0200 	mov.w	r2, #0
 80095a2:	f04f 0300 	mov.w	r3, #0
 80095a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095b2:	4690      	mov	r8, r2
 80095b4:	4699      	mov	r9, r3
 80095b6:	4623      	mov	r3, r4
 80095b8:	eb18 0303 	adds.w	r3, r8, r3
 80095bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80095c0:	462b      	mov	r3, r5
 80095c2:	eb49 0303 	adc.w	r3, r9, r3
 80095c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80095ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80095d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80095da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80095de:	460b      	mov	r3, r1
 80095e0:	18db      	adds	r3, r3, r3
 80095e2:	653b      	str	r3, [r7, #80]	; 0x50
 80095e4:	4613      	mov	r3, r2
 80095e6:	eb42 0303 	adc.w	r3, r2, r3
 80095ea:	657b      	str	r3, [r7, #84]	; 0x54
 80095ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80095f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80095f4:	f7f7 f99a 	bl	800092c <__aeabi_uldivmod>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4b61      	ldr	r3, [pc, #388]	; (8009784 <UART_SetConfig+0x2d4>)
 80095fe:	fba3 2302 	umull	r2, r3, r3, r2
 8009602:	095b      	lsrs	r3, r3, #5
 8009604:	011c      	lsls	r4, r3, #4
 8009606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800960a:	2200      	movs	r2, #0
 800960c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009610:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009614:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009618:	4642      	mov	r2, r8
 800961a:	464b      	mov	r3, r9
 800961c:	1891      	adds	r1, r2, r2
 800961e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009620:	415b      	adcs	r3, r3
 8009622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009624:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009628:	4641      	mov	r1, r8
 800962a:	eb12 0a01 	adds.w	sl, r2, r1
 800962e:	4649      	mov	r1, r9
 8009630:	eb43 0b01 	adc.w	fp, r3, r1
 8009634:	f04f 0200 	mov.w	r2, #0
 8009638:	f04f 0300 	mov.w	r3, #0
 800963c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009640:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009644:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009648:	4692      	mov	sl, r2
 800964a:	469b      	mov	fp, r3
 800964c:	4643      	mov	r3, r8
 800964e:	eb1a 0303 	adds.w	r3, sl, r3
 8009652:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009656:	464b      	mov	r3, r9
 8009658:	eb4b 0303 	adc.w	r3, fp, r3
 800965c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800966c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009670:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009674:	460b      	mov	r3, r1
 8009676:	18db      	adds	r3, r3, r3
 8009678:	643b      	str	r3, [r7, #64]	; 0x40
 800967a:	4613      	mov	r3, r2
 800967c:	eb42 0303 	adc.w	r3, r2, r3
 8009680:	647b      	str	r3, [r7, #68]	; 0x44
 8009682:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009686:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800968a:	f7f7 f94f 	bl	800092c <__aeabi_uldivmod>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4611      	mov	r1, r2
 8009694:	4b3b      	ldr	r3, [pc, #236]	; (8009784 <UART_SetConfig+0x2d4>)
 8009696:	fba3 2301 	umull	r2, r3, r3, r1
 800969a:	095b      	lsrs	r3, r3, #5
 800969c:	2264      	movs	r2, #100	; 0x64
 800969e:	fb02 f303 	mul.w	r3, r2, r3
 80096a2:	1acb      	subs	r3, r1, r3
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80096aa:	4b36      	ldr	r3, [pc, #216]	; (8009784 <UART_SetConfig+0x2d4>)
 80096ac:	fba3 2302 	umull	r2, r3, r3, r2
 80096b0:	095b      	lsrs	r3, r3, #5
 80096b2:	005b      	lsls	r3, r3, #1
 80096b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80096b8:	441c      	add	r4, r3
 80096ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80096c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80096cc:	4642      	mov	r2, r8
 80096ce:	464b      	mov	r3, r9
 80096d0:	1891      	adds	r1, r2, r2
 80096d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80096d4:	415b      	adcs	r3, r3
 80096d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096dc:	4641      	mov	r1, r8
 80096de:	1851      	adds	r1, r2, r1
 80096e0:	6339      	str	r1, [r7, #48]	; 0x30
 80096e2:	4649      	mov	r1, r9
 80096e4:	414b      	adcs	r3, r1
 80096e6:	637b      	str	r3, [r7, #52]	; 0x34
 80096e8:	f04f 0200 	mov.w	r2, #0
 80096ec:	f04f 0300 	mov.w	r3, #0
 80096f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80096f4:	4659      	mov	r1, fp
 80096f6:	00cb      	lsls	r3, r1, #3
 80096f8:	4651      	mov	r1, sl
 80096fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096fe:	4651      	mov	r1, sl
 8009700:	00ca      	lsls	r2, r1, #3
 8009702:	4610      	mov	r0, r2
 8009704:	4619      	mov	r1, r3
 8009706:	4603      	mov	r3, r0
 8009708:	4642      	mov	r2, r8
 800970a:	189b      	adds	r3, r3, r2
 800970c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009710:	464b      	mov	r3, r9
 8009712:	460a      	mov	r2, r1
 8009714:	eb42 0303 	adc.w	r3, r2, r3
 8009718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800971c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009728:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800972c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009730:	460b      	mov	r3, r1
 8009732:	18db      	adds	r3, r3, r3
 8009734:	62bb      	str	r3, [r7, #40]	; 0x28
 8009736:	4613      	mov	r3, r2
 8009738:	eb42 0303 	adc.w	r3, r2, r3
 800973c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800973e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009742:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009746:	f7f7 f8f1 	bl	800092c <__aeabi_uldivmod>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4b0d      	ldr	r3, [pc, #52]	; (8009784 <UART_SetConfig+0x2d4>)
 8009750:	fba3 1302 	umull	r1, r3, r3, r2
 8009754:	095b      	lsrs	r3, r3, #5
 8009756:	2164      	movs	r1, #100	; 0x64
 8009758:	fb01 f303 	mul.w	r3, r1, r3
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	3332      	adds	r3, #50	; 0x32
 8009762:	4a08      	ldr	r2, [pc, #32]	; (8009784 <UART_SetConfig+0x2d4>)
 8009764:	fba2 2303 	umull	r2, r3, r2, r3
 8009768:	095b      	lsrs	r3, r3, #5
 800976a:	f003 0207 	and.w	r2, r3, #7
 800976e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4422      	add	r2, r4
 8009776:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009778:	e105      	b.n	8009986 <UART_SetConfig+0x4d6>
 800977a:	bf00      	nop
 800977c:	40011000 	.word	0x40011000
 8009780:	40011400 	.word	0x40011400
 8009784:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800978c:	2200      	movs	r2, #0
 800978e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009792:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009796:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800979a:	4642      	mov	r2, r8
 800979c:	464b      	mov	r3, r9
 800979e:	1891      	adds	r1, r2, r2
 80097a0:	6239      	str	r1, [r7, #32]
 80097a2:	415b      	adcs	r3, r3
 80097a4:	627b      	str	r3, [r7, #36]	; 0x24
 80097a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097aa:	4641      	mov	r1, r8
 80097ac:	1854      	adds	r4, r2, r1
 80097ae:	4649      	mov	r1, r9
 80097b0:	eb43 0501 	adc.w	r5, r3, r1
 80097b4:	f04f 0200 	mov.w	r2, #0
 80097b8:	f04f 0300 	mov.w	r3, #0
 80097bc:	00eb      	lsls	r3, r5, #3
 80097be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097c2:	00e2      	lsls	r2, r4, #3
 80097c4:	4614      	mov	r4, r2
 80097c6:	461d      	mov	r5, r3
 80097c8:	4643      	mov	r3, r8
 80097ca:	18e3      	adds	r3, r4, r3
 80097cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80097d0:	464b      	mov	r3, r9
 80097d2:	eb45 0303 	adc.w	r3, r5, r3
 80097d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097ea:	f04f 0200 	mov.w	r2, #0
 80097ee:	f04f 0300 	mov.w	r3, #0
 80097f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80097f6:	4629      	mov	r1, r5
 80097f8:	008b      	lsls	r3, r1, #2
 80097fa:	4621      	mov	r1, r4
 80097fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009800:	4621      	mov	r1, r4
 8009802:	008a      	lsls	r2, r1, #2
 8009804:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009808:	f7f7 f890 	bl	800092c <__aeabi_uldivmod>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4b60      	ldr	r3, [pc, #384]	; (8009994 <UART_SetConfig+0x4e4>)
 8009812:	fba3 2302 	umull	r2, r3, r3, r2
 8009816:	095b      	lsrs	r3, r3, #5
 8009818:	011c      	lsls	r4, r3, #4
 800981a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800981e:	2200      	movs	r2, #0
 8009820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009824:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009828:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800982c:	4642      	mov	r2, r8
 800982e:	464b      	mov	r3, r9
 8009830:	1891      	adds	r1, r2, r2
 8009832:	61b9      	str	r1, [r7, #24]
 8009834:	415b      	adcs	r3, r3
 8009836:	61fb      	str	r3, [r7, #28]
 8009838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800983c:	4641      	mov	r1, r8
 800983e:	1851      	adds	r1, r2, r1
 8009840:	6139      	str	r1, [r7, #16]
 8009842:	4649      	mov	r1, r9
 8009844:	414b      	adcs	r3, r1
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	f04f 0200 	mov.w	r2, #0
 800984c:	f04f 0300 	mov.w	r3, #0
 8009850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009854:	4659      	mov	r1, fp
 8009856:	00cb      	lsls	r3, r1, #3
 8009858:	4651      	mov	r1, sl
 800985a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800985e:	4651      	mov	r1, sl
 8009860:	00ca      	lsls	r2, r1, #3
 8009862:	4610      	mov	r0, r2
 8009864:	4619      	mov	r1, r3
 8009866:	4603      	mov	r3, r0
 8009868:	4642      	mov	r2, r8
 800986a:	189b      	adds	r3, r3, r2
 800986c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009870:	464b      	mov	r3, r9
 8009872:	460a      	mov	r2, r1
 8009874:	eb42 0303 	adc.w	r3, r2, r3
 8009878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800987c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	67bb      	str	r3, [r7, #120]	; 0x78
 8009886:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009888:	f04f 0200 	mov.w	r2, #0
 800988c:	f04f 0300 	mov.w	r3, #0
 8009890:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009894:	4649      	mov	r1, r9
 8009896:	008b      	lsls	r3, r1, #2
 8009898:	4641      	mov	r1, r8
 800989a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800989e:	4641      	mov	r1, r8
 80098a0:	008a      	lsls	r2, r1, #2
 80098a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80098a6:	f7f7 f841 	bl	800092c <__aeabi_uldivmod>
 80098aa:	4602      	mov	r2, r0
 80098ac:	460b      	mov	r3, r1
 80098ae:	4b39      	ldr	r3, [pc, #228]	; (8009994 <UART_SetConfig+0x4e4>)
 80098b0:	fba3 1302 	umull	r1, r3, r3, r2
 80098b4:	095b      	lsrs	r3, r3, #5
 80098b6:	2164      	movs	r1, #100	; 0x64
 80098b8:	fb01 f303 	mul.w	r3, r1, r3
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	011b      	lsls	r3, r3, #4
 80098c0:	3332      	adds	r3, #50	; 0x32
 80098c2:	4a34      	ldr	r2, [pc, #208]	; (8009994 <UART_SetConfig+0x4e4>)
 80098c4:	fba2 2303 	umull	r2, r3, r2, r3
 80098c8:	095b      	lsrs	r3, r3, #5
 80098ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098ce:	441c      	add	r4, r3
 80098d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098d4:	2200      	movs	r2, #0
 80098d6:	673b      	str	r3, [r7, #112]	; 0x70
 80098d8:	677a      	str	r2, [r7, #116]	; 0x74
 80098da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80098de:	4642      	mov	r2, r8
 80098e0:	464b      	mov	r3, r9
 80098e2:	1891      	adds	r1, r2, r2
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	415b      	adcs	r3, r3
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098ee:	4641      	mov	r1, r8
 80098f0:	1851      	adds	r1, r2, r1
 80098f2:	6039      	str	r1, [r7, #0]
 80098f4:	4649      	mov	r1, r9
 80098f6:	414b      	adcs	r3, r1
 80098f8:	607b      	str	r3, [r7, #4]
 80098fa:	f04f 0200 	mov.w	r2, #0
 80098fe:	f04f 0300 	mov.w	r3, #0
 8009902:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009906:	4659      	mov	r1, fp
 8009908:	00cb      	lsls	r3, r1, #3
 800990a:	4651      	mov	r1, sl
 800990c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009910:	4651      	mov	r1, sl
 8009912:	00ca      	lsls	r2, r1, #3
 8009914:	4610      	mov	r0, r2
 8009916:	4619      	mov	r1, r3
 8009918:	4603      	mov	r3, r0
 800991a:	4642      	mov	r2, r8
 800991c:	189b      	adds	r3, r3, r2
 800991e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009920:	464b      	mov	r3, r9
 8009922:	460a      	mov	r2, r1
 8009924:	eb42 0303 	adc.w	r3, r2, r3
 8009928:	66fb      	str	r3, [r7, #108]	; 0x6c
 800992a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	663b      	str	r3, [r7, #96]	; 0x60
 8009934:	667a      	str	r2, [r7, #100]	; 0x64
 8009936:	f04f 0200 	mov.w	r2, #0
 800993a:	f04f 0300 	mov.w	r3, #0
 800993e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009942:	4649      	mov	r1, r9
 8009944:	008b      	lsls	r3, r1, #2
 8009946:	4641      	mov	r1, r8
 8009948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800994c:	4641      	mov	r1, r8
 800994e:	008a      	lsls	r2, r1, #2
 8009950:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009954:	f7f6 ffea 	bl	800092c <__aeabi_uldivmod>
 8009958:	4602      	mov	r2, r0
 800995a:	460b      	mov	r3, r1
 800995c:	4b0d      	ldr	r3, [pc, #52]	; (8009994 <UART_SetConfig+0x4e4>)
 800995e:	fba3 1302 	umull	r1, r3, r3, r2
 8009962:	095b      	lsrs	r3, r3, #5
 8009964:	2164      	movs	r1, #100	; 0x64
 8009966:	fb01 f303 	mul.w	r3, r1, r3
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	011b      	lsls	r3, r3, #4
 800996e:	3332      	adds	r3, #50	; 0x32
 8009970:	4a08      	ldr	r2, [pc, #32]	; (8009994 <UART_SetConfig+0x4e4>)
 8009972:	fba2 2303 	umull	r2, r3, r2, r3
 8009976:	095b      	lsrs	r3, r3, #5
 8009978:	f003 020f 	and.w	r2, r3, #15
 800997c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4422      	add	r2, r4
 8009984:	609a      	str	r2, [r3, #8]
}
 8009986:	bf00      	nop
 8009988:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800998c:	46bd      	mov	sp, r7
 800998e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009992:	bf00      	nop
 8009994:	51eb851f 	.word	0x51eb851f

08009998 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b10      	cmp	r3, #16
 80099a8:	d11c      	bne.n	80099e4 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	4b1f      	ldr	r3, [pc, #124]	; (8009a2c <FSMC_NAND_Init+0x94>)
 80099b0:	4013      	ands	r3, r2
 80099b2:	683a      	ldr	r2, [r7, #0]
 80099b4:	6851      	ldr	r1, [r2, #4]
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	6892      	ldr	r2, [r2, #8]
 80099ba:	4311      	orrs	r1, r2
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	68d2      	ldr	r2, [r2, #12]
 80099c0:	4311      	orrs	r1, r2
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	6912      	ldr	r2, [r2, #16]
 80099c6:	4311      	orrs	r1, r2
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	6952      	ldr	r2, [r2, #20]
 80099cc:	0252      	lsls	r2, r2, #9
 80099ce:	4311      	orrs	r1, r2
 80099d0:	683a      	ldr	r2, [r7, #0]
 80099d2:	6992      	ldr	r2, [r2, #24]
 80099d4:	0352      	lsls	r2, r2, #13
 80099d6:	430a      	orrs	r2, r1
 80099d8:	4313      	orrs	r3, r2
 80099da:	f043 0208 	orr.w	r2, r3, #8
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	e01b      	b.n	8009a1c <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a1a      	ldr	r2, [r3, #32]
 80099e8:	4b10      	ldr	r3, [pc, #64]	; (8009a2c <FSMC_NAND_Init+0x94>)
 80099ea:	4013      	ands	r3, r2
 80099ec:	683a      	ldr	r2, [r7, #0]
 80099ee:	6851      	ldr	r1, [r2, #4]
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	6892      	ldr	r2, [r2, #8]
 80099f4:	4311      	orrs	r1, r2
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	68d2      	ldr	r2, [r2, #12]
 80099fa:	4311      	orrs	r1, r2
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	6912      	ldr	r2, [r2, #16]
 8009a00:	4311      	orrs	r1, r2
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	6952      	ldr	r2, [r2, #20]
 8009a06:	0252      	lsls	r2, r2, #9
 8009a08:	4311      	orrs	r1, r2
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	6992      	ldr	r2, [r2, #24]
 8009a0e:	0352      	lsls	r2, r2, #13
 8009a10:	430a      	orrs	r2, r1
 8009a12:	4313      	orrs	r3, r2
 8009a14:	f043 0208 	orr.w	r2, r3, #8
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	370c      	adds	r7, #12
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	fff00181 	.word	0xfff00181

08009a30 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b10      	cmp	r3, #16
 8009a40:	d112      	bne.n	8009a68 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	021b      	lsls	r3, r3, #8
 8009a50:	431a      	orrs	r2, r3
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	041b      	lsls	r3, r3, #16
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	061b      	lsls	r3, r3, #24
 8009a60:	431a      	orrs	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	609a      	str	r2, [r3, #8]
 8009a66:	e011      	b.n	8009a8c <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	021b      	lsls	r3, r3, #8
 8009a76:	431a      	orrs	r2, r3
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	041b      	lsls	r3, r3, #16
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	061b      	lsls	r3, r3, #24
 8009a86:	431a      	orrs	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b085      	sub	sp, #20
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	60f8      	str	r0, [r7, #12]
 8009aa2:	60b9      	str	r1, [r7, #8]
 8009aa4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b10      	cmp	r3, #16
 8009aaa:	d112      	bne.n	8009ad2 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	021b      	lsls	r3, r3, #8
 8009aba:	431a      	orrs	r2, r3
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	041b      	lsls	r3, r3, #16
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	061b      	lsls	r3, r3, #24
 8009aca:	431a      	orrs	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	60da      	str	r2, [r3, #12]
 8009ad0:	e011      	b.n	8009af6 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	021b      	lsls	r3, r3, #8
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	041b      	lsls	r3, r3, #16
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	061b      	lsls	r3, r3, #24
 8009af0:	431a      	orrs	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NAND_DEVICE(Device));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Disable ECC feature */
  if (Bank == FSMC_NAND_BANK2)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b10      	cmp	r3, #16
 8009b12:	d106      	bne.n	8009b22 <FSMC_NAND_ECC_Disable+0x1e>
  {
    CLEAR_BIT(Device->PCR2, FSMC_PCR2_ECCEN);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	e005      	b.n	8009b2e <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    CLEAR_BIT(Device->PCR3, FSMC_PCR2_ECCEN);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	621a      	str	r2, [r3, #32]
  }

  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009b40:	4904      	ldr	r1, [pc, #16]	; (8009b54 <MX_FATFS_Init+0x18>)
 8009b42:	4805      	ldr	r0, [pc, #20]	; (8009b58 <MX_FATFS_Init+0x1c>)
 8009b44:	f003 fba8 	bl	800d298 <FATFS_LinkDriver>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	4b03      	ldr	r3, [pc, #12]	; (8009b5c <MX_FATFS_Init+0x20>)
 8009b4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009b50:	bf00      	nop
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	20003db0 	.word	0x20003db0
 8009b58:	200000b0 	.word	0x200000b0
 8009b5c:	20003dac 	.word	0x20003dac

08009b60 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009b60:	b480      	push	{r7}
 8009b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009b64:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8009b7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <USER_initialize+0x34>)
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	701a      	strb	r2, [r3, #0]
    Stat &= ~STA_NOINIT;
 8009b80:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <USER_initialize+0x34>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	f023 0301 	bic.w	r3, r3, #1
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <USER_initialize+0x34>)
 8009b8e:	701a      	strb	r2, [r3, #0]

    return Stat;
 8009b90:	4b04      	ldr	r3, [pc, #16]	; (8009ba4 <USER_initialize+0x34>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	200000ad 	.word	0x200000ad

08009ba8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af02      	add	r7, sp, #8
 8009bae:	4603      	mov	r3, r0
 8009bb0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //Stat &= ~STA_NOINIT;
    Stat = io_nand_get_status();
 8009bb2:	f7f7 feef 	bl	8001994 <io_nand_get_status>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	461a      	mov	r2, r3
 8009bba:	4b0b      	ldr	r3, [pc, #44]	; (8009be8 <USER_status+0x40>)
 8009bbc:	701a      	strb	r2, [r3, #0]
    if (dbg > logOff) Report(1, "[%s] Dev:%u status:%u\r\n", __func__, pdrv, Stat);
 8009bbe:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <USER_status+0x44>)
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d009      	beq.n	8009bda <USER_status+0x32>
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	4a07      	ldr	r2, [pc, #28]	; (8009be8 <USER_status+0x40>)
 8009bca:	7812      	ldrb	r2, [r2, #0]
 8009bcc:	b2d2      	uxtb	r2, r2
 8009bce:	9200      	str	r2, [sp, #0]
 8009bd0:	4a07      	ldr	r2, [pc, #28]	; (8009bf0 <USER_status+0x48>)
 8009bd2:	4908      	ldr	r1, [pc, #32]	; (8009bf4 <USER_status+0x4c>)
 8009bd4:	2001      	movs	r0, #1
 8009bd6:	f7f9 f8e9 	bl	8002dac <Report>

    return Stat;
 8009bda:	4b03      	ldr	r3, [pc, #12]	; (8009be8 <USER_status+0x40>)
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	200000ad 	.word	0x200000ad
 8009bec:	20000068 	.word	0x20000068
 8009bf0:	08014994 	.word	0x08014994
 8009bf4:	08012718 	.word	0x08012718

08009bf8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08c      	sub	sp, #48	; 0x30
 8009bfc:	af04      	add	r7, sp, #16
 8009bfe:	60b9      	str	r1, [r7, #8]
 8009c00:	607a      	str	r2, [r7, #4]
 8009c02:	603b      	str	r3, [r7, #0]
 8009c04:	4603      	mov	r3, r0
 8009c06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */

	/**/
	DRESULT ret = RES_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	76fb      	strb	r3, [r7, #27]
	uint32_t ss = io_nand_get_page_size();
 8009c0c:	f7f7 f89e 	bl	8000d4c <io_nand_get_page_size>
 8009c10:	6178      	str	r0, [r7, #20]
	int i = -1;
 8009c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c16:	61fb      	str	r3, [r7, #28]
	while (++i < count) {
 8009c18:	e018      	b.n	8009c4c <USER_read+0x54>
		if (dbg > logOff) Report(1, "[%s] Dev:%u page:%u(%u) count:%u\r\n", __func__, pdrv, sector, ss, count);
 8009c1a:	4b12      	ldr	r3, [pc, #72]	; (8009c64 <USER_read+0x6c>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00c      	beq.n	8009c3c <USER_read+0x44>
 8009c22:	7bfa      	ldrb	r2, [r7, #15]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	9302      	str	r3, [sp, #8]
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	9301      	str	r3, [sp, #4]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	4613      	mov	r3, r2
 8009c32:	4a0d      	ldr	r2, [pc, #52]	; (8009c68 <USER_read+0x70>)
 8009c34:	490d      	ldr	r1, [pc, #52]	; (8009c6c <USER_read+0x74>)
 8009c36:	2001      	movs	r0, #1
 8009c38:	f7f9 f8b8 	bl	8002dac <Report>
		//ret |= nand_ReadPage(sector++, (BYTE *)buff);
		io_nand_read(sector++, (BYTE *)buff, ss, 0);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	607b      	str	r3, [r7, #4]
 8009c42:	2300      	movs	r3, #0
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	68b9      	ldr	r1, [r7, #8]
 8009c48:	f7f7 fe48 	bl	80018dc <io_nand_read>
	while (++i < count) {
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	61fb      	str	r3, [r7, #28]
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d8df      	bhi.n	8009c1a <USER_read+0x22>
	}
	/**/

    return ret;
 8009c5a:	7efb      	ldrb	r3, [r7, #27]
  /* USER CODE END READ */
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3720      	adds	r7, #32
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	20000068 	.word	0x20000068
 8009c68:	080149a0 	.word	0x080149a0
 8009c6c:	08012730 	.word	0x08012730

08009c70 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08c      	sub	sp, #48	; 0x30
 8009c74:	af04      	add	r7, sp, #16
 8009c76:	60b9      	str	r1, [r7, #8]
 8009c78:	607a      	str	r2, [r7, #4]
 8009c7a:	603b      	str	r3, [r7, #0]
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

	/**/
	DRESULT ret = RES_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	76fb      	strb	r3, [r7, #27]
	uint32_t ss = io_nand_get_page_size();
 8009c84:	f7f7 f862 	bl	8000d4c <io_nand_get_page_size>
 8009c88:	6178      	str	r0, [r7, #20]
	int i = -1;
 8009c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c8e:	61fb      	str	r3, [r7, #28]
	while (++i < count) {
 8009c90:	e018      	b.n	8009cc4 <USER_write+0x54>
		if (dbg > logOff) Report(1, "[%s] Dev:%u sector:%u(%u) count:%u\r\n", __func__, pdrv, sector, ss, count);
 8009c92:	4b12      	ldr	r3, [pc, #72]	; (8009cdc <USER_write+0x6c>)
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00c      	beq.n	8009cb4 <USER_write+0x44>
 8009c9a:	7bfa      	ldrb	r2, [r7, #15]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	9302      	str	r3, [sp, #8]
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	9301      	str	r3, [sp, #4]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	4a0d      	ldr	r2, [pc, #52]	; (8009ce0 <USER_write+0x70>)
 8009cac:	490d      	ldr	r1, [pc, #52]	; (8009ce4 <USER_write+0x74>)
 8009cae:	2001      	movs	r0, #1
 8009cb0:	f7f9 f87c 	bl	8002dac <Report>
		//if (!pageIsEmpty(sector)) nand_EraseBlock(nand_PageToBlock(sector));
		//ret |= nand_WritePage(sector++, (BYTE *)buff);
		io_nand_write(sector++, (BYTE *)buff, ss, 0);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	1c43      	adds	r3, r0, #1
 8009cb8:	607b      	str	r3, [r7, #4]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	68b9      	ldr	r1, [r7, #8]
 8009cc0:	f7f7 fe2a 	bl	8001918 <io_nand_write>
	while (++i < count) {
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	61fb      	str	r3, [r7, #28]
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d8df      	bhi.n	8009c92 <USER_write+0x22>
	}
	/**/

    return ret;
 8009cd2:	7efb      	ldrb	r3, [r7, #27]
  /* USER CODE END WRITE */
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3720      	adds	r7, #32
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	20000068 	.word	0x20000068
 8009ce0:	080149ac 	.word	0x080149ac
 8009ce4:	08012754 	.word	0x08012754

08009ce8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009ce8:	b590      	push	{r4, r7, lr}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	603a      	str	r2, [r7, #0]
 8009cf2:	71fb      	strb	r3, [r7, #7]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	73fb      	strb	r3, [r7, #15]
        /**/
        switch (cmd) {
 8009cfc:	79bb      	ldrb	r3, [r7, #6]
 8009cfe:	2b03      	cmp	r3, #3
 8009d00:	d82f      	bhi.n	8009d62 <USER_ioctl+0x7a>
 8009d02:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <USER_ioctl+0x20>)
 8009d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d08:	08009d19 	.word	0x08009d19
 8009d0c:	08009d1f 	.word	0x08009d1f
 8009d10:	08009d39 	.word	0x08009d39
 8009d14:	08009d49 	.word	0x08009d49
        	case CTRL_SYNC:
        		res = RES_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	73fb      	strb	r3, [r7, #15]
        	break;
 8009d1c:	e023      	b.n	8009d66 <USER_ioctl+0x7e>
        	case GET_SECTOR_COUNT:
        		*(DWORD *)buff = io_nand_get_block_size() * io_nand_get_block_number();//nand_getPageCount();//W25qxx_getSectorCount();
 8009d1e:	f7f7 f82d 	bl	8000d7c <io_nand_get_block_size>
 8009d22:	4604      	mov	r4, r0
 8009d24:	f7f7 f81e 	bl	8000d64 <io_nand_get_block_number>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	fb03 f204 	mul.w	r2, r3, r4
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	601a      	str	r2, [r3, #0]
        		res = RES_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73fb      	strb	r3, [r7, #15]
        	break;
 8009d36:	e016      	b.n	8009d66 <USER_ioctl+0x7e>
        	case GET_SECTOR_SIZE:
        		*(DWORD *)buff = io_nand_get_page_size();//nand_getPageSize();//W25qxx_getSectorSize();
 8009d38:	f7f7 f808 	bl	8000d4c <io_nand_get_page_size>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	601a      	str	r2, [r3, #0]
        		res = RES_OK;
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]
        	break;
 8009d46:	e00e      	b.n	8009d66 <USER_ioctl+0x7e>
        	case GET_BLOCK_SIZE:
        		*(DWORD *)buff = io_nand_get_block_size() * io_nand_get_page_size();//nand_getBlockSize();//W25qxx_getBlockSize();
 8009d48:	f7f7 f818 	bl	8000d7c <io_nand_get_block_size>
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	f7f6 fffd 	bl	8000d4c <io_nand_get_page_size>
 8009d52:	4603      	mov	r3, r0
 8009d54:	fb03 f204 	mul.w	r2, r3, r4
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	601a      	str	r2, [r3, #0]
        		res = RES_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	73fb      	strb	r3, [r7, #15]
        	break;
 8009d60:	e001      	b.n	8009d66 <USER_ioctl+0x7e>
            	default :
            		res = RES_PARERR;
 8009d62:	2304      	movs	r3, #4
 8009d64:	73fb      	strb	r3, [r7, #15]
        }
        /**/


    return res;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd90      	pop	{r4, r7, pc}

08009d70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009d7a:	79fb      	ldrb	r3, [r7, #7]
 8009d7c:	4a09      	ldr	r2, [pc, #36]	; (8009da4 <disk_status+0x34>)
 8009d7e:	3302      	adds	r3, #2
 8009d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	79fa      	ldrb	r2, [r7, #7]
 8009d88:	4906      	ldr	r1, [pc, #24]	; (8009da4 <disk_status+0x34>)
 8009d8a:	440a      	add	r2, r1
 8009d8c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
 8009d94:	4603      	mov	r3, r0
 8009d96:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20003df8 	.word	0x20003df8

08009da8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	4a0d      	ldr	r2, [pc, #52]	; (8009df0 <disk_initialize+0x48>)
 8009dba:	5cd3      	ldrb	r3, [r2, r3]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d112      	bne.n	8009de6 <disk_initialize+0x3e>
  {
    disk.is_initialized[pdrv] = 1;
 8009dc0:	79fb      	ldrb	r3, [r7, #7]
 8009dc2:	4a0b      	ldr	r2, [pc, #44]	; (8009df0 <disk_initialize+0x48>)
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009dc8:	79fb      	ldrb	r3, [r7, #7]
 8009dca:	4a09      	ldr	r2, [pc, #36]	; (8009df0 <disk_initialize+0x48>)
 8009dcc:	3302      	adds	r3, #2
 8009dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	79fa      	ldrb	r2, [r7, #7]
 8009dd6:	4906      	ldr	r1, [pc, #24]	; (8009df0 <disk_initialize+0x48>)
 8009dd8:	440a      	add	r2, r1
 8009dda:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8009dde:	4610      	mov	r0, r2
 8009de0:	4798      	blx	r3
 8009de2:	4603      	mov	r3, r0
 8009de4:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	20003df8 	.word	0x20003df8

08009df4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009df4:	b590      	push	{r4, r7, lr}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60b9      	str	r1, [r7, #8]
 8009dfc:	607a      	str	r2, [r7, #4]
 8009dfe:	603b      	str	r3, [r7, #0]
 8009e00:	4603      	mov	r3, r0
 8009e02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	4a0a      	ldr	r2, [pc, #40]	; (8009e30 <disk_read+0x3c>)
 8009e08:	3302      	adds	r3, #2
 8009e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e0e:	689c      	ldr	r4, [r3, #8]
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	4a07      	ldr	r2, [pc, #28]	; (8009e30 <disk_read+0x3c>)
 8009e14:	4413      	add	r3, r2
 8009e16:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	68b9      	ldr	r1, [r7, #8]
 8009e20:	47a0      	blx	r4
 8009e22:	4603      	mov	r3, r0
 8009e24:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	371c      	adds	r7, #28
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd90      	pop	{r4, r7, pc}
 8009e30:	20003df8 	.word	0x20003df8

08009e34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009e34:	b590      	push	{r4, r7, lr}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	607a      	str	r2, [r7, #4]
 8009e3e:	603b      	str	r3, [r7, #0]
 8009e40:	4603      	mov	r3, r0
 8009e42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
 8009e46:	4a0a      	ldr	r2, [pc, #40]	; (8009e70 <disk_write+0x3c>)
 8009e48:	3302      	adds	r3, #2
 8009e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e4e:	68dc      	ldr	r4, [r3, #12]
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
 8009e52:	4a07      	ldr	r2, [pc, #28]	; (8009e70 <disk_write+0x3c>)
 8009e54:	4413      	add	r3, r2
 8009e56:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	68b9      	ldr	r1, [r7, #8]
 8009e60:	47a0      	blx	r4
 8009e62:	4603      	mov	r3, r0
 8009e64:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	371c      	adds	r7, #28
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd90      	pop	{r4, r7, pc}
 8009e70:	20003df8 	.word	0x20003df8

08009e74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	603a      	str	r2, [r7, #0]
 8009e7e:	71fb      	strb	r3, [r7, #7]
 8009e80:	460b      	mov	r3, r1
 8009e82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009e84:	79fb      	ldrb	r3, [r7, #7]
 8009e86:	4a0a      	ldr	r2, [pc, #40]	; (8009eb0 <disk_ioctl+0x3c>)
 8009e88:	3302      	adds	r3, #2
 8009e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	79fa      	ldrb	r2, [r7, #7]
 8009e92:	4907      	ldr	r1, [pc, #28]	; (8009eb0 <disk_ioctl+0x3c>)
 8009e94:	440a      	add	r2, r1
 8009e96:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8009e9a:	79b9      	ldrb	r1, [r7, #6]
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	4798      	blx	r3
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	73fb      	strb	r3, [r7, #15]
  return res;
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20003df8 	.word	0x20003df8

08009eb4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009ec4:	89fb      	ldrh	r3, [r7, #14]
 8009ec6:	021b      	lsls	r3, r3, #8
 8009ec8:	b21a      	sxth	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	b21b      	sxth	r3, r3
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	b21b      	sxth	r3, r3
 8009ed4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009ed6:	89fb      	ldrh	r3, [r7, #14]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3303      	adds	r3, #3
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	021b      	lsls	r3, r3, #8
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	3202      	adds	r2, #2
 8009efc:	7812      	ldrb	r2, [r2, #0]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	021b      	lsls	r3, r3, #8
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	3201      	adds	r2, #1
 8009f0a:	7812      	ldrb	r2, [r2, #0]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	7812      	ldrb	r2, [r2, #0]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	460b      	mov	r3, r1
 8009f34:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	607a      	str	r2, [r7, #4]
 8009f3c:	887a      	ldrh	r2, [r7, #2]
 8009f3e:	b2d2      	uxtb	r2, r2
 8009f40:	701a      	strb	r2, [r3, #0]
 8009f42:	887b      	ldrh	r3, [r7, #2]
 8009f44:	0a1b      	lsrs	r3, r3, #8
 8009f46:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	1c5a      	adds	r2, r3, #1
 8009f4c:	607a      	str	r2, [r7, #4]
 8009f4e:	887a      	ldrh	r2, [r7, #2]
 8009f50:	b2d2      	uxtb	r2, r2
 8009f52:	701a      	strb	r2, [r3, #0]
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	1c5a      	adds	r2, r3, #1
 8009f6e:	607a      	str	r2, [r7, #4]
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	0a1b      	lsrs	r3, r3, #8
 8009f7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	607a      	str	r2, [r7, #4]
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	b2d2      	uxtb	r2, r2
 8009f86:	701a      	strb	r2, [r3, #0]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	0a1b      	lsrs	r3, r3, #8
 8009f8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	1c5a      	adds	r2, r3, #1
 8009f92:	607a      	str	r2, [r7, #4]
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	b2d2      	uxtb	r2, r2
 8009f98:	701a      	strb	r2, [r3, #0]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	0a1b      	lsrs	r3, r3, #8
 8009f9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	1c5a      	adds	r2, r3, #1
 8009fa4:	607a      	str	r2, [r7, #4]
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	b2d2      	uxtb	r2, r2
 8009faa:	701a      	strb	r2, [r3, #0]
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009fb8:	b480      	push	{r7}
 8009fba:	b087      	sub	sp, #28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00d      	beq.n	8009fee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	1c53      	adds	r3, r2, #1
 8009fd6:	613b      	str	r3, [r7, #16]
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	1c59      	adds	r1, r3, #1
 8009fdc:	6179      	str	r1, [r7, #20]
 8009fde:	7812      	ldrb	r2, [r2, #0]
 8009fe0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	607b      	str	r3, [r7, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1f1      	bne.n	8009fd2 <mem_cpy+0x1a>
	}
}
 8009fee:	bf00      	nop
 8009ff0:	371c      	adds	r7, #28
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009ffa:	b480      	push	{r7}
 8009ffc:	b087      	sub	sp, #28
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	60f8      	str	r0, [r7, #12]
 800a002:	60b9      	str	r1, [r7, #8]
 800a004:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	1c5a      	adds	r2, r3, #1
 800a00e:	617a      	str	r2, [r7, #20]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	b2d2      	uxtb	r2, r2
 800a014:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	3b01      	subs	r3, #1
 800a01a:	607b      	str	r3, [r7, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1f3      	bne.n	800a00a <mem_set+0x10>
}
 800a022:	bf00      	nop
 800a024:	bf00      	nop
 800a026:	371c      	adds	r7, #28
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a030:	b480      	push	{r7}
 800a032:	b089      	sub	sp, #36	; 0x24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	61fb      	str	r3, [r7, #28]
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	61fa      	str	r2, [r7, #28]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	4619      	mov	r1, r3
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	61ba      	str	r2, [r7, #24]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	1acb      	subs	r3, r1, r3
 800a05c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3b01      	subs	r3, #1
 800a062:	607b      	str	r3, [r7, #4]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <mem_cmp+0x40>
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d0eb      	beq.n	800a048 <mem_cmp+0x18>

	return r;
 800a070:	697b      	ldr	r3, [r7, #20]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3724      	adds	r7, #36	; 0x24
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a07e:	b480      	push	{r7}
 800a080:	b083      	sub	sp, #12
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a088:	e002      	b.n	800a090 <chk_chr+0x12>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3301      	adds	r3, #1
 800a08e:	607b      	str	r3, [r7, #4]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d005      	beq.n	800a0a4 <chk_chr+0x26>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	461a      	mov	r2, r3
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d1f2      	bne.n	800a08a <chk_chr+0xc>
	return *str;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d009      	beq.n	800a0d6 <lock_fs+0x22>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f003 f91a 	bl	800d300 <ff_req_grant>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <lock_fs+0x22>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e000      	b.n	800a0d8 <lock_fs+0x24>
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00d      	beq.n	800a10e <unlock_fs+0x2e>
 800a0f2:	78fb      	ldrb	r3, [r7, #3]
 800a0f4:	2b0c      	cmp	r3, #12
 800a0f6:	d00a      	beq.n	800a10e <unlock_fs+0x2e>
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	2b0b      	cmp	r3, #11
 800a0fc:	d007      	beq.n	800a10e <unlock_fs+0x2e>
 800a0fe:	78fb      	ldrb	r3, [r7, #3]
 800a100:	2b0f      	cmp	r3, #15
 800a102:	d004      	beq.n	800a10e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	4618      	mov	r0, r3
 800a10a:	f003 f90e 	bl	800d32a <ff_rel_grant>
	}
}
 800a10e:	bf00      	nop
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a122:	2300      	movs	r3, #0
 800a124:	60bb      	str	r3, [r7, #8]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	e029      	b.n	800a180 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a12c:	4a27      	ldr	r2, [pc, #156]	; (800a1cc <chk_lock+0xb4>)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	4413      	add	r3, r2
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d01d      	beq.n	800a176 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a13a:	4a24      	ldr	r2, [pc, #144]	; (800a1cc <chk_lock+0xb4>)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	011b      	lsls	r3, r3, #4
 800a140:	4413      	add	r3, r2
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d116      	bne.n	800a17a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a14c:	4a1f      	ldr	r2, [pc, #124]	; (800a1cc <chk_lock+0xb4>)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	011b      	lsls	r3, r3, #4
 800a152:	4413      	add	r3, r2
 800a154:	3304      	adds	r3, #4
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d10c      	bne.n	800a17a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a160:	4a1a      	ldr	r2, [pc, #104]	; (800a1cc <chk_lock+0xb4>)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	011b      	lsls	r3, r3, #4
 800a166:	4413      	add	r3, r2
 800a168:	3308      	adds	r3, #8
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a170:	429a      	cmp	r2, r3
 800a172:	d102      	bne.n	800a17a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a174:	e007      	b.n	800a186 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a176:	2301      	movs	r3, #1
 800a178:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3301      	adds	r3, #1
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d9d2      	bls.n	800a12c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d109      	bne.n	800a1a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d102      	bne.n	800a198 <chk_lock+0x80>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b02      	cmp	r3, #2
 800a196:	d101      	bne.n	800a19c <chk_lock+0x84>
 800a198:	2300      	movs	r3, #0
 800a19a:	e010      	b.n	800a1be <chk_lock+0xa6>
 800a19c:	2312      	movs	r3, #18
 800a19e:	e00e      	b.n	800a1be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d108      	bne.n	800a1b8 <chk_lock+0xa0>
 800a1a6:	4a09      	ldr	r2, [pc, #36]	; (800a1cc <chk_lock+0xb4>)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	4413      	add	r3, r2
 800a1ae:	330c      	adds	r3, #12
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1b6:	d101      	bne.n	800a1bc <chk_lock+0xa4>
 800a1b8:	2310      	movs	r3, #16
 800a1ba:	e000      	b.n	800a1be <chk_lock+0xa6>
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	20003dd8 	.word	0x20003dd8

0800a1d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	607b      	str	r3, [r7, #4]
 800a1da:	e002      	b.n	800a1e2 <enq_lock+0x12>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	607b      	str	r3, [r7, #4]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d806      	bhi.n	800a1f6 <enq_lock+0x26>
 800a1e8:	4a09      	ldr	r2, [pc, #36]	; (800a210 <enq_lock+0x40>)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	011b      	lsls	r3, r3, #4
 800a1ee:	4413      	add	r3, r2
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1f2      	bne.n	800a1dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	bf14      	ite	ne
 800a1fc:	2301      	movne	r3, #1
 800a1fe:	2300      	moveq	r3, #0
 800a200:	b2db      	uxtb	r3, r3
}
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	20003dd8 	.word	0x20003dd8

0800a214 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a21e:	2300      	movs	r3, #0
 800a220:	60fb      	str	r3, [r7, #12]
 800a222:	e01f      	b.n	800a264 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a224:	4a41      	ldr	r2, [pc, #260]	; (800a32c <inc_lock+0x118>)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	011b      	lsls	r3, r3, #4
 800a22a:	4413      	add	r3, r2
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d113      	bne.n	800a25e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a236:	4a3d      	ldr	r2, [pc, #244]	; (800a32c <inc_lock+0x118>)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	011b      	lsls	r3, r3, #4
 800a23c:	4413      	add	r3, r2
 800a23e:	3304      	adds	r3, #4
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a246:	429a      	cmp	r2, r3
 800a248:	d109      	bne.n	800a25e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a24a:	4a38      	ldr	r2, [pc, #224]	; (800a32c <inc_lock+0x118>)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	4413      	add	r3, r2
 800a252:	3308      	adds	r3, #8
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d006      	beq.n	800a26c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	3301      	adds	r3, #1
 800a262:	60fb      	str	r3, [r7, #12]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2b01      	cmp	r3, #1
 800a268:	d9dc      	bls.n	800a224 <inc_lock+0x10>
 800a26a:	e000      	b.n	800a26e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a26c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d132      	bne.n	800a2da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a274:	2300      	movs	r3, #0
 800a276:	60fb      	str	r3, [r7, #12]
 800a278:	e002      	b.n	800a280 <inc_lock+0x6c>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3301      	adds	r3, #1
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d806      	bhi.n	800a294 <inc_lock+0x80>
 800a286:	4a29      	ldr	r2, [pc, #164]	; (800a32c <inc_lock+0x118>)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	011b      	lsls	r3, r3, #4
 800a28c:	4413      	add	r3, r2
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1f2      	bne.n	800a27a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b02      	cmp	r3, #2
 800a298:	d101      	bne.n	800a29e <inc_lock+0x8a>
 800a29a:	2300      	movs	r3, #0
 800a29c:	e040      	b.n	800a320 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	4922      	ldr	r1, [pc, #136]	; (800a32c <inc_lock+0x118>)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	011b      	lsls	r3, r3, #4
 800a2a8:	440b      	add	r3, r1
 800a2aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	689a      	ldr	r2, [r3, #8]
 800a2b0:	491e      	ldr	r1, [pc, #120]	; (800a32c <inc_lock+0x118>)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	011b      	lsls	r3, r3, #4
 800a2b6:	440b      	add	r3, r1
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	695a      	ldr	r2, [r3, #20]
 800a2c0:	491a      	ldr	r1, [pc, #104]	; (800a32c <inc_lock+0x118>)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	011b      	lsls	r3, r3, #4
 800a2c6:	440b      	add	r3, r1
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a2cc:	4a17      	ldr	r2, [pc, #92]	; (800a32c <inc_lock+0x118>)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	011b      	lsls	r3, r3, #4
 800a2d2:	4413      	add	r3, r2
 800a2d4:	330c      	adds	r3, #12
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d009      	beq.n	800a2f4 <inc_lock+0xe0>
 800a2e0:	4a12      	ldr	r2, [pc, #72]	; (800a32c <inc_lock+0x118>)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	011b      	lsls	r3, r3, #4
 800a2e6:	4413      	add	r3, r2
 800a2e8:	330c      	adds	r3, #12
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <inc_lock+0xe0>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	e015      	b.n	800a320 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d108      	bne.n	800a30c <inc_lock+0xf8>
 800a2fa:	4a0c      	ldr	r2, [pc, #48]	; (800a32c <inc_lock+0x118>)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	011b      	lsls	r3, r3, #4
 800a300:	4413      	add	r3, r2
 800a302:	330c      	adds	r3, #12
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	3301      	adds	r3, #1
 800a308:	b29a      	uxth	r2, r3
 800a30a:	e001      	b.n	800a310 <inc_lock+0xfc>
 800a30c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a310:	4906      	ldr	r1, [pc, #24]	; (800a32c <inc_lock+0x118>)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	011b      	lsls	r3, r3, #4
 800a316:	440b      	add	r3, r1
 800a318:	330c      	adds	r3, #12
 800a31a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3301      	adds	r3, #1
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	20003dd8 	.word	0x20003dd8

0800a330 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	607b      	str	r3, [r7, #4]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d825      	bhi.n	800a390 <dec_lock+0x60>
		n = Files[i].ctr;
 800a344:	4a17      	ldr	r2, [pc, #92]	; (800a3a4 <dec_lock+0x74>)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	011b      	lsls	r3, r3, #4
 800a34a:	4413      	add	r3, r2
 800a34c:	330c      	adds	r3, #12
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a352:	89fb      	ldrh	r3, [r7, #14]
 800a354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a358:	d101      	bne.n	800a35e <dec_lock+0x2e>
 800a35a:	2300      	movs	r3, #0
 800a35c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a35e:	89fb      	ldrh	r3, [r7, #14]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <dec_lock+0x3a>
 800a364:	89fb      	ldrh	r3, [r7, #14]
 800a366:	3b01      	subs	r3, #1
 800a368:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a36a:	4a0e      	ldr	r2, [pc, #56]	; (800a3a4 <dec_lock+0x74>)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	011b      	lsls	r3, r3, #4
 800a370:	4413      	add	r3, r2
 800a372:	330c      	adds	r3, #12
 800a374:	89fa      	ldrh	r2, [r7, #14]
 800a376:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a378:	89fb      	ldrh	r3, [r7, #14]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d105      	bne.n	800a38a <dec_lock+0x5a>
 800a37e:	4a09      	ldr	r2, [pc, #36]	; (800a3a4 <dec_lock+0x74>)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	011b      	lsls	r3, r3, #4
 800a384:	4413      	add	r3, r2
 800a386:	2200      	movs	r2, #0
 800a388:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	737b      	strb	r3, [r7, #13]
 800a38e:	e001      	b.n	800a394 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a390:	2302      	movs	r3, #2
 800a392:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a394:	7b7b      	ldrb	r3, [r7, #13]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	20003dd8 	.word	0x20003dd8

0800a3a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	e010      	b.n	800a3d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a3b6:	4a0d      	ldr	r2, [pc, #52]	; (800a3ec <clear_lock+0x44>)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	011b      	lsls	r3, r3, #4
 800a3bc:	4413      	add	r3, r2
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d105      	bne.n	800a3d2 <clear_lock+0x2a>
 800a3c6:	4a09      	ldr	r2, [pc, #36]	; (800a3ec <clear_lock+0x44>)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	011b      	lsls	r3, r3, #4
 800a3cc:	4413      	add	r3, r2
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d9eb      	bls.n	800a3b6 <clear_lock+0xe>
	}
}
 800a3de:	bf00      	nop
 800a3e0:	bf00      	nop
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	20003dd8 	.word	0x20003dd8

0800a3f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	78db      	ldrb	r3, [r3, #3]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d034      	beq.n	800a46e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a408:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	7858      	ldrb	r0, [r3, #1]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a414:	2301      	movs	r3, #1
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	f7ff fd0c 	bl	8009e34 <disk_write>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d002      	beq.n	800a428 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a422:	2301      	movs	r3, #1
 800a424:	73fb      	strb	r3, [r7, #15]
 800a426:	e022      	b.n	800a46e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a432:	697a      	ldr	r2, [r7, #20]
 800a434:	1ad2      	subs	r2, r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	69db      	ldr	r3, [r3, #28]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d217      	bcs.n	800a46e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	789b      	ldrb	r3, [r3, #2]
 800a442:	613b      	str	r3, [r7, #16]
 800a444:	e010      	b.n	800a468 <sync_window+0x78>
					wsect += fs->fsize;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	4413      	add	r3, r2
 800a44e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	7858      	ldrb	r0, [r3, #1]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a45a:	2301      	movs	r3, #1
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	f7ff fce9 	bl	8009e34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	3b01      	subs	r3, #1
 800a466:	613b      	str	r3, [r7, #16]
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d8eb      	bhi.n	800a446 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d01b      	beq.n	800a4c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff ffad 	bl	800a3f0 <sync_window>
 800a496:	4603      	mov	r3, r0
 800a498:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d113      	bne.n	800a4c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	7858      	ldrb	r0, [r3, #1]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	f7ff fca1 	bl	8009df4 <disk_read>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d004      	beq.n	800a4c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
	...

0800a4d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7ff ff87 	bl	800a3f0 <sync_window>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d158      	bne.n	800a59e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b03      	cmp	r3, #3
 800a4f2:	d148      	bne.n	800a586 <sync_fs+0xb2>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	791b      	ldrb	r3, [r3, #4]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d144      	bne.n	800a586 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	3334      	adds	r3, #52	; 0x34
 800a500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a504:	2100      	movs	r1, #0
 800a506:	4618      	mov	r0, r3
 800a508:	f7ff fd77 	bl	8009ffa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	3334      	adds	r3, #52	; 0x34
 800a510:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a514:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a518:	4618      	mov	r0, r3
 800a51a:	f7ff fd06 	bl	8009f2a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	3334      	adds	r3, #52	; 0x34
 800a522:	4921      	ldr	r1, [pc, #132]	; (800a5a8 <sync_fs+0xd4>)
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff fd1b 	bl	8009f60 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3334      	adds	r3, #52	; 0x34
 800a52e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a532:	491e      	ldr	r1, [pc, #120]	; (800a5ac <sync_fs+0xd8>)
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff fd13 	bl	8009f60 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	3334      	adds	r3, #52	; 0x34
 800a53e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	4619      	mov	r1, r3
 800a548:	4610      	mov	r0, r2
 800a54a:	f7ff fd09 	bl	8009f60 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3334      	adds	r3, #52	; 0x34
 800a552:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	4619      	mov	r1, r3
 800a55c:	4610      	mov	r0, r2
 800a55e:	f7ff fcff 	bl	8009f60 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	1c5a      	adds	r2, r3, #1
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	7858      	ldrb	r0, [r3, #1]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a57a:	2301      	movs	r3, #1
 800a57c:	f7ff fc5a 	bl	8009e34 <disk_write>
			fs->fsi_flag = 0;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	785b      	ldrb	r3, [r3, #1]
 800a58a:	2200      	movs	r2, #0
 800a58c:	2100      	movs	r1, #0
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff fc70 	bl	8009e74 <disk_ioctl>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <sync_fs+0xca>
 800a59a:	2301      	movs	r3, #1
 800a59c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	41615252 	.word	0x41615252
 800a5ac:	61417272 	.word	0x61417272

0800a5b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	3b02      	subs	r3, #2
 800a5be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	3b02      	subs	r3, #2
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d301      	bcc.n	800a5d0 <clust2sect+0x20>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	e008      	b.n	800a5e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	895b      	ldrh	r3, [r3, #10]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	fb03 f202 	mul.w	r2, r3, r2
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e0:	4413      	add	r3, r2
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b086      	sub	sp, #24
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d904      	bls.n	800a60e <get_fat+0x20>
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d302      	bcc.n	800a614 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a60e:	2301      	movs	r3, #1
 800a610:	617b      	str	r3, [r7, #20]
 800a612:	e091      	b.n	800a738 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a618:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d063      	beq.n	800a6ea <get_fat+0xfc>
 800a622:	2b03      	cmp	r3, #3
 800a624:	dc7e      	bgt.n	800a724 <get_fat+0x136>
 800a626:	2b01      	cmp	r3, #1
 800a628:	d002      	beq.n	800a630 <get_fat+0x42>
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d042      	beq.n	800a6b4 <get_fat+0xc6>
 800a62e:	e079      	b.n	800a724 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	085b      	lsrs	r3, r3, #1
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	4413      	add	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	0adb      	lsrs	r3, r3, #11
 800a646:	4413      	add	r3, r2
 800a648:	4619      	mov	r1, r3
 800a64a:	6938      	ldr	r0, [r7, #16]
 800a64c:	f7ff ff14 	bl	800a478 <move_window>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d169      	bne.n	800a72a <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	1c5a      	adds	r2, r3, #1
 800a65a:	60fa      	str	r2, [r7, #12]
 800a65c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	4413      	add	r3, r2
 800a664:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a668:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	0adb      	lsrs	r3, r3, #11
 800a672:	4413      	add	r3, r2
 800a674:	4619      	mov	r1, r3
 800a676:	6938      	ldr	r0, [r7, #16]
 800a678:	f7ff fefe 	bl	800a478 <move_window>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d155      	bne.n	800a72e <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	4413      	add	r3, r2
 800a68c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a690:	021b      	lsls	r3, r3, #8
 800a692:	461a      	mov	r2, r3
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	4313      	orrs	r3, r2
 800a698:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	f003 0301 	and.w	r3, r3, #1
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <get_fat+0xbc>
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	091b      	lsrs	r3, r3, #4
 800a6a8:	e002      	b.n	800a6b0 <get_fat+0xc2>
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6b0:	617b      	str	r3, [r7, #20]
			break;
 800a6b2:	e041      	b.n	800a738 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	0a9b      	lsrs	r3, r3, #10
 800a6bc:	4413      	add	r3, r2
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6938      	ldr	r0, [r7, #16]
 800a6c2:	f7ff fed9 	bl	800a478 <move_window>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d132      	bne.n	800a732 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	0059      	lsls	r1, r3, #1
 800a6d6:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800a6da:	400b      	ands	r3, r1
 800a6dc:	4413      	add	r3, r2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7ff fbe8 	bl	8009eb4 <ld_word>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	617b      	str	r3, [r7, #20]
			break;
 800a6e8:	e026      	b.n	800a738 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	0a5b      	lsrs	r3, r3, #9
 800a6f2:	4413      	add	r3, r2
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6938      	ldr	r0, [r7, #16]
 800a6f8:	f7ff febe 	bl	800a478 <move_window>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d119      	bne.n	800a736 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	0099      	lsls	r1, r3, #2
 800a70c:	f240 73fc 	movw	r3, #2044	; 0x7fc
 800a710:	400b      	ands	r3, r1
 800a712:	4413      	add	r3, r2
 800a714:	4618      	mov	r0, r3
 800a716:	f7ff fbe5 	bl	8009ee4 <ld_dword>
 800a71a:	4603      	mov	r3, r0
 800a71c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a720:	617b      	str	r3, [r7, #20]
			break;
 800a722:	e009      	b.n	800a738 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a724:	2301      	movs	r3, #1
 800a726:	617b      	str	r3, [r7, #20]
 800a728:	e006      	b.n	800a738 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a72a:	bf00      	nop
 800a72c:	e004      	b.n	800a738 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a72e:	bf00      	nop
 800a730:	e002      	b.n	800a738 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a732:	bf00      	nop
 800a734:	e000      	b.n	800a738 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a736:	bf00      	nop
		}
	}

	return val;
 800a738:	697b      	ldr	r3, [r7, #20]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3718      	adds	r7, #24
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a742:	b590      	push	{r4, r7, lr}
 800a744:	b089      	sub	sp, #36	; 0x24
 800a746:	af00      	add	r7, sp, #0
 800a748:	60f8      	str	r0, [r7, #12]
 800a74a:	60b9      	str	r1, [r7, #8]
 800a74c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a74e:	2302      	movs	r3, #2
 800a750:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	2b01      	cmp	r3, #1
 800a756:	f240 80d5 	bls.w	800a904 <put_fat+0x1c2>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	429a      	cmp	r2, r3
 800a762:	f080 80cf 	bcs.w	800a904 <put_fat+0x1c2>
		switch (fs->fs_type) {
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	2b03      	cmp	r3, #3
 800a76c:	f000 8097 	beq.w	800a89e <put_fat+0x15c>
 800a770:	2b03      	cmp	r3, #3
 800a772:	f300 80d0 	bgt.w	800a916 <put_fat+0x1d4>
 800a776:	2b01      	cmp	r3, #1
 800a778:	d002      	beq.n	800a780 <put_fat+0x3e>
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d06e      	beq.n	800a85c <put_fat+0x11a>
 800a77e:	e0ca      	b.n	800a916 <put_fat+0x1d4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	61bb      	str	r3, [r7, #24]
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	085b      	lsrs	r3, r3, #1
 800a788:	69ba      	ldr	r2, [r7, #24]
 800a78a:	4413      	add	r3, r2
 800a78c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	0adb      	lsrs	r3, r3, #11
 800a796:	4413      	add	r3, r2
 800a798:	4619      	mov	r1, r3
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f7ff fe6c 	bl	800a478 <move_window>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7a4:	7ffb      	ldrb	r3, [r7, #31]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f040 80ae 	bne.w	800a908 <put_fat+0x1c6>
			p = fs->win + bc++ % SS(fs);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	1c59      	adds	r1, r3, #1
 800a7b6:	61b9      	str	r1, [r7, #24]
 800a7b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7bc:	4413      	add	r3, r2
 800a7be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00d      	beq.n	800a7e6 <put_fat+0xa4>
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	b25b      	sxtb	r3, r3
 800a7d0:	f003 030f 	and.w	r3, r3, #15
 800a7d4:	b25a      	sxtb	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	011b      	lsls	r3, r3, #4
 800a7dc:	b25b      	sxtb	r3, r3
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	b25b      	sxtb	r3, r3
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	e001      	b.n	800a7ea <put_fat+0xa8>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	0adb      	lsrs	r3, r3, #11
 800a7fc:	4413      	add	r3, r2
 800a7fe:	4619      	mov	r1, r3
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f7ff fe39 	bl	800a478 <move_window>
 800a806:	4603      	mov	r3, r0
 800a808:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a80a:	7ffb      	ldrb	r3, [r7, #31]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d17d      	bne.n	800a90c <put_fat+0x1ca>
			p = fs->win + bc % SS(fs);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a81c:	4413      	add	r3, r2
 800a81e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <put_fat+0xf0>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	091b      	lsrs	r3, r3, #4
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	e00e      	b.n	800a850 <put_fat+0x10e>
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	b25b      	sxtb	r3, r3
 800a838:	f023 030f 	bic.w	r3, r3, #15
 800a83c:	b25a      	sxtb	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	0a1b      	lsrs	r3, r3, #8
 800a842:	b25b      	sxtb	r3, r3
 800a844:	f003 030f 	and.w	r3, r3, #15
 800a848:	b25b      	sxtb	r3, r3
 800a84a:	4313      	orrs	r3, r2
 800a84c:	b25b      	sxtb	r3, r3
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	697a      	ldr	r2, [r7, #20]
 800a852:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2201      	movs	r2, #1
 800a858:	70da      	strb	r2, [r3, #3]
			break;
 800a85a:	e05c      	b.n	800a916 <put_fat+0x1d4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	0a9b      	lsrs	r3, r3, #10
 800a864:	4413      	add	r3, r2
 800a866:	4619      	mov	r1, r3
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f7ff fe05 	bl	800a478 <move_window>
 800a86e:	4603      	mov	r3, r0
 800a870:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a872:	7ffb      	ldrb	r3, [r7, #31]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d14b      	bne.n	800a910 <put_fat+0x1ce>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	0059      	lsls	r1, r3, #1
 800a882:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800a886:	400b      	ands	r3, r1
 800a888:	4413      	add	r3, r2
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	b292      	uxth	r2, r2
 800a88e:	4611      	mov	r1, r2
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff fb4a 	bl	8009f2a <st_word>
			fs->wflag = 1;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2201      	movs	r2, #1
 800a89a:	70da      	strb	r2, [r3, #3]
			break;
 800a89c:	e03b      	b.n	800a916 <put_fat+0x1d4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	0a5b      	lsrs	r3, r3, #9
 800a8a6:	4413      	add	r3, r2
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f7ff fde4 	bl	800a478 <move_window>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8b4:	7ffb      	ldrb	r3, [r7, #31]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d12c      	bne.n	800a914 <put_fat+0x1d2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	0099      	lsls	r1, r3, #2
 800a8ca:	f240 73fc 	movw	r3, #2044	; 0x7fc
 800a8ce:	400b      	ands	r3, r1
 800a8d0:	4413      	add	r3, r2
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff fb06 	bl	8009ee4 <ld_dword>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a8de:	4323      	orrs	r3, r4
 800a8e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	0099      	lsls	r1, r3, #2
 800a8ec:	f240 73fc 	movw	r3, #2044	; 0x7fc
 800a8f0:	400b      	ands	r3, r1
 800a8f2:	4413      	add	r3, r2
 800a8f4:	6879      	ldr	r1, [r7, #4]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff fb32 	bl	8009f60 <st_dword>
			fs->wflag = 1;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2201      	movs	r2, #1
 800a900:	70da      	strb	r2, [r3, #3]
			break;
 800a902:	e008      	b.n	800a916 <put_fat+0x1d4>
		}
	}
 800a904:	bf00      	nop
 800a906:	e006      	b.n	800a916 <put_fat+0x1d4>
			if (res != FR_OK) break;
 800a908:	bf00      	nop
 800a90a:	e004      	b.n	800a916 <put_fat+0x1d4>
			if (res != FR_OK) break;
 800a90c:	bf00      	nop
 800a90e:	e002      	b.n	800a916 <put_fat+0x1d4>
			if (res != FR_OK) break;
 800a910:	bf00      	nop
 800a912:	e000      	b.n	800a916 <put_fat+0x1d4>
			if (res != FR_OK) break;
 800a914:	bf00      	nop
	return res;
 800a916:	7ffb      	ldrb	r3, [r7, #31]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3724      	adds	r7, #36	; 0x24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd90      	pop	{r4, r7, pc}

0800a920 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b088      	sub	sp, #32
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d904      	bls.n	800a946 <remove_chain+0x26>
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	68ba      	ldr	r2, [r7, #8]
 800a942:	429a      	cmp	r2, r3
 800a944:	d301      	bcc.n	800a94a <remove_chain+0x2a>
 800a946:	2302      	movs	r3, #2
 800a948:	e04b      	b.n	800a9e2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00c      	beq.n	800a96a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a954:	6879      	ldr	r1, [r7, #4]
 800a956:	69b8      	ldr	r0, [r7, #24]
 800a958:	f7ff fef3 	bl	800a742 <put_fat>
 800a95c:	4603      	mov	r3, r0
 800a95e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a960:	7ffb      	ldrb	r3, [r7, #31]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d001      	beq.n	800a96a <remove_chain+0x4a>
 800a966:	7ffb      	ldrb	r3, [r7, #31]
 800a968:	e03b      	b.n	800a9e2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a96a:	68b9      	ldr	r1, [r7, #8]
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f7ff fe3e 	bl	800a5ee <get_fat>
 800a972:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d031      	beq.n	800a9de <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d101      	bne.n	800a984 <remove_chain+0x64>
 800a980:	2302      	movs	r3, #2
 800a982:	e02e      	b.n	800a9e2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a98a:	d101      	bne.n	800a990 <remove_chain+0x70>
 800a98c:	2301      	movs	r3, #1
 800a98e:	e028      	b.n	800a9e2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a990:	2200      	movs	r2, #0
 800a992:	68b9      	ldr	r1, [r7, #8]
 800a994:	69b8      	ldr	r0, [r7, #24]
 800a996:	f7ff fed4 	bl	800a742 <put_fat>
 800a99a:	4603      	mov	r3, r0
 800a99c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a99e:	7ffb      	ldrb	r3, [r7, #31]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <remove_chain+0x88>
 800a9a4:	7ffb      	ldrb	r3, [r7, #31]
 800a9a6:	e01c      	b.n	800a9e2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	695a      	ldr	r2, [r3, #20]
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	3b02      	subs	r3, #2
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d20b      	bcs.n	800a9ce <remove_chain+0xae>
			fs->free_clst++;
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	1c5a      	adds	r2, r3, #1
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	791b      	ldrb	r3, [r3, #4]
 800a9c4:	f043 0301 	orr.w	r3, r3, #1
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d3c6      	bcc.n	800a96a <remove_chain+0x4a>
 800a9dc:	e000      	b.n	800a9e0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a9de:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3720      	adds	r7, #32
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b088      	sub	sp, #32
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10d      	bne.n	800aa1c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d004      	beq.n	800aa16 <create_chain+0x2c>
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	69ba      	ldr	r2, [r7, #24]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d31b      	bcc.n	800aa4e <create_chain+0x64>
 800aa16:	2301      	movs	r3, #1
 800aa18:	61bb      	str	r3, [r7, #24]
 800aa1a:	e018      	b.n	800aa4e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff fde5 	bl	800a5ee <get_fat>
 800aa24:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d801      	bhi.n	800aa30 <create_chain+0x46>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e070      	b.n	800ab12 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa36:	d101      	bne.n	800aa3c <create_chain+0x52>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	e06a      	b.n	800ab12 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d201      	bcs.n	800aa4a <create_chain+0x60>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	e063      	b.n	800ab12 <create_chain+0x128>
		scl = clst;
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	3301      	adds	r3, #1
 800aa56:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	699b      	ldr	r3, [r3, #24]
 800aa5c:	69fa      	ldr	r2, [r7, #28]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d307      	bcc.n	800aa72 <create_chain+0x88>
				ncl = 2;
 800aa62:	2302      	movs	r3, #2
 800aa64:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aa66:	69fa      	ldr	r2, [r7, #28]
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d901      	bls.n	800aa72 <create_chain+0x88>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	e04f      	b.n	800ab12 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aa72:	69f9      	ldr	r1, [r7, #28]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7ff fdba 	bl	800a5ee <get_fat>
 800aa7a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00e      	beq.n	800aaa0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d003      	beq.n	800aa90 <create_chain+0xa6>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa8e:	d101      	bne.n	800aa94 <create_chain+0xaa>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	e03e      	b.n	800ab12 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aa94:	69fa      	ldr	r2, [r7, #28]
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d1da      	bne.n	800aa52 <create_chain+0x68>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	e038      	b.n	800ab12 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aaa0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aaa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aaa6:	69f9      	ldr	r1, [r7, #28]
 800aaa8:	6938      	ldr	r0, [r7, #16]
 800aaaa:	f7ff fe4a 	bl	800a742 <put_fat>
 800aaae:	4603      	mov	r3, r0
 800aab0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aab2:	7dfb      	ldrb	r3, [r7, #23]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d109      	bne.n	800aacc <create_chain+0xe2>
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d006      	beq.n	800aacc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aabe:	69fa      	ldr	r2, [r7, #28]
 800aac0:	6839      	ldr	r1, [r7, #0]
 800aac2:	6938      	ldr	r0, [r7, #16]
 800aac4:	f7ff fe3d 	bl	800a742 <put_fat>
 800aac8:	4603      	mov	r3, r0
 800aaca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aacc:	7dfb      	ldrb	r3, [r7, #23]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d116      	bne.n	800ab00 <create_chain+0x116>
		fs->last_clst = ncl;
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	69fa      	ldr	r2, [r7, #28]
 800aad6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	695a      	ldr	r2, [r3, #20]
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	3b02      	subs	r3, #2
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d804      	bhi.n	800aaf0 <create_chain+0x106>
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	1e5a      	subs	r2, r3, #1
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	791b      	ldrb	r3, [r3, #4]
 800aaf4:	f043 0301 	orr.w	r3, r3, #1
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	711a      	strb	r2, [r3, #4]
 800aafe:	e007      	b.n	800ab10 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ab00:	7dfb      	ldrb	r3, [r7, #23]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d102      	bne.n	800ab0c <create_chain+0x122>
 800ab06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab0a:	e000      	b.n	800ab0e <create_chain+0x124>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ab10:	69fb      	ldr	r3, [r7, #28]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3720      	adds	r7, #32
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b087      	sub	sp, #28
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2e:	3304      	adds	r3, #4
 800ab30:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	0adb      	lsrs	r3, r3, #11
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	8952      	ldrh	r2, [r2, #10]
 800ab3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab3e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	1d1a      	adds	r2, r3, #4
 800ab44:	613a      	str	r2, [r7, #16]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <clmt_clust+0x3a>
 800ab50:	2300      	movs	r3, #0
 800ab52:	e010      	b.n	800ab76 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d307      	bcc.n	800ab6c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ab5c:	697a      	ldr	r2, [r7, #20]
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	617b      	str	r3, [r7, #20]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	3304      	adds	r3, #4
 800ab68:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab6a:	e7e9      	b.n	800ab40 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ab6c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	4413      	add	r3, r2
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	371c      	adds	r7, #28
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b086      	sub	sp, #24
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab98:	d204      	bcs.n	800aba4 <dir_sdi+0x22>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	f003 031f 	and.w	r3, r3, #31
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d001      	beq.n	800aba8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800aba4:	2302      	movs	r3, #2
 800aba6:	e063      	b.n	800ac70 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d106      	bne.n	800abc8 <dir_sdi+0x46>
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d902      	bls.n	800abc8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10c      	bne.n	800abe8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	095b      	lsrs	r3, r3, #5
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	8912      	ldrh	r2, [r2, #8]
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d301      	bcc.n	800abde <dir_sdi+0x5c>
 800abda:	2302      	movs	r3, #2
 800abdc:	e048      	b.n	800ac70 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	61da      	str	r2, [r3, #28]
 800abe6:	e029      	b.n	800ac3c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	895b      	ldrh	r3, [r3, #10]
 800abec:	02db      	lsls	r3, r3, #11
 800abee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800abf0:	e019      	b.n	800ac26 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6979      	ldr	r1, [r7, #20]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7ff fcf9 	bl	800a5ee <get_fat>
 800abfc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac04:	d101      	bne.n	800ac0a <dir_sdi+0x88>
 800ac06:	2301      	movs	r3, #1
 800ac08:	e032      	b.n	800ac70 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d904      	bls.n	800ac1a <dir_sdi+0x98>
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d301      	bcc.n	800ac1e <dir_sdi+0x9c>
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e028      	b.n	800ac70 <dir_sdi+0xee>
			ofs -= csz;
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac26:	683a      	ldr	r2, [r7, #0]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d2e1      	bcs.n	800abf2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ac2e:	6979      	ldr	r1, [r7, #20]
 800ac30:	6938      	ldr	r0, [r7, #16]
 800ac32:	f7ff fcbd 	bl	800a5b0 <clust2sect>
 800ac36:	4602      	mov	r2, r0
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <dir_sdi+0xcc>
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	e010      	b.n	800ac70 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	69da      	ldr	r2, [r3, #28]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	0adb      	lsrs	r3, r3, #11
 800ac56:	441a      	add	r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac68:	441a      	add	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	695b      	ldr	r3, [r3, #20]
 800ac8c:	3320      	adds	r3, #32
 800ac8e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d003      	beq.n	800aca0 <dir_next+0x28>
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac9e:	d301      	bcc.n	800aca4 <dir_next+0x2c>
 800aca0:	2304      	movs	r3, #4
 800aca2:	e0aa      	b.n	800adfa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f040 8098 	bne.w	800ade0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	69db      	ldr	r3, [r3, #28]
 800acb4:	1c5a      	adds	r2, r3, #1
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10b      	bne.n	800acda <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	095b      	lsrs	r3, r3, #5
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	8912      	ldrh	r2, [r2, #8]
 800acca:	4293      	cmp	r3, r2
 800accc:	f0c0 8088 	bcc.w	800ade0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	61da      	str	r2, [r3, #28]
 800acd6:	2304      	movs	r3, #4
 800acd8:	e08f      	b.n	800adfa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	0adb      	lsrs	r3, r3, #11
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	8952      	ldrh	r2, [r2, #10]
 800ace2:	3a01      	subs	r2, #1
 800ace4:	4013      	ands	r3, r2
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d17a      	bne.n	800ade0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	4619      	mov	r1, r3
 800acf2:	4610      	mov	r0, r2
 800acf4:	f7ff fc7b 	bl	800a5ee <get_fat>
 800acf8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d801      	bhi.n	800ad04 <dir_next+0x8c>
 800ad00:	2302      	movs	r3, #2
 800ad02:	e07a      	b.n	800adfa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad0a:	d101      	bne.n	800ad10 <dir_next+0x98>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e074      	b.n	800adfa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	697a      	ldr	r2, [r7, #20]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d358      	bcc.n	800adcc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d104      	bne.n	800ad2a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	61da      	str	r2, [r3, #28]
 800ad26:	2304      	movs	r3, #4
 800ad28:	e067      	b.n	800adfa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	4619      	mov	r1, r3
 800ad32:	4610      	mov	r0, r2
 800ad34:	f7ff fe59 	bl	800a9ea <create_chain>
 800ad38:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <dir_next+0xcc>
 800ad40:	2307      	movs	r3, #7
 800ad42:	e05a      	b.n	800adfa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d101      	bne.n	800ad4e <dir_next+0xd6>
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	e055      	b.n	800adfa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad54:	d101      	bne.n	800ad5a <dir_next+0xe2>
 800ad56:	2301      	movs	r3, #1
 800ad58:	e04f      	b.n	800adfa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f7ff fb48 	bl	800a3f0 <sync_window>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d001      	beq.n	800ad6a <dir_next+0xf2>
 800ad66:	2301      	movs	r3, #1
 800ad68:	e047      	b.n	800adfa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	3334      	adds	r3, #52	; 0x34
 800ad6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad72:	2100      	movs	r1, #0
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7ff f940 	bl	8009ffa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	613b      	str	r3, [r7, #16]
 800ad7e:	6979      	ldr	r1, [r7, #20]
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f7ff fc15 	bl	800a5b0 <clust2sect>
 800ad86:	4602      	mov	r2, r0
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	631a      	str	r2, [r3, #48]	; 0x30
 800ad8c:	e012      	b.n	800adb4 <dir_next+0x13c>
						fs->wflag = 1;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2201      	movs	r2, #1
 800ad92:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f7ff fb2b 	bl	800a3f0 <sync_window>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d001      	beq.n	800ada4 <dir_next+0x12c>
 800ada0:	2301      	movs	r3, #1
 800ada2:	e02a      	b.n	800adfa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	3301      	adds	r3, #1
 800ada8:	613b      	str	r3, [r7, #16]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adae:	1c5a      	adds	r2, r3, #1
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	631a      	str	r2, [r3, #48]	; 0x30
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	895b      	ldrh	r3, [r3, #10]
 800adb8:	461a      	mov	r2, r3
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d3e6      	bcc.n	800ad8e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	1ad2      	subs	r2, r2, r3
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800add2:	6979      	ldr	r1, [r7, #20]
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f7ff fbeb 	bl	800a5b0 <clust2sect>
 800adda:	4602      	mov	r2, r0
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	68ba      	ldr	r2, [r7, #8]
 800ade4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800adf2:	441a      	add	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b086      	sub	sp, #24
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ae12:	2100      	movs	r1, #0
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7ff feb4 	bl	800ab82 <dir_sdi>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae1e:	7dfb      	ldrb	r3, [r7, #23]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d12b      	bne.n	800ae7c <dir_alloc+0x7a>
		n = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7ff fb22 	bl	800a478 <move_window>
 800ae34:	4603      	mov	r3, r0
 800ae36:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d11d      	bne.n	800ae7a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2be5      	cmp	r3, #229	; 0xe5
 800ae46:	d004      	beq.n	800ae52 <dir_alloc+0x50>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a1b      	ldr	r3, [r3, #32]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d107      	bne.n	800ae62 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	3301      	adds	r3, #1
 800ae56:	613b      	str	r3, [r7, #16]
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d102      	bne.n	800ae66 <dir_alloc+0x64>
 800ae60:	e00c      	b.n	800ae7c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ae62:	2300      	movs	r3, #0
 800ae64:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ae66:	2101      	movs	r1, #1
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff ff05 	bl	800ac78 <dir_next>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ae72:	7dfb      	ldrb	r3, [r7, #23]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d0d7      	beq.n	800ae28 <dir_alloc+0x26>
 800ae78:	e000      	b.n	800ae7c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ae7a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ae7c:	7dfb      	ldrb	r3, [r7, #23]
 800ae7e:	2b04      	cmp	r3, #4
 800ae80:	d101      	bne.n	800ae86 <dir_alloc+0x84>
 800ae82:	2307      	movs	r3, #7
 800ae84:	75fb      	strb	r3, [r7, #23]
	return res;
 800ae86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3718      	adds	r7, #24
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	331a      	adds	r3, #26
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff f808 	bl	8009eb4 <ld_word>
 800aea4:	4603      	mov	r3, r0
 800aea6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2b03      	cmp	r3, #3
 800aeae:	d109      	bne.n	800aec4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	3314      	adds	r3, #20
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fe fffd 	bl	8009eb4 <ld_word>
 800aeba:	4603      	mov	r3, r0
 800aebc:	041b      	lsls	r3, r3, #16
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aec4:	68fb      	ldr	r3, [r7, #12]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	60f8      	str	r0, [r7, #12]
 800aed6:	60b9      	str	r1, [r7, #8]
 800aed8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	331a      	adds	r3, #26
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	b292      	uxth	r2, r2
 800aee2:	4611      	mov	r1, r2
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7ff f820 	bl	8009f2a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b03      	cmp	r3, #3
 800aef0:	d109      	bne.n	800af06 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	f103 0214 	add.w	r2, r3, #20
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	0c1b      	lsrs	r3, r3, #16
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	4619      	mov	r1, r3
 800af00:	4610      	mov	r0, r2
 800af02:	f7ff f812 	bl	8009f2a <st_word>
	}
}
 800af06:	bf00      	nop
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b086      	sub	sp, #24
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800af18:	2304      	movs	r3, #4
 800af1a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800af22:	e03c      	b.n	800af9e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	4619      	mov	r1, r3
 800af2a:	6938      	ldr	r0, [r7, #16]
 800af2c:	f7ff faa4 	bl	800a478 <move_window>
 800af30:	4603      	mov	r3, r0
 800af32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800af34:	7dfb      	ldrb	r3, [r7, #23]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d136      	bne.n	800afa8 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800af42:	7bfb      	ldrb	r3, [r7, #15]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d102      	bne.n	800af4e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800af48:	2304      	movs	r3, #4
 800af4a:	75fb      	strb	r3, [r7, #23]
 800af4c:	e031      	b.n	800afb2 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	330b      	adds	r3, #11
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af5a:	73bb      	strb	r3, [r7, #14]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	7bba      	ldrb	r2, [r7, #14]
 800af60:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800af62:	7bfb      	ldrb	r3, [r7, #15]
 800af64:	2be5      	cmp	r3, #229	; 0xe5
 800af66:	d011      	beq.n	800af8c <dir_read+0x7e>
 800af68:	7bfb      	ldrb	r3, [r7, #15]
 800af6a:	2b2e      	cmp	r3, #46	; 0x2e
 800af6c:	d00e      	beq.n	800af8c <dir_read+0x7e>
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	2b0f      	cmp	r3, #15
 800af72:	d00b      	beq.n	800af8c <dir_read+0x7e>
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	f023 0320 	bic.w	r3, r3, #32
 800af7a:	2b08      	cmp	r3, #8
 800af7c:	bf0c      	ite	eq
 800af7e:	2301      	moveq	r3, #1
 800af80:	2300      	movne	r3, #0
 800af82:	b2db      	uxtb	r3, r3
 800af84:	461a      	mov	r2, r3
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	4293      	cmp	r3, r2
 800af8a:	d00f      	beq.n	800afac <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800af8c:	2100      	movs	r1, #0
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7ff fe72 	bl	800ac78 <dir_next>
 800af94:	4603      	mov	r3, r0
 800af96:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800af98:	7dfb      	ldrb	r3, [r7, #23]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d108      	bne.n	800afb0 <dir_read+0xa2>
	while (dp->sect) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1be      	bne.n	800af24 <dir_read+0x16>
 800afa6:	e004      	b.n	800afb2 <dir_read+0xa4>
		if (res != FR_OK) break;
 800afa8:	bf00      	nop
 800afaa:	e002      	b.n	800afb2 <dir_read+0xa4>
				break;
 800afac:	bf00      	nop
 800afae:	e000      	b.n	800afb2 <dir_read+0xa4>
		if (res != FR_OK) break;
 800afb0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800afb2:	7dfb      	ldrb	r3, [r7, #23]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <dir_read+0xb0>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	61da      	str	r2, [r3, #28]
	return res;
 800afbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3718      	adds	r7, #24
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b086      	sub	sp, #24
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800afd6:	2100      	movs	r1, #0
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7ff fdd2 	bl	800ab82 <dir_sdi>
 800afde:	4603      	mov	r3, r0
 800afe0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800afe2:	7dfb      	ldrb	r3, [r7, #23]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <dir_find+0x24>
 800afe8:	7dfb      	ldrb	r3, [r7, #23]
 800afea:	e03e      	b.n	800b06a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	4619      	mov	r1, r3
 800aff2:	6938      	ldr	r0, [r7, #16]
 800aff4:	f7ff fa40 	bl	800a478 <move_window>
 800aff8:	4603      	mov	r3, r0
 800affa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800affc:	7dfb      	ldrb	r3, [r7, #23]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d12f      	bne.n	800b062 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d102      	bne.n	800b016 <dir_find+0x4e>
 800b010:	2304      	movs	r3, #4
 800b012:	75fb      	strb	r3, [r7, #23]
 800b014:	e028      	b.n	800b068 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	330b      	adds	r3, #11
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b022:	b2da      	uxtb	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a1b      	ldr	r3, [r3, #32]
 800b02c:	330b      	adds	r3, #11
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	f003 0308 	and.w	r3, r3, #8
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <dir_find+0x86>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a18      	ldr	r0, [r3, #32]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3324      	adds	r3, #36	; 0x24
 800b040:	220b      	movs	r2, #11
 800b042:	4619      	mov	r1, r3
 800b044:	f7fe fff4 	bl	800a030 <mem_cmp>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b04e:	2100      	movs	r1, #0
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7ff fe11 	bl	800ac78 <dir_next>
 800b056:	4603      	mov	r3, r0
 800b058:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b05a:	7dfb      	ldrb	r3, [r7, #23]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0c5      	beq.n	800afec <dir_find+0x24>
 800b060:	e002      	b.n	800b068 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b062:	bf00      	nop
 800b064:	e000      	b.n	800b068 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b066:	bf00      	nop

	return res;
 800b068:	7dfb      	ldrb	r3, [r7, #23]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3718      	adds	r7, #24
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b084      	sub	sp, #16
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b080:	2101      	movs	r1, #1
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7ff febd 	bl	800ae02 <dir_alloc>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d11c      	bne.n	800b0cc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	4619      	mov	r1, r3
 800b098:	68b8      	ldr	r0, [r7, #8]
 800b09a:	f7ff f9ed 	bl	800a478 <move_window>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d111      	bne.n	800b0cc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	2220      	movs	r2, #32
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fe ffa2 	bl	8009ffa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a18      	ldr	r0, [r3, #32]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	3324      	adds	r3, #36	; 0x24
 800b0be:	220b      	movs	r2, #11
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	f7fe ff79 	bl	8009fb8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b086      	sub	sp, #24
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	69db      	ldr	r3, [r3, #28]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d04e      	beq.n	800b18c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	613b      	str	r3, [r7, #16]
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800b0f6:	e021      	b.n	800b13c <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a1a      	ldr	r2, [r3, #32]
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	1c59      	adds	r1, r3, #1
 800b100:	6179      	str	r1, [r7, #20]
 800b102:	4413      	add	r3, r2
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	2b20      	cmp	r3, #32
 800b10c:	d100      	bne.n	800b110 <get_fileinfo+0x3a>
 800b10e:	e015      	b.n	800b13c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	2b05      	cmp	r3, #5
 800b114:	d101      	bne.n	800b11a <get_fileinfo+0x44>
 800b116:	23e5      	movs	r3, #229	; 0xe5
 800b118:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	2b09      	cmp	r3, #9
 800b11e:	d106      	bne.n	800b12e <get_fileinfo+0x58>
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	613a      	str	r2, [r7, #16]
 800b126:	683a      	ldr	r2, [r7, #0]
 800b128:	4413      	add	r3, r2
 800b12a:	222e      	movs	r2, #46	; 0x2e
 800b12c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	613a      	str	r2, [r7, #16]
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	4413      	add	r3, r2
 800b138:	7bfa      	ldrb	r2, [r7, #15]
 800b13a:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	2b0a      	cmp	r3, #10
 800b140:	d9da      	bls.n	800b0f8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	4413      	add	r3, r2
 800b148:	3309      	adds	r3, #9
 800b14a:	2200      	movs	r2, #0
 800b14c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a1b      	ldr	r3, [r3, #32]
 800b152:	7ada      	ldrb	r2, [r3, #11]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a1b      	ldr	r3, [r3, #32]
 800b15c:	331c      	adds	r3, #28
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe fec0 	bl	8009ee4 <ld_dword>
 800b164:	4602      	mov	r2, r0
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	3316      	adds	r3, #22
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe feb7 	bl	8009ee4 <ld_dword>
 800b176:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	80da      	strh	r2, [r3, #6]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	0c1b      	lsrs	r3, r3, #16
 800b184:	b29a      	uxth	r2, r3
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	809a      	strh	r2, [r3, #4]
 800b18a:	e000      	b.n	800b18e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b18c:	bf00      	nop
}
 800b18e:	3718      	adds	r7, #24
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b088      	sub	sp, #32
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	60fb      	str	r3, [r7, #12]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	3324      	adds	r3, #36	; 0x24
 800b1a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b1aa:	220b      	movs	r2, #11
 800b1ac:	2120      	movs	r1, #32
 800b1ae:	68b8      	ldr	r0, [r7, #8]
 800b1b0:	f7fe ff23 	bl	8009ffa <mem_set>
	si = i = 0; ni = 8;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	613b      	str	r3, [r7, #16]
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	61fb      	str	r3, [r7, #28]
 800b1bc:	2308      	movs	r3, #8
 800b1be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	1c5a      	adds	r2, r3, #1
 800b1c4:	61fa      	str	r2, [r7, #28]
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b1ce:	7efb      	ldrb	r3, [r7, #27]
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	d94e      	bls.n	800b272 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b1d4:	7efb      	ldrb	r3, [r7, #27]
 800b1d6:	2b2f      	cmp	r3, #47	; 0x2f
 800b1d8:	d006      	beq.n	800b1e8 <create_name+0x54>
 800b1da:	7efb      	ldrb	r3, [r7, #27]
 800b1dc:	2b5c      	cmp	r3, #92	; 0x5c
 800b1de:	d110      	bne.n	800b202 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b1e0:	e002      	b.n	800b1e8 <create_name+0x54>
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	61fb      	str	r3, [r7, #28]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	2b2f      	cmp	r3, #47	; 0x2f
 800b1f2:	d0f6      	beq.n	800b1e2 <create_name+0x4e>
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	2b5c      	cmp	r3, #92	; 0x5c
 800b1fe:	d0f0      	beq.n	800b1e2 <create_name+0x4e>
			break;
 800b200:	e038      	b.n	800b274 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b202:	7efb      	ldrb	r3, [r7, #27]
 800b204:	2b2e      	cmp	r3, #46	; 0x2e
 800b206:	d003      	beq.n	800b210 <create_name+0x7c>
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d30c      	bcc.n	800b22a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	2b0b      	cmp	r3, #11
 800b214:	d002      	beq.n	800b21c <create_name+0x88>
 800b216:	7efb      	ldrb	r3, [r7, #27]
 800b218:	2b2e      	cmp	r3, #46	; 0x2e
 800b21a:	d001      	beq.n	800b220 <create_name+0x8c>
 800b21c:	2306      	movs	r3, #6
 800b21e:	e044      	b.n	800b2aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b220:	2308      	movs	r3, #8
 800b222:	613b      	str	r3, [r7, #16]
 800b224:	230b      	movs	r3, #11
 800b226:	617b      	str	r3, [r7, #20]
			continue;
 800b228:	e022      	b.n	800b270 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b22a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	da04      	bge.n	800b23c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b232:	7efb      	ldrb	r3, [r7, #27]
 800b234:	3b80      	subs	r3, #128	; 0x80
 800b236:	4a1f      	ldr	r2, [pc, #124]	; (800b2b4 <create_name+0x120>)
 800b238:	5cd3      	ldrb	r3, [r2, r3]
 800b23a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b23c:	7efb      	ldrb	r3, [r7, #27]
 800b23e:	4619      	mov	r1, r3
 800b240:	481d      	ldr	r0, [pc, #116]	; (800b2b8 <create_name+0x124>)
 800b242:	f7fe ff1c 	bl	800a07e <chk_chr>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <create_name+0xbc>
 800b24c:	2306      	movs	r3, #6
 800b24e:	e02c      	b.n	800b2aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b250:	7efb      	ldrb	r3, [r7, #27]
 800b252:	2b60      	cmp	r3, #96	; 0x60
 800b254:	d905      	bls.n	800b262 <create_name+0xce>
 800b256:	7efb      	ldrb	r3, [r7, #27]
 800b258:	2b7a      	cmp	r3, #122	; 0x7a
 800b25a:	d802      	bhi.n	800b262 <create_name+0xce>
 800b25c:	7efb      	ldrb	r3, [r7, #27]
 800b25e:	3b20      	subs	r3, #32
 800b260:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	613a      	str	r2, [r7, #16]
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	4413      	add	r3, r2
 800b26c:	7efa      	ldrb	r2, [r7, #27]
 800b26e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b270:	e7a6      	b.n	800b1c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b272:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	441a      	add	r2, r3
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d101      	bne.n	800b288 <create_name+0xf4>
 800b284:	2306      	movs	r3, #6
 800b286:	e010      	b.n	800b2aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	2be5      	cmp	r3, #229	; 0xe5
 800b28e:	d102      	bne.n	800b296 <create_name+0x102>
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	2205      	movs	r2, #5
 800b294:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b296:	7efb      	ldrb	r3, [r7, #27]
 800b298:	2b20      	cmp	r3, #32
 800b29a:	d801      	bhi.n	800b2a0 <create_name+0x10c>
 800b29c:	2204      	movs	r2, #4
 800b29e:	e000      	b.n	800b2a2 <create_name+0x10e>
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	330b      	adds	r3, #11
 800b2a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b2a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3720      	adds	r7, #32
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	080149b8 	.word	0x080149b8
 800b2b8:	0801277c 	.word	0x0801277c

0800b2bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b2d0:	e002      	b.n	800b2d8 <follow_path+0x1c>
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	603b      	str	r3, [r7, #0]
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	2b2f      	cmp	r3, #47	; 0x2f
 800b2de:	d0f8      	beq.n	800b2d2 <follow_path+0x16>
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2b5c      	cmp	r3, #92	; 0x5c
 800b2e6:	d0f4      	beq.n	800b2d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	2b1f      	cmp	r3, #31
 800b2f4:	d80a      	bhi.n	800b30c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2280      	movs	r2, #128	; 0x80
 800b2fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b2fe:	2100      	movs	r1, #0
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7ff fc3e 	bl	800ab82 <dir_sdi>
 800b306:	4603      	mov	r3, r0
 800b308:	75fb      	strb	r3, [r7, #23]
 800b30a:	e043      	b.n	800b394 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b30c:	463b      	mov	r3, r7
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7ff ff3f 	bl	800b194 <create_name>
 800b316:	4603      	mov	r3, r0
 800b318:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b31a:	7dfb      	ldrb	r3, [r7, #23]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d134      	bne.n	800b38a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7ff fe51 	bl	800afc8 <dir_find>
 800b326:	4603      	mov	r3, r0
 800b328:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b330:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00a      	beq.n	800b34e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	2b04      	cmp	r3, #4
 800b33c:	d127      	bne.n	800b38e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b33e:	7afb      	ldrb	r3, [r7, #11]
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b00      	cmp	r3, #0
 800b346:	d122      	bne.n	800b38e <follow_path+0xd2>
 800b348:	2305      	movs	r3, #5
 800b34a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b34c:	e01f      	b.n	800b38e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b34e:	7afb      	ldrb	r3, [r7, #11]
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b00      	cmp	r3, #0
 800b356:	d11c      	bne.n	800b392 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	799b      	ldrb	r3, [r3, #6]
 800b35c:	f003 0310 	and.w	r3, r3, #16
 800b360:	2b00      	cmp	r3, #0
 800b362:	d102      	bne.n	800b36a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b364:	2305      	movs	r3, #5
 800b366:	75fb      	strb	r3, [r7, #23]
 800b368:	e014      	b.n	800b394 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b378:	4413      	add	r3, r2
 800b37a:	4619      	mov	r1, r3
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f7ff fd87 	bl	800ae90 <ld_clust>
 800b382:	4602      	mov	r2, r0
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b388:	e7c0      	b.n	800b30c <follow_path+0x50>
			if (res != FR_OK) break;
 800b38a:	bf00      	nop
 800b38c:	e002      	b.n	800b394 <follow_path+0xd8>
				break;
 800b38e:	bf00      	nop
 800b390:	e000      	b.n	800b394 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b392:	bf00      	nop
			}
		}
	}

	return res;
 800b394:	7dfb      	ldrb	r3, [r7, #23]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3718      	adds	r7, #24
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
	...

0800b3a0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b089      	sub	sp, #36	; 0x24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b3a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3ac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d06e      	beq.n	800b494 <get_ldnumber+0xf4>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	61bb      	str	r3, [r7, #24]
 800b3bc:	e002      	b.n	800b3c4 <get_ldnumber+0x24>
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	61bb      	str	r3, [r7, #24]
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	2b20      	cmp	r3, #32
 800b3ca:	d903      	bls.n	800b3d4 <get_ldnumber+0x34>
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	2b3a      	cmp	r3, #58	; 0x3a
 800b3d2:	d1f4      	bne.n	800b3be <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	2b3a      	cmp	r3, #58	; 0x3a
 800b3da:	d159      	bne.n	800b490 <get_ldnumber+0xf0>
			tp = *path;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	61fb      	str	r3, [r7, #28]
			i = *tp++ - '0';
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	1c5a      	adds	r2, r3, #1
 800b3e6:	61fa      	str	r2, [r7, #28]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	3b30      	subs	r3, #48	; 0x30
 800b3ec:	617b      	str	r3, [r7, #20]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2b09      	cmp	r3, #9
 800b3f2:	d80f      	bhi.n	800b414 <get_ldnumber+0x74>
 800b3f4:	69fa      	ldr	r2, [r7, #28]
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d10b      	bne.n	800b414 <get_ldnumber+0x74>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	2b07      	cmp	r3, #7
 800b400:	d844      	bhi.n	800b48c <get_ldnumber+0xec>
					vol = (int)i;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	3301      	adds	r3, #1
 800b40a:	61bb      	str	r3, [r7, #24]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	69ba      	ldr	r2, [r7, #24]
 800b410:	601a      	str	r2, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b412:	e03b      	b.n	800b48c <get_ldnumber+0xec>
				}
			}
#if _STR_VOLUME_ID
			 else {	/* No numeric drive number, find string drive id */
				i = 0; tt++;
 800b414:	2300      	movs	r3, #0
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	3301      	adds	r3, #1
 800b41c:	61bb      	str	r3, [r7, #24]
				do {
					sp = volid[i]; tp = *path;
 800b41e:	4a21      	ldr	r2, [pc, #132]	; (800b4a4 <get_ldnumber+0x104>)
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b426:	60fb      	str	r3, [r7, #12]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	61fb      	str	r3, [r7, #28]
					do {	/* Compare a string drive id with path name */
						c = *sp++; tc = *tp++;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	1c5a      	adds	r2, r3, #1
 800b432:	60fa      	str	r2, [r7, #12]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	72bb      	strb	r3, [r7, #10]
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	61fa      	str	r2, [r7, #28]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	72fb      	strb	r3, [r7, #11]
						if (IsLower(tc)) tc -= 0x20;
 800b442:	7afb      	ldrb	r3, [r7, #11]
 800b444:	2b60      	cmp	r3, #96	; 0x60
 800b446:	d905      	bls.n	800b454 <get_ldnumber+0xb4>
 800b448:	7afb      	ldrb	r3, [r7, #11]
 800b44a:	2b7a      	cmp	r3, #122	; 0x7a
 800b44c:	d802      	bhi.n	800b454 <get_ldnumber+0xb4>
 800b44e:	7afb      	ldrb	r3, [r7, #11]
 800b450:	3b20      	subs	r3, #32
 800b452:	72fb      	strb	r3, [r7, #11]
					} while (c && (TCHAR)c == tc);
 800b454:	7abb      	ldrb	r3, [r7, #10]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d003      	beq.n	800b462 <get_ldnumber+0xc2>
 800b45a:	7aba      	ldrb	r2, [r7, #10]
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d0e5      	beq.n	800b42e <get_ldnumber+0x8e>
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
 800b462:	7abb      	ldrb	r3, [r7, #10]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d103      	bne.n	800b470 <get_ldnumber+0xd0>
 800b468:	69fa      	ldr	r2, [r7, #28]
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d005      	beq.n	800b47c <get_ldnumber+0xdc>
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	3301      	adds	r3, #1
 800b474:	617b      	str	r3, [r7, #20]
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	2b07      	cmp	r3, #7
 800b47a:	d9d0      	bls.n	800b41e <get_ldnumber+0x7e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	2b07      	cmp	r3, #7
 800b480:	d804      	bhi.n	800b48c <get_ldnumber+0xec>
					vol = (int)i;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	613b      	str	r3, [r7, #16]
					*path = tt;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	69ba      	ldr	r2, [r7, #24]
 800b48a:	601a      	str	r2, [r3, #0]
				}
			}
#endif
			return vol;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	e002      	b.n	800b496 <get_ldnumber+0xf6>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b490:	2300      	movs	r3, #0
 800b492:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b494:	693b      	ldr	r3, [r7, #16]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3724      	adds	r7, #36	; 0x24
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	08014a38 	.word	0x08014a38

0800b4a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	70da      	strb	r2, [r3, #3]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4be:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7fe ffd8 	bl	800a478 <move_window>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <check_fs+0x2a>
 800b4ce:	2304      	movs	r3, #4
 800b4d0:	e038      	b.n	800b544 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	3334      	adds	r3, #52	; 0x34
 800b4d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fe fcea 	bl	8009eb4 <ld_word>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d001      	beq.n	800b4f0 <check_fs+0x48>
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e029      	b.n	800b544 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b4f6:	2be9      	cmp	r3, #233	; 0xe9
 800b4f8:	d009      	beq.n	800b50e <check_fs+0x66>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b500:	2beb      	cmp	r3, #235	; 0xeb
 800b502:	d11e      	bne.n	800b542 <check_fs+0x9a>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b50a:	2b90      	cmp	r3, #144	; 0x90
 800b50c:	d119      	bne.n	800b542 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	3334      	adds	r3, #52	; 0x34
 800b512:	3336      	adds	r3, #54	; 0x36
 800b514:	4618      	mov	r0, r3
 800b516:	f7fe fce5 	bl	8009ee4 <ld_dword>
 800b51a:	4603      	mov	r3, r0
 800b51c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b520:	4a0a      	ldr	r2, [pc, #40]	; (800b54c <check_fs+0xa4>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d101      	bne.n	800b52a <check_fs+0x82>
 800b526:	2300      	movs	r3, #0
 800b528:	e00c      	b.n	800b544 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	3334      	adds	r3, #52	; 0x34
 800b52e:	3352      	adds	r3, #82	; 0x52
 800b530:	4618      	mov	r0, r3
 800b532:	f7fe fcd7 	bl	8009ee4 <ld_dword>
 800b536:	4603      	mov	r3, r0
 800b538:	4a05      	ldr	r2, [pc, #20]	; (800b550 <check_fs+0xa8>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d101      	bne.n	800b542 <check_fs+0x9a>
 800b53e:	2300      	movs	r3, #0
 800b540:	e000      	b.n	800b544 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b542:	2302      	movs	r3, #2
}
 800b544:	4618      	mov	r0, r3
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	00544146 	.word	0x00544146
 800b550:	33544146 	.word	0x33544146

0800b554 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b096      	sub	sp, #88	; 0x58
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	4613      	mov	r3, r2
 800b560:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2200      	movs	r2, #0
 800b566:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f7ff ff19 	bl	800b3a0 <get_ldnumber>
 800b56e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b572:	2b00      	cmp	r3, #0
 800b574:	da01      	bge.n	800b57a <find_volume+0x26>
 800b576:	230b      	movs	r3, #11
 800b578:	e235      	b.n	800b9e6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b57a:	4aa5      	ldr	r2, [pc, #660]	; (800b810 <find_volume+0x2bc>)
 800b57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b582:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b586:	2b00      	cmp	r3, #0
 800b588:	d101      	bne.n	800b58e <find_volume+0x3a>
 800b58a:	230c      	movs	r3, #12
 800b58c:	e22b      	b.n	800b9e6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800b58e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b590:	f7fe fd90 	bl	800a0b4 <lock_fs>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <find_volume+0x4a>
 800b59a:	230f      	movs	r3, #15
 800b59c:	e223      	b.n	800b9e6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b5a4:	79fb      	ldrb	r3, [r7, #7]
 800b5a6:	f023 0301 	bic.w	r3, r3, #1
 800b5aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d01a      	beq.n	800b5ea <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b6:	785b      	ldrb	r3, [r3, #1]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fe fbd9 	bl	8009d70 <disk_status>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b5c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10c      	bne.n	800b5ea <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b5d0:	79fb      	ldrb	r3, [r7, #7]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d007      	beq.n	800b5e6 <find_volume+0x92>
 800b5d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b5da:	f003 0304 	and.w	r3, r3, #4
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b5e2:	230a      	movs	r3, #10
 800b5e4:	e1ff      	b.n	800b9e6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e1fd      	b.n	800b9e6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f2:	b2da      	uxtb	r2, r3
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fa:	785b      	ldrb	r3, [r3, #1]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fe fbd3 	bl	8009da8 <disk_initialize>
 800b602:	4603      	mov	r3, r0
 800b604:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b60c:	f003 0301 	and.w	r3, r3, #1
 800b610:	2b00      	cmp	r3, #0
 800b612:	d001      	beq.n	800b618 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b614:	2303      	movs	r3, #3
 800b616:	e1e6      	b.n	800b9e6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b618:	79fb      	ldrb	r3, [r7, #7]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d007      	beq.n	800b62e <find_volume+0xda>
 800b61e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b622:	f003 0304 	and.w	r3, r3, #4
 800b626:	2b00      	cmp	r3, #0
 800b628:	d001      	beq.n	800b62e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b62a:	230a      	movs	r3, #10
 800b62c:	e1db      	b.n	800b9e6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b632:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b634:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b636:	f7ff ff37 	bl	800b4a8 <check_fs>
 800b63a:	4603      	mov	r3, r0
 800b63c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b640:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b644:	2b02      	cmp	r3, #2
 800b646:	d149      	bne.n	800b6dc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b648:	2300      	movs	r3, #0
 800b64a:	643b      	str	r3, [r7, #64]	; 0x40
 800b64c:	e01e      	b.n	800b68c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b650:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b656:	011b      	lsls	r3, r3, #4
 800b658:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b65c:	4413      	add	r3, r2
 800b65e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b662:	3304      	adds	r3, #4
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d006      	beq.n	800b678 <find_volume+0x124>
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	3308      	adds	r3, #8
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fe fc38 	bl	8009ee4 <ld_dword>
 800b674:	4602      	mov	r2, r0
 800b676:	e000      	b.n	800b67a <find_volume+0x126>
 800b678:	2200      	movs	r2, #0
 800b67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	3358      	adds	r3, #88	; 0x58
 800b680:	443b      	add	r3, r7
 800b682:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b688:	3301      	adds	r3, #1
 800b68a:	643b      	str	r3, [r7, #64]	; 0x40
 800b68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b68e:	2b03      	cmp	r3, #3
 800b690:	d9dd      	bls.n	800b64e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b692:	2300      	movs	r3, #0
 800b694:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d002      	beq.n	800b6a2 <find_volume+0x14e>
 800b69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	3358      	adds	r3, #88	; 0x58
 800b6a8:	443b      	add	r3, r7
 800b6aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b6ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b6b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d005      	beq.n	800b6c2 <find_volume+0x16e>
 800b6b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6ba:	f7ff fef5 	bl	800b4a8 <check_fs>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	e000      	b.n	800b6c4 <find_volume+0x170>
 800b6c2:	2303      	movs	r3, #3
 800b6c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b6c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d905      	bls.n	800b6dc <find_volume+0x188>
 800b6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	643b      	str	r3, [r7, #64]	; 0x40
 800b6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	d9e2      	bls.n	800b6a2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b6dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6e0:	2b04      	cmp	r3, #4
 800b6e2:	d101      	bne.n	800b6e8 <find_volume+0x194>
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e17e      	b.n	800b9e6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b6e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d901      	bls.n	800b6f4 <find_volume+0x1a0>
 800b6f0:	230d      	movs	r3, #13
 800b6f2:	e178      	b.n	800b9e6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f6:	3334      	adds	r3, #52	; 0x34
 800b6f8:	330b      	adds	r3, #11
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fe fbda 	bl	8009eb4 <ld_word>
 800b700:	4603      	mov	r3, r0
 800b702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b706:	d001      	beq.n	800b70c <find_volume+0x1b8>
 800b708:	230d      	movs	r3, #13
 800b70a:	e16c      	b.n	800b9e6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70e:	3334      	adds	r3, #52	; 0x34
 800b710:	3316      	adds	r3, #22
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe fbce 	bl	8009eb4 <ld_word>
 800b718:	4603      	mov	r3, r0
 800b71a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b71c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <find_volume+0x1dc>
 800b722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b724:	3334      	adds	r3, #52	; 0x34
 800b726:	3324      	adds	r3, #36	; 0x24
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe fbdb 	bl	8009ee4 <ld_dword>
 800b72e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b734:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b742:	789b      	ldrb	r3, [r3, #2]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d005      	beq.n	800b754 <find_volume+0x200>
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	789b      	ldrb	r3, [r3, #2]
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d001      	beq.n	800b754 <find_volume+0x200>
 800b750:	230d      	movs	r3, #13
 800b752:	e148      	b.n	800b9e6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b756:	789b      	ldrb	r3, [r3, #2]
 800b758:	461a      	mov	r2, r3
 800b75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b75c:	fb02 f303 	mul.w	r3, r2, r3
 800b760:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b768:	b29a      	uxth	r2, r3
 800b76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	895b      	ldrh	r3, [r3, #10]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d008      	beq.n	800b788 <find_volume+0x234>
 800b776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b778:	895b      	ldrh	r3, [r3, #10]
 800b77a:	461a      	mov	r2, r3
 800b77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77e:	895b      	ldrh	r3, [r3, #10]
 800b780:	3b01      	subs	r3, #1
 800b782:	4013      	ands	r3, r2
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <find_volume+0x238>
 800b788:	230d      	movs	r3, #13
 800b78a:	e12c      	b.n	800b9e6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78e:	3334      	adds	r3, #52	; 0x34
 800b790:	3311      	adds	r3, #17
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe fb8e 	bl	8009eb4 <ld_word>
 800b798:	4603      	mov	r3, r0
 800b79a:	461a      	mov	r2, r3
 800b79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	891b      	ldrh	r3, [r3, #8]
 800b7a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d001      	beq.n	800b7b2 <find_volume+0x25e>
 800b7ae:	230d      	movs	r3, #13
 800b7b0:	e119      	b.n	800b9e6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b4:	3334      	adds	r3, #52	; 0x34
 800b7b6:	3313      	adds	r3, #19
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fe fb7b 	bl	8009eb4 <ld_word>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b7c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d106      	bne.n	800b7d6 <find_volume+0x282>
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ca:	3334      	adds	r3, #52	; 0x34
 800b7cc:	3320      	adds	r3, #32
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fe fb88 	bl	8009ee4 <ld_dword>
 800b7d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d8:	3334      	adds	r3, #52	; 0x34
 800b7da:	330e      	adds	r3, #14
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fe fb69 	bl	8009eb4 <ld_word>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b7e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <find_volume+0x29c>
 800b7ec:	230d      	movs	r3, #13
 800b7ee:	e0fa      	b.n	800b9e6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b7f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b7f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f4:	4413      	add	r3, r2
 800b7f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7f8:	8912      	ldrh	r2, [r2, #8]
 800b7fa:	0992      	lsrs	r2, r2, #6
 800b7fc:	b292      	uxth	r2, r2
 800b7fe:	4413      	add	r3, r2
 800b800:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	429a      	cmp	r2, r3
 800b808:	d204      	bcs.n	800b814 <find_volume+0x2c0>
 800b80a:	230d      	movs	r3, #13
 800b80c:	e0eb      	b.n	800b9e6 <find_volume+0x492>
 800b80e:	bf00      	nop
 800b810:	20003db4 	.word	0x20003db4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b81c:	8952      	ldrh	r2, [r2, #10]
 800b81e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b822:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	2b00      	cmp	r3, #0
 800b828:	d101      	bne.n	800b82e <find_volume+0x2da>
 800b82a:	230d      	movs	r3, #13
 800b82c:	e0db      	b.n	800b9e6 <find_volume+0x492>
		fmt = FS_FAT32;
 800b82e:	2303      	movs	r3, #3
 800b830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d802      	bhi.n	800b844 <find_volume+0x2f0>
 800b83e:	2302      	movs	r3, #2
 800b840:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d802      	bhi.n	800b854 <find_volume+0x300>
 800b84e:	2301      	movs	r3, #1
 800b850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	1c9a      	adds	r2, r3, #2
 800b858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b860:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b862:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b866:	441a      	add	r2, r3
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b86c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	441a      	add	r2, r3
 800b872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b874:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	d11e      	bne.n	800b8bc <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b880:	3334      	adds	r3, #52	; 0x34
 800b882:	332a      	adds	r3, #42	; 0x2a
 800b884:	4618      	mov	r0, r3
 800b886:	f7fe fb15 	bl	8009eb4 <ld_word>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <find_volume+0x340>
 800b890:	230d      	movs	r3, #13
 800b892:	e0a8      	b.n	800b9e6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	891b      	ldrh	r3, [r3, #8]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <find_volume+0x34c>
 800b89c:	230d      	movs	r3, #13
 800b89e:	e0a2      	b.n	800b9e6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a2:	3334      	adds	r3, #52	; 0x34
 800b8a4:	332c      	adds	r3, #44	; 0x2c
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fe fb1c 	bl	8009ee4 <ld_dword>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	647b      	str	r3, [r7, #68]	; 0x44
 800b8ba:	e01f      	b.n	800b8fc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8be:	891b      	ldrh	r3, [r3, #8]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d101      	bne.n	800b8c8 <find_volume+0x374>
 800b8c4:	230d      	movs	r3, #13
 800b8c6:	e08e      	b.n	800b9e6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ce:	441a      	add	r2, r3
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b8d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d103      	bne.n	800b8e4 <find_volume+0x390>
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	e00a      	b.n	800b8fa <find_volume+0x3a6>
 800b8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e6:	699a      	ldr	r2, [r3, #24]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	005b      	lsls	r3, r3, #1
 800b8ec:	4413      	add	r3, r2
 800b8ee:	085a      	lsrs	r2, r3, #1
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b8fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fe:	69da      	ldr	r2, [r3, #28]
 800b900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b902:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b906:	0adb      	lsrs	r3, r3, #11
 800b908:	429a      	cmp	r2, r3
 800b90a:	d201      	bcs.n	800b910 <find_volume+0x3bc>
 800b90c:	230d      	movs	r3, #13
 800b90e:	e06a      	b.n	800b9e6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b916:	615a      	str	r2, [r3, #20]
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	695a      	ldr	r2, [r3, #20]
 800b91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	2280      	movs	r2, #128	; 0x80
 800b924:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b926:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d149      	bne.n	800b9c2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b930:	3334      	adds	r3, #52	; 0x34
 800b932:	3330      	adds	r3, #48	; 0x30
 800b934:	4618      	mov	r0, r3
 800b936:	f7fe fabd 	bl	8009eb4 <ld_word>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d140      	bne.n	800b9c2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b942:	3301      	adds	r3, #1
 800b944:	4619      	mov	r1, r3
 800b946:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b948:	f7fe fd96 	bl	800a478 <move_window>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d137      	bne.n	800b9c2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	2200      	movs	r2, #0
 800b956:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95a:	3334      	adds	r3, #52	; 0x34
 800b95c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b960:	4618      	mov	r0, r3
 800b962:	f7fe faa7 	bl	8009eb4 <ld_word>
 800b966:	4603      	mov	r3, r0
 800b968:	461a      	mov	r2, r3
 800b96a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b96e:	429a      	cmp	r2, r3
 800b970:	d127      	bne.n	800b9c2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b974:	3334      	adds	r3, #52	; 0x34
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe fab4 	bl	8009ee4 <ld_dword>
 800b97c:	4603      	mov	r3, r0
 800b97e:	4a1c      	ldr	r2, [pc, #112]	; (800b9f0 <find_volume+0x49c>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d11e      	bne.n	800b9c2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b986:	3334      	adds	r3, #52	; 0x34
 800b988:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fe faa9 	bl	8009ee4 <ld_dword>
 800b992:	4603      	mov	r3, r0
 800b994:	4a17      	ldr	r2, [pc, #92]	; (800b9f4 <find_volume+0x4a0>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d113      	bne.n	800b9c2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99c:	3334      	adds	r3, #52	; 0x34
 800b99e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fe fa9e 	bl	8009ee4 <ld_dword>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b0:	3334      	adds	r3, #52	; 0x34
 800b9b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fe fa94 	bl	8009ee4 <ld_dword>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b9c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b9ca:	4b0b      	ldr	r3, [pc, #44]	; (800b9f8 <find_volume+0x4a4>)
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	4b09      	ldr	r3, [pc, #36]	; (800b9f8 <find_volume+0x4a4>)
 800b9d4:	801a      	strh	r2, [r3, #0]
 800b9d6:	4b08      	ldr	r3, [pc, #32]	; (800b9f8 <find_volume+0x4a4>)
 800b9d8:	881a      	ldrh	r2, [r3, #0]
 800b9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9dc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b9de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b9e0:	f7fe fce2 	bl	800a3a8 <clear_lock>
#endif
	return FR_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3758      	adds	r7, #88	; 0x58
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	41615252 	.word	0x41615252
 800b9f4:	61417272 	.word	0x61417272
 800b9f8:	20003dd4 	.word	0x20003dd4

0800b9fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ba06:	2309      	movs	r3, #9
 800ba08:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d02e      	beq.n	800ba6e <validate+0x72>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d02a      	beq.n	800ba6e <validate+0x72>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d025      	beq.n	800ba6e <validate+0x72>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	889a      	ldrh	r2, [r3, #4]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	88db      	ldrh	r3, [r3, #6]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d11e      	bne.n	800ba6e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fe fb3d 	bl	800a0b4 <lock_fs>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d014      	beq.n	800ba6a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	785b      	ldrb	r3, [r3, #1]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe f992 	bl	8009d70 <disk_status>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	f003 0301 	and.w	r3, r3, #1
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d102      	bne.n	800ba5c <validate+0x60>
				res = FR_OK;
 800ba56:	2300      	movs	r3, #0
 800ba58:	73fb      	strb	r3, [r7, #15]
 800ba5a:	e008      	b.n	800ba6e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2100      	movs	r1, #0
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fe fb3c 	bl	800a0e0 <unlock_fs>
 800ba68:	e001      	b.n	800ba6e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ba6a:	230f      	movs	r3, #15
 800ba6c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <validate+0x7e>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	e000      	b.n	800ba7c <validate+0x80>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	6013      	str	r3, [r2, #0]
	return res;
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
	...

0800ba8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	4613      	mov	r3, r2
 800ba98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ba9e:	f107 0310 	add.w	r3, r7, #16
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff fc7c 	bl	800b3a0 <get_ldnumber>
 800baa8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800baaa:	69fb      	ldr	r3, [r7, #28]
 800baac:	2b00      	cmp	r3, #0
 800baae:	da01      	bge.n	800bab4 <f_mount+0x28>
 800bab0:	230b      	movs	r3, #11
 800bab2:	e048      	b.n	800bb46 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bab4:	4a26      	ldr	r2, [pc, #152]	; (800bb50 <f_mount+0xc4>)
 800bab6:	69fb      	ldr	r3, [r7, #28]
 800bab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800babc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00f      	beq.n	800bae4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bac4:	69b8      	ldr	r0, [r7, #24]
 800bac6:	f7fe fc6f 	bl	800a3a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	4618      	mov	r0, r3
 800bad0:	f001 fc0a 	bl	800d2e8 <ff_del_syncobj>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <f_mount+0x52>
 800bada:	2302      	movs	r3, #2
 800badc:	e033      	b.n	800bb46 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	2200      	movs	r2, #0
 800bae2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00f      	beq.n	800bb0a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	330c      	adds	r3, #12
 800baf8:	4619      	mov	r1, r3
 800bafa:	4610      	mov	r0, r2
 800bafc:	f001 fbdb 	bl	800d2b6 <ff_cre_syncobj>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d101      	bne.n	800bb0a <f_mount+0x7e>
 800bb06:	2302      	movs	r3, #2
 800bb08:	e01d      	b.n	800bb46 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	4910      	ldr	r1, [pc, #64]	; (800bb50 <f_mount+0xc4>)
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d002      	beq.n	800bb20 <f_mount+0x94>
 800bb1a:	79fb      	ldrb	r3, [r7, #7]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d001      	beq.n	800bb24 <f_mount+0x98>
 800bb20:	2300      	movs	r3, #0
 800bb22:	e010      	b.n	800bb46 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bb24:	f107 010c 	add.w	r1, r7, #12
 800bb28:	f107 0308 	add.w	r3, r7, #8
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff fd10 	bl	800b554 <find_volume>
 800bb34:	4603      	mov	r3, r0
 800bb36:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	7dfa      	ldrb	r2, [r7, #23]
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fe face 	bl	800a0e0 <unlock_fs>
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3720      	adds	r7, #32
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	20003db4 	.word	0x20003db4

0800bb54 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b098      	sub	sp, #96	; 0x60
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <f_open+0x18>
 800bb68:	2309      	movs	r3, #9
 800bb6a:	e1b4      	b.n	800bed6 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bb6c:	79fb      	ldrb	r3, [r7, #7]
 800bb6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb72:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bb74:	79fa      	ldrb	r2, [r7, #7]
 800bb76:	f107 0110 	add.w	r1, r7, #16
 800bb7a:	f107 0308 	add.w	r3, r7, #8
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7ff fce8 	bl	800b554 <find_volume>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bb8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f040 8191 	bne.w	800beb6 <f_open+0x362>
		dj.obj.fs = fs;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	f107 0314 	add.w	r3, r7, #20
 800bb9e:	4611      	mov	r1, r2
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7ff fb8b 	bl	800b2bc <follow_path>
 800bba6:	4603      	mov	r3, r0
 800bba8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bbac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d11a      	bne.n	800bbea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bbb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bbb8:	b25b      	sxtb	r3, r3
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	da03      	bge.n	800bbc6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bbbe:	2306      	movs	r3, #6
 800bbc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bbc4:	e011      	b.n	800bbea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bbc6:	79fb      	ldrb	r3, [r7, #7]
 800bbc8:	f023 0301 	bic.w	r3, r3, #1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	bf14      	ite	ne
 800bbd0:	2301      	movne	r3, #1
 800bbd2:	2300      	moveq	r3, #0
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	f107 0314 	add.w	r3, r7, #20
 800bbdc:	4611      	mov	r1, r2
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fe fa9a 	bl	800a118 <chk_lock>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bbea:	79fb      	ldrb	r3, [r7, #7]
 800bbec:	f003 031c 	and.w	r3, r3, #28
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d07f      	beq.n	800bcf4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bbf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d017      	beq.n	800bc2c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bbfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc00:	2b04      	cmp	r3, #4
 800bc02:	d10e      	bne.n	800bc22 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bc04:	f7fe fae4 	bl	800a1d0 <enq_lock>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d006      	beq.n	800bc1c <f_open+0xc8>
 800bc0e:	f107 0314 	add.w	r3, r7, #20
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7ff fa2d 	bl	800b072 <dir_register>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	e000      	b.n	800bc1e <f_open+0xca>
 800bc1c:	2312      	movs	r3, #18
 800bc1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bc22:	79fb      	ldrb	r3, [r7, #7]
 800bc24:	f043 0308 	orr.w	r3, r3, #8
 800bc28:	71fb      	strb	r3, [r7, #7]
 800bc2a:	e010      	b.n	800bc4e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bc2c:	7ebb      	ldrb	r3, [r7, #26]
 800bc2e:	f003 0311 	and.w	r3, r3, #17
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <f_open+0xea>
					res = FR_DENIED;
 800bc36:	2307      	movs	r3, #7
 800bc38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bc3c:	e007      	b.n	800bc4e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bc3e:	79fb      	ldrb	r3, [r7, #7]
 800bc40:	f003 0304 	and.w	r3, r3, #4
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d002      	beq.n	800bc4e <f_open+0xfa>
 800bc48:	2308      	movs	r3, #8
 800bc4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bc4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d168      	bne.n	800bd28 <f_open+0x1d4>
 800bc56:	79fb      	ldrb	r3, [r7, #7]
 800bc58:	f003 0308 	and.w	r3, r3, #8
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d063      	beq.n	800bd28 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bc60:	f7fd ff7e 	bl	8009b60 <get_fattime>
 800bc64:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bc66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc68:	330e      	adds	r3, #14
 800bc6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7fe f977 	bl	8009f60 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc74:	3316      	adds	r3, #22
 800bc76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7fe f971 	bl	8009f60 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc80:	330b      	adds	r3, #11
 800bc82:	2220      	movs	r2, #32
 800bc84:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7ff f8ff 	bl	800ae90 <ld_clust>
 800bc92:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bc98:	2200      	movs	r2, #0
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7ff f917 	bl	800aece <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca2:	331c      	adds	r3, #28
 800bca4:	2100      	movs	r1, #0
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fe f95a 	bl	8009f60 <st_dword>
					fs->wflag = 1;
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bcb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d037      	beq.n	800bd28 <f_open+0x1d4>
						dw = fs->winsect;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcbc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bcbe:	f107 0314 	add.w	r3, r7, #20
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe fe2a 	bl	800a920 <remove_chain>
 800bccc:	4603      	mov	r3, r0
 800bcce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800bcd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d126      	bne.n	800bd28 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe fbca 	bl	800a478 <move_window>
 800bce4:	4603      	mov	r3, r0
 800bce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bcee:	3a01      	subs	r2, #1
 800bcf0:	611a      	str	r2, [r3, #16]
 800bcf2:	e019      	b.n	800bd28 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bcf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d115      	bne.n	800bd28 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bcfc:	7ebb      	ldrb	r3, [r7, #26]
 800bcfe:	f003 0310 	and.w	r3, r3, #16
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d003      	beq.n	800bd0e <f_open+0x1ba>
					res = FR_NO_FILE;
 800bd06:	2304      	movs	r3, #4
 800bd08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bd0c:	e00c      	b.n	800bd28 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bd0e:	79fb      	ldrb	r3, [r7, #7]
 800bd10:	f003 0302 	and.w	r3, r3, #2
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d007      	beq.n	800bd28 <f_open+0x1d4>
 800bd18:	7ebb      	ldrb	r3, [r7, #26]
 800bd1a:	f003 0301 	and.w	r3, r3, #1
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d002      	beq.n	800bd28 <f_open+0x1d4>
						res = FR_DENIED;
 800bd22:	2307      	movs	r3, #7
 800bd24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bd28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d128      	bne.n	800bd82 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	f003 0308 	and.w	r3, r3, #8
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd40:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bd4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bd50:	79fb      	ldrb	r3, [r7, #7]
 800bd52:	f023 0301 	bic.w	r3, r3, #1
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	bf14      	ite	ne
 800bd5a:	2301      	movne	r3, #1
 800bd5c:	2300      	moveq	r3, #0
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	461a      	mov	r2, r3
 800bd62:	f107 0314 	add.w	r3, r7, #20
 800bd66:	4611      	mov	r1, r2
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7fe fa53 	bl	800a214 <inc_lock>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d102      	bne.n	800bd82 <f_open+0x22e>
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bd82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f040 8095 	bne.w	800beb6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd90:	4611      	mov	r1, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff f87c 	bl	800ae90 <ld_clust>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda0:	331c      	adds	r3, #28
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe f89e 	bl	8009ee4 <ld_dword>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	88da      	ldrh	r2, [r3, #6]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	79fa      	ldrb	r2, [r7, #7]
 800bdc6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	3330      	adds	r3, #48	; 0x30
 800bdde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bde2:	2100      	movs	r1, #0
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fe f908 	bl	8009ffa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bdea:	79fb      	ldrb	r3, [r7, #7]
 800bdec:	f003 0320 	and.w	r3, r3, #32
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d060      	beq.n	800beb6 <f_open+0x362>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d05c      	beq.n	800beb6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	68da      	ldr	r2, [r3, #12]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	895b      	ldrh	r3, [r3, #10]
 800be08:	02db      	lsls	r3, r3, #11
 800be0a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	657b      	str	r3, [r7, #84]	; 0x54
 800be18:	e016      	b.n	800be48 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fe fbe5 	bl	800a5ee <get_fat>
 800be24:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800be26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d802      	bhi.n	800be32 <f_open+0x2de>
 800be2c:	2302      	movs	r3, #2
 800be2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800be32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be38:	d102      	bne.n	800be40 <f_open+0x2ec>
 800be3a:	2301      	movs	r3, #1
 800be3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800be40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	657b      	str	r3, [r7, #84]	; 0x54
 800be48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d103      	bne.n	800be58 <f_open+0x304>
 800be50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be54:	429a      	cmp	r2, r3
 800be56:	d8e0      	bhi.n	800be1a <f_open+0x2c6>
				}
				fp->clust = clst;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be5c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800be5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be62:	2b00      	cmp	r3, #0
 800be64:	d127      	bne.n	800beb6 <f_open+0x362>
 800be66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d022      	beq.n	800beb6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be74:	4618      	mov	r0, r3
 800be76:	f7fe fb9b 	bl	800a5b0 <clust2sect>
 800be7a:	6478      	str	r0, [r7, #68]	; 0x44
 800be7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d103      	bne.n	800be8a <f_open+0x336>
						res = FR_INT_ERR;
 800be82:	2302      	movs	r3, #2
 800be84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800be88:	e015      	b.n	800beb6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800be8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be8c:	0ada      	lsrs	r2, r3, #11
 800be8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be90:	441a      	add	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	7858      	ldrb	r0, [r3, #1]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6a1a      	ldr	r2, [r3, #32]
 800bea4:	2301      	movs	r3, #1
 800bea6:	f7fd ffa5 	bl	8009df4 <disk_read>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d002      	beq.n	800beb6 <f_open+0x362>
 800beb0:	2301      	movs	r3, #1
 800beb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800beb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d002      	beq.n	800bec4 <f_open+0x370>
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2200      	movs	r2, #0
 800bec2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800beca:	4611      	mov	r1, r2
 800becc:	4618      	mov	r0, r3
 800bece:	f7fe f907 	bl	800a0e0 <unlock_fs>
 800bed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3760      	adds	r7, #96	; 0x60
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b08e      	sub	sp, #56	; 0x38
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	60f8      	str	r0, [r7, #12]
 800bee6:	60b9      	str	r1, [r7, #8]
 800bee8:	607a      	str	r2, [r7, #4]
 800beea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f107 0214 	add.w	r2, r7, #20
 800befc:	4611      	mov	r1, r2
 800befe:	4618      	mov	r0, r3
 800bf00:	f7ff fd7c 	bl	800b9fc <validate>
 800bf04:	4603      	mov	r3, r0
 800bf06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bf0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d107      	bne.n	800bf22 <f_read+0x44>
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	7d5b      	ldrb	r3, [r3, #21]
 800bf16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bf1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d009      	beq.n	800bf36 <f_read+0x58>
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bf28:	4611      	mov	r1, r2
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fe f8d8 	bl	800a0e0 <unlock_fs>
 800bf30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf34:	e13d      	b.n	800c1b2 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	7d1b      	ldrb	r3, [r3, #20]
 800bf3a:	f003 0301 	and.w	r3, r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d106      	bne.n	800bf50 <f_read+0x72>
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	2107      	movs	r1, #7
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fe f8ca 	bl	800a0e0 <unlock_fs>
 800bf4c:	2307      	movs	r3, #7
 800bf4e:	e130      	b.n	800c1b2 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	68da      	ldr	r2, [r3, #12]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	f240 811c 	bls.w	800c19e <f_read+0x2c0>
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bf6a:	e118      	b.n	800c19e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f040 80e4 	bne.w	800c142 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	699b      	ldr	r3, [r3, #24]
 800bf7e:	0adb      	lsrs	r3, r3, #11
 800bf80:	697a      	ldr	r2, [r7, #20]
 800bf82:	8952      	ldrh	r2, [r2, #10]
 800bf84:	3a01      	subs	r2, #1
 800bf86:	4013      	ands	r3, r2
 800bf88:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d139      	bne.n	800c004 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d103      	bne.n	800bfa0 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	633b      	str	r3, [r7, #48]	; 0x30
 800bf9e:	e013      	b.n	800bfc8 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d007      	beq.n	800bfb8 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	699b      	ldr	r3, [r3, #24]
 800bfac:	4619      	mov	r1, r3
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f7fe fdb3 	bl	800ab1a <clmt_clust>
 800bfb4:	6338      	str	r0, [r7, #48]	; 0x30
 800bfb6:	e007      	b.n	800bfc8 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	69db      	ldr	r3, [r3, #28]
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	f7fe fb14 	bl	800a5ee <get_fat>
 800bfc6:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d809      	bhi.n	800bfe2 <f_read+0x104>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2202      	movs	r2, #2
 800bfd2:	755a      	strb	r2, [r3, #21]
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	2102      	movs	r1, #2
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe f881 	bl	800a0e0 <unlock_fs>
 800bfde:	2302      	movs	r3, #2
 800bfe0:	e0e7      	b.n	800c1b2 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfe8:	d109      	bne.n	800bffe <f_read+0x120>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2201      	movs	r2, #1
 800bfee:	755a      	strb	r2, [r3, #21]
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	2101      	movs	r1, #1
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fe f873 	bl	800a0e0 <unlock_fs>
 800bffa:	2301      	movs	r3, #1
 800bffc:	e0d9      	b.n	800c1b2 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c002:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c004:	697a      	ldr	r2, [r7, #20]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	69db      	ldr	r3, [r3, #28]
 800c00a:	4619      	mov	r1, r3
 800c00c:	4610      	mov	r0, r2
 800c00e:	f7fe facf 	bl	800a5b0 <clust2sect>
 800c012:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d109      	bne.n	800c02e <f_read+0x150>
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2202      	movs	r2, #2
 800c01e:	755a      	strb	r2, [r3, #21]
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	2102      	movs	r1, #2
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe f85b 	bl	800a0e0 <unlock_fs>
 800c02a:	2302      	movs	r3, #2
 800c02c:	e0c1      	b.n	800c1b2 <f_read+0x2d4>
			sect += csect;
 800c02e:	69ba      	ldr	r2, [r7, #24]
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	4413      	add	r3, r2
 800c034:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	0adb      	lsrs	r3, r3, #11
 800c03a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d03e      	beq.n	800c0c0 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c042:	69fa      	ldr	r2, [r7, #28]
 800c044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c046:	4413      	add	r3, r2
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	8952      	ldrh	r2, [r2, #10]
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d905      	bls.n	800c05c <f_read+0x17e>
					cc = fs->csize - csect;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	895b      	ldrh	r3, [r3, #10]
 800c054:	461a      	mov	r2, r3
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	1ad3      	subs	r3, r2, r3
 800c05a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	7858      	ldrb	r0, [r3, #1]
 800c060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c062:	69ba      	ldr	r2, [r7, #24]
 800c064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c066:	f7fd fec5 	bl	8009df4 <disk_read>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d009      	beq.n	800c084 <f_read+0x1a6>
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2201      	movs	r2, #1
 800c074:	755a      	strb	r2, [r3, #21]
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	2101      	movs	r1, #1
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fe f830 	bl	800a0e0 <unlock_fs>
 800c080:	2301      	movs	r3, #1
 800c082:	e096      	b.n	800c1b2 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	7d1b      	ldrb	r3, [r3, #20]
 800c088:	b25b      	sxtb	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	da14      	bge.n	800c0b8 <f_read+0x1da>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6a1a      	ldr	r2, [r3, #32]
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c098:	429a      	cmp	r2, r3
 800c09a:	d90d      	bls.n	800c0b8 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6a1a      	ldr	r2, [r3, #32]
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	02db      	lsls	r3, r3, #11
 800c0a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0a8:	18d0      	adds	r0, r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	3330      	adds	r3, #48	; 0x30
 800c0ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	f7fd ff80 	bl	8009fb8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ba:	02db      	lsls	r3, r3, #11
 800c0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c0be:	e05a      	b.n	800c176 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6a1b      	ldr	r3, [r3, #32]
 800c0c4:	69ba      	ldr	r2, [r7, #24]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d038      	beq.n	800c13c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	7d1b      	ldrb	r3, [r3, #20]
 800c0ce:	b25b      	sxtb	r3, r3
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	da1d      	bge.n	800c110 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	7858      	ldrb	r0, [r3, #1]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6a1a      	ldr	r2, [r3, #32]
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	f7fd fea6 	bl	8009e34 <disk_write>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d009      	beq.n	800c102 <f_read+0x224>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	755a      	strb	r2, [r3, #21]
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fd fff1 	bl	800a0e0 <unlock_fs>
 800c0fe:	2301      	movs	r3, #1
 800c100:	e057      	b.n	800c1b2 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	7d1b      	ldrb	r3, [r3, #20]
 800c106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	7858      	ldrb	r0, [r3, #1]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c11a:	2301      	movs	r3, #1
 800c11c:	69ba      	ldr	r2, [r7, #24]
 800c11e:	f7fd fe69 	bl	8009df4 <disk_read>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d009      	beq.n	800c13c <f_read+0x25e>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2201      	movs	r2, #1
 800c12c:	755a      	strb	r2, [r3, #21]
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	2101      	movs	r1, #1
 800c132:	4618      	mov	r0, r3
 800c134:	f7fd ffd4 	bl	800a0e0 <unlock_fs>
 800c138:	2301      	movs	r3, #1
 800c13a:	e03a      	b.n	800c1b2 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	69ba      	ldr	r2, [r7, #24]
 800c140:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c14a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800c14e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	429a      	cmp	r2, r3
 800c156:	d901      	bls.n	800c15c <f_read+0x27e>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c16a:	4413      	add	r3, r2
 800c16c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c16e:	4619      	mov	r1, r3
 800c170:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c172:	f7fd ff21 	bl	8009fb8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17a:	4413      	add	r3, r2
 800c17c:	627b      	str	r3, [r7, #36]	; 0x24
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	699a      	ldr	r2, [r3, #24]
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c184:	441a      	add	r2, r3
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	619a      	str	r2, [r3, #24]
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c190:	441a      	add	r2, r3
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	601a      	str	r2, [r3, #0]
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f47f aee3 	bne.w	800bf6c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fd ff98 	bl	800a0e0 <unlock_fs>
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3738      	adds	r7, #56	; 0x38
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b08c      	sub	sp, #48	; 0x30
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	60f8      	str	r0, [r7, #12]
 800c1c2:	60b9      	str	r1, [r7, #8]
 800c1c4:	607a      	str	r2, [r7, #4]
 800c1c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f107 0210 	add.w	r2, r7, #16
 800c1d8:	4611      	mov	r1, r2
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7ff fc0e 	bl	800b9fc <validate>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c1e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d107      	bne.n	800c1fe <f_write+0x44>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	7d5b      	ldrb	r3, [r3, #21]
 800c1f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c1f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d009      	beq.n	800c212 <f_write+0x58>
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c204:	4611      	mov	r1, r2
 800c206:	4618      	mov	r0, r3
 800c208:	f7fd ff6a 	bl	800a0e0 <unlock_fs>
 800c20c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c210:	e173      	b.n	800c4fa <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	7d1b      	ldrb	r3, [r3, #20]
 800c216:	f003 0302 	and.w	r3, r3, #2
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d106      	bne.n	800c22c <f_write+0x72>
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	2107      	movs	r1, #7
 800c222:	4618      	mov	r0, r3
 800c224:	f7fd ff5c 	bl	800a0e0 <unlock_fs>
 800c228:	2307      	movs	r3, #7
 800c22a:	e166      	b.n	800c4fa <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	699a      	ldr	r2, [r3, #24]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	441a      	add	r2, r3
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	429a      	cmp	r2, r3
 800c23a:	f080 814b 	bcs.w	800c4d4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	43db      	mvns	r3, r3
 800c244:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c246:	e145      	b.n	800c4d4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c250:	2b00      	cmp	r3, #0
 800c252:	f040 8101 	bne.w	800c458 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	699b      	ldr	r3, [r3, #24]
 800c25a:	0adb      	lsrs	r3, r3, #11
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	8952      	ldrh	r2, [r2, #10]
 800c260:	3a01      	subs	r2, #1
 800c262:	4013      	ands	r3, r2
 800c264:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d14d      	bne.n	800c308 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10c      	bne.n	800c28e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d11a      	bne.n	800c2b6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2100      	movs	r1, #0
 800c284:	4618      	mov	r0, r3
 800c286:	f7fe fbb0 	bl	800a9ea <create_chain>
 800c28a:	62b8      	str	r0, [r7, #40]	; 0x28
 800c28c:	e013      	b.n	800c2b6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c292:	2b00      	cmp	r3, #0
 800c294:	d007      	beq.n	800c2a6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	4619      	mov	r1, r3
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	f7fe fc3c 	bl	800ab1a <clmt_clust>
 800c2a2:	62b8      	str	r0, [r7, #40]	; 0x28
 800c2a4:	e007      	b.n	800c2b6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	69db      	ldr	r3, [r3, #28]
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	4610      	mov	r0, r2
 800c2b0:	f7fe fb9b 	bl	800a9ea <create_chain>
 800c2b4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f000 8110 	beq.w	800c4de <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d109      	bne.n	800c2d8 <f_write+0x11e>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2202      	movs	r2, #2
 800c2c8:	755a      	strb	r2, [r3, #21]
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	2102      	movs	r1, #2
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fd ff06 	bl	800a0e0 <unlock_fs>
 800c2d4:	2302      	movs	r3, #2
 800c2d6:	e110      	b.n	800c4fa <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2de:	d109      	bne.n	800c2f4 <f_write+0x13a>
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	755a      	strb	r2, [r3, #21]
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fd fef8 	bl	800a0e0 <unlock_fs>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e102      	b.n	800c4fa <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2f8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d102      	bne.n	800c308 <f_write+0x14e>
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c306:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	7d1b      	ldrb	r3, [r3, #20]
 800c30c:	b25b      	sxtb	r3, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	da1d      	bge.n	800c34e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	7858      	ldrb	r0, [r3, #1]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6a1a      	ldr	r2, [r3, #32]
 800c320:	2301      	movs	r3, #1
 800c322:	f7fd fd87 	bl	8009e34 <disk_write>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d009      	beq.n	800c340 <f_write+0x186>
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2201      	movs	r2, #1
 800c330:	755a      	strb	r2, [r3, #21]
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	2101      	movs	r1, #1
 800c336:	4618      	mov	r0, r3
 800c338:	f7fd fed2 	bl	800a0e0 <unlock_fs>
 800c33c:	2301      	movs	r3, #1
 800c33e:	e0dc      	b.n	800c4fa <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	7d1b      	ldrb	r3, [r3, #20]
 800c344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c34e:	693a      	ldr	r2, [r7, #16]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	69db      	ldr	r3, [r3, #28]
 800c354:	4619      	mov	r1, r3
 800c356:	4610      	mov	r0, r2
 800c358:	f7fe f92a 	bl	800a5b0 <clust2sect>
 800c35c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d109      	bne.n	800c378 <f_write+0x1be>
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2202      	movs	r2, #2
 800c368:	755a      	strb	r2, [r3, #21]
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	2102      	movs	r1, #2
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fd feb6 	bl	800a0e0 <unlock_fs>
 800c374:	2302      	movs	r3, #2
 800c376:	e0c0      	b.n	800c4fa <f_write+0x340>
			sect += csect;
 800c378:	697a      	ldr	r2, [r7, #20]
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	4413      	add	r3, r2
 800c37e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	0adb      	lsrs	r3, r3, #11
 800c384:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c386:	6a3b      	ldr	r3, [r7, #32]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d041      	beq.n	800c410 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c38c:	69ba      	ldr	r2, [r7, #24]
 800c38e:	6a3b      	ldr	r3, [r7, #32]
 800c390:	4413      	add	r3, r2
 800c392:	693a      	ldr	r2, [r7, #16]
 800c394:	8952      	ldrh	r2, [r2, #10]
 800c396:	4293      	cmp	r3, r2
 800c398:	d905      	bls.n	800c3a6 <f_write+0x1ec>
					cc = fs->csize - csect;
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	895b      	ldrh	r3, [r3, #10]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	7858      	ldrb	r0, [r3, #1]
 800c3aa:	6a3b      	ldr	r3, [r7, #32]
 800c3ac:	697a      	ldr	r2, [r7, #20]
 800c3ae:	69f9      	ldr	r1, [r7, #28]
 800c3b0:	f7fd fd40 	bl	8009e34 <disk_write>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d009      	beq.n	800c3ce <f_write+0x214>
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2201      	movs	r2, #1
 800c3be:	755a      	strb	r2, [r3, #21]
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7fd fe8b 	bl	800a0e0 <unlock_fs>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e095      	b.n	800c4fa <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6a1a      	ldr	r2, [r3, #32]
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	6a3a      	ldr	r2, [r7, #32]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d915      	bls.n	800c408 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6a1a      	ldr	r2, [r3, #32]
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	02db      	lsls	r3, r3, #11
 800c3ec:	69fa      	ldr	r2, [r7, #28]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	f7fd fddf 	bl	8009fb8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	7d1b      	ldrb	r3, [r3, #20]
 800c3fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c402:	b2da      	uxtb	r2, r3
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c408:	6a3b      	ldr	r3, [r7, #32]
 800c40a:	02db      	lsls	r3, r3, #11
 800c40c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c40e:	e044      	b.n	800c49a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6a1b      	ldr	r3, [r3, #32]
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	429a      	cmp	r2, r3
 800c418:	d01b      	beq.n	800c452 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	699a      	ldr	r2, [r3, #24]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c422:	429a      	cmp	r2, r3
 800c424:	d215      	bcs.n	800c452 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	7858      	ldrb	r0, [r3, #1]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c430:	2301      	movs	r3, #1
 800c432:	697a      	ldr	r2, [r7, #20]
 800c434:	f7fd fcde 	bl	8009df4 <disk_read>
 800c438:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d009      	beq.n	800c452 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2201      	movs	r2, #1
 800c442:	755a      	strb	r2, [r3, #21]
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	2101      	movs	r1, #1
 800c448:	4618      	mov	r0, r3
 800c44a:	f7fd fe49 	bl	800a0e0 <unlock_fs>
 800c44e:	2301      	movs	r3, #1
 800c450:	e053      	b.n	800c4fa <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	697a      	ldr	r2, [r7, #20]
 800c456:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	699b      	ldr	r3, [r3, #24]
 800c45c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c460:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800c464:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d901      	bls.n	800c472 <f_write+0x2b8>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	699b      	ldr	r3, [r3, #24]
 800c47c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c480:	4413      	add	r3, r2
 800c482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c484:	69f9      	ldr	r1, [r7, #28]
 800c486:	4618      	mov	r0, r3
 800c488:	f7fd fd96 	bl	8009fb8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	7d1b      	ldrb	r3, [r3, #20]
 800c490:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c494:	b2da      	uxtb	r2, r3
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c49a:	69fa      	ldr	r2, [r7, #28]
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	4413      	add	r3, r2
 800c4a0:	61fb      	str	r3, [r7, #28]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	699a      	ldr	r2, [r3, #24]
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a8:	441a      	add	r2, r3
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	619a      	str	r2, [r3, #24]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	68da      	ldr	r2, [r3, #12]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	699b      	ldr	r3, [r3, #24]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	bf38      	it	cc
 800c4ba:	461a      	movcc	r2, r3
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	60da      	str	r2, [r3, #12]
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	441a      	add	r2, r3
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f47f aeb6 	bne.w	800c248 <f_write+0x8e>
 800c4dc:	e000      	b.n	800c4e0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c4de:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	7d1b      	ldrb	r3, [r3, #20]
 800c4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e8:	b2da      	uxtb	r2, r3
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fd fdf4 	bl	800a0e0 <unlock_fs>
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3730      	adds	r7, #48	; 0x30
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b086      	sub	sp, #24
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f107 0208 	add.w	r2, r7, #8
 800c510:	4611      	mov	r1, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f7ff fa72 	bl	800b9fc <validate>
 800c518:	4603      	mov	r3, r0
 800c51a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c51c:	7dfb      	ldrb	r3, [r7, #23]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d16d      	bne.n	800c5fe <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	7d1b      	ldrb	r3, [r3, #20]
 800c526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d067      	beq.n	800c5fe <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	7d1b      	ldrb	r3, [r3, #20]
 800c532:	b25b      	sxtb	r3, r3
 800c534:	2b00      	cmp	r3, #0
 800c536:	da1a      	bge.n	800c56e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	7858      	ldrb	r0, [r3, #1]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a1a      	ldr	r2, [r3, #32]
 800c546:	2301      	movs	r3, #1
 800c548:	f7fd fc74 	bl	8009e34 <disk_write>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d006      	beq.n	800c560 <f_sync+0x5e>
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2101      	movs	r1, #1
 800c556:	4618      	mov	r0, r3
 800c558:	f7fd fdc2 	bl	800a0e0 <unlock_fs>
 800c55c:	2301      	movs	r3, #1
 800c55e:	e055      	b.n	800c60c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	7d1b      	ldrb	r3, [r3, #20]
 800c564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c56e:	f7fd faf7 	bl	8009b60 <get_fattime>
 800c572:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c574:	68ba      	ldr	r2, [r7, #8]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57a:	4619      	mov	r1, r3
 800c57c:	4610      	mov	r0, r2
 800c57e:	f7fd ff7b 	bl	800a478 <move_window>
 800c582:	4603      	mov	r3, r0
 800c584:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d138      	bne.n	800c5fe <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c590:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	330b      	adds	r3, #11
 800c596:	781a      	ldrb	r2, [r3, #0]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	330b      	adds	r3, #11
 800c59c:	f042 0220 	orr.w	r2, r2, #32
 800c5a0:	b2d2      	uxtb	r2, r2
 800c5a2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6818      	ldr	r0, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	68f9      	ldr	r1, [r7, #12]
 800c5b0:	f7fe fc8d 	bl	800aece <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f103 021c 	add.w	r2, r3, #28
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	f7fd fccd 	bl	8009f60 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	3316      	adds	r3, #22
 800c5ca:	6939      	ldr	r1, [r7, #16]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fd fcc7 	bl	8009f60 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3312      	adds	r3, #18
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fd fca6 	bl	8009f2a <st_word>
					fs->wflag = 1;
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fd ff74 	bl	800a4d4 <sync_fs>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	7d1b      	ldrb	r3, [r3, #20]
 800c5f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	7dfa      	ldrb	r2, [r7, #23]
 800c602:	4611      	mov	r1, r2
 800c604:	4618      	mov	r0, r3
 800c606:	f7fd fd6b 	bl	800a0e0 <unlock_fs>
 800c60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3718      	adds	r7, #24
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f7ff ff70 	bl	800c502 <f_sync>
 800c622:	4603      	mov	r3, r0
 800c624:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c626:	7bfb      	ldrb	r3, [r7, #15]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d11d      	bne.n	800c668 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f107 0208 	add.w	r2, r7, #8
 800c632:	4611      	mov	r1, r2
 800c634:	4618      	mov	r0, r3
 800c636:	f7ff f9e1 	bl	800b9fc <validate>
 800c63a:	4603      	mov	r3, r0
 800c63c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c63e:	7bfb      	ldrb	r3, [r7, #15]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d111      	bne.n	800c668 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fd fe71 	bl	800a330 <dec_lock>
 800c64e:	4603      	mov	r3, r0
 800c650:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c652:	7bfb      	ldrb	r3, [r7, #15]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d102      	bne.n	800c65e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	2100      	movs	r1, #0
 800c662:	4618      	mov	r0, r3
 800c664:	f7fd fd3c 	bl	800a0e0 <unlock_fs>
#endif
		}
	}
	return res;
 800c668:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b086      	sub	sp, #24
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
 800c67a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <f_opendir+0x14>
 800c682:	2309      	movs	r3, #9
 800c684:	e06a      	b.n	800c75c <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c68a:	f107 010c 	add.w	r1, r7, #12
 800c68e:	463b      	mov	r3, r7
 800c690:	2200      	movs	r2, #0
 800c692:	4618      	mov	r0, r3
 800c694:	f7fe ff5e 	bl	800b554 <find_volume>
 800c698:	4603      	mov	r3, r0
 800c69a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c69c:	7dfb      	ldrb	r3, [r7, #23]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d14f      	bne.n	800c742 <f_opendir+0xd0>
		obj->fs = fs;
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7fe fe05 	bl	800b2bc <follow_path>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d13d      	bne.n	800c738 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c6c2:	b25b      	sxtb	r3, r3
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	db12      	blt.n	800c6ee <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	799b      	ldrb	r3, [r3, #6]
 800c6cc:	f003 0310 	and.w	r3, r3, #16
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00a      	beq.n	800c6ea <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	4619      	mov	r1, r3
 800c6dc:	4610      	mov	r0, r2
 800c6de:	f7fe fbd7 	bl	800ae90 <ld_clust>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	609a      	str	r2, [r3, #8]
 800c6e8:	e001      	b.n	800c6ee <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c6ea:	2305      	movs	r3, #5
 800c6ec:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c6ee:	7dfb      	ldrb	r3, [r7, #23]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d121      	bne.n	800c738 <f_opendir+0xc6>
				obj->id = fs->id;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	88da      	ldrh	r2, [r3, #6]
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7fe fa3f 	bl	800ab82 <dir_sdi>
 800c704:	4603      	mov	r3, r0
 800c706:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c708:	7dfb      	ldrb	r3, [r7, #23]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d114      	bne.n	800c738 <f_opendir+0xc6>
					if (obj->sclust) {
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00d      	beq.n	800c732 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c716:	2100      	movs	r1, #0
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7fd fd7b 	bl	800a214 <inc_lock>
 800c71e:	4602      	mov	r2, r0
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d105      	bne.n	800c738 <f_opendir+0xc6>
 800c72c:	2312      	movs	r3, #18
 800c72e:	75fb      	strb	r3, [r7, #23]
 800c730:	e002      	b.n	800c738 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	2200      	movs	r2, #0
 800c736:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c738:	7dfb      	ldrb	r3, [r7, #23]
 800c73a:	2b04      	cmp	r3, #4
 800c73c:	d101      	bne.n	800c742 <f_opendir+0xd0>
 800c73e:	2305      	movs	r3, #5
 800c740:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d002      	beq.n	800c74e <f_opendir+0xdc>
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	2200      	movs	r2, #0
 800c74c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	7dfa      	ldrb	r2, [r7, #23]
 800c752:	4611      	mov	r1, r2
 800c754:	4618      	mov	r0, r3
 800c756:	f7fd fcc3 	bl	800a0e0 <unlock_fs>
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3718      	adds	r7, #24
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f107 0208 	add.w	r2, r7, #8
 800c774:	4611      	mov	r1, r2
 800c776:	4618      	mov	r0, r3
 800c778:	f7ff f940 	bl	800b9fc <validate>
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c780:	7bfb      	ldrb	r3, [r7, #15]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d126      	bne.n	800c7d4 <f_readdir+0x70>
		if (!fno) {
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d106      	bne.n	800c79a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c78c:	2100      	movs	r1, #0
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7fe f9f7 	bl	800ab82 <dir_sdi>
 800c794:	4603      	mov	r3, r0
 800c796:	73fb      	strb	r3, [r7, #15]
 800c798:	e01c      	b.n	800c7d4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c79a:	2100      	movs	r1, #0
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7fe fbb6 	bl	800af0e <dir_read>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	2b04      	cmp	r3, #4
 800c7aa:	d101      	bne.n	800c7b0 <f_readdir+0x4c>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10e      	bne.n	800c7d4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c7b6:	6839      	ldr	r1, [r7, #0]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7fe fc8c 	bl	800b0d6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c7be:	2100      	movs	r1, #0
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f7fe fa59 	bl	800ac78 <dir_next>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c7ca:	7bfb      	ldrb	r3, [r7, #15]
 800c7cc:	2b04      	cmp	r3, #4
 800c7ce:	d101      	bne.n	800c7d4 <f_readdir+0x70>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	7bfa      	ldrb	r2, [r7, #15]
 800c7d8:	4611      	mov	r1, r2
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fd fc80 	bl	800a0e0 <unlock_fs>
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
	...

0800c7ec <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800c7ec:	b590      	push	{r4, r7, lr}
 800c7ee:	b09d      	sub	sp, #116	; 0x74
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	607a      	str	r2, [r7, #4]
 800c7f6:	603b      	str	r3, [r7, #0]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800c800:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c804:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800c806:	f107 030c 	add.w	r3, r7, #12
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe fdc8 	bl	800b3a0 <get_ldnumber>
 800c810:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c814:	2b00      	cmp	r3, #0
 800c816:	da02      	bge.n	800c81e <f_mkfs+0x32>
 800c818:	230b      	movs	r3, #11
 800c81a:	f000 bc0d 	b.w	800d038 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800c81e:	4a94      	ldr	r2, [pc, #592]	; (800ca70 <f_mkfs+0x284>)
 800c820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d005      	beq.n	800c836 <f_mkfs+0x4a>
 800c82a:	4a91      	ldr	r2, [pc, #580]	; (800ca70 <f_mkfs+0x284>)
 800c82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c832:	2200      	movs	r2, #0
 800c834:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800c836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c838:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800c83c:	2300      	movs	r3, #0
 800c83e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800c842:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c846:	4618      	mov	r0, r3
 800c848:	f7fd faae 	bl	8009da8 <disk_initialize>
 800c84c:	4603      	mov	r3, r0
 800c84e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800c852:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c856:	f003 0301 	and.w	r3, r3, #1
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <f_mkfs+0x76>
 800c85e:	2303      	movs	r3, #3
 800c860:	e3ea      	b.n	800d038 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800c862:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c866:	f003 0304 	and.w	r3, r3, #4
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <f_mkfs+0x86>
 800c86e:	230a      	movs	r3, #10
 800c870:	e3e2      	b.n	800d038 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800c872:	f107 0214 	add.w	r2, r7, #20
 800c876:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c87a:	2103      	movs	r1, #3
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fd faf9 	bl	8009e74 <disk_ioctl>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10c      	bne.n	800c8a2 <f_mkfs+0xb6>
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d009      	beq.n	800c8a2 <f_mkfs+0xb6>
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c894:	d805      	bhi.n	800c8a2 <f_mkfs+0xb6>
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	1e5a      	subs	r2, r3, #1
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	4013      	ands	r3, r2
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <f_mkfs+0xba>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800c8a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c8aa:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d003      	beq.n	800c8ba <f_mkfs+0xce>
 800c8b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d309      	bcc.n	800c8ce <f_mkfs+0xe2>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c8c0:	d805      	bhi.n	800c8ce <f_mkfs+0xe2>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	1e5a      	subs	r2, r3, #1
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <f_mkfs+0xe6>
 800c8ce:	2313      	movs	r3, #19
 800c8d0:	e3b2      	b.n	800d038 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800c8d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8da:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800c8e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c8e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c8e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800c8ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f0:	fb02 f303 	mul.w	r3, r2, r3
 800c8f4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800c8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d101      	bne.n	800c900 <f_mkfs+0x114>
 800c8fc:	230e      	movs	r3, #14
 800c8fe:	e39b      	b.n	800d038 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800c900:	f107 0210 	add.w	r2, r7, #16
 800c904:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c908:	2101      	movs	r1, #1
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fd fab2 	bl	8009e74 <disk_ioctl>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d001      	beq.n	800c91a <f_mkfs+0x12e>
 800c916:	2301      	movs	r3, #1
 800c918:	e38e      	b.n	800d038 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800c91a:	7afb      	ldrb	r3, [r7, #11]
 800c91c:	f003 0308 	and.w	r3, r3, #8
 800c920:	2b00      	cmp	r3, #0
 800c922:	d001      	beq.n	800c928 <f_mkfs+0x13c>
 800c924:	2300      	movs	r3, #0
 800c926:	e000      	b.n	800c92a <f_mkfs+0x13e>
 800c928:	233f      	movs	r3, #63	; 0x3f
 800c92a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c930:	429a      	cmp	r2, r3
 800c932:	d901      	bls.n	800c938 <f_mkfs+0x14c>
 800c934:	230e      	movs	r3, #14
 800c936:	e37f      	b.n	800d038 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800c938:	693a      	ldr	r2, [r7, #16]
 800c93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	2b7f      	cmp	r3, #127	; 0x7f
 800c944:	d801      	bhi.n	800c94a <f_mkfs+0x15e>
 800c946:	230e      	movs	r3, #14
 800c948:	e376      	b.n	800d038 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2b80      	cmp	r3, #128	; 0x80
 800c94e:	d901      	bls.n	800c954 <f_mkfs+0x168>
 800c950:	2313      	movs	r3, #19
 800c952:	e371      	b.n	800d038 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800c954:	7afb      	ldrb	r3, [r7, #11]
 800c956:	f003 0302 	and.w	r3, r3, #2
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00d      	beq.n	800c97a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800c95e:	7afb      	ldrb	r3, [r7, #11]
 800c960:	f003 0307 	and.w	r3, r3, #7
 800c964:	2b02      	cmp	r3, #2
 800c966:	d004      	beq.n	800c972 <f_mkfs+0x186>
 800c968:	7afb      	ldrb	r3, [r7, #11]
 800c96a:	f003 0301 	and.w	r3, r3, #1
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d103      	bne.n	800c97a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800c972:	2303      	movs	r3, #3
 800c974:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c978:	e009      	b.n	800c98e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800c97a:	7afb      	ldrb	r3, [r7, #11]
 800c97c:	f003 0301 	and.w	r3, r3, #1
 800c980:	2b00      	cmp	r3, #0
 800c982:	d101      	bne.n	800c988 <f_mkfs+0x19c>
 800c984:	2313      	movs	r3, #19
 800c986:	e357      	b.n	800d038 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800c988:	2302      	movs	r3, #2
 800c98a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800c992:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c996:	2b03      	cmp	r3, #3
 800c998:	d13c      	bne.n	800ca14 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800c99a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d11b      	bne.n	800c9d8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	0c5b      	lsrs	r3, r3, #17
 800c9a4:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	653b      	str	r3, [r7, #80]	; 0x50
 800c9ae:	e005      	b.n	800c9bc <f_mkfs+0x1d0>
 800c9b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9b8:	005b      	lsls	r3, r3, #1
 800c9ba:	653b      	str	r3, [r7, #80]	; 0x50
 800c9bc:	4a2d      	ldr	r2, [pc, #180]	; (800ca74 <f_mkfs+0x288>)
 800c9be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d007      	beq.n	800c9d8 <f_mkfs+0x1ec>
 800c9c8:	4a2a      	ldr	r2, [pc, #168]	; (800ca74 <f_mkfs+0x288>)
 800c9ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d2eb      	bcs.n	800c9b0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800c9d8:	693a      	ldr	r2, [r7, #16]
 800c9da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9e0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800c9e2:	6a3b      	ldr	r3, [r7, #32]
 800c9e4:	3302      	adds	r3, #2
 800c9e6:	009a      	lsls	r2, r3, #2
 800c9e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c9ea:	4413      	add	r3, r2
 800c9ec:	1e5a      	subs	r2, r3, #1
 800c9ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9f4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800c9f6:	2320      	movs	r3, #32
 800c9f8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800c9fe:	6a3b      	ldr	r3, [r7, #32]
 800ca00:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d903      	bls.n	800ca10 <f_mkfs+0x224>
 800ca08:	6a3b      	ldr	r3, [r7, #32]
 800ca0a:	4a1b      	ldr	r2, [pc, #108]	; (800ca78 <f_mkfs+0x28c>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d952      	bls.n	800cab6 <f_mkfs+0x2ca>
 800ca10:	230e      	movs	r3, #14
 800ca12:	e311      	b.n	800d038 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800ca14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d11b      	bne.n	800ca52 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	0b1b      	lsrs	r3, r3, #12
 800ca1e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ca20:	2300      	movs	r3, #0
 800ca22:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca24:	2301      	movs	r3, #1
 800ca26:	653b      	str	r3, [r7, #80]	; 0x50
 800ca28:	e005      	b.n	800ca36 <f_mkfs+0x24a>
 800ca2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca32:	005b      	lsls	r3, r3, #1
 800ca34:	653b      	str	r3, [r7, #80]	; 0x50
 800ca36:	4a11      	ldr	r2, [pc, #68]	; (800ca7c <f_mkfs+0x290>)
 800ca38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d007      	beq.n	800ca52 <f_mkfs+0x266>
 800ca42:	4a0e      	ldr	r2, [pc, #56]	; (800ca7c <f_mkfs+0x290>)
 800ca44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d2eb      	bcs.n	800ca2a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800ca52:	693a      	ldr	r2, [r7, #16]
 800ca54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca5a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800ca5c:	6a3b      	ldr	r3, [r7, #32]
 800ca5e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d90c      	bls.n	800ca80 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800ca66:	6a3b      	ldr	r3, [r7, #32]
 800ca68:	3302      	adds	r3, #2
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca6e:	e012      	b.n	800ca96 <f_mkfs+0x2aa>
 800ca70:	20003db4 	.word	0x20003db4
 800ca74:	08014a58 	.word	0x08014a58
 800ca78:	0ffffff5 	.word	0x0ffffff5
 800ca7c:	08014a68 	.word	0x08014a68
				} else {
					fmt = FS_FAT12;
 800ca80:	2301      	movs	r3, #1
 800ca82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800ca86:	6a3a      	ldr	r2, [r7, #32]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	4413      	add	r3, r2
 800ca8e:	3301      	adds	r3, #1
 800ca90:	085b      	lsrs	r3, r3, #1
 800ca92:	3303      	adds	r3, #3
 800ca94:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800ca96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ca98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca9a:	4413      	add	r3, r2
 800ca9c:	1e5a      	subs	r2, r3, #1
 800ca9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800caa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800caa4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800caa6:	2301      	movs	r3, #1
 800caa8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800caaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caac:	015a      	lsls	r2, r3, #5
 800caae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cab0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cab4:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800cab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caba:	4413      	add	r3, r2
 800cabc:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800cabe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cac2:	fb03 f202 	mul.w	r2, r3, r2
 800cac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cac8:	4413      	add	r3, r2
 800caca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cacc:	4413      	add	r3, r2
 800cace:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800cad0:	697a      	ldr	r2, [r7, #20]
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	4413      	add	r3, r2
 800cad6:	1e5a      	subs	r2, r3, #1
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	425b      	negs	r3, r3
 800cadc:	401a      	ands	r2, r3
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800cae4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cae8:	2b03      	cmp	r3, #3
 800caea:	d108      	bne.n	800cafe <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800caec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800caee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caf0:	4413      	add	r3, r2
 800caf2:	657b      	str	r3, [r7, #84]	; 0x54
 800caf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800caf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caf8:	4413      	add	r3, r2
 800cafa:	65bb      	str	r3, [r7, #88]	; 0x58
 800cafc:	e006      	b.n	800cb0c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800cafe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb02:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cb08:	4413      	add	r3, r2
 800cb0a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800cb0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb0e:	011a      	lsls	r2, r3, #4
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	441a      	add	r2, r3
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	1ad2      	subs	r2, r2, r3
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d901      	bls.n	800cb22 <f_mkfs+0x336>
 800cb1e:	230e      	movs	r3, #14
 800cb20:	e28a      	b.n	800d038 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800cb22:	693a      	ldr	r2, [r7, #16]
 800cb24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb26:	1ad2      	subs	r2, r2, r3
 800cb28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb2c:	fb01 f303 	mul.w	r3, r1, r3
 800cb30:	1ad2      	subs	r2, r2, r3
 800cb32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb34:	1ad2      	subs	r2, r2, r3
 800cb36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb38:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb3c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800cb3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	d10f      	bne.n	800cb66 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800cb46:	6a3b      	ldr	r3, [r7, #32]
 800cb48:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d80a      	bhi.n	800cb66 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d105      	bne.n	800cb62 <f_mkfs+0x376>
 800cb56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb58:	085b      	lsrs	r3, r3, #1
 800cb5a:	607b      	str	r3, [r7, #4]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d144      	bne.n	800cbec <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800cb62:	230e      	movs	r3, #14
 800cb64:	e268      	b.n	800d038 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800cb66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d133      	bne.n	800cbd6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800cb6e:	6a3b      	ldr	r3, [r7, #32]
 800cb70:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d91e      	bls.n	800cbb6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d107      	bne.n	800cb8e <f_mkfs+0x3a2>
 800cb7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb80:	005b      	lsls	r3, r3, #1
 800cb82:	2b40      	cmp	r3, #64	; 0x40
 800cb84:	d803      	bhi.n	800cb8e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800cb86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb88:	005b      	lsls	r3, r3, #1
 800cb8a:	607b      	str	r3, [r7, #4]
 800cb8c:	e033      	b.n	800cbf6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800cb8e:	7afb      	ldrb	r3, [r7, #11]
 800cb90:	f003 0302 	and.w	r3, r3, #2
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d003      	beq.n	800cba0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800cb98:	2303      	movs	r3, #3
 800cb9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cb9e:	e02a      	b.n	800cbf6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d105      	bne.n	800cbb2 <f_mkfs+0x3c6>
 800cba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	607b      	str	r3, [r7, #4]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b80      	cmp	r3, #128	; 0x80
 800cbb0:	d91e      	bls.n	800cbf0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800cbb2:	230e      	movs	r3, #14
 800cbb4:	e240      	b.n	800d038 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800cbb6:	6a3b      	ldr	r3, [r7, #32]
 800cbb8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d80a      	bhi.n	800cbd6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d105      	bne.n	800cbd2 <f_mkfs+0x3e6>
 800cbc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	607b      	str	r3, [r7, #4]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b80      	cmp	r3, #128	; 0x80
 800cbd0:	d910      	bls.n	800cbf4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800cbd2:	230e      	movs	r3, #14
 800cbd4:	e230      	b.n	800d038 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800cbd6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d10c      	bne.n	800cbf8 <f_mkfs+0x40c>
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d907      	bls.n	800cbf8 <f_mkfs+0x40c>
 800cbe8:	230e      	movs	r3, #14
 800cbea:	e225      	b.n	800d038 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800cbec:	bf00      	nop
 800cbee:	e6ce      	b.n	800c98e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cbf0:	bf00      	nop
 800cbf2:	e6cc      	b.n	800c98e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cbf4:	bf00      	nop
			pau = au;
 800cbf6:	e6ca      	b.n	800c98e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800cbf8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800cbfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	2100      	movs	r1, #0
 800cc00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc02:	f7fd f9fa 	bl	8009ffa <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800cc06:	220b      	movs	r2, #11
 800cc08:	49b2      	ldr	r1, [pc, #712]	; (800ced4 <f_mkfs+0x6e8>)
 800cc0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc0c:	f7fd f9d4 	bl	8009fb8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800cc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc12:	330b      	adds	r3, #11
 800cc14:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc16:	4611      	mov	r1, r2
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7fd f986 	bl	8009f2a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc20:	330d      	adds	r3, #13
 800cc22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc24:	b2d2      	uxtb	r2, r2
 800cc26:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800cc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2a:	330e      	adds	r3, #14
 800cc2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc2e:	b292      	uxth	r2, r2
 800cc30:	4611      	mov	r1, r2
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fd f979 	bl	8009f2a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	3310      	adds	r3, #16
 800cc3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc3e:	b2d2      	uxtb	r2, r2
 800cc40:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	f103 0211 	add.w	r2, r3, #17
 800cc48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cc4c:	2b03      	cmp	r3, #3
 800cc4e:	d002      	beq.n	800cc56 <f_mkfs+0x46a>
 800cc50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	e000      	b.n	800cc58 <f_mkfs+0x46c>
 800cc56:	2300      	movs	r3, #0
 800cc58:	4619      	mov	r1, r3
 800cc5a:	4610      	mov	r0, r2
 800cc5c:	f7fd f965 	bl	8009f2a <st_word>
		if (sz_vol < 0x10000) {
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc66:	d208      	bcs.n	800cc7a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800cc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6a:	3313      	adds	r3, #19
 800cc6c:	693a      	ldr	r2, [r7, #16]
 800cc6e:	b292      	uxth	r2, r2
 800cc70:	4611      	mov	r1, r2
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fd f959 	bl	8009f2a <st_word>
 800cc78:	e006      	b.n	800cc88 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7c:	3320      	adds	r3, #32
 800cc7e:	693a      	ldr	r2, [r7, #16]
 800cc80:	4611      	mov	r1, r2
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fd f96c 	bl	8009f60 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800cc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8a:	3315      	adds	r3, #21
 800cc8c:	22f8      	movs	r2, #248	; 0xf8
 800cc8e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800cc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc92:	3318      	adds	r3, #24
 800cc94:	213f      	movs	r1, #63	; 0x3f
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fd f947 	bl	8009f2a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9e:	331a      	adds	r3, #26
 800cca0:	21ff      	movs	r1, #255	; 0xff
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7fd f941 	bl	8009f2a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800cca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccaa:	331c      	adds	r3, #28
 800ccac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fd f956 	bl	8009f60 <st_dword>
		if (fmt == FS_FAT32) {
 800ccb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ccb8:	2b03      	cmp	r3, #3
 800ccba:	d131      	bne.n	800cd20 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbe:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800ccc2:	f7fc ff4d 	bl	8009b60 <get_fattime>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	4619      	mov	r1, r3
 800ccca:	4620      	mov	r0, r4
 800cccc:	f7fd f948 	bl	8009f60 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800ccd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd2:	3324      	adds	r3, #36	; 0x24
 800ccd4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fd f942 	bl	8009f60 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccde:	332c      	adds	r3, #44	; 0x2c
 800cce0:	2102      	movs	r1, #2
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fd f93c 	bl	8009f60 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800cce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccea:	3330      	adds	r3, #48	; 0x30
 800ccec:	2101      	movs	r1, #1
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7fd f91b 	bl	8009f2a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf6:	3332      	adds	r3, #50	; 0x32
 800ccf8:	2106      	movs	r1, #6
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fd f915 	bl	8009f2a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800cd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd02:	3340      	adds	r3, #64	; 0x40
 800cd04:	2280      	movs	r2, #128	; 0x80
 800cd06:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800cd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0a:	3342      	adds	r3, #66	; 0x42
 800cd0c:	2229      	movs	r2, #41	; 0x29
 800cd0e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800cd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd12:	3347      	adds	r3, #71	; 0x47
 800cd14:	2213      	movs	r2, #19
 800cd16:	4970      	ldr	r1, [pc, #448]	; (800ced8 <f_mkfs+0x6ec>)
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fd f94d 	bl	8009fb8 <mem_cpy>
 800cd1e:	e020      	b.n	800cd62 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800cd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd22:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800cd26:	f7fc ff1b 	bl	8009b60 <get_fattime>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f7fd f916 	bl	8009f60 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	3316      	adds	r3, #22
 800cd38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd3a:	b292      	uxth	r2, r2
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fd f8f3 	bl	8009f2a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800cd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd46:	3324      	adds	r3, #36	; 0x24
 800cd48:	2280      	movs	r2, #128	; 0x80
 800cd4a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4e:	3326      	adds	r3, #38	; 0x26
 800cd50:	2229      	movs	r2, #41	; 0x29
 800cd52:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800cd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd56:	332b      	adds	r3, #43	; 0x2b
 800cd58:	2213      	movs	r2, #19
 800cd5a:	4960      	ldr	r1, [pc, #384]	; (800cedc <f_mkfs+0x6f0>)
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7fd f92b 	bl	8009fb8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd68:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7fd f8dc 	bl	8009f2a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800cd72:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800cd76:	2301      	movs	r3, #1
 800cd78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd7c:	f7fd f85a 	bl	8009e34 <disk_write>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d001      	beq.n	800cd8a <f_mkfs+0x59e>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e156      	b.n	800d038 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800cd8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cd8e:	2b03      	cmp	r3, #3
 800cd90:	d140      	bne.n	800ce14 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd94:	1d9a      	adds	r2, r3, #6
 800cd96:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd9e:	f7fd f849 	bl	8009e34 <disk_write>
			mem_set(buf, 0, ss);
 800cda2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cda4:	461a      	mov	r2, r3
 800cda6:	2100      	movs	r1, #0
 800cda8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdaa:	f7fd f926 	bl	8009ffa <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800cdae:	494c      	ldr	r1, [pc, #304]	; (800cee0 <f_mkfs+0x6f4>)
 800cdb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdb2:	f7fd f8d5 	bl	8009f60 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cdbc:	4949      	ldr	r1, [pc, #292]	; (800cee4 <f_mkfs+0x6f8>)
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fd f8ce 	bl	8009f60 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cdca:	6a3b      	ldr	r3, [r7, #32]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	4619      	mov	r1, r3
 800cdd0:	4610      	mov	r0, r2
 800cdd2:	f7fd f8c5 	bl	8009f60 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cddc:	2102      	movs	r1, #2
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fd f8be 	bl	8009f60 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800cde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cdea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7fd f89b 	bl	8009f2a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	1dda      	adds	r2, r3, #7
 800cdf8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce00:	f7fd f818 	bl	8009e34 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	1c5a      	adds	r2, r3, #1
 800ce08:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce10:	f7fd f810 	bl	8009e34 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800ce14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce16:	2100      	movs	r1, #0
 800ce18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce1a:	f7fd f8ee 	bl	8009ffa <mem_set>
		sect = b_fat;		/* FAT start sector */
 800ce1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce20:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ce22:	2300      	movs	r3, #0
 800ce24:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce26:	e04b      	b.n	800cec0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800ce28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ce2c:	2b03      	cmp	r3, #3
 800ce2e:	d113      	bne.n	800ce58 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800ce30:	f06f 0107 	mvn.w	r1, #7
 800ce34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce36:	f7fd f893 	bl	8009f60 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3c:	3304      	adds	r3, #4
 800ce3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fd f88c 	bl	8009f60 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800ce48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fd f885 	bl	8009f60 <st_dword>
 800ce56:	e00b      	b.n	800ce70 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800ce58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d101      	bne.n	800ce64 <f_mkfs+0x678>
 800ce60:	4b21      	ldr	r3, [pc, #132]	; (800cee8 <f_mkfs+0x6fc>)
 800ce62:	e001      	b.n	800ce68 <f_mkfs+0x67c>
 800ce64:	f06f 0307 	mvn.w	r3, #7
 800ce68:	4619      	mov	r1, r3
 800ce6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce6c:	f7fd f878 	bl	8009f60 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800ce70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce72:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800ce74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	bf28      	it	cs
 800ce7c:	4613      	movcs	r3, r2
 800ce7e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ce80:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ce84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ce88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce8a:	f7fc ffd3 	bl	8009e34 <disk_write>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d001      	beq.n	800ce98 <f_mkfs+0x6ac>
 800ce94:	2301      	movs	r3, #1
 800ce96:	e0cf      	b.n	800d038 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800ce98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cea0:	f7fd f8ab 	bl	8009ffa <mem_set>
				sect += n; nsect -= n;
 800cea4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cea8:	4413      	add	r3, r2
 800ceaa:	667b      	str	r3, [r7, #100]	; 0x64
 800ceac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ceae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800ceb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1dc      	bne.n	800ce74 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ceba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cebc:	3301      	adds	r3, #1
 800cebe:	64bb      	str	r3, [r7, #72]	; 0x48
 800cec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d3af      	bcc.n	800ce28 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800cec8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cecc:	2b03      	cmp	r3, #3
 800cece:	d10d      	bne.n	800ceec <f_mkfs+0x700>
 800ced0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ced2:	e00c      	b.n	800ceee <f_mkfs+0x702>
 800ced4:	0801278c 	.word	0x0801278c
 800ced8:	08012798 	.word	0x08012798
 800cedc:	080127ac 	.word	0x080127ac
 800cee0:	41615252 	.word	0x41615252
 800cee4:	61417272 	.word	0x61417272
 800cee8:	00fffff8 	.word	0x00fffff8
 800ceec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceee:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800cef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef4:	4293      	cmp	r3, r2
 800cef6:	bf28      	it	cs
 800cef8:	4613      	movcs	r3, r2
 800cefa:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800cefc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800cf00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf06:	f7fc ff95 	bl	8009e34 <disk_write>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d001      	beq.n	800cf14 <f_mkfs+0x728>
 800cf10:	2301      	movs	r3, #1
 800cf12:	e091      	b.n	800d038 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800cf14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf18:	4413      	add	r3, r2
 800cf1a:	667b      	str	r3, [r7, #100]	; 0x64
 800cf1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf20:	1ad3      	subs	r3, r2, r3
 800cf22:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800cf24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1e2      	bne.n	800cef0 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800cf2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cf2e:	2b03      	cmp	r3, #3
 800cf30:	d103      	bne.n	800cf3a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800cf32:	230c      	movs	r3, #12
 800cf34:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800cf38:	e010      	b.n	800cf5c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf40:	d303      	bcc.n	800cf4a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800cf42:	2306      	movs	r3, #6
 800cf44:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800cf48:	e008      	b.n	800cf5c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800cf4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	d101      	bne.n	800cf56 <f_mkfs+0x76a>
 800cf52:	2304      	movs	r3, #4
 800cf54:	e000      	b.n	800cf58 <f_mkfs+0x76c>
 800cf56:	2301      	movs	r3, #1
 800cf58:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800cf5c:	7afb      	ldrb	r3, [r7, #11]
 800cf5e:	f003 0308 	and.w	r3, r3, #8
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d15b      	bne.n	800d01e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800cf66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cf68:	461a      	mov	r2, r3
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf6e:	f7fd f844 	bl	8009ffa <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800cf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf78:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fc ffd4 	bl	8009f2a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cf88:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	3301      	adds	r3, #1
 800cf94:	2201      	movs	r2, #1
 800cf96:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	3302      	adds	r3, #2
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	3303      	adds	r3, #3
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	3304      	adds	r3, #4
 800cfac:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cfb0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800cfb2:	693a      	ldr	r2, [r7, #16]
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb6:	441a      	add	r2, r3
 800cfb8:	4b21      	ldr	r3, [pc, #132]	; (800d040 <f_mkfs+0x854>)
 800cfba:	fba3 1302 	umull	r1, r3, r3, r2
 800cfbe:	1ad2      	subs	r2, r2, r3
 800cfc0:	0852      	lsrs	r2, r2, #1
 800cfc2:	4413      	add	r3, r2
 800cfc4:	0b5b      	lsrs	r3, r3, #13
 800cfc6:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	3305      	adds	r3, #5
 800cfcc:	22fe      	movs	r2, #254	; 0xfe
 800cfce:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800cfd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfd2:	089b      	lsrs	r3, r3, #2
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	3306      	adds	r3, #6
 800cfda:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800cfde:	b2d2      	uxtb	r2, r2
 800cfe0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	3307      	adds	r3, #7
 800cfe6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfe8:	b2d2      	uxtb	r2, r2
 800cfea:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	3308      	adds	r3, #8
 800cff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fc ffb4 	bl	8009f60 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	330c      	adds	r3, #12
 800cffc:	693a      	ldr	r2, [r7, #16]
 800cffe:	4611      	mov	r1, r2
 800d000:	4618      	mov	r0, r3
 800d002:	f7fc ffad 	bl	8009f60 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800d006:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d00a:	2301      	movs	r3, #1
 800d00c:	2200      	movs	r2, #0
 800d00e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d010:	f7fc ff10 	bl	8009e34 <disk_write>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <f_mkfs+0x832>
 800d01a:	2301      	movs	r3, #1
 800d01c:	e00c      	b.n	800d038 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800d01e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d022:	2200      	movs	r2, #0
 800d024:	2100      	movs	r1, #0
 800d026:	4618      	mov	r0, r3
 800d028:	f7fc ff24 	bl	8009e74 <disk_ioctl>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <f_mkfs+0x84a>
 800d032:	2301      	movs	r3, #1
 800d034:	e000      	b.n	800d038 <f_mkfs+0x84c>

	return FR_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3774      	adds	r7, #116	; 0x74
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd90      	pop	{r4, r7, pc}
 800d040:	0515565b 	.word	0x0515565b

0800d044 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b088      	sub	sp, #32
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
	int n = 0;
 800d050:	2300      	movs	r3, #0
 800d052:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d058:	e01b      	b.n	800d092 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800d05a:	f107 0310 	add.w	r3, r7, #16
 800d05e:	f107 0114 	add.w	r1, r7, #20
 800d062:	2201      	movs	r2, #1
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f7fe ff3a 	bl	800bede <f_read>
		if (rc != 1) break;
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d116      	bne.n	800d09e <f_gets+0x5a>
		c = s[0];
 800d070:	7d3b      	ldrb	r3, [r7, #20]
 800d072:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d074:	7dfb      	ldrb	r3, [r7, #23]
 800d076:	2b0d      	cmp	r3, #13
 800d078:	d100      	bne.n	800d07c <f_gets+0x38>
 800d07a:	e00a      	b.n	800d092 <f_gets+0x4e>
		*p++ = c;
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	1c5a      	adds	r2, r3, #1
 800d080:	61ba      	str	r2, [r7, #24]
 800d082:	7dfa      	ldrb	r2, [r7, #23]
 800d084:	701a      	strb	r2, [r3, #0]
		n++;
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	3301      	adds	r3, #1
 800d08a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800d08c:	7dfb      	ldrb	r3, [r7, #23]
 800d08e:	2b0a      	cmp	r3, #10
 800d090:	d007      	beq.n	800d0a2 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	3b01      	subs	r3, #1
 800d096:	69fa      	ldr	r2, [r7, #28]
 800d098:	429a      	cmp	r2, r3
 800d09a:	dbde      	blt.n	800d05a <f_gets+0x16>
 800d09c:	e002      	b.n	800d0a4 <f_gets+0x60>
		if (rc != 1) break;
 800d09e:	bf00      	nop
 800d0a0:	e000      	b.n	800d0a4 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800d0a2:	bf00      	nop
	}
	*p = 0;
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d001      	beq.n	800d0b4 <f_gets+0x70>
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	e000      	b.n	800d0b6 <f_gets+0x72>
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3720      	adds	r7, #32
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b084      	sub	sp, #16
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800d0ca:	78fb      	ldrb	r3, [r7, #3]
 800d0cc:	2b0a      	cmp	r3, #10
 800d0ce:	d103      	bne.n	800d0d8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d0d0:	210d      	movs	r1, #13
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7ff fff3 	bl	800d0be <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	db25      	blt.n	800d130 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	1c5a      	adds	r2, r3, #1
 800d0e8:	60fa      	str	r2, [r7, #12]
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	78fa      	ldrb	r2, [r7, #3]
 800d0f0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2b3c      	cmp	r3, #60	; 0x3c
 800d0f6:	dd12      	ble.n	800d11e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6818      	ldr	r0, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f103 010c 	add.w	r1, r3, #12
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	f107 0308 	add.w	r3, r7, #8
 800d108:	f7ff f857 	bl	800c1ba <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d10c:	68ba      	ldr	r2, [r7, #8]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	429a      	cmp	r2, r3
 800d112:	d101      	bne.n	800d118 <putc_bfd+0x5a>
 800d114:	2300      	movs	r3, #0
 800d116:	e001      	b.n	800d11c <putc_bfd+0x5e>
 800d118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d11c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	1c5a      	adds	r2, r3, #1
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	609a      	str	r2, [r3, #8]
 800d12e:	e000      	b.n	800d132 <putc_bfd+0x74>
	if (i < 0) return;
 800d130:	bf00      	nop
}
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	db16      	blt.n	800d176 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6818      	ldr	r0, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f103 010c 	add.w	r1, r3, #12
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	461a      	mov	r2, r3
 800d158:	f107 030c 	add.w	r3, r7, #12
 800d15c:	f7ff f82d 	bl	800c1ba <f_write>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d107      	bne.n	800d176 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d102      	bne.n	800d176 <putc_flush+0x3e>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	e001      	b.n	800d17a <putc_flush+0x42>
	return EOF;
 800d176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d182:	b480      	push	{r7}
 800d184:	b083      	sub	sp, #12
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
 800d18a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	683a      	ldr	r2, [r7, #0]
 800d190:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	605a      	str	r2, [r3, #4]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	609a      	str	r2, [r3, #8]
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b096      	sub	sp, #88	; 0x58
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800d1b6:	f107 030c 	add.w	r3, r7, #12
 800d1ba:	6839      	ldr	r1, [r7, #0]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7ff ffe0 	bl	800d182 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800d1c2:	e009      	b.n	800d1d8 <f_puts+0x2c>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	1c5a      	adds	r2, r3, #1
 800d1c8:	607a      	str	r2, [r7, #4]
 800d1ca:	781a      	ldrb	r2, [r3, #0]
 800d1cc:	f107 030c 	add.w	r3, r7, #12
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7ff ff73 	bl	800d0be <putc_bfd>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1f1      	bne.n	800d1c4 <f_puts+0x18>
	return putc_flush(&pb);
 800d1e0:	f107 030c 	add.w	r3, r7, #12
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7ff ffa7 	bl	800d138 <putc_flush>
 800d1ea:	4603      	mov	r3, r0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3758      	adds	r7, #88	; 0x58
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b087      	sub	sp, #28
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	4613      	mov	r3, r2
 800d200:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d202:	2301      	movs	r3, #1
 800d204:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d206:	2300      	movs	r3, #0
 800d208:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d20a:	4b22      	ldr	r3, [pc, #136]	; (800d294 <FATFS_LinkDriverEx+0xa0>)
 800d20c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d210:	b2db      	uxtb	r3, r3
 800d212:	2b07      	cmp	r3, #7
 800d214:	d837      	bhi.n	800d286 <FATFS_LinkDriverEx+0x92>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d216:	4b1f      	ldr	r3, [pc, #124]	; (800d294 <FATFS_LinkDriverEx+0xa0>)
 800d218:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	461a      	mov	r2, r3
 800d220:	4b1c      	ldr	r3, [pc, #112]	; (800d294 <FATFS_LinkDriverEx+0xa0>)
 800d222:	2100      	movs	r1, #0
 800d224:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d226:	4b1b      	ldr	r3, [pc, #108]	; (800d294 <FATFS_LinkDriverEx+0xa0>)
 800d228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	4919      	ldr	r1, [pc, #100]	; (800d294 <FATFS_LinkDriverEx+0xa0>)
 800d230:	3302      	adds	r3, #2
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    disk.lun[disk.nbr] = lun;
 800d238:	4b16      	ldr	r3, [pc, #88]	; (800d294 <FATFS_LinkDriverEx+0xa0>)
 800d23a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	461a      	mov	r2, r3
 800d242:	4b14      	ldr	r3, [pc, #80]	; (800d294 <FATFS_LinkDriverEx+0xa0>)
 800d244:	4413      	add	r3, r2
 800d246:	79fa      	ldrb	r2, [r7, #7]
 800d248:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    DiskNum = disk.nbr++;
 800d24c:	4b11      	ldr	r3, [pc, #68]	; (800d294 <FATFS_LinkDriverEx+0xa0>)
 800d24e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d252:	b2db      	uxtb	r3, r3
 800d254:	1c5a      	adds	r2, r3, #1
 800d256:	b2d1      	uxtb	r1, r2
 800d258:	4a0e      	ldr	r2, [pc, #56]	; (800d294 <FATFS_LinkDriverEx+0xa0>)
 800d25a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 800d25e:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d260:	7dbb      	ldrb	r3, [r7, #22]
 800d262:	3330      	adds	r3, #48	; 0x30
 800d264:	b2da      	uxtb	r2, r3
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	3301      	adds	r3, #1
 800d26e:	223a      	movs	r2, #58	; 0x3a
 800d270:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	3302      	adds	r3, #2
 800d276:	222f      	movs	r2, #47	; 0x2f
 800d278:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	3303      	adds	r3, #3
 800d27e:	2200      	movs	r2, #0
 800d280:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d282:	2300      	movs	r3, #0
 800d284:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d286:	7dfb      	ldrb	r3, [r7, #23]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	371c      	adds	r7, #28
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr
 800d294:	20003df8 	.word	0x20003df8

0800d298 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	6839      	ldr	r1, [r7, #0]
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f7ff ffa4 	bl	800d1f4 <FATFS_LinkDriverEx>
 800d2ac:	4603      	mov	r3, r0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b084      	sub	sp, #16
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	4603      	mov	r3, r0
 800d2be:	6039      	str	r1, [r7, #0]
 800d2c0:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
    *sobj = osMutexCreate(osMutex(MTX));
#else
    *sobj = osMutexNew(NULL);
 800d2c2:	2000      	movs	r0, #0
 800d2c4:	f000 f979 	bl	800d5ba <osMutexNew>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	bf14      	ite	ne
 800d2d6:	2301      	movne	r3, #1
 800d2d8:	2300      	moveq	r3, #0
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	60fb      	str	r3, [r7, #12]

    return ret;
 800d2de:	68fb      	ldr	r3, [r7, #12]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 fa70 	bl	800d7d6 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800d2f6:	2301      	movs	r3, #1
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800d308:	2300      	movs	r3, #0
 800d30a:	60fb      	str	r3, [r7, #12]
#endif

#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 800d30c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 f9d8 	bl	800d6c6 <osMutexAcquire>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d101      	bne.n	800d320 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800d31c:	2301      	movs	r3, #1
 800d31e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d320:	68fb      	ldr	r3, [r7, #12]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b082      	sub	sp, #8
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fa12 	bl	800d75c <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800d338:	bf00      	nop
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <__NVIC_SetPriority>:
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	4603      	mov	r3, r0
 800d348:	6039      	str	r1, [r7, #0]
 800d34a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d34c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d350:	2b00      	cmp	r3, #0
 800d352:	db0a      	blt.n	800d36a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	b2da      	uxtb	r2, r3
 800d358:	490c      	ldr	r1, [pc, #48]	; (800d38c <__NVIC_SetPriority+0x4c>)
 800d35a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d35e:	0112      	lsls	r2, r2, #4
 800d360:	b2d2      	uxtb	r2, r2
 800d362:	440b      	add	r3, r1
 800d364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d368:	e00a      	b.n	800d380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	b2da      	uxtb	r2, r3
 800d36e:	4908      	ldr	r1, [pc, #32]	; (800d390 <__NVIC_SetPriority+0x50>)
 800d370:	79fb      	ldrb	r3, [r7, #7]
 800d372:	f003 030f 	and.w	r3, r3, #15
 800d376:	3b04      	subs	r3, #4
 800d378:	0112      	lsls	r2, r2, #4
 800d37a:	b2d2      	uxtb	r2, r2
 800d37c:	440b      	add	r3, r1
 800d37e:	761a      	strb	r2, [r3, #24]
}
 800d380:	bf00      	nop
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr
 800d38c:	e000e100 	.word	0xe000e100
 800d390:	e000ed00 	.word	0xe000ed00

0800d394 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d394:	b580      	push	{r7, lr}
 800d396:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d398:	4b05      	ldr	r3, [pc, #20]	; (800d3b0 <SysTick_Handler+0x1c>)
 800d39a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d39c:	f002 fb74 	bl	800fa88 <xTaskGetSchedulerState>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d001      	beq.n	800d3aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d3a6:	f003 fa57 	bl	8010858 <xPortSysTickHandler>
  }
}
 800d3aa:	bf00      	nop
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	e000e010 	.word	0xe000e010

0800d3b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	f06f 0004 	mvn.w	r0, #4
 800d3be:	f7ff ffbf 	bl	800d340 <__NVIC_SetPriority>
#endif
}
 800d3c2:	bf00      	nop
 800d3c4:	bd80      	pop	{r7, pc}
	...

0800d3c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3ce:	f3ef 8305 	mrs	r3, IPSR
 800d3d2:	603b      	str	r3, [r7, #0]
  return(result);
 800d3d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d003      	beq.n	800d3e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d3da:	f06f 0305 	mvn.w	r3, #5
 800d3de:	607b      	str	r3, [r7, #4]
 800d3e0:	e00f      	b.n	800d402 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d3e2:	4b0a      	ldr	r3, [pc, #40]	; (800d40c <osKernelInitialize+0x44>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d108      	bne.n	800d3fc <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800d3ea:	4809      	ldr	r0, [pc, #36]	; (800d410 <osKernelInitialize+0x48>)
 800d3ec:	f003 fc30 	bl	8010c50 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800d3f0:	4b06      	ldr	r3, [pc, #24]	; (800d40c <osKernelInitialize+0x44>)
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	607b      	str	r3, [r7, #4]
 800d3fa:	e002      	b.n	800d402 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800d3fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d400:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d402:	687b      	ldr	r3, [r7, #4]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	20003e2c 	.word	0x20003e2c
 800d410:	200000c4 	.word	0x200000c4

0800d414 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d41a:	f3ef 8305 	mrs	r3, IPSR
 800d41e:	603b      	str	r3, [r7, #0]
  return(result);
 800d420:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d422:	2b00      	cmp	r3, #0
 800d424:	d003      	beq.n	800d42e <osKernelStart+0x1a>
    stat = osErrorISR;
 800d426:	f06f 0305 	mvn.w	r3, #5
 800d42a:	607b      	str	r3, [r7, #4]
 800d42c:	e010      	b.n	800d450 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d42e:	4b0b      	ldr	r3, [pc, #44]	; (800d45c <osKernelStart+0x48>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b01      	cmp	r3, #1
 800d434:	d109      	bne.n	800d44a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d436:	f7ff ffbd 	bl	800d3b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d43a:	4b08      	ldr	r3, [pc, #32]	; (800d45c <osKernelStart+0x48>)
 800d43c:	2202      	movs	r2, #2
 800d43e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d440:	f001 feb6 	bl	800f1b0 <vTaskStartScheduler>
      stat = osOK;
 800d444:	2300      	movs	r3, #0
 800d446:	607b      	str	r3, [r7, #4]
 800d448:	e002      	b.n	800d450 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d44a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d44e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d450:	687b      	ldr	r3, [r7, #4]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	20003e2c 	.word	0x20003e2c

0800d460 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d460:	b580      	push	{r7, lr}
 800d462:	b08e      	sub	sp, #56	; 0x38
 800d464:	af04      	add	r7, sp, #16
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d46c:	2300      	movs	r3, #0
 800d46e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d470:	f3ef 8305 	mrs	r3, IPSR
 800d474:	617b      	str	r3, [r7, #20]
  return(result);
 800d476:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d17e      	bne.n	800d57a <osThreadNew+0x11a>
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d07b      	beq.n	800d57a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d482:	2380      	movs	r3, #128	; 0x80
 800d484:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d486:	2318      	movs	r3, #24
 800d488:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d48a:	2300      	movs	r3, #0
 800d48c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d48e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d492:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d045      	beq.n	800d526 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d002      	beq.n	800d4a8 <osThreadNew+0x48>
        name = attr->name;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	699b      	ldr	r3, [r3, #24]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d002      	beq.n	800d4b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	699b      	ldr	r3, [r3, #24]
 800d4b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d008      	beq.n	800d4ce <osThreadNew+0x6e>
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	2b38      	cmp	r3, #56	; 0x38
 800d4c0:	d805      	bhi.n	800d4ce <osThreadNew+0x6e>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	f003 0301 	and.w	r3, r3, #1
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d001      	beq.n	800d4d2 <osThreadNew+0x72>
        return (NULL);
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	e054      	b.n	800d57c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d003      	beq.n	800d4e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	695b      	ldr	r3, [r3, #20]
 800d4de:	089b      	lsrs	r3, r3, #2
 800d4e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	689b      	ldr	r3, [r3, #8]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00e      	beq.n	800d508 <osThreadNew+0xa8>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	2bbb      	cmp	r3, #187	; 0xbb
 800d4f0:	d90a      	bls.n	800d508 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d006      	beq.n	800d508 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d002      	beq.n	800d508 <osThreadNew+0xa8>
        mem = 1;
 800d502:	2301      	movs	r3, #1
 800d504:	61bb      	str	r3, [r7, #24]
 800d506:	e010      	b.n	800d52a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10c      	bne.n	800d52a <osThreadNew+0xca>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d108      	bne.n	800d52a <osThreadNew+0xca>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d104      	bne.n	800d52a <osThreadNew+0xca>
          mem = 0;
 800d520:	2300      	movs	r3, #0
 800d522:	61bb      	str	r3, [r7, #24]
 800d524:	e001      	b.n	800d52a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d526:	2300      	movs	r3, #0
 800d528:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d110      	bne.n	800d552 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d538:	9202      	str	r2, [sp, #8]
 800d53a:	9301      	str	r3, [sp, #4]
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	6a3a      	ldr	r2, [r7, #32]
 800d544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	f001 fc46 	bl	800edd8 <xTaskCreateStatic>
 800d54c:	4603      	mov	r3, r0
 800d54e:	613b      	str	r3, [r7, #16]
 800d550:	e013      	b.n	800d57a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d110      	bne.n	800d57a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d558:	6a3b      	ldr	r3, [r7, #32]
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	f107 0310 	add.w	r3, r7, #16
 800d560:	9301      	str	r3, [sp, #4]
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d56a:	68f8      	ldr	r0, [r7, #12]
 800d56c:	f001 fc91 	bl	800ee92 <xTaskCreate>
 800d570:	4603      	mov	r3, r0
 800d572:	2b01      	cmp	r3, #1
 800d574:	d001      	beq.n	800d57a <osThreadNew+0x11a>
            hTask = NULL;
 800d576:	2300      	movs	r3, #0
 800d578:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d57a:	693b      	ldr	r3, [r7, #16]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3728      	adds	r7, #40	; 0x28
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d58c:	f3ef 8305 	mrs	r3, IPSR
 800d590:	60bb      	str	r3, [r7, #8]
  return(result);
 800d592:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d594:	2b00      	cmp	r3, #0
 800d596:	d003      	beq.n	800d5a0 <osDelay+0x1c>
    stat = osErrorISR;
 800d598:	f06f 0305 	mvn.w	r3, #5
 800d59c:	60fb      	str	r3, [r7, #12]
 800d59e:	e007      	b.n	800d5b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d002      	beq.n	800d5b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f001 fdcc 	bl	800f148 <vTaskDelay>
    }
  }

  return (stat);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b088      	sub	sp, #32
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5c6:	f3ef 8305 	mrs	r3, IPSR
 800d5ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800d5cc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d174      	bne.n	800d6bc <osMutexNew+0x102>
    if (attr != NULL) {
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d003      	beq.n	800d5e0 <osMutexNew+0x26>
      type = attr->attr_bits;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	61bb      	str	r3, [r7, #24]
 800d5de:	e001      	b.n	800d5e4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	f003 0301 	and.w	r3, r3, #1
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d002      	beq.n	800d5f4 <osMutexNew+0x3a>
      rmtx = 1U;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	617b      	str	r3, [r7, #20]
 800d5f2:	e001      	b.n	800d5f8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	f003 0308 	and.w	r3, r3, #8
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d15c      	bne.n	800d6bc <osMutexNew+0x102>
      mem = -1;
 800d602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d606:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d015      	beq.n	800d63a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d006      	beq.n	800d624 <osMutexNew+0x6a>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	2b4f      	cmp	r3, #79	; 0x4f
 800d61c:	d902      	bls.n	800d624 <osMutexNew+0x6a>
          mem = 1;
 800d61e:	2301      	movs	r3, #1
 800d620:	613b      	str	r3, [r7, #16]
 800d622:	e00c      	b.n	800d63e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d108      	bne.n	800d63e <osMutexNew+0x84>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d104      	bne.n	800d63e <osMutexNew+0x84>
            mem = 0;
 800d634:	2300      	movs	r3, #0
 800d636:	613b      	str	r3, [r7, #16]
 800d638:	e001      	b.n	800d63e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d63a:	2300      	movs	r3, #0
 800d63c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d112      	bne.n	800d66a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d007      	beq.n	800d65a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	4619      	mov	r1, r3
 800d650:	2004      	movs	r0, #4
 800d652:	f000 fcf8 	bl	800e046 <xQueueCreateMutexStatic>
 800d656:	61f8      	str	r0, [r7, #28]
 800d658:	e016      	b.n	800d688 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	4619      	mov	r1, r3
 800d660:	2001      	movs	r0, #1
 800d662:	f000 fcf0 	bl	800e046 <xQueueCreateMutexStatic>
 800d666:	61f8      	str	r0, [r7, #28]
 800d668:	e00e      	b.n	800d688 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d10b      	bne.n	800d688 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d004      	beq.n	800d680 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d676:	2004      	movs	r0, #4
 800d678:	f000 fccd 	bl	800e016 <xQueueCreateMutex>
 800d67c:	61f8      	str	r0, [r7, #28]
 800d67e:	e003      	b.n	800d688 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d680:	2001      	movs	r0, #1
 800d682:	f000 fcc8 	bl	800e016 <xQueueCreateMutex>
 800d686:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00c      	beq.n	800d6a8 <osMutexNew+0xee>
        if (attr != NULL) {
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d003      	beq.n	800d69c <osMutexNew+0xe2>
          name = attr->name;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	60fb      	str	r3, [r7, #12]
 800d69a:	e001      	b.n	800d6a0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d69c:	2300      	movs	r3, #0
 800d69e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d6a0:	68f9      	ldr	r1, [r7, #12]
 800d6a2:	69f8      	ldr	r0, [r7, #28]
 800d6a4:	f001 fb10 	bl	800ecc8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d006      	beq.n	800d6bc <osMutexNew+0x102>
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d003      	beq.n	800d6bc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	f043 0301 	orr.w	r3, r3, #1
 800d6ba:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d6bc:	69fb      	ldr	r3, [r7, #28]
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3720      	adds	r7, #32
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b086      	sub	sp, #24
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
 800d6ce:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f023 0301 	bic.w	r3, r3, #1
 800d6d6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f003 0301 	and.w	r3, r3, #1
 800d6de:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6e4:	f3ef 8305 	mrs	r3, IPSR
 800d6e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d6ea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d003      	beq.n	800d6f8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800d6f0:	f06f 0305 	mvn.w	r3, #5
 800d6f4:	617b      	str	r3, [r7, #20]
 800d6f6:	e02c      	b.n	800d752 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d103      	bne.n	800d706 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800d6fe:	f06f 0303 	mvn.w	r3, #3
 800d702:	617b      	str	r3, [r7, #20]
 800d704:	e025      	b.n	800d752 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d011      	beq.n	800d730 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d70c:	6839      	ldr	r1, [r7, #0]
 800d70e:	6938      	ldr	r0, [r7, #16]
 800d710:	f000 fce8 	bl	800e0e4 <xQueueTakeMutexRecursive>
 800d714:	4603      	mov	r3, r0
 800d716:	2b01      	cmp	r3, #1
 800d718:	d01b      	beq.n	800d752 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d003      	beq.n	800d728 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d720:	f06f 0301 	mvn.w	r3, #1
 800d724:	617b      	str	r3, [r7, #20]
 800d726:	e014      	b.n	800d752 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d728:	f06f 0302 	mvn.w	r3, #2
 800d72c:	617b      	str	r3, [r7, #20]
 800d72e:	e010      	b.n	800d752 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d730:	6839      	ldr	r1, [r7, #0]
 800d732:	6938      	ldr	r0, [r7, #16]
 800d734:	f000 fff0 	bl	800e718 <xQueueSemaphoreTake>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d009      	beq.n	800d752 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d003      	beq.n	800d74c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d744:	f06f 0301 	mvn.w	r3, #1
 800d748:	617b      	str	r3, [r7, #20]
 800d74a:	e002      	b.n	800d752 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d74c:	f06f 0302 	mvn.w	r3, #2
 800d750:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d752:	697b      	ldr	r3, [r7, #20]
}
 800d754:	4618      	mov	r0, r3
 800d756:	3718      	adds	r7, #24
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b086      	sub	sp, #24
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f023 0301 	bic.w	r3, r3, #1
 800d76a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f003 0301 	and.w	r3, r3, #1
 800d772:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d774:	2300      	movs	r3, #0
 800d776:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d778:	f3ef 8305 	mrs	r3, IPSR
 800d77c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d77e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d780:	2b00      	cmp	r3, #0
 800d782:	d003      	beq.n	800d78c <osMutexRelease+0x30>
    stat = osErrorISR;
 800d784:	f06f 0305 	mvn.w	r3, #5
 800d788:	617b      	str	r3, [r7, #20]
 800d78a:	e01f      	b.n	800d7cc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d103      	bne.n	800d79a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d792:	f06f 0303 	mvn.w	r3, #3
 800d796:	617b      	str	r3, [r7, #20]
 800d798:	e018      	b.n	800d7cc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d009      	beq.n	800d7b4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d7a0:	6938      	ldr	r0, [r7, #16]
 800d7a2:	f000 fc6b 	bl	800e07c <xQueueGiveMutexRecursive>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d00f      	beq.n	800d7cc <osMutexRelease+0x70>
        stat = osErrorResource;
 800d7ac:	f06f 0302 	mvn.w	r3, #2
 800d7b0:	617b      	str	r3, [r7, #20]
 800d7b2:	e00b      	b.n	800d7cc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	6938      	ldr	r0, [r7, #16]
 800d7bc:	f000 fd32 	bl	800e224 <xQueueGenericSend>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d002      	beq.n	800d7cc <osMutexRelease+0x70>
        stat = osErrorResource;
 800d7c6:	f06f 0302 	mvn.w	r3, #2
 800d7ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d7cc:	697b      	ldr	r3, [r7, #20]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3718      	adds	r7, #24
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b086      	sub	sp, #24
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f023 0301 	bic.w	r3, r3, #1
 800d7e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7e6:	f3ef 8305 	mrs	r3, IPSR
 800d7ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7ec:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d003      	beq.n	800d7fa <osMutexDelete+0x24>
    stat = osErrorISR;
 800d7f2:	f06f 0305 	mvn.w	r3, #5
 800d7f6:	617b      	str	r3, [r7, #20]
 800d7f8:	e00e      	b.n	800d818 <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d103      	bne.n	800d808 <osMutexDelete+0x32>
    stat = osErrorParameter;
 800d800:	f06f 0303 	mvn.w	r3, #3
 800d804:	617b      	str	r3, [r7, #20]
 800d806:	e007      	b.n	800d818 <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 800d808:	6938      	ldr	r0, [r7, #16]
 800d80a:	f001 fa87 	bl	800ed1c <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 800d80e:	2300      	movs	r3, #0
 800d810:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 800d812:	6938      	ldr	r0, [r7, #16]
 800d814:	f001 f90c 	bl	800ea30 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d818:	697b      	ldr	r3, [r7, #20]
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3718      	adds	r7, #24
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <osSemaphoreNew>:
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d822:	b580      	push	{r7, lr}
 800d824:	b08a      	sub	sp, #40	; 0x28
 800d826:	af02      	add	r7, sp, #8
 800d828:	60f8      	str	r0, [r7, #12]
 800d82a:	60b9      	str	r1, [r7, #8]
 800d82c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d82e:	2300      	movs	r3, #0
 800d830:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d832:	f3ef 8305 	mrs	r3, IPSR
 800d836:	613b      	str	r3, [r7, #16]
  return(result);
 800d838:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d175      	bne.n	800d92a <osSemaphoreNew+0x108>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d072      	beq.n	800d92a <osSemaphoreNew+0x108>
 800d844:	68ba      	ldr	r2, [r7, #8]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d86e      	bhi.n	800d92a <osSemaphoreNew+0x108>
    mem = -1;
 800d84c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d850:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d015      	beq.n	800d884 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d006      	beq.n	800d86e <osSemaphoreNew+0x4c>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	2b4f      	cmp	r3, #79	; 0x4f
 800d866:	d902      	bls.n	800d86e <osSemaphoreNew+0x4c>
        mem = 1;
 800d868:	2301      	movs	r3, #1
 800d86a:	61bb      	str	r3, [r7, #24]
 800d86c:	e00c      	b.n	800d888 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d108      	bne.n	800d888 <osSemaphoreNew+0x66>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	68db      	ldr	r3, [r3, #12]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d104      	bne.n	800d888 <osSemaphoreNew+0x66>
          mem = 0;
 800d87e:	2300      	movs	r3, #0
 800d880:	61bb      	str	r3, [r7, #24]
 800d882:	e001      	b.n	800d888 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d884:	2300      	movs	r3, #0
 800d886:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d88e:	d04c      	beq.n	800d92a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2b01      	cmp	r3, #1
 800d894:	d128      	bne.n	800d8e8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d10a      	bne.n	800d8b2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	689b      	ldr	r3, [r3, #8]
 800d8a0:	2203      	movs	r2, #3
 800d8a2:	9200      	str	r2, [sp, #0]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	2001      	movs	r0, #1
 800d8aa:	f000 fac5 	bl	800de38 <xQueueGenericCreateStatic>
 800d8ae:	61f8      	str	r0, [r7, #28]
 800d8b0:	e005      	b.n	800d8be <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d8b2:	2203      	movs	r2, #3
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	2001      	movs	r0, #1
 800d8b8:	f000 fb36 	bl	800df28 <xQueueGenericCreate>
 800d8bc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d022      	beq.n	800d90a <osSemaphoreNew+0xe8>
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d01f      	beq.n	800d90a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	2100      	movs	r1, #0
 800d8d0:	69f8      	ldr	r0, [r7, #28]
 800d8d2:	f000 fca7 	bl	800e224 <xQueueGenericSend>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d016      	beq.n	800d90a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d8dc:	69f8      	ldr	r0, [r7, #28]
 800d8de:	f001 f8a7 	bl	800ea30 <vQueueDelete>
            hSemaphore = NULL;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	61fb      	str	r3, [r7, #28]
 800d8e6:	e010      	b.n	800d90a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d108      	bne.n	800d900 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	68b9      	ldr	r1, [r7, #8]
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f000 fc2a 	bl	800e150 <xQueueCreateCountingSemaphoreStatic>
 800d8fc:	61f8      	str	r0, [r7, #28]
 800d8fe:	e004      	b.n	800d90a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d900:	68b9      	ldr	r1, [r7, #8]
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f000 fc5b 	bl	800e1be <xQueueCreateCountingSemaphore>
 800d908:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00c      	beq.n	800d92a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d003      	beq.n	800d91e <osSemaphoreNew+0xfc>
          name = attr->name;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	617b      	str	r3, [r7, #20]
 800d91c:	e001      	b.n	800d922 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d91e:	2300      	movs	r3, #0
 800d920:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d922:	6979      	ldr	r1, [r7, #20]
 800d924:	69f8      	ldr	r0, [r7, #28]
 800d926:	f001 f9cf 	bl	800ecc8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d92a:	69fb      	ldr	r3, [r7, #28]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3720      	adds	r7, #32
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d934:	b580      	push	{r7, lr}
 800d936:	b08a      	sub	sp, #40	; 0x28
 800d938:	af02      	add	r7, sp, #8
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d940:	2300      	movs	r3, #0
 800d942:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d944:	f3ef 8305 	mrs	r3, IPSR
 800d948:	613b      	str	r3, [r7, #16]
  return(result);
 800d94a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d15f      	bne.n	800da10 <osMessageQueueNew+0xdc>
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d05c      	beq.n	800da10 <osMessageQueueNew+0xdc>
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d059      	beq.n	800da10 <osMessageQueueNew+0xdc>
    mem = -1;
 800d95c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d960:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d029      	beq.n	800d9bc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	689b      	ldr	r3, [r3, #8]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d012      	beq.n	800d996 <osMessageQueueNew+0x62>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	2b4f      	cmp	r3, #79	; 0x4f
 800d976:	d90e      	bls.n	800d996 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00a      	beq.n	800d996 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	695a      	ldr	r2, [r3, #20]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	68b9      	ldr	r1, [r7, #8]
 800d988:	fb01 f303 	mul.w	r3, r1, r3
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d302      	bcc.n	800d996 <osMessageQueueNew+0x62>
        mem = 1;
 800d990:	2301      	movs	r3, #1
 800d992:	61bb      	str	r3, [r7, #24]
 800d994:	e014      	b.n	800d9c0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d110      	bne.n	800d9c0 <osMessageQueueNew+0x8c>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10c      	bne.n	800d9c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d108      	bne.n	800d9c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	695b      	ldr	r3, [r3, #20]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d104      	bne.n	800d9c0 <osMessageQueueNew+0x8c>
          mem = 0;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	61bb      	str	r3, [r7, #24]
 800d9ba:	e001      	b.n	800d9c0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d10b      	bne.n	800d9de <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	691a      	ldr	r2, [r3, #16]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	9100      	str	r1, [sp, #0]
 800d9d2:	68b9      	ldr	r1, [r7, #8]
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f000 fa2f 	bl	800de38 <xQueueGenericCreateStatic>
 800d9da:	61f8      	str	r0, [r7, #28]
 800d9dc:	e008      	b.n	800d9f0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d105      	bne.n	800d9f0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	68b9      	ldr	r1, [r7, #8]
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f000 fa9d 	bl	800df28 <xQueueGenericCreate>
 800d9ee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00c      	beq.n	800da10 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d003      	beq.n	800da04 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	617b      	str	r3, [r7, #20]
 800da02:	e001      	b.n	800da08 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800da04:	2300      	movs	r3, #0
 800da06:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800da08:	6979      	ldr	r1, [r7, #20]
 800da0a:	69f8      	ldr	r0, [r7, #28]
 800da0c:	f001 f95c 	bl	800ecc8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800da10:	69fb      	ldr	r3, [r7, #28]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3720      	adds	r7, #32
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
	...

0800da1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b088      	sub	sp, #32
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	603b      	str	r3, [r7, #0]
 800da28:	4613      	mov	r3, r2
 800da2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800da30:	2300      	movs	r3, #0
 800da32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da34:	f3ef 8305 	mrs	r3, IPSR
 800da38:	617b      	str	r3, [r7, #20]
  return(result);
 800da3a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d028      	beq.n	800da92 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800da40:	69bb      	ldr	r3, [r7, #24]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d005      	beq.n	800da52 <osMessageQueuePut+0x36>
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <osMessageQueuePut+0x36>
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d003      	beq.n	800da5a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800da52:	f06f 0303 	mvn.w	r3, #3
 800da56:	61fb      	str	r3, [r7, #28]
 800da58:	e038      	b.n	800dacc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800da5a:	2300      	movs	r3, #0
 800da5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800da5e:	f107 0210 	add.w	r2, r7, #16
 800da62:	2300      	movs	r3, #0
 800da64:	68b9      	ldr	r1, [r7, #8]
 800da66:	69b8      	ldr	r0, [r7, #24]
 800da68:	f000 fcda 	bl	800e420 <xQueueGenericSendFromISR>
 800da6c:	4603      	mov	r3, r0
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d003      	beq.n	800da7a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800da72:	f06f 0302 	mvn.w	r3, #2
 800da76:	61fb      	str	r3, [r7, #28]
 800da78:	e028      	b.n	800dacc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d025      	beq.n	800dacc <osMessageQueuePut+0xb0>
 800da80:	4b15      	ldr	r3, [pc, #84]	; (800dad8 <osMessageQueuePut+0xbc>)
 800da82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da86:	601a      	str	r2, [r3, #0]
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	f3bf 8f6f 	isb	sy
 800da90:	e01c      	b.n	800dacc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d002      	beq.n	800da9e <osMessageQueuePut+0x82>
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d103      	bne.n	800daa6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800da9e:	f06f 0303 	mvn.w	r3, #3
 800daa2:	61fb      	str	r3, [r7, #28]
 800daa4:	e012      	b.n	800dacc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800daa6:	2300      	movs	r3, #0
 800daa8:	683a      	ldr	r2, [r7, #0]
 800daaa:	68b9      	ldr	r1, [r7, #8]
 800daac:	69b8      	ldr	r0, [r7, #24]
 800daae:	f000 fbb9 	bl	800e224 <xQueueGenericSend>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d009      	beq.n	800dacc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d003      	beq.n	800dac6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800dabe:	f06f 0301 	mvn.w	r3, #1
 800dac2:	61fb      	str	r3, [r7, #28]
 800dac4:	e002      	b.n	800dacc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800dac6:	f06f 0302 	mvn.w	r3, #2
 800daca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dacc:	69fb      	ldr	r3, [r7, #28]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3720      	adds	r7, #32
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	e000ed04 	.word	0xe000ed04

0800dadc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dadc:	b580      	push	{r7, lr}
 800dade:	b088      	sub	sp, #32
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
 800dae8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800daee:	2300      	movs	r3, #0
 800daf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daf2:	f3ef 8305 	mrs	r3, IPSR
 800daf6:	617b      	str	r3, [r7, #20]
  return(result);
 800daf8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d028      	beq.n	800db50 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d005      	beq.n	800db10 <osMessageQueueGet+0x34>
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d002      	beq.n	800db10 <osMessageQueueGet+0x34>
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d003      	beq.n	800db18 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800db10:	f06f 0303 	mvn.w	r3, #3
 800db14:	61fb      	str	r3, [r7, #28]
 800db16:	e037      	b.n	800db88 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800db18:	2300      	movs	r3, #0
 800db1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800db1c:	f107 0310 	add.w	r3, r7, #16
 800db20:	461a      	mov	r2, r3
 800db22:	68b9      	ldr	r1, [r7, #8]
 800db24:	69b8      	ldr	r0, [r7, #24]
 800db26:	f000 ff03 	bl	800e930 <xQueueReceiveFromISR>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d003      	beq.n	800db38 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800db30:	f06f 0302 	mvn.w	r3, #2
 800db34:	61fb      	str	r3, [r7, #28]
 800db36:	e027      	b.n	800db88 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d024      	beq.n	800db88 <osMessageQueueGet+0xac>
 800db3e:	4b15      	ldr	r3, [pc, #84]	; (800db94 <osMessageQueueGet+0xb8>)
 800db40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db44:	601a      	str	r2, [r3, #0]
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	f3bf 8f6f 	isb	sy
 800db4e:	e01b      	b.n	800db88 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d002      	beq.n	800db5c <osMessageQueueGet+0x80>
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d103      	bne.n	800db64 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800db5c:	f06f 0303 	mvn.w	r3, #3
 800db60:	61fb      	str	r3, [r7, #28]
 800db62:	e011      	b.n	800db88 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800db64:	683a      	ldr	r2, [r7, #0]
 800db66:	68b9      	ldr	r1, [r7, #8]
 800db68:	69b8      	ldr	r0, [r7, #24]
 800db6a:	f000 fcf5 	bl	800e558 <xQueueReceive>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b01      	cmp	r3, #1
 800db72:	d009      	beq.n	800db88 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d003      	beq.n	800db82 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800db7a:	f06f 0301 	mvn.w	r3, #1
 800db7e:	61fb      	str	r3, [r7, #28]
 800db80:	e002      	b.n	800db88 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800db82:	f06f 0302 	mvn.w	r3, #2
 800db86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800db88:	69fb      	ldr	r3, [r7, #28]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3720      	adds	r7, #32
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	e000ed04 	.word	0xe000ed04

0800db98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	4a07      	ldr	r2, [pc, #28]	; (800dbc4 <vApplicationGetIdleTaskMemory+0x2c>)
 800dba8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	4a06      	ldr	r2, [pc, #24]	; (800dbc8 <vApplicationGetIdleTaskMemory+0x30>)
 800dbae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2280      	movs	r2, #128	; 0x80
 800dbb4:	601a      	str	r2, [r3, #0]
}
 800dbb6:	bf00      	nop
 800dbb8:	3714      	adds	r7, #20
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop
 800dbc4:	20008e30 	.word	0x20008e30
 800dbc8:	20008eec 	.word	0x20008eec

0800dbcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	4a07      	ldr	r2, [pc, #28]	; (800dbf8 <vApplicationGetTimerTaskMemory+0x2c>)
 800dbdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	4a06      	ldr	r2, [pc, #24]	; (800dbfc <vApplicationGetTimerTaskMemory+0x30>)
 800dbe2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dbea:	601a      	str	r2, [r3, #0]
}
 800dbec:	bf00      	nop
 800dbee:	3714      	adds	r7, #20
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr
 800dbf8:	200090ec 	.word	0x200090ec
 800dbfc:	200091a8 	.word	0x200091a8

0800dc00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f103 0208 	add.w	r2, r3, #8
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f103 0208 	add.w	r2, r3, #8
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f103 0208 	add.w	r2, r3, #8
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dc34:	bf00      	nop
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dc4e:	bf00      	nop
 800dc50:	370c      	adds	r7, #12
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr

0800dc5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dc5a:	b480      	push	{r7}
 800dc5c:	b085      	sub	sp, #20
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
 800dc62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	689a      	ldr	r2, [r3, #8]
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	689b      	ldr	r3, [r3, #8]
 800dc7c:	683a      	ldr	r2, [r7, #0]
 800dc7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	683a      	ldr	r2, [r7, #0]
 800dc84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	1c5a      	adds	r2, r3, #1
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	601a      	str	r2, [r3, #0]
}
 800dc96:	bf00      	nop
 800dc98:	3714      	adds	r7, #20
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr

0800dca2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dca2:	b480      	push	{r7}
 800dca4:	b085      	sub	sp, #20
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
 800dcaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcb8:	d103      	bne.n	800dcc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	60fb      	str	r3, [r7, #12]
 800dcc0:	e00c      	b.n	800dcdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	3308      	adds	r3, #8
 800dcc6:	60fb      	str	r3, [r7, #12]
 800dcc8:	e002      	b.n	800dcd0 <vListInsert+0x2e>
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	60fb      	str	r3, [r7, #12]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	68ba      	ldr	r2, [r7, #8]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d2f6      	bcs.n	800dcca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	685a      	ldr	r2, [r3, #4]
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	683a      	ldr	r2, [r7, #0]
 800dcea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	68fa      	ldr	r2, [r7, #12]
 800dcf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	683a      	ldr	r2, [r7, #0]
 800dcf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	1c5a      	adds	r2, r3, #1
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	601a      	str	r2, [r3, #0]
}
 800dd08:	bf00      	nop
 800dd0a:	3714      	adds	r7, #20
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	6892      	ldr	r2, [r2, #8]
 800dd2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	6852      	ldr	r2, [r2, #4]
 800dd34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d103      	bne.n	800dd48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	689a      	ldr	r2, [r3, #8]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	1e5a      	subs	r2, r3, #1
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3714      	adds	r7, #20
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr

0800dd68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10a      	bne.n	800dd92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd80:	f383 8811 	msr	BASEPRI, r3
 800dd84:	f3bf 8f6f 	isb	sy
 800dd88:	f3bf 8f4f 	dsb	sy
 800dd8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dd8e:	bf00      	nop
 800dd90:	e7fe      	b.n	800dd90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dd92:	f002 fccf 	bl	8010734 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd9e:	68f9      	ldr	r1, [r7, #12]
 800dda0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dda2:	fb01 f303 	mul.w	r3, r1, r3
 800dda6:	441a      	add	r2, r3
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	68f9      	ldr	r1, [r7, #12]
 800ddc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ddc8:	fb01 f303 	mul.w	r3, r1, r3
 800ddcc:	441a      	add	r2, r3
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	22ff      	movs	r2, #255	; 0xff
 800ddd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	22ff      	movs	r2, #255	; 0xff
 800ddde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d114      	bne.n	800de12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d01a      	beq.n	800de26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	3310      	adds	r3, #16
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f001 fc75 	bl	800f6e4 <xTaskRemoveFromEventList>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d012      	beq.n	800de26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800de00:	4b0c      	ldr	r3, [pc, #48]	; (800de34 <xQueueGenericReset+0xcc>)
 800de02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de06:	601a      	str	r2, [r3, #0]
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	f3bf 8f6f 	isb	sy
 800de10:	e009      	b.n	800de26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	3310      	adds	r3, #16
 800de16:	4618      	mov	r0, r3
 800de18:	f7ff fef2 	bl	800dc00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	3324      	adds	r3, #36	; 0x24
 800de20:	4618      	mov	r0, r3
 800de22:	f7ff feed 	bl	800dc00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800de26:	f002 fcb5 	bl	8010794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800de2a:	2301      	movs	r3, #1
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3710      	adds	r7, #16
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	e000ed04 	.word	0xe000ed04

0800de38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08e      	sub	sp, #56	; 0x38
 800de3c:	af02      	add	r7, sp, #8
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
 800de44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d10a      	bne.n	800de62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800de4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de50:	f383 8811 	msr	BASEPRI, r3
 800de54:	f3bf 8f6f 	isb	sy
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800de5e:	bf00      	nop
 800de60:	e7fe      	b.n	800de60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10a      	bne.n	800de7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800de68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6c:	f383 8811 	msr	BASEPRI, r3
 800de70:	f3bf 8f6f 	isb	sy
 800de74:	f3bf 8f4f 	dsb	sy
 800de78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800de7a:	bf00      	nop
 800de7c:	e7fe      	b.n	800de7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <xQueueGenericCreateStatic+0x52>
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d001      	beq.n	800de8e <xQueueGenericCreateStatic+0x56>
 800de8a:	2301      	movs	r3, #1
 800de8c:	e000      	b.n	800de90 <xQueueGenericCreateStatic+0x58>
 800de8e:	2300      	movs	r3, #0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10a      	bne.n	800deaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800de94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	623b      	str	r3, [r7, #32]
}
 800dea6:	bf00      	nop
 800dea8:	e7fe      	b.n	800dea8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d102      	bne.n	800deb6 <xQueueGenericCreateStatic+0x7e>
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d101      	bne.n	800deba <xQueueGenericCreateStatic+0x82>
 800deb6:	2301      	movs	r3, #1
 800deb8:	e000      	b.n	800debc <xQueueGenericCreateStatic+0x84>
 800deba:	2300      	movs	r3, #0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10a      	bne.n	800ded6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800dec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec4:	f383 8811 	msr	BASEPRI, r3
 800dec8:	f3bf 8f6f 	isb	sy
 800decc:	f3bf 8f4f 	dsb	sy
 800ded0:	61fb      	str	r3, [r7, #28]
}
 800ded2:	bf00      	nop
 800ded4:	e7fe      	b.n	800ded4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ded6:	2350      	movs	r3, #80	; 0x50
 800ded8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	2b50      	cmp	r3, #80	; 0x50
 800dede:	d00a      	beq.n	800def6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	61bb      	str	r3, [r7, #24]
}
 800def2:	bf00      	nop
 800def4:	e7fe      	b.n	800def4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800def6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800defc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defe:	2b00      	cmp	r3, #0
 800df00:	d00d      	beq.n	800df1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800df02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df04:	2201      	movs	r2, #1
 800df06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800df0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df10:	9300      	str	r3, [sp, #0]
 800df12:	4613      	mov	r3, r2
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	68b9      	ldr	r1, [r7, #8]
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f000 f83f 	bl	800df9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800df20:	4618      	mov	r0, r3
 800df22:	3730      	adds	r7, #48	; 0x30
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b08a      	sub	sp, #40	; 0x28
 800df2c:	af02      	add	r7, sp, #8
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	4613      	mov	r3, r2
 800df34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10a      	bne.n	800df52 <xQueueGenericCreate+0x2a>
	__asm volatile
 800df3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df40:	f383 8811 	msr	BASEPRI, r3
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	613b      	str	r3, [r7, #16]
}
 800df4e:	bf00      	nop
 800df50:	e7fe      	b.n	800df50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	68ba      	ldr	r2, [r7, #8]
 800df56:	fb02 f303 	mul.w	r3, r2, r3
 800df5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	3350      	adds	r3, #80	; 0x50
 800df60:	4618      	mov	r0, r3
 800df62:	f002 fd09 	bl	8010978 <pvPortMalloc>
 800df66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d011      	beq.n	800df92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	3350      	adds	r3, #80	; 0x50
 800df76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800df78:	69bb      	ldr	r3, [r7, #24]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df80:	79fa      	ldrb	r2, [r7, #7]
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	4613      	mov	r3, r2
 800df88:	697a      	ldr	r2, [r7, #20]
 800df8a:	68b9      	ldr	r1, [r7, #8]
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f000 f805 	bl	800df9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df92:	69bb      	ldr	r3, [r7, #24]
	}
 800df94:	4618      	mov	r0, r3
 800df96:	3720      	adds	r7, #32
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
 800dfa8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d103      	bne.n	800dfb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	69ba      	ldr	r2, [r7, #24]
 800dfb4:	601a      	str	r2, [r3, #0]
 800dfb6:	e002      	b.n	800dfbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	68ba      	ldr	r2, [r7, #8]
 800dfc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dfca:	2101      	movs	r1, #1
 800dfcc:	69b8      	ldr	r0, [r7, #24]
 800dfce:	f7ff fecb 	bl	800dd68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	78fa      	ldrb	r2, [r7, #3]
 800dfd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dfda:	bf00      	nop
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b082      	sub	sp, #8
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d00e      	beq.n	800e00e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e002:	2300      	movs	r3, #0
 800e004:	2200      	movs	r2, #0
 800e006:	2100      	movs	r1, #0
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 f90b 	bl	800e224 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e00e:	bf00      	nop
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e016:	b580      	push	{r7, lr}
 800e018:	b086      	sub	sp, #24
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	4603      	mov	r3, r0
 800e01e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e020:	2301      	movs	r3, #1
 800e022:	617b      	str	r3, [r7, #20]
 800e024:	2300      	movs	r3, #0
 800e026:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e028:	79fb      	ldrb	r3, [r7, #7]
 800e02a:	461a      	mov	r2, r3
 800e02c:	6939      	ldr	r1, [r7, #16]
 800e02e:	6978      	ldr	r0, [r7, #20]
 800e030:	f7ff ff7a 	bl	800df28 <xQueueGenericCreate>
 800e034:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	f7ff ffd3 	bl	800dfe2 <prvInitialiseMutex>

		return xNewQueue;
 800e03c:	68fb      	ldr	r3, [r7, #12]
	}
 800e03e:	4618      	mov	r0, r3
 800e040:	3718      	adds	r7, #24
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e046:	b580      	push	{r7, lr}
 800e048:	b088      	sub	sp, #32
 800e04a:	af02      	add	r7, sp, #8
 800e04c:	4603      	mov	r3, r0
 800e04e:	6039      	str	r1, [r7, #0]
 800e050:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e052:	2301      	movs	r3, #1
 800e054:	617b      	str	r3, [r7, #20]
 800e056:	2300      	movs	r3, #0
 800e058:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e05a:	79fb      	ldrb	r3, [r7, #7]
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	2200      	movs	r2, #0
 800e062:	6939      	ldr	r1, [r7, #16]
 800e064:	6978      	ldr	r0, [r7, #20]
 800e066:	f7ff fee7 	bl	800de38 <xQueueGenericCreateStatic>
 800e06a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f7ff ffb8 	bl	800dfe2 <prvInitialiseMutex>

		return xNewQueue;
 800e072:	68fb      	ldr	r3, [r7, #12]
	}
 800e074:	4618      	mov	r0, r3
 800e076:	3718      	adds	r7, #24
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e07c:	b590      	push	{r4, r7, lr}
 800e07e:	b087      	sub	sp, #28
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10a      	bne.n	800e0a4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800e08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	60fb      	str	r3, [r7, #12]
}
 800e0a0:	bf00      	nop
 800e0a2:	e7fe      	b.n	800e0a2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	689c      	ldr	r4, [r3, #8]
 800e0a8:	f001 fcde 	bl	800fa68 <xTaskGetCurrentTaskHandle>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	429c      	cmp	r4, r3
 800e0b0:	d111      	bne.n	800e0d6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	1e5a      	subs	r2, r3, #1
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d105      	bne.n	800e0d0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	6938      	ldr	r0, [r7, #16]
 800e0cc:	f000 f8aa 	bl	800e224 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	617b      	str	r3, [r7, #20]
 800e0d4:	e001      	b.n	800e0da <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e0da:	697b      	ldr	r3, [r7, #20]
	}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	371c      	adds	r7, #28
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd90      	pop	{r4, r7, pc}

0800e0e4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e0e4:	b590      	push	{r4, r7, lr}
 800e0e6:	b087      	sub	sp, #28
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10a      	bne.n	800e10e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	60fb      	str	r3, [r7, #12]
}
 800e10a:	bf00      	nop
 800e10c:	e7fe      	b.n	800e10c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	689c      	ldr	r4, [r3, #8]
 800e112:	f001 fca9 	bl	800fa68 <xTaskGetCurrentTaskHandle>
 800e116:	4603      	mov	r3, r0
 800e118:	429c      	cmp	r4, r3
 800e11a:	d107      	bne.n	800e12c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	1c5a      	adds	r2, r3, #1
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e126:	2301      	movs	r3, #1
 800e128:	617b      	str	r3, [r7, #20]
 800e12a:	e00c      	b.n	800e146 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e12c:	6839      	ldr	r1, [r7, #0]
 800e12e:	6938      	ldr	r0, [r7, #16]
 800e130:	f000 faf2 	bl	800e718 <xQueueSemaphoreTake>
 800e134:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d004      	beq.n	800e146 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	68db      	ldr	r3, [r3, #12]
 800e140:	1c5a      	adds	r2, r3, #1
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e146:	697b      	ldr	r3, [r7, #20]
	}
 800e148:	4618      	mov	r0, r3
 800e14a:	371c      	adds	r7, #28
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd90      	pop	{r4, r7, pc}

0800e150 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e150:	b580      	push	{r7, lr}
 800e152:	b08a      	sub	sp, #40	; 0x28
 800e154:	af02      	add	r7, sp, #8
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d10a      	bne.n	800e178 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	61bb      	str	r3, [r7, #24]
}
 800e174:	bf00      	nop
 800e176:	e7fe      	b.n	800e176 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e178:	68ba      	ldr	r2, [r7, #8]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d90a      	bls.n	800e196 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	617b      	str	r3, [r7, #20]
}
 800e192:	bf00      	nop
 800e194:	e7fe      	b.n	800e194 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e196:	2302      	movs	r3, #2
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	2100      	movs	r1, #0
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	f7ff fe49 	bl	800de38 <xQueueGenericCreateStatic>
 800e1a6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d002      	beq.n	800e1b4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	68ba      	ldr	r2, [r7, #8]
 800e1b2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e1b4:	69fb      	ldr	r3, [r7, #28]
	}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3720      	adds	r7, #32
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b086      	sub	sp, #24
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d10a      	bne.n	800e1e4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	613b      	str	r3, [r7, #16]
}
 800e1e0:	bf00      	nop
 800e1e2:	e7fe      	b.n	800e1e2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e1e4:	683a      	ldr	r2, [r7, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d90a      	bls.n	800e202 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f0:	f383 8811 	msr	BASEPRI, r3
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	f3bf 8f4f 	dsb	sy
 800e1fc:	60fb      	str	r3, [r7, #12]
}
 800e1fe:	bf00      	nop
 800e200:	e7fe      	b.n	800e200 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e202:	2202      	movs	r2, #2
 800e204:	2100      	movs	r1, #0
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7ff fe8e 	bl	800df28 <xQueueGenericCreate>
 800e20c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d002      	beq.n	800e21a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	683a      	ldr	r2, [r7, #0]
 800e218:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e21a:	697b      	ldr	r3, [r7, #20]
	}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3718      	adds	r7, #24
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b08e      	sub	sp, #56	; 0x38
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
 800e230:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e232:	2300      	movs	r3, #0
 800e234:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10a      	bne.n	800e256 <xQueueGenericSend+0x32>
	__asm volatile
 800e240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e244:	f383 8811 	msr	BASEPRI, r3
 800e248:	f3bf 8f6f 	isb	sy
 800e24c:	f3bf 8f4f 	dsb	sy
 800e250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e252:	bf00      	nop
 800e254:	e7fe      	b.n	800e254 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d103      	bne.n	800e264 <xQueueGenericSend+0x40>
 800e25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e260:	2b00      	cmp	r3, #0
 800e262:	d101      	bne.n	800e268 <xQueueGenericSend+0x44>
 800e264:	2301      	movs	r3, #1
 800e266:	e000      	b.n	800e26a <xQueueGenericSend+0x46>
 800e268:	2300      	movs	r3, #0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10a      	bne.n	800e284 <xQueueGenericSend+0x60>
	__asm volatile
 800e26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e280:	bf00      	nop
 800e282:	e7fe      	b.n	800e282 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	2b02      	cmp	r3, #2
 800e288:	d103      	bne.n	800e292 <xQueueGenericSend+0x6e>
 800e28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d101      	bne.n	800e296 <xQueueGenericSend+0x72>
 800e292:	2301      	movs	r3, #1
 800e294:	e000      	b.n	800e298 <xQueueGenericSend+0x74>
 800e296:	2300      	movs	r3, #0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d10a      	bne.n	800e2b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800e29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a0:	f383 8811 	msr	BASEPRI, r3
 800e2a4:	f3bf 8f6f 	isb	sy
 800e2a8:	f3bf 8f4f 	dsb	sy
 800e2ac:	623b      	str	r3, [r7, #32]
}
 800e2ae:	bf00      	nop
 800e2b0:	e7fe      	b.n	800e2b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2b2:	f001 fbe9 	bl	800fa88 <xTaskGetSchedulerState>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d102      	bne.n	800e2c2 <xQueueGenericSend+0x9e>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d101      	bne.n	800e2c6 <xQueueGenericSend+0xa2>
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	e000      	b.n	800e2c8 <xQueueGenericSend+0xa4>
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d10a      	bne.n	800e2e2 <xQueueGenericSend+0xbe>
	__asm volatile
 800e2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d0:	f383 8811 	msr	BASEPRI, r3
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	61fb      	str	r3, [r7, #28]
}
 800e2de:	bf00      	nop
 800e2e0:	e7fe      	b.n	800e2e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2e2:	f002 fa27 	bl	8010734 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d302      	bcc.n	800e2f8 <xQueueGenericSend+0xd4>
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	d129      	bne.n	800e34c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2f8:	683a      	ldr	r2, [r7, #0]
 800e2fa:	68b9      	ldr	r1, [r7, #8]
 800e2fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2fe:	f000 fbd2 	bl	800eaa6 <prvCopyDataToQueue>
 800e302:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d010      	beq.n	800e32e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30e:	3324      	adds	r3, #36	; 0x24
 800e310:	4618      	mov	r0, r3
 800e312:	f001 f9e7 	bl	800f6e4 <xTaskRemoveFromEventList>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d013      	beq.n	800e344 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e31c:	4b3f      	ldr	r3, [pc, #252]	; (800e41c <xQueueGenericSend+0x1f8>)
 800e31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	f3bf 8f4f 	dsb	sy
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	e00a      	b.n	800e344 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e330:	2b00      	cmp	r3, #0
 800e332:	d007      	beq.n	800e344 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e334:	4b39      	ldr	r3, [pc, #228]	; (800e41c <xQueueGenericSend+0x1f8>)
 800e336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e33a:	601a      	str	r2, [r3, #0]
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e344:	f002 fa26 	bl	8010794 <vPortExitCritical>
				return pdPASS;
 800e348:	2301      	movs	r3, #1
 800e34a:	e063      	b.n	800e414 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d103      	bne.n	800e35a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e352:	f002 fa1f 	bl	8010794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e356:	2300      	movs	r3, #0
 800e358:	e05c      	b.n	800e414 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d106      	bne.n	800e36e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e360:	f107 0314 	add.w	r3, r7, #20
 800e364:	4618      	mov	r0, r3
 800e366:	f001 fa21 	bl	800f7ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e36a:	2301      	movs	r3, #1
 800e36c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e36e:	f002 fa11 	bl	8010794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e372:	f000 ff8d 	bl	800f290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e376:	f002 f9dd 	bl	8010734 <vPortEnterCritical>
 800e37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e380:	b25b      	sxtb	r3, r3
 800e382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e386:	d103      	bne.n	800e390 <xQueueGenericSend+0x16c>
 800e388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38a:	2200      	movs	r2, #0
 800e38c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e396:	b25b      	sxtb	r3, r3
 800e398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e39c:	d103      	bne.n	800e3a6 <xQueueGenericSend+0x182>
 800e39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3a6:	f002 f9f5 	bl	8010794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3aa:	1d3a      	adds	r2, r7, #4
 800e3ac:	f107 0314 	add.w	r3, r7, #20
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f001 fa10 	bl	800f7d8 <xTaskCheckForTimeOut>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d124      	bne.n	800e408 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e3be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3c0:	f000 fc69 	bl	800ec96 <prvIsQueueFull>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d018      	beq.n	800e3fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3cc:	3310      	adds	r3, #16
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f001 f936 	bl	800f644 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e3d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3da:	f000 fbf4 	bl	800ebc6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e3de:	f000 ff65 	bl	800f2ac <xTaskResumeAll>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	f47f af7c 	bne.w	800e2e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e3ea:	4b0c      	ldr	r3, [pc, #48]	; (800e41c <xQueueGenericSend+0x1f8>)
 800e3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3f0:	601a      	str	r2, [r3, #0]
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	e772      	b.n	800e2e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e3fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3fe:	f000 fbe2 	bl	800ebc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e402:	f000 ff53 	bl	800f2ac <xTaskResumeAll>
 800e406:	e76c      	b.n	800e2e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e40a:	f000 fbdc 	bl	800ebc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e40e:	f000 ff4d 	bl	800f2ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e412:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e414:	4618      	mov	r0, r3
 800e416:	3738      	adds	r7, #56	; 0x38
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	e000ed04 	.word	0xe000ed04

0800e420 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b090      	sub	sp, #64	; 0x40
 800e424:	af00      	add	r7, sp, #0
 800e426:	60f8      	str	r0, [r7, #12]
 800e428:	60b9      	str	r1, [r7, #8]
 800e42a:	607a      	str	r2, [r7, #4]
 800e42c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10a      	bne.n	800e44e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43c:	f383 8811 	msr	BASEPRI, r3
 800e440:	f3bf 8f6f 	isb	sy
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e44a:	bf00      	nop
 800e44c:	e7fe      	b.n	800e44c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d103      	bne.n	800e45c <xQueueGenericSendFromISR+0x3c>
 800e454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d101      	bne.n	800e460 <xQueueGenericSendFromISR+0x40>
 800e45c:	2301      	movs	r3, #1
 800e45e:	e000      	b.n	800e462 <xQueueGenericSendFromISR+0x42>
 800e460:	2300      	movs	r3, #0
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10a      	bne.n	800e47c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46a:	f383 8811 	msr	BASEPRI, r3
 800e46e:	f3bf 8f6f 	isb	sy
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e478:	bf00      	nop
 800e47a:	e7fe      	b.n	800e47a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	2b02      	cmp	r3, #2
 800e480:	d103      	bne.n	800e48a <xQueueGenericSendFromISR+0x6a>
 800e482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e486:	2b01      	cmp	r3, #1
 800e488:	d101      	bne.n	800e48e <xQueueGenericSendFromISR+0x6e>
 800e48a:	2301      	movs	r3, #1
 800e48c:	e000      	b.n	800e490 <xQueueGenericSendFromISR+0x70>
 800e48e:	2300      	movs	r3, #0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d10a      	bne.n	800e4aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e498:	f383 8811 	msr	BASEPRI, r3
 800e49c:	f3bf 8f6f 	isb	sy
 800e4a0:	f3bf 8f4f 	dsb	sy
 800e4a4:	623b      	str	r3, [r7, #32]
}
 800e4a6:	bf00      	nop
 800e4a8:	e7fe      	b.n	800e4a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4aa:	f002 fa25 	bl	80108f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e4ae:	f3ef 8211 	mrs	r2, BASEPRI
 800e4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b6:	f383 8811 	msr	BASEPRI, r3
 800e4ba:	f3bf 8f6f 	isb	sy
 800e4be:	f3bf 8f4f 	dsb	sy
 800e4c2:	61fa      	str	r2, [r7, #28]
 800e4c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e4c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d302      	bcc.n	800e4dc <xQueueGenericSendFromISR+0xbc>
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	2b02      	cmp	r3, #2
 800e4da:	d12f      	bne.n	800e53c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4ec:	683a      	ldr	r2, [r7, #0]
 800e4ee:	68b9      	ldr	r1, [r7, #8]
 800e4f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4f2:	f000 fad8 	bl	800eaa6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e4f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e4fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4fe:	d112      	bne.n	800e526 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e504:	2b00      	cmp	r3, #0
 800e506:	d016      	beq.n	800e536 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50a:	3324      	adds	r3, #36	; 0x24
 800e50c:	4618      	mov	r0, r3
 800e50e:	f001 f8e9 	bl	800f6e4 <xTaskRemoveFromEventList>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00e      	beq.n	800e536 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00b      	beq.n	800e536 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2201      	movs	r2, #1
 800e522:	601a      	str	r2, [r3, #0]
 800e524:	e007      	b.n	800e536 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e526:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e52a:	3301      	adds	r3, #1
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	b25a      	sxtb	r2, r3
 800e530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e536:	2301      	movs	r3, #1
 800e538:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e53a:	e001      	b.n	800e540 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e53c:	2300      	movs	r3, #0
 800e53e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e542:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e54a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3740      	adds	r7, #64	; 0x40
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
	...

0800e558 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b08c      	sub	sp, #48	; 0x30
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e564:	2300      	movs	r3, #0
 800e566:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d10a      	bne.n	800e588 <xQueueReceive+0x30>
	__asm volatile
 800e572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e576:	f383 8811 	msr	BASEPRI, r3
 800e57a:	f3bf 8f6f 	isb	sy
 800e57e:	f3bf 8f4f 	dsb	sy
 800e582:	623b      	str	r3, [r7, #32]
}
 800e584:	bf00      	nop
 800e586:	e7fe      	b.n	800e586 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d103      	bne.n	800e596 <xQueueReceive+0x3e>
 800e58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e592:	2b00      	cmp	r3, #0
 800e594:	d101      	bne.n	800e59a <xQueueReceive+0x42>
 800e596:	2301      	movs	r3, #1
 800e598:	e000      	b.n	800e59c <xQueueReceive+0x44>
 800e59a:	2300      	movs	r3, #0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d10a      	bne.n	800e5b6 <xQueueReceive+0x5e>
	__asm volatile
 800e5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a4:	f383 8811 	msr	BASEPRI, r3
 800e5a8:	f3bf 8f6f 	isb	sy
 800e5ac:	f3bf 8f4f 	dsb	sy
 800e5b0:	61fb      	str	r3, [r7, #28]
}
 800e5b2:	bf00      	nop
 800e5b4:	e7fe      	b.n	800e5b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5b6:	f001 fa67 	bl	800fa88 <xTaskGetSchedulerState>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d102      	bne.n	800e5c6 <xQueueReceive+0x6e>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d101      	bne.n	800e5ca <xQueueReceive+0x72>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e000      	b.n	800e5cc <xQueueReceive+0x74>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d10a      	bne.n	800e5e6 <xQueueReceive+0x8e>
	__asm volatile
 800e5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d4:	f383 8811 	msr	BASEPRI, r3
 800e5d8:	f3bf 8f6f 	isb	sy
 800e5dc:	f3bf 8f4f 	dsb	sy
 800e5e0:	61bb      	str	r3, [r7, #24]
}
 800e5e2:	bf00      	nop
 800e5e4:	e7fe      	b.n	800e5e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5e6:	f002 f8a5 	bl	8010734 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d01f      	beq.n	800e636 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e5f6:	68b9      	ldr	r1, [r7, #8]
 800e5f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5fa:	f000 fabe 	bl	800eb7a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e600:	1e5a      	subs	r2, r3, #1
 800e602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e604:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e608:	691b      	ldr	r3, [r3, #16]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d00f      	beq.n	800e62e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e610:	3310      	adds	r3, #16
 800e612:	4618      	mov	r0, r3
 800e614:	f001 f866 	bl	800f6e4 <xTaskRemoveFromEventList>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d007      	beq.n	800e62e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e61e:	4b3d      	ldr	r3, [pc, #244]	; (800e714 <xQueueReceive+0x1bc>)
 800e620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e624:	601a      	str	r2, [r3, #0]
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e62e:	f002 f8b1 	bl	8010794 <vPortExitCritical>
				return pdPASS;
 800e632:	2301      	movs	r3, #1
 800e634:	e069      	b.n	800e70a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d103      	bne.n	800e644 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e63c:	f002 f8aa 	bl	8010794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e640:	2300      	movs	r3, #0
 800e642:	e062      	b.n	800e70a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e646:	2b00      	cmp	r3, #0
 800e648:	d106      	bne.n	800e658 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e64a:	f107 0310 	add.w	r3, r7, #16
 800e64e:	4618      	mov	r0, r3
 800e650:	f001 f8ac 	bl	800f7ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e654:	2301      	movs	r3, #1
 800e656:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e658:	f002 f89c 	bl	8010794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e65c:	f000 fe18 	bl	800f290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e660:	f002 f868 	bl	8010734 <vPortEnterCritical>
 800e664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e66a:	b25b      	sxtb	r3, r3
 800e66c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e670:	d103      	bne.n	800e67a <xQueueReceive+0x122>
 800e672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e674:	2200      	movs	r2, #0
 800e676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e680:	b25b      	sxtb	r3, r3
 800e682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e686:	d103      	bne.n	800e690 <xQueueReceive+0x138>
 800e688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68a:	2200      	movs	r2, #0
 800e68c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e690:	f002 f880 	bl	8010794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e694:	1d3a      	adds	r2, r7, #4
 800e696:	f107 0310 	add.w	r3, r7, #16
 800e69a:	4611      	mov	r1, r2
 800e69c:	4618      	mov	r0, r3
 800e69e:	f001 f89b 	bl	800f7d8 <xTaskCheckForTimeOut>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d123      	bne.n	800e6f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6aa:	f000 fade 	bl	800ec6a <prvIsQueueEmpty>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d017      	beq.n	800e6e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b6:	3324      	adds	r3, #36	; 0x24
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	4611      	mov	r1, r2
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f000 ffc1 	bl	800f644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e6c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6c4:	f000 fa7f 	bl	800ebc6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e6c8:	f000 fdf0 	bl	800f2ac <xTaskResumeAll>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d189      	bne.n	800e5e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e6d2:	4b10      	ldr	r3, [pc, #64]	; (800e714 <xQueueReceive+0x1bc>)
 800e6d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6d8:	601a      	str	r2, [r3, #0]
 800e6da:	f3bf 8f4f 	dsb	sy
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	e780      	b.n	800e5e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e6e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6e6:	f000 fa6e 	bl	800ebc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e6ea:	f000 fddf 	bl	800f2ac <xTaskResumeAll>
 800e6ee:	e77a      	b.n	800e5e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e6f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6f2:	f000 fa68 	bl	800ebc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e6f6:	f000 fdd9 	bl	800f2ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6fc:	f000 fab5 	bl	800ec6a <prvIsQueueEmpty>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	f43f af6f 	beq.w	800e5e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e708:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3730      	adds	r7, #48	; 0x30
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	e000ed04 	.word	0xe000ed04

0800e718 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b08e      	sub	sp, #56	; 0x38
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e722:	2300      	movs	r3, #0
 800e724:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e72a:	2300      	movs	r3, #0
 800e72c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e730:	2b00      	cmp	r3, #0
 800e732:	d10a      	bne.n	800e74a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e738:	f383 8811 	msr	BASEPRI, r3
 800e73c:	f3bf 8f6f 	isb	sy
 800e740:	f3bf 8f4f 	dsb	sy
 800e744:	623b      	str	r3, [r7, #32]
}
 800e746:	bf00      	nop
 800e748:	e7fe      	b.n	800e748 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00a      	beq.n	800e768 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e756:	f383 8811 	msr	BASEPRI, r3
 800e75a:	f3bf 8f6f 	isb	sy
 800e75e:	f3bf 8f4f 	dsb	sy
 800e762:	61fb      	str	r3, [r7, #28]
}
 800e764:	bf00      	nop
 800e766:	e7fe      	b.n	800e766 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e768:	f001 f98e 	bl	800fa88 <xTaskGetSchedulerState>
 800e76c:	4603      	mov	r3, r0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d102      	bne.n	800e778 <xQueueSemaphoreTake+0x60>
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d101      	bne.n	800e77c <xQueueSemaphoreTake+0x64>
 800e778:	2301      	movs	r3, #1
 800e77a:	e000      	b.n	800e77e <xQueueSemaphoreTake+0x66>
 800e77c:	2300      	movs	r3, #0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d10a      	bne.n	800e798 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e786:	f383 8811 	msr	BASEPRI, r3
 800e78a:	f3bf 8f6f 	isb	sy
 800e78e:	f3bf 8f4f 	dsb	sy
 800e792:	61bb      	str	r3, [r7, #24]
}
 800e794:	bf00      	nop
 800e796:	e7fe      	b.n	800e796 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e798:	f001 ffcc 	bl	8010734 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d024      	beq.n	800e7f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7aa:	1e5a      	subs	r2, r3, #1
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d104      	bne.n	800e7c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e7b8:	f001 fadc 	bl	800fd74 <pvTaskIncrementMutexHeldCount>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c4:	691b      	ldr	r3, [r3, #16]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d00f      	beq.n	800e7ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7cc:	3310      	adds	r3, #16
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f000 ff88 	bl	800f6e4 <xTaskRemoveFromEventList>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d007      	beq.n	800e7ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e7da:	4b54      	ldr	r3, [pc, #336]	; (800e92c <xQueueSemaphoreTake+0x214>)
 800e7dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7e0:	601a      	str	r2, [r3, #0]
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e7ea:	f001 ffd3 	bl	8010794 <vPortExitCritical>
				return pdPASS;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	e097      	b.n	800e922 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d111      	bne.n	800e81c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00a      	beq.n	800e814 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e802:	f383 8811 	msr	BASEPRI, r3
 800e806:	f3bf 8f6f 	isb	sy
 800e80a:	f3bf 8f4f 	dsb	sy
 800e80e:	617b      	str	r3, [r7, #20]
}
 800e810:	bf00      	nop
 800e812:	e7fe      	b.n	800e812 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e814:	f001 ffbe 	bl	8010794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e818:	2300      	movs	r3, #0
 800e81a:	e082      	b.n	800e922 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d106      	bne.n	800e830 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e822:	f107 030c 	add.w	r3, r7, #12
 800e826:	4618      	mov	r0, r3
 800e828:	f000 ffc0 	bl	800f7ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e82c:	2301      	movs	r3, #1
 800e82e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e830:	f001 ffb0 	bl	8010794 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e834:	f000 fd2c 	bl	800f290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e838:	f001 ff7c 	bl	8010734 <vPortEnterCritical>
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e842:	b25b      	sxtb	r3, r3
 800e844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e848:	d103      	bne.n	800e852 <xQueueSemaphoreTake+0x13a>
 800e84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84c:	2200      	movs	r2, #0
 800e84e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e858:	b25b      	sxtb	r3, r3
 800e85a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e85e:	d103      	bne.n	800e868 <xQueueSemaphoreTake+0x150>
 800e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e862:	2200      	movs	r2, #0
 800e864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e868:	f001 ff94 	bl	8010794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e86c:	463a      	mov	r2, r7
 800e86e:	f107 030c 	add.w	r3, r7, #12
 800e872:	4611      	mov	r1, r2
 800e874:	4618      	mov	r0, r3
 800e876:	f000 ffaf 	bl	800f7d8 <xTaskCheckForTimeOut>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d132      	bne.n	800e8e6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e882:	f000 f9f2 	bl	800ec6a <prvIsQueueEmpty>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d026      	beq.n	800e8da <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d109      	bne.n	800e8a8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e894:	f001 ff4e 	bl	8010734 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	4618      	mov	r0, r3
 800e89e:	f001 f911 	bl	800fac4 <xTaskPriorityInherit>
 800e8a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e8a4:	f001 ff76 	bl	8010794 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8aa:	3324      	adds	r3, #36	; 0x24
 800e8ac:	683a      	ldr	r2, [r7, #0]
 800e8ae:	4611      	mov	r1, r2
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f000 fec7 	bl	800f644 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e8b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8b8:	f000 f985 	bl	800ebc6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e8bc:	f000 fcf6 	bl	800f2ac <xTaskResumeAll>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	f47f af68 	bne.w	800e798 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e8c8:	4b18      	ldr	r3, [pc, #96]	; (800e92c <xQueueSemaphoreTake+0x214>)
 800e8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ce:	601a      	str	r2, [r3, #0]
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	f3bf 8f6f 	isb	sy
 800e8d8:	e75e      	b.n	800e798 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e8da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8dc:	f000 f973 	bl	800ebc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e8e0:	f000 fce4 	bl	800f2ac <xTaskResumeAll>
 800e8e4:	e758      	b.n	800e798 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e8e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8e8:	f000 f96d 	bl	800ebc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e8ec:	f000 fcde 	bl	800f2ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8f2:	f000 f9ba 	bl	800ec6a <prvIsQueueEmpty>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f43f af4d 	beq.w	800e798 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00d      	beq.n	800e920 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e904:	f001 ff16 	bl	8010734 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e908:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e90a:	f000 f8b4 	bl	800ea76 <prvGetDisinheritPriorityAfterTimeout>
 800e90e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e912:	689b      	ldr	r3, [r3, #8]
 800e914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e916:	4618      	mov	r0, r3
 800e918:	f001 f9aa 	bl	800fc70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e91c:	f001 ff3a 	bl	8010794 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e920:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e922:	4618      	mov	r0, r3
 800e924:	3738      	adds	r7, #56	; 0x38
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	e000ed04 	.word	0xe000ed04

0800e930 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b08e      	sub	sp, #56	; 0x38
 800e934:	af00      	add	r7, sp, #0
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e942:	2b00      	cmp	r3, #0
 800e944:	d10a      	bne.n	800e95c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94a:	f383 8811 	msr	BASEPRI, r3
 800e94e:	f3bf 8f6f 	isb	sy
 800e952:	f3bf 8f4f 	dsb	sy
 800e956:	623b      	str	r3, [r7, #32]
}
 800e958:	bf00      	nop
 800e95a:	e7fe      	b.n	800e95a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d103      	bne.n	800e96a <xQueueReceiveFromISR+0x3a>
 800e962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e966:	2b00      	cmp	r3, #0
 800e968:	d101      	bne.n	800e96e <xQueueReceiveFromISR+0x3e>
 800e96a:	2301      	movs	r3, #1
 800e96c:	e000      	b.n	800e970 <xQueueReceiveFromISR+0x40>
 800e96e:	2300      	movs	r3, #0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10a      	bne.n	800e98a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e978:	f383 8811 	msr	BASEPRI, r3
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	61fb      	str	r3, [r7, #28]
}
 800e986:	bf00      	nop
 800e988:	e7fe      	b.n	800e988 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e98a:	f001 ffb5 	bl	80108f8 <vPortValidateInterruptPriority>
	__asm volatile
 800e98e:	f3ef 8211 	mrs	r2, BASEPRI
 800e992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e996:	f383 8811 	msr	BASEPRI, r3
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	61ba      	str	r2, [r7, #24]
 800e9a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e9a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d02f      	beq.n	800ea16 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e9c0:	68b9      	ldr	r1, [r7, #8]
 800e9c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9c4:	f000 f8d9 	bl	800eb7a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ca:	1e5a      	subs	r2, r3, #1
 800e9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e9d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e9d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9d8:	d112      	bne.n	800ea00 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9dc:	691b      	ldr	r3, [r3, #16]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d016      	beq.n	800ea10 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e4:	3310      	adds	r3, #16
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f000 fe7c 	bl	800f6e4 <xTaskRemoveFromEventList>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00e      	beq.n	800ea10 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d00b      	beq.n	800ea10 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	601a      	str	r2, [r3, #0]
 800e9fe:	e007      	b.n	800ea10 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ea00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea04:	3301      	adds	r3, #1
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	b25a      	sxtb	r2, r3
 800ea0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ea10:	2301      	movs	r3, #1
 800ea12:	637b      	str	r3, [r7, #52]	; 0x34
 800ea14:	e001      	b.n	800ea1a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ea16:	2300      	movs	r3, #0
 800ea18:	637b      	str	r3, [r7, #52]	; 0x34
 800ea1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	f383 8811 	msr	BASEPRI, r3
}
 800ea24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3738      	adds	r7, #56	; 0x38
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d10a      	bne.n	800ea58 <vQueueDelete+0x28>
	__asm volatile
 800ea42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea46:	f383 8811 	msr	BASEPRI, r3
 800ea4a:	f3bf 8f6f 	isb	sy
 800ea4e:	f3bf 8f4f 	dsb	sy
 800ea52:	60bb      	str	r3, [r7, #8]
}
 800ea54:	bf00      	nop
 800ea56:	e7fe      	b.n	800ea56 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f000 f95f 	bl	800ed1c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d102      	bne.n	800ea6e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	f002 f829 	bl	8010ac0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ea6e:	bf00      	nop
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ea76:	b480      	push	{r7}
 800ea78:	b085      	sub	sp, #20
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d006      	beq.n	800ea94 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ea90:	60fb      	str	r3, [r7, #12]
 800ea92:	e001      	b.n	800ea98 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ea94:	2300      	movs	r3, #0
 800ea96:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ea98:	68fb      	ldr	r3, [r7, #12]
	}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3714      	adds	r7, #20
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b086      	sub	sp, #24
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	60f8      	str	r0, [r7, #12]
 800eaae:	60b9      	str	r1, [r7, #8]
 800eab0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eab2:	2300      	movs	r3, #0
 800eab4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d10d      	bne.n	800eae0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d14d      	bne.n	800eb68 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f001 f85f 	bl	800fb94 <xTaskPriorityDisinherit>
 800ead6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	609a      	str	r2, [r3, #8]
 800eade:	e043      	b.n	800eb68 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d119      	bne.n	800eb1a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	6858      	ldr	r0, [r3, #4]
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaee:	461a      	mov	r2, r3
 800eaf0:	68b9      	ldr	r1, [r7, #8]
 800eaf2:	f002 fa53 	bl	8010f9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	685a      	ldr	r2, [r3, #4]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eafe:	441a      	add	r2, r3
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	685a      	ldr	r2, [r3, #4]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d32b      	bcc.n	800eb68 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	605a      	str	r2, [r3, #4]
 800eb18:	e026      	b.n	800eb68 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	68d8      	ldr	r0, [r3, #12]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb22:	461a      	mov	r2, r3
 800eb24:	68b9      	ldr	r1, [r7, #8]
 800eb26:	f002 fa39 	bl	8010f9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	68da      	ldr	r2, [r3, #12]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb32:	425b      	negs	r3, r3
 800eb34:	441a      	add	r2, r3
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	68da      	ldr	r2, [r3, #12]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d207      	bcs.n	800eb56 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	689a      	ldr	r2, [r3, #8]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb4e:	425b      	negs	r3, r3
 800eb50:	441a      	add	r2, r3
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	d105      	bne.n	800eb68 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d002      	beq.n	800eb68 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	3b01      	subs	r3, #1
 800eb66:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	1c5a      	adds	r2, r3, #1
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eb70:	697b      	ldr	r3, [r7, #20]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3718      	adds	r7, #24
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}

0800eb7a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b082      	sub	sp, #8
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d018      	beq.n	800ebbe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	68da      	ldr	r2, [r3, #12]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb94:	441a      	add	r2, r3
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	68da      	ldr	r2, [r3, #12]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d303      	bcc.n	800ebae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	68d9      	ldr	r1, [r3, #12]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	6838      	ldr	r0, [r7, #0]
 800ebba:	f002 f9ef 	bl	8010f9c <memcpy>
	}
}
 800ebbe:	bf00      	nop
 800ebc0:	3708      	adds	r7, #8
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b084      	sub	sp, #16
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ebce:	f001 fdb1 	bl	8010734 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebd8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebda:	e011      	b.n	800ec00 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d012      	beq.n	800ec0a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	3324      	adds	r3, #36	; 0x24
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f000 fd7b 	bl	800f6e4 <xTaskRemoveFromEventList>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d001      	beq.n	800ebf8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ebf4:	f000 fe52 	bl	800f89c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ebf8:	7bfb      	ldrb	r3, [r7, #15]
 800ebfa:	3b01      	subs	r3, #1
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	dce9      	bgt.n	800ebdc <prvUnlockQueue+0x16>
 800ec08:	e000      	b.n	800ec0c <prvUnlockQueue+0x46>
					break;
 800ec0a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	22ff      	movs	r2, #255	; 0xff
 800ec10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ec14:	f001 fdbe 	bl	8010794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ec18:	f001 fd8c 	bl	8010734 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec22:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec24:	e011      	b.n	800ec4a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d012      	beq.n	800ec54 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	3310      	adds	r3, #16
 800ec32:	4618      	mov	r0, r3
 800ec34:	f000 fd56 	bl	800f6e4 <xTaskRemoveFromEventList>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d001      	beq.n	800ec42 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ec3e:	f000 fe2d 	bl	800f89c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ec42:	7bbb      	ldrb	r3, [r7, #14]
 800ec44:	3b01      	subs	r3, #1
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	dce9      	bgt.n	800ec26 <prvUnlockQueue+0x60>
 800ec52:	e000      	b.n	800ec56 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ec54:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	22ff      	movs	r2, #255	; 0xff
 800ec5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ec5e:	f001 fd99 	bl	8010794 <vPortExitCritical>
}
 800ec62:	bf00      	nop
 800ec64:	3710      	adds	r7, #16
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b084      	sub	sp, #16
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec72:	f001 fd5f 	bl	8010734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d102      	bne.n	800ec84 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ec7e:	2301      	movs	r3, #1
 800ec80:	60fb      	str	r3, [r7, #12]
 800ec82:	e001      	b.n	800ec88 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ec84:	2300      	movs	r3, #0
 800ec86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec88:	f001 fd84 	bl	8010794 <vPortExitCritical>

	return xReturn;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}

0800ec96 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b084      	sub	sp, #16
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec9e:	f001 fd49 	bl	8010734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d102      	bne.n	800ecb4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	60fb      	str	r3, [r7, #12]
 800ecb2:	e001      	b.n	800ecb8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ecb8:	f001 fd6c 	bl	8010794 <vPortExitCritical>

	return xReturn;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3710      	adds	r7, #16
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
	...

0800ecc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ecc8:	b480      	push	{r7}
 800ecca:	b085      	sub	sp, #20
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60fb      	str	r3, [r7, #12]
 800ecd6:	e014      	b.n	800ed02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ecd8:	4a0f      	ldr	r2, [pc, #60]	; (800ed18 <vQueueAddToRegistry+0x50>)
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d10b      	bne.n	800ecfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ece4:	490c      	ldr	r1, [pc, #48]	; (800ed18 <vQueueAddToRegistry+0x50>)
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	683a      	ldr	r2, [r7, #0]
 800ecea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ecee:	4a0a      	ldr	r2, [pc, #40]	; (800ed18 <vQueueAddToRegistry+0x50>)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	00db      	lsls	r3, r3, #3
 800ecf4:	4413      	add	r3, r2
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ecfa:	e006      	b.n	800ed0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	60fb      	str	r3, [r7, #12]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2b07      	cmp	r3, #7
 800ed06:	d9e7      	bls.n	800ecd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed08:	bf00      	nop
 800ed0a:	bf00      	nop
 800ed0c:	3714      	adds	r7, #20
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop
 800ed18:	200095a8 	.word	0x200095a8

0800ed1c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b085      	sub	sp, #20
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed24:	2300      	movs	r3, #0
 800ed26:	60fb      	str	r3, [r7, #12]
 800ed28:	e016      	b.n	800ed58 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ed2a:	4a10      	ldr	r2, [pc, #64]	; (800ed6c <vQueueUnregisterQueue+0x50>)
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	00db      	lsls	r3, r3, #3
 800ed30:	4413      	add	r3, r2
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d10b      	bne.n	800ed52 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ed3a:	4a0c      	ldr	r2, [pc, #48]	; (800ed6c <vQueueUnregisterQueue+0x50>)
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2100      	movs	r1, #0
 800ed40:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ed44:	4a09      	ldr	r2, [pc, #36]	; (800ed6c <vQueueUnregisterQueue+0x50>)
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	00db      	lsls	r3, r3, #3
 800ed4a:	4413      	add	r3, r2
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	605a      	str	r2, [r3, #4]
				break;
 800ed50:	e006      	b.n	800ed60 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	3301      	adds	r3, #1
 800ed56:	60fb      	str	r3, [r7, #12]
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2b07      	cmp	r3, #7
 800ed5c:	d9e5      	bls.n	800ed2a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ed5e:	bf00      	nop
 800ed60:	bf00      	nop
 800ed62:	3714      	adds	r7, #20
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr
 800ed6c:	200095a8 	.word	0x200095a8

0800ed70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b086      	sub	sp, #24
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ed80:	f001 fcd8 	bl	8010734 <vPortEnterCritical>
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed8a:	b25b      	sxtb	r3, r3
 800ed8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed90:	d103      	bne.n	800ed9a <vQueueWaitForMessageRestricted+0x2a>
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	2200      	movs	r2, #0
 800ed96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eda0:	b25b      	sxtb	r3, r3
 800eda2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eda6:	d103      	bne.n	800edb0 <vQueueWaitForMessageRestricted+0x40>
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	2200      	movs	r2, #0
 800edac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edb0:	f001 fcf0 	bl	8010794 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d106      	bne.n	800edca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	3324      	adds	r3, #36	; 0x24
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	68b9      	ldr	r1, [r7, #8]
 800edc4:	4618      	mov	r0, r3
 800edc6:	f000 fc61 	bl	800f68c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800edca:	6978      	ldr	r0, [r7, #20]
 800edcc:	f7ff fefb 	bl	800ebc6 <prvUnlockQueue>
	}
 800edd0:	bf00      	nop
 800edd2:	3718      	adds	r7, #24
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b08e      	sub	sp, #56	; 0x38
 800eddc:	af04      	add	r7, sp, #16
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	607a      	str	r2, [r7, #4]
 800ede4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ede6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d10a      	bne.n	800ee02 <xTaskCreateStatic+0x2a>
	__asm volatile
 800edec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf0:	f383 8811 	msr	BASEPRI, r3
 800edf4:	f3bf 8f6f 	isb	sy
 800edf8:	f3bf 8f4f 	dsb	sy
 800edfc:	623b      	str	r3, [r7, #32]
}
 800edfe:	bf00      	nop
 800ee00:	e7fe      	b.n	800ee00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ee02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d10a      	bne.n	800ee1e <xTaskCreateStatic+0x46>
	__asm volatile
 800ee08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0c:	f383 8811 	msr	BASEPRI, r3
 800ee10:	f3bf 8f6f 	isb	sy
 800ee14:	f3bf 8f4f 	dsb	sy
 800ee18:	61fb      	str	r3, [r7, #28]
}
 800ee1a:	bf00      	nop
 800ee1c:	e7fe      	b.n	800ee1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ee1e:	23bc      	movs	r3, #188	; 0xbc
 800ee20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	2bbc      	cmp	r3, #188	; 0xbc
 800ee26:	d00a      	beq.n	800ee3e <xTaskCreateStatic+0x66>
	__asm volatile
 800ee28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2c:	f383 8811 	msr	BASEPRI, r3
 800ee30:	f3bf 8f6f 	isb	sy
 800ee34:	f3bf 8f4f 	dsb	sy
 800ee38:	61bb      	str	r3, [r7, #24]
}
 800ee3a:	bf00      	nop
 800ee3c:	e7fe      	b.n	800ee3c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ee3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ee40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d01e      	beq.n	800ee84 <xTaskCreateStatic+0xac>
 800ee46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d01b      	beq.n	800ee84 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ee50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ee56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee58:	2202      	movs	r2, #2
 800ee5a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ee5e:	2300      	movs	r3, #0
 800ee60:	9303      	str	r3, [sp, #12]
 800ee62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee64:	9302      	str	r3, [sp, #8]
 800ee66:	f107 0314 	add.w	r3, r7, #20
 800ee6a:	9301      	str	r3, [sp, #4]
 800ee6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	68b9      	ldr	r1, [r7, #8]
 800ee76:	68f8      	ldr	r0, [r7, #12]
 800ee78:	f000 f850 	bl	800ef1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee7e:	f000 f8f3 	bl	800f068 <prvAddNewTaskToReadyList>
 800ee82:	e001      	b.n	800ee88 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ee84:	2300      	movs	r3, #0
 800ee86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ee88:	697b      	ldr	r3, [r7, #20]
	}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3728      	adds	r7, #40	; 0x28
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b08c      	sub	sp, #48	; 0x30
 800ee96:	af04      	add	r7, sp, #16
 800ee98:	60f8      	str	r0, [r7, #12]
 800ee9a:	60b9      	str	r1, [r7, #8]
 800ee9c:	603b      	str	r3, [r7, #0]
 800ee9e:	4613      	mov	r3, r2
 800eea0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eea2:	88fb      	ldrh	r3, [r7, #6]
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	4618      	mov	r0, r3
 800eea8:	f001 fd66 	bl	8010978 <pvPortMalloc>
 800eeac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00e      	beq.n	800eed2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eeb4:	20bc      	movs	r0, #188	; 0xbc
 800eeb6:	f001 fd5f 	bl	8010978 <pvPortMalloc>
 800eeba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d003      	beq.n	800eeca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eec2:	69fb      	ldr	r3, [r7, #28]
 800eec4:	697a      	ldr	r2, [r7, #20]
 800eec6:	631a      	str	r2, [r3, #48]	; 0x30
 800eec8:	e005      	b.n	800eed6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eeca:	6978      	ldr	r0, [r7, #20]
 800eecc:	f001 fdf8 	bl	8010ac0 <vPortFree>
 800eed0:	e001      	b.n	800eed6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eed2:	2300      	movs	r3, #0
 800eed4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d017      	beq.n	800ef0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	2200      	movs	r2, #0
 800eee0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eee4:	88fa      	ldrh	r2, [r7, #6]
 800eee6:	2300      	movs	r3, #0
 800eee8:	9303      	str	r3, [sp, #12]
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	9302      	str	r3, [sp, #8]
 800eeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef0:	9301      	str	r3, [sp, #4]
 800eef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef4:	9300      	str	r3, [sp, #0]
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	68b9      	ldr	r1, [r7, #8]
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f000 f80e 	bl	800ef1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ef00:	69f8      	ldr	r0, [r7, #28]
 800ef02:	f000 f8b1 	bl	800f068 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ef06:	2301      	movs	r3, #1
 800ef08:	61bb      	str	r3, [r7, #24]
 800ef0a:	e002      	b.n	800ef12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ef0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ef12:	69bb      	ldr	r3, [r7, #24]
	}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3720      	adds	r7, #32
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b088      	sub	sp, #32
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
 800ef28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	461a      	mov	r2, r3
 800ef34:	21a5      	movs	r1, #165	; 0xa5
 800ef36:	f002 f83f 	bl	8010fb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ef3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef44:	3b01      	subs	r3, #1
 800ef46:	009b      	lsls	r3, r3, #2
 800ef48:	4413      	add	r3, r2
 800ef4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	f023 0307 	bic.w	r3, r3, #7
 800ef52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	f003 0307 	and.w	r3, r3, #7
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d00a      	beq.n	800ef74 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ef5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef62:	f383 8811 	msr	BASEPRI, r3
 800ef66:	f3bf 8f6f 	isb	sy
 800ef6a:	f3bf 8f4f 	dsb	sy
 800ef6e:	617b      	str	r3, [r7, #20]
}
 800ef70:	bf00      	nop
 800ef72:	e7fe      	b.n	800ef72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d01f      	beq.n	800efba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	61fb      	str	r3, [r7, #28]
 800ef7e:	e012      	b.n	800efa6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ef80:	68ba      	ldr	r2, [r7, #8]
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	4413      	add	r3, r2
 800ef86:	7819      	ldrb	r1, [r3, #0]
 800ef88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef8a:	69fb      	ldr	r3, [r7, #28]
 800ef8c:	4413      	add	r3, r2
 800ef8e:	3334      	adds	r3, #52	; 0x34
 800ef90:	460a      	mov	r2, r1
 800ef92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ef94:	68ba      	ldr	r2, [r7, #8]
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	4413      	add	r3, r2
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d006      	beq.n	800efae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	3301      	adds	r3, #1
 800efa4:	61fb      	str	r3, [r7, #28]
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	2b0f      	cmp	r3, #15
 800efaa:	d9e9      	bls.n	800ef80 <prvInitialiseNewTask+0x64>
 800efac:	e000      	b.n	800efb0 <prvInitialiseNewTask+0x94>
			{
				break;
 800efae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800efb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb2:	2200      	movs	r2, #0
 800efb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800efb8:	e003      	b.n	800efc2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbc:	2200      	movs	r2, #0
 800efbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800efc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc4:	2b37      	cmp	r3, #55	; 0x37
 800efc6:	d901      	bls.n	800efcc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800efc8:	2337      	movs	r3, #55	; 0x37
 800efca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800efcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efd0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800efd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efd6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800efd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efda:	2200      	movs	r2, #0
 800efdc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800efde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe0:	3304      	adds	r3, #4
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fe fe2c 	bl	800dc40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800efe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efea:	3318      	adds	r3, #24
 800efec:	4618      	mov	r0, r3
 800efee:	f7fe fe27 	bl	800dc40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eff6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f000:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f006:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00a:	2200      	movs	r2, #0
 800f00c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f012:	2200      	movs	r2, #0
 800f014:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01a:	3354      	adds	r3, #84	; 0x54
 800f01c:	2260      	movs	r2, #96	; 0x60
 800f01e:	2100      	movs	r1, #0
 800f020:	4618      	mov	r0, r3
 800f022:	f001 ffc9 	bl	8010fb8 <memset>
 800f026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f028:	4a0c      	ldr	r2, [pc, #48]	; (800f05c <prvInitialiseNewTask+0x140>)
 800f02a:	659a      	str	r2, [r3, #88]	; 0x58
 800f02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02e:	4a0c      	ldr	r2, [pc, #48]	; (800f060 <prvInitialiseNewTask+0x144>)
 800f030:	65da      	str	r2, [r3, #92]	; 0x5c
 800f032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f034:	4a0b      	ldr	r2, [pc, #44]	; (800f064 <prvInitialiseNewTask+0x148>)
 800f036:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f038:	683a      	ldr	r2, [r7, #0]
 800f03a:	68f9      	ldr	r1, [r7, #12]
 800f03c:	69b8      	ldr	r0, [r7, #24]
 800f03e:	f001 fa4f 	bl	80104e0 <pxPortInitialiseStack>
 800f042:	4602      	mov	r2, r0
 800f044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f046:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d002      	beq.n	800f054 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f052:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f054:	bf00      	nop
 800f056:	3720      	adds	r7, #32
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	08014a98 	.word	0x08014a98
 800f060:	08014ab8 	.word	0x08014ab8
 800f064:	08014a78 	.word	0x08014a78

0800f068 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f070:	f001 fb60 	bl	8010734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f074:	4b2d      	ldr	r3, [pc, #180]	; (800f12c <prvAddNewTaskToReadyList+0xc4>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	3301      	adds	r3, #1
 800f07a:	4a2c      	ldr	r2, [pc, #176]	; (800f12c <prvAddNewTaskToReadyList+0xc4>)
 800f07c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f07e:	4b2c      	ldr	r3, [pc, #176]	; (800f130 <prvAddNewTaskToReadyList+0xc8>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d109      	bne.n	800f09a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f086:	4a2a      	ldr	r2, [pc, #168]	; (800f130 <prvAddNewTaskToReadyList+0xc8>)
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f08c:	4b27      	ldr	r3, [pc, #156]	; (800f12c <prvAddNewTaskToReadyList+0xc4>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d110      	bne.n	800f0b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f094:	f000 fc26 	bl	800f8e4 <prvInitialiseTaskLists>
 800f098:	e00d      	b.n	800f0b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f09a:	4b26      	ldr	r3, [pc, #152]	; (800f134 <prvAddNewTaskToReadyList+0xcc>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d109      	bne.n	800f0b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f0a2:	4b23      	ldr	r3, [pc, #140]	; (800f130 <prvAddNewTaskToReadyList+0xc8>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d802      	bhi.n	800f0b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f0b0:	4a1f      	ldr	r2, [pc, #124]	; (800f130 <prvAddNewTaskToReadyList+0xc8>)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f0b6:	4b20      	ldr	r3, [pc, #128]	; (800f138 <prvAddNewTaskToReadyList+0xd0>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	4a1e      	ldr	r2, [pc, #120]	; (800f138 <prvAddNewTaskToReadyList+0xd0>)
 800f0be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f0c0:	4b1d      	ldr	r3, [pc, #116]	; (800f138 <prvAddNewTaskToReadyList+0xd0>)
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0cc:	4b1b      	ldr	r3, [pc, #108]	; (800f13c <prvAddNewTaskToReadyList+0xd4>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d903      	bls.n	800f0dc <prvAddNewTaskToReadyList+0x74>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d8:	4a18      	ldr	r2, [pc, #96]	; (800f13c <prvAddNewTaskToReadyList+0xd4>)
 800f0da:	6013      	str	r3, [r2, #0]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	4413      	add	r3, r2
 800f0e6:	009b      	lsls	r3, r3, #2
 800f0e8:	4a15      	ldr	r2, [pc, #84]	; (800f140 <prvAddNewTaskToReadyList+0xd8>)
 800f0ea:	441a      	add	r2, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	3304      	adds	r3, #4
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	4610      	mov	r0, r2
 800f0f4:	f7fe fdb1 	bl	800dc5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f0f8:	f001 fb4c 	bl	8010794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f0fc:	4b0d      	ldr	r3, [pc, #52]	; (800f134 <prvAddNewTaskToReadyList+0xcc>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d00e      	beq.n	800f122 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f104:	4b0a      	ldr	r3, [pc, #40]	; (800f130 <prvAddNewTaskToReadyList+0xc8>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10e:	429a      	cmp	r2, r3
 800f110:	d207      	bcs.n	800f122 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f112:	4b0c      	ldr	r3, [pc, #48]	; (800f144 <prvAddNewTaskToReadyList+0xdc>)
 800f114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f118:	601a      	str	r2, [r3, #0]
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f122:	bf00      	nop
 800f124:	3708      	adds	r7, #8
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	20009abc 	.word	0x20009abc
 800f130:	200095e8 	.word	0x200095e8
 800f134:	20009ac8 	.word	0x20009ac8
 800f138:	20009ad8 	.word	0x20009ad8
 800f13c:	20009ac4 	.word	0x20009ac4
 800f140:	200095ec 	.word	0x200095ec
 800f144:	e000ed04 	.word	0xe000ed04

0800f148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f150:	2300      	movs	r3, #0
 800f152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d017      	beq.n	800f18a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f15a:	4b13      	ldr	r3, [pc, #76]	; (800f1a8 <vTaskDelay+0x60>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d00a      	beq.n	800f178 <vTaskDelay+0x30>
	__asm volatile
 800f162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f166:	f383 8811 	msr	BASEPRI, r3
 800f16a:	f3bf 8f6f 	isb	sy
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	60bb      	str	r3, [r7, #8]
}
 800f174:	bf00      	nop
 800f176:	e7fe      	b.n	800f176 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f178:	f000 f88a 	bl	800f290 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f17c:	2100      	movs	r1, #0
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f000 fe0c 	bl	800fd9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f184:	f000 f892 	bl	800f2ac <xTaskResumeAll>
 800f188:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d107      	bne.n	800f1a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f190:	4b06      	ldr	r3, [pc, #24]	; (800f1ac <vTaskDelay+0x64>)
 800f192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f196:	601a      	str	r2, [r3, #0]
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f1a0:	bf00      	nop
 800f1a2:	3710      	adds	r7, #16
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	20009ae4 	.word	0x20009ae4
 800f1ac:	e000ed04 	.word	0xe000ed04

0800f1b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b08a      	sub	sp, #40	; 0x28
 800f1b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f1be:	463a      	mov	r2, r7
 800f1c0:	1d39      	adds	r1, r7, #4
 800f1c2:	f107 0308 	add.w	r3, r7, #8
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7fe fce6 	bl	800db98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	68ba      	ldr	r2, [r7, #8]
 800f1d2:	9202      	str	r2, [sp, #8]
 800f1d4:	9301      	str	r3, [sp, #4]
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	9300      	str	r3, [sp, #0]
 800f1da:	2300      	movs	r3, #0
 800f1dc:	460a      	mov	r2, r1
 800f1de:	4924      	ldr	r1, [pc, #144]	; (800f270 <vTaskStartScheduler+0xc0>)
 800f1e0:	4824      	ldr	r0, [pc, #144]	; (800f274 <vTaskStartScheduler+0xc4>)
 800f1e2:	f7ff fdf9 	bl	800edd8 <xTaskCreateStatic>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	4a23      	ldr	r2, [pc, #140]	; (800f278 <vTaskStartScheduler+0xc8>)
 800f1ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f1ec:	4b22      	ldr	r3, [pc, #136]	; (800f278 <vTaskStartScheduler+0xc8>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d002      	beq.n	800f1fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	617b      	str	r3, [r7, #20]
 800f1f8:	e001      	b.n	800f1fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	2b01      	cmp	r3, #1
 800f202:	d102      	bne.n	800f20a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f204:	f000 fe1e 	bl	800fe44 <xTimerCreateTimerTask>
 800f208:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d11b      	bne.n	800f248 <vTaskStartScheduler+0x98>
	__asm volatile
 800f210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f214:	f383 8811 	msr	BASEPRI, r3
 800f218:	f3bf 8f6f 	isb	sy
 800f21c:	f3bf 8f4f 	dsb	sy
 800f220:	613b      	str	r3, [r7, #16]
}
 800f222:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f224:	4b15      	ldr	r3, [pc, #84]	; (800f27c <vTaskStartScheduler+0xcc>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	3354      	adds	r3, #84	; 0x54
 800f22a:	4a15      	ldr	r2, [pc, #84]	; (800f280 <vTaskStartScheduler+0xd0>)
 800f22c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f22e:	4b15      	ldr	r3, [pc, #84]	; (800f284 <vTaskStartScheduler+0xd4>)
 800f230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f234:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f236:	4b14      	ldr	r3, [pc, #80]	; (800f288 <vTaskStartScheduler+0xd8>)
 800f238:	2201      	movs	r2, #1
 800f23a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f23c:	4b13      	ldr	r3, [pc, #76]	; (800f28c <vTaskStartScheduler+0xdc>)
 800f23e:	2200      	movs	r2, #0
 800f240:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f242:	f001 f9d5 	bl	80105f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f246:	e00e      	b.n	800f266 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f24e:	d10a      	bne.n	800f266 <vTaskStartScheduler+0xb6>
	__asm volatile
 800f250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f254:	f383 8811 	msr	BASEPRI, r3
 800f258:	f3bf 8f6f 	isb	sy
 800f25c:	f3bf 8f4f 	dsb	sy
 800f260:	60fb      	str	r3, [r7, #12]
}
 800f262:	bf00      	nop
 800f264:	e7fe      	b.n	800f264 <vTaskStartScheduler+0xb4>
}
 800f266:	bf00      	nop
 800f268:	3718      	adds	r7, #24
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	bf00      	nop
 800f270:	080127f0 	.word	0x080127f0
 800f274:	0800f8b5 	.word	0x0800f8b5
 800f278:	20009ae0 	.word	0x20009ae0
 800f27c:	200095e8 	.word	0x200095e8
 800f280:	200000d8 	.word	0x200000d8
 800f284:	20009adc 	.word	0x20009adc
 800f288:	20009ac8 	.word	0x20009ac8
 800f28c:	20009ac0 	.word	0x20009ac0

0800f290 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f290:	b480      	push	{r7}
 800f292:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f294:	4b04      	ldr	r3, [pc, #16]	; (800f2a8 <vTaskSuspendAll+0x18>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	3301      	adds	r3, #1
 800f29a:	4a03      	ldr	r2, [pc, #12]	; (800f2a8 <vTaskSuspendAll+0x18>)
 800f29c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f29e:	bf00      	nop
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr
 800f2a8:	20009ae4 	.word	0x20009ae4

0800f2ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f2ba:	4b42      	ldr	r3, [pc, #264]	; (800f3c4 <xTaskResumeAll+0x118>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10a      	bne.n	800f2d8 <xTaskResumeAll+0x2c>
	__asm volatile
 800f2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	603b      	str	r3, [r7, #0]
}
 800f2d4:	bf00      	nop
 800f2d6:	e7fe      	b.n	800f2d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f2d8:	f001 fa2c 	bl	8010734 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f2dc:	4b39      	ldr	r3, [pc, #228]	; (800f3c4 <xTaskResumeAll+0x118>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	4a38      	ldr	r2, [pc, #224]	; (800f3c4 <xTaskResumeAll+0x118>)
 800f2e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2e6:	4b37      	ldr	r3, [pc, #220]	; (800f3c4 <xTaskResumeAll+0x118>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d162      	bne.n	800f3b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f2ee:	4b36      	ldr	r3, [pc, #216]	; (800f3c8 <xTaskResumeAll+0x11c>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d05e      	beq.n	800f3b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f2f6:	e02f      	b.n	800f358 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2f8:	4b34      	ldr	r3, [pc, #208]	; (800f3cc <xTaskResumeAll+0x120>)
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	3318      	adds	r3, #24
 800f304:	4618      	mov	r0, r3
 800f306:	f7fe fd05 	bl	800dd14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	3304      	adds	r3, #4
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fe fd00 	bl	800dd14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f318:	4b2d      	ldr	r3, [pc, #180]	; (800f3d0 <xTaskResumeAll+0x124>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d903      	bls.n	800f328 <xTaskResumeAll+0x7c>
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f324:	4a2a      	ldr	r2, [pc, #168]	; (800f3d0 <xTaskResumeAll+0x124>)
 800f326:	6013      	str	r3, [r2, #0]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f32c:	4613      	mov	r3, r2
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	4413      	add	r3, r2
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	4a27      	ldr	r2, [pc, #156]	; (800f3d4 <xTaskResumeAll+0x128>)
 800f336:	441a      	add	r2, r3
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	3304      	adds	r3, #4
 800f33c:	4619      	mov	r1, r3
 800f33e:	4610      	mov	r0, r2
 800f340:	f7fe fc8b 	bl	800dc5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f348:	4b23      	ldr	r3, [pc, #140]	; (800f3d8 <xTaskResumeAll+0x12c>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f34e:	429a      	cmp	r2, r3
 800f350:	d302      	bcc.n	800f358 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f352:	4b22      	ldr	r3, [pc, #136]	; (800f3dc <xTaskResumeAll+0x130>)
 800f354:	2201      	movs	r2, #1
 800f356:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f358:	4b1c      	ldr	r3, [pc, #112]	; (800f3cc <xTaskResumeAll+0x120>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d1cb      	bne.n	800f2f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f366:	f000 fb5f 	bl	800fa28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f36a:	4b1d      	ldr	r3, [pc, #116]	; (800f3e0 <xTaskResumeAll+0x134>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d010      	beq.n	800f398 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f376:	f000 f847 	bl	800f408 <xTaskIncrementTick>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d002      	beq.n	800f386 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f380:	4b16      	ldr	r3, [pc, #88]	; (800f3dc <xTaskResumeAll+0x130>)
 800f382:	2201      	movs	r2, #1
 800f384:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	3b01      	subs	r3, #1
 800f38a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d1f1      	bne.n	800f376 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f392:	4b13      	ldr	r3, [pc, #76]	; (800f3e0 <xTaskResumeAll+0x134>)
 800f394:	2200      	movs	r2, #0
 800f396:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f398:	4b10      	ldr	r3, [pc, #64]	; (800f3dc <xTaskResumeAll+0x130>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d009      	beq.n	800f3b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f3a4:	4b0f      	ldr	r3, [pc, #60]	; (800f3e4 <xTaskResumeAll+0x138>)
 800f3a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3aa:	601a      	str	r2, [r3, #0]
 800f3ac:	f3bf 8f4f 	dsb	sy
 800f3b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f3b4:	f001 f9ee 	bl	8010794 <vPortExitCritical>

	return xAlreadyYielded;
 800f3b8:	68bb      	ldr	r3, [r7, #8]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	20009ae4 	.word	0x20009ae4
 800f3c8:	20009abc 	.word	0x20009abc
 800f3cc:	20009a7c 	.word	0x20009a7c
 800f3d0:	20009ac4 	.word	0x20009ac4
 800f3d4:	200095ec 	.word	0x200095ec
 800f3d8:	200095e8 	.word	0x200095e8
 800f3dc:	20009ad0 	.word	0x20009ad0
 800f3e0:	20009acc 	.word	0x20009acc
 800f3e4:	e000ed04 	.word	0xe000ed04

0800f3e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f3ee:	4b05      	ldr	r3, [pc, #20]	; (800f404 <xTaskGetTickCount+0x1c>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f3f4:	687b      	ldr	r3, [r7, #4]
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	370c      	adds	r7, #12
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop
 800f404:	20009ac0 	.word	0x20009ac0

0800f408 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b086      	sub	sp, #24
 800f40c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f40e:	2300      	movs	r3, #0
 800f410:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f412:	4b4f      	ldr	r3, [pc, #316]	; (800f550 <xTaskIncrementTick+0x148>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	f040 808f 	bne.w	800f53a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f41c:	4b4d      	ldr	r3, [pc, #308]	; (800f554 <xTaskIncrementTick+0x14c>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	3301      	adds	r3, #1
 800f422:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f424:	4a4b      	ldr	r2, [pc, #300]	; (800f554 <xTaskIncrementTick+0x14c>)
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d120      	bne.n	800f472 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f430:	4b49      	ldr	r3, [pc, #292]	; (800f558 <xTaskIncrementTick+0x150>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d00a      	beq.n	800f450 <xTaskIncrementTick+0x48>
	__asm volatile
 800f43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f43e:	f383 8811 	msr	BASEPRI, r3
 800f442:	f3bf 8f6f 	isb	sy
 800f446:	f3bf 8f4f 	dsb	sy
 800f44a:	603b      	str	r3, [r7, #0]
}
 800f44c:	bf00      	nop
 800f44e:	e7fe      	b.n	800f44e <xTaskIncrementTick+0x46>
 800f450:	4b41      	ldr	r3, [pc, #260]	; (800f558 <xTaskIncrementTick+0x150>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	60fb      	str	r3, [r7, #12]
 800f456:	4b41      	ldr	r3, [pc, #260]	; (800f55c <xTaskIncrementTick+0x154>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4a3f      	ldr	r2, [pc, #252]	; (800f558 <xTaskIncrementTick+0x150>)
 800f45c:	6013      	str	r3, [r2, #0]
 800f45e:	4a3f      	ldr	r2, [pc, #252]	; (800f55c <xTaskIncrementTick+0x154>)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	6013      	str	r3, [r2, #0]
 800f464:	4b3e      	ldr	r3, [pc, #248]	; (800f560 <xTaskIncrementTick+0x158>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	3301      	adds	r3, #1
 800f46a:	4a3d      	ldr	r2, [pc, #244]	; (800f560 <xTaskIncrementTick+0x158>)
 800f46c:	6013      	str	r3, [r2, #0]
 800f46e:	f000 fadb 	bl	800fa28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f472:	4b3c      	ldr	r3, [pc, #240]	; (800f564 <xTaskIncrementTick+0x15c>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	693a      	ldr	r2, [r7, #16]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d349      	bcc.n	800f510 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f47c:	4b36      	ldr	r3, [pc, #216]	; (800f558 <xTaskIncrementTick+0x150>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d104      	bne.n	800f490 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f486:	4b37      	ldr	r3, [pc, #220]	; (800f564 <xTaskIncrementTick+0x15c>)
 800f488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f48c:	601a      	str	r2, [r3, #0]
					break;
 800f48e:	e03f      	b.n	800f510 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f490:	4b31      	ldr	r3, [pc, #196]	; (800f558 <xTaskIncrementTick+0x150>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	68db      	ldr	r3, [r3, #12]
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f4a0:	693a      	ldr	r2, [r7, #16]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d203      	bcs.n	800f4b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f4a8:	4a2e      	ldr	r2, [pc, #184]	; (800f564 <xTaskIncrementTick+0x15c>)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f4ae:	e02f      	b.n	800f510 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	3304      	adds	r3, #4
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7fe fc2d 	bl	800dd14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d004      	beq.n	800f4cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	3318      	adds	r3, #24
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7fe fc24 	bl	800dd14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4d0:	4b25      	ldr	r3, [pc, #148]	; (800f568 <xTaskIncrementTick+0x160>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d903      	bls.n	800f4e0 <xTaskIncrementTick+0xd8>
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4dc:	4a22      	ldr	r2, [pc, #136]	; (800f568 <xTaskIncrementTick+0x160>)
 800f4de:	6013      	str	r3, [r2, #0]
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4e4:	4613      	mov	r3, r2
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	4413      	add	r3, r2
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	4a1f      	ldr	r2, [pc, #124]	; (800f56c <xTaskIncrementTick+0x164>)
 800f4ee:	441a      	add	r2, r3
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	3304      	adds	r3, #4
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	4610      	mov	r0, r2
 800f4f8:	f7fe fbaf 	bl	800dc5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f500:	4b1b      	ldr	r3, [pc, #108]	; (800f570 <xTaskIncrementTick+0x168>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f506:	429a      	cmp	r2, r3
 800f508:	d3b8      	bcc.n	800f47c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f50a:	2301      	movs	r3, #1
 800f50c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f50e:	e7b5      	b.n	800f47c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f510:	4b17      	ldr	r3, [pc, #92]	; (800f570 <xTaskIncrementTick+0x168>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f516:	4915      	ldr	r1, [pc, #84]	; (800f56c <xTaskIncrementTick+0x164>)
 800f518:	4613      	mov	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	4413      	add	r3, r2
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	440b      	add	r3, r1
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b01      	cmp	r3, #1
 800f526:	d901      	bls.n	800f52c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f528:	2301      	movs	r3, #1
 800f52a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f52c:	4b11      	ldr	r3, [pc, #68]	; (800f574 <xTaskIncrementTick+0x16c>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d007      	beq.n	800f544 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f534:	2301      	movs	r3, #1
 800f536:	617b      	str	r3, [r7, #20]
 800f538:	e004      	b.n	800f544 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f53a:	4b0f      	ldr	r3, [pc, #60]	; (800f578 <xTaskIncrementTick+0x170>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	3301      	adds	r3, #1
 800f540:	4a0d      	ldr	r2, [pc, #52]	; (800f578 <xTaskIncrementTick+0x170>)
 800f542:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f544:	697b      	ldr	r3, [r7, #20]
}
 800f546:	4618      	mov	r0, r3
 800f548:	3718      	adds	r7, #24
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	20009ae4 	.word	0x20009ae4
 800f554:	20009ac0 	.word	0x20009ac0
 800f558:	20009a74 	.word	0x20009a74
 800f55c:	20009a78 	.word	0x20009a78
 800f560:	20009ad4 	.word	0x20009ad4
 800f564:	20009adc 	.word	0x20009adc
 800f568:	20009ac4 	.word	0x20009ac4
 800f56c:	200095ec 	.word	0x200095ec
 800f570:	200095e8 	.word	0x200095e8
 800f574:	20009ad0 	.word	0x20009ad0
 800f578:	20009acc 	.word	0x20009acc

0800f57c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f57c:	b480      	push	{r7}
 800f57e:	b085      	sub	sp, #20
 800f580:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f582:	4b2a      	ldr	r3, [pc, #168]	; (800f62c <vTaskSwitchContext+0xb0>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d003      	beq.n	800f592 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f58a:	4b29      	ldr	r3, [pc, #164]	; (800f630 <vTaskSwitchContext+0xb4>)
 800f58c:	2201      	movs	r2, #1
 800f58e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f590:	e046      	b.n	800f620 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f592:	4b27      	ldr	r3, [pc, #156]	; (800f630 <vTaskSwitchContext+0xb4>)
 800f594:	2200      	movs	r2, #0
 800f596:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f598:	4b26      	ldr	r3, [pc, #152]	; (800f634 <vTaskSwitchContext+0xb8>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	60fb      	str	r3, [r7, #12]
 800f59e:	e010      	b.n	800f5c2 <vTaskSwitchContext+0x46>
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d10a      	bne.n	800f5bc <vTaskSwitchContext+0x40>
	__asm volatile
 800f5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5aa:	f383 8811 	msr	BASEPRI, r3
 800f5ae:	f3bf 8f6f 	isb	sy
 800f5b2:	f3bf 8f4f 	dsb	sy
 800f5b6:	607b      	str	r3, [r7, #4]
}
 800f5b8:	bf00      	nop
 800f5ba:	e7fe      	b.n	800f5ba <vTaskSwitchContext+0x3e>
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	60fb      	str	r3, [r7, #12]
 800f5c2:	491d      	ldr	r1, [pc, #116]	; (800f638 <vTaskSwitchContext+0xbc>)
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	4613      	mov	r3, r2
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	4413      	add	r3, r2
 800f5cc:	009b      	lsls	r3, r3, #2
 800f5ce:	440b      	add	r3, r1
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d0e4      	beq.n	800f5a0 <vTaskSwitchContext+0x24>
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	4613      	mov	r3, r2
 800f5da:	009b      	lsls	r3, r3, #2
 800f5dc:	4413      	add	r3, r2
 800f5de:	009b      	lsls	r3, r3, #2
 800f5e0:	4a15      	ldr	r2, [pc, #84]	; (800f638 <vTaskSwitchContext+0xbc>)
 800f5e2:	4413      	add	r3, r2
 800f5e4:	60bb      	str	r3, [r7, #8]
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	685a      	ldr	r2, [r3, #4]
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	605a      	str	r2, [r3, #4]
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	685a      	ldr	r2, [r3, #4]
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	3308      	adds	r3, #8
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d104      	bne.n	800f606 <vTaskSwitchContext+0x8a>
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	685a      	ldr	r2, [r3, #4]
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	605a      	str	r2, [r3, #4]
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	4a0b      	ldr	r2, [pc, #44]	; (800f63c <vTaskSwitchContext+0xc0>)
 800f60e:	6013      	str	r3, [r2, #0]
 800f610:	4a08      	ldr	r2, [pc, #32]	; (800f634 <vTaskSwitchContext+0xb8>)
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f616:	4b09      	ldr	r3, [pc, #36]	; (800f63c <vTaskSwitchContext+0xc0>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	3354      	adds	r3, #84	; 0x54
 800f61c:	4a08      	ldr	r2, [pc, #32]	; (800f640 <vTaskSwitchContext+0xc4>)
 800f61e:	6013      	str	r3, [r2, #0]
}
 800f620:	bf00      	nop
 800f622:	3714      	adds	r7, #20
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr
 800f62c:	20009ae4 	.word	0x20009ae4
 800f630:	20009ad0 	.word	0x20009ad0
 800f634:	20009ac4 	.word	0x20009ac4
 800f638:	200095ec 	.word	0x200095ec
 800f63c:	200095e8 	.word	0x200095e8
 800f640:	200000d8 	.word	0x200000d8

0800f644 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d10a      	bne.n	800f66a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f658:	f383 8811 	msr	BASEPRI, r3
 800f65c:	f3bf 8f6f 	isb	sy
 800f660:	f3bf 8f4f 	dsb	sy
 800f664:	60fb      	str	r3, [r7, #12]
}
 800f666:	bf00      	nop
 800f668:	e7fe      	b.n	800f668 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f66a:	4b07      	ldr	r3, [pc, #28]	; (800f688 <vTaskPlaceOnEventList+0x44>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	3318      	adds	r3, #24
 800f670:	4619      	mov	r1, r3
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f7fe fb15 	bl	800dca2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f678:	2101      	movs	r1, #1
 800f67a:	6838      	ldr	r0, [r7, #0]
 800f67c:	f000 fb8e 	bl	800fd9c <prvAddCurrentTaskToDelayedList>
}
 800f680:	bf00      	nop
 800f682:	3710      	adds	r7, #16
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}
 800f688:	200095e8 	.word	0x200095e8

0800f68c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b086      	sub	sp, #24
 800f690:	af00      	add	r7, sp, #0
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d10a      	bne.n	800f6b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a2:	f383 8811 	msr	BASEPRI, r3
 800f6a6:	f3bf 8f6f 	isb	sy
 800f6aa:	f3bf 8f4f 	dsb	sy
 800f6ae:	617b      	str	r3, [r7, #20]
}
 800f6b0:	bf00      	nop
 800f6b2:	e7fe      	b.n	800f6b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f6b4:	4b0a      	ldr	r3, [pc, #40]	; (800f6e0 <vTaskPlaceOnEventListRestricted+0x54>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	3318      	adds	r3, #24
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	68f8      	ldr	r0, [r7, #12]
 800f6be:	f7fe facc 	bl	800dc5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d002      	beq.n	800f6ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f6c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f6ce:	6879      	ldr	r1, [r7, #4]
 800f6d0:	68b8      	ldr	r0, [r7, #8]
 800f6d2:	f000 fb63 	bl	800fd9c <prvAddCurrentTaskToDelayedList>
	}
 800f6d6:	bf00      	nop
 800f6d8:	3718      	adds	r7, #24
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	200095e8 	.word	0x200095e8

0800f6e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b086      	sub	sp, #24
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d10a      	bne.n	800f710 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6fe:	f383 8811 	msr	BASEPRI, r3
 800f702:	f3bf 8f6f 	isb	sy
 800f706:	f3bf 8f4f 	dsb	sy
 800f70a:	60fb      	str	r3, [r7, #12]
}
 800f70c:	bf00      	nop
 800f70e:	e7fe      	b.n	800f70e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	3318      	adds	r3, #24
 800f714:	4618      	mov	r0, r3
 800f716:	f7fe fafd 	bl	800dd14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f71a:	4b1e      	ldr	r3, [pc, #120]	; (800f794 <xTaskRemoveFromEventList+0xb0>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d11d      	bne.n	800f75e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	3304      	adds	r3, #4
 800f726:	4618      	mov	r0, r3
 800f728:	f7fe faf4 	bl	800dd14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f730:	4b19      	ldr	r3, [pc, #100]	; (800f798 <xTaskRemoveFromEventList+0xb4>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	429a      	cmp	r2, r3
 800f736:	d903      	bls.n	800f740 <xTaskRemoveFromEventList+0x5c>
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73c:	4a16      	ldr	r2, [pc, #88]	; (800f798 <xTaskRemoveFromEventList+0xb4>)
 800f73e:	6013      	str	r3, [r2, #0]
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f744:	4613      	mov	r3, r2
 800f746:	009b      	lsls	r3, r3, #2
 800f748:	4413      	add	r3, r2
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	4a13      	ldr	r2, [pc, #76]	; (800f79c <xTaskRemoveFromEventList+0xb8>)
 800f74e:	441a      	add	r2, r3
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	3304      	adds	r3, #4
 800f754:	4619      	mov	r1, r3
 800f756:	4610      	mov	r0, r2
 800f758:	f7fe fa7f 	bl	800dc5a <vListInsertEnd>
 800f75c:	e005      	b.n	800f76a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	3318      	adds	r3, #24
 800f762:	4619      	mov	r1, r3
 800f764:	480e      	ldr	r0, [pc, #56]	; (800f7a0 <xTaskRemoveFromEventList+0xbc>)
 800f766:	f7fe fa78 	bl	800dc5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f76e:	4b0d      	ldr	r3, [pc, #52]	; (800f7a4 <xTaskRemoveFromEventList+0xc0>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f774:	429a      	cmp	r2, r3
 800f776:	d905      	bls.n	800f784 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f778:	2301      	movs	r3, #1
 800f77a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f77c:	4b0a      	ldr	r3, [pc, #40]	; (800f7a8 <xTaskRemoveFromEventList+0xc4>)
 800f77e:	2201      	movs	r2, #1
 800f780:	601a      	str	r2, [r3, #0]
 800f782:	e001      	b.n	800f788 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f784:	2300      	movs	r3, #0
 800f786:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f788:	697b      	ldr	r3, [r7, #20]
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3718      	adds	r7, #24
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	20009ae4 	.word	0x20009ae4
 800f798:	20009ac4 	.word	0x20009ac4
 800f79c:	200095ec 	.word	0x200095ec
 800f7a0:	20009a7c 	.word	0x20009a7c
 800f7a4:	200095e8 	.word	0x200095e8
 800f7a8:	20009ad0 	.word	0x20009ad0

0800f7ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f7b4:	4b06      	ldr	r3, [pc, #24]	; (800f7d0 <vTaskInternalSetTimeOutState+0x24>)
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f7bc:	4b05      	ldr	r3, [pc, #20]	; (800f7d4 <vTaskInternalSetTimeOutState+0x28>)
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	605a      	str	r2, [r3, #4]
}
 800f7c4:	bf00      	nop
 800f7c6:	370c      	adds	r7, #12
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr
 800f7d0:	20009ad4 	.word	0x20009ad4
 800f7d4:	20009ac0 	.word	0x20009ac0

0800f7d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b088      	sub	sp, #32
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d10a      	bne.n	800f7fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ec:	f383 8811 	msr	BASEPRI, r3
 800f7f0:	f3bf 8f6f 	isb	sy
 800f7f4:	f3bf 8f4f 	dsb	sy
 800f7f8:	613b      	str	r3, [r7, #16]
}
 800f7fa:	bf00      	nop
 800f7fc:	e7fe      	b.n	800f7fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d10a      	bne.n	800f81a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f808:	f383 8811 	msr	BASEPRI, r3
 800f80c:	f3bf 8f6f 	isb	sy
 800f810:	f3bf 8f4f 	dsb	sy
 800f814:	60fb      	str	r3, [r7, #12]
}
 800f816:	bf00      	nop
 800f818:	e7fe      	b.n	800f818 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f81a:	f000 ff8b 	bl	8010734 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f81e:	4b1d      	ldr	r3, [pc, #116]	; (800f894 <xTaskCheckForTimeOut+0xbc>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	69ba      	ldr	r2, [r7, #24]
 800f82a:	1ad3      	subs	r3, r2, r3
 800f82c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f836:	d102      	bne.n	800f83e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f838:	2300      	movs	r3, #0
 800f83a:	61fb      	str	r3, [r7, #28]
 800f83c:	e023      	b.n	800f886 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	4b15      	ldr	r3, [pc, #84]	; (800f898 <xTaskCheckForTimeOut+0xc0>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	429a      	cmp	r2, r3
 800f848:	d007      	beq.n	800f85a <xTaskCheckForTimeOut+0x82>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	69ba      	ldr	r2, [r7, #24]
 800f850:	429a      	cmp	r2, r3
 800f852:	d302      	bcc.n	800f85a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f854:	2301      	movs	r3, #1
 800f856:	61fb      	str	r3, [r7, #28]
 800f858:	e015      	b.n	800f886 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	697a      	ldr	r2, [r7, #20]
 800f860:	429a      	cmp	r2, r3
 800f862:	d20b      	bcs.n	800f87c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	1ad2      	subs	r2, r2, r3
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f7ff ff9b 	bl	800f7ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f876:	2300      	movs	r3, #0
 800f878:	61fb      	str	r3, [r7, #28]
 800f87a:	e004      	b.n	800f886 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	2200      	movs	r2, #0
 800f880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f882:	2301      	movs	r3, #1
 800f884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f886:	f000 ff85 	bl	8010794 <vPortExitCritical>

	return xReturn;
 800f88a:	69fb      	ldr	r3, [r7, #28]
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3720      	adds	r7, #32
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}
 800f894:	20009ac0 	.word	0x20009ac0
 800f898:	20009ad4 	.word	0x20009ad4

0800f89c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f89c:	b480      	push	{r7}
 800f89e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f8a0:	4b03      	ldr	r3, [pc, #12]	; (800f8b0 <vTaskMissedYield+0x14>)
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	601a      	str	r2, [r3, #0]
}
 800f8a6:	bf00      	nop
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr
 800f8b0:	20009ad0 	.word	0x20009ad0

0800f8b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f8bc:	f000 f852 	bl	800f964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f8c0:	4b06      	ldr	r3, [pc, #24]	; (800f8dc <prvIdleTask+0x28>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d9f9      	bls.n	800f8bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800f8c8:	4b05      	ldr	r3, [pc, #20]	; (800f8e0 <prvIdleTask+0x2c>)
 800f8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8ce:	601a      	str	r2, [r3, #0]
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f8d8:	e7f0      	b.n	800f8bc <prvIdleTask+0x8>
 800f8da:	bf00      	nop
 800f8dc:	200095ec 	.word	0x200095ec
 800f8e0:	e000ed04 	.word	0xe000ed04

0800f8e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	607b      	str	r3, [r7, #4]
 800f8ee:	e00c      	b.n	800f90a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f8f0:	687a      	ldr	r2, [r7, #4]
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	4413      	add	r3, r2
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	4a12      	ldr	r2, [pc, #72]	; (800f944 <prvInitialiseTaskLists+0x60>)
 800f8fc:	4413      	add	r3, r2
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7fe f97e 	bl	800dc00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	3301      	adds	r3, #1
 800f908:	607b      	str	r3, [r7, #4]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2b37      	cmp	r3, #55	; 0x37
 800f90e:	d9ef      	bls.n	800f8f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f910:	480d      	ldr	r0, [pc, #52]	; (800f948 <prvInitialiseTaskLists+0x64>)
 800f912:	f7fe f975 	bl	800dc00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f916:	480d      	ldr	r0, [pc, #52]	; (800f94c <prvInitialiseTaskLists+0x68>)
 800f918:	f7fe f972 	bl	800dc00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f91c:	480c      	ldr	r0, [pc, #48]	; (800f950 <prvInitialiseTaskLists+0x6c>)
 800f91e:	f7fe f96f 	bl	800dc00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f922:	480c      	ldr	r0, [pc, #48]	; (800f954 <prvInitialiseTaskLists+0x70>)
 800f924:	f7fe f96c 	bl	800dc00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f928:	480b      	ldr	r0, [pc, #44]	; (800f958 <prvInitialiseTaskLists+0x74>)
 800f92a:	f7fe f969 	bl	800dc00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f92e:	4b0b      	ldr	r3, [pc, #44]	; (800f95c <prvInitialiseTaskLists+0x78>)
 800f930:	4a05      	ldr	r2, [pc, #20]	; (800f948 <prvInitialiseTaskLists+0x64>)
 800f932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f934:	4b0a      	ldr	r3, [pc, #40]	; (800f960 <prvInitialiseTaskLists+0x7c>)
 800f936:	4a05      	ldr	r2, [pc, #20]	; (800f94c <prvInitialiseTaskLists+0x68>)
 800f938:	601a      	str	r2, [r3, #0]
}
 800f93a:	bf00      	nop
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	200095ec 	.word	0x200095ec
 800f948:	20009a4c 	.word	0x20009a4c
 800f94c:	20009a60 	.word	0x20009a60
 800f950:	20009a7c 	.word	0x20009a7c
 800f954:	20009a90 	.word	0x20009a90
 800f958:	20009aa8 	.word	0x20009aa8
 800f95c:	20009a74 	.word	0x20009a74
 800f960:	20009a78 	.word	0x20009a78

0800f964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f96a:	e019      	b.n	800f9a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f96c:	f000 fee2 	bl	8010734 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f970:	4b10      	ldr	r3, [pc, #64]	; (800f9b4 <prvCheckTasksWaitingTermination+0x50>)
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	68db      	ldr	r3, [r3, #12]
 800f976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	3304      	adds	r3, #4
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fe f9c9 	bl	800dd14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f982:	4b0d      	ldr	r3, [pc, #52]	; (800f9b8 <prvCheckTasksWaitingTermination+0x54>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	3b01      	subs	r3, #1
 800f988:	4a0b      	ldr	r2, [pc, #44]	; (800f9b8 <prvCheckTasksWaitingTermination+0x54>)
 800f98a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f98c:	4b0b      	ldr	r3, [pc, #44]	; (800f9bc <prvCheckTasksWaitingTermination+0x58>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	3b01      	subs	r3, #1
 800f992:	4a0a      	ldr	r2, [pc, #40]	; (800f9bc <prvCheckTasksWaitingTermination+0x58>)
 800f994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f996:	f000 fefd 	bl	8010794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 f810 	bl	800f9c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f9a0:	4b06      	ldr	r3, [pc, #24]	; (800f9bc <prvCheckTasksWaitingTermination+0x58>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d1e1      	bne.n	800f96c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f9a8:	bf00      	nop
 800f9aa:	bf00      	nop
 800f9ac:	3708      	adds	r7, #8
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	20009a90 	.word	0x20009a90
 800f9b8:	20009abc 	.word	0x20009abc
 800f9bc:	20009aa4 	.word	0x20009aa4

0800f9c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3354      	adds	r3, #84	; 0x54
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f001 fb9d 	bl	801110c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d108      	bne.n	800f9ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f001 f86d 	bl	8010ac0 <vPortFree>
				vPortFree( pxTCB );
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f001 f86a 	bl	8010ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f9ec:	e018      	b.n	800fa20 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d103      	bne.n	800fa00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f001 f861 	bl	8010ac0 <vPortFree>
	}
 800f9fe:	e00f      	b.n	800fa20 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fa06:	2b02      	cmp	r3, #2
 800fa08:	d00a      	beq.n	800fa20 <prvDeleteTCB+0x60>
	__asm volatile
 800fa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa0e:	f383 8811 	msr	BASEPRI, r3
 800fa12:	f3bf 8f6f 	isb	sy
 800fa16:	f3bf 8f4f 	dsb	sy
 800fa1a:	60fb      	str	r3, [r7, #12]
}
 800fa1c:	bf00      	nop
 800fa1e:	e7fe      	b.n	800fa1e <prvDeleteTCB+0x5e>
	}
 800fa20:	bf00      	nop
 800fa22:	3710      	adds	r7, #16
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa2e:	4b0c      	ldr	r3, [pc, #48]	; (800fa60 <prvResetNextTaskUnblockTime+0x38>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d104      	bne.n	800fa42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fa38:	4b0a      	ldr	r3, [pc, #40]	; (800fa64 <prvResetNextTaskUnblockTime+0x3c>)
 800fa3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fa40:	e008      	b.n	800fa54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa42:	4b07      	ldr	r3, [pc, #28]	; (800fa60 <prvResetNextTaskUnblockTime+0x38>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	68db      	ldr	r3, [r3, #12]
 800fa48:	68db      	ldr	r3, [r3, #12]
 800fa4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	4a04      	ldr	r2, [pc, #16]	; (800fa64 <prvResetNextTaskUnblockTime+0x3c>)
 800fa52:	6013      	str	r3, [r2, #0]
}
 800fa54:	bf00      	nop
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr
 800fa60:	20009a74 	.word	0x20009a74
 800fa64:	20009adc 	.word	0x20009adc

0800fa68 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fa6e:	4b05      	ldr	r3, [pc, #20]	; (800fa84 <xTaskGetCurrentTaskHandle+0x1c>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fa74:	687b      	ldr	r3, [r7, #4]
	}
 800fa76:	4618      	mov	r0, r3
 800fa78:	370c      	adds	r7, #12
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr
 800fa82:	bf00      	nop
 800fa84:	200095e8 	.word	0x200095e8

0800fa88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fa88:	b480      	push	{r7}
 800fa8a:	b083      	sub	sp, #12
 800fa8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fa8e:	4b0b      	ldr	r3, [pc, #44]	; (800fabc <xTaskGetSchedulerState+0x34>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d102      	bne.n	800fa9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fa96:	2301      	movs	r3, #1
 800fa98:	607b      	str	r3, [r7, #4]
 800fa9a:	e008      	b.n	800faae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa9c:	4b08      	ldr	r3, [pc, #32]	; (800fac0 <xTaskGetSchedulerState+0x38>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d102      	bne.n	800faaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800faa4:	2302      	movs	r3, #2
 800faa6:	607b      	str	r3, [r7, #4]
 800faa8:	e001      	b.n	800faae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800faaa:	2300      	movs	r3, #0
 800faac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800faae:	687b      	ldr	r3, [r7, #4]
	}
 800fab0:	4618      	mov	r0, r3
 800fab2:	370c      	adds	r7, #12
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr
 800fabc:	20009ac8 	.word	0x20009ac8
 800fac0:	20009ae4 	.word	0x20009ae4

0800fac4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fad0:	2300      	movs	r3, #0
 800fad2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d051      	beq.n	800fb7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fade:	4b2a      	ldr	r3, [pc, #168]	; (800fb88 <xTaskPriorityInherit+0xc4>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d241      	bcs.n	800fb6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	699b      	ldr	r3, [r3, #24]
 800faec:	2b00      	cmp	r3, #0
 800faee:	db06      	blt.n	800fafe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800faf0:	4b25      	ldr	r3, [pc, #148]	; (800fb88 <xTaskPriorityInherit+0xc4>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faf6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	6959      	ldr	r1, [r3, #20]
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb06:	4613      	mov	r3, r2
 800fb08:	009b      	lsls	r3, r3, #2
 800fb0a:	4413      	add	r3, r2
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	4a1f      	ldr	r2, [pc, #124]	; (800fb8c <xTaskPriorityInherit+0xc8>)
 800fb10:	4413      	add	r3, r2
 800fb12:	4299      	cmp	r1, r3
 800fb14:	d122      	bne.n	800fb5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	3304      	adds	r3, #4
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fe f8fa 	bl	800dd14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fb20:	4b19      	ldr	r3, [pc, #100]	; (800fb88 <xTaskPriorityInherit+0xc4>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb2e:	4b18      	ldr	r3, [pc, #96]	; (800fb90 <xTaskPriorityInherit+0xcc>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d903      	bls.n	800fb3e <xTaskPriorityInherit+0x7a>
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb3a:	4a15      	ldr	r2, [pc, #84]	; (800fb90 <xTaskPriorityInherit+0xcc>)
 800fb3c:	6013      	str	r3, [r2, #0]
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb42:	4613      	mov	r3, r2
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	4413      	add	r3, r2
 800fb48:	009b      	lsls	r3, r3, #2
 800fb4a:	4a10      	ldr	r2, [pc, #64]	; (800fb8c <xTaskPriorityInherit+0xc8>)
 800fb4c:	441a      	add	r2, r3
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	3304      	adds	r3, #4
 800fb52:	4619      	mov	r1, r3
 800fb54:	4610      	mov	r0, r2
 800fb56:	f7fe f880 	bl	800dc5a <vListInsertEnd>
 800fb5a:	e004      	b.n	800fb66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fb5c:	4b0a      	ldr	r3, [pc, #40]	; (800fb88 <xTaskPriorityInherit+0xc4>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fb66:	2301      	movs	r3, #1
 800fb68:	60fb      	str	r3, [r7, #12]
 800fb6a:	e008      	b.n	800fb7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb70:	4b05      	ldr	r3, [pc, #20]	; (800fb88 <xTaskPriorityInherit+0xc4>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d201      	bcs.n	800fb7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
	}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	200095e8 	.word	0x200095e8
 800fb8c:	200095ec 	.word	0x200095ec
 800fb90:	20009ac4 	.word	0x20009ac4

0800fb94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b086      	sub	sp, #24
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fba0:	2300      	movs	r3, #0
 800fba2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d056      	beq.n	800fc58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fbaa:	4b2e      	ldr	r3, [pc, #184]	; (800fc64 <xTaskPriorityDisinherit+0xd0>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	693a      	ldr	r2, [r7, #16]
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d00a      	beq.n	800fbca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb8:	f383 8811 	msr	BASEPRI, r3
 800fbbc:	f3bf 8f6f 	isb	sy
 800fbc0:	f3bf 8f4f 	dsb	sy
 800fbc4:	60fb      	str	r3, [r7, #12]
}
 800fbc6:	bf00      	nop
 800fbc8:	e7fe      	b.n	800fbc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d10a      	bne.n	800fbe8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd6:	f383 8811 	msr	BASEPRI, r3
 800fbda:	f3bf 8f6f 	isb	sy
 800fbde:	f3bf 8f4f 	dsb	sy
 800fbe2:	60bb      	str	r3, [r7, #8]
}
 800fbe4:	bf00      	nop
 800fbe6:	e7fe      	b.n	800fbe6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbec:	1e5a      	subs	r2, r3, #1
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d02c      	beq.n	800fc58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d128      	bne.n	800fc58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	3304      	adds	r3, #4
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7fe f882 	bl	800dd14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc28:	4b0f      	ldr	r3, [pc, #60]	; (800fc68 <xTaskPriorityDisinherit+0xd4>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d903      	bls.n	800fc38 <xTaskPriorityDisinherit+0xa4>
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc34:	4a0c      	ldr	r2, [pc, #48]	; (800fc68 <xTaskPriorityDisinherit+0xd4>)
 800fc36:	6013      	str	r3, [r2, #0]
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc3c:	4613      	mov	r3, r2
 800fc3e:	009b      	lsls	r3, r3, #2
 800fc40:	4413      	add	r3, r2
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	4a09      	ldr	r2, [pc, #36]	; (800fc6c <xTaskPriorityDisinherit+0xd8>)
 800fc46:	441a      	add	r2, r3
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	3304      	adds	r3, #4
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	4610      	mov	r0, r2
 800fc50:	f7fe f803 	bl	800dc5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fc54:	2301      	movs	r3, #1
 800fc56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fc58:	697b      	ldr	r3, [r7, #20]
	}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3718      	adds	r7, #24
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	200095e8 	.word	0x200095e8
 800fc68:	20009ac4 	.word	0x20009ac4
 800fc6c:	200095ec 	.word	0x200095ec

0800fc70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b088      	sub	sp, #32
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d06a      	beq.n	800fd5e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fc88:	69bb      	ldr	r3, [r7, #24]
 800fc8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d10a      	bne.n	800fca6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800fc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc94:	f383 8811 	msr	BASEPRI, r3
 800fc98:	f3bf 8f6f 	isb	sy
 800fc9c:	f3bf 8f4f 	dsb	sy
 800fca0:	60fb      	str	r3, [r7, #12]
}
 800fca2:	bf00      	nop
 800fca4:	e7fe      	b.n	800fca4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fca6:	69bb      	ldr	r3, [r7, #24]
 800fca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcaa:	683a      	ldr	r2, [r7, #0]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d902      	bls.n	800fcb6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	61fb      	str	r3, [r7, #28]
 800fcb4:	e002      	b.n	800fcbc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fcbc:	69bb      	ldr	r3, [r7, #24]
 800fcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc0:	69fa      	ldr	r2, [r7, #28]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d04b      	beq.n	800fd5e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fcc6:	69bb      	ldr	r3, [r7, #24]
 800fcc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcca:	697a      	ldr	r2, [r7, #20]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d146      	bne.n	800fd5e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fcd0:	4b25      	ldr	r3, [pc, #148]	; (800fd68 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	69ba      	ldr	r2, [r7, #24]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d10a      	bne.n	800fcf0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800fcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcde:	f383 8811 	msr	BASEPRI, r3
 800fce2:	f3bf 8f6f 	isb	sy
 800fce6:	f3bf 8f4f 	dsb	sy
 800fcea:	60bb      	str	r3, [r7, #8]
}
 800fcec:	bf00      	nop
 800fcee:	e7fe      	b.n	800fcee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fcf0:	69bb      	ldr	r3, [r7, #24]
 800fcf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcf4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fcf6:	69bb      	ldr	r3, [r7, #24]
 800fcf8:	69fa      	ldr	r2, [r7, #28]
 800fcfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fcfc:	69bb      	ldr	r3, [r7, #24]
 800fcfe:	699b      	ldr	r3, [r3, #24]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	db04      	blt.n	800fd0e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fd0a:	69bb      	ldr	r3, [r7, #24]
 800fd0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	6959      	ldr	r1, [r3, #20]
 800fd12:	693a      	ldr	r2, [r7, #16]
 800fd14:	4613      	mov	r3, r2
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	4413      	add	r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	4a13      	ldr	r2, [pc, #76]	; (800fd6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fd1e:	4413      	add	r3, r2
 800fd20:	4299      	cmp	r1, r3
 800fd22:	d11c      	bne.n	800fd5e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd24:	69bb      	ldr	r3, [r7, #24]
 800fd26:	3304      	adds	r3, #4
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fd fff3 	bl	800dd14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd32:	4b0f      	ldr	r3, [pc, #60]	; (800fd70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d903      	bls.n	800fd42 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800fd3a:	69bb      	ldr	r3, [r7, #24]
 800fd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd3e:	4a0c      	ldr	r2, [pc, #48]	; (800fd70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fd40:	6013      	str	r3, [r2, #0]
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd46:	4613      	mov	r3, r2
 800fd48:	009b      	lsls	r3, r3, #2
 800fd4a:	4413      	add	r3, r2
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	4a07      	ldr	r2, [pc, #28]	; (800fd6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fd50:	441a      	add	r2, r3
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	3304      	adds	r3, #4
 800fd56:	4619      	mov	r1, r3
 800fd58:	4610      	mov	r0, r2
 800fd5a:	f7fd ff7e 	bl	800dc5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd5e:	bf00      	nop
 800fd60:	3720      	adds	r7, #32
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	200095e8 	.word	0x200095e8
 800fd6c:	200095ec 	.word	0x200095ec
 800fd70:	20009ac4 	.word	0x20009ac4

0800fd74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fd74:	b480      	push	{r7}
 800fd76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fd78:	4b07      	ldr	r3, [pc, #28]	; (800fd98 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d004      	beq.n	800fd8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fd80:	4b05      	ldr	r3, [pc, #20]	; (800fd98 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd86:	3201      	adds	r2, #1
 800fd88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800fd8a:	4b03      	ldr	r3, [pc, #12]	; (800fd98 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
	}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr
 800fd98:	200095e8 	.word	0x200095e8

0800fd9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fda6:	4b21      	ldr	r3, [pc, #132]	; (800fe2c <prvAddCurrentTaskToDelayedList+0x90>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fdac:	4b20      	ldr	r3, [pc, #128]	; (800fe30 <prvAddCurrentTaskToDelayedList+0x94>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	3304      	adds	r3, #4
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7fd ffae 	bl	800dd14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdbe:	d10a      	bne.n	800fdd6 <prvAddCurrentTaskToDelayedList+0x3a>
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d007      	beq.n	800fdd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdc6:	4b1a      	ldr	r3, [pc, #104]	; (800fe30 <prvAddCurrentTaskToDelayedList+0x94>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3304      	adds	r3, #4
 800fdcc:	4619      	mov	r1, r3
 800fdce:	4819      	ldr	r0, [pc, #100]	; (800fe34 <prvAddCurrentTaskToDelayedList+0x98>)
 800fdd0:	f7fd ff43 	bl	800dc5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fdd4:	e026      	b.n	800fe24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fdd6:	68fa      	ldr	r2, [r7, #12]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	4413      	add	r3, r2
 800fddc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fdde:	4b14      	ldr	r3, [pc, #80]	; (800fe30 <prvAddCurrentTaskToDelayedList+0x94>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	68ba      	ldr	r2, [r7, #8]
 800fde4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fde6:	68ba      	ldr	r2, [r7, #8]
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d209      	bcs.n	800fe02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdee:	4b12      	ldr	r3, [pc, #72]	; (800fe38 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	4b0f      	ldr	r3, [pc, #60]	; (800fe30 <prvAddCurrentTaskToDelayedList+0x94>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	3304      	adds	r3, #4
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	4610      	mov	r0, r2
 800fdfc:	f7fd ff51 	bl	800dca2 <vListInsert>
}
 800fe00:	e010      	b.n	800fe24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fe02:	4b0e      	ldr	r3, [pc, #56]	; (800fe3c <prvAddCurrentTaskToDelayedList+0xa0>)
 800fe04:	681a      	ldr	r2, [r3, #0]
 800fe06:	4b0a      	ldr	r3, [pc, #40]	; (800fe30 <prvAddCurrentTaskToDelayedList+0x94>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	3304      	adds	r3, #4
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	4610      	mov	r0, r2
 800fe10:	f7fd ff47 	bl	800dca2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fe14:	4b0a      	ldr	r3, [pc, #40]	; (800fe40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	68ba      	ldr	r2, [r7, #8]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d202      	bcs.n	800fe24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fe1e:	4a08      	ldr	r2, [pc, #32]	; (800fe40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	6013      	str	r3, [r2, #0]
}
 800fe24:	bf00      	nop
 800fe26:	3710      	adds	r7, #16
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	20009ac0 	.word	0x20009ac0
 800fe30:	200095e8 	.word	0x200095e8
 800fe34:	20009aa8 	.word	0x20009aa8
 800fe38:	20009a78 	.word	0x20009a78
 800fe3c:	20009a74 	.word	0x20009a74
 800fe40:	20009adc 	.word	0x20009adc

0800fe44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b08a      	sub	sp, #40	; 0x28
 800fe48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fe4e:	f000 fb07 	bl	8010460 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fe52:	4b1c      	ldr	r3, [pc, #112]	; (800fec4 <xTimerCreateTimerTask+0x80>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d021      	beq.n	800fe9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fe62:	1d3a      	adds	r2, r7, #4
 800fe64:	f107 0108 	add.w	r1, r7, #8
 800fe68:	f107 030c 	add.w	r3, r7, #12
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7fd fead 	bl	800dbcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fe72:	6879      	ldr	r1, [r7, #4]
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	68fa      	ldr	r2, [r7, #12]
 800fe78:	9202      	str	r2, [sp, #8]
 800fe7a:	9301      	str	r3, [sp, #4]
 800fe7c:	2302      	movs	r3, #2
 800fe7e:	9300      	str	r3, [sp, #0]
 800fe80:	2300      	movs	r3, #0
 800fe82:	460a      	mov	r2, r1
 800fe84:	4910      	ldr	r1, [pc, #64]	; (800fec8 <xTimerCreateTimerTask+0x84>)
 800fe86:	4811      	ldr	r0, [pc, #68]	; (800fecc <xTimerCreateTimerTask+0x88>)
 800fe88:	f7fe ffa6 	bl	800edd8 <xTaskCreateStatic>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	4a10      	ldr	r2, [pc, #64]	; (800fed0 <xTimerCreateTimerTask+0x8c>)
 800fe90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fe92:	4b0f      	ldr	r3, [pc, #60]	; (800fed0 <xTimerCreateTimerTask+0x8c>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d001      	beq.n	800fe9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d10a      	bne.n	800feba <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea8:	f383 8811 	msr	BASEPRI, r3
 800feac:	f3bf 8f6f 	isb	sy
 800feb0:	f3bf 8f4f 	dsb	sy
 800feb4:	613b      	str	r3, [r7, #16]
}
 800feb6:	bf00      	nop
 800feb8:	e7fe      	b.n	800feb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800feba:	697b      	ldr	r3, [r7, #20]
}
 800febc:	4618      	mov	r0, r3
 800febe:	3718      	adds	r7, #24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	20009b18 	.word	0x20009b18
 800fec8:	080127f8 	.word	0x080127f8
 800fecc:	08010009 	.word	0x08010009
 800fed0:	20009b1c 	.word	0x20009b1c

0800fed4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b08a      	sub	sp, #40	; 0x28
 800fed8:	af00      	add	r7, sp, #0
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	607a      	str	r2, [r7, #4]
 800fee0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fee2:	2300      	movs	r3, #0
 800fee4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d10a      	bne.n	800ff02 <xTimerGenericCommand+0x2e>
	__asm volatile
 800feec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef0:	f383 8811 	msr	BASEPRI, r3
 800fef4:	f3bf 8f6f 	isb	sy
 800fef8:	f3bf 8f4f 	dsb	sy
 800fefc:	623b      	str	r3, [r7, #32]
}
 800fefe:	bf00      	nop
 800ff00:	e7fe      	b.n	800ff00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ff02:	4b1a      	ldr	r3, [pc, #104]	; (800ff6c <xTimerGenericCommand+0x98>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d02a      	beq.n	800ff60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	2b05      	cmp	r3, #5
 800ff1a:	dc18      	bgt.n	800ff4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ff1c:	f7ff fdb4 	bl	800fa88 <xTaskGetSchedulerState>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	d109      	bne.n	800ff3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ff26:	4b11      	ldr	r3, [pc, #68]	; (800ff6c <xTimerGenericCommand+0x98>)
 800ff28:	6818      	ldr	r0, [r3, #0]
 800ff2a:	f107 0110 	add.w	r1, r7, #16
 800ff2e:	2300      	movs	r3, #0
 800ff30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff32:	f7fe f977 	bl	800e224 <xQueueGenericSend>
 800ff36:	6278      	str	r0, [r7, #36]	; 0x24
 800ff38:	e012      	b.n	800ff60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ff3a:	4b0c      	ldr	r3, [pc, #48]	; (800ff6c <xTimerGenericCommand+0x98>)
 800ff3c:	6818      	ldr	r0, [r3, #0]
 800ff3e:	f107 0110 	add.w	r1, r7, #16
 800ff42:	2300      	movs	r3, #0
 800ff44:	2200      	movs	r2, #0
 800ff46:	f7fe f96d 	bl	800e224 <xQueueGenericSend>
 800ff4a:	6278      	str	r0, [r7, #36]	; 0x24
 800ff4c:	e008      	b.n	800ff60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ff4e:	4b07      	ldr	r3, [pc, #28]	; (800ff6c <xTimerGenericCommand+0x98>)
 800ff50:	6818      	ldr	r0, [r3, #0]
 800ff52:	f107 0110 	add.w	r1, r7, #16
 800ff56:	2300      	movs	r3, #0
 800ff58:	683a      	ldr	r2, [r7, #0]
 800ff5a:	f7fe fa61 	bl	800e420 <xQueueGenericSendFromISR>
 800ff5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ff60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3728      	adds	r7, #40	; 0x28
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	20009b18 	.word	0x20009b18

0800ff70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b088      	sub	sp, #32
 800ff74:	af02      	add	r7, sp, #8
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff7a:	4b22      	ldr	r3, [pc, #136]	; (8010004 <prvProcessExpiredTimer+0x94>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	68db      	ldr	r3, [r3, #12]
 800ff82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	3304      	adds	r3, #4
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7fd fec3 	bl	800dd14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff94:	f003 0304 	and.w	r3, r3, #4
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d022      	beq.n	800ffe2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	699a      	ldr	r2, [r3, #24]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	18d1      	adds	r1, r2, r3
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	683a      	ldr	r2, [r7, #0]
 800ffa8:	6978      	ldr	r0, [r7, #20]
 800ffaa:	f000 f8d1 	bl	8010150 <prvInsertTimerInActiveList>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d01f      	beq.n	800fff4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	9300      	str	r3, [sp, #0]
 800ffb8:	2300      	movs	r3, #0
 800ffba:	687a      	ldr	r2, [r7, #4]
 800ffbc:	2100      	movs	r1, #0
 800ffbe:	6978      	ldr	r0, [r7, #20]
 800ffc0:	f7ff ff88 	bl	800fed4 <xTimerGenericCommand>
 800ffc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d113      	bne.n	800fff4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ffcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd0:	f383 8811 	msr	BASEPRI, r3
 800ffd4:	f3bf 8f6f 	isb	sy
 800ffd8:	f3bf 8f4f 	dsb	sy
 800ffdc:	60fb      	str	r3, [r7, #12]
}
 800ffde:	bf00      	nop
 800ffe0:	e7fe      	b.n	800ffe0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffe8:	f023 0301 	bic.w	r3, r3, #1
 800ffec:	b2da      	uxtb	r2, r3
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	6a1b      	ldr	r3, [r3, #32]
 800fff8:	6978      	ldr	r0, [r7, #20]
 800fffa:	4798      	blx	r3
}
 800fffc:	bf00      	nop
 800fffe:	3718      	adds	r7, #24
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	20009b10 	.word	0x20009b10

08010008 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010010:	f107 0308 	add.w	r3, r7, #8
 8010014:	4618      	mov	r0, r3
 8010016:	f000 f857 	bl	80100c8 <prvGetNextExpireTime>
 801001a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	4619      	mov	r1, r3
 8010020:	68f8      	ldr	r0, [r7, #12]
 8010022:	f000 f803 	bl	801002c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010026:	f000 f8d5 	bl	80101d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801002a:	e7f1      	b.n	8010010 <prvTimerTask+0x8>

0801002c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010036:	f7ff f92b 	bl	800f290 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801003a:	f107 0308 	add.w	r3, r7, #8
 801003e:	4618      	mov	r0, r3
 8010040:	f000 f866 	bl	8010110 <prvSampleTimeNow>
 8010044:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d130      	bne.n	80100ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d10a      	bne.n	8010068 <prvProcessTimerOrBlockTask+0x3c>
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	429a      	cmp	r2, r3
 8010058:	d806      	bhi.n	8010068 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801005a:	f7ff f927 	bl	800f2ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801005e:	68f9      	ldr	r1, [r7, #12]
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f7ff ff85 	bl	800ff70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010066:	e024      	b.n	80100b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d008      	beq.n	8010080 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801006e:	4b13      	ldr	r3, [pc, #76]	; (80100bc <prvProcessTimerOrBlockTask+0x90>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d101      	bne.n	801007c <prvProcessTimerOrBlockTask+0x50>
 8010078:	2301      	movs	r3, #1
 801007a:	e000      	b.n	801007e <prvProcessTimerOrBlockTask+0x52>
 801007c:	2300      	movs	r3, #0
 801007e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010080:	4b0f      	ldr	r3, [pc, #60]	; (80100c0 <prvProcessTimerOrBlockTask+0x94>)
 8010082:	6818      	ldr	r0, [r3, #0]
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	1ad3      	subs	r3, r2, r3
 801008a:	683a      	ldr	r2, [r7, #0]
 801008c:	4619      	mov	r1, r3
 801008e:	f7fe fe6f 	bl	800ed70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010092:	f7ff f90b 	bl	800f2ac <xTaskResumeAll>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	d10a      	bne.n	80100b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801009c:	4b09      	ldr	r3, [pc, #36]	; (80100c4 <prvProcessTimerOrBlockTask+0x98>)
 801009e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100a2:	601a      	str	r2, [r3, #0]
 80100a4:	f3bf 8f4f 	dsb	sy
 80100a8:	f3bf 8f6f 	isb	sy
}
 80100ac:	e001      	b.n	80100b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80100ae:	f7ff f8fd 	bl	800f2ac <xTaskResumeAll>
}
 80100b2:	bf00      	nop
 80100b4:	3710      	adds	r7, #16
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	bf00      	nop
 80100bc:	20009b14 	.word	0x20009b14
 80100c0:	20009b18 	.word	0x20009b18
 80100c4:	e000ed04 	.word	0xe000ed04

080100c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80100c8:	b480      	push	{r7}
 80100ca:	b085      	sub	sp, #20
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80100d0:	4b0e      	ldr	r3, [pc, #56]	; (801010c <prvGetNextExpireTime+0x44>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d101      	bne.n	80100de <prvGetNextExpireTime+0x16>
 80100da:	2201      	movs	r2, #1
 80100dc:	e000      	b.n	80100e0 <prvGetNextExpireTime+0x18>
 80100de:	2200      	movs	r2, #0
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d105      	bne.n	80100f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80100ec:	4b07      	ldr	r3, [pc, #28]	; (801010c <prvGetNextExpireTime+0x44>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	60fb      	str	r3, [r7, #12]
 80100f6:	e001      	b.n	80100fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80100f8:	2300      	movs	r3, #0
 80100fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80100fc:	68fb      	ldr	r3, [r7, #12]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3714      	adds	r7, #20
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr
 801010a:	bf00      	nop
 801010c:	20009b10 	.word	0x20009b10

08010110 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b084      	sub	sp, #16
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010118:	f7ff f966 	bl	800f3e8 <xTaskGetTickCount>
 801011c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801011e:	4b0b      	ldr	r3, [pc, #44]	; (801014c <prvSampleTimeNow+0x3c>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	68fa      	ldr	r2, [r7, #12]
 8010124:	429a      	cmp	r2, r3
 8010126:	d205      	bcs.n	8010134 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010128:	f000 f936 	bl	8010398 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2201      	movs	r2, #1
 8010130:	601a      	str	r2, [r3, #0]
 8010132:	e002      	b.n	801013a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2200      	movs	r2, #0
 8010138:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801013a:	4a04      	ldr	r2, [pc, #16]	; (801014c <prvSampleTimeNow+0x3c>)
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010140:	68fb      	ldr	r3, [r7, #12]
}
 8010142:	4618      	mov	r0, r3
 8010144:	3710      	adds	r7, #16
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	20009b20 	.word	0x20009b20

08010150 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b086      	sub	sp, #24
 8010154:	af00      	add	r7, sp, #0
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	607a      	str	r2, [r7, #4]
 801015c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801015e:	2300      	movs	r3, #0
 8010160:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	68ba      	ldr	r2, [r7, #8]
 8010166:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	68fa      	ldr	r2, [r7, #12]
 801016c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801016e:	68ba      	ldr	r2, [r7, #8]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	429a      	cmp	r2, r3
 8010174:	d812      	bhi.n	801019c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	1ad2      	subs	r2, r2, r3
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	699b      	ldr	r3, [r3, #24]
 8010180:	429a      	cmp	r2, r3
 8010182:	d302      	bcc.n	801018a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010184:	2301      	movs	r3, #1
 8010186:	617b      	str	r3, [r7, #20]
 8010188:	e01b      	b.n	80101c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801018a:	4b10      	ldr	r3, [pc, #64]	; (80101cc <prvInsertTimerInActiveList+0x7c>)
 801018c:	681a      	ldr	r2, [r3, #0]
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	3304      	adds	r3, #4
 8010192:	4619      	mov	r1, r3
 8010194:	4610      	mov	r0, r2
 8010196:	f7fd fd84 	bl	800dca2 <vListInsert>
 801019a:	e012      	b.n	80101c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801019c:	687a      	ldr	r2, [r7, #4]
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d206      	bcs.n	80101b2 <prvInsertTimerInActiveList+0x62>
 80101a4:	68ba      	ldr	r2, [r7, #8]
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d302      	bcc.n	80101b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80101ac:	2301      	movs	r3, #1
 80101ae:	617b      	str	r3, [r7, #20]
 80101b0:	e007      	b.n	80101c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80101b2:	4b07      	ldr	r3, [pc, #28]	; (80101d0 <prvInsertTimerInActiveList+0x80>)
 80101b4:	681a      	ldr	r2, [r3, #0]
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	3304      	adds	r3, #4
 80101ba:	4619      	mov	r1, r3
 80101bc:	4610      	mov	r0, r2
 80101be:	f7fd fd70 	bl	800dca2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80101c2:	697b      	ldr	r3, [r7, #20]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3718      	adds	r7, #24
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	20009b14 	.word	0x20009b14
 80101d0:	20009b10 	.word	0x20009b10

080101d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b08e      	sub	sp, #56	; 0x38
 80101d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80101da:	e0ca      	b.n	8010372 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	da18      	bge.n	8010214 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80101e2:	1d3b      	adds	r3, r7, #4
 80101e4:	3304      	adds	r3, #4
 80101e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80101e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d10a      	bne.n	8010204 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80101ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f2:	f383 8811 	msr	BASEPRI, r3
 80101f6:	f3bf 8f6f 	isb	sy
 80101fa:	f3bf 8f4f 	dsb	sy
 80101fe:	61fb      	str	r3, [r7, #28]
}
 8010200:	bf00      	nop
 8010202:	e7fe      	b.n	8010202 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801020a:	6850      	ldr	r0, [r2, #4]
 801020c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801020e:	6892      	ldr	r2, [r2, #8]
 8010210:	4611      	mov	r1, r2
 8010212:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2b00      	cmp	r3, #0
 8010218:	f2c0 80aa 	blt.w	8010370 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010222:	695b      	ldr	r3, [r3, #20]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d004      	beq.n	8010232 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022a:	3304      	adds	r3, #4
 801022c:	4618      	mov	r0, r3
 801022e:	f7fd fd71 	bl	800dd14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010232:	463b      	mov	r3, r7
 8010234:	4618      	mov	r0, r3
 8010236:	f7ff ff6b 	bl	8010110 <prvSampleTimeNow>
 801023a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2b09      	cmp	r3, #9
 8010240:	f200 8097 	bhi.w	8010372 <prvProcessReceivedCommands+0x19e>
 8010244:	a201      	add	r2, pc, #4	; (adr r2, 801024c <prvProcessReceivedCommands+0x78>)
 8010246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801024a:	bf00      	nop
 801024c:	08010275 	.word	0x08010275
 8010250:	08010275 	.word	0x08010275
 8010254:	08010275 	.word	0x08010275
 8010258:	080102e9 	.word	0x080102e9
 801025c:	080102fd 	.word	0x080102fd
 8010260:	08010347 	.word	0x08010347
 8010264:	08010275 	.word	0x08010275
 8010268:	08010275 	.word	0x08010275
 801026c:	080102e9 	.word	0x080102e9
 8010270:	080102fd 	.word	0x080102fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801027a:	f043 0301 	orr.w	r3, r3, #1
 801027e:	b2da      	uxtb	r2, r3
 8010280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028a:	699b      	ldr	r3, [r3, #24]
 801028c:	18d1      	adds	r1, r2, r3
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010294:	f7ff ff5c 	bl	8010150 <prvInsertTimerInActiveList>
 8010298:	4603      	mov	r3, r0
 801029a:	2b00      	cmp	r3, #0
 801029c:	d069      	beq.n	8010372 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801029e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a0:	6a1b      	ldr	r3, [r3, #32]
 80102a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102ac:	f003 0304 	and.w	r3, r3, #4
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d05e      	beq.n	8010372 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80102b4:	68ba      	ldr	r2, [r7, #8]
 80102b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b8:	699b      	ldr	r3, [r3, #24]
 80102ba:	441a      	add	r2, r3
 80102bc:	2300      	movs	r3, #0
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	2300      	movs	r3, #0
 80102c2:	2100      	movs	r1, #0
 80102c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102c6:	f7ff fe05 	bl	800fed4 <xTimerGenericCommand>
 80102ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80102cc:	6a3b      	ldr	r3, [r7, #32]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d14f      	bne.n	8010372 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80102d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d6:	f383 8811 	msr	BASEPRI, r3
 80102da:	f3bf 8f6f 	isb	sy
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	61bb      	str	r3, [r7, #24]
}
 80102e4:	bf00      	nop
 80102e6:	e7fe      	b.n	80102e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80102e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102ee:	f023 0301 	bic.w	r3, r3, #1
 80102f2:	b2da      	uxtb	r2, r3
 80102f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80102fa:	e03a      	b.n	8010372 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80102fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010302:	f043 0301 	orr.w	r3, r3, #1
 8010306:	b2da      	uxtb	r2, r3
 8010308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801030a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010312:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010316:	699b      	ldr	r3, [r3, #24]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d10a      	bne.n	8010332 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801031c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010320:	f383 8811 	msr	BASEPRI, r3
 8010324:	f3bf 8f6f 	isb	sy
 8010328:	f3bf 8f4f 	dsb	sy
 801032c:	617b      	str	r3, [r7, #20]
}
 801032e:	bf00      	nop
 8010330:	e7fe      	b.n	8010330 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010334:	699a      	ldr	r2, [r3, #24]
 8010336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010338:	18d1      	adds	r1, r2, r3
 801033a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801033e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010340:	f7ff ff06 	bl	8010150 <prvInsertTimerInActiveList>
					break;
 8010344:	e015      	b.n	8010372 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801034c:	f003 0302 	and.w	r3, r3, #2
 8010350:	2b00      	cmp	r3, #0
 8010352:	d103      	bne.n	801035c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010356:	f000 fbb3 	bl	8010ac0 <vPortFree>
 801035a:	e00a      	b.n	8010372 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801035c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010362:	f023 0301 	bic.w	r3, r3, #1
 8010366:	b2da      	uxtb	r2, r3
 8010368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801036e:	e000      	b.n	8010372 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010370:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010372:	4b08      	ldr	r3, [pc, #32]	; (8010394 <prvProcessReceivedCommands+0x1c0>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	1d39      	adds	r1, r7, #4
 8010378:	2200      	movs	r2, #0
 801037a:	4618      	mov	r0, r3
 801037c:	f7fe f8ec 	bl	800e558 <xQueueReceive>
 8010380:	4603      	mov	r3, r0
 8010382:	2b00      	cmp	r3, #0
 8010384:	f47f af2a 	bne.w	80101dc <prvProcessReceivedCommands+0x8>
	}
}
 8010388:	bf00      	nop
 801038a:	bf00      	nop
 801038c:	3730      	adds	r7, #48	; 0x30
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
 8010392:	bf00      	nop
 8010394:	20009b18 	.word	0x20009b18

08010398 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b088      	sub	sp, #32
 801039c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801039e:	e048      	b.n	8010432 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80103a0:	4b2d      	ldr	r3, [pc, #180]	; (8010458 <prvSwitchTimerLists+0xc0>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	68db      	ldr	r3, [r3, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103aa:	4b2b      	ldr	r3, [pc, #172]	; (8010458 <prvSwitchTimerLists+0xc0>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	68db      	ldr	r3, [r3, #12]
 80103b0:	68db      	ldr	r3, [r3, #12]
 80103b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	3304      	adds	r3, #4
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fd fcab 	bl	800dd14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	6a1b      	ldr	r3, [r3, #32]
 80103c2:	68f8      	ldr	r0, [r7, #12]
 80103c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103cc:	f003 0304 	and.w	r3, r3, #4
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d02e      	beq.n	8010432 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	699b      	ldr	r3, [r3, #24]
 80103d8:	693a      	ldr	r2, [r7, #16]
 80103da:	4413      	add	r3, r2
 80103dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80103de:	68ba      	ldr	r2, [r7, #8]
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d90e      	bls.n	8010404 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	68ba      	ldr	r2, [r7, #8]
 80103ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	68fa      	ldr	r2, [r7, #12]
 80103f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80103f2:	4b19      	ldr	r3, [pc, #100]	; (8010458 <prvSwitchTimerLists+0xc0>)
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	3304      	adds	r3, #4
 80103fa:	4619      	mov	r1, r3
 80103fc:	4610      	mov	r0, r2
 80103fe:	f7fd fc50 	bl	800dca2 <vListInsert>
 8010402:	e016      	b.n	8010432 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010404:	2300      	movs	r3, #0
 8010406:	9300      	str	r3, [sp, #0]
 8010408:	2300      	movs	r3, #0
 801040a:	693a      	ldr	r2, [r7, #16]
 801040c:	2100      	movs	r1, #0
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f7ff fd60 	bl	800fed4 <xTimerGenericCommand>
 8010414:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d10a      	bne.n	8010432 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801041c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010420:	f383 8811 	msr	BASEPRI, r3
 8010424:	f3bf 8f6f 	isb	sy
 8010428:	f3bf 8f4f 	dsb	sy
 801042c:	603b      	str	r3, [r7, #0]
}
 801042e:	bf00      	nop
 8010430:	e7fe      	b.n	8010430 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010432:	4b09      	ldr	r3, [pc, #36]	; (8010458 <prvSwitchTimerLists+0xc0>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d1b1      	bne.n	80103a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801043c:	4b06      	ldr	r3, [pc, #24]	; (8010458 <prvSwitchTimerLists+0xc0>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010442:	4b06      	ldr	r3, [pc, #24]	; (801045c <prvSwitchTimerLists+0xc4>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	4a04      	ldr	r2, [pc, #16]	; (8010458 <prvSwitchTimerLists+0xc0>)
 8010448:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801044a:	4a04      	ldr	r2, [pc, #16]	; (801045c <prvSwitchTimerLists+0xc4>)
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	6013      	str	r3, [r2, #0]
}
 8010450:	bf00      	nop
 8010452:	3718      	adds	r7, #24
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	20009b10 	.word	0x20009b10
 801045c:	20009b14 	.word	0x20009b14

08010460 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010466:	f000 f965 	bl	8010734 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801046a:	4b15      	ldr	r3, [pc, #84]	; (80104c0 <prvCheckForValidListAndQueue+0x60>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d120      	bne.n	80104b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010472:	4814      	ldr	r0, [pc, #80]	; (80104c4 <prvCheckForValidListAndQueue+0x64>)
 8010474:	f7fd fbc4 	bl	800dc00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010478:	4813      	ldr	r0, [pc, #76]	; (80104c8 <prvCheckForValidListAndQueue+0x68>)
 801047a:	f7fd fbc1 	bl	800dc00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801047e:	4b13      	ldr	r3, [pc, #76]	; (80104cc <prvCheckForValidListAndQueue+0x6c>)
 8010480:	4a10      	ldr	r2, [pc, #64]	; (80104c4 <prvCheckForValidListAndQueue+0x64>)
 8010482:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010484:	4b12      	ldr	r3, [pc, #72]	; (80104d0 <prvCheckForValidListAndQueue+0x70>)
 8010486:	4a10      	ldr	r2, [pc, #64]	; (80104c8 <prvCheckForValidListAndQueue+0x68>)
 8010488:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801048a:	2300      	movs	r3, #0
 801048c:	9300      	str	r3, [sp, #0]
 801048e:	4b11      	ldr	r3, [pc, #68]	; (80104d4 <prvCheckForValidListAndQueue+0x74>)
 8010490:	4a11      	ldr	r2, [pc, #68]	; (80104d8 <prvCheckForValidListAndQueue+0x78>)
 8010492:	2110      	movs	r1, #16
 8010494:	200a      	movs	r0, #10
 8010496:	f7fd fccf 	bl	800de38 <xQueueGenericCreateStatic>
 801049a:	4603      	mov	r3, r0
 801049c:	4a08      	ldr	r2, [pc, #32]	; (80104c0 <prvCheckForValidListAndQueue+0x60>)
 801049e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80104a0:	4b07      	ldr	r3, [pc, #28]	; (80104c0 <prvCheckForValidListAndQueue+0x60>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d005      	beq.n	80104b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80104a8:	4b05      	ldr	r3, [pc, #20]	; (80104c0 <prvCheckForValidListAndQueue+0x60>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	490b      	ldr	r1, [pc, #44]	; (80104dc <prvCheckForValidListAndQueue+0x7c>)
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7fe fc0a 	bl	800ecc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80104b4:	f000 f96e 	bl	8010794 <vPortExitCritical>
}
 80104b8:	bf00      	nop
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	20009b18 	.word	0x20009b18
 80104c4:	20009ae8 	.word	0x20009ae8
 80104c8:	20009afc 	.word	0x20009afc
 80104cc:	20009b10 	.word	0x20009b10
 80104d0:	20009b14 	.word	0x20009b14
 80104d4:	20009bc4 	.word	0x20009bc4
 80104d8:	20009b24 	.word	0x20009b24
 80104dc:	08012800 	.word	0x08012800

080104e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80104e0:	b480      	push	{r7}
 80104e2:	b085      	sub	sp, #20
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	3b04      	subs	r3, #4
 80104f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80104f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	3b04      	subs	r3, #4
 80104fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	f023 0201 	bic.w	r2, r3, #1
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	3b04      	subs	r3, #4
 801050e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010510:	4a0c      	ldr	r2, [pc, #48]	; (8010544 <pxPortInitialiseStack+0x64>)
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	3b14      	subs	r3, #20
 801051a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	3b04      	subs	r3, #4
 8010526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f06f 0202 	mvn.w	r2, #2
 801052e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	3b20      	subs	r3, #32
 8010534:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010536:	68fb      	ldr	r3, [r7, #12]
}
 8010538:	4618      	mov	r0, r3
 801053a:	3714      	adds	r7, #20
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr
 8010544:	08010549 	.word	0x08010549

08010548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010548:	b480      	push	{r7}
 801054a:	b085      	sub	sp, #20
 801054c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801054e:	2300      	movs	r3, #0
 8010550:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010552:	4b12      	ldr	r3, [pc, #72]	; (801059c <prvTaskExitError+0x54>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801055a:	d00a      	beq.n	8010572 <prvTaskExitError+0x2a>
	__asm volatile
 801055c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010560:	f383 8811 	msr	BASEPRI, r3
 8010564:	f3bf 8f6f 	isb	sy
 8010568:	f3bf 8f4f 	dsb	sy
 801056c:	60fb      	str	r3, [r7, #12]
}
 801056e:	bf00      	nop
 8010570:	e7fe      	b.n	8010570 <prvTaskExitError+0x28>
	__asm volatile
 8010572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010576:	f383 8811 	msr	BASEPRI, r3
 801057a:	f3bf 8f6f 	isb	sy
 801057e:	f3bf 8f4f 	dsb	sy
 8010582:	60bb      	str	r3, [r7, #8]
}
 8010584:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010586:	bf00      	nop
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d0fc      	beq.n	8010588 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801058e:	bf00      	nop
 8010590:	bf00      	nop
 8010592:	3714      	adds	r7, #20
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr
 801059c:	200000d4 	.word	0x200000d4

080105a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80105a0:	4b07      	ldr	r3, [pc, #28]	; (80105c0 <pxCurrentTCBConst2>)
 80105a2:	6819      	ldr	r1, [r3, #0]
 80105a4:	6808      	ldr	r0, [r1, #0]
 80105a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105aa:	f380 8809 	msr	PSP, r0
 80105ae:	f3bf 8f6f 	isb	sy
 80105b2:	f04f 0000 	mov.w	r0, #0
 80105b6:	f380 8811 	msr	BASEPRI, r0
 80105ba:	4770      	bx	lr
 80105bc:	f3af 8000 	nop.w

080105c0 <pxCurrentTCBConst2>:
 80105c0:	200095e8 	.word	0x200095e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80105c4:	bf00      	nop
 80105c6:	bf00      	nop

080105c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80105c8:	4808      	ldr	r0, [pc, #32]	; (80105ec <prvPortStartFirstTask+0x24>)
 80105ca:	6800      	ldr	r0, [r0, #0]
 80105cc:	6800      	ldr	r0, [r0, #0]
 80105ce:	f380 8808 	msr	MSP, r0
 80105d2:	f04f 0000 	mov.w	r0, #0
 80105d6:	f380 8814 	msr	CONTROL, r0
 80105da:	b662      	cpsie	i
 80105dc:	b661      	cpsie	f
 80105de:	f3bf 8f4f 	dsb	sy
 80105e2:	f3bf 8f6f 	isb	sy
 80105e6:	df00      	svc	0
 80105e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80105ea:	bf00      	nop
 80105ec:	e000ed08 	.word	0xe000ed08

080105f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b086      	sub	sp, #24
 80105f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80105f6:	4b46      	ldr	r3, [pc, #280]	; (8010710 <xPortStartScheduler+0x120>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	4a46      	ldr	r2, [pc, #280]	; (8010714 <xPortStartScheduler+0x124>)
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d10a      	bne.n	8010616 <xPortStartScheduler+0x26>
	__asm volatile
 8010600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010604:	f383 8811 	msr	BASEPRI, r3
 8010608:	f3bf 8f6f 	isb	sy
 801060c:	f3bf 8f4f 	dsb	sy
 8010610:	613b      	str	r3, [r7, #16]
}
 8010612:	bf00      	nop
 8010614:	e7fe      	b.n	8010614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010616:	4b3e      	ldr	r3, [pc, #248]	; (8010710 <xPortStartScheduler+0x120>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	4a3f      	ldr	r2, [pc, #252]	; (8010718 <xPortStartScheduler+0x128>)
 801061c:	4293      	cmp	r3, r2
 801061e:	d10a      	bne.n	8010636 <xPortStartScheduler+0x46>
	__asm volatile
 8010620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010624:	f383 8811 	msr	BASEPRI, r3
 8010628:	f3bf 8f6f 	isb	sy
 801062c:	f3bf 8f4f 	dsb	sy
 8010630:	60fb      	str	r3, [r7, #12]
}
 8010632:	bf00      	nop
 8010634:	e7fe      	b.n	8010634 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010636:	4b39      	ldr	r3, [pc, #228]	; (801071c <xPortStartScheduler+0x12c>)
 8010638:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	b2db      	uxtb	r3, r3
 8010640:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	22ff      	movs	r2, #255	; 0xff
 8010646:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	b2db      	uxtb	r3, r3
 801064e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010650:	78fb      	ldrb	r3, [r7, #3]
 8010652:	b2db      	uxtb	r3, r3
 8010654:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010658:	b2da      	uxtb	r2, r3
 801065a:	4b31      	ldr	r3, [pc, #196]	; (8010720 <xPortStartScheduler+0x130>)
 801065c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801065e:	4b31      	ldr	r3, [pc, #196]	; (8010724 <xPortStartScheduler+0x134>)
 8010660:	2207      	movs	r2, #7
 8010662:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010664:	e009      	b.n	801067a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010666:	4b2f      	ldr	r3, [pc, #188]	; (8010724 <xPortStartScheduler+0x134>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	3b01      	subs	r3, #1
 801066c:	4a2d      	ldr	r2, [pc, #180]	; (8010724 <xPortStartScheduler+0x134>)
 801066e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010670:	78fb      	ldrb	r3, [r7, #3]
 8010672:	b2db      	uxtb	r3, r3
 8010674:	005b      	lsls	r3, r3, #1
 8010676:	b2db      	uxtb	r3, r3
 8010678:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801067a:	78fb      	ldrb	r3, [r7, #3]
 801067c:	b2db      	uxtb	r3, r3
 801067e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010682:	2b80      	cmp	r3, #128	; 0x80
 8010684:	d0ef      	beq.n	8010666 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010686:	4b27      	ldr	r3, [pc, #156]	; (8010724 <xPortStartScheduler+0x134>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	f1c3 0307 	rsb	r3, r3, #7
 801068e:	2b04      	cmp	r3, #4
 8010690:	d00a      	beq.n	80106a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010696:	f383 8811 	msr	BASEPRI, r3
 801069a:	f3bf 8f6f 	isb	sy
 801069e:	f3bf 8f4f 	dsb	sy
 80106a2:	60bb      	str	r3, [r7, #8]
}
 80106a4:	bf00      	nop
 80106a6:	e7fe      	b.n	80106a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80106a8:	4b1e      	ldr	r3, [pc, #120]	; (8010724 <xPortStartScheduler+0x134>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	021b      	lsls	r3, r3, #8
 80106ae:	4a1d      	ldr	r2, [pc, #116]	; (8010724 <xPortStartScheduler+0x134>)
 80106b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80106b2:	4b1c      	ldr	r3, [pc, #112]	; (8010724 <xPortStartScheduler+0x134>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80106ba:	4a1a      	ldr	r2, [pc, #104]	; (8010724 <xPortStartScheduler+0x134>)
 80106bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	b2da      	uxtb	r2, r3
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80106c6:	4b18      	ldr	r3, [pc, #96]	; (8010728 <xPortStartScheduler+0x138>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	4a17      	ldr	r2, [pc, #92]	; (8010728 <xPortStartScheduler+0x138>)
 80106cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80106d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80106d2:	4b15      	ldr	r3, [pc, #84]	; (8010728 <xPortStartScheduler+0x138>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	4a14      	ldr	r2, [pc, #80]	; (8010728 <xPortStartScheduler+0x138>)
 80106d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80106dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80106de:	f000 f8dd 	bl	801089c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80106e2:	4b12      	ldr	r3, [pc, #72]	; (801072c <xPortStartScheduler+0x13c>)
 80106e4:	2200      	movs	r2, #0
 80106e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80106e8:	f000 f8fc 	bl	80108e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80106ec:	4b10      	ldr	r3, [pc, #64]	; (8010730 <xPortStartScheduler+0x140>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4a0f      	ldr	r2, [pc, #60]	; (8010730 <xPortStartScheduler+0x140>)
 80106f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80106f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80106f8:	f7ff ff66 	bl	80105c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80106fc:	f7fe ff3e 	bl	800f57c <vTaskSwitchContext>
	prvTaskExitError();
 8010700:	f7ff ff22 	bl	8010548 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010704:	2300      	movs	r3, #0
}
 8010706:	4618      	mov	r0, r3
 8010708:	3718      	adds	r7, #24
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	e000ed00 	.word	0xe000ed00
 8010714:	410fc271 	.word	0x410fc271
 8010718:	410fc270 	.word	0x410fc270
 801071c:	e000e400 	.word	0xe000e400
 8010720:	20009c14 	.word	0x20009c14
 8010724:	20009c18 	.word	0x20009c18
 8010728:	e000ed20 	.word	0xe000ed20
 801072c:	200000d4 	.word	0x200000d4
 8010730:	e000ef34 	.word	0xe000ef34

08010734 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010734:	b480      	push	{r7}
 8010736:	b083      	sub	sp, #12
 8010738:	af00      	add	r7, sp, #0
	__asm volatile
 801073a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073e:	f383 8811 	msr	BASEPRI, r3
 8010742:	f3bf 8f6f 	isb	sy
 8010746:	f3bf 8f4f 	dsb	sy
 801074a:	607b      	str	r3, [r7, #4]
}
 801074c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801074e:	4b0f      	ldr	r3, [pc, #60]	; (801078c <vPortEnterCritical+0x58>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	3301      	adds	r3, #1
 8010754:	4a0d      	ldr	r2, [pc, #52]	; (801078c <vPortEnterCritical+0x58>)
 8010756:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010758:	4b0c      	ldr	r3, [pc, #48]	; (801078c <vPortEnterCritical+0x58>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	2b01      	cmp	r3, #1
 801075e:	d10f      	bne.n	8010780 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010760:	4b0b      	ldr	r3, [pc, #44]	; (8010790 <vPortEnterCritical+0x5c>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	b2db      	uxtb	r3, r3
 8010766:	2b00      	cmp	r3, #0
 8010768:	d00a      	beq.n	8010780 <vPortEnterCritical+0x4c>
	__asm volatile
 801076a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076e:	f383 8811 	msr	BASEPRI, r3
 8010772:	f3bf 8f6f 	isb	sy
 8010776:	f3bf 8f4f 	dsb	sy
 801077a:	603b      	str	r3, [r7, #0]
}
 801077c:	bf00      	nop
 801077e:	e7fe      	b.n	801077e <vPortEnterCritical+0x4a>
	}
}
 8010780:	bf00      	nop
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr
 801078c:	200000d4 	.word	0x200000d4
 8010790:	e000ed04 	.word	0xe000ed04

08010794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801079a:	4b12      	ldr	r3, [pc, #72]	; (80107e4 <vPortExitCritical+0x50>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d10a      	bne.n	80107b8 <vPortExitCritical+0x24>
	__asm volatile
 80107a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a6:	f383 8811 	msr	BASEPRI, r3
 80107aa:	f3bf 8f6f 	isb	sy
 80107ae:	f3bf 8f4f 	dsb	sy
 80107b2:	607b      	str	r3, [r7, #4]
}
 80107b4:	bf00      	nop
 80107b6:	e7fe      	b.n	80107b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80107b8:	4b0a      	ldr	r3, [pc, #40]	; (80107e4 <vPortExitCritical+0x50>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	3b01      	subs	r3, #1
 80107be:	4a09      	ldr	r2, [pc, #36]	; (80107e4 <vPortExitCritical+0x50>)
 80107c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80107c2:	4b08      	ldr	r3, [pc, #32]	; (80107e4 <vPortExitCritical+0x50>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d105      	bne.n	80107d6 <vPortExitCritical+0x42>
 80107ca:	2300      	movs	r3, #0
 80107cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	f383 8811 	msr	BASEPRI, r3
}
 80107d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80107d6:	bf00      	nop
 80107d8:	370c      	adds	r7, #12
 80107da:	46bd      	mov	sp, r7
 80107dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e0:	4770      	bx	lr
 80107e2:	bf00      	nop
 80107e4:	200000d4 	.word	0x200000d4
	...

080107f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80107f0:	f3ef 8009 	mrs	r0, PSP
 80107f4:	f3bf 8f6f 	isb	sy
 80107f8:	4b15      	ldr	r3, [pc, #84]	; (8010850 <pxCurrentTCBConst>)
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	f01e 0f10 	tst.w	lr, #16
 8010800:	bf08      	it	eq
 8010802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801080a:	6010      	str	r0, [r2, #0]
 801080c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010814:	f380 8811 	msr	BASEPRI, r0
 8010818:	f3bf 8f4f 	dsb	sy
 801081c:	f3bf 8f6f 	isb	sy
 8010820:	f7fe feac 	bl	800f57c <vTaskSwitchContext>
 8010824:	f04f 0000 	mov.w	r0, #0
 8010828:	f380 8811 	msr	BASEPRI, r0
 801082c:	bc09      	pop	{r0, r3}
 801082e:	6819      	ldr	r1, [r3, #0]
 8010830:	6808      	ldr	r0, [r1, #0]
 8010832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010836:	f01e 0f10 	tst.w	lr, #16
 801083a:	bf08      	it	eq
 801083c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010840:	f380 8809 	msr	PSP, r0
 8010844:	f3bf 8f6f 	isb	sy
 8010848:	4770      	bx	lr
 801084a:	bf00      	nop
 801084c:	f3af 8000 	nop.w

08010850 <pxCurrentTCBConst>:
 8010850:	200095e8 	.word	0x200095e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010854:	bf00      	nop
 8010856:	bf00      	nop

08010858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
	__asm volatile
 801085e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010862:	f383 8811 	msr	BASEPRI, r3
 8010866:	f3bf 8f6f 	isb	sy
 801086a:	f3bf 8f4f 	dsb	sy
 801086e:	607b      	str	r3, [r7, #4]
}
 8010870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010872:	f7fe fdc9 	bl	800f408 <xTaskIncrementTick>
 8010876:	4603      	mov	r3, r0
 8010878:	2b00      	cmp	r3, #0
 801087a:	d003      	beq.n	8010884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801087c:	4b06      	ldr	r3, [pc, #24]	; (8010898 <xPortSysTickHandler+0x40>)
 801087e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010882:	601a      	str	r2, [r3, #0]
 8010884:	2300      	movs	r3, #0
 8010886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	f383 8811 	msr	BASEPRI, r3
}
 801088e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010890:	bf00      	nop
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	e000ed04 	.word	0xe000ed04

0801089c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801089c:	b480      	push	{r7}
 801089e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80108a0:	4b0b      	ldr	r3, [pc, #44]	; (80108d0 <vPortSetupTimerInterrupt+0x34>)
 80108a2:	2200      	movs	r2, #0
 80108a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80108a6:	4b0b      	ldr	r3, [pc, #44]	; (80108d4 <vPortSetupTimerInterrupt+0x38>)
 80108a8:	2200      	movs	r2, #0
 80108aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80108ac:	4b0a      	ldr	r3, [pc, #40]	; (80108d8 <vPortSetupTimerInterrupt+0x3c>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4a0a      	ldr	r2, [pc, #40]	; (80108dc <vPortSetupTimerInterrupt+0x40>)
 80108b2:	fba2 2303 	umull	r2, r3, r2, r3
 80108b6:	099b      	lsrs	r3, r3, #6
 80108b8:	4a09      	ldr	r2, [pc, #36]	; (80108e0 <vPortSetupTimerInterrupt+0x44>)
 80108ba:	3b01      	subs	r3, #1
 80108bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80108be:	4b04      	ldr	r3, [pc, #16]	; (80108d0 <vPortSetupTimerInterrupt+0x34>)
 80108c0:	2207      	movs	r2, #7
 80108c2:	601a      	str	r2, [r3, #0]
}
 80108c4:	bf00      	nop
 80108c6:	46bd      	mov	sp, r7
 80108c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	e000e010 	.word	0xe000e010
 80108d4:	e000e018 	.word	0xe000e018
 80108d8:	200000a4 	.word	0x200000a4
 80108dc:	10624dd3 	.word	0x10624dd3
 80108e0:	e000e014 	.word	0xe000e014

080108e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80108e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80108f4 <vPortEnableVFP+0x10>
 80108e8:	6801      	ldr	r1, [r0, #0]
 80108ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80108ee:	6001      	str	r1, [r0, #0]
 80108f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80108f2:	bf00      	nop
 80108f4:	e000ed88 	.word	0xe000ed88

080108f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80108f8:	b480      	push	{r7}
 80108fa:	b085      	sub	sp, #20
 80108fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80108fe:	f3ef 8305 	mrs	r3, IPSR
 8010902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2b0f      	cmp	r3, #15
 8010908:	d914      	bls.n	8010934 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801090a:	4a17      	ldr	r2, [pc, #92]	; (8010968 <vPortValidateInterruptPriority+0x70>)
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	4413      	add	r3, r2
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010914:	4b15      	ldr	r3, [pc, #84]	; (801096c <vPortValidateInterruptPriority+0x74>)
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	7afa      	ldrb	r2, [r7, #11]
 801091a:	429a      	cmp	r2, r3
 801091c:	d20a      	bcs.n	8010934 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801091e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010922:	f383 8811 	msr	BASEPRI, r3
 8010926:	f3bf 8f6f 	isb	sy
 801092a:	f3bf 8f4f 	dsb	sy
 801092e:	607b      	str	r3, [r7, #4]
}
 8010930:	bf00      	nop
 8010932:	e7fe      	b.n	8010932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010934:	4b0e      	ldr	r3, [pc, #56]	; (8010970 <vPortValidateInterruptPriority+0x78>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801093c:	4b0d      	ldr	r3, [pc, #52]	; (8010974 <vPortValidateInterruptPriority+0x7c>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	429a      	cmp	r2, r3
 8010942:	d90a      	bls.n	801095a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	603b      	str	r3, [r7, #0]
}
 8010956:	bf00      	nop
 8010958:	e7fe      	b.n	8010958 <vPortValidateInterruptPriority+0x60>
	}
 801095a:	bf00      	nop
 801095c:	3714      	adds	r7, #20
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr
 8010966:	bf00      	nop
 8010968:	e000e3f0 	.word	0xe000e3f0
 801096c:	20009c14 	.word	0x20009c14
 8010970:	e000ed0c 	.word	0xe000ed0c
 8010974:	20009c18 	.word	0x20009c18

08010978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b088      	sub	sp, #32
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010980:	2300      	movs	r3, #0
 8010982:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8010984:	4b48      	ldr	r3, [pc, #288]	; (8010aa8 <pvPortMalloc+0x130>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d10a      	bne.n	80109a2 <pvPortMalloc+0x2a>
	__asm volatile
 801098c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010990:	f383 8811 	msr	BASEPRI, r3
 8010994:	f3bf 8f6f 	isb	sy
 8010998:	f3bf 8f4f 	dsb	sy
 801099c:	60fb      	str	r3, [r7, #12]
}
 801099e:	bf00      	nop
 80109a0:	e7fe      	b.n	80109a0 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 80109a2:	f7fe fc75 	bl	800f290 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80109a6:	4b41      	ldr	r3, [pc, #260]	; (8010aac <pvPortMalloc+0x134>)
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	4013      	ands	r3, r2
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d172      	bne.n	8010a98 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d00d      	beq.n	80109d4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 80109b8:	2208      	movs	r2, #8
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	4413      	add	r3, r2
 80109be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f003 0307 	and.w	r3, r3, #7
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d004      	beq.n	80109d4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f023 0307 	bic.w	r3, r3, #7
 80109d0:	3308      	adds	r3, #8
 80109d2:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d05e      	beq.n	8010a98 <pvPortMalloc+0x120>
 80109da:	4b35      	ldr	r3, [pc, #212]	; (8010ab0 <pvPortMalloc+0x138>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d859      	bhi.n	8010a98 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80109e4:	4b33      	ldr	r3, [pc, #204]	; (8010ab4 <pvPortMalloc+0x13c>)
 80109e6:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 80109e8:	4b32      	ldr	r3, [pc, #200]	; (8010ab4 <pvPortMalloc+0x13c>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109ee:	e004      	b.n	80109fa <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 80109f0:	69fb      	ldr	r3, [r7, #28]
 80109f2:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d903      	bls.n	8010a0c <pvPortMalloc+0x94>
 8010a04:	69fb      	ldr	r3, [r7, #28]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d1f1      	bne.n	80109f0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010a0c:	4b26      	ldr	r3, [pc, #152]	; (8010aa8 <pvPortMalloc+0x130>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	69fa      	ldr	r2, [r7, #28]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d040      	beq.n	8010a98 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010a16:	69bb      	ldr	r3, [r7, #24]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2208      	movs	r2, #8
 8010a1c:	4413      	add	r3, r2
 8010a1e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	69bb      	ldr	r3, [r7, #24]
 8010a26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010a28:	69fb      	ldr	r3, [r7, #28]
 8010a2a:	685a      	ldr	r2, [r3, #4]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	1ad2      	subs	r2, r2, r3
 8010a30:	2308      	movs	r3, #8
 8010a32:	005b      	lsls	r3, r3, #1
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d90f      	bls.n	8010a58 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010a38:	69fa      	ldr	r2, [r7, #28]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	4413      	add	r3, r2
 8010a3e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	685a      	ldr	r2, [r3, #4]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	1ad2      	subs	r2, r2, r3
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010a52:	6938      	ldr	r0, [r7, #16]
 8010a54:	f000 f8a2 	bl	8010b9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a58:	4b15      	ldr	r3, [pc, #84]	; (8010ab0 <pvPortMalloc+0x138>)
 8010a5a:	681a      	ldr	r2, [r3, #0]
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	685b      	ldr	r3, [r3, #4]
 8010a60:	1ad3      	subs	r3, r2, r3
 8010a62:	4a13      	ldr	r2, [pc, #76]	; (8010ab0 <pvPortMalloc+0x138>)
 8010a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a66:	4b12      	ldr	r3, [pc, #72]	; (8010ab0 <pvPortMalloc+0x138>)
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	4b13      	ldr	r3, [pc, #76]	; (8010ab8 <pvPortMalloc+0x140>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d203      	bcs.n	8010a7a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010a72:	4b0f      	ldr	r3, [pc, #60]	; (8010ab0 <pvPortMalloc+0x138>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4a10      	ldr	r2, [pc, #64]	; (8010ab8 <pvPortMalloc+0x140>)
 8010a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	685a      	ldr	r2, [r3, #4]
 8010a7e:	4b0b      	ldr	r3, [pc, #44]	; (8010aac <pvPortMalloc+0x134>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	431a      	orrs	r2, r3
 8010a84:	69fb      	ldr	r3, [r7, #28]
 8010a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010a8e:	4b0b      	ldr	r3, [pc, #44]	; (8010abc <pvPortMalloc+0x144>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	3301      	adds	r3, #1
 8010a94:	4a09      	ldr	r2, [pc, #36]	; (8010abc <pvPortMalloc+0x144>)
 8010a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010a98:	f7fe fc08 	bl	800f2ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 8010a9c:	697b      	ldr	r3, [r7, #20]
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3720      	adds	r7, #32
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	20009c24 	.word	0x20009c24
 8010aac:	20009c38 	.word	0x20009c38
 8010ab0:	20009c28 	.word	0x20009c28
 8010ab4:	20009c1c 	.word	0x20009c1c
 8010ab8:	20009c2c 	.word	0x20009c2c
 8010abc:	20009c30 	.word	0x20009c30

08010ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b086      	sub	sp, #24
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d04d      	beq.n	8010b6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010ad2:	2308      	movs	r3, #8
 8010ad4:	425b      	negs	r3, r3
 8010ad6:	697a      	ldr	r2, [r7, #20]
 8010ad8:	4413      	add	r3, r2
 8010ada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	685a      	ldr	r2, [r3, #4]
 8010ae4:	4b24      	ldr	r3, [pc, #144]	; (8010b78 <vPortFree+0xb8>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	4013      	ands	r3, r2
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d10a      	bne.n	8010b04 <vPortFree+0x44>
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af2:	f383 8811 	msr	BASEPRI, r3
 8010af6:	f3bf 8f6f 	isb	sy
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	60fb      	str	r3, [r7, #12]
}
 8010b00:	bf00      	nop
 8010b02:	e7fe      	b.n	8010b02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d00a      	beq.n	8010b22 <vPortFree+0x62>
	__asm volatile
 8010b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b10:	f383 8811 	msr	BASEPRI, r3
 8010b14:	f3bf 8f6f 	isb	sy
 8010b18:	f3bf 8f4f 	dsb	sy
 8010b1c:	60bb      	str	r3, [r7, #8]
}
 8010b1e:	bf00      	nop
 8010b20:	e7fe      	b.n	8010b20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	685a      	ldr	r2, [r3, #4]
 8010b26:	4b14      	ldr	r3, [pc, #80]	; (8010b78 <vPortFree+0xb8>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4013      	ands	r3, r2
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d01e      	beq.n	8010b6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d11a      	bne.n	8010b6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	685a      	ldr	r2, [r3, #4]
 8010b3c:	4b0e      	ldr	r3, [pc, #56]	; (8010b78 <vPortFree+0xb8>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	43db      	mvns	r3, r3
 8010b42:	401a      	ands	r2, r3
 8010b44:	693b      	ldr	r3, [r7, #16]
 8010b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010b48:	f7fe fba2 	bl	800f290 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	685a      	ldr	r2, [r3, #4]
 8010b50:	4b0a      	ldr	r3, [pc, #40]	; (8010b7c <vPortFree+0xbc>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	4413      	add	r3, r2
 8010b56:	4a09      	ldr	r2, [pc, #36]	; (8010b7c <vPortFree+0xbc>)
 8010b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010b5a:	6938      	ldr	r0, [r7, #16]
 8010b5c:	f000 f81e 	bl	8010b9c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010b60:	4b07      	ldr	r3, [pc, #28]	; (8010b80 <vPortFree+0xc0>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	3301      	adds	r3, #1
 8010b66:	4a06      	ldr	r2, [pc, #24]	; (8010b80 <vPortFree+0xc0>)
 8010b68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010b6a:	f7fe fb9f 	bl	800f2ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010b6e:	bf00      	nop
 8010b70:	3718      	adds	r7, #24
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	20009c38 	.word	0x20009c38
 8010b7c:	20009c28 	.word	0x20009c28
 8010b80:	20009c34 	.word	0x20009c34

08010b84 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8010b84:	b480      	push	{r7}
 8010b86:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8010b88:	4b03      	ldr	r3, [pc, #12]	; (8010b98 <xPortGetFreeHeapSize+0x14>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr
 8010b96:	bf00      	nop
 8010b98:	20009c28 	.word	0x20009c28

08010b9c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010ba4:	4b28      	ldr	r3, [pc, #160]	; (8010c48 <prvInsertBlockIntoFreeList+0xac>)
 8010ba6:	60fb      	str	r3, [r7, #12]
 8010ba8:	e002      	b.n	8010bb0 <prvInsertBlockIntoFreeList+0x14>
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	60fb      	str	r3, [r7, #12]
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d8f7      	bhi.n	8010baa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	68ba      	ldr	r2, [r7, #8]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	687a      	ldr	r2, [r7, #4]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d108      	bne.n	8010bde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	685a      	ldr	r2, [r3, #4]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	441a      	add	r2, r3
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	68ba      	ldr	r2, [r7, #8]
 8010be8:	441a      	add	r2, r3
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d118      	bne.n	8010c24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	4b15      	ldr	r3, [pc, #84]	; (8010c4c <prvInsertBlockIntoFreeList+0xb0>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d00d      	beq.n	8010c1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	685a      	ldr	r2, [r3, #4]
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	441a      	add	r2, r3
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	601a      	str	r2, [r3, #0]
 8010c18:	e008      	b.n	8010c2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010c1a:	4b0c      	ldr	r3, [pc, #48]	; (8010c4c <prvInsertBlockIntoFreeList+0xb0>)
 8010c1c:	681a      	ldr	r2, [r3, #0]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	601a      	str	r2, [r3, #0]
 8010c22:	e003      	b.n	8010c2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681a      	ldr	r2, [r3, #0]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010c2c:	68fa      	ldr	r2, [r7, #12]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d002      	beq.n	8010c3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c3a:	bf00      	nop
 8010c3c:	3714      	adds	r7, #20
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c44:	4770      	bx	lr
 8010c46:	bf00      	nop
 8010c48:	20009c1c 	.word	0x20009c1c
 8010c4c:	20009c24 	.word	0x20009c24

08010c50 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8010c50:	b480      	push	{r7}
 8010c52:	b08f      	sub	sp, #60	; 0x3c
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8010c60:	2300      	movs	r3, #0
 8010c62:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8010c64:	4b5a      	ldr	r3, [pc, #360]	; (8010dd0 <vPortDefineHeapRegions+0x180>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d00a      	beq.n	8010c82 <vPortDefineHeapRegions+0x32>
	__asm volatile
 8010c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c70:	f383 8811 	msr	BASEPRI, r3
 8010c74:	f3bf 8f6f 	isb	sy
 8010c78:	f3bf 8f4f 	dsb	sy
 8010c7c:	617b      	str	r3, [r7, #20]
}
 8010c7e:	bf00      	nop
 8010c80:	e7fe      	b.n	8010c80 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8010c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c84:	00db      	lsls	r3, r3, #3
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	4413      	add	r3, r2
 8010c8a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 8010c8c:	e07d      	b.n	8010d8a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8010c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 8010c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9c:	f003 0307 	and.w	r3, r3, #7
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00e      	beq.n	8010cc2 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 8010ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca6:	3307      	adds	r3, #7
 8010ca8:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8010caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cac:	f023 0307 	bic.w	r3, r3, #7
 8010cb0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 8010cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cba:	1ad3      	subs	r3, r2, r3
 8010cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cbe:	4413      	add	r3, r2
 8010cc0:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 8010cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc4:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 8010cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d106      	bne.n	8010cda <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	4a41      	ldr	r2, [pc, #260]	; (8010dd4 <vPortDefineHeapRegions+0x184>)
 8010cd0:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 8010cd2:	4b40      	ldr	r3, [pc, #256]	; (8010dd4 <vPortDefineHeapRegions+0x184>)
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	605a      	str	r2, [r3, #4]
 8010cd8:	e01f      	b.n	8010d1a <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 8010cda:	4b3d      	ldr	r3, [pc, #244]	; (8010dd0 <vPortDefineHeapRegions+0x180>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d10a      	bne.n	8010cf8 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 8010ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce6:	f383 8811 	msr	BASEPRI, r3
 8010cea:	f3bf 8f6f 	isb	sy
 8010cee:	f3bf 8f4f 	dsb	sy
 8010cf2:	613b      	str	r3, [r7, #16]
}
 8010cf4:	bf00      	nop
 8010cf6:	e7fe      	b.n	8010cf6 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8010cf8:	4b35      	ldr	r3, [pc, #212]	; (8010dd0 <vPortDefineHeapRegions+0x180>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	461a      	mov	r2, r3
 8010cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d80a      	bhi.n	8010d1a <vPortDefineHeapRegions+0xca>
	__asm volatile
 8010d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d08:	f383 8811 	msr	BASEPRI, r3
 8010d0c:	f3bf 8f6f 	isb	sy
 8010d10:	f3bf 8f4f 	dsb	sy
 8010d14:	60fb      	str	r3, [r7, #12]
}
 8010d16:	bf00      	nop
 8010d18:	e7fe      	b.n	8010d18 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 8010d1a:	4b2d      	ldr	r3, [pc, #180]	; (8010dd0 <vPortDefineHeapRegions+0x180>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8010d20:	69fa      	ldr	r2, [r7, #28]
 8010d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d24:	4413      	add	r3, r2
 8010d26:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 8010d28:	2208      	movs	r2, #8
 8010d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2c:	1a9b      	subs	r3, r3, r2
 8010d2e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8010d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d32:	f023 0307 	bic.w	r3, r3, #7
 8010d36:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8010d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3a:	4a25      	ldr	r2, [pc, #148]	; (8010dd0 <vPortDefineHeapRegions+0x180>)
 8010d3c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 8010d3e:	4b24      	ldr	r3, [pc, #144]	; (8010dd0 <vPortDefineHeapRegions+0x180>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	2200      	movs	r2, #0
 8010d44:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 8010d46:	4b22      	ldr	r3, [pc, #136]	; (8010dd0 <vPortDefineHeapRegions+0x180>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8010d4e:	69fb      	ldr	r3, [r7, #28]
 8010d50:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 8010d52:	6a3b      	ldr	r3, [r7, #32]
 8010d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d56:	1ad2      	subs	r2, r2, r3
 8010d58:	6a3b      	ldr	r3, [r7, #32]
 8010d5a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 8010d5c:	4b1c      	ldr	r3, [pc, #112]	; (8010dd0 <vPortDefineHeapRegions+0x180>)
 8010d5e:	681a      	ldr	r2, [r3, #0]
 8010d60:	6a3b      	ldr	r3, [r7, #32]
 8010d62:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 8010d64:	69bb      	ldr	r3, [r7, #24]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d002      	beq.n	8010d70 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 8010d6a:	69bb      	ldr	r3, [r7, #24]
 8010d6c:	6a3a      	ldr	r2, [r7, #32]
 8010d6e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8010d70:	6a3b      	ldr	r3, [r7, #32]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d76:	4413      	add	r3, r2
 8010d78:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 8010d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7c:	3301      	adds	r3, #1
 8010d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8010d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d82:	00db      	lsls	r3, r3, #3
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	4413      	add	r3, r2
 8010d88:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	f47f af7d 	bne.w	8010c8e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8010d94:	4a10      	ldr	r2, [pc, #64]	; (8010dd8 <vPortDefineHeapRegions+0x188>)
 8010d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d98:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 8010d9a:	4a10      	ldr	r2, [pc, #64]	; (8010ddc <vPortDefineHeapRegions+0x18c>)
 8010d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 8010da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d10a      	bne.n	8010dbc <vPortDefineHeapRegions+0x16c>
	__asm volatile
 8010da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010daa:	f383 8811 	msr	BASEPRI, r3
 8010dae:	f3bf 8f6f 	isb	sy
 8010db2:	f3bf 8f4f 	dsb	sy
 8010db6:	60bb      	str	r3, [r7, #8]
}
 8010db8:	bf00      	nop
 8010dba:	e7fe      	b.n	8010dba <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010dbc:	4b08      	ldr	r3, [pc, #32]	; (8010de0 <vPortDefineHeapRegions+0x190>)
 8010dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010dc2:	601a      	str	r2, [r3, #0]
}
 8010dc4:	bf00      	nop
 8010dc6:	373c      	adds	r7, #60	; 0x3c
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr
 8010dd0:	20009c24 	.word	0x20009c24
 8010dd4:	20009c1c 	.word	0x20009c1c
 8010dd8:	20009c2c 	.word	0x20009c2c
 8010ddc:	20009c28 	.word	0x20009c28
 8010de0:	20009c38 	.word	0x20009c38

08010de4 <atol>:
 8010de4:	220a      	movs	r2, #10
 8010de6:	2100      	movs	r1, #0
 8010de8:	f000 baec 	b.w	80113c4 <strtol>

08010dec <__errno>:
 8010dec:	4b01      	ldr	r3, [pc, #4]	; (8010df4 <__errno+0x8>)
 8010dee:	6818      	ldr	r0, [r3, #0]
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	200000d8 	.word	0x200000d8

08010df8 <gmtime_r>:
 8010df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dfc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010e00:	460c      	mov	r4, r1
 8010e02:	4a4f      	ldr	r2, [pc, #316]	; (8010f40 <gmtime_r+0x148>)
 8010e04:	2300      	movs	r3, #0
 8010e06:	4630      	mov	r0, r6
 8010e08:	4639      	mov	r1, r7
 8010e0a:	f7ef fd3f 	bl	800088c <__aeabi_ldivmod>
 8010e0e:	4639      	mov	r1, r7
 8010e10:	4605      	mov	r5, r0
 8010e12:	4a4b      	ldr	r2, [pc, #300]	; (8010f40 <gmtime_r+0x148>)
 8010e14:	4630      	mov	r0, r6
 8010e16:	2300      	movs	r3, #0
 8010e18:	f7ef fd38 	bl	800088c <__aeabi_ldivmod>
 8010e1c:	2a00      	cmp	r2, #0
 8010e1e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8010e22:	bfb7      	itett	lt
 8010e24:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8010e28:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8010e2c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8010e30:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8010e34:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8010e38:	fbb2 f1f0 	udiv	r1, r2, r0
 8010e3c:	fb00 2211 	mls	r2, r0, r1, r2
 8010e40:	203c      	movs	r0, #60	; 0x3c
 8010e42:	60a1      	str	r1, [r4, #8]
 8010e44:	fbb2 f1f0 	udiv	r1, r2, r0
 8010e48:	fb00 2211 	mls	r2, r0, r1, r2
 8010e4c:	6061      	str	r1, [r4, #4]
 8010e4e:	6022      	str	r2, [r4, #0]
 8010e50:	2107      	movs	r1, #7
 8010e52:	1cda      	adds	r2, r3, #3
 8010e54:	fb92 f1f1 	sdiv	r1, r2, r1
 8010e58:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8010e5c:	1a52      	subs	r2, r2, r1
 8010e5e:	bf48      	it	mi
 8010e60:	3207      	addmi	r2, #7
 8010e62:	4d38      	ldr	r5, [pc, #224]	; (8010f44 <gmtime_r+0x14c>)
 8010e64:	4838      	ldr	r0, [pc, #224]	; (8010f48 <gmtime_r+0x150>)
 8010e66:	61a2      	str	r2, [r4, #24]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	bfb7      	itett	lt
 8010e6c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8010e70:	fb93 f5f5 	sdivge	r5, r3, r5
 8010e74:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8010e78:	fb92 f5f5 	sdivlt	r5, r2, r5
 8010e7c:	fb00 3005 	mla	r0, r0, r5, r3
 8010e80:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8010e84:	fbb0 f2f2 	udiv	r2, r0, r2
 8010e88:	4402      	add	r2, r0
 8010e8a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8010e8e:	fbb0 f1f3 	udiv	r1, r0, r3
 8010e92:	1a52      	subs	r2, r2, r1
 8010e94:	f240 1c6d 	movw	ip, #365	; 0x16d
 8010e98:	492c      	ldr	r1, [pc, #176]	; (8010f4c <gmtime_r+0x154>)
 8010e9a:	fbb0 f1f1 	udiv	r1, r0, r1
 8010e9e:	2764      	movs	r7, #100	; 0x64
 8010ea0:	1a52      	subs	r2, r2, r1
 8010ea2:	fbb2 f1fc 	udiv	r1, r2, ip
 8010ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010eaa:	fbb1 f6f7 	udiv	r6, r1, r7
 8010eae:	1af3      	subs	r3, r6, r3
 8010eb0:	4403      	add	r3, r0
 8010eb2:	fb0c 3311 	mls	r3, ip, r1, r3
 8010eb6:	2299      	movs	r2, #153	; 0x99
 8010eb8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8010ebc:	f10e 0e02 	add.w	lr, lr, #2
 8010ec0:	f103 0c01 	add.w	ip, r3, #1
 8010ec4:	fbbe f0f2 	udiv	r0, lr, r2
 8010ec8:	4342      	muls	r2, r0
 8010eca:	3202      	adds	r2, #2
 8010ecc:	f04f 0805 	mov.w	r8, #5
 8010ed0:	fbb2 f2f8 	udiv	r2, r2, r8
 8010ed4:	ebac 0c02 	sub.w	ip, ip, r2
 8010ed8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8010edc:	4596      	cmp	lr, r2
 8010ede:	bf94      	ite	ls
 8010ee0:	2202      	movls	r2, #2
 8010ee2:	f06f 0209 	mvnhi.w	r2, #9
 8010ee6:	4410      	add	r0, r2
 8010ee8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010eec:	fb02 1505 	mla	r5, r2, r5, r1
 8010ef0:	2801      	cmp	r0, #1
 8010ef2:	bf98      	it	ls
 8010ef4:	3501      	addls	r5, #1
 8010ef6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8010efa:	d30d      	bcc.n	8010f18 <gmtime_r+0x120>
 8010efc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8010f00:	61e3      	str	r3, [r4, #28]
 8010f02:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8010f06:	2300      	movs	r3, #0
 8010f08:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8010f0c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8010f10:	6223      	str	r3, [r4, #32]
 8010f12:	4620      	mov	r0, r4
 8010f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f18:	078a      	lsls	r2, r1, #30
 8010f1a:	d102      	bne.n	8010f22 <gmtime_r+0x12a>
 8010f1c:	fb07 1616 	mls	r6, r7, r6, r1
 8010f20:	b95e      	cbnz	r6, 8010f3a <gmtime_r+0x142>
 8010f22:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010f26:	fbb1 f6f2 	udiv	r6, r1, r2
 8010f2a:	fb02 1216 	mls	r2, r2, r6, r1
 8010f2e:	fab2 f282 	clz	r2, r2
 8010f32:	0952      	lsrs	r2, r2, #5
 8010f34:	333b      	adds	r3, #59	; 0x3b
 8010f36:	4413      	add	r3, r2
 8010f38:	e7e2      	b.n	8010f00 <gmtime_r+0x108>
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	e7fa      	b.n	8010f34 <gmtime_r+0x13c>
 8010f3e:	bf00      	nop
 8010f40:	00015180 	.word	0x00015180
 8010f44:	00023ab1 	.word	0x00023ab1
 8010f48:	fffdc54f 	.word	0xfffdc54f
 8010f4c:	00023ab0 	.word	0x00023ab0

08010f50 <__libc_init_array>:
 8010f50:	b570      	push	{r4, r5, r6, lr}
 8010f52:	4d0d      	ldr	r5, [pc, #52]	; (8010f88 <__libc_init_array+0x38>)
 8010f54:	4c0d      	ldr	r4, [pc, #52]	; (8010f8c <__libc_init_array+0x3c>)
 8010f56:	1b64      	subs	r4, r4, r5
 8010f58:	10a4      	asrs	r4, r4, #2
 8010f5a:	2600      	movs	r6, #0
 8010f5c:	42a6      	cmp	r6, r4
 8010f5e:	d109      	bne.n	8010f74 <__libc_init_array+0x24>
 8010f60:	4d0b      	ldr	r5, [pc, #44]	; (8010f90 <__libc_init_array+0x40>)
 8010f62:	4c0c      	ldr	r4, [pc, #48]	; (8010f94 <__libc_init_array+0x44>)
 8010f64:	f000 fe0c 	bl	8011b80 <_init>
 8010f68:	1b64      	subs	r4, r4, r5
 8010f6a:	10a4      	asrs	r4, r4, #2
 8010f6c:	2600      	movs	r6, #0
 8010f6e:	42a6      	cmp	r6, r4
 8010f70:	d105      	bne.n	8010f7e <__libc_init_array+0x2e>
 8010f72:	bd70      	pop	{r4, r5, r6, pc}
 8010f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f78:	4798      	blx	r3
 8010f7a:	3601      	adds	r6, #1
 8010f7c:	e7ee      	b.n	8010f5c <__libc_init_array+0xc>
 8010f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f82:	4798      	blx	r3
 8010f84:	3601      	adds	r6, #1
 8010f86:	e7f2      	b.n	8010f6e <__libc_init_array+0x1e>
 8010f88:	08014c14 	.word	0x08014c14
 8010f8c:	08014c14 	.word	0x08014c14
 8010f90:	08014c14 	.word	0x08014c14
 8010f94:	08014c18 	.word	0x08014c18

08010f98 <__retarget_lock_acquire_recursive>:
 8010f98:	4770      	bx	lr

08010f9a <__retarget_lock_release_recursive>:
 8010f9a:	4770      	bx	lr

08010f9c <memcpy>:
 8010f9c:	440a      	add	r2, r1
 8010f9e:	4291      	cmp	r1, r2
 8010fa0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010fa4:	d100      	bne.n	8010fa8 <memcpy+0xc>
 8010fa6:	4770      	bx	lr
 8010fa8:	b510      	push	{r4, lr}
 8010faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010fb2:	4291      	cmp	r1, r2
 8010fb4:	d1f9      	bne.n	8010faa <memcpy+0xe>
 8010fb6:	bd10      	pop	{r4, pc}

08010fb8 <memset>:
 8010fb8:	4402      	add	r2, r0
 8010fba:	4603      	mov	r3, r0
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d100      	bne.n	8010fc2 <memset+0xa>
 8010fc0:	4770      	bx	lr
 8010fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8010fc6:	e7f9      	b.n	8010fbc <memset+0x4>

08010fc8 <sbrk_aligned>:
 8010fc8:	b570      	push	{r4, r5, r6, lr}
 8010fca:	4e0e      	ldr	r6, [pc, #56]	; (8011004 <sbrk_aligned+0x3c>)
 8010fcc:	460c      	mov	r4, r1
 8010fce:	6831      	ldr	r1, [r6, #0]
 8010fd0:	4605      	mov	r5, r0
 8010fd2:	b911      	cbnz	r1, 8010fda <sbrk_aligned+0x12>
 8010fd4:	f000 f8f6 	bl	80111c4 <_sbrk_r>
 8010fd8:	6030      	str	r0, [r6, #0]
 8010fda:	4621      	mov	r1, r4
 8010fdc:	4628      	mov	r0, r5
 8010fde:	f000 f8f1 	bl	80111c4 <_sbrk_r>
 8010fe2:	1c43      	adds	r3, r0, #1
 8010fe4:	d00a      	beq.n	8010ffc <sbrk_aligned+0x34>
 8010fe6:	1cc4      	adds	r4, r0, #3
 8010fe8:	f024 0403 	bic.w	r4, r4, #3
 8010fec:	42a0      	cmp	r0, r4
 8010fee:	d007      	beq.n	8011000 <sbrk_aligned+0x38>
 8010ff0:	1a21      	subs	r1, r4, r0
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	f000 f8e6 	bl	80111c4 <_sbrk_r>
 8010ff8:	3001      	adds	r0, #1
 8010ffa:	d101      	bne.n	8011000 <sbrk_aligned+0x38>
 8010ffc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011000:	4620      	mov	r0, r4
 8011002:	bd70      	pop	{r4, r5, r6, pc}
 8011004:	20009c44 	.word	0x20009c44

08011008 <_malloc_r>:
 8011008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801100c:	1ccd      	adds	r5, r1, #3
 801100e:	f025 0503 	bic.w	r5, r5, #3
 8011012:	3508      	adds	r5, #8
 8011014:	2d0c      	cmp	r5, #12
 8011016:	bf38      	it	cc
 8011018:	250c      	movcc	r5, #12
 801101a:	2d00      	cmp	r5, #0
 801101c:	4607      	mov	r7, r0
 801101e:	db01      	blt.n	8011024 <_malloc_r+0x1c>
 8011020:	42a9      	cmp	r1, r5
 8011022:	d905      	bls.n	8011030 <_malloc_r+0x28>
 8011024:	230c      	movs	r3, #12
 8011026:	603b      	str	r3, [r7, #0]
 8011028:	2600      	movs	r6, #0
 801102a:	4630      	mov	r0, r6
 801102c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011030:	4e2e      	ldr	r6, [pc, #184]	; (80110ec <_malloc_r+0xe4>)
 8011032:	f000 fa0b 	bl	801144c <__malloc_lock>
 8011036:	6833      	ldr	r3, [r6, #0]
 8011038:	461c      	mov	r4, r3
 801103a:	bb34      	cbnz	r4, 801108a <_malloc_r+0x82>
 801103c:	4629      	mov	r1, r5
 801103e:	4638      	mov	r0, r7
 8011040:	f7ff ffc2 	bl	8010fc8 <sbrk_aligned>
 8011044:	1c43      	adds	r3, r0, #1
 8011046:	4604      	mov	r4, r0
 8011048:	d14d      	bne.n	80110e6 <_malloc_r+0xde>
 801104a:	6834      	ldr	r4, [r6, #0]
 801104c:	4626      	mov	r6, r4
 801104e:	2e00      	cmp	r6, #0
 8011050:	d140      	bne.n	80110d4 <_malloc_r+0xcc>
 8011052:	6823      	ldr	r3, [r4, #0]
 8011054:	4631      	mov	r1, r6
 8011056:	4638      	mov	r0, r7
 8011058:	eb04 0803 	add.w	r8, r4, r3
 801105c:	f000 f8b2 	bl	80111c4 <_sbrk_r>
 8011060:	4580      	cmp	r8, r0
 8011062:	d13a      	bne.n	80110da <_malloc_r+0xd2>
 8011064:	6821      	ldr	r1, [r4, #0]
 8011066:	3503      	adds	r5, #3
 8011068:	1a6d      	subs	r5, r5, r1
 801106a:	f025 0503 	bic.w	r5, r5, #3
 801106e:	3508      	adds	r5, #8
 8011070:	2d0c      	cmp	r5, #12
 8011072:	bf38      	it	cc
 8011074:	250c      	movcc	r5, #12
 8011076:	4629      	mov	r1, r5
 8011078:	4638      	mov	r0, r7
 801107a:	f7ff ffa5 	bl	8010fc8 <sbrk_aligned>
 801107e:	3001      	adds	r0, #1
 8011080:	d02b      	beq.n	80110da <_malloc_r+0xd2>
 8011082:	6823      	ldr	r3, [r4, #0]
 8011084:	442b      	add	r3, r5
 8011086:	6023      	str	r3, [r4, #0]
 8011088:	e00e      	b.n	80110a8 <_malloc_r+0xa0>
 801108a:	6822      	ldr	r2, [r4, #0]
 801108c:	1b52      	subs	r2, r2, r5
 801108e:	d41e      	bmi.n	80110ce <_malloc_r+0xc6>
 8011090:	2a0b      	cmp	r2, #11
 8011092:	d916      	bls.n	80110c2 <_malloc_r+0xba>
 8011094:	1961      	adds	r1, r4, r5
 8011096:	42a3      	cmp	r3, r4
 8011098:	6025      	str	r5, [r4, #0]
 801109a:	bf18      	it	ne
 801109c:	6059      	strne	r1, [r3, #4]
 801109e:	6863      	ldr	r3, [r4, #4]
 80110a0:	bf08      	it	eq
 80110a2:	6031      	streq	r1, [r6, #0]
 80110a4:	5162      	str	r2, [r4, r5]
 80110a6:	604b      	str	r3, [r1, #4]
 80110a8:	4638      	mov	r0, r7
 80110aa:	f104 060b 	add.w	r6, r4, #11
 80110ae:	f000 f9d3 	bl	8011458 <__malloc_unlock>
 80110b2:	f026 0607 	bic.w	r6, r6, #7
 80110b6:	1d23      	adds	r3, r4, #4
 80110b8:	1af2      	subs	r2, r6, r3
 80110ba:	d0b6      	beq.n	801102a <_malloc_r+0x22>
 80110bc:	1b9b      	subs	r3, r3, r6
 80110be:	50a3      	str	r3, [r4, r2]
 80110c0:	e7b3      	b.n	801102a <_malloc_r+0x22>
 80110c2:	6862      	ldr	r2, [r4, #4]
 80110c4:	42a3      	cmp	r3, r4
 80110c6:	bf0c      	ite	eq
 80110c8:	6032      	streq	r2, [r6, #0]
 80110ca:	605a      	strne	r2, [r3, #4]
 80110cc:	e7ec      	b.n	80110a8 <_malloc_r+0xa0>
 80110ce:	4623      	mov	r3, r4
 80110d0:	6864      	ldr	r4, [r4, #4]
 80110d2:	e7b2      	b.n	801103a <_malloc_r+0x32>
 80110d4:	4634      	mov	r4, r6
 80110d6:	6876      	ldr	r6, [r6, #4]
 80110d8:	e7b9      	b.n	801104e <_malloc_r+0x46>
 80110da:	230c      	movs	r3, #12
 80110dc:	603b      	str	r3, [r7, #0]
 80110de:	4638      	mov	r0, r7
 80110e0:	f000 f9ba 	bl	8011458 <__malloc_unlock>
 80110e4:	e7a1      	b.n	801102a <_malloc_r+0x22>
 80110e6:	6025      	str	r5, [r4, #0]
 80110e8:	e7de      	b.n	80110a8 <_malloc_r+0xa0>
 80110ea:	bf00      	nop
 80110ec:	20009c40 	.word	0x20009c40

080110f0 <cleanup_glue>:
 80110f0:	b538      	push	{r3, r4, r5, lr}
 80110f2:	460c      	mov	r4, r1
 80110f4:	6809      	ldr	r1, [r1, #0]
 80110f6:	4605      	mov	r5, r0
 80110f8:	b109      	cbz	r1, 80110fe <cleanup_glue+0xe>
 80110fa:	f7ff fff9 	bl	80110f0 <cleanup_glue>
 80110fe:	4621      	mov	r1, r4
 8011100:	4628      	mov	r0, r5
 8011102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011106:	f000 b9ad 	b.w	8011464 <_free_r>
	...

0801110c <_reclaim_reent>:
 801110c:	4b2c      	ldr	r3, [pc, #176]	; (80111c0 <_reclaim_reent+0xb4>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	4283      	cmp	r3, r0
 8011112:	b570      	push	{r4, r5, r6, lr}
 8011114:	4604      	mov	r4, r0
 8011116:	d051      	beq.n	80111bc <_reclaim_reent+0xb0>
 8011118:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801111a:	b143      	cbz	r3, 801112e <_reclaim_reent+0x22>
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d14a      	bne.n	80111b8 <_reclaim_reent+0xac>
 8011122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011124:	6819      	ldr	r1, [r3, #0]
 8011126:	b111      	cbz	r1, 801112e <_reclaim_reent+0x22>
 8011128:	4620      	mov	r0, r4
 801112a:	f000 f99b 	bl	8011464 <_free_r>
 801112e:	6961      	ldr	r1, [r4, #20]
 8011130:	b111      	cbz	r1, 8011138 <_reclaim_reent+0x2c>
 8011132:	4620      	mov	r0, r4
 8011134:	f000 f996 	bl	8011464 <_free_r>
 8011138:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801113a:	b111      	cbz	r1, 8011142 <_reclaim_reent+0x36>
 801113c:	4620      	mov	r0, r4
 801113e:	f000 f991 	bl	8011464 <_free_r>
 8011142:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011144:	b111      	cbz	r1, 801114c <_reclaim_reent+0x40>
 8011146:	4620      	mov	r0, r4
 8011148:	f000 f98c 	bl	8011464 <_free_r>
 801114c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801114e:	b111      	cbz	r1, 8011156 <_reclaim_reent+0x4a>
 8011150:	4620      	mov	r0, r4
 8011152:	f000 f987 	bl	8011464 <_free_r>
 8011156:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011158:	b111      	cbz	r1, 8011160 <_reclaim_reent+0x54>
 801115a:	4620      	mov	r0, r4
 801115c:	f000 f982 	bl	8011464 <_free_r>
 8011160:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011162:	b111      	cbz	r1, 801116a <_reclaim_reent+0x5e>
 8011164:	4620      	mov	r0, r4
 8011166:	f000 f97d 	bl	8011464 <_free_r>
 801116a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801116c:	b111      	cbz	r1, 8011174 <_reclaim_reent+0x68>
 801116e:	4620      	mov	r0, r4
 8011170:	f000 f978 	bl	8011464 <_free_r>
 8011174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011176:	b111      	cbz	r1, 801117e <_reclaim_reent+0x72>
 8011178:	4620      	mov	r0, r4
 801117a:	f000 f973 	bl	8011464 <_free_r>
 801117e:	69a3      	ldr	r3, [r4, #24]
 8011180:	b1e3      	cbz	r3, 80111bc <_reclaim_reent+0xb0>
 8011182:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011184:	4620      	mov	r0, r4
 8011186:	4798      	blx	r3
 8011188:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801118a:	b1b9      	cbz	r1, 80111bc <_reclaim_reent+0xb0>
 801118c:	4620      	mov	r0, r4
 801118e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011192:	f7ff bfad 	b.w	80110f0 <cleanup_glue>
 8011196:	5949      	ldr	r1, [r1, r5]
 8011198:	b941      	cbnz	r1, 80111ac <_reclaim_reent+0xa0>
 801119a:	3504      	adds	r5, #4
 801119c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801119e:	2d80      	cmp	r5, #128	; 0x80
 80111a0:	68d9      	ldr	r1, [r3, #12]
 80111a2:	d1f8      	bne.n	8011196 <_reclaim_reent+0x8a>
 80111a4:	4620      	mov	r0, r4
 80111a6:	f000 f95d 	bl	8011464 <_free_r>
 80111aa:	e7ba      	b.n	8011122 <_reclaim_reent+0x16>
 80111ac:	680e      	ldr	r6, [r1, #0]
 80111ae:	4620      	mov	r0, r4
 80111b0:	f000 f958 	bl	8011464 <_free_r>
 80111b4:	4631      	mov	r1, r6
 80111b6:	e7ef      	b.n	8011198 <_reclaim_reent+0x8c>
 80111b8:	2500      	movs	r5, #0
 80111ba:	e7ef      	b.n	801119c <_reclaim_reent+0x90>
 80111bc:	bd70      	pop	{r4, r5, r6, pc}
 80111be:	bf00      	nop
 80111c0:	200000d8 	.word	0x200000d8

080111c4 <_sbrk_r>:
 80111c4:	b538      	push	{r3, r4, r5, lr}
 80111c6:	4d06      	ldr	r5, [pc, #24]	; (80111e0 <_sbrk_r+0x1c>)
 80111c8:	2300      	movs	r3, #0
 80111ca:	4604      	mov	r4, r0
 80111cc:	4608      	mov	r0, r1
 80111ce:	602b      	str	r3, [r5, #0]
 80111d0:	f7f3 ffea 	bl	80051a8 <_sbrk>
 80111d4:	1c43      	adds	r3, r0, #1
 80111d6:	d102      	bne.n	80111de <_sbrk_r+0x1a>
 80111d8:	682b      	ldr	r3, [r5, #0]
 80111da:	b103      	cbz	r3, 80111de <_sbrk_r+0x1a>
 80111dc:	6023      	str	r3, [r4, #0]
 80111de:	bd38      	pop	{r3, r4, r5, pc}
 80111e0:	20009c48 	.word	0x20009c48

080111e4 <siprintf>:
 80111e4:	b40e      	push	{r1, r2, r3}
 80111e6:	b500      	push	{lr}
 80111e8:	b09c      	sub	sp, #112	; 0x70
 80111ea:	ab1d      	add	r3, sp, #116	; 0x74
 80111ec:	9002      	str	r0, [sp, #8]
 80111ee:	9006      	str	r0, [sp, #24]
 80111f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80111f4:	4809      	ldr	r0, [pc, #36]	; (801121c <siprintf+0x38>)
 80111f6:	9107      	str	r1, [sp, #28]
 80111f8:	9104      	str	r1, [sp, #16]
 80111fa:	4909      	ldr	r1, [pc, #36]	; (8011220 <siprintf+0x3c>)
 80111fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011200:	9105      	str	r1, [sp, #20]
 8011202:	6800      	ldr	r0, [r0, #0]
 8011204:	9301      	str	r3, [sp, #4]
 8011206:	a902      	add	r1, sp, #8
 8011208:	f000 f9d4 	bl	80115b4 <_svfiprintf_r>
 801120c:	9b02      	ldr	r3, [sp, #8]
 801120e:	2200      	movs	r2, #0
 8011210:	701a      	strb	r2, [r3, #0]
 8011212:	b01c      	add	sp, #112	; 0x70
 8011214:	f85d eb04 	ldr.w	lr, [sp], #4
 8011218:	b003      	add	sp, #12
 801121a:	4770      	bx	lr
 801121c:	200000d8 	.word	0x200000d8
 8011220:	ffff0208 	.word	0xffff0208

08011224 <strcat>:
 8011224:	b510      	push	{r4, lr}
 8011226:	4602      	mov	r2, r0
 8011228:	7814      	ldrb	r4, [r2, #0]
 801122a:	4613      	mov	r3, r2
 801122c:	3201      	adds	r2, #1
 801122e:	2c00      	cmp	r4, #0
 8011230:	d1fa      	bne.n	8011228 <strcat+0x4>
 8011232:	3b01      	subs	r3, #1
 8011234:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011238:	f803 2f01 	strb.w	r2, [r3, #1]!
 801123c:	2a00      	cmp	r2, #0
 801123e:	d1f9      	bne.n	8011234 <strcat+0x10>
 8011240:	bd10      	pop	{r4, pc}

08011242 <strchr>:
 8011242:	b2c9      	uxtb	r1, r1
 8011244:	4603      	mov	r3, r0
 8011246:	f810 2b01 	ldrb.w	r2, [r0], #1
 801124a:	b11a      	cbz	r2, 8011254 <strchr+0x12>
 801124c:	428a      	cmp	r2, r1
 801124e:	d1f9      	bne.n	8011244 <strchr+0x2>
 8011250:	4618      	mov	r0, r3
 8011252:	4770      	bx	lr
 8011254:	2900      	cmp	r1, #0
 8011256:	bf18      	it	ne
 8011258:	2300      	movne	r3, #0
 801125a:	e7f9      	b.n	8011250 <strchr+0xe>

0801125c <strcpy>:
 801125c:	4603      	mov	r3, r0
 801125e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011262:	f803 2b01 	strb.w	r2, [r3], #1
 8011266:	2a00      	cmp	r2, #0
 8011268:	d1f9      	bne.n	801125e <strcpy+0x2>
 801126a:	4770      	bx	lr

0801126c <strncpy>:
 801126c:	b510      	push	{r4, lr}
 801126e:	3901      	subs	r1, #1
 8011270:	4603      	mov	r3, r0
 8011272:	b132      	cbz	r2, 8011282 <strncpy+0x16>
 8011274:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011278:	f803 4b01 	strb.w	r4, [r3], #1
 801127c:	3a01      	subs	r2, #1
 801127e:	2c00      	cmp	r4, #0
 8011280:	d1f7      	bne.n	8011272 <strncpy+0x6>
 8011282:	441a      	add	r2, r3
 8011284:	2100      	movs	r1, #0
 8011286:	4293      	cmp	r3, r2
 8011288:	d100      	bne.n	801128c <strncpy+0x20>
 801128a:	bd10      	pop	{r4, pc}
 801128c:	f803 1b01 	strb.w	r1, [r3], #1
 8011290:	e7f9      	b.n	8011286 <strncpy+0x1a>

08011292 <strstr>:
 8011292:	780a      	ldrb	r2, [r1, #0]
 8011294:	b570      	push	{r4, r5, r6, lr}
 8011296:	b96a      	cbnz	r2, 80112b4 <strstr+0x22>
 8011298:	bd70      	pop	{r4, r5, r6, pc}
 801129a:	429a      	cmp	r2, r3
 801129c:	d109      	bne.n	80112b2 <strstr+0x20>
 801129e:	460c      	mov	r4, r1
 80112a0:	4605      	mov	r5, r0
 80112a2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d0f6      	beq.n	8011298 <strstr+0x6>
 80112aa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80112ae:	429e      	cmp	r6, r3
 80112b0:	d0f7      	beq.n	80112a2 <strstr+0x10>
 80112b2:	3001      	adds	r0, #1
 80112b4:	7803      	ldrb	r3, [r0, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d1ef      	bne.n	801129a <strstr+0x8>
 80112ba:	4618      	mov	r0, r3
 80112bc:	e7ec      	b.n	8011298 <strstr+0x6>
	...

080112c0 <_strtol_l.constprop.0>:
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112c6:	d001      	beq.n	80112cc <_strtol_l.constprop.0+0xc>
 80112c8:	2b24      	cmp	r3, #36	; 0x24
 80112ca:	d906      	bls.n	80112da <_strtol_l.constprop.0+0x1a>
 80112cc:	f7ff fd8e 	bl	8010dec <__errno>
 80112d0:	2316      	movs	r3, #22
 80112d2:	6003      	str	r3, [r0, #0]
 80112d4:	2000      	movs	r0, #0
 80112d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80113c0 <_strtol_l.constprop.0+0x100>
 80112de:	460d      	mov	r5, r1
 80112e0:	462e      	mov	r6, r5
 80112e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80112e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80112ea:	f017 0708 	ands.w	r7, r7, #8
 80112ee:	d1f7      	bne.n	80112e0 <_strtol_l.constprop.0+0x20>
 80112f0:	2c2d      	cmp	r4, #45	; 0x2d
 80112f2:	d132      	bne.n	801135a <_strtol_l.constprop.0+0x9a>
 80112f4:	782c      	ldrb	r4, [r5, #0]
 80112f6:	2701      	movs	r7, #1
 80112f8:	1cb5      	adds	r5, r6, #2
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d05b      	beq.n	80113b6 <_strtol_l.constprop.0+0xf6>
 80112fe:	2b10      	cmp	r3, #16
 8011300:	d109      	bne.n	8011316 <_strtol_l.constprop.0+0x56>
 8011302:	2c30      	cmp	r4, #48	; 0x30
 8011304:	d107      	bne.n	8011316 <_strtol_l.constprop.0+0x56>
 8011306:	782c      	ldrb	r4, [r5, #0]
 8011308:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801130c:	2c58      	cmp	r4, #88	; 0x58
 801130e:	d14d      	bne.n	80113ac <_strtol_l.constprop.0+0xec>
 8011310:	786c      	ldrb	r4, [r5, #1]
 8011312:	2310      	movs	r3, #16
 8011314:	3502      	adds	r5, #2
 8011316:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801131a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801131e:	f04f 0c00 	mov.w	ip, #0
 8011322:	fbb8 f9f3 	udiv	r9, r8, r3
 8011326:	4666      	mov	r6, ip
 8011328:	fb03 8a19 	mls	sl, r3, r9, r8
 801132c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011330:	f1be 0f09 	cmp.w	lr, #9
 8011334:	d816      	bhi.n	8011364 <_strtol_l.constprop.0+0xa4>
 8011336:	4674      	mov	r4, lr
 8011338:	42a3      	cmp	r3, r4
 801133a:	dd24      	ble.n	8011386 <_strtol_l.constprop.0+0xc6>
 801133c:	f1bc 0f00 	cmp.w	ip, #0
 8011340:	db1e      	blt.n	8011380 <_strtol_l.constprop.0+0xc0>
 8011342:	45b1      	cmp	r9, r6
 8011344:	d31c      	bcc.n	8011380 <_strtol_l.constprop.0+0xc0>
 8011346:	d101      	bne.n	801134c <_strtol_l.constprop.0+0x8c>
 8011348:	45a2      	cmp	sl, r4
 801134a:	db19      	blt.n	8011380 <_strtol_l.constprop.0+0xc0>
 801134c:	fb06 4603 	mla	r6, r6, r3, r4
 8011350:	f04f 0c01 	mov.w	ip, #1
 8011354:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011358:	e7e8      	b.n	801132c <_strtol_l.constprop.0+0x6c>
 801135a:	2c2b      	cmp	r4, #43	; 0x2b
 801135c:	bf04      	itt	eq
 801135e:	782c      	ldrbeq	r4, [r5, #0]
 8011360:	1cb5      	addeq	r5, r6, #2
 8011362:	e7ca      	b.n	80112fa <_strtol_l.constprop.0+0x3a>
 8011364:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011368:	f1be 0f19 	cmp.w	lr, #25
 801136c:	d801      	bhi.n	8011372 <_strtol_l.constprop.0+0xb2>
 801136e:	3c37      	subs	r4, #55	; 0x37
 8011370:	e7e2      	b.n	8011338 <_strtol_l.constprop.0+0x78>
 8011372:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011376:	f1be 0f19 	cmp.w	lr, #25
 801137a:	d804      	bhi.n	8011386 <_strtol_l.constprop.0+0xc6>
 801137c:	3c57      	subs	r4, #87	; 0x57
 801137e:	e7db      	b.n	8011338 <_strtol_l.constprop.0+0x78>
 8011380:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011384:	e7e6      	b.n	8011354 <_strtol_l.constprop.0+0x94>
 8011386:	f1bc 0f00 	cmp.w	ip, #0
 801138a:	da05      	bge.n	8011398 <_strtol_l.constprop.0+0xd8>
 801138c:	2322      	movs	r3, #34	; 0x22
 801138e:	6003      	str	r3, [r0, #0]
 8011390:	4646      	mov	r6, r8
 8011392:	b942      	cbnz	r2, 80113a6 <_strtol_l.constprop.0+0xe6>
 8011394:	4630      	mov	r0, r6
 8011396:	e79e      	b.n	80112d6 <_strtol_l.constprop.0+0x16>
 8011398:	b107      	cbz	r7, 801139c <_strtol_l.constprop.0+0xdc>
 801139a:	4276      	negs	r6, r6
 801139c:	2a00      	cmp	r2, #0
 801139e:	d0f9      	beq.n	8011394 <_strtol_l.constprop.0+0xd4>
 80113a0:	f1bc 0f00 	cmp.w	ip, #0
 80113a4:	d000      	beq.n	80113a8 <_strtol_l.constprop.0+0xe8>
 80113a6:	1e69      	subs	r1, r5, #1
 80113a8:	6011      	str	r1, [r2, #0]
 80113aa:	e7f3      	b.n	8011394 <_strtol_l.constprop.0+0xd4>
 80113ac:	2430      	movs	r4, #48	; 0x30
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d1b1      	bne.n	8011316 <_strtol_l.constprop.0+0x56>
 80113b2:	2308      	movs	r3, #8
 80113b4:	e7af      	b.n	8011316 <_strtol_l.constprop.0+0x56>
 80113b6:	2c30      	cmp	r4, #48	; 0x30
 80113b8:	d0a5      	beq.n	8011306 <_strtol_l.constprop.0+0x46>
 80113ba:	230a      	movs	r3, #10
 80113bc:	e7ab      	b.n	8011316 <_strtol_l.constprop.0+0x56>
 80113be:	bf00      	nop
 80113c0:	08014ad9 	.word	0x08014ad9

080113c4 <strtol>:
 80113c4:	4613      	mov	r3, r2
 80113c6:	460a      	mov	r2, r1
 80113c8:	4601      	mov	r1, r0
 80113ca:	4802      	ldr	r0, [pc, #8]	; (80113d4 <strtol+0x10>)
 80113cc:	6800      	ldr	r0, [r0, #0]
 80113ce:	f7ff bf77 	b.w	80112c0 <_strtol_l.constprop.0>
 80113d2:	bf00      	nop
 80113d4:	200000d8 	.word	0x200000d8

080113d8 <_vsniprintf_r>:
 80113d8:	b530      	push	{r4, r5, lr}
 80113da:	4614      	mov	r4, r2
 80113dc:	2c00      	cmp	r4, #0
 80113de:	b09b      	sub	sp, #108	; 0x6c
 80113e0:	4605      	mov	r5, r0
 80113e2:	461a      	mov	r2, r3
 80113e4:	da05      	bge.n	80113f2 <_vsniprintf_r+0x1a>
 80113e6:	238b      	movs	r3, #139	; 0x8b
 80113e8:	6003      	str	r3, [r0, #0]
 80113ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113ee:	b01b      	add	sp, #108	; 0x6c
 80113f0:	bd30      	pop	{r4, r5, pc}
 80113f2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80113f6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80113fa:	bf14      	ite	ne
 80113fc:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011400:	4623      	moveq	r3, r4
 8011402:	9302      	str	r3, [sp, #8]
 8011404:	9305      	str	r3, [sp, #20]
 8011406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801140a:	9100      	str	r1, [sp, #0]
 801140c:	9104      	str	r1, [sp, #16]
 801140e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011412:	4669      	mov	r1, sp
 8011414:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011416:	f000 f8cd 	bl	80115b4 <_svfiprintf_r>
 801141a:	1c43      	adds	r3, r0, #1
 801141c:	bfbc      	itt	lt
 801141e:	238b      	movlt	r3, #139	; 0x8b
 8011420:	602b      	strlt	r3, [r5, #0]
 8011422:	2c00      	cmp	r4, #0
 8011424:	d0e3      	beq.n	80113ee <_vsniprintf_r+0x16>
 8011426:	9b00      	ldr	r3, [sp, #0]
 8011428:	2200      	movs	r2, #0
 801142a:	701a      	strb	r2, [r3, #0]
 801142c:	e7df      	b.n	80113ee <_vsniprintf_r+0x16>
	...

08011430 <vsniprintf>:
 8011430:	b507      	push	{r0, r1, r2, lr}
 8011432:	9300      	str	r3, [sp, #0]
 8011434:	4613      	mov	r3, r2
 8011436:	460a      	mov	r2, r1
 8011438:	4601      	mov	r1, r0
 801143a:	4803      	ldr	r0, [pc, #12]	; (8011448 <vsniprintf+0x18>)
 801143c:	6800      	ldr	r0, [r0, #0]
 801143e:	f7ff ffcb 	bl	80113d8 <_vsniprintf_r>
 8011442:	b003      	add	sp, #12
 8011444:	f85d fb04 	ldr.w	pc, [sp], #4
 8011448:	200000d8 	.word	0x200000d8

0801144c <__malloc_lock>:
 801144c:	4801      	ldr	r0, [pc, #4]	; (8011454 <__malloc_lock+0x8>)
 801144e:	f7ff bda3 	b.w	8010f98 <__retarget_lock_acquire_recursive>
 8011452:	bf00      	nop
 8011454:	20009c3c 	.word	0x20009c3c

08011458 <__malloc_unlock>:
 8011458:	4801      	ldr	r0, [pc, #4]	; (8011460 <__malloc_unlock+0x8>)
 801145a:	f7ff bd9e 	b.w	8010f9a <__retarget_lock_release_recursive>
 801145e:	bf00      	nop
 8011460:	20009c3c 	.word	0x20009c3c

08011464 <_free_r>:
 8011464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011466:	2900      	cmp	r1, #0
 8011468:	d044      	beq.n	80114f4 <_free_r+0x90>
 801146a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801146e:	9001      	str	r0, [sp, #4]
 8011470:	2b00      	cmp	r3, #0
 8011472:	f1a1 0404 	sub.w	r4, r1, #4
 8011476:	bfb8      	it	lt
 8011478:	18e4      	addlt	r4, r4, r3
 801147a:	f7ff ffe7 	bl	801144c <__malloc_lock>
 801147e:	4a1e      	ldr	r2, [pc, #120]	; (80114f8 <_free_r+0x94>)
 8011480:	9801      	ldr	r0, [sp, #4]
 8011482:	6813      	ldr	r3, [r2, #0]
 8011484:	b933      	cbnz	r3, 8011494 <_free_r+0x30>
 8011486:	6063      	str	r3, [r4, #4]
 8011488:	6014      	str	r4, [r2, #0]
 801148a:	b003      	add	sp, #12
 801148c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011490:	f7ff bfe2 	b.w	8011458 <__malloc_unlock>
 8011494:	42a3      	cmp	r3, r4
 8011496:	d908      	bls.n	80114aa <_free_r+0x46>
 8011498:	6825      	ldr	r5, [r4, #0]
 801149a:	1961      	adds	r1, r4, r5
 801149c:	428b      	cmp	r3, r1
 801149e:	bf01      	itttt	eq
 80114a0:	6819      	ldreq	r1, [r3, #0]
 80114a2:	685b      	ldreq	r3, [r3, #4]
 80114a4:	1949      	addeq	r1, r1, r5
 80114a6:	6021      	streq	r1, [r4, #0]
 80114a8:	e7ed      	b.n	8011486 <_free_r+0x22>
 80114aa:	461a      	mov	r2, r3
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	b10b      	cbz	r3, 80114b4 <_free_r+0x50>
 80114b0:	42a3      	cmp	r3, r4
 80114b2:	d9fa      	bls.n	80114aa <_free_r+0x46>
 80114b4:	6811      	ldr	r1, [r2, #0]
 80114b6:	1855      	adds	r5, r2, r1
 80114b8:	42a5      	cmp	r5, r4
 80114ba:	d10b      	bne.n	80114d4 <_free_r+0x70>
 80114bc:	6824      	ldr	r4, [r4, #0]
 80114be:	4421      	add	r1, r4
 80114c0:	1854      	adds	r4, r2, r1
 80114c2:	42a3      	cmp	r3, r4
 80114c4:	6011      	str	r1, [r2, #0]
 80114c6:	d1e0      	bne.n	801148a <_free_r+0x26>
 80114c8:	681c      	ldr	r4, [r3, #0]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	6053      	str	r3, [r2, #4]
 80114ce:	4421      	add	r1, r4
 80114d0:	6011      	str	r1, [r2, #0]
 80114d2:	e7da      	b.n	801148a <_free_r+0x26>
 80114d4:	d902      	bls.n	80114dc <_free_r+0x78>
 80114d6:	230c      	movs	r3, #12
 80114d8:	6003      	str	r3, [r0, #0]
 80114da:	e7d6      	b.n	801148a <_free_r+0x26>
 80114dc:	6825      	ldr	r5, [r4, #0]
 80114de:	1961      	adds	r1, r4, r5
 80114e0:	428b      	cmp	r3, r1
 80114e2:	bf04      	itt	eq
 80114e4:	6819      	ldreq	r1, [r3, #0]
 80114e6:	685b      	ldreq	r3, [r3, #4]
 80114e8:	6063      	str	r3, [r4, #4]
 80114ea:	bf04      	itt	eq
 80114ec:	1949      	addeq	r1, r1, r5
 80114ee:	6021      	streq	r1, [r4, #0]
 80114f0:	6054      	str	r4, [r2, #4]
 80114f2:	e7ca      	b.n	801148a <_free_r+0x26>
 80114f4:	b003      	add	sp, #12
 80114f6:	bd30      	pop	{r4, r5, pc}
 80114f8:	20009c40 	.word	0x20009c40

080114fc <__ssputs_r>:
 80114fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011500:	688e      	ldr	r6, [r1, #8]
 8011502:	429e      	cmp	r6, r3
 8011504:	4682      	mov	sl, r0
 8011506:	460c      	mov	r4, r1
 8011508:	4690      	mov	r8, r2
 801150a:	461f      	mov	r7, r3
 801150c:	d838      	bhi.n	8011580 <__ssputs_r+0x84>
 801150e:	898a      	ldrh	r2, [r1, #12]
 8011510:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011514:	d032      	beq.n	801157c <__ssputs_r+0x80>
 8011516:	6825      	ldr	r5, [r4, #0]
 8011518:	6909      	ldr	r1, [r1, #16]
 801151a:	eba5 0901 	sub.w	r9, r5, r1
 801151e:	6965      	ldr	r5, [r4, #20]
 8011520:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011524:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011528:	3301      	adds	r3, #1
 801152a:	444b      	add	r3, r9
 801152c:	106d      	asrs	r5, r5, #1
 801152e:	429d      	cmp	r5, r3
 8011530:	bf38      	it	cc
 8011532:	461d      	movcc	r5, r3
 8011534:	0553      	lsls	r3, r2, #21
 8011536:	d531      	bpl.n	801159c <__ssputs_r+0xa0>
 8011538:	4629      	mov	r1, r5
 801153a:	f7ff fd65 	bl	8011008 <_malloc_r>
 801153e:	4606      	mov	r6, r0
 8011540:	b950      	cbnz	r0, 8011558 <__ssputs_r+0x5c>
 8011542:	230c      	movs	r3, #12
 8011544:	f8ca 3000 	str.w	r3, [sl]
 8011548:	89a3      	ldrh	r3, [r4, #12]
 801154a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801154e:	81a3      	strh	r3, [r4, #12]
 8011550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011558:	6921      	ldr	r1, [r4, #16]
 801155a:	464a      	mov	r2, r9
 801155c:	f7ff fd1e 	bl	8010f9c <memcpy>
 8011560:	89a3      	ldrh	r3, [r4, #12]
 8011562:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801156a:	81a3      	strh	r3, [r4, #12]
 801156c:	6126      	str	r6, [r4, #16]
 801156e:	6165      	str	r5, [r4, #20]
 8011570:	444e      	add	r6, r9
 8011572:	eba5 0509 	sub.w	r5, r5, r9
 8011576:	6026      	str	r6, [r4, #0]
 8011578:	60a5      	str	r5, [r4, #8]
 801157a:	463e      	mov	r6, r7
 801157c:	42be      	cmp	r6, r7
 801157e:	d900      	bls.n	8011582 <__ssputs_r+0x86>
 8011580:	463e      	mov	r6, r7
 8011582:	6820      	ldr	r0, [r4, #0]
 8011584:	4632      	mov	r2, r6
 8011586:	4641      	mov	r1, r8
 8011588:	f000 faa8 	bl	8011adc <memmove>
 801158c:	68a3      	ldr	r3, [r4, #8]
 801158e:	1b9b      	subs	r3, r3, r6
 8011590:	60a3      	str	r3, [r4, #8]
 8011592:	6823      	ldr	r3, [r4, #0]
 8011594:	4433      	add	r3, r6
 8011596:	6023      	str	r3, [r4, #0]
 8011598:	2000      	movs	r0, #0
 801159a:	e7db      	b.n	8011554 <__ssputs_r+0x58>
 801159c:	462a      	mov	r2, r5
 801159e:	f000 fab7 	bl	8011b10 <_realloc_r>
 80115a2:	4606      	mov	r6, r0
 80115a4:	2800      	cmp	r0, #0
 80115a6:	d1e1      	bne.n	801156c <__ssputs_r+0x70>
 80115a8:	6921      	ldr	r1, [r4, #16]
 80115aa:	4650      	mov	r0, sl
 80115ac:	f7ff ff5a 	bl	8011464 <_free_r>
 80115b0:	e7c7      	b.n	8011542 <__ssputs_r+0x46>
	...

080115b4 <_svfiprintf_r>:
 80115b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115b8:	4698      	mov	r8, r3
 80115ba:	898b      	ldrh	r3, [r1, #12]
 80115bc:	061b      	lsls	r3, r3, #24
 80115be:	b09d      	sub	sp, #116	; 0x74
 80115c0:	4607      	mov	r7, r0
 80115c2:	460d      	mov	r5, r1
 80115c4:	4614      	mov	r4, r2
 80115c6:	d50e      	bpl.n	80115e6 <_svfiprintf_r+0x32>
 80115c8:	690b      	ldr	r3, [r1, #16]
 80115ca:	b963      	cbnz	r3, 80115e6 <_svfiprintf_r+0x32>
 80115cc:	2140      	movs	r1, #64	; 0x40
 80115ce:	f7ff fd1b 	bl	8011008 <_malloc_r>
 80115d2:	6028      	str	r0, [r5, #0]
 80115d4:	6128      	str	r0, [r5, #16]
 80115d6:	b920      	cbnz	r0, 80115e2 <_svfiprintf_r+0x2e>
 80115d8:	230c      	movs	r3, #12
 80115da:	603b      	str	r3, [r7, #0]
 80115dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115e0:	e0d1      	b.n	8011786 <_svfiprintf_r+0x1d2>
 80115e2:	2340      	movs	r3, #64	; 0x40
 80115e4:	616b      	str	r3, [r5, #20]
 80115e6:	2300      	movs	r3, #0
 80115e8:	9309      	str	r3, [sp, #36]	; 0x24
 80115ea:	2320      	movs	r3, #32
 80115ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80115f4:	2330      	movs	r3, #48	; 0x30
 80115f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80117a0 <_svfiprintf_r+0x1ec>
 80115fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115fe:	f04f 0901 	mov.w	r9, #1
 8011602:	4623      	mov	r3, r4
 8011604:	469a      	mov	sl, r3
 8011606:	f813 2b01 	ldrb.w	r2, [r3], #1
 801160a:	b10a      	cbz	r2, 8011610 <_svfiprintf_r+0x5c>
 801160c:	2a25      	cmp	r2, #37	; 0x25
 801160e:	d1f9      	bne.n	8011604 <_svfiprintf_r+0x50>
 8011610:	ebba 0b04 	subs.w	fp, sl, r4
 8011614:	d00b      	beq.n	801162e <_svfiprintf_r+0x7a>
 8011616:	465b      	mov	r3, fp
 8011618:	4622      	mov	r2, r4
 801161a:	4629      	mov	r1, r5
 801161c:	4638      	mov	r0, r7
 801161e:	f7ff ff6d 	bl	80114fc <__ssputs_r>
 8011622:	3001      	adds	r0, #1
 8011624:	f000 80aa 	beq.w	801177c <_svfiprintf_r+0x1c8>
 8011628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801162a:	445a      	add	r2, fp
 801162c:	9209      	str	r2, [sp, #36]	; 0x24
 801162e:	f89a 3000 	ldrb.w	r3, [sl]
 8011632:	2b00      	cmp	r3, #0
 8011634:	f000 80a2 	beq.w	801177c <_svfiprintf_r+0x1c8>
 8011638:	2300      	movs	r3, #0
 801163a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801163e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011642:	f10a 0a01 	add.w	sl, sl, #1
 8011646:	9304      	str	r3, [sp, #16]
 8011648:	9307      	str	r3, [sp, #28]
 801164a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801164e:	931a      	str	r3, [sp, #104]	; 0x68
 8011650:	4654      	mov	r4, sl
 8011652:	2205      	movs	r2, #5
 8011654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011658:	4851      	ldr	r0, [pc, #324]	; (80117a0 <_svfiprintf_r+0x1ec>)
 801165a:	f7ee fdc1 	bl	80001e0 <memchr>
 801165e:	9a04      	ldr	r2, [sp, #16]
 8011660:	b9d8      	cbnz	r0, 801169a <_svfiprintf_r+0xe6>
 8011662:	06d0      	lsls	r0, r2, #27
 8011664:	bf44      	itt	mi
 8011666:	2320      	movmi	r3, #32
 8011668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801166c:	0711      	lsls	r1, r2, #28
 801166e:	bf44      	itt	mi
 8011670:	232b      	movmi	r3, #43	; 0x2b
 8011672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011676:	f89a 3000 	ldrb.w	r3, [sl]
 801167a:	2b2a      	cmp	r3, #42	; 0x2a
 801167c:	d015      	beq.n	80116aa <_svfiprintf_r+0xf6>
 801167e:	9a07      	ldr	r2, [sp, #28]
 8011680:	4654      	mov	r4, sl
 8011682:	2000      	movs	r0, #0
 8011684:	f04f 0c0a 	mov.w	ip, #10
 8011688:	4621      	mov	r1, r4
 801168a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801168e:	3b30      	subs	r3, #48	; 0x30
 8011690:	2b09      	cmp	r3, #9
 8011692:	d94e      	bls.n	8011732 <_svfiprintf_r+0x17e>
 8011694:	b1b0      	cbz	r0, 80116c4 <_svfiprintf_r+0x110>
 8011696:	9207      	str	r2, [sp, #28]
 8011698:	e014      	b.n	80116c4 <_svfiprintf_r+0x110>
 801169a:	eba0 0308 	sub.w	r3, r0, r8
 801169e:	fa09 f303 	lsl.w	r3, r9, r3
 80116a2:	4313      	orrs	r3, r2
 80116a4:	9304      	str	r3, [sp, #16]
 80116a6:	46a2      	mov	sl, r4
 80116a8:	e7d2      	b.n	8011650 <_svfiprintf_r+0x9c>
 80116aa:	9b03      	ldr	r3, [sp, #12]
 80116ac:	1d19      	adds	r1, r3, #4
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	9103      	str	r1, [sp, #12]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	bfbb      	ittet	lt
 80116b6:	425b      	neglt	r3, r3
 80116b8:	f042 0202 	orrlt.w	r2, r2, #2
 80116bc:	9307      	strge	r3, [sp, #28]
 80116be:	9307      	strlt	r3, [sp, #28]
 80116c0:	bfb8      	it	lt
 80116c2:	9204      	strlt	r2, [sp, #16]
 80116c4:	7823      	ldrb	r3, [r4, #0]
 80116c6:	2b2e      	cmp	r3, #46	; 0x2e
 80116c8:	d10c      	bne.n	80116e4 <_svfiprintf_r+0x130>
 80116ca:	7863      	ldrb	r3, [r4, #1]
 80116cc:	2b2a      	cmp	r3, #42	; 0x2a
 80116ce:	d135      	bne.n	801173c <_svfiprintf_r+0x188>
 80116d0:	9b03      	ldr	r3, [sp, #12]
 80116d2:	1d1a      	adds	r2, r3, #4
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	9203      	str	r2, [sp, #12]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	bfb8      	it	lt
 80116dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80116e0:	3402      	adds	r4, #2
 80116e2:	9305      	str	r3, [sp, #20]
 80116e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80117b0 <_svfiprintf_r+0x1fc>
 80116e8:	7821      	ldrb	r1, [r4, #0]
 80116ea:	2203      	movs	r2, #3
 80116ec:	4650      	mov	r0, sl
 80116ee:	f7ee fd77 	bl	80001e0 <memchr>
 80116f2:	b140      	cbz	r0, 8011706 <_svfiprintf_r+0x152>
 80116f4:	2340      	movs	r3, #64	; 0x40
 80116f6:	eba0 000a 	sub.w	r0, r0, sl
 80116fa:	fa03 f000 	lsl.w	r0, r3, r0
 80116fe:	9b04      	ldr	r3, [sp, #16]
 8011700:	4303      	orrs	r3, r0
 8011702:	3401      	adds	r4, #1
 8011704:	9304      	str	r3, [sp, #16]
 8011706:	f814 1b01 	ldrb.w	r1, [r4], #1
 801170a:	4826      	ldr	r0, [pc, #152]	; (80117a4 <_svfiprintf_r+0x1f0>)
 801170c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011710:	2206      	movs	r2, #6
 8011712:	f7ee fd65 	bl	80001e0 <memchr>
 8011716:	2800      	cmp	r0, #0
 8011718:	d038      	beq.n	801178c <_svfiprintf_r+0x1d8>
 801171a:	4b23      	ldr	r3, [pc, #140]	; (80117a8 <_svfiprintf_r+0x1f4>)
 801171c:	bb1b      	cbnz	r3, 8011766 <_svfiprintf_r+0x1b2>
 801171e:	9b03      	ldr	r3, [sp, #12]
 8011720:	3307      	adds	r3, #7
 8011722:	f023 0307 	bic.w	r3, r3, #7
 8011726:	3308      	adds	r3, #8
 8011728:	9303      	str	r3, [sp, #12]
 801172a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801172c:	4433      	add	r3, r6
 801172e:	9309      	str	r3, [sp, #36]	; 0x24
 8011730:	e767      	b.n	8011602 <_svfiprintf_r+0x4e>
 8011732:	fb0c 3202 	mla	r2, ip, r2, r3
 8011736:	460c      	mov	r4, r1
 8011738:	2001      	movs	r0, #1
 801173a:	e7a5      	b.n	8011688 <_svfiprintf_r+0xd4>
 801173c:	2300      	movs	r3, #0
 801173e:	3401      	adds	r4, #1
 8011740:	9305      	str	r3, [sp, #20]
 8011742:	4619      	mov	r1, r3
 8011744:	f04f 0c0a 	mov.w	ip, #10
 8011748:	4620      	mov	r0, r4
 801174a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801174e:	3a30      	subs	r2, #48	; 0x30
 8011750:	2a09      	cmp	r2, #9
 8011752:	d903      	bls.n	801175c <_svfiprintf_r+0x1a8>
 8011754:	2b00      	cmp	r3, #0
 8011756:	d0c5      	beq.n	80116e4 <_svfiprintf_r+0x130>
 8011758:	9105      	str	r1, [sp, #20]
 801175a:	e7c3      	b.n	80116e4 <_svfiprintf_r+0x130>
 801175c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011760:	4604      	mov	r4, r0
 8011762:	2301      	movs	r3, #1
 8011764:	e7f0      	b.n	8011748 <_svfiprintf_r+0x194>
 8011766:	ab03      	add	r3, sp, #12
 8011768:	9300      	str	r3, [sp, #0]
 801176a:	462a      	mov	r2, r5
 801176c:	4b0f      	ldr	r3, [pc, #60]	; (80117ac <_svfiprintf_r+0x1f8>)
 801176e:	a904      	add	r1, sp, #16
 8011770:	4638      	mov	r0, r7
 8011772:	f3af 8000 	nop.w
 8011776:	1c42      	adds	r2, r0, #1
 8011778:	4606      	mov	r6, r0
 801177a:	d1d6      	bne.n	801172a <_svfiprintf_r+0x176>
 801177c:	89ab      	ldrh	r3, [r5, #12]
 801177e:	065b      	lsls	r3, r3, #25
 8011780:	f53f af2c 	bmi.w	80115dc <_svfiprintf_r+0x28>
 8011784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011786:	b01d      	add	sp, #116	; 0x74
 8011788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801178c:	ab03      	add	r3, sp, #12
 801178e:	9300      	str	r3, [sp, #0]
 8011790:	462a      	mov	r2, r5
 8011792:	4b06      	ldr	r3, [pc, #24]	; (80117ac <_svfiprintf_r+0x1f8>)
 8011794:	a904      	add	r1, sp, #16
 8011796:	4638      	mov	r0, r7
 8011798:	f000 f87a 	bl	8011890 <_printf_i>
 801179c:	e7eb      	b.n	8011776 <_svfiprintf_r+0x1c2>
 801179e:	bf00      	nop
 80117a0:	08014bd9 	.word	0x08014bd9
 80117a4:	08014be3 	.word	0x08014be3
 80117a8:	00000000 	.word	0x00000000
 80117ac:	080114fd 	.word	0x080114fd
 80117b0:	08014bdf 	.word	0x08014bdf

080117b4 <_printf_common>:
 80117b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117b8:	4616      	mov	r6, r2
 80117ba:	4699      	mov	r9, r3
 80117bc:	688a      	ldr	r2, [r1, #8]
 80117be:	690b      	ldr	r3, [r1, #16]
 80117c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80117c4:	4293      	cmp	r3, r2
 80117c6:	bfb8      	it	lt
 80117c8:	4613      	movlt	r3, r2
 80117ca:	6033      	str	r3, [r6, #0]
 80117cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80117d0:	4607      	mov	r7, r0
 80117d2:	460c      	mov	r4, r1
 80117d4:	b10a      	cbz	r2, 80117da <_printf_common+0x26>
 80117d6:	3301      	adds	r3, #1
 80117d8:	6033      	str	r3, [r6, #0]
 80117da:	6823      	ldr	r3, [r4, #0]
 80117dc:	0699      	lsls	r1, r3, #26
 80117de:	bf42      	ittt	mi
 80117e0:	6833      	ldrmi	r3, [r6, #0]
 80117e2:	3302      	addmi	r3, #2
 80117e4:	6033      	strmi	r3, [r6, #0]
 80117e6:	6825      	ldr	r5, [r4, #0]
 80117e8:	f015 0506 	ands.w	r5, r5, #6
 80117ec:	d106      	bne.n	80117fc <_printf_common+0x48>
 80117ee:	f104 0a19 	add.w	sl, r4, #25
 80117f2:	68e3      	ldr	r3, [r4, #12]
 80117f4:	6832      	ldr	r2, [r6, #0]
 80117f6:	1a9b      	subs	r3, r3, r2
 80117f8:	42ab      	cmp	r3, r5
 80117fa:	dc26      	bgt.n	801184a <_printf_common+0x96>
 80117fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011800:	1e13      	subs	r3, r2, #0
 8011802:	6822      	ldr	r2, [r4, #0]
 8011804:	bf18      	it	ne
 8011806:	2301      	movne	r3, #1
 8011808:	0692      	lsls	r2, r2, #26
 801180a:	d42b      	bmi.n	8011864 <_printf_common+0xb0>
 801180c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011810:	4649      	mov	r1, r9
 8011812:	4638      	mov	r0, r7
 8011814:	47c0      	blx	r8
 8011816:	3001      	adds	r0, #1
 8011818:	d01e      	beq.n	8011858 <_printf_common+0xa4>
 801181a:	6823      	ldr	r3, [r4, #0]
 801181c:	68e5      	ldr	r5, [r4, #12]
 801181e:	6832      	ldr	r2, [r6, #0]
 8011820:	f003 0306 	and.w	r3, r3, #6
 8011824:	2b04      	cmp	r3, #4
 8011826:	bf08      	it	eq
 8011828:	1aad      	subeq	r5, r5, r2
 801182a:	68a3      	ldr	r3, [r4, #8]
 801182c:	6922      	ldr	r2, [r4, #16]
 801182e:	bf0c      	ite	eq
 8011830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011834:	2500      	movne	r5, #0
 8011836:	4293      	cmp	r3, r2
 8011838:	bfc4      	itt	gt
 801183a:	1a9b      	subgt	r3, r3, r2
 801183c:	18ed      	addgt	r5, r5, r3
 801183e:	2600      	movs	r6, #0
 8011840:	341a      	adds	r4, #26
 8011842:	42b5      	cmp	r5, r6
 8011844:	d11a      	bne.n	801187c <_printf_common+0xc8>
 8011846:	2000      	movs	r0, #0
 8011848:	e008      	b.n	801185c <_printf_common+0xa8>
 801184a:	2301      	movs	r3, #1
 801184c:	4652      	mov	r2, sl
 801184e:	4649      	mov	r1, r9
 8011850:	4638      	mov	r0, r7
 8011852:	47c0      	blx	r8
 8011854:	3001      	adds	r0, #1
 8011856:	d103      	bne.n	8011860 <_printf_common+0xac>
 8011858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801185c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011860:	3501      	adds	r5, #1
 8011862:	e7c6      	b.n	80117f2 <_printf_common+0x3e>
 8011864:	18e1      	adds	r1, r4, r3
 8011866:	1c5a      	adds	r2, r3, #1
 8011868:	2030      	movs	r0, #48	; 0x30
 801186a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801186e:	4422      	add	r2, r4
 8011870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011878:	3302      	adds	r3, #2
 801187a:	e7c7      	b.n	801180c <_printf_common+0x58>
 801187c:	2301      	movs	r3, #1
 801187e:	4622      	mov	r2, r4
 8011880:	4649      	mov	r1, r9
 8011882:	4638      	mov	r0, r7
 8011884:	47c0      	blx	r8
 8011886:	3001      	adds	r0, #1
 8011888:	d0e6      	beq.n	8011858 <_printf_common+0xa4>
 801188a:	3601      	adds	r6, #1
 801188c:	e7d9      	b.n	8011842 <_printf_common+0x8e>
	...

08011890 <_printf_i>:
 8011890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011894:	7e0f      	ldrb	r7, [r1, #24]
 8011896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011898:	2f78      	cmp	r7, #120	; 0x78
 801189a:	4691      	mov	r9, r2
 801189c:	4680      	mov	r8, r0
 801189e:	460c      	mov	r4, r1
 80118a0:	469a      	mov	sl, r3
 80118a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80118a6:	d807      	bhi.n	80118b8 <_printf_i+0x28>
 80118a8:	2f62      	cmp	r7, #98	; 0x62
 80118aa:	d80a      	bhi.n	80118c2 <_printf_i+0x32>
 80118ac:	2f00      	cmp	r7, #0
 80118ae:	f000 80d8 	beq.w	8011a62 <_printf_i+0x1d2>
 80118b2:	2f58      	cmp	r7, #88	; 0x58
 80118b4:	f000 80a3 	beq.w	80119fe <_printf_i+0x16e>
 80118b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80118bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80118c0:	e03a      	b.n	8011938 <_printf_i+0xa8>
 80118c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80118c6:	2b15      	cmp	r3, #21
 80118c8:	d8f6      	bhi.n	80118b8 <_printf_i+0x28>
 80118ca:	a101      	add	r1, pc, #4	; (adr r1, 80118d0 <_printf_i+0x40>)
 80118cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80118d0:	08011929 	.word	0x08011929
 80118d4:	0801193d 	.word	0x0801193d
 80118d8:	080118b9 	.word	0x080118b9
 80118dc:	080118b9 	.word	0x080118b9
 80118e0:	080118b9 	.word	0x080118b9
 80118e4:	080118b9 	.word	0x080118b9
 80118e8:	0801193d 	.word	0x0801193d
 80118ec:	080118b9 	.word	0x080118b9
 80118f0:	080118b9 	.word	0x080118b9
 80118f4:	080118b9 	.word	0x080118b9
 80118f8:	080118b9 	.word	0x080118b9
 80118fc:	08011a49 	.word	0x08011a49
 8011900:	0801196d 	.word	0x0801196d
 8011904:	08011a2b 	.word	0x08011a2b
 8011908:	080118b9 	.word	0x080118b9
 801190c:	080118b9 	.word	0x080118b9
 8011910:	08011a6b 	.word	0x08011a6b
 8011914:	080118b9 	.word	0x080118b9
 8011918:	0801196d 	.word	0x0801196d
 801191c:	080118b9 	.word	0x080118b9
 8011920:	080118b9 	.word	0x080118b9
 8011924:	08011a33 	.word	0x08011a33
 8011928:	682b      	ldr	r3, [r5, #0]
 801192a:	1d1a      	adds	r2, r3, #4
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	602a      	str	r2, [r5, #0]
 8011930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011938:	2301      	movs	r3, #1
 801193a:	e0a3      	b.n	8011a84 <_printf_i+0x1f4>
 801193c:	6820      	ldr	r0, [r4, #0]
 801193e:	6829      	ldr	r1, [r5, #0]
 8011940:	0606      	lsls	r6, r0, #24
 8011942:	f101 0304 	add.w	r3, r1, #4
 8011946:	d50a      	bpl.n	801195e <_printf_i+0xce>
 8011948:	680e      	ldr	r6, [r1, #0]
 801194a:	602b      	str	r3, [r5, #0]
 801194c:	2e00      	cmp	r6, #0
 801194e:	da03      	bge.n	8011958 <_printf_i+0xc8>
 8011950:	232d      	movs	r3, #45	; 0x2d
 8011952:	4276      	negs	r6, r6
 8011954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011958:	485e      	ldr	r0, [pc, #376]	; (8011ad4 <_printf_i+0x244>)
 801195a:	230a      	movs	r3, #10
 801195c:	e019      	b.n	8011992 <_printf_i+0x102>
 801195e:	680e      	ldr	r6, [r1, #0]
 8011960:	602b      	str	r3, [r5, #0]
 8011962:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011966:	bf18      	it	ne
 8011968:	b236      	sxthne	r6, r6
 801196a:	e7ef      	b.n	801194c <_printf_i+0xbc>
 801196c:	682b      	ldr	r3, [r5, #0]
 801196e:	6820      	ldr	r0, [r4, #0]
 8011970:	1d19      	adds	r1, r3, #4
 8011972:	6029      	str	r1, [r5, #0]
 8011974:	0601      	lsls	r1, r0, #24
 8011976:	d501      	bpl.n	801197c <_printf_i+0xec>
 8011978:	681e      	ldr	r6, [r3, #0]
 801197a:	e002      	b.n	8011982 <_printf_i+0xf2>
 801197c:	0646      	lsls	r6, r0, #25
 801197e:	d5fb      	bpl.n	8011978 <_printf_i+0xe8>
 8011980:	881e      	ldrh	r6, [r3, #0]
 8011982:	4854      	ldr	r0, [pc, #336]	; (8011ad4 <_printf_i+0x244>)
 8011984:	2f6f      	cmp	r7, #111	; 0x6f
 8011986:	bf0c      	ite	eq
 8011988:	2308      	moveq	r3, #8
 801198a:	230a      	movne	r3, #10
 801198c:	2100      	movs	r1, #0
 801198e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011992:	6865      	ldr	r5, [r4, #4]
 8011994:	60a5      	str	r5, [r4, #8]
 8011996:	2d00      	cmp	r5, #0
 8011998:	bfa2      	ittt	ge
 801199a:	6821      	ldrge	r1, [r4, #0]
 801199c:	f021 0104 	bicge.w	r1, r1, #4
 80119a0:	6021      	strge	r1, [r4, #0]
 80119a2:	b90e      	cbnz	r6, 80119a8 <_printf_i+0x118>
 80119a4:	2d00      	cmp	r5, #0
 80119a6:	d04d      	beq.n	8011a44 <_printf_i+0x1b4>
 80119a8:	4615      	mov	r5, r2
 80119aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80119ae:	fb03 6711 	mls	r7, r3, r1, r6
 80119b2:	5dc7      	ldrb	r7, [r0, r7]
 80119b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80119b8:	4637      	mov	r7, r6
 80119ba:	42bb      	cmp	r3, r7
 80119bc:	460e      	mov	r6, r1
 80119be:	d9f4      	bls.n	80119aa <_printf_i+0x11a>
 80119c0:	2b08      	cmp	r3, #8
 80119c2:	d10b      	bne.n	80119dc <_printf_i+0x14c>
 80119c4:	6823      	ldr	r3, [r4, #0]
 80119c6:	07de      	lsls	r6, r3, #31
 80119c8:	d508      	bpl.n	80119dc <_printf_i+0x14c>
 80119ca:	6923      	ldr	r3, [r4, #16]
 80119cc:	6861      	ldr	r1, [r4, #4]
 80119ce:	4299      	cmp	r1, r3
 80119d0:	bfde      	ittt	le
 80119d2:	2330      	movle	r3, #48	; 0x30
 80119d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80119d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80119dc:	1b52      	subs	r2, r2, r5
 80119de:	6122      	str	r2, [r4, #16]
 80119e0:	f8cd a000 	str.w	sl, [sp]
 80119e4:	464b      	mov	r3, r9
 80119e6:	aa03      	add	r2, sp, #12
 80119e8:	4621      	mov	r1, r4
 80119ea:	4640      	mov	r0, r8
 80119ec:	f7ff fee2 	bl	80117b4 <_printf_common>
 80119f0:	3001      	adds	r0, #1
 80119f2:	d14c      	bne.n	8011a8e <_printf_i+0x1fe>
 80119f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119f8:	b004      	add	sp, #16
 80119fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119fe:	4835      	ldr	r0, [pc, #212]	; (8011ad4 <_printf_i+0x244>)
 8011a00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011a04:	6829      	ldr	r1, [r5, #0]
 8011a06:	6823      	ldr	r3, [r4, #0]
 8011a08:	f851 6b04 	ldr.w	r6, [r1], #4
 8011a0c:	6029      	str	r1, [r5, #0]
 8011a0e:	061d      	lsls	r5, r3, #24
 8011a10:	d514      	bpl.n	8011a3c <_printf_i+0x1ac>
 8011a12:	07df      	lsls	r7, r3, #31
 8011a14:	bf44      	itt	mi
 8011a16:	f043 0320 	orrmi.w	r3, r3, #32
 8011a1a:	6023      	strmi	r3, [r4, #0]
 8011a1c:	b91e      	cbnz	r6, 8011a26 <_printf_i+0x196>
 8011a1e:	6823      	ldr	r3, [r4, #0]
 8011a20:	f023 0320 	bic.w	r3, r3, #32
 8011a24:	6023      	str	r3, [r4, #0]
 8011a26:	2310      	movs	r3, #16
 8011a28:	e7b0      	b.n	801198c <_printf_i+0xfc>
 8011a2a:	6823      	ldr	r3, [r4, #0]
 8011a2c:	f043 0320 	orr.w	r3, r3, #32
 8011a30:	6023      	str	r3, [r4, #0]
 8011a32:	2378      	movs	r3, #120	; 0x78
 8011a34:	4828      	ldr	r0, [pc, #160]	; (8011ad8 <_printf_i+0x248>)
 8011a36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011a3a:	e7e3      	b.n	8011a04 <_printf_i+0x174>
 8011a3c:	0659      	lsls	r1, r3, #25
 8011a3e:	bf48      	it	mi
 8011a40:	b2b6      	uxthmi	r6, r6
 8011a42:	e7e6      	b.n	8011a12 <_printf_i+0x182>
 8011a44:	4615      	mov	r5, r2
 8011a46:	e7bb      	b.n	80119c0 <_printf_i+0x130>
 8011a48:	682b      	ldr	r3, [r5, #0]
 8011a4a:	6826      	ldr	r6, [r4, #0]
 8011a4c:	6961      	ldr	r1, [r4, #20]
 8011a4e:	1d18      	adds	r0, r3, #4
 8011a50:	6028      	str	r0, [r5, #0]
 8011a52:	0635      	lsls	r5, r6, #24
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	d501      	bpl.n	8011a5c <_printf_i+0x1cc>
 8011a58:	6019      	str	r1, [r3, #0]
 8011a5a:	e002      	b.n	8011a62 <_printf_i+0x1d2>
 8011a5c:	0670      	lsls	r0, r6, #25
 8011a5e:	d5fb      	bpl.n	8011a58 <_printf_i+0x1c8>
 8011a60:	8019      	strh	r1, [r3, #0]
 8011a62:	2300      	movs	r3, #0
 8011a64:	6123      	str	r3, [r4, #16]
 8011a66:	4615      	mov	r5, r2
 8011a68:	e7ba      	b.n	80119e0 <_printf_i+0x150>
 8011a6a:	682b      	ldr	r3, [r5, #0]
 8011a6c:	1d1a      	adds	r2, r3, #4
 8011a6e:	602a      	str	r2, [r5, #0]
 8011a70:	681d      	ldr	r5, [r3, #0]
 8011a72:	6862      	ldr	r2, [r4, #4]
 8011a74:	2100      	movs	r1, #0
 8011a76:	4628      	mov	r0, r5
 8011a78:	f7ee fbb2 	bl	80001e0 <memchr>
 8011a7c:	b108      	cbz	r0, 8011a82 <_printf_i+0x1f2>
 8011a7e:	1b40      	subs	r0, r0, r5
 8011a80:	6060      	str	r0, [r4, #4]
 8011a82:	6863      	ldr	r3, [r4, #4]
 8011a84:	6123      	str	r3, [r4, #16]
 8011a86:	2300      	movs	r3, #0
 8011a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a8c:	e7a8      	b.n	80119e0 <_printf_i+0x150>
 8011a8e:	6923      	ldr	r3, [r4, #16]
 8011a90:	462a      	mov	r2, r5
 8011a92:	4649      	mov	r1, r9
 8011a94:	4640      	mov	r0, r8
 8011a96:	47d0      	blx	sl
 8011a98:	3001      	adds	r0, #1
 8011a9a:	d0ab      	beq.n	80119f4 <_printf_i+0x164>
 8011a9c:	6823      	ldr	r3, [r4, #0]
 8011a9e:	079b      	lsls	r3, r3, #30
 8011aa0:	d413      	bmi.n	8011aca <_printf_i+0x23a>
 8011aa2:	68e0      	ldr	r0, [r4, #12]
 8011aa4:	9b03      	ldr	r3, [sp, #12]
 8011aa6:	4298      	cmp	r0, r3
 8011aa8:	bfb8      	it	lt
 8011aaa:	4618      	movlt	r0, r3
 8011aac:	e7a4      	b.n	80119f8 <_printf_i+0x168>
 8011aae:	2301      	movs	r3, #1
 8011ab0:	4632      	mov	r2, r6
 8011ab2:	4649      	mov	r1, r9
 8011ab4:	4640      	mov	r0, r8
 8011ab6:	47d0      	blx	sl
 8011ab8:	3001      	adds	r0, #1
 8011aba:	d09b      	beq.n	80119f4 <_printf_i+0x164>
 8011abc:	3501      	adds	r5, #1
 8011abe:	68e3      	ldr	r3, [r4, #12]
 8011ac0:	9903      	ldr	r1, [sp, #12]
 8011ac2:	1a5b      	subs	r3, r3, r1
 8011ac4:	42ab      	cmp	r3, r5
 8011ac6:	dcf2      	bgt.n	8011aae <_printf_i+0x21e>
 8011ac8:	e7eb      	b.n	8011aa2 <_printf_i+0x212>
 8011aca:	2500      	movs	r5, #0
 8011acc:	f104 0619 	add.w	r6, r4, #25
 8011ad0:	e7f5      	b.n	8011abe <_printf_i+0x22e>
 8011ad2:	bf00      	nop
 8011ad4:	08014bea 	.word	0x08014bea
 8011ad8:	08014bfb 	.word	0x08014bfb

08011adc <memmove>:
 8011adc:	4288      	cmp	r0, r1
 8011ade:	b510      	push	{r4, lr}
 8011ae0:	eb01 0402 	add.w	r4, r1, r2
 8011ae4:	d902      	bls.n	8011aec <memmove+0x10>
 8011ae6:	4284      	cmp	r4, r0
 8011ae8:	4623      	mov	r3, r4
 8011aea:	d807      	bhi.n	8011afc <memmove+0x20>
 8011aec:	1e43      	subs	r3, r0, #1
 8011aee:	42a1      	cmp	r1, r4
 8011af0:	d008      	beq.n	8011b04 <memmove+0x28>
 8011af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011afa:	e7f8      	b.n	8011aee <memmove+0x12>
 8011afc:	4402      	add	r2, r0
 8011afe:	4601      	mov	r1, r0
 8011b00:	428a      	cmp	r2, r1
 8011b02:	d100      	bne.n	8011b06 <memmove+0x2a>
 8011b04:	bd10      	pop	{r4, pc}
 8011b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011b0e:	e7f7      	b.n	8011b00 <memmove+0x24>

08011b10 <_realloc_r>:
 8011b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b14:	4680      	mov	r8, r0
 8011b16:	4614      	mov	r4, r2
 8011b18:	460e      	mov	r6, r1
 8011b1a:	b921      	cbnz	r1, 8011b26 <_realloc_r+0x16>
 8011b1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b20:	4611      	mov	r1, r2
 8011b22:	f7ff ba71 	b.w	8011008 <_malloc_r>
 8011b26:	b92a      	cbnz	r2, 8011b34 <_realloc_r+0x24>
 8011b28:	f7ff fc9c 	bl	8011464 <_free_r>
 8011b2c:	4625      	mov	r5, r4
 8011b2e:	4628      	mov	r0, r5
 8011b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b34:	f000 f81b 	bl	8011b6e <_malloc_usable_size_r>
 8011b38:	4284      	cmp	r4, r0
 8011b3a:	4607      	mov	r7, r0
 8011b3c:	d802      	bhi.n	8011b44 <_realloc_r+0x34>
 8011b3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011b42:	d812      	bhi.n	8011b6a <_realloc_r+0x5a>
 8011b44:	4621      	mov	r1, r4
 8011b46:	4640      	mov	r0, r8
 8011b48:	f7ff fa5e 	bl	8011008 <_malloc_r>
 8011b4c:	4605      	mov	r5, r0
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d0ed      	beq.n	8011b2e <_realloc_r+0x1e>
 8011b52:	42bc      	cmp	r4, r7
 8011b54:	4622      	mov	r2, r4
 8011b56:	4631      	mov	r1, r6
 8011b58:	bf28      	it	cs
 8011b5a:	463a      	movcs	r2, r7
 8011b5c:	f7ff fa1e 	bl	8010f9c <memcpy>
 8011b60:	4631      	mov	r1, r6
 8011b62:	4640      	mov	r0, r8
 8011b64:	f7ff fc7e 	bl	8011464 <_free_r>
 8011b68:	e7e1      	b.n	8011b2e <_realloc_r+0x1e>
 8011b6a:	4635      	mov	r5, r6
 8011b6c:	e7df      	b.n	8011b2e <_realloc_r+0x1e>

08011b6e <_malloc_usable_size_r>:
 8011b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b72:	1f18      	subs	r0, r3, #4
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	bfbc      	itt	lt
 8011b78:	580b      	ldrlt	r3, [r1, r0]
 8011b7a:	18c0      	addlt	r0, r0, r3
 8011b7c:	4770      	bx	lr
	...

08011b80 <_init>:
 8011b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b82:	bf00      	nop
 8011b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b86:	bc08      	pop	{r3}
 8011b88:	469e      	mov	lr, r3
 8011b8a:	4770      	bx	lr

08011b8c <_fini>:
 8011b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b8e:	bf00      	nop
 8011b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b92:	bc08      	pop	{r3}
 8011b94:	469e      	mov	lr, r3
 8011b96:	4770      	bx	lr
