
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027a8  0800c774  0800c774  0001c774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef1c  0800ef1c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef1c  0800ef1c  0001ef1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef24  0800ef24  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef24  0800ef24  0001ef24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef28  0800ef28  0001ef28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800ef2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          000060fc  20000100  20000100  00020100  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  200061fc  200061fc  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022acd  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004226  00000000  00000000  00042bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  00046e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d7c  00000000  00000000  00048938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f18a  00000000  00000000  0004e6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3151  00000000  00000000  0006d83e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015098f  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001990  00000000  00000000  001509e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007bd4  00000000  00000000  00152370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c75c 	.word	0x0800c75c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800c75c 	.word	0x0800c75c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f002 fe23 	bl	80038ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f887 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa2b 	bl	80010c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9f3 	bl	8001058 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f97b 	bl	8000f6c <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8e9 	bl	8000e4c <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 fac9 	bl	8001210 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9c1 	bl	8001004 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f93d 	bl	8000f00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(200);
 8000c8c:	20c8      	movs	r0, #200	; 0xc8
 8000c8e:	f002 fe4f 	bl	8003930 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	482a      	ldr	r0, [pc, #168]	; (8000d40 <main+0xe4>)
 8000c98:	f003 fcee 	bl	8004678 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4828      	ldr	r0, [pc, #160]	; (8000d44 <main+0xe8>)
 8000ca4:	f003 fce8 	bl	8004678 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000ca8:	20c8      	movs	r0, #200	; 0xc8
 8000caa:	f002 fe41 	bl	8003930 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4823      	ldr	r0, [pc, #140]	; (8000d40 <main+0xe4>)
 8000cb4:	f003 fce0 	bl	8004678 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	4821      	ldr	r0, [pc, #132]	; (8000d44 <main+0xe8>)
 8000cc0:	f003 fcda 	bl	8004678 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <main+0xec>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f005 ff75 	bl	8006bc4 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <main+0xf0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	491b      	ldr	r1, [pc, #108]	; (8000d50 <main+0xf4>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 fbed 	bl	80074c2 <HAL_UART_Receive_IT>

  set_Date(epoch);
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <main+0xf8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fd55 	bl	800179c <set_Date>

  ST7789_Reset();
 8000cf2:	f002 f867 	bl	8002dc4 <ST7789_Reset>
  ST7789_Init(back_color);
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <main+0xfc>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 f87c 	bl	8002df8 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d00:	f007 fd44 	bl	800878c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000d04:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <main+0x100>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f007 fe38 	bl	800897e <osSemaphoreNew>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <main+0x104>)
 8000d12:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(s_qcmd), &myQue_attributes);
 8000d14:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <main+0x108>)
 8000d16:	2102      	movs	r1, #2
 8000d18:	2010      	movs	r0, #16
 8000d1a:	f007 feb9 	bl	8008a90 <osMessageQueueNew>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <main+0x10c>)
 8000d22:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d24:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <main+0x110>)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <main+0x114>)
 8000d2a:	f007 fd7b 	bl	8008824 <osThreadNew>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <main+0x118>)
 8000d32:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d34:	f007 fd50 	bl	80087d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f002 fdf9 	bl	8003930 <HAL_Delay>
 8000d3e:	e7fb      	b.n	8000d38 <main+0xdc>
 8000d40:	40020800 	.word	0x40020800
 8000d44:	40020c00 	.word	0x40020c00
 8000d48:	2000004c 	.word	0x2000004c
 8000d4c:	20000050 	.word	0x20000050
 8000d50:	20000b40 	.word	0x20000b40
 8000d54:	20000044 	.word	0x20000044
 8000d58:	20000b46 	.word	0x20000b46
 8000d5c:	0800ed4c 	.word	0x0800ed4c
 8000d60:	20000328 	.word	0x20000328
 8000d64:	0800ed34 	.word	0x0800ed34
 8000d68:	20000324 	.word	0x20000324
 8000d6c:	0800ed10 	.word	0x0800ed10
 8000d70:	08002011 	.word	0x08002011
 8000d74:	20000320 	.word	0x20000320

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	; 0x50
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	2230      	movs	r2, #48	; 0x30
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00a feee 	bl	800bb68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <SystemClock_Config+0xcc>)
 8000da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <SystemClock_Config+0xcc>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <SystemClock_Config+0xd0>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <SystemClock_Config+0xd0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000de8:	2308      	movs	r3, #8
 8000dea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000df0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000df6:	2307      	movs	r3, #7
 8000df8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 f8c2 	bl	8004f88 <HAL_RCC_OscConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e0a:	f001 fe43 	bl	8002a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 fb23 	bl	8005478 <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e38:	f001 fe2c 	bl	8002a94 <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3750      	adds	r7, #80	; 0x50
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e60:	2300      	movs	r3, #0
 8000e62:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e66:	4a25      	ldr	r2, [pc, #148]	; (8000efc <MX_RTC_Init+0xb0>)
 8000e68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e70:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e72:	227f      	movs	r2, #127	; 0x7f
 8000e74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e78:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e7c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e90:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e92:	f004 fe25 	bl	8005ae0 <HAL_RTC_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e9c:	f001 fdfa 	bl	8002a94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480f      	ldr	r0, [pc, #60]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000ebc:	f004 fea1 	bl	8005c02 <HAL_RTC_SetTime>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000ec6:	f001 fde5 	bl	8002a94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000ee2:	f004 ffa9 	bl	8005e38 <HAL_RTC_SetDate>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000eec:	f001 fdd2 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000011c 	.word	0x2000011c
 8000efc:	40002800 	.word	0x40002800

08000f00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <MX_SPI1_Init+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f52:	f005 f8f7 	bl	8006144 <HAL_SPI_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f5c:	f001 fd9a 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000013c 	.word	0x2000013c
 8000f68:	40013000 	.word	0x40013000

08000f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f92:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fa0:	22f9      	movs	r2, #249	; 0xf9
 8000fa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fb2:	f005 fdb7 	bl	8006b24 <HAL_TIM_Base_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fbc:	f001 fd6a 	bl	8002a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fce:	f005 ff71 	bl	8006eb4 <HAL_TIM_ConfigClockSource>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fd8:	f001 fd5c 	bl	8002a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fdc:	2320      	movs	r3, #32
 8000fde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fea:	f006 f98d 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff4:	f001 fd4e 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200001f4 	.word	0x200001f4

08001004 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <MX_USART3_UART_Init+0x50>)
 800100c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001010:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001014:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800103c:	f006 f9f4 	bl	8007428 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001046:	f001 fd25 	bl	8002a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000023c 	.word	0x2000023c
 8001054:	40004800 	.word	0x40004800

08001058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_DMA_Init+0x68>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <MX_DMA_Init+0x68>)
 8001068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_DMA_Init+0x68>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_DMA_Init+0x68>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <MX_DMA_Init+0x68>)
 8001084:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <MX_DMA_Init+0x68>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2105      	movs	r1, #5
 800109a:	200e      	movs	r0, #14
 800109c:	f002 fd24 	bl	8003ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010a0:	200e      	movs	r0, #14
 80010a2:	f002 fd3d 	bl	8003b20 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2103      	movs	r1, #3
 80010aa:	203b      	movs	r0, #59	; 0x3b
 80010ac:	f002 fd1c 	bl	8003ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010b0:	203b      	movs	r0, #59	; 0x3b
 80010b2:	f002 fd35 	bl	8003b20 <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	; 0x30
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	4b48      	ldr	r3, [pc, #288]	; (8001200 <MX_GPIO_Init+0x13c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a47      	ldr	r2, [pc, #284]	; (8001200 <MX_GPIO_Init+0x13c>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b45      	ldr	r3, [pc, #276]	; (8001200 <MX_GPIO_Init+0x13c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	4b41      	ldr	r3, [pc, #260]	; (8001200 <MX_GPIO_Init+0x13c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a40      	ldr	r2, [pc, #256]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a39      	ldr	r2, [pc, #228]	; (8001200 <MX_GPIO_Init+0x13c>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b37      	ldr	r3, [pc, #220]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a32      	ldr	r2, [pc, #200]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b30      	ldr	r3, [pc, #192]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a2b      	ldr	r2, [pc, #172]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <MX_GPIO_Init+0x13c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <MX_GPIO_Init+0x13c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	210e      	movs	r1, #14
 8001186:	481f      	ldr	r0, [pc, #124]	; (8001204 <MX_GPIO_Init+0x140>)
 8001188:	f003 fa76 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001192:	481d      	ldr	r0, [pc, #116]	; (8001208 <MX_GPIO_Init+0x144>)
 8001194:	f003 fa70 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	481b      	ldr	r0, [pc, #108]	; (800120c <MX_GPIO_Init+0x148>)
 800119e:	f003 fa6b 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 80011a2:	230e      	movs	r3, #14
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011ae:	2301      	movs	r3, #1
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4812      	ldr	r0, [pc, #72]	; (8001204 <MX_GPIO_Init+0x140>)
 80011ba:	f003 f8c1 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4619      	mov	r1, r3
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_GPIO_Init+0x144>)
 80011d8:	f003 f8b2 	bl	8004340 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e4:	2302      	movs	r3, #2
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <MX_GPIO_Init+0x148>)
 80011f4:	f003 f8a4 	bl	8004340 <HAL_GPIO_Init>

}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	; 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40020800 	.word	0x40020800

08001210 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 8001216:	4b58      	ldr	r3, [pc, #352]	; (8001378 <MX_FSMC_Init+0x168>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8001236:	4b51      	ldr	r3, [pc, #324]	; (800137c <MX_FSMC_Init+0x16c>)
 8001238:	4a51      	ldr	r2, [pc, #324]	; (8001380 <MX_FSMC_Init+0x170>)
 800123a:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 800123c:	4b4f      	ldr	r3, [pc, #316]	; (800137c <MX_FSMC_Init+0x16c>)
 800123e:	2210      	movs	r2, #16
 8001240:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001242:	4b4e      	ldr	r3, [pc, #312]	; (800137c <MX_FSMC_Init+0x16c>)
 8001244:	2202      	movs	r2, #2
 8001246:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8001248:	4b4c      	ldr	r3, [pc, #304]	; (800137c <MX_FSMC_Init+0x16c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 800124e:	4b4b      	ldr	r3, [pc, #300]	; (800137c <MX_FSMC_Init+0x16c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001254:	4b49      	ldr	r3, [pc, #292]	; (800137c <MX_FSMC_Init+0x16c>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800125a:	4b48      	ldr	r3, [pc, #288]	; (800137c <MX_FSMC_Init+0x16c>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001260:	4b46      	ldr	r3, [pc, #280]	; (800137c <MX_FSMC_Init+0x16c>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 8001266:	4b45      	ldr	r3, [pc, #276]	; (800137c <MX_FSMC_Init+0x16c>)
 8001268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 800126e:	4b43      	ldr	r3, [pc, #268]	; (800137c <MX_FSMC_Init+0x16c>)
 8001270:	2210      	movs	r2, #16
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 131072;
 8001274:	4b41      	ldr	r3, [pc, #260]	; (800137c <MX_FSMC_Init+0x16c>)
 8001276:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 800127c:	4b3f      	ldr	r3, [pc, #252]	; (800137c <MX_FSMC_Init+0x16c>)
 800127e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001284:	4b3d      	ldr	r3, [pc, #244]	; (800137c <MX_FSMC_Init+0x16c>)
 8001286:	2201      	movs	r2, #1
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 800128a:	4b3c      	ldr	r3, [pc, #240]	; (800137c <MX_FSMC_Init+0x16c>)
 800128c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001290:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 8001292:	4b3a      	ldr	r3, [pc, #232]	; (800137c <MX_FSMC_Init+0x16c>)
 8001294:	2201      	movs	r2, #1
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800129a:	23fc      	movs	r3, #252	; 0xfc
 800129c:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 800129e:	23fc      	movs	r3, #252	; 0xfc
 80012a0:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 80012a2:	23fc      	movs	r3, #252	; 0xfc
 80012a4:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 80012a6:	23fc      	movs	r3, #252	; 0xfc
 80012a8:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 80012aa:	23fc      	movs	r3, #252	; 0xfc
 80012ac:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 80012ae:	23fc      	movs	r3, #252	; 0xfc
 80012b0:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 80012b2:	23fc      	movs	r3, #252	; 0xfc
 80012b4:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 80012b6:	23fc      	movs	r3, #252	; 0xfc
 80012b8:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012ba:	463a      	mov	r2, r7
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	482e      	ldr	r0, [pc, #184]	; (800137c <MX_FSMC_Init+0x16c>)
 80012c4:	f003 fa0b 	bl	80046de <HAL_NAND_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 80012ce:	f001 fbe1 	bl	8002a94 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  if (my_NAND_Read_ID(&hnand1, &nandID) == HAL_OK) {
 80012d2:	492c      	ldr	r1, [pc, #176]	; (8001384 <MX_FSMC_Init+0x174>)
 80012d4:	4829      	ldr	r0, [pc, #164]	; (800137c <MX_FSMC_Init+0x16c>)
 80012d6:	f000 f861 	bl	800139c <my_NAND_Read_ID>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d147      	bne.n	8001370 <MX_FSMC_Init+0x160>

	  nandState = HAL_NAND_GetState(&hnand1);
 80012e0:	4826      	ldr	r0, [pc, #152]	; (800137c <MX_FSMC_Init+0x16c>)
 80012e2:	f003 fe42 	bl	8004f6a <HAL_NAND_GetState>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <MX_FSMC_Init+0x178>)
 80012ec:	701a      	strb	r2, [r3, #0]

	  memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 80012ee:	4a27      	ldr	r2, [pc, #156]	; (800138c <MX_FSMC_Init+0x17c>)
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <MX_FSMC_Init+0x16c>)
 80012f2:	4615      	mov	r5, r2
 80012f4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80012f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001300:	e885 0003 	stmia.w	r5, {r0, r1}

	  if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <MX_FSMC_Init+0x17c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d028      	beq.n	800135e <MX_FSMC_Init+0x14e>
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <MX_FSMC_Init+0x17c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001314:	d823      	bhi.n	800135e <MX_FSMC_Init+0x14e>
		  rdBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_FSMC_Init+0x17c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4619      	mov	r1, r3
 800131c:	2001      	movs	r0, #1
 800131e:	f00a fb2d 	bl	800b97c <calloc>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_FSMC_Init+0x180>)
 8001328:	601a      	str	r2, [r3, #0]
		  wrBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_FSMC_Init+0x17c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	2001      	movs	r0, #1
 8001332:	f00a fb23 	bl	800b97c <calloc>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_FSMC_Init+0x184>)
 800133c:	601a      	str	r2, [r3, #0]

		  if (!rdBuf || !wrBuf) devError |= devMEM;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_FSMC_Init+0x180>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <MX_FSMC_Init+0x13e>
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <MX_FSMC_Init+0x184>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <MX_FSMC_Init+0x15e>
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_FSMC_Init+0x188>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_FSMC_Init+0x188>)
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e007      	b.n	800136e <MX_FSMC_Init+0x15e>
	  } else {
		  devError |= devNAND;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_FSMC_Init+0x188>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f043 0320 	orr.w	r3, r3, #32
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_FSMC_Init+0x188>)
 800136a:	701a      	strb	r2, [r3, #0]

  }


  /* USER CODE END FSMC_Init 2 */
}
 800136c:	e000      	b.n	8001370 <MX_FSMC_Init+0x160>
		  if (!rdBuf || !wrBuf) devError |= devMEM;
 800136e:	bf00      	nop
}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	20000b58 	.word	0x20000b58
 800137c:	200002e0 	.word	0x200002e0
 8001380:	a0000060 	.word	0xa0000060
 8001384:	20000b5c 	.word	0x20000b5c
 8001388:	20000061 	.word	0x20000061
 800138c:	20000b64 	.word	0x20000b64
 8001390:	20000b7c 	.word	0x20000b7c
 8001394:	20000b80 	.word	0x20000b80
 8001398:	2000032c 	.word	0x2000032c

0800139c <my_NAND_Read_ID>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef my_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
__IO uint32_t data = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
__IO uint32_t data1 = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
uint32_t deviceaddress = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]

	__HAL_LOCK(hnand);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <my_NAND_Read_ID+0x24>
 80013bc:	2302      	movs	r3, #2
 80013be:	e052      	b.n	8001466 <my_NAND_Read_ID+0xca>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]

	if(hnand->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d101      	bne.n	80013d8 <my_NAND_Read_ID+0x3c>
 80013d4:	2302      	movs	r3, #2
 80013d6:	e046      	b.n	8001466 <my_NAND_Read_ID+0xca>

	if(hnand->Init.NandBank == FMC_NAND_BANK2) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b10      	cmp	r3, #16
 80013de:	d103      	bne.n	80013e8 <my_NAND_Read_ID+0x4c>
		deviceaddress = NAND_DEVICE1;
 80013e0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e002      	b.n	80013ee <my_NAND_Read_ID+0x52>
	} else {
		deviceaddress = NAND_DEVICE2;
 80013e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013ec:	617b      	str	r3, [r7, #20]
	}
	devAdr = deviceaddress;
 80013ee:	4a21      	ldr	r2, [pc, #132]	; (8001474 <my_NAND_Read_ID+0xd8>)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	6013      	str	r3, [r2, #0]

	hnand->State = HAL_NAND_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Send Read ID command sequence */
	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001402:	2290      	movs	r2, #144	; 0x90
 8001404:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]

	/* Read the electronic signature from NAND flash */
	if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d121      	bne.n	800145c <my_NAND_Read_ID+0xc0>
		data = *(__IO uint32_t *)deviceaddress;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	613b      	str	r3, [r7, #16]
		data1 = *((__IO uint32_t *)deviceaddress + 4U);
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3310      	adds	r3, #16
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]

		/* Return the data read */
		pNAND_ID->Maker_Id  = ADDR_1ST_CYCLE(data);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	701a      	strb	r2, [r3, #0]
		pNAND_ID->Device_Id = ADDR_2ND_CYCLE(data);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	b2da      	uxtb	r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	705a      	strb	r2, [r3, #1]
		pNAND_ID->Third_Id  = ADDR_3RD_CYCLE(data);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	0c1b      	lsrs	r3, r3, #16
 800143c:	b2da      	uxtb	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	709a      	strb	r2, [r3, #2]
		pNAND_ID->Fourth_Id = ADDR_4TH_CYCLE(data);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	0e1b      	lsrs	r3, r3, #24
 8001446:	b2da      	uxtb	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	70da      	strb	r2, [r3, #3]
		pNAND_ID->Plane_Id  = ADDR_1ST_CYCLE(data1);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	711a      	strb	r2, [r3, #4]

		hnand->State = HAL_NAND_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	__HAL_UNLOCK(hnand);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2020 	strb.w	r2, [r3, #32]

	return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000b48 	.word	0x20000b48

08001478 <get_qStat>:
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	dc18      	bgt.n	80014b8 <get_qStat+0x40>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f113 0f06 	cmn.w	r3, #6
 800148c:	db2a      	blt.n	80014e4 <get_qStat+0x6c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3306      	adds	r3, #6
 8001492:	2b06      	cmp	r3, #6
 8001494:	d826      	bhi.n	80014e4 <get_qStat+0x6c>
 8001496:	a201      	add	r2, pc, #4	; (adr r2, 800149c <get_qStat+0x24>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	080014dd 	.word	0x080014dd
 80014a0:	080014d9 	.word	0x080014d9
 80014a4:	080014d5 	.word	0x080014d5
 80014a8:	080014d1 	.word	0x080014d1
 80014ac:	080014cd 	.word	0x080014cd
 80014b0:	080014c9 	.word	0x080014c9
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00e      	beq.n	80014e0 <get_qStat+0x68>
 80014c2:	e00f      	b.n	80014e4 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <get_qStat+0x7c>)
 80014c6:	e00e      	b.n	80014e6 <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <get_qStat+0x80>)
 80014ca:	e00c      	b.n	80014e6 <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <get_qStat+0x84>)
 80014ce:	e00a      	b.n	80014e6 <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <get_qStat+0x88>)
 80014d2:	e008      	b.n	80014e6 <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <get_qStat+0x8c>)
 80014d6:	e006      	b.n	80014e6 <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <get_qStat+0x90>)
 80014da:	e004      	b.n	80014e6 <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <get_qStat+0x94>)
 80014de:	e002      	b.n	80014e6 <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <get_qStat+0x98>)
 80014e2:	e000      	b.n	80014e6 <get_qStat+0x6e>
	}

	return "UnknownError";
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <get_qStat+0x9c>)
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	0800c880 	.word	0x0800c880
 80014f8:	0800c888 	.word	0x0800c888
 80014fc:	0800c890 	.word	0x0800c890
 8001500:	0800c8a0 	.word	0x0800c8a0
 8001504:	0800c8b0 	.word	0x0800c8b0
 8001508:	0800c8c4 	.word	0x0800c8c4
 800150c:	0800c8d4 	.word	0x0800c8d4
 8001510:	0800c8e0 	.word	0x0800c8e0
 8001514:	0800c8f4 	.word	0x0800c8f4

08001518 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8001524:	2330      	movs	r3, #48	; 0x30
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	2300      	movs	r3, #0
 800152e:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <hex2bin+0x28>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <hex2bin+0x2c>
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	e0b2      	b.n	80016aa <hex2bin+0x192>
    if (len > 8) len = 8;
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	2b08      	cmp	r3, #8
 8001548:	d901      	bls.n	800154e <hex2bin+0x36>
 800154a:	2308      	movs	r3, #8
 800154c:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	f1c3 0308 	rsb	r3, r3, #8
 8001554:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8001558:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800155c:	f107 0210 	add.w	r2, r7, #16
 8001560:	4413      	add	r3, r2
 8001562:	78fa      	ldrb	r2, [r7, #3]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f00a faf0 	bl	800bb4c <memcpy>

    k = j = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001572:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001576:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 800157a:	e090      	b.n	800169e <hex2bin+0x186>
        jk = j + 2;
 800157c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001580:	3302      	adds	r3, #2
 8001582:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8001584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800158c:	e066      	b.n	800165c <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 800158e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001592:	3328      	adds	r3, #40	; 0x28
 8001594:	443b      	add	r3, r7
 8001596:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800159a:	2b2f      	cmp	r3, #47	; 0x2f
 800159c:	d918      	bls.n	80015d0 <hex2bin+0xb8>
 800159e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015a2:	3328      	adds	r3, #40	; 0x28
 80015a4:	443b      	add	r3, r7
 80015a6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80015aa:	2b39      	cmp	r3, #57	; 0x39
 80015ac:	d810      	bhi.n	80015d0 <hex2bin+0xb8>
 80015ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015b2:	3328      	adds	r3, #40	; 0x28
 80015b4:	443b      	add	r3, r7
 80015b6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80015ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	3a30      	subs	r2, #48	; 0x30
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	3328      	adds	r3, #40	; 0x28
 80015c8:	443b      	add	r3, r7
 80015ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80015ce:	e040      	b.n	8001652 <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 80015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d4:	3328      	adds	r3, #40	; 0x28
 80015d6:	443b      	add	r3, r7
 80015d8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80015dc:	2b60      	cmp	r3, #96	; 0x60
 80015de:	d918      	bls.n	8001612 <hex2bin+0xfa>
 80015e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015e4:	3328      	adds	r3, #40	; 0x28
 80015e6:	443b      	add	r3, r7
 80015e8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80015ec:	2b66      	cmp	r3, #102	; 0x66
 80015ee:	d810      	bhi.n	8001612 <hex2bin+0xfa>
 80015f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f4:	3328      	adds	r3, #40	; 0x28
 80015f6:	443b      	add	r3, r7
 80015f8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80015fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	3a57      	subs	r2, #87	; 0x57
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	3328      	adds	r3, #40	; 0x28
 800160a:	443b      	add	r3, r7
 800160c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001610:	e01f      	b.n	8001652 <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8001612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001616:	3328      	adds	r3, #40	; 0x28
 8001618:	443b      	add	r3, r7
 800161a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800161e:	2b40      	cmp	r3, #64	; 0x40
 8001620:	d917      	bls.n	8001652 <hex2bin+0x13a>
 8001622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001626:	3328      	adds	r3, #40	; 0x28
 8001628:	443b      	add	r3, r7
 800162a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800162e:	2b46      	cmp	r3, #70	; 0x46
 8001630:	d80f      	bhi.n	8001652 <hex2bin+0x13a>
 8001632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001636:	3328      	adds	r3, #40	; 0x28
 8001638:	443b      	add	r3, r7
 800163a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800163e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	3a37      	subs	r2, #55	; 0x37
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	3328      	adds	r3, #40	; 0x28
 800164c:	443b      	add	r3, r7
 800164e:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 8001652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001656:	3301      	adds	r3, #1
 8001658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800165c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001660:	7ffb      	ldrb	r3, [r7, #31]
 8001662:	429a      	cmp	r2, r3
 8001664:	d393      	bcc.n	800158e <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 8001666:	7b3b      	ldrb	r3, [r7, #12]
 8001668:	011a      	lsls	r2, r3, #4
 800166a:	7b7b      	ldrb	r3, [r7, #13]
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 8001674:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001678:	f1c3 0303 	rsb	r3, r3, #3
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	6a3a      	ldr	r2, [r7, #32]
 8001686:	4313      	orrs	r3, r2
 8001688:	623b      	str	r3, [r7, #32]
        k++;
 800168a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800168e:	3301      	adds	r3, #1
 8001690:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 8001694:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001698:	3302      	adds	r3, #2
 800169a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 800169e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	f67f af6a 	bls.w	800157c <hex2bin+0x64>
    }

    return ret;
 80016a8:	6a3b      	ldr	r3, [r7, #32]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
	if (on)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ca:	4807      	ldr	r0, [pc, #28]	; (80016e8 <errLedOn+0x34>)
 80016cc:	f002 ffd4 	bl	8004678 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 80016d0:	e005      	b.n	80016de <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <errLedOn+0x34>)
 80016da:	f002 ffcd 	bl	8004678 <HAL_GPIO_WritePin>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40020c00 	.word	0x40020c00

080016ec <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	return secCounter;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <get_secCounter+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000330 	.word	0x20000330

08001704 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
	secCounter++;
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <inc_secCounter+0x18>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	4a03      	ldr	r2, [pc, #12]	; (800171c <inc_secCounter+0x18>)
 8001710:	6013      	str	r3, [r2, #0]
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	20000330 	.word	0x20000330

08001720 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	return msCounter;
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <get_msCounter+0x18>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000338 	.word	0x20000338

0800173c <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	msCounter++;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <inc_msCounter+0x20>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	1c50      	adds	r0, r2, #1
 8001748:	f143 0100 	adc.w	r1, r3, #0
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <inc_msCounter+0x20>)
 800174e:	e9c3 0100 	strd	r0, r1, [r3]
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	20000338 	.word	0x20000338

08001760 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8001768:	f7ff ffc0 	bl	80016ec <get_secCounter>
 800176c:	4602      	mov	r2, r0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8001782:	f7ff ffb3 	bl	80016ec <get_secCounter>
 8001786:	4602      	mov	r2, r0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4293      	cmp	r3, r2
 800178c:	bf94      	ite	ls
 800178e:	2301      	movls	r3, #1
 8001790:	2300      	movhi	r3, #0
 8001792:	b2db      	uxtb	r3, r3
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b094      	sub	sp, #80	; 0x50
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	struct tm ts;
	time_t ep = (time_t)usec;
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	2000      	movs	r0, #0
 80017a8:	460a      	mov	r2, r1
 80017aa:	4603      	mov	r3, r0
 80017ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

	gmtime_r(&ep, &ts);
 80017b0:	f107 0214 	add.w	r2, r7, #20
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00a f8ec 	bl	800b998 <gmtime_r>

	sDate.WeekDay = ts.tm_wday;
 80017c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	sDate.Month   = ts.tm_mon + 1;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	sDate.Date    = ts.tm_mday;
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	sDate.Year    = ts.tm_year;
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80017e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017e8:	2200      	movs	r2, #0
 80017ea:	4619      	mov	r1, r3
 80017ec:	481b      	ldr	r0, [pc, #108]	; (800185c <set_Date+0xc0>)
 80017ee:	f004 fb23 	bl	8005e38 <HAL_RTC_SetDate>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d007      	beq.n	8001808 <set_Date+0x6c>
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <set_Date+0xc4>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <set_Date+0xc4>)
 8001804:	701a      	strb	r2, [r3, #0]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8001806:	e024      	b.n	8001852 <set_Date+0xb6>
		sTime.Hours   = ts.tm_hour + tZone;
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <set_Date+0xc8>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4413      	add	r3, r2
 8001812:	b2db      	uxtb	r3, r3
 8001814:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		sTime.Minutes = ts.tm_min;
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		sTime.Seconds = ts.tm_sec;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001828:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	480a      	ldr	r0, [pc, #40]	; (800185c <set_Date+0xc0>)
 8001832:	f004 f9e6 	bl	8005c02 <HAL_RTC_SetTime>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <set_Date+0xb0>
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <set_Date+0xc4>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <set_Date+0xc4>)
 8001848:	701a      	strb	r2, [r3, #0]
}
 800184a:	e002      	b.n	8001852 <set_Date+0xb6>
			setDate = true;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <set_Date+0xcc>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	3750      	adds	r7, #80	; 0x50
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000011c 	.word	0x2000011c
 8001860:	2000032c 	.word	0x2000032c
 8001864:	20000b45 	.word	0x20000b45
 8001868:	20000b44 	.word	0x20000b44

0800186c <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b093      	sub	sp, #76	; 0x4c
 8001870:	af04      	add	r7, sp, #16
 8001872:	6078      	str	r0, [r7, #4]
int ret = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8001878:	4b40      	ldr	r3, [pc, #256]	; (800197c <sec2str+0x110>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	f083 0301 	eor.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d040      	beq.n	8001908 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8001886:	f7ff ff31 	bl	80016ec <get_secCounter>
 800188a:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 800188c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188e:	4a3c      	ldr	r2, [pc, #240]	; (8001980 <sec2str+0x114>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	4a39      	ldr	r2, [pc, #228]	; (8001980 <sec2str+0x114>)
 800189c:	fba2 1203 	umull	r1, r2, r2, r3
 80018a0:	0c12      	lsrs	r2, r2, #16
 80018a2:	4938      	ldr	r1, [pc, #224]	; (8001984 <sec2str+0x118>)
 80018a4:	fb01 f202 	mul.w	r2, r1, r2
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80018ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ae:	4a36      	ldr	r2, [pc, #216]	; (8001988 <sec2str+0x11c>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	0adb      	lsrs	r3, r3, #11
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80018b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ba:	4a33      	ldr	r2, [pc, #204]	; (8001988 <sec2str+0x11c>)
 80018bc:	fba2 1203 	umull	r1, r2, r2, r3
 80018c0:	0ad2      	lsrs	r2, r2, #11
 80018c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80018c6:	fb01 f202 	mul.w	r2, r1, r2
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80018ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d0:	4a2e      	ldr	r2, [pc, #184]	; (800198c <sec2str+0x120>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80018da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018dc:	4b2b      	ldr	r3, [pc, #172]	; (800198c <sec2str+0x120>)
 80018de:	fba3 1302 	umull	r1, r3, r3, r2
 80018e2:	0959      	lsrs	r1, r3, #5
 80018e4:	460b      	mov	r3, r1
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a5b      	subs	r3, r3, r1
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 80018f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fc:	4924      	ldr	r1, [pc, #144]	; (8001990 <sec2str+0x124>)
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f00a faaa 	bl	800be58 <siprintf>
 8001904:	6378      	str	r0, [r7, #52]	; 0x34
 8001906:	e034      	b.n	8001972 <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2200      	movs	r2, #0
 800190e:	4619      	mov	r1, r3
 8001910:	4820      	ldr	r0, [pc, #128]	; (8001994 <sec2str+0x128>)
 8001912:	f004 fb38 	bl	8005f86 <HAL_RTC_GetDate>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <sec2str+0xc0>
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <sec2str+0x12c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	f043 0308 	orr.w	r3, r3, #8
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <sec2str+0x12c>)
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e022      	b.n	8001972 <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2200      	movs	r2, #0
 8001932:	4619      	mov	r1, r3
 8001934:	4817      	ldr	r0, [pc, #92]	; (8001994 <sec2str+0x128>)
 8001936:	f004 fa21 	bl	8005d7c <HAL_RTC_GetTime>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d007      	beq.n	8001950 <sec2str+0xe4>
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <sec2str+0x12c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <sec2str+0x12c>)
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e010      	b.n	8001972 <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8001950:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8001952:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8001954:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8001956:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001958:	7c3b      	ldrb	r3, [r7, #16]
 800195a:	7c7a      	ldrb	r2, [r7, #17]
 800195c:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800195e:	9102      	str	r1, [sp, #8]
 8001960:	9201      	str	r2, [sp, #4]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	4623      	mov	r3, r4
 8001966:	4602      	mov	r2, r0
 8001968:	490c      	ldr	r1, [pc, #48]	; (800199c <sec2str+0x130>)
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f00a fa74 	bl	800be58 <siprintf>
 8001970:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8001972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001974:	4618      	mov	r0, r3
 8001976:	373c      	adds	r7, #60	; 0x3c
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	20000b44 	.word	0x20000b44
 8001980:	c22e4507 	.word	0xc22e4507
 8001984:	00015180 	.word	0x00015180
 8001988:	91a2b3c5 	.word	0x91a2b3c5
 800198c:	88888889 	.word	0x88888889
 8001990:	0800c904 	.word	0x0800c904
 8001994:	2000011c 	.word	0x2000011c
 8001998:	2000032c 	.word	0x2000032c
 800199c:	0800c91c 	.word	0x0800c91c

080019a0 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(uint8_t addTime, const char *fmt, ...)
{
 80019a0:	b40e      	push	{r1, r2, r3}
 80019a2:	b590      	push	{r4, r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 80019ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b0:	613b      	str	r3, [r7, #16]
int dl = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 80019b6:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <Report+0xb4>)
 80019b8:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d010      	beq.n	80019e8 <Report+0x48>
		dl = sec2str(buf);
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7ff ff50 	bl	800186c <sec2str>
 80019cc:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7fe fbfe 	bl	80001d0 <strlen>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	4a1e      	ldr	r2, [pc, #120]	; (8001a58 <Report+0xb8>)
 80019de:	6810      	ldr	r0, [r2, #0]
 80019e0:	6018      	str	r0, [r3, #0]
		dl += 3;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3303      	adds	r3, #3
 80019e6:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 80019e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ec:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	18d0      	adds	r0, r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	1ad1      	subs	r1, r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fe:	f00a fb51 	bl	800c0a4 <vsniprintf>

	uartRdy = false;
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <Report+0xbc>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <Report+0xc0>)
 8001a0a:	681c      	ldr	r4, [r3, #0]
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f7fe fbdf 	bl	80001d0 <strlen>
 8001a12:	4603      	mov	r3, r0
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f005 fd82 	bl	8007524 <HAL_UART_Transmit_DMA>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <Report+0x94>
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <Report+0xc4>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <Report+0xc4>)
 8001a32:	701a      	strb	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 8001a34:	bf00      	nop
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <Report+0xbc>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	f083 0301 	eor.w	r3, r3, #1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f8      	bne.n	8001a36 <Report+0x96>

	va_end(args);

	return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a50:	b003      	add	sp, #12
 8001a52:	4770      	bx	lr
 8001a54:	20000340 	.word	0x20000340
 8001a58:	0800c938 	.word	0x0800c938
 8001a5c:	20000040 	.word	0x20000040
 8001a60:	20000050 	.word	0x20000050
 8001a64:	2000032c 	.word	0x2000032c

08001a68 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b090      	sub	sp, #64	; 0x40
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4aab      	ldr	r2, [pc, #684]	; (8001d24 <HAL_UART_RxCpltCallback+0x2bc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	f040 822c 	bne.w	8001ed4 <HAL_UART_RxCpltCallback+0x46c>
		rxBuf[ruk++] = (char)rxByte;
 8001a7c:	4baa      	ldr	r3, [pc, #680]	; (8001d28 <HAL_UART_RxCpltCallback+0x2c0>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	b291      	uxth	r1, r2
 8001a84:	4aa8      	ldr	r2, [pc, #672]	; (8001d28 <HAL_UART_RxCpltCallback+0x2c0>)
 8001a86:	8011      	strh	r1, [r2, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4ba8      	ldr	r3, [pc, #672]	; (8001d2c <HAL_UART_RxCpltCallback+0x2c4>)
 8001a8c:	7819      	ldrb	r1, [r3, #0]
 8001a8e:	4ba8      	ldr	r3, [pc, #672]	; (8001d30 <HAL_UART_RxCpltCallback+0x2c8>)
 8001a90:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8001a92:	4ba6      	ldr	r3, [pc, #664]	; (8001d2c <HAL_UART_RxCpltCallback+0x2c4>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b0a      	cmp	r3, #10
 8001a98:	f040 8217 	bne.w	8001eca <HAL_UART_RxCpltCallback+0x462>
			rxBuf[--ruk] = '\0';
 8001a9c:	4ba2      	ldr	r3, [pc, #648]	; (8001d28 <HAL_UART_RxCpltCallback+0x2c0>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4ba0      	ldr	r3, [pc, #640]	; (8001d28 <HAL_UART_RxCpltCallback+0x2c0>)
 8001aa6:	801a      	strh	r2, [r3, #0]
 8001aa8:	4b9f      	ldr	r3, [pc, #636]	; (8001d28 <HAL_UART_RxCpltCallback+0x2c0>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4ba0      	ldr	r3, [pc, #640]	; (8001d30 <HAL_UART_RxCpltCallback+0x2c8>)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 8001abe:	4b9d      	ldr	r3, [pc, #628]	; (8001d34 <HAL_UART_RxCpltCallback+0x2cc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	83bb      	strh	r3, [r7, #28]
			if (strlen(rxBuf) >= 4) {
 8001ac8:	4899      	ldr	r0, [pc, #612]	; (8001d30 <HAL_UART_RxCpltCallback+0x2c8>)
 8001aca:	f7fe fb81 	bl	80001d0 <strlen>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	f240 81f1 	bls.w	8001eb8 <HAL_UART_RxCpltCallback+0x450>
				int8_t idx = -1;
 8001ad6:	23ff      	movs	r3, #255	; 0xff
 8001ad8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8001adc:	2300      	movs	r3, #0
 8001ade:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001ae2:	e018      	b.n	8001b16 <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8001ae4:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8001ae8:	4a93      	ldr	r2, [pc, #588]	; (8001d38 <HAL_UART_RxCpltCallback+0x2d0>)
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	4619      	mov	r1, r3
 8001af0:	488f      	ldr	r0, [pc, #572]	; (8001d30 <HAL_UART_RxCpltCallback+0x2c8>)
 8001af2:	f00a fa08 	bl	800bf06 <strstr>
 8001af6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <HAL_UART_RxCpltCallback+0xa0>
														  //"read:0x4549ABBB:256"
						                                  //"next"
														  //"write:0x0:0xf0:256"
														  //"erase:"
														  //"clear"
						idx = i;
 8001afe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001b02:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 8001b06:	e00a      	b.n	8001b1e <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8001b08:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001b16:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	dde2      	ble.n	8001ae4 <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if (uk == rxBuf) {
 8001b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b20:	4a83      	ldr	r2, [pc, #524]	; (8001d30 <HAL_UART_RxCpltCallback+0x2c8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	f040 81c8 	bne.w	8001eb8 <HAL_UART_RxCpltCallback+0x450>
					nandLen = 256;
 8001b28:	4b84      	ldr	r3, [pc, #528]	; (8001d3c <HAL_UART_RxCpltCallback+0x2d4>)
 8001b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b2e:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 8001b30:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8001b34:	4a80      	ldr	r2, [pc, #512]	; (8001d38 <HAL_UART_RxCpltCallback+0x2d0>)
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fb48 	bl	80001d0 <strlen>
 8001b40:	4602      	mov	r2, r0
 8001b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b44:	4413      	add	r3, r2
 8001b46:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b50:	2300      	movs	r3, #0
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 8001b54:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	f200 8173 	bhi.w	8001e44 <HAL_UART_RxCpltCallback+0x3dc>
 8001b5e:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <HAL_UART_RxCpltCallback+0xfc>)
 8001b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b64:	08001b81 	.word	0x08001b81
 8001b68:	08001b8d 	.word	0x08001b8d
 8001b6c:	08001be1 	.word	0x08001be1
 8001b70:	08001c61 	.word	0x08001c61
 8001b74:	08001c91 	.word	0x08001c91
 8001b78:	08001e01 	.word	0x08001e01
 8001b7c:	08001e27 	.word	0x08001e27
						case cmdRestart:
							qcmd.cmd = cmdRestart;
 8001b80:	2300      	movs	r3, #0
 8001b82:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 8001b84:	4b6b      	ldr	r3, [pc, #428]	; (8001d34 <HAL_UART_RxCpltCallback+0x2cc>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
						break;
 8001b8a:	e15b      	b.n	8001e44 <HAL_UART_RxCpltCallback+0x3dc>
						case cmdEpoch:
							if (*uk != '?') {
 8001b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b3f      	cmp	r3, #63	; 0x3f
 8001b92:	d01d      	beq.n	8001bd0 <HAL_UART_RxCpltCallback+0x168>
								if (strlen(uk) < 10) setDate = false;
 8001b94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b96:	f7fe fb1b 	bl	80001d0 <strlen>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b09      	cmp	r3, #9
 8001b9e:	d803      	bhi.n	8001ba8 <HAL_UART_RxCpltCallback+0x140>
 8001ba0:	4b67      	ldr	r3, [pc, #412]	; (8001d40 <HAL_UART_RxCpltCallback+0x2d8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
							} else {
								qcmd.cmd = cmdEpoch;
								qcmd.attr = 1;
								cmd_flag = 1;
							}
						break;
 8001ba6:	e148      	b.n	8001e3a <HAL_UART_RxCpltCallback+0x3d2>
									uint32_t ep = (uint32_t)atol(uk);
 8001ba8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001baa:	f009 fee3 	bl	800b974 <atol>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	623b      	str	r3, [r7, #32]
									if (ep > epoch) {
 8001bb2:	4b64      	ldr	r3, [pc, #400]	; (8001d44 <HAL_UART_RxCpltCallback+0x2dc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6a3a      	ldr	r2, [r7, #32]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	f240 813e 	bls.w	8001e3a <HAL_UART_RxCpltCallback+0x3d2>
										epoch = ep;
 8001bbe:	4a61      	ldr	r2, [pc, #388]	; (8001d44 <HAL_UART_RxCpltCallback+0x2dc>)
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	6013      	str	r3, [r2, #0]
										qcmd.cmd = cmdEpoch;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	773b      	strb	r3, [r7, #28]
										cmd_flag = 1;
 8001bc8:	4b5a      	ldr	r3, [pc, #360]	; (8001d34 <HAL_UART_RxCpltCallback+0x2cc>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
						break;
 8001bce:	e134      	b.n	8001e3a <HAL_UART_RxCpltCallback+0x3d2>
								qcmd.cmd = cmdEpoch;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	773b      	strb	r3, [r7, #28]
								qcmd.attr = 1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	777b      	strb	r3, [r7, #29]
								cmd_flag = 1;
 8001bd8:	4b56      	ldr	r3, [pc, #344]	; (8001d34 <HAL_UART_RxCpltCallback+0x2cc>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
						break;
 8001bde:	e12c      	b.n	8001e3a <HAL_UART_RxCpltCallback+0x3d2>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 8001be0:	213a      	movs	r1, #58	; 0x3a
 8001be2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001be4:	f00a f967 	bl	800beb6 <strchr>
 8001be8:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8001bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00b      	beq.n	8001c08 <HAL_UART_RxCpltCallback+0x1a0>
								nandLen = atol(uki + 1);
 8001bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f009 febd 	bl	800b974 <atol>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <HAL_UART_RxCpltCallback+0x2d4>)
 8001c00:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 8001c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8001c08:	494f      	ldr	r1, [pc, #316]	; (8001d48 <HAL_UART_RxCpltCallback+0x2e0>)
 8001c0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001c0c:	f00a f97b 	bl	800bf06 <strstr>
 8001c10:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8001c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00f      	beq.n	8001c38 <HAL_UART_RxCpltCallback+0x1d0>
								uki += 2;
 8001c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 8001c1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c20:	f7fe fad6 	bl	80001d0 <strlen>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c2c:	f7ff fc74 	bl	8001518 <hex2bin>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4a46      	ldr	r2, [pc, #280]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e4>)
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e006      	b.n	8001c46 <HAL_UART_RxCpltCallback+0x1de>
							} else {
								nandAdr = atol(uk);
 8001c38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001c3a:	f009 fe9b 	bl	800b974 <atol>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e4>)
 8001c44:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e4>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_UART_RxCpltCallback+0x2e8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a3e      	ldr	r2, [pc, #248]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e4>)
 8001c52:	6013      	str	r3, [r2, #0]
							check = true;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							qcmd.cmd = cmdRead;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	773b      	strb	r3, [r7, #28]
						break;
 8001c5e:	e0f1      	b.n	8001e44 <HAL_UART_RxCpltCallback+0x3dc>
						case cmdNext://"next";
							if (nandAdr < devAdr) nandAdr = devAdr;
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e4>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <HAL_UART_RxCpltCallback+0x2e8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d203      	bcs.n	8001c74 <HAL_UART_RxCpltCallback+0x20c>
 8001c6c:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <HAL_UART_RxCpltCallback+0x2e8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e4>)
 8001c72:	6013      	str	r3, [r2, #0]
							nandAdr += nandLen;
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_UART_RxCpltCallback+0x2d4>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e4>)
 8001c82:	6013      	str	r3, [r2, #0]
							check = true;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							qcmd.cmd = cmdNext;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	773b      	strb	r3, [r7, #28]
						break;
 8001c8e:	e0d9      	b.n	8001e44 <HAL_UART_RxCpltCallback+0x3dc>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 8001c96:	492c      	ldr	r1, [pc, #176]	; (8001d48 <HAL_UART_RxCpltCallback+0x2e0>)
 8001c98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001c9a:	f00a f934 	bl	800bf06 <strstr>
 8001c9e:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8001ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00a      	beq.n	8001cbc <HAL_UART_RxCpltCallback+0x254>
								if (uki == uk) {
 8001ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d108      	bne.n	8001cc0 <HAL_UART_RxCpltCallback+0x258>
									uki += 2;
 8001cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001cba:	e001      	b.n	8001cc0 <HAL_UART_RxCpltCallback+0x258>
								}
							} else uki = uk;
 8001cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 8001cc0:	213a      	movs	r1, #58	; 0x3a
 8001cc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001cc4:	f00a f8f7 	bl	800beb6 <strchr>
 8001cc8:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80b6 	beq.w	8001e3e <HAL_UART_RxCpltCallback+0x3d6>
								ukb = uke + 1;
 8001cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2210      	movs	r2, #16
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f009 ff41 	bl	800bb68 <memset>
								memcpy(tmp, uki, uke - uki);
 8001ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f009 ff29 	bl	800bb4c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 8001cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d028      	beq.n	8001d54 <HAL_UART_RxCpltCallback+0x2ec>
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fa62 	bl	80001d0 <strlen>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fbfe 	bl	8001518 <hex2bin>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <HAL_UART_RxCpltCallback+0x2e4>)
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e020      	b.n	8001d66 <HAL_UART_RxCpltCallback+0x2fe>
 8001d24:	40004800 	.word	0x40004800
 8001d28:	20000b42 	.word	0x20000b42
 8001d2c:	20000b40 	.word	0x20000b40
 8001d30:	20000740 	.word	0x20000740
 8001d34:	2000032d 	.word	0x2000032d
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	20000b50 	.word	0x20000b50
 8001d40:	20000b44 	.word	0x20000b44
 8001d44:	20000044 	.word	0x20000044
 8001d48:	0800c93c 	.word	0x0800c93c
 8001d4c:	20000b4c 	.word	0x20000b4c
 8001d50:	20000b48 	.word	0x20000b48
								    else nandAdr = atol(tmp);
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f009 fe0b 	bl	800b974 <atol>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b5e      	ldr	r3, [pc, #376]	; (8001edc <HAL_UART_RxCpltCallback+0x474>)
 8001d64:	601a      	str	r2, [r3, #0]
								uki = ukb;
 8001d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 8001d6a:	213a      	movs	r1, #58	; 0x3a
 8001d6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d6e:	f00a f8a2 	bl	800beb6 <strchr>
 8001d72:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_UART_RxCpltCallback+0x32a>
									nandLen = atol(uke + 1);
 8001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f009 fdf8 	bl	800b974 <atol>
 8001d84:	4603      	mov	r3, r0
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b55      	ldr	r3, [pc, #340]	; (8001ee0 <HAL_UART_RxCpltCallback+0x478>)
 8001d8a:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 8001d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 8001d92:	4954      	ldr	r1, [pc, #336]	; (8001ee4 <HAL_UART_RxCpltCallback+0x47c>)
 8001d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d96:	f00a f8b6 	bl	800bf06 <strstr>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_UART_RxCpltCallback+0x346>
									ukb += 2;
 8001da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da2:	3302      	adds	r3, #2
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001dac:	e002      	b.n	8001db4 <HAL_UART_RxCpltCallback+0x34c>
								} else hex = false;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 8001db4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00d      	beq.n	8001dd8 <HAL_UART_RxCpltCallback+0x370>
 8001dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dbe:	f7fe fa07 	bl	80001d0 <strlen>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dca:	f7ff fba5 	bl	8001518 <hex2bin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b45      	ldr	r3, [pc, #276]	; (8001ee8 <HAL_UART_RxCpltCallback+0x480>)
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e006      	b.n	8001de6 <HAL_UART_RxCpltCallback+0x37e>
								    else nandByte = (uint8_t)atol(ukb);
 8001dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dda:	f009 fdcb 	bl	800b974 <atol>
 8001dde:	4603      	mov	r3, r0
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <HAL_UART_RxCpltCallback+0x480>)
 8001de4:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 8001de6:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <HAL_UART_RxCpltCallback+0x474>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b40      	ldr	r3, [pc, #256]	; (8001eec <HAL_UART_RxCpltCallback+0x484>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a3a      	ldr	r2, [pc, #232]	; (8001edc <HAL_UART_RxCpltCallback+0x474>)
 8001df2:	6013      	str	r3, [r2, #0]
								check = true;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								qcmd.cmd = cmdWrite;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	773b      	strb	r3, [r7, #28]
							}
						}
						break;
 8001dfe:	e01e      	b.n	8001e3e <HAL_UART_RxCpltCallback+0x3d6>
						case cmdErase://"erase:0" //erase:block_number from 0..1023
						{
							uint32_t blk = atol(uk);
 8001e00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e02:	f009 fdb7 	bl	800b974 <atol>
 8001e06:	4603      	mov	r3, r0
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
							if (blk < chipConf.BlockNbr) {
 8001e0a:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <HAL_UART_RxCpltCallback+0x488>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d216      	bcs.n	8001e42 <HAL_UART_RxCpltCallback+0x3da>
								nandBlk = blk;
 8001e14:	4a37      	ldr	r2, [pc, #220]	; (8001ef4 <HAL_UART_RxCpltCallback+0x48c>)
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	6013      	str	r3, [r2, #0]
								qcmd.cmd = cmdErase;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	773b      	strb	r3, [r7, #28]
								cmd_flag = 1;
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_UART_RxCpltCallback+0x490>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8001e24:	e00d      	b.n	8001e42 <HAL_UART_RxCpltCallback+0x3da>
						case cmdClear://"clear" //erase block from 0..1023
							nandBlk = chipConf.BlockNbr;
 8001e26:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <HAL_UART_RxCpltCallback+0x488>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4a32      	ldr	r2, [pc, #200]	; (8001ef4 <HAL_UART_RxCpltCallback+0x48c>)
 8001e2c:	6013      	str	r3, [r2, #0]
							qcmd.cmd = cmdClear;
 8001e2e:	2306      	movs	r3, #6
 8001e30:	773b      	strb	r3, [r7, #28]
							cmd_flag = 1;
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <HAL_UART_RxCpltCallback+0x490>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
						break;
 8001e38:	e004      	b.n	8001e44 <HAL_UART_RxCpltCallback+0x3dc>
						break;
 8001e3a:	bf00      	nop
 8001e3c:	e002      	b.n	8001e44 <HAL_UART_RxCpltCallback+0x3dc>
						break;
 8001e3e:	bf00      	nop
 8001e40:	e000      	b.n	8001e44 <HAL_UART_RxCpltCallback+0x3dc>
						break;
 8001e42:	bf00      	nop
					}
					if (check) {
 8001e44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01b      	beq.n	8001e84 <HAL_UART_RxCpltCallback+0x41c>
						if ((nandAdr + nandLen) >= (chipConf.PlaneSize + devAdr)) {
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_UART_RxCpltCallback+0x478>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <HAL_UART_RxCpltCallback+0x474>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	441a      	add	r2, r3
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_UART_RxCpltCallback+0x488>)
 8001e5a:	6959      	ldr	r1, [r3, #20]
 8001e5c:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_UART_RxCpltCallback+0x484>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	440b      	add	r3, r1
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d30b      	bcc.n	8001e7e <HAL_UART_RxCpltCallback+0x416>
							nandLen = chipConf.PlaneSize - nandAdr - 1;
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <HAL_UART_RxCpltCallback+0x488>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_UART_RxCpltCallback+0x474>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_UART_RxCpltCallback+0x478>)
 8001e7c:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_UART_RxCpltCallback+0x490>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
					}
					//
					if (cmd_flag) {
 8001e84:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <HAL_UART_RxCpltCallback+0x490>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d015      	beq.n	8001eb8 <HAL_UART_RxCpltCallback+0x450>
						if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_UART_RxCpltCallback+0x494>)
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	f107 011c 	add.w	r1, r7, #28
 8001e94:	2300      	movs	r3, #0
 8001e96:	2205      	movs	r2, #5
 8001e98:	f006 fe6e 	bl	8008b78 <osMessageQueuePut>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_UART_RxCpltCallback+0x498>)
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_UART_RxCpltCallback+0x498>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <HAL_UART_RxCpltCallback+0x450>
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_UART_RxCpltCallback+0x49c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_UART_RxCpltCallback+0x49c>)
 8001eb6:	701a      	strb	r2, [r3, #0]
					}
					//
				}
			}
			ruk = 0;
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_UART_RxCpltCallback+0x4a0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
			memset(rxBuf, 0, MAX_UART_BUF);
 8001ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4811      	ldr	r0, [pc, #68]	; (8001f0c <HAL_UART_RxCpltCallback+0x4a4>)
 8001ec6:	f009 fe4f 	bl	800bb68 <memset>
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4910      	ldr	r1, [pc, #64]	; (8001f10 <HAL_UART_RxCpltCallback+0x4a8>)
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f005 faf7 	bl	80074c2 <HAL_UART_Receive_IT>
	}
}
 8001ed4:	bf00      	nop
 8001ed6:	3740      	adds	r7, #64	; 0x40
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000b4c 	.word	0x20000b4c
 8001ee0:	20000b50 	.word	0x20000b50
 8001ee4:	0800c93c 	.word	0x0800c93c
 8001ee8:	20000060 	.word	0x20000060
 8001eec:	20000b48 	.word	0x20000b48
 8001ef0:	20000b64 	.word	0x20000b64
 8001ef4:	20000b54 	.word	0x20000b54
 8001ef8:	2000032d 	.word	0x2000032d
 8001efc:	20000324 	.word	0x20000324
 8001f00:	20000b84 	.word	0x20000b84
 8001f04:	2000032c 	.word	0x2000032c
 8001f08:	20000b42 	.word	0x20000b42
 8001f0c:	20000740 	.word	0x20000740
 8001f10:	20000b40 	.word	0x20000b40

08001f14 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <HAL_UART_TxCpltCallback+0x24>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d102      	bne.n	8001f2c <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_UART_TxCpltCallback+0x28>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
	}
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40004800 	.word	0x40004800
 8001f3c:	20000040 	.word	0x20000040

08001f40 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <HAL_SPI_TxCpltCallback+0x24>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d102      	bne.n	8001f58 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_SPI_TxCpltCallback+0x28>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
	}
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40013000 	.word	0x40013000
 8001f68:	20000041 	.word	0x20000041

08001f6c <HAL_NAND_ITCallback>:
	}
}
*/
//-------------------------------------------------------------------------------------------
void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	if (hnand->Instance == FSMC_NAND_DEVICE) {
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <HAL_NAND_ITCallback+0x28>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d104      	bne.n	8001f88 <HAL_NAND_ITCallback+0x1c>
		cb_nandCounter++;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_NAND_ITCallback+0x2c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_NAND_ITCallback+0x2c>)
 8001f86:	6013      	str	r3, [r2, #0]
	}
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	a0000060 	.word	0xa0000060
 8001f98:	20000b58 	.word	0x20000b58

08001f9c <nand_PageToBlock>:
//-------------------------------------------------------------------------------------------
uint32_t nand_PageToBlock(uint32_t page)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
    return (page * chipConf.PageSize) / chipConf.BlockSize;
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <nand_PageToBlock+0x28>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	fb03 f202 	mul.w	r2, r3, r2
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <nand_PageToBlock+0x28>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000b64 	.word	0x20000b64

08001fc8 <nand_BlockToPage>:
uint32_t nand_BlockToPage(uint32_t blk)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <nand_BlockToPage+0x28>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	fb03 f202 	mul.w	r2, r3, r2
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <nand_BlockToPage+0x28>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000b64 	.word	0x20000b64

08001ff4 <isPageEmpty>:
bool isPageEmpty(uint32_t page)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	return true;
 8001ffc:	2301      	movs	r3, #1
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	0000      	movs	r0, r0
 800200c:	0000      	movs	r0, r0
	...

08002010 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8002010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002012:	b0ab      	sub	sp, #172	; 0xac
 8002014:	af04      	add	r7, sp, #16
 8002016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */


	char *stx = (char *)calloc(1, MAX_UART_BUF);
 8002018:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800201c:	2001      	movs	r0, #1
 800201e:	f009 fcad 	bl	800b97c <calloc>
 8002022:	4603      	mov	r3, r0
 8002024:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef SET_SWV
	char stz[MAX_TMP_SIZE];
#endif


	HAL_Delay(500);
 8002026:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800202a:	f001 fc81 	bl	8003930 <HAL_Delay>
	Report(0, "%s", eol);
 800202e:	4ba4      	ldr	r3, [pc, #656]	; (80022c0 <defThread+0x2b0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	49a3      	ldr	r1, [pc, #652]	; (80022c4 <defThread+0x2b4>)
 8002036:	2000      	movs	r0, #0
 8002038:	f7ff fcb2 	bl	80019a0 <Report>
	Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 800203c:	4ba2      	ldr	r3, [pc, #648]	; (80022c8 <defThread+0x2b8>)
 800203e:	681c      	ldr	r4, [r3, #0]
 8002040:	f009 fb68 	bl	800b714 <xPortGetFreeHeapSize>
 8002044:	4602      	mov	r2, r0
 8002046:	4b9e      	ldr	r3, [pc, #632]	; (80022c0 <defThread+0x2b0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	9302      	str	r3, [sp, #8]
 800204c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	9200      	str	r2, [sp, #0]
 8002054:	4b9d      	ldr	r3, [pc, #628]	; (80022cc <defThread+0x2bc>)
 8002056:	4622      	mov	r2, r4
 8002058:	499d      	ldr	r1, [pc, #628]	; (80022d0 <defThread+0x2c0>)
 800205a:	2001      	movs	r0, #1
 800205c:	f7ff fca0 	bl	80019a0 <Report>


	uint8_t next_block_erase = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint32_t iBlk, stik;
	NAND_AddressTypeDef clr = {
 8002066:	2300      	movs	r3, #0
 8002068:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800206c:	2301      	movs	r3, #1
 800206e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002072:	2300      	movs	r3, #0
 8002074:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		.Page = 0,
		.Plane = 1,
		.Block = 0
	};
	uint8_t nand_show = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	bool readed = false;
 800207e:	2300      	movs	r3, #0
 8002080:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
	char cid[32];
	if (nandState == HAL_NAND_STATE_READY) {
 8002084:	4b93      	ldr	r3, [pc, #588]	; (80022d4 <defThread+0x2c4>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d15a      	bne.n	8002142 <defThread+0x132>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 800208c:	4b92      	ldr	r3, [pc, #584]	; (80022d8 <defThread+0x2c8>)
 800208e:	785b      	ldrb	r3, [r3, #1]
 8002090:	22f1      	movs	r2, #241	; 0xf1
 8002092:	4293      	cmp	r3, r2
 8002094:	d108      	bne.n	80020a8 <defThread+0x98>
 8002096:	4b91      	ldr	r3, [pc, #580]	; (80022dc <defThread+0x2cc>)
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209e:	2220      	movs	r2, #32
 80020a0:	4618      	mov	r0, r3
 80020a2:	f009 ff1d 	bl	800bee0 <strncpy>
 80020a6:	e006      	b.n	80020b6 <defThread+0xa6>
		                               else strcpy(cid, "UNKNOWN");
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	4a8c      	ldr	r2, [pc, #560]	; (80022e0 <defThread+0x2d0>)
 80020ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020b2:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 80020b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b8:	4a8a      	ldr	r2, [pc, #552]	; (80022e4 <defThread+0x2d4>)
 80020ba:	6810      	ldr	r0, [r2, #0]
 80020bc:	6018      	str	r0, [r3, #0]
 80020be:	8892      	ldrh	r2, [r2, #4]
 80020c0:	809a      	strh	r2, [r3, #4]
		uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 80020c2:	4b85      	ldr	r3, [pc, #532]	; (80022d8 <defThread+0x2c8>)
 80020c4:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 80020cc:	e015      	b.n	80020fa <defThread+0xea>
 80020ce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80020d0:	f7fe f87e 	bl	80001d0 <strlen>
 80020d4:	4602      	mov	r2, r0
 80020d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d8:	1898      	adds	r0, r3, r2
 80020da:	f997 3089 	ldrsb.w	r3, [r7, #137]	; 0x89
 80020de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80020e0:	4413      	add	r3, r2
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4980      	ldr	r1, [pc, #512]	; (80022e8 <defThread+0x2d8>)
 80020e8:	f009 feb6 	bl	800be58 <siprintf>
 80020ec:	f997 3089 	ldrsb.w	r3, [r7, #137]	; 0x89
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	3301      	adds	r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 80020fa:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d9e5      	bls.n	80020ce <defThread+0xbe>
		sprintf(stx+strlen(stx),
 8002102:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002104:	f7fe f864 	bl	80001d0 <strlen>
 8002108:	4602      	mov	r2, r0
 800210a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800210c:	1898      	adds	r0, r3, r2
				"\n\tMakerID=%02X\n\tDevice_Id=%02X '%s'\n\tThird_Id=%02X\n\tFourth_Id=%02X\n\tPlane_Id=%02X",
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 800210e:	4b72      	ldr	r3, [pc, #456]	; (80022d8 <defThread+0x2c8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
		sprintf(stx+strlen(stx),
 8002112:	461c      	mov	r4, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002114:	4b70      	ldr	r3, [pc, #448]	; (80022d8 <defThread+0x2c8>)
 8002116:	785b      	ldrb	r3, [r3, #1]
		sprintf(stx+strlen(stx),
 8002118:	461d      	mov	r5, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 800211a:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <defThread+0x2c8>)
 800211c:	789b      	ldrb	r3, [r3, #2]
		sprintf(stx+strlen(stx),
 800211e:	461a      	mov	r2, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002120:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <defThread+0x2c8>)
 8002122:	78db      	ldrb	r3, [r3, #3]
		sprintf(stx+strlen(stx),
 8002124:	4619      	mov	r1, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002126:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <defThread+0x2c8>)
 8002128:	791b      	ldrb	r3, [r3, #4]
		sprintf(stx+strlen(stx),
 800212a:	9303      	str	r3, [sp, #12]
 800212c:	9102      	str	r1, [sp, #8]
 800212e:	9201      	str	r2, [sp, #4]
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	462b      	mov	r3, r5
 8002138:	4622      	mov	r2, r4
 800213a:	496c      	ldr	r1, [pc, #432]	; (80022ec <defThread+0x2dc>)
 800213c:	f009 fe8c 	bl	800be58 <siprintf>
 8002140:	e00c      	b.n	800215c <defThread+0x14c>
	} else {
			sprintf(stx,
					"NAND: Error nandStatus='%s'(%d)",
					nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8002142:	4b64      	ldr	r3, [pc, #400]	; (80022d4 <defThread+0x2c4>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx,
 800214a:	4a69      	ldr	r2, [pc, #420]	; (80022f0 <defThread+0x2e0>)
 800214c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002150:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <defThread+0x2c4>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4967      	ldr	r1, [pc, #412]	; (80022f4 <defThread+0x2e4>)
 8002156:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002158:	f009 fe7e 	bl	800be58 <siprintf>
	}
	Report(1, "%s%s", stx, eol);
 800215c:	4b58      	ldr	r3, [pc, #352]	; (80022c0 <defThread+0x2b0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002162:	4965      	ldr	r1, [pc, #404]	; (80022f8 <defThread+0x2e8>)
 8002164:	2001      	movs	r0, #1
 8002166:	f7ff fc1b 	bl	80019a0 <Report>


	uint16_t err_color = BLACK;
 800216a:	2300      	movs	r3, #0
 800216c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8002170:	4b62      	ldr	r3, [pc, #392]	; (80022fc <defThread+0x2ec>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	785b      	ldrb	r3, [r3, #1]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800217c:	9200      	str	r2, [sp, #0]
 800217e:	22ef      	movs	r2, #239	; 0xef
 8002180:	2100      	movs	r1, #0
 8002182:	2000      	movs	r0, #0
 8002184:	f000 ff1d 	bl	8002fc2 <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8002188:	4b5c      	ldr	r3, [pc, #368]	; (80022fc <defThread+0x2ec>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	785b      	ldrb	r3, [r3, #1]
 800218e:	b29b      	uxth	r3, r3
 8002190:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002194:	b299      	uxth	r1, r3
 8002196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	23ef      	movs	r3, #239	; 0xef
 800219e:	22ef      	movs	r2, #239	; 0xef
 80021a0:	2000      	movs	r0, #0
 80021a2:	f000 ff0e 	bl	8002fc2 <ST7789_Fill>

	sprintf(stx, "NAND : %s", cid);
 80021a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021aa:	461a      	mov	r2, r3
 80021ac:	4954      	ldr	r1, [pc, #336]	; (8002300 <defThread+0x2f0>)
 80021ae:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80021b0:	f009 fe52 	bl	800be58 <siprintf>
	mkLineCenter(stx, ST7789_WIDTH / tFont->width);
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <defThread+0x2f4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	23f0      	movs	r3, #240	; 0xf0
 80021be:	fb93 f3f2 	sdiv	r3, r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4619      	mov	r1, r3
 80021c6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80021c8:	f001 f808 	bl	80031dc <mkLineCenter>
	//sprintf(stx+strlen(stx), "Maker:0x%02X\nchipID:0x%02X\n3-rd:0x%02X\n4-th:0x%02X\n5-th:0x%02X",
	//		                 nandID.Maker_Id, nandID.Device_Id, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
	sprintf(stx+strlen(stx),
 80021cc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80021ce:	f7fd ffff 	bl	80001d0 <strlen>
 80021d2:	4602      	mov	r2, r0
 80021d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d6:	189c      	adds	r4, r3, r2
 80021d8:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <defThread+0x2f8>)
 80021da:	681d      	ldr	r5, [r3, #0]
 80021dc:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <defThread+0x2f8>)
 80021de:	685e      	ldr	r6, [r3, #4]
			"PageSize:%lu\nSpareAreaSize:%lu\nBlockSize:%lu KB\nBlockNbr:%lu\nPlaneNbr:%lu\nPlaneSize:%lu MB",
			chipConf.PageSize,
			chipConf.SpareAreaSize,
			chipConf.BlockSize / 1024,
 80021e0:	4b49      	ldr	r3, [pc, #292]	; (8002308 <defThread+0x2f8>)
 80021e2:	689b      	ldr	r3, [r3, #8]
	sprintf(stx+strlen(stx),
 80021e4:	0a9b      	lsrs	r3, r3, #10
 80021e6:	4a48      	ldr	r2, [pc, #288]	; (8002308 <defThread+0x2f8>)
 80021e8:	68d2      	ldr	r2, [r2, #12]
 80021ea:	4947      	ldr	r1, [pc, #284]	; (8002308 <defThread+0x2f8>)
 80021ec:	6909      	ldr	r1, [r1, #16]
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			chipConf.PlaneSize / 1024 / 1024);
 80021ee:	4846      	ldr	r0, [pc, #280]	; (8002308 <defThread+0x2f8>)
 80021f0:	6940      	ldr	r0, [r0, #20]
	sprintf(stx+strlen(stx),
 80021f2:	0d00      	lsrs	r0, r0, #20
 80021f4:	9003      	str	r0, [sp, #12]
 80021f6:	9102      	str	r1, [sp, #8]
 80021f8:	9201      	str	r2, [sp, #4]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	4633      	mov	r3, r6
 80021fe:	462a      	mov	r2, r5
 8002200:	4942      	ldr	r1, [pc, #264]	; (800230c <defThread+0x2fc>)
 8002202:	4620      	mov	r0, r4
 8002204:	f009 fe28 	bl	800be58 <siprintf>
	if (cb_nandCounter) sprintf(stx+strlen(stx), "\nCallBack:%lu", cb_nandCounter);
 8002208:	4b41      	ldr	r3, [pc, #260]	; (8002310 <defThread+0x300>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00b      	beq.n	8002228 <defThread+0x218>
 8002210:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002212:	f7fd ffdd 	bl	80001d0 <strlen>
 8002216:	4602      	mov	r2, r0
 8002218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800221a:	4413      	add	r3, r2
 800221c:	4a3c      	ldr	r2, [pc, #240]	; (8002310 <defThread+0x300>)
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	493c      	ldr	r1, [pc, #240]	; (8002314 <defThread+0x304>)
 8002222:	4618      	mov	r0, r3
 8002224:	f009 fe18 	bl	800be58 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8002228:	4b36      	ldr	r3, [pc, #216]	; (8002304 <defThread+0x2f4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	785b      	ldrb	r3, [r3, #1]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe faa2 	bl	8000778 <__aeabi_i2d>
 8002234:	4604      	mov	r4, r0
 8002236:	460d      	mov	r5, r1
 8002238:	4b32      	ldr	r3, [pc, #200]	; (8002304 <defThread+0x2f4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	785b      	ldrb	r3, [r3, #1]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fa9a 	bl	8000778 <__aeabi_i2d>
 8002244:	a31c      	add	r3, pc, #112	; (adr r3, 80022b8 <defThread+0x2a8>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	f7fe f819 	bl	8000280 <__aeabi_dmul>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4620      	mov	r0, r4
 8002254:	4629      	mov	r1, r5
 8002256:	f7fe f943 	bl	80004e0 <__adddf3>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f7fe faf3 	bl	800084c <__aeabi_d2uiz>
 8002266:	4603      	mov	r3, r0
 8002268:	b298      	uxth	r0, r3
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <defThread+0x2f4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2a      	ldr	r2, [pc, #168]	; (8002318 <defThread+0x308>)
 8002270:	8812      	ldrh	r2, [r2, #0]
 8002272:	43d2      	mvns	r2, r2
 8002274:	b292      	uxth	r2, r2
 8002276:	4928      	ldr	r1, [pc, #160]	; (8002318 <defThread+0x308>)
 8002278:	8809      	ldrh	r1, [r1, #0]
 800227a:	9102      	str	r1, [sp, #8]
 800227c:	9201      	str	r2, [sp, #4]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	9200      	str	r2, [sp, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002286:	4601      	mov	r1, r0
 8002288:	2000      	movs	r0, #0
 800228a:	f000 ff51 	bl	8003130 <ST7789_WriteString>
					   stx,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 800228e:	2001      	movs	r0, #1
 8002290:	f000 fd08 	bl	8002ca4 <ipsOn>


	bool loop = true;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	bool led = false;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	uint32_t tmr = get_tmr(1);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f7ff fa5d 	bl	8001760 <get_tmr>
 80022a6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	s_qcmd qcmd = {0};
 80022aa:	2300      	movs	r3, #0
 80022ac:	843b      	strh	r3, [r7, #32]
	uint8_t prio = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	77fb      	strb	r3, [r7, #31]
	osStatus_t qs = osOK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	67fb      	str	r3, [r7, #124]	; 0x7c

  /* Infinite loop */

	while (loop) {
 80022b6:	e36f      	b.n	8002998 <defThread+0x988>
 80022b8:	33333333 	.word	0x33333333
 80022bc:	3feb3333 	.word	0x3feb3333
 80022c0:	20000004 	.word	0x20000004
 80022c4:	0800c940 	.word	0x0800c940
 80022c8:	20000000 	.word	0x20000000
 80022cc:	0800ed5c 	.word	0x0800ed5c
 80022d0:	0800c944 	.word	0x0800c944
 80022d4:	20000061 	.word	0x20000061
 80022d8:	20000b5c 	.word	0x20000b5c
 80022dc:	20000064 	.word	0x20000064
 80022e0:	0800c970 	.word	0x0800c970
 80022e4:	0800c978 	.word	0x0800c978
 80022e8:	0800c980 	.word	0x0800c980
 80022ec:	0800c988 	.word	0x0800c988
 80022f0:	20000068 	.word	0x20000068
 80022f4:	0800c9dc 	.word	0x0800c9dc
 80022f8:	0800c9fc 	.word	0x0800c9fc
 80022fc:	20000058 	.word	0x20000058
 8002300:	0800ca04 	.word	0x0800ca04
 8002304:	2000005c 	.word	0x2000005c
 8002308:	20000b64 	.word	0x20000b64
 800230c:	0800ca10 	.word	0x0800ca10
 8002310:	20000b58 	.word	0x20000b58
 8002314:	0800ca6c 	.word	0x0800ca6c
 8002318:	20000b46 	.word	0x20000b46

		if (check_tmr(tmr)) {
 800231c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002320:	f7ff fa2b 	bl	800177a <check_tmr>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8083 	beq.w	8002432 <defThread+0x422>
			tmr = get_tmr(1);
 800232c:	2001      	movs	r0, #1
 800232e:	f7ff fa17 	bl	8001760 <get_tmr>
 8002332:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			//
			sec2str(stx);
 8002336:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002338:	f7ff fa98 	bl	800186c <sec2str>
#ifdef SET_SWV
			strcpy(stz, stx);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 800233c:	4ba9      	ldr	r3, [pc, #676]	; (80025e4 <defThread+0x5d4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	23f0      	movs	r3, #240	; 0xf0
 8002346:	fb93 f3f2 	sdiv	r3, r3, r2
 800234a:	b29b      	uxth	r3, r3
 800234c:	4619      	mov	r1, r3
 800234e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002350:	f000 ff44 	bl	80031dc <mkLineCenter>
 8002354:	4601      	mov	r1, r0
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <defThread+0x5d4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800235e:	9202      	str	r2, [sp, #8]
 8002360:	221f      	movs	r2, #31
 8002362:	9201      	str	r2, [sp, #4]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	9200      	str	r2, [sp, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	460a      	mov	r2, r1
 800236c:	2100      	movs	r1, #0
 800236e:	2008      	movs	r0, #8
 8002370:	f000 fede 	bl	8003130 <ST7789_WriteString>

			sprintf(stx, "Error: 0x%02X", devError);
 8002374:	4b9c      	ldr	r3, [pc, #624]	; (80025e8 <defThread+0x5d8>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	499c      	ldr	r1, [pc, #624]	; (80025ec <defThread+0x5dc>)
 800237c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800237e:	f009 fd6b 	bl	800be58 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 8002382:	4b99      	ldr	r3, [pc, #612]	; (80025e8 <defThread+0x5d8>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <defThread+0x384>
 800238a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800238e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002392:	e002      	b.n	800239a <defThread+0x38a>
 8002394:	2300      	movs	r3, #0
 8002396:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 800239a:	4b92      	ldr	r3, [pc, #584]	; (80025e4 <defThread+0x5d4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80023a6:	b29c      	uxth	r4, r3
 80023a8:	4b8e      	ldr	r3, [pc, #568]	; (80025e4 <defThread+0x5d4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	23f0      	movs	r3, #240	; 0xf0
 80023b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4619      	mov	r1, r3
 80023ba:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80023bc:	f000 ff0e 	bl	80031dc <mkLineCenter>
 80023c0:	4601      	mov	r1, r0
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <defThread+0x5d4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ca:	9202      	str	r2, [sp, #8]
 80023cc:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80023d0:	9201      	str	r2, [sp, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	9200      	str	r2, [sp, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	460a      	mov	r2, r1
 80023da:	4621      	mov	r1, r4
 80023dc:	2000      	movs	r0, #0
 80023de:	f000 fea7 	bl	8003130 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 80023e2:	4b83      	ldr	r3, [pc, #524]	; (80025f0 <defThread+0x5e0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d013      	beq.n	8002412 <defThread+0x402>
				if (qs != qStat) {
 80023ea:	4b81      	ldr	r3, [pc, #516]	; (80025f0 <defThread+0x5e0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d00e      	beq.n	8002412 <defThread+0x402>
					Report(1, "OS: %s%s", get_qStat(qStat), eol);
 80023f4:	4b7e      	ldr	r3, [pc, #504]	; (80025f0 <defThread+0x5e0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff f83d 	bl	8001478 <get_qStat>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b7c      	ldr	r3, [pc, #496]	; (80025f4 <defThread+0x5e4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	497c      	ldr	r1, [pc, #496]	; (80025f8 <defThread+0x5e8>)
 8002406:	2001      	movs	r0, #1
 8002408:	f7ff faca 	bl	80019a0 <Report>
					qs = qStat;
 800240c:	4b78      	ldr	r3, [pc, #480]	; (80025f0 <defThread+0x5e0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	67fb      	str	r3, [r7, #124]	; 0x7c
				}
			}

			if (devError) led = true; else led = false;
 8002412:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <defThread+0x5d8>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <defThread+0x412>
 800241a:	2301      	movs	r3, #1
 800241c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8002420:	e002      	b.n	8002428 <defThread+0x418>
 8002422:	2300      	movs	r3, #0
 8002424:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			errLedOn(led);
 8002428:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff f941 	bl	80016b4 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 8002432:	4b72      	ldr	r3, [pc, #456]	; (80025fc <defThread+0x5ec>)
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	f107 021f 	add.w	r2, r7, #31
 800243a:	f107 0120 	add.w	r1, r7, #32
 800243e:	2305      	movs	r3, #5
 8002440:	f006 fbfa 	bl	8008c38 <osMessageQueueGet>
 8002444:	4603      	mov	r3, r0
 8002446:	4a6a      	ldr	r2, [pc, #424]	; (80025f0 <defThread+0x5e0>)
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b69      	ldr	r3, [pc, #420]	; (80025f0 <defThread+0x5e0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d021      	beq.n	8002496 <defThread+0x486>
			if (qs != qStat) qs = qStat;
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <defThread+0x5e0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002458:	429a      	cmp	r2, r3
 800245a:	d002      	beq.n	8002462 <defThread+0x452>
 800245c:	4b64      	ldr	r3, [pc, #400]	; (80025f0 <defThread+0x5e0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	67fb      	str	r3, [r7, #124]	; 0x7c
			if (qStat != osErrorTimeout) {
 8002462:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <defThread+0x5e0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f113 0f02 	cmn.w	r3, #2
 800246a:	f000 8243 	beq.w	80028f4 <defThread+0x8e4>
				devError |= devQUE;
 800246e:	4b5e      	ldr	r3, [pc, #376]	; (80025e8 <defThread+0x5d8>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b5b      	ldr	r3, [pc, #364]	; (80025e8 <defThread+0x5d8>)
 800247a:	701a      	strb	r2, [r3, #0]
				Report(1, "OS: %s%s", get_qStat(qStat), eol);
 800247c:	4b5c      	ldr	r3, [pc, #368]	; (80025f0 <defThread+0x5e0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fff9 	bl	8001478 <get_qStat>
 8002486:	4602      	mov	r2, r0
 8002488:	4b5a      	ldr	r3, [pc, #360]	; (80025f4 <defThread+0x5e4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	495a      	ldr	r1, [pc, #360]	; (80025f8 <defThread+0x5e8>)
 800248e:	2001      	movs	r0, #1
 8002490:	f7ff fa86 	bl	80019a0 <Report>
 8002494:	e22e      	b.n	80028f4 <defThread+0x8e4>
			}
		} else {
			Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 8002496:	f897 3020 	ldrb.w	r3, [r7, #32]
 800249a:	4619      	mov	r1, r3
 800249c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80024a0:	4618      	mov	r0, r3
 80024a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b55      	ldr	r3, [pc, #340]	; (8002600 <defThread+0x5f0>)
 80024aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ae:	4a51      	ldr	r2, [pc, #324]	; (80025f4 <defThread+0x5e4>)
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	9201      	str	r2, [sp, #4]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	4603      	mov	r3, r0
 80024b8:	460a      	mov	r2, r1
 80024ba:	4952      	ldr	r1, [pc, #328]	; (8002604 <defThread+0x5f4>)
 80024bc:	2001      	movs	r0, #1
 80024be:	f7ff fa6f 	bl	80019a0 <Report>
			nand_show = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			switch (qcmd.cmd) {
 80024c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	f200 8160 	bhi.w	8002792 <defThread+0x782>
 80024d2:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <defThread+0x4c8>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	080024f5 	.word	0x080024f5
 80024dc:	080024fd 	.word	0x080024fd
 80024e0:	08002527 	.word	0x08002527
 80024e4:	080025b7 	.word	0x080025b7
 80024e8:	080026b9 	.word	0x080026b9
 80024ec:	08002631 	.word	0x08002631
 80024f0:	0800269b 	.word	0x0800269b
				case cmdRestart:
					loop = false;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		  		break;
 80024fa:	e14a      	b.n	8002792 <defThread+0x782>
		  		break;
				case cmdEpoch:
					if (!qcmd.attr) {
 80024fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <defThread+0x500>
						set_Date(epoch);
 8002504:	4b40      	ldr	r3, [pc, #256]	; (8002608 <defThread+0x5f8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f947 	bl	800179c <set_Date>
					} else {
						sec2str(stx);
						Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 800250e:	e140      	b.n	8002792 <defThread+0x782>
						sec2str(stx);
 8002510:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002512:	f7ff f9ab 	bl	800186c <sec2str>
						Report(0, "%s <- Current date&time%s", stx, eol);
 8002516:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <defThread+0x5e4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800251c:	493b      	ldr	r1, [pc, #236]	; (800260c <defThread+0x5fc>)
 800251e:	2000      	movs	r0, #0
 8002520:	f7ff fa3e 	bl	80019a0 <Report>
				break;
 8002524:	e135      	b.n	8002792 <defThread+0x782>
				case cmdRead:
				{
					uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 8002526:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <defThread+0x600>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4b3a      	ldr	r3, [pc, #232]	; (8002614 <defThread+0x604>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	1ad2      	subs	r2, r2, r3
 8002530:	4b39      	ldr	r3, [pc, #228]	; (8002618 <defThread+0x608>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	653b      	str	r3, [r7, #80]	; 0x50
					NAND_AddressTypeDef addr = {
 800253a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253c:	b29b      	uxth	r3, r3
 800253e:	833b      	strh	r3, [r7, #24]
 8002540:	2301      	movs	r3, #1
 8002542:	837b      	strh	r3, [r7, #26]
						.Page = p,
						.Plane = 1,
						.Block = nand_PageToBlock(p)
 8002544:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002546:	f7ff fd29 	bl	8001f9c <nand_PageToBlock>
 800254a:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 800254c:	b29b      	uxth	r3, r3
 800254e:	83bb      	strh	r3, [r7, #28]
					};
					Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <defThread+0x600>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b31      	ldr	r3, [pc, #196]	; (800261c <defThread+0x60c>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	461c      	mov	r4, r3
							  nandAdr, nandLen, addr.Page, addr.Block, eol);
 800255a:	8b3b      	ldrh	r3, [r7, #24]
					Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 800255c:	4619      	mov	r1, r3
							  nandAdr, nandLen, addr.Page, addr.Block, eol);
 800255e:	8bbb      	ldrh	r3, [r7, #28]
					Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8002560:	4618      	mov	r0, r3
 8002562:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <defThread+0x5e4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	9302      	str	r3, [sp, #8]
 8002568:	9001      	str	r0, [sp, #4]
 800256a:	9100      	str	r1, [sp, #0]
 800256c:	4623      	mov	r3, r4
 800256e:	492c      	ldr	r1, [pc, #176]	; (8002620 <defThread+0x610>)
 8002570:	2001      	movs	r0, #1
 8002572:	f7ff fa15 	bl	80019a0 <Report>
					if (rdBuf) {
 8002576:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <defThread+0x614>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8106 	beq.w	800278c <defThread+0x77c>
						if (HAL_NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) == HAL_OK) {
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <defThread+0x618>)
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <defThread+0x614>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	f107 0118 	add.w	r1, r7, #24
 800258c:	2301      	movs	r3, #1
 800258e:	f002 f9c8 	bl	8004922 <HAL_NAND_Read_Page_8b>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d106      	bne.n	80025a6 <defThread+0x596>
							nand_show = 1;
 8002598:	2301      	movs	r3, #1
 800259a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
							readed = true;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
						} else devError |= devNAND;
					}
				}
				break;
 80025a4:	e0f2      	b.n	800278c <defThread+0x77c>
						} else devError |= devNAND;
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <defThread+0x5d8>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	f043 0320 	orr.w	r3, r3, #32
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <defThread+0x5d8>)
 80025b2:	701a      	strb	r2, [r3, #0]
				break;
 80025b4:	e0ea      	b.n	800278c <defThread+0x77c>
				case cmdNext:
					Report(1, "Read next nand adr:0x%X len:%lu%s",
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <defThread+0x600>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b18      	ldr	r3, [pc, #96]	; (800261c <defThread+0x60c>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	4619      	mov	r1, r3
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <defThread+0x5e4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	460b      	mov	r3, r1
 80025c8:	4918      	ldr	r1, [pc, #96]	; (800262c <defThread+0x61c>)
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7ff f9e8 	bl	80019a0 <Report>
							  nandAdr, nandLen, eol);
					if (rdBuf) nand_show = 2;
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <defThread+0x614>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80db 	beq.w	8002790 <defThread+0x780>
 80025da:	2302      	movs	r3, #2
 80025dc:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
				break;
 80025e0:	e0d6      	b.n	8002790 <defThread+0x780>
 80025e2:	bf00      	nop
 80025e4:	20000058 	.word	0x20000058
 80025e8:	2000032c 	.word	0x2000032c
 80025ec:	0800ca7c 	.word	0x0800ca7c
 80025f0:	20000b84 	.word	0x20000b84
 80025f4:	20000004 	.word	0x20000004
 80025f8:	0800ca8c 	.word	0x0800ca8c
 80025fc:	20000324 	.word	0x20000324
 8002600:	20000024 	.word	0x20000024
 8002604:	0800ca98 	.word	0x0800ca98
 8002608:	20000044 	.word	0x20000044
 800260c:	0800cab0 	.word	0x0800cab0
 8002610:	20000b4c 	.word	0x20000b4c
 8002614:	20000b48 	.word	0x20000b48
 8002618:	20000b64 	.word	0x20000b64
 800261c:	20000b50 	.word	0x20000b50
 8002620:	0800cacc 	.word	0x0800cacc
 8002624:	20000b7c 	.word	0x20000b7c
 8002628:	20000054 	.word	0x20000054
 800262c:	0800cafc 	.word	0x0800cafc
				case cmdErase:
				{
					NAND_AddressTypeDef addr = {
						.Page = nand_BlockToPage(nandBlk),
 8002630:	4b97      	ldr	r3, [pc, #604]	; (8002890 <defThread+0x880>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fcc7 	bl	8001fc8 <nand_BlockToPage>
 800263a:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 800263c:	b29b      	uxth	r3, r3
 800263e:	823b      	strh	r3, [r7, #16]
 8002640:	2301      	movs	r3, #1
 8002642:	827b      	strh	r3, [r7, #18]
 8002644:	4b92      	ldr	r3, [pc, #584]	; (8002890 <defThread+0x880>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	82bb      	strh	r3, [r7, #20]
						.Plane = 1,
						.Block = nandBlk
					};
					Report(1, "Erase nand block:%lu... ", addr.Block);
 800264c:	8abb      	ldrh	r3, [r7, #20]
 800264e:	461a      	mov	r2, r3
 8002650:	4990      	ldr	r1, [pc, #576]	; (8002894 <defThread+0x884>)
 8002652:	2001      	movs	r0, #1
 8002654:	f7ff f9a4 	bl	80019a0 <Report>
					uint32_t stik = HAL_GetTick();
 8002658:	f001 f95e 	bl	8003918 <HAL_GetTick>
 800265c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (HAL_NAND_Erase_Block(nandPort, &addr) != HAL_OK) devError |= devNAND;
 800265e:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <defThread+0x888>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f107 0210 	add.w	r2, r7, #16
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f002 fba6 	bl	8004dba <HAL_NAND_Erase_Block>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <defThread+0x672>
 8002674:	4b89      	ldr	r3, [pc, #548]	; (800289c <defThread+0x88c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	f043 0320 	orr.w	r3, r3, #32
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4b87      	ldr	r3, [pc, #540]	; (800289c <defThread+0x88c>)
 8002680:	701a      	strb	r2, [r3, #0]
					Report(0, "done (%lu ms)%s", HAL_GetTick() - stik, eol);
 8002682:	f001 f949 	bl	8003918 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800268a:	1ad2      	subs	r2, r2, r3
 800268c:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <defThread+0x890>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4984      	ldr	r1, [pc, #528]	; (80028a4 <defThread+0x894>)
 8002692:	2000      	movs	r0, #0
 8002694:	f7ff f984 	bl	80019a0 <Report>
				}
				break;
 8002698:	e07b      	b.n	8002792 <defThread+0x782>
				case cmdClear:
					iBlk = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					Report(1, "Erase chip ");
 80026a0:	4981      	ldr	r1, [pc, #516]	; (80028a8 <defThread+0x898>)
 80026a2:	2001      	movs	r0, #1
 80026a4:	f7ff f97c 	bl	80019a0 <Report>
					next_block_erase = 1;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					stik = HAL_GetTick();
 80026ae:	f001 f933 	bl	8003918 <HAL_GetTick>
 80026b2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
				break;
 80026b6:	e06c      	b.n	8002792 <defThread+0x782>
				case cmdWrite:
				{
					uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 80026b8:	4b7c      	ldr	r3, [pc, #496]	; (80028ac <defThread+0x89c>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b7c      	ldr	r3, [pc, #496]	; (80028b0 <defThread+0x8a0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	1ad2      	subs	r2, r2, r3
 80026c2:	4b7c      	ldr	r3, [pc, #496]	; (80028b4 <defThread+0x8a4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	657b      	str	r3, [r7, #84]	; 0x54
					NAND_AddressTypeDef addr = {
 80026cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	813b      	strh	r3, [r7, #8]
 80026d2:	2301      	movs	r3, #1
 80026d4:	817b      	strh	r3, [r7, #10]
						.Page = p,
						.Plane = 1,
						.Block = nand_PageToBlock(p)
 80026d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80026d8:	f7ff fc60 	bl	8001f9c <nand_PageToBlock>
 80026dc:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 80026de:	b29b      	uxth	r3, r3
 80026e0:	81bb      	strh	r3, [r7, #12]
					};
					Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu (page:%lu blk:%lu)... ",
 80026e2:	4b72      	ldr	r3, [pc, #456]	; (80028ac <defThread+0x89c>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4b74      	ldr	r3, [pc, #464]	; (80028b8 <defThread+0x8a8>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461d      	mov	r5, r3
 80026ec:	4b73      	ldr	r3, [pc, #460]	; (80028bc <defThread+0x8ac>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
							  nandAdr, nandByte, nandLen, addr.Page, addr.Block, eol);
 80026f2:	893b      	ldrh	r3, [r7, #8]
					Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu (page:%lu blk:%lu)... ",
 80026f4:	4618      	mov	r0, r3
							  nandAdr, nandByte, nandLen, addr.Page, addr.Block, eol);
 80026f6:	89bb      	ldrh	r3, [r7, #12]
					Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu (page:%lu blk:%lu)... ",
 80026f8:	461c      	mov	r4, r3
 80026fa:	4b69      	ldr	r3, [pc, #420]	; (80028a0 <defThread+0x890>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	9303      	str	r3, [sp, #12]
 8002700:	9402      	str	r4, [sp, #8]
 8002702:	9001      	str	r0, [sp, #4]
 8002704:	9100      	str	r1, [sp, #0]
 8002706:	462b      	mov	r3, r5
 8002708:	496d      	ldr	r1, [pc, #436]	; (80028c0 <defThread+0x8b0>)
 800270a:	2001      	movs	r0, #1
 800270c:	f7ff f948 	bl	80019a0 <Report>
					if (wrBuf) {
 8002710:	4b6c      	ldr	r3, [pc, #432]	; (80028c4 <defThread+0x8b4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d031      	beq.n	800277c <defThread+0x76c>
						if (isPageEmpty(addr.Page)) {
 8002718:	893b      	ldrh	r3, [r7, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fc6a 	bl	8001ff4 <isPageEmpty>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d02a      	beq.n	800277c <defThread+0x76c>
							memset(wrBuf, nandByte, nandLen);
 8002726:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <defThread+0x8b4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a63      	ldr	r2, [pc, #396]	; (80028b8 <defThread+0x8a8>)
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	4611      	mov	r1, r2
 8002730:	4a62      	ldr	r2, [pc, #392]	; (80028bc <defThread+0x8ac>)
 8002732:	8812      	ldrh	r2, [r2, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f009 fa17 	bl	800bb68 <memset>
							memset(wrBuf + nandLen, 0xff, chipConf.PageSize - nandLen);
 800273a:	4b62      	ldr	r3, [pc, #392]	; (80028c4 <defThread+0x8b4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a5f      	ldr	r2, [pc, #380]	; (80028bc <defThread+0x8ac>)
 8002740:	8812      	ldrh	r2, [r2, #0]
 8002742:	1898      	adds	r0, r3, r2
 8002744:	4b5b      	ldr	r3, [pc, #364]	; (80028b4 <defThread+0x8a4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a5c      	ldr	r2, [pc, #368]	; (80028bc <defThread+0x8ac>)
 800274a:	8812      	ldrh	r2, [r2, #0]
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	461a      	mov	r2, r3
 8002750:	21ff      	movs	r1, #255	; 0xff
 8002752:	f009 fa09 	bl	800bb68 <memset>
							if (HAL_NAND_Write_Page_8b(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
 8002756:	4b50      	ldr	r3, [pc, #320]	; (8002898 <defThread+0x888>)
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	4b5a      	ldr	r3, [pc, #360]	; (80028c4 <defThread+0x8b4>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	f107 0108 	add.w	r1, r7, #8
 8002762:	2301      	movs	r3, #1
 8002764:	f002 fa04 	bl	8004b70 <HAL_NAND_Write_Page_8b>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <defThread+0x76c>
 800276e:	4b4b      	ldr	r3, [pc, #300]	; (800289c <defThread+0x88c>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f043 0320 	orr.w	r3, r3, #32
 8002776:	b2da      	uxtb	r2, r3
 8002778:	4b48      	ldr	r3, [pc, #288]	; (800289c <defThread+0x88c>)
 800277a:	701a      	strb	r2, [r3, #0]
						}
					}
					Report(0, "done%s", eol);
 800277c:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <defThread+0x890>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4951      	ldr	r1, [pc, #324]	; (80028c8 <defThread+0x8b8>)
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff f90b 	bl	80019a0 <Report>
				}
				break;
 800278a:	e002      	b.n	8002792 <defThread+0x782>
				break;
 800278c:	bf00      	nop
 800278e:	e000      	b.n	8002792 <defThread+0x782>
				break;
 8002790:	bf00      	nop
			}
			if (nand_show) {
 8002792:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80ac 	beq.w	80028f4 <defThread+0x8e4>
				uint32_t adr = nandAdr;
 800279c:	4b43      	ldr	r3, [pc, #268]	; (80028ac <defThread+0x89c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	67bb      	str	r3, [r7, #120]	; 0x78
				int step = 32;
 80027a2:	2320      	movs	r3, #32
 80027a4:	64fb      	str	r3, [r7, #76]	; 0x4c
				uint32_t ind = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	677b      	str	r3, [r7, #116]	; 0x74
				uint32_t max_ind = nandLen;
 80027aa:	4b44      	ldr	r3, [pc, #272]	; (80028bc <defThread+0x8ac>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	673b      	str	r3, [r7, #112]	; 0x70
				if (nand_show == 2) {
 80027b0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d10f      	bne.n	80027d8 <defThread+0x7c8>
					if (readed) {
 80027b8:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d009      	beq.n	80027d4 <defThread+0x7c4>
						ind = adr & (chipConf.PageSize - 1);// - devAdr;
 80027c0:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <defThread+0x8a4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80027c8:	4013      	ands	r3, r2
 80027ca:	677b      	str	r3, [r7, #116]	; 0x74
						max_ind = chipConf.PageSize;
 80027cc:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <defThread+0x8a4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	673b      	str	r3, [r7, #112]	; 0x70
 80027d2:	e001      	b.n	80027d8 <defThread+0x7c8>
					} else ind = max_ind;
 80027d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d6:	677b      	str	r3, [r7, #116]	; 0x74
				}
				if (ind < max_ind) {
 80027d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027dc:	429a      	cmp	r2, r3
 80027de:	d27d      	bcs.n	80028dc <defThread+0x8cc>
					bool done = false;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					uint32_t sch = nandLen / step;
 80027e6:	4b35      	ldr	r3, [pc, #212]	; (80028bc <defThread+0x8ac>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80027f2:	66bb      	str	r3, [r7, #104]	; 0x68
					stx[0] = '\0';
 80027f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
					while (!done) {
 80027fa:	e03c      	b.n	8002876 <defThread+0x866>
						sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 80027fc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80027fe:	f7fd fce7 	bl	80001d0 <strlen>
 8002802:	4602      	mov	r2, r0
 8002804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002806:	4413      	add	r3, r2
 8002808:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800280a:	4930      	ldr	r1, [pc, #192]	; (80028cc <defThread+0x8bc>)
 800280c:	4618      	mov	r0, r3
 800280e:	f009 fb23 	bl	800be58 <siprintf>
						for (int i = 0; i < step; i++) sprintf(stx+strlen(stx), " %02X", rdBuf[i + ind]);
 8002812:	2300      	movs	r3, #0
 8002814:	667b      	str	r3, [r7, #100]	; 0x64
 8002816:	e013      	b.n	8002840 <defThread+0x830>
 8002818:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800281a:	f7fd fcd9 	bl	80001d0 <strlen>
 800281e:	4602      	mov	r2, r0
 8002820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002822:	1898      	adds	r0, r3, r2
 8002824:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <defThread+0x8c0>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800282a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800282c:	440b      	add	r3, r1
 800282e:	4413      	add	r3, r2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	4927      	ldr	r1, [pc, #156]	; (80028d4 <defThread+0x8c4>)
 8002836:	f009 fb0f 	bl	800be58 <siprintf>
 800283a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800283c:	3301      	adds	r3, #1
 800283e:	667b      	str	r3, [r7, #100]	; 0x64
 8002840:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002844:	429a      	cmp	r2, r3
 8002846:	dbe7      	blt.n	8002818 <defThread+0x808>
						strcat(stx, eol);
 8002848:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <defThread+0x890>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002850:	f009 fb22 	bl	800be98 <strcat>
						adr += step;
 8002854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002856:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002858:	4413      	add	r3, r2
 800285a:	67bb      	str	r3, [r7, #120]	; 0x78
						ind += step;
 800285c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002860:	4413      	add	r3, r2
 8002862:	677b      	str	r3, [r7, #116]	; 0x74
						sch--;
 8002864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002866:	3b01      	subs	r3, #1
 8002868:	66bb      	str	r3, [r7, #104]	; 0x68
						if (!sch) done = true;
 800286a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <defThread+0x866>
 8002870:	2301      	movs	r3, #1
 8002872:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					while (!done) {
 8002876:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1bb      	bne.n	80027fc <defThread+0x7ec>
					}
					Report(0, "%s", stx);
 8002884:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002886:	4914      	ldr	r1, [pc, #80]	; (80028d8 <defThread+0x8c8>)
 8002888:	2000      	movs	r0, #0
 800288a:	f7ff f889 	bl	80019a0 <Report>
 800288e:	e031      	b.n	80028f4 <defThread+0x8e4>
 8002890:	20000b54 	.word	0x20000b54
 8002894:	0800cb20 	.word	0x0800cb20
 8002898:	20000054 	.word	0x20000054
 800289c:	2000032c 	.word	0x2000032c
 80028a0:	20000004 	.word	0x20000004
 80028a4:	0800cb3c 	.word	0x0800cb3c
 80028a8:	0800cb4c 	.word	0x0800cb4c
 80028ac:	20000b4c 	.word	0x20000b4c
 80028b0:	20000b48 	.word	0x20000b48
 80028b4:	20000b64 	.word	0x20000b64
 80028b8:	20000060 	.word	0x20000060
 80028bc:	20000b50 	.word	0x20000b50
 80028c0:	0800cb58 	.word	0x0800cb58
 80028c4:	20000b80 	.word	0x20000b80
 80028c8:	0800cb98 	.word	0x0800cb98
 80028cc:	0800cba0 	.word	0x0800cba0
 80028d0:	20000b7c 	.word	0x20000b7c
 80028d4:	0800c980 	.word	0x0800c980
 80028d8:	0800c940 	.word	0x0800c940
				} else {
					Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, readed, eol);
 80028dc:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80028e0:	4a49      	ldr	r2, [pc, #292]	; (8002a08 <defThread+0x9f8>)
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	9201      	str	r2, [sp, #4]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028ec:	4947      	ldr	r1, [pc, #284]	; (8002a0c <defThread+0x9fc>)
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7ff f856 	bl	80019a0 <Report>
				}
			}
		}

		// Erase all blocks (chipConf.BlockNbr)
		if (next_block_erase) {
 80028f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d04a      	beq.n	8002992 <defThread+0x982>
			clr.Block = iBlk;
 80028fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002900:	b29b      	uxth	r3, r3
 8002902:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			iBlk++;
 8002906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800290a:	3301      	adds	r3, #1
 800290c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			if (HAL_NAND_Erase_Block(nandPort, &clr) != HAL_OK) {
 8002910:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <defThread+0xa00>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f002 fa4d 	bl	8004dba <HAL_NAND_Erase_Block>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <defThread+0x92c>
				devError |= devNAND;
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <defThread+0xa04>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	f043 0320 	orr.w	r3, r3, #32
 800292e:	b2da      	uxtb	r2, r3
 8002930:	4b38      	ldr	r3, [pc, #224]	; (8002a14 <defThread+0xa04>)
 8002932:	701a      	strb	r2, [r3, #0]
				next_block_erase = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800293a:	e012      	b.n	8002962 <defThread+0x952>
			} else {
				if (!(iBlk % 16)) Report(0, ".");
 800293c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <defThread+0x940>
 8002948:	4933      	ldr	r1, [pc, #204]	; (8002a18 <defThread+0xa08>)
 800294a:	2000      	movs	r0, #0
 800294c:	f7ff f828 	bl	80019a0 <Report>
				if (iBlk >= chipConf.BlockNbr) next_block_erase = 0;
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <defThread+0xa0c>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <defThread+0x952>
 800295c:	2300      	movs	r3, #0
 800295e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
			if (!next_block_erase) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 8002962:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002966:	2b00      	cmp	r3, #0
 8002968:	d113      	bne.n	8002992 <defThread+0x982>
 800296a:	f000 ffd5 	bl	8003918 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	4a2a      	ldr	r2, [pc, #168]	; (8002a20 <defThread+0xa10>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	099a      	lsrs	r2, r3, #6
 800297e:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <defThread+0x9f8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800298a:	4926      	ldr	r1, [pc, #152]	; (8002a24 <defThread+0xa14>)
 800298c:	2000      	movs	r0, #0
 800298e:	f7ff f807 	bl	80019a0 <Report>
		}
		//
		osDelay(5);
 8002992:	2005      	movs	r0, #5
 8002994:	f005 ffd8 	bl	8008948 <osDelay>
	while (loop) {
 8002998:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f acbd 	bne.w	800231c <defThread+0x30c>
	}

	ipsOn(0);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f000 f97e 	bl	8002ca4 <ipsOn>

	if (wrBuf) free(wrBuf);
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <defThread+0xa18>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d004      	beq.n	80029ba <defThread+0x9aa>
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <defThread+0xa18>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f009 f8c1 	bl	800bb3c <free>
	if (rdBuf) free(rdBuf);
 80029ba:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <defThread+0xa1c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <defThread+0x9bc>
 80029c2:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <defThread+0xa1c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f009 f8b8 	bl	800bb3c <free>
	if (stx) free(stx);
 80029cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <defThread+0x9c8>
 80029d2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80029d4:	f009 f8b2 	bl	800bb3c <free>


	Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <defThread+0xa20>)
 80029da:	681c      	ldr	r4, [r3, #0]
 80029dc:	f008 fe9a 	bl	800b714 <xPortGetFreeHeapSize>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <defThread+0x9f8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	9302      	str	r3, [sp, #8]
 80029e8:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	9200      	str	r2, [sp, #0]
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <defThread+0xa24>)
 80029f2:	4622      	mov	r2, r4
 80029f4:	4910      	ldr	r1, [pc, #64]	; (8002a38 <defThread+0xa28>)
 80029f6:	2001      	movs	r0, #1
 80029f8:	f7fe ffd2 	bl	80019a0 <Report>
	osDelay(250);
 80029fc:	20fa      	movs	r0, #250	; 0xfa
 80029fe:	f005 ffa3 	bl	8008948 <osDelay>

	NVIC_SystemReset();
 8002a02:	f7fe f915 	bl	8000c30 <__NVIC_SystemReset>
 8002a06:	bf00      	nop
 8002a08:	20000004 	.word	0x20000004
 8002a0c:	0800cba8 	.word	0x0800cba8
 8002a10:	20000054 	.word	0x20000054
 8002a14:	2000032c 	.word	0x2000032c
 8002a18:	0800cbd0 	.word	0x0800cbd0
 8002a1c:	20000b64 	.word	0x20000b64
 8002a20:	10624dd3 	.word	0x10624dd3
 8002a24:	0800cbd4 	.word	0x0800cbd4
 8002a28:	20000b80 	.word	0x20000b80
 8002a2c:	20000b7c 	.word	0x20000b7c
 8002a30:	20000000 	.word	0x20000000
 8002a34:	0800ed5c 	.word	0x0800ed5c
 8002a38:	0800cbec 	.word	0x0800cbec

08002a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b5b0      	push	{r4, r5, r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d102      	bne.n	8002a54 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8002a4e:	f000 ff4f 	bl	80038f0 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8002a52:	e016      	b.n	8002a82 <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5c:	d111      	bne.n	8002a82 <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8002a5e:	f7fe fe5f 	bl	8001720 <get_msCounter>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	f002 0403 	and.w	r4, r2, #3
 8002a6a:	2500      	movs	r5, #0
 8002a6c:	1ee3      	subs	r3, r4, #3
 8002a6e:	432b      	orrs	r3, r5
 8002a70:	d105      	bne.n	8002a7e <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8002a72:	f7fe fe47 	bl	8001704 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	4805      	ldr	r0, [pc, #20]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002a7a:	f001 fe16 	bl	80046aa <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8002a7e:	f7fe fe5d 	bl	800173c <inc_msCounter>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bdb0      	pop	{r4, r5, r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40020800 	.word	0x40020800

08002a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	480c      	ldr	r0, [pc, #48]	; (8002ae4 <ST7789_WriteCommand+0x40>)
 8002ab4:	f001 fde0 	bl	8004678 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <ST7789_WriteCommand+0x44>)
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	2396      	movs	r3, #150	; 0x96
 8002abe:	1df9      	adds	r1, r7, #7
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f003 fbc8 	bl	8006256 <HAL_SPI_Transmit>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <ST7789_WriteCommand+0x36>
 8002acc:	4b07      	ldr	r3, [pc, #28]	; (8002aec <ST7789_WriteCommand+0x48>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	f043 0310 	orr.w	r3, r3, #16
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <ST7789_WriteCommand+0x48>)
 8002ad8:	701a      	strb	r2, [r3, #0]
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	20000048 	.word	0x20000048
 8002aec:	2000032c 	.word	0x2000032c

08002af0 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8002afa:	2200      	movs	r2, #0
 8002afc:	2104      	movs	r1, #4
 8002afe:	480e      	ldr	r0, [pc, #56]	; (8002b38 <ST7789_WriteCommands+0x48>)
 8002b00:	f001 fdba 	bl	8004678 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <ST7789_WriteCommands+0x4c>)
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	2196      	movs	r1, #150	; 0x96
 8002b0e:	460b      	mov	r3, r1
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	f003 fb9d 	bl	8006256 <HAL_SPI_Transmit>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <ST7789_WriteCommands+0x40>
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <ST7789_WriteCommands+0x50>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	f043 0310 	orr.w	r3, r3, #16
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <ST7789_WriteCommands+0x50>)
 8002b2e:	701a      	strb	r2, [r3, #0]
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	20000048 	.word	0x20000048
 8002b40:	2000032c 	.word	0x2000032c

08002b44 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8002b52:	2201      	movs	r2, #1
 8002b54:	2104      	movs	r1, #4
 8002b56:	481f      	ldr	r0, [pc, #124]	; (8002bd4 <ST7789_WriteData+0x90>)
 8002b58:	f001 fd8e 	bl	8004678 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8002b5c:	e028      	b.n	8002bb0 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b64:	4293      	cmp	r3, r2
 8002b66:	bf28      	it	cs
 8002b68:	4613      	movcs	r3, r2
 8002b6a:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <ST7789_WriteData+0x94>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8002b72:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <ST7789_WriteData+0x98>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	89ba      	ldrh	r2, [r7, #12]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 fca8 	bl	80064d0 <HAL_SPI_Transmit_DMA>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8002b8a:	e002      	b.n	8002b92 <ST7789_WriteData+0x4e>
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f000 fecf 	bl	8003930 <HAL_Delay>
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <ST7789_WriteData+0x94>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	f083 0301 	eor.w	r3, r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f5      	bne.n	8002b8c <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8002ba0:	89bb      	ldrh	r3, [r7, #12]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8002ba8:	89bb      	ldrh	r3, [r7, #12]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1d3      	bne.n	8002b5e <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d006      	beq.n	8002bca <ST7789_WriteData+0x86>
 8002bbc:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <ST7789_WriteData+0x9c>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	f043 0310 	orr.w	r3, r3, #16
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <ST7789_WriteData+0x9c>)
 8002bc8:	701a      	strb	r2, [r3, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40020000 	.word	0x40020000
 8002bd8:	20000041 	.word	0x20000041
 8002bdc:	20000048 	.word	0x20000048
 8002be0:	2000032c 	.word	0x2000032c

08002be4 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	2104      	movs	r1, #4
 8002bf6:	4814      	ldr	r0, [pc, #80]	; (8002c48 <ST7789_WriteDataLine+0x64>)
 8002bf8:	f001 fd3e 	bl	8004678 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <ST7789_WriteDataLine+0x68>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <ST7789_WriteDataLine+0x6c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	b292      	uxth	r2, r2
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 fc5f 	bl	80064d0 <HAL_SPI_Transmit_DMA>
 8002c12:	4603      	mov	r3, r0
 8002c14:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8002c16:	e002      	b.n	8002c1e <ST7789_WriteDataLine+0x3a>
 8002c18:	2001      	movs	r0, #1
 8002c1a:	f000 fe89 	bl	8003930 <HAL_Delay>
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <ST7789_WriteDataLine+0x68>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	f083 0301 	eor.w	r3, r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f5      	bne.n	8002c18 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <ST7789_WriteDataLine+0x5c>
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <ST7789_WriteDataLine+0x70>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	f043 0310 	orr.w	r3, r3, #16
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <ST7789_WriteDataLine+0x70>)
 8002c3e:	701a      	strb	r2, [r3, #0]
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40020000 	.word	0x40020000
 8002c4c:	20000041 	.word	0x20000041
 8002c50:	20000048 	.word	0x20000048
 8002c54:	2000032c 	.word	0x2000032c

08002c58 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8002c62:	2201      	movs	r2, #1
 8002c64:	2104      	movs	r1, #4
 8002c66:	480c      	ldr	r0, [pc, #48]	; (8002c98 <ST7789_WriteSmallData+0x40>)
 8002c68:	f001 fd06 	bl	8004678 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <ST7789_WriteSmallData+0x44>)
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	2396      	movs	r3, #150	; 0x96
 8002c72:	1df9      	adds	r1, r7, #7
 8002c74:	2201      	movs	r2, #1
 8002c76:	f003 faee 	bl	8006256 <HAL_SPI_Transmit>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <ST7789_WriteSmallData+0x36>
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <ST7789_WriteSmallData+0x48>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	f043 0310 	orr.w	r3, r3, #16
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <ST7789_WriteSmallData+0x48>)
 8002c8c:	701a      	strb	r2, [r3, #0]
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40020000 	.word	0x40020000
 8002c9c:	20000048 	.word	0x20000048
 8002ca0:	2000032c 	.word	0x2000032c

08002ca4 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <ipsOn+0x18>
 8002cb4:	2029      	movs	r0, #41	; 0x29
 8002cb6:	f7ff fef5 	bl	8002aa4 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8002cba:	e002      	b.n	8002cc2 <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8002cbc:	2028      	movs	r0, #40	; 0x28
 8002cbe:	f7ff fef1 	bl	8002aa4 <ST7789_WriteCommand>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8002cd6:	2036      	movs	r0, #54	; 0x36
 8002cd8:	f7ff fee4 	bl	8002aa4 <ST7789_WriteCommand>
	switch (m) {
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d81a      	bhi.n	8002d18 <ST7789_SetRotation+0x4c>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <ST7789_SetRotation+0x1c>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002d01 	.word	0x08002d01
 8002cf0:	08002d09 	.word	0x08002d09
 8002cf4:	08002d11 	.word	0x08002d11
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002cf8:	20c0      	movs	r0, #192	; 0xc0
 8002cfa:	f7ff ffad 	bl	8002c58 <ST7789_WriteSmallData>
		break;
 8002cfe:	e00c      	b.n	8002d1a <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002d00:	20a0      	movs	r0, #160	; 0xa0
 8002d02:	f7ff ffa9 	bl	8002c58 <ST7789_WriteSmallData>
		break;
 8002d06:	e008      	b.n	8002d1a <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7ff ffa5 	bl	8002c58 <ST7789_WriteSmallData>
		break;
 8002d0e:	e004      	b.n	8002d1a <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8002d10:	2060      	movs	r0, #96	; 0x60
 8002d12:	f7ff ffa1 	bl	8002c58 <ST7789_WriteSmallData>
		break;
 8002d16:	e000      	b.n	8002d1a <ST7789_SetRotation+0x4e>
	default:
		break;
 8002d18:	bf00      	nop
	}
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop

08002d24 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	461a      	mov	r2, r3
 8002d32:	4623      	mov	r3, r4
 8002d34:	80fb      	strh	r3, [r7, #6]
 8002d36:	4603      	mov	r3, r0
 8002d38:	80bb      	strh	r3, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	807b      	strh	r3, [r7, #2]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	82fb      	strh	r3, [r7, #22]
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8002d4a:	88bb      	ldrh	r3, [r7, #4]
 8002d4c:	827b      	strh	r3, [r7, #18]
 8002d4e:	883b      	ldrh	r3, [r7, #0]
 8002d50:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8002d52:	202a      	movs	r0, #42	; 0x2a
 8002d54:	f7ff fea6 	bl	8002aa4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8002d58:	8afb      	ldrh	r3, [r7, #22]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	733b      	strb	r3, [r7, #12]
 8002d62:	8afb      	ldrh	r3, [r7, #22]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	737b      	strb	r3, [r7, #13]
 8002d68:	8abb      	ldrh	r3, [r7, #20]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	73bb      	strb	r3, [r7, #14]
 8002d72:	8abb      	ldrh	r3, [r7, #20]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fee0 	bl	8002b44 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8002d84:	202b      	movs	r0, #43	; 0x2b
 8002d86:	f7ff fe8d 	bl	8002aa4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8002d8a:	8a7b      	ldrh	r3, [r7, #18]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	723b      	strb	r3, [r7, #8]
 8002d94:	8a7b      	ldrh	r3, [r7, #18]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	727b      	strb	r3, [r7, #9]
 8002d9a:	8a3b      	ldrh	r3, [r7, #16]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	72bb      	strb	r3, [r7, #10]
 8002da4:	8a3b      	ldrh	r3, [r7, #16]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8002daa:	f107 0308 	add.w	r3, r7, #8
 8002dae:	2104      	movs	r1, #4
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fec7 	bl	8002b44 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8002db6:	202c      	movs	r0, #44	; 0x2c
 8002db8:	f7ff fe74 	bl	8002aa4 <ST7789_WriteCommand>
}
 8002dbc:	bf00      	nop
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd90      	pop	{r4, r7, pc}

08002dc4 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8002dc8:	2014      	movs	r0, #20
 8002dca:	f000 fdb1 	bl	8003930 <HAL_Delay>
    ST7789_RST_Clr();
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	4808      	ldr	r0, [pc, #32]	; (8002df4 <ST7789_Reset+0x30>)
 8002dd4:	f001 fc50 	bl	8004678 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8002dd8:	200a      	movs	r0, #10
 8002dda:	f000 fda9 	bl	8003930 <HAL_Delay>
    ST7789_RST_Set();
 8002dde:	2201      	movs	r2, #1
 8002de0:	2102      	movs	r1, #2
 8002de2:	4804      	ldr	r0, [pc, #16]	; (8002df4 <ST7789_Reset+0x30>)
 8002de4:	f001 fc48 	bl	8004678 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8002de8:	2014      	movs	r0, #20
 8002dea:	f000 fda1 	bl	8003930 <HAL_Delay>
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40020000 	.word	0x40020000

08002df8 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b08f      	sub	sp, #60	; 0x3c
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8002e02:	203a      	movs	r0, #58	; 0x3a
 8002e04:	f7ff fe4e 	bl	8002aa4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8002e08:	2055      	movs	r0, #85	; 0x55
 8002e0a:	f7ff ff25 	bl	8002c58 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8002e0e:	20b2      	movs	r0, #178	; 0xb2
 8002e10:	f7ff fe48 	bl	8002aa4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8002e14:	4a3a      	ldr	r2, [pc, #232]	; (8002f00 <ST7789_Init+0x108>)
 8002e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e1e:	6018      	str	r0, [r3, #0]
 8002e20:	3304      	adds	r3, #4
 8002e22:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8002e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e28:	2105      	movs	r1, #5
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fe8a 	bl	8002b44 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8002e30:	2003      	movs	r0, #3
 8002e32:	f7ff ff4b 	bl	8002ccc <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8002e36:	20b7      	movs	r0, #183	; 0xb7
 8002e38:	f7ff fe34 	bl	8002aa4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8002e3c:	2035      	movs	r0, #53	; 0x35
 8002e3e:	f7ff ff0b 	bl	8002c58 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8002e42:	20bb      	movs	r0, #187	; 0xbb
 8002e44:	f7ff fe2e 	bl	8002aa4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8002e48:	2019      	movs	r0, #25
 8002e4a:	f7ff ff05 	bl	8002c58 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8002e4e:	20c0      	movs	r0, #192	; 0xc0
 8002e50:	f7ff fe28 	bl	8002aa4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8002e54:	202c      	movs	r0, #44	; 0x2c
 8002e56:	f7ff feff 	bl	8002c58 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8002e5a:	20c2      	movs	r0, #194	; 0xc2
 8002e5c:	f7ff fe22 	bl	8002aa4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7ff fef9 	bl	8002c58 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8002e66:	20ff      	movs	r0, #255	; 0xff
 8002e68:	f7ff fef6 	bl	8002c58 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8002e6c:	20c3      	movs	r0, #195	; 0xc3
 8002e6e:	f7ff fe19 	bl	8002aa4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8002e72:	2012      	movs	r0, #18
 8002e74:	f7ff fef0 	bl	8002c58 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8002e78:	20c4      	movs	r0, #196	; 0xc4
 8002e7a:	f7ff fe13 	bl	8002aa4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8002e7e:	2020      	movs	r0, #32
 8002e80:	f7ff feea 	bl	8002c58 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8002e84:	20c6      	movs	r0, #198	; 0xc6
 8002e86:	f7ff fe0d 	bl	8002aa4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8002e8a:	200f      	movs	r0, #15
 8002e8c:	f7ff fee4 	bl	8002c58 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8002e90:	20d0      	movs	r0, #208	; 0xd0
 8002e92:	f7ff fe07 	bl	8002aa4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8002e96:	20a4      	movs	r0, #164	; 0xa4
 8002e98:	f7ff fede 	bl	8002c58 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8002e9c:	20a1      	movs	r0, #161	; 0xa1
 8002e9e:	f7ff fedb 	bl	8002c58 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8002ea2:	20e0      	movs	r0, #224	; 0xe0
 8002ea4:	f7ff fdfe 	bl	8002aa4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <ST7789_Init+0x10c>)
 8002eaa:	f107 041c 	add.w	r4, r7, #28
 8002eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eb0:	c407      	stmia	r4!, {r0, r1, r2}
 8002eb2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002eb4:	f107 031c 	add.w	r3, r7, #28
 8002eb8:	210e      	movs	r1, #14
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fe42 	bl	8002b44 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8002ec0:	20e1      	movs	r0, #225	; 0xe1
 8002ec2:	f7ff fdef 	bl	8002aa4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <ST7789_Init+0x110>)
 8002ec8:	f107 040c 	add.w	r4, r7, #12
 8002ecc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ece:	c407      	stmia	r4!, {r0, r1, r2}
 8002ed0:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002ed2:	f107 030c 	add.w	r3, r7, #12
 8002ed6:	210e      	movs	r1, #14
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fe33 	bl	8002b44 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <ST7789_Init+0x114>)
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 8002ee2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ee6:	2104      	movs	r1, #4
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fe01 	bl	8002af0 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f80d 	bl	8002f10 <ST7789_Fill_Color>
}
 8002ef6:	bf00      	nop
 8002ef8:	373c      	adds	r7, #60	; 0x3c
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd90      	pop	{r4, r7, pc}
 8002efe:	bf00      	nop
 8002f00:	0800cc18 	.word	0x0800cc18
 8002f04:	0800cc20 	.word	0x0800cc20
 8002f08:	0800cc30 	.word	0x0800cc30
 8002f0c:	28131121 	.word	0x28131121

08002f10 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b0fc      	sub	sp, #496	; 0x1f0
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4602      	mov	r2, r0
 8002f18:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002f1c:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002f20:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8002f22:	23ef      	movs	r3, #239	; 0xef
 8002f24:	22ef      	movs	r2, #239	; 0xef
 8002f26:	2100      	movs	r1, #0
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f7ff fefb 	bl	8002d24 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002f3a:	e024      	b.n	8002f86 <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8002f3c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002f40:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	b21a      	sxth	r2, r3
 8002f4c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002f50:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	b21b      	sxth	r3, r3
 8002f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f5e:	b21b      	sxth	r3, r3
 8002f60:	4313      	orrs	r3, r2
 8002f62:	b219      	sxth	r1, r3
 8002f64:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8002f68:	f107 020c 	add.w	r2, r7, #12
 8002f6c:	4413      	add	r3, r2
 8002f6e:	b28a      	uxth	r2, r1
 8002f70:	801a      	strh	r2, [r3, #0]
		i += 2;
 8002f72:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8002f76:	3302      	adds	r3, #2
 8002f78:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8002f7c:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002f80:	3301      	adds	r3, #1
 8002f82:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002f86:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002f8a:	2bef      	cmp	r3, #239	; 0xef
 8002f8c:	d9d6      	bls.n	8002f3c <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002f94:	e00b      	b.n	8002fae <ST7789_Fill_Color+0x9e>
 8002f96:	f107 030c 	add.w	r3, r7, #12
 8002f9a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fe20 	bl	8002be4 <ST7789_WriteDataLine>
 8002fa4:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002fae:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002fb2:	2bef      	cmp	r3, #239	; 0xef
 8002fb4:	d9ef      	bls.n	8002f96 <ST7789_Fill_Color+0x86>

//#endif
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8002fc2:	b590      	push	{r4, r7, lr}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4604      	mov	r4, r0
 8002fca:	4608      	mov	r0, r1
 8002fcc:	4611      	mov	r1, r2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4623      	mov	r3, r4
 8002fd2:	80fb      	strh	r3, [r7, #6]
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	80bb      	strh	r3, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	2bef      	cmp	r3, #239	; 0xef
 8002fe4:	d82b      	bhi.n	800303e <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8002fe6:	883b      	ldrh	r3, [r7, #0]
 8002fe8:	2bef      	cmp	r3, #239	; 0xef
 8002fea:	d828      	bhi.n	800303e <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 8002fec:	8c3b      	ldrh	r3, [r7, #32]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	723b      	strb	r3, [r7, #8]
 8002ff6:	8c3b      	ldrh	r3, [r7, #32]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8002ffc:	883b      	ldrh	r3, [r7, #0]
 8002ffe:	887a      	ldrh	r2, [r7, #2]
 8003000:	88b9      	ldrh	r1, [r7, #4]
 8003002:	88f8      	ldrh	r0, [r7, #6]
 8003004:	f7ff fe8e 	bl	8002d24 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8003008:	88bb      	ldrh	r3, [r7, #4]
 800300a:	81fb      	strh	r3, [r7, #14]
 800300c:	e012      	b.n	8003034 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	81bb      	strh	r3, [r7, #12]
 8003012:	e008      	b.n	8003026 <ST7789_Fill+0x64>
 8003014:	f107 0308 	add.w	r3, r7, #8
 8003018:	2102      	movs	r1, #2
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fd92 	bl	8002b44 <ST7789_WriteData>
 8003020:	89bb      	ldrh	r3, [r7, #12]
 8003022:	3301      	adds	r3, #1
 8003024:	81bb      	strh	r3, [r7, #12]
 8003026:	89ba      	ldrh	r2, [r7, #12]
 8003028:	887b      	ldrh	r3, [r7, #2]
 800302a:	429a      	cmp	r2, r3
 800302c:	d9f2      	bls.n	8003014 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 800302e:	89fb      	ldrh	r3, [r7, #14]
 8003030:	3301      	adds	r3, #1
 8003032:	81fb      	strh	r3, [r7, #14]
 8003034:	89fa      	ldrh	r2, [r7, #14]
 8003036:	883b      	ldrh	r3, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d9e8      	bls.n	800300e <ST7789_Fill+0x4c>
 800303c:	e000      	b.n	8003040 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 800303e:	bf00      	nop
	}
}
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bd90      	pop	{r4, r7, pc}

08003046 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003046:	b082      	sub	sp, #8
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	637b      	str	r3, [r7, #52]	; 0x34
 8003050:	4603      	mov	r3, r0
 8003052:	80fb      	strh	r3, [r7, #6]
 8003054:	460b      	mov	r3, r1
 8003056:	80bb      	strh	r3, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 800305c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003060:	b29a      	uxth	r2, r3
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	4413      	add	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29c      	uxth	r4, r3
 800306c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003070:	b29a      	uxth	r2, r3
 8003072:	88bb      	ldrh	r3, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29b      	uxth	r3, r3
 800307c:	88b9      	ldrh	r1, [r7, #4]
 800307e:	88f8      	ldrh	r0, [r7, #6]
 8003080:	4622      	mov	r2, r4
 8003082:	f7ff fe4f 	bl	8002d24 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8003086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	b29b      	uxth	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	733b      	strb	r3, [r7, #12]
 8003090:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003092:	b2db      	uxtb	r3, r3
 8003094:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8003096:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	b29b      	uxth	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	723b      	strb	r3, [r7, #8]
 80030a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	e02f      	b.n	8003114 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 80030b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	3b20      	subs	r3, #32
 80030ba:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4619      	mov	r1, r3
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	440b      	add	r3, r1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	e015      	b.n	8003102 <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <ST7789_WriteChar+0xa8>
				uk = cdata;
 80030e6:	f107 030c 	add.w	r3, r7, #12
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	e002      	b.n	80030f4 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 80030f4:	2102      	movs	r1, #2
 80030f6:	6978      	ldr	r0, [r7, #20]
 80030f8:	f7ff fd24 	bl	8002b44 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	3301      	adds	r3, #1
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003106:	461a      	mov	r2, r3
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4293      	cmp	r3, r2
 800310c:	d3e3      	bcc.n	80030d6 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003118:	461a      	mov	r2, r3
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	4293      	cmp	r3, r2
 800311e:	d3c9      	bcc.n	80030b4 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800312c:	b002      	add	sp, #8
 800312e:	4770      	bx	lr

08003130 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003130:	b082      	sub	sp, #8
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af04      	add	r7, sp, #16
 8003138:	603a      	str	r2, [r7, #0]
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	4603      	mov	r3, r0
 800313e:	80fb      	strh	r3, [r7, #6]
 8003140:	460b      	mov	r3, r1
 8003142:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d03f      	beq.n	80031ca <ST7789_WriteString+0x9a>

	while (*str) {
 800314a:	e039      	b.n	80031c0 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	7d3a      	ldrb	r2, [r7, #20]
 8003150:	4413      	add	r3, r2
 8003152:	2bef      	cmp	r3, #239	; 0xef
 8003154:	dd13      	ble.n	800317e <ST7789_WriteString+0x4e>
			x = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800315a:	7d7b      	ldrb	r3, [r7, #21]
 800315c:	b29a      	uxth	r2, r3
 800315e:	88bb      	ldrh	r3, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8003164:	88bb      	ldrh	r3, [r7, #4]
 8003166:	7d7a      	ldrb	r2, [r7, #21]
 8003168:	4413      	add	r3, r2
 800316a:	2bef      	cmp	r3, #239	; 0xef
 800316c:	dc2f      	bgt.n	80031ce <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b20      	cmp	r3, #32
 8003174:	d103      	bne.n	800317e <ST7789_WriteString+0x4e>
				str++;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	603b      	str	r3, [r7, #0]
				continue;
 800317c:	e020      	b.n	80031c0 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b0a      	cmp	r3, #10
 8003184:	d012      	beq.n	80031ac <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	88b9      	ldrh	r1, [r7, #4]
 800318c:	88f8      	ldrh	r0, [r7, #6]
 800318e:	8c3b      	ldrh	r3, [r7, #32]
 8003190:	9302      	str	r3, [sp, #8]
 8003192:	8bbb      	ldrh	r3, [r7, #28]
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f7ff ff53 	bl	8003046 <ST7789_WriteChar>
			x += font.width;
 80031a0:	7d3b      	ldrb	r3, [r7, #20]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	4413      	add	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
 80031aa:	e006      	b.n	80031ba <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80031b0:	7d7b      	ldrb	r3, [r7, #21]
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	88bb      	ldrh	r3, [r7, #4]
 80031b6:	4413      	add	r3, r2
 80031b8:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	603b      	str	r3, [r7, #0]
	while (*str) {
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1c1      	bne.n	800314c <ST7789_WriteString+0x1c>
 80031c8:	e002      	b.n	80031d0 <ST7789_WriteString+0xa0>
	if (!str) return;
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 80031ce:	bf00      	nop
	}
}
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031d8:	b002      	add	sp, #8
 80031da:	4770      	bx	lr

080031dc <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b0a4      	sub	sp, #144	; 0x90
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	f107 0310 	add.w	r3, r7, #16
 80031f0:	227c      	movs	r2, #124	; 0x7c
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f008 fcb7 	bl	800bb68 <memset>

	memset(st, 0x20, 127);
 80031fa:	f107 030c 	add.w	r3, r7, #12
 80031fe:	227f      	movs	r2, #127	; 0x7f
 8003200:	2120      	movs	r1, #32
 8003202:	4618      	mov	r0, r3
 8003204:	f008 fcb0 	bl	800bb68 <memset>
	int8_t k = strlen(str);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7fc ffe1 	bl	80001d0 <strlen>
 800320e:	4603      	mov	r3, r0
 8003210:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 8003214:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8003218:	887b      	ldrh	r3, [r7, #2]
 800321a:	429a      	cmp	r2, r3
 800321c:	da25      	bge.n	800326a <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	0fda      	lsrs	r2, r3, #31
 8003228:	4413      	add	r3, r2
 800322a:	105b      	asrs	r3, r3, #1
 800322c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8003230:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8003234:	f107 020c 	add.w	r2, r7, #12
 8003238:	4413      	add	r3, r2
 800323a:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4618      	mov	r0, r3
 8003242:	f008 fc83 	bl	800bb4c <memcpy>
		st[k + n*2 + 1] = '\0';
 8003246:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 800324a:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	3301      	adds	r3, #1
 8003254:	3390      	adds	r3, #144	; 0x90
 8003256:	443b      	add	r3, r7
 8003258:	2200      	movs	r2, #0
 800325a:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 800325e:	f107 030c 	add.w	r3, r7, #12
 8003262:	4619      	mov	r1, r3
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f008 fe33 	bl	800bed0 <strcpy>
	}

	return str;
 800326a:	687b      	ldr	r3, [r7, #4]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3790      	adds	r7, #144	; 0x90
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_MspInit+0x54>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <HAL_MspInit+0x54>)
 8003284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003288:	6453      	str	r3, [r2, #68]	; 0x44
 800328a:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <HAL_MspInit+0x54>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_MspInit+0x54>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <HAL_MspInit+0x54>)
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a4:	6413      	str	r3, [r2, #64]	; 0x40
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <HAL_MspInit+0x54>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032b2:	2200      	movs	r2, #0
 80032b4:	210f      	movs	r1, #15
 80032b6:	f06f 0001 	mvn.w	r0, #1
 80032ba:	f000 fc15 	bl	8003ae8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800

080032cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032d4:	f107 0308 	add.w	r3, r7, #8
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <HAL_RTC_MspInit+0x4c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d110      	bne.n	800330e <HAL_RTC_MspInit+0x42>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032ec:	2302      	movs	r3, #2
 80032ee:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_RTC_MspInit+0x50>)
 80032f2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032f4:	f107 0308 	add.w	r3, r7, #8
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 fb0f 	bl	800591c <HAL_RCCEx_PeriphCLKConfig>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8003304:	f7ff fbc6 	bl	8002a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_RTC_MspInit+0x54>)
 800330a:	2201      	movs	r2, #1
 800330c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40002800 	.word	0x40002800
 800331c:	00190300 	.word	0x00190300
 8003320:	42470e3c 	.word	0x42470e3c

08003324 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	; 0x28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a39      	ldr	r2, [pc, #228]	; (8003428 <HAL_SPI_MspInit+0x104>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d16b      	bne.n	800341e <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	4b38      	ldr	r3, [pc, #224]	; (800342c <HAL_SPI_MspInit+0x108>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	4a37      	ldr	r2, [pc, #220]	; (800342c <HAL_SPI_MspInit+0x108>)
 8003350:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003354:	6453      	str	r3, [r2, #68]	; 0x44
 8003356:	4b35      	ldr	r3, [pc, #212]	; (800342c <HAL_SPI_MspInit+0x108>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_SPI_MspInit+0x108>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a30      	ldr	r2, [pc, #192]	; (800342c <HAL_SPI_MspInit+0x108>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b2e      	ldr	r3, [pc, #184]	; (800342c <HAL_SPI_MspInit+0x108>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 800337e:	23a0      	movs	r3, #160	; 0xa0
 8003380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338a:	2303      	movs	r3, #3
 800338c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800338e:	2305      	movs	r3, #5
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003392:	f107 0314 	add.w	r3, r7, #20
 8003396:	4619      	mov	r1, r3
 8003398:	4825      	ldr	r0, [pc, #148]	; (8003430 <HAL_SPI_MspInit+0x10c>)
 800339a:	f000 ffd1 	bl	8004340 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800339e:	4b25      	ldr	r3, [pc, #148]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033a0:	4a25      	ldr	r2, [pc, #148]	; (8003438 <HAL_SPI_MspInit+0x114>)
 80033a2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80033a4:	4b23      	ldr	r3, [pc, #140]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033a6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80033aa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033ac:	4b21      	ldr	r3, [pc, #132]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033ae:	2240      	movs	r2, #64	; 0x40
 80033b0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033b8:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033be:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033c0:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80033d2:	4b18      	ldr	r3, [pc, #96]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80033da:	4b16      	ldr	r3, [pc, #88]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033dc:	2204      	movs	r2, #4
 80033de:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80033e0:	4b14      	ldr	r3, [pc, #80]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033e2:	2203      	movs	r2, #3
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80033f2:	4810      	ldr	r0, [pc, #64]	; (8003434 <HAL_SPI_MspInit+0x110>)
 80033f4:	f000 fba2 	bl	8003b3c <HAL_DMA_Init>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80033fe:	f7ff fb49 	bl	8002a94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <HAL_SPI_MspInit+0x110>)
 8003406:	649a      	str	r2, [r3, #72]	; 0x48
 8003408:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HAL_SPI_MspInit+0x110>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	2102      	movs	r1, #2
 8003412:	2023      	movs	r0, #35	; 0x23
 8003414:	f000 fb68 	bl	8003ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003418:	2023      	movs	r0, #35	; 0x23
 800341a:	f000 fb81 	bl	8003b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800341e:	bf00      	nop
 8003420:	3728      	adds	r7, #40	; 0x28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40013000 	.word	0x40013000
 800342c:	40023800 	.word	0x40023800
 8003430:	40020000 	.word	0x40020000
 8003434:	20000194 	.word	0x20000194
 8003438:	40026458 	.word	0x40026458

0800343c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344c:	d115      	bne.n	800347a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <HAL_TIM_Base_MspInit+0x48>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <HAL_TIM_Base_MspInit+0x48>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6413      	str	r3, [r2, #64]	; 0x40
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_TIM_Base_MspInit+0x48>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800346a:	2200      	movs	r2, #0
 800346c:	2101      	movs	r1, #1
 800346e:	201c      	movs	r0, #28
 8003470:	f000 fb3a 	bl	8003ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003474:	201c      	movs	r0, #28
 8003476:	f000 fb53 	bl	8003b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800

08003488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	; 0x28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003490:	f107 0314 	add.w	r3, r7, #20
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a35      	ldr	r2, [pc, #212]	; (800357c <HAL_UART_MspInit+0xf4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d163      	bne.n	8003572 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	4b34      	ldr	r3, [pc, #208]	; (8003580 <HAL_UART_MspInit+0xf8>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a33      	ldr	r2, [pc, #204]	; (8003580 <HAL_UART_MspInit+0xf8>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ba:	4b31      	ldr	r3, [pc, #196]	; (8003580 <HAL_UART_MspInit+0xf8>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <HAL_UART_MspInit+0xf8>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a2c      	ldr	r2, [pc, #176]	; (8003580 <HAL_UART_MspInit+0xf8>)
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_UART_MspInit+0xf8>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 80034e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f0:	2303      	movs	r3, #3
 80034f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034f4:	2307      	movs	r3, #7
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	4619      	mov	r1, r3
 80034fe:	4821      	ldr	r0, [pc, #132]	; (8003584 <HAL_UART_MspInit+0xfc>)
 8003500:	f000 ff1e 	bl	8004340 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003504:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_UART_MspInit+0x100>)
 8003506:	4a21      	ldr	r2, [pc, #132]	; (800358c <HAL_UART_MspInit+0x104>)
 8003508:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800350a:	4b1f      	ldr	r3, [pc, #124]	; (8003588 <HAL_UART_MspInit+0x100>)
 800350c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003510:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_UART_MspInit+0x100>)
 8003514:	2240      	movs	r2, #64	; 0x40
 8003516:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_UART_MspInit+0x100>)
 800351a:	2200      	movs	r2, #0
 800351c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <HAL_UART_MspInit+0x100>)
 8003520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003524:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003526:	4b18      	ldr	r3, [pc, #96]	; (8003588 <HAL_UART_MspInit+0x100>)
 8003528:	2200      	movs	r2, #0
 800352a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800352c:	4b16      	ldr	r3, [pc, #88]	; (8003588 <HAL_UART_MspInit+0x100>)
 800352e:	2200      	movs	r2, #0
 8003530:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <HAL_UART_MspInit+0x100>)
 8003534:	2200      	movs	r2, #0
 8003536:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <HAL_UART_MspInit+0x100>)
 800353a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800353e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_UART_MspInit+0x100>)
 8003542:	2200      	movs	r2, #0
 8003544:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003546:	4810      	ldr	r0, [pc, #64]	; (8003588 <HAL_UART_MspInit+0x100>)
 8003548:	f000 faf8 	bl	8003b3c <HAL_DMA_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003552:	f7ff fa9f 	bl	8002a94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <HAL_UART_MspInit+0x100>)
 800355a:	635a      	str	r2, [r3, #52]	; 0x34
 800355c:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <HAL_UART_MspInit+0x100>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003562:	2200      	movs	r2, #0
 8003564:	2105      	movs	r1, #5
 8003566:	2027      	movs	r0, #39	; 0x27
 8003568:	f000 fabe 	bl	8003ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800356c:	2027      	movs	r0, #39	; 0x27
 800356e:	f000 fad7 	bl	8003b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003572:	bf00      	nop
 8003574:	3728      	adds	r7, #40	; 0x28
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40004800 	.word	0x40004800
 8003580:	40023800 	.word	0x40023800
 8003584:	40020400 	.word	0x40020400
 8003588:	20000280 	.word	0x20000280
 800358c:	40026058 	.word	0x40026058

08003590 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80035a4:	4b20      	ldr	r3, [pc, #128]	; (8003628 <HAL_FSMC_MspInit+0x98>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d139      	bne.n	8003620 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 80035ac:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <HAL_FSMC_MspInit+0x98>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4b1d      	ldr	r3, [pc, #116]	; (800362c <HAL_FSMC_MspInit+0x9c>)
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	4a1c      	ldr	r2, [pc, #112]	; (800362c <HAL_FSMC_MspInit+0x9c>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6393      	str	r3, [r2, #56]	; 0x38
 80035c2:	4b1a      	ldr	r3, [pc, #104]	; (800362c <HAL_FSMC_MspInit+0x9c>)
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80035ce:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80035d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035dc:	2303      	movs	r3, #3
 80035de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80035e0:	230c      	movs	r3, #12
 80035e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035e4:	1d3b      	adds	r3, r7, #4
 80035e6:	4619      	mov	r1, r3
 80035e8:	4811      	ldr	r0, [pc, #68]	; (8003630 <HAL_FSMC_MspInit+0xa0>)
 80035ea:	f000 fea9 	bl	8004340 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 80035ee:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 80035f2:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fc:	2303      	movs	r3, #3
 80035fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003600:	230c      	movs	r3, #12
 8003602:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003604:	1d3b      	adds	r3, r7, #4
 8003606:	4619      	mov	r1, r3
 8003608:	480a      	ldr	r0, [pc, #40]	; (8003634 <HAL_FSMC_MspInit+0xa4>)
 800360a:	f000 fe99 	bl	8004340 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	2105      	movs	r1, #5
 8003612:	2030      	movs	r0, #48	; 0x30
 8003614:	f000 fa68 	bl	8003ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8003618:	2030      	movs	r0, #48	; 0x30
 800361a:	f000 fa81 	bl	8003b20 <HAL_NVIC_EnableIRQ>
 800361e:	e000      	b.n	8003622 <HAL_FSMC_MspInit+0x92>
    return;
 8003620:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000b88 	.word	0x20000b88
 800362c:	40023800 	.word	0x40023800
 8003630:	40021000 	.word	0x40021000
 8003634:	40020c00 	.word	0x40020c00

08003638 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8003640:	f7ff ffa6 	bl	8003590 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08c      	sub	sp, #48	; 0x30
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800365c:	2200      	movs	r2, #0
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	2019      	movs	r0, #25
 8003662:	f000 fa41 	bl	8003ae8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003666:	2019      	movs	r0, #25
 8003668:	f000 fa5a 	bl	8003b20 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <HAL_InitTick+0xa4>)
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <HAL_InitTick+0xa4>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6453      	str	r3, [r2, #68]	; 0x44
 800367c:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <HAL_InitTick+0xa4>)
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003688:	f107 0210 	add.w	r2, r7, #16
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f002 f910 	bl	80058b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003698:	f002 f8fa 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 800369c:	4603      	mov	r3, r0
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <HAL_InitTick+0xa8>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0c9b      	lsrs	r3, r3, #18
 80036ac:	3b01      	subs	r3, #1
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_InitTick+0xac>)
 80036b2:	4a12      	ldr	r2, [pc, #72]	; (80036fc <HAL_InitTick+0xb0>)
 80036b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_InitTick+0xac>)
 80036b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80036be:	4a0e      	ldr	r2, [pc, #56]	; (80036f8 <HAL_InitTick+0xac>)
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <HAL_InitTick+0xac>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_InitTick+0xac>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80036d0:	4809      	ldr	r0, [pc, #36]	; (80036f8 <HAL_InitTick+0xac>)
 80036d2:	f003 fa27 	bl	8006b24 <HAL_TIM_Base_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80036dc:	4806      	ldr	r0, [pc, #24]	; (80036f8 <HAL_InitTick+0xac>)
 80036de:	f003 fa71 	bl	8006bc4 <HAL_TIM_Base_Start_IT>
 80036e2:	4603      	mov	r3, r0
 80036e4:	e000      	b.n	80036e8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3730      	adds	r7, #48	; 0x30
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	431bde83 	.word	0x431bde83
 80036f8:	20000b8c 	.word	0x20000b8c
 80036fc:	40010000 	.word	0x40010000

08003700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003712:	e7fe      	b.n	8003712 <HardFault_Handler+0x4>

08003714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003718:	e7fe      	b.n	8003718 <MemManage_Handler+0x4>

0800371a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800371e:	e7fe      	b.n	800371e <BusFault_Handler+0x4>

08003720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003724:	e7fe      	b.n	8003724 <UsageFault_Handler+0x4>

08003726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003738:	4802      	ldr	r0, [pc, #8]	; (8003744 <DMA1_Stream3_IRQHandler+0x10>)
 800373a:	f000 fb97 	bl	8003e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000280 	.word	0x20000280

08003748 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800374c:	4802      	ldr	r0, [pc, #8]	; (8003758 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800374e:	f003 faa9 	bl	8006ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000b8c 	.word	0x20000b8c

0800375c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003760:	4802      	ldr	r0, [pc, #8]	; (800376c <TIM2_IRQHandler+0x10>)
 8003762:	f003 fa9f 	bl	8006ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	200001f4 	.word	0x200001f4

08003770 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <SPI1_IRQHandler+0x10>)
 8003776:	f002 ff61 	bl	800663c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	2000013c 	.word	0x2000013c

08003784 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <USART3_IRQHandler+0x10>)
 800378a:	f003 ff49 	bl	8007620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	2000023c 	.word	0x2000023c

08003798 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <FSMC_IRQHandler+0x10>)
 800379e:	f000 ffec 	bl	800477a <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200002e0 	.word	0x200002e0

080037ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80037b0:	4802      	ldr	r0, [pc, #8]	; (80037bc <DMA2_Stream3_IRQHandler+0x10>)
 80037b2:	f000 fb5b 	bl	8003e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000194 	.word	0x20000194

080037c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037c8:	4a14      	ldr	r2, [pc, #80]	; (800381c <_sbrk+0x5c>)
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <_sbrk+0x60>)
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037d4:	4b13      	ldr	r3, [pc, #76]	; (8003824 <_sbrk+0x64>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <_sbrk+0x64>)
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <_sbrk+0x68>)
 80037e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <_sbrk+0x64>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d207      	bcs.n	8003800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037f0:	f008 f8cc 	bl	800b98c <__errno>
 80037f4:	4603      	mov	r3, r0
 80037f6:	220c      	movs	r2, #12
 80037f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037fe:	e009      	b.n	8003814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <_sbrk+0x64>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <_sbrk+0x64>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	4a05      	ldr	r2, [pc, #20]	; (8003824 <_sbrk+0x64>)
 8003810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003812:	68fb      	ldr	r3, [r7, #12]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20020000 	.word	0x20020000
 8003820:	00000800 	.word	0x00000800
 8003824:	20000bd4 	.word	0x20000bd4
 8003828:	20006200 	.word	0x20006200

0800382c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <SystemInit+0x28>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	4a07      	ldr	r2, [pc, #28]	; (8003854 <SystemInit+0x28>)
 8003838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800383c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <SystemInit+0x28>)
 8003842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003846:	609a      	str	r2, [r3, #8]
#endif
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003890 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800385c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800385e:	e003      	b.n	8003868 <LoopCopyDataInit>

08003860 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003862:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003864:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003866:	3104      	adds	r1, #4

08003868 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003868:	480b      	ldr	r0, [pc, #44]	; (8003898 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800386c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800386e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003870:	d3f6      	bcc.n	8003860 <CopyDataInit>
  ldr  r2, =_sbss
 8003872:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003874:	e002      	b.n	800387c <LoopFillZerobss>

08003876 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003876:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003878:	f842 3b04 	str.w	r3, [r2], #4

0800387c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800387e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003880:	d3f9      	bcc.n	8003876 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003882:	f7ff ffd3 	bl	800382c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003886:	f008 f933 	bl	800baf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800388a:	f7fd f9e7 	bl	8000c5c <main>
  bx  lr    
 800388e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003890:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003894:	0800ef2c 	.word	0x0800ef2c
  ldr  r0, =_sdata
 8003898:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800389c:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 80038a0:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 80038a4:	200061fc 	.word	0x200061fc

080038a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038a8:	e7fe      	b.n	80038a8 <ADC_IRQHandler>
	...

080038ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038b0:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_Init+0x40>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0d      	ldr	r2, [pc, #52]	; (80038ec <HAL_Init+0x40>)
 80038b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_Init+0x40>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <HAL_Init+0x40>)
 80038c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c8:	4b08      	ldr	r3, [pc, #32]	; (80038ec <HAL_Init+0x40>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a07      	ldr	r2, [pc, #28]	; (80038ec <HAL_Init+0x40>)
 80038ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d4:	2003      	movs	r0, #3
 80038d6:	f000 f8fc 	bl	8003ad2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038da:	200f      	movs	r0, #15
 80038dc:	f7ff feb6 	bl	800364c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038e0:	f7ff fcc8 	bl	8003274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023c00 	.word	0x40023c00

080038f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_IncTick+0x20>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_IncTick+0x24>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4413      	add	r3, r2
 8003900:	4a04      	ldr	r2, [pc, #16]	; (8003914 <HAL_IncTick+0x24>)
 8003902:	6013      	str	r3, [r2, #0]
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000080 	.word	0x20000080
 8003914:	20000bd8 	.word	0x20000bd8

08003918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return uwTick;
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <HAL_GetTick+0x14>)
 800391e:	681b      	ldr	r3, [r3, #0]
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000bd8 	.word	0x20000bd8

08003930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003938:	f7ff ffee 	bl	8003918 <HAL_GetTick>
 800393c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003948:	d005      	beq.n	8003956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <HAL_Delay+0x44>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003956:	bf00      	nop
 8003958:	f7ff ffde 	bl	8003918 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	429a      	cmp	r2, r3
 8003966:	d8f7      	bhi.n	8003958 <HAL_Delay+0x28>
  {
  }
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000080 	.word	0x20000080

08003978 <__NVIC_SetPriorityGrouping>:
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <__NVIC_SetPriorityGrouping+0x44>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003994:	4013      	ands	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039aa:	4a04      	ldr	r2, [pc, #16]	; (80039bc <__NVIC_SetPriorityGrouping+0x44>)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	60d3      	str	r3, [r2, #12]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <__NVIC_GetPriorityGrouping>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <__NVIC_GetPriorityGrouping+0x18>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	f003 0307 	and.w	r3, r3, #7
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <__NVIC_EnableIRQ>:
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	db0b      	blt.n	8003a06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	f003 021f 	and.w	r2, r3, #31
 80039f4:	4907      	ldr	r1, [pc, #28]	; (8003a14 <__NVIC_EnableIRQ+0x38>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2001      	movs	r0, #1
 80039fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000e100 	.word	0xe000e100

08003a18 <__NVIC_SetPriority>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	6039      	str	r1, [r7, #0]
 8003a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	db0a      	blt.n	8003a42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	490c      	ldr	r1, [pc, #48]	; (8003a64 <__NVIC_SetPriority+0x4c>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	0112      	lsls	r2, r2, #4
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a40:	e00a      	b.n	8003a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	4908      	ldr	r1, [pc, #32]	; (8003a68 <__NVIC_SetPriority+0x50>)
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	3b04      	subs	r3, #4
 8003a50:	0112      	lsls	r2, r2, #4
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	440b      	add	r3, r1
 8003a56:	761a      	strb	r2, [r3, #24]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000e100 	.word	0xe000e100
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <NVIC_EncodePriority>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	; 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f1c3 0307 	rsb	r3, r3, #7
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	bf28      	it	cs
 8003a8a:	2304      	movcs	r3, #4
 8003a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	d902      	bls.n	8003a9c <NVIC_EncodePriority+0x30>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3b03      	subs	r3, #3
 8003a9a:	e000      	b.n	8003a9e <NVIC_EncodePriority+0x32>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	401a      	ands	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	43d9      	mvns	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	4313      	orrs	r3, r2
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3724      	adds	r7, #36	; 0x24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ff4c 	bl	8003978 <__NVIC_SetPriorityGrouping>
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003afa:	f7ff ff61 	bl	80039c0 <__NVIC_GetPriorityGrouping>
 8003afe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	6978      	ldr	r0, [r7, #20]
 8003b06:	f7ff ffb1 	bl	8003a6c <NVIC_EncodePriority>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff ff80 	bl	8003a18 <__NVIC_SetPriority>
}
 8003b18:	bf00      	nop
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff ff54 	bl	80039dc <__NVIC_EnableIRQ>
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b48:	f7ff fee6 	bl	8003918 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e099      	b.n	8003c8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b78:	e00f      	b.n	8003b9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b7a:	f7ff fecd 	bl	8003918 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b05      	cmp	r3, #5
 8003b86:	d908      	bls.n	8003b9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2203      	movs	r2, #3
 8003b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e078      	b.n	8003c8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e8      	bne.n	8003b7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <HAL_DMA_Init+0x158>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d107      	bne.n	8003c04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0307 	bic.w	r3, r3, #7
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d117      	bne.n	8003c5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00e      	beq.n	8003c5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fb01 	bl	8004248 <DMA_CheckFifoParam>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2240      	movs	r2, #64	; 0x40
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e016      	b.n	8003c8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fab8 	bl	80041dc <DMA_CalcBaseAndBitshift>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	223f      	movs	r2, #63	; 0x3f
 8003c76:	409a      	lsls	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	f010803f 	.word	0xf010803f

08003c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_DMA_Start_IT+0x26>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e040      	b.n	8003d40 <HAL_DMA_Start_IT+0xa8>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d12f      	bne.n	8003d32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fa4a 	bl	8004180 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf0:	223f      	movs	r2, #63	; 0x3f
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0216 	orr.w	r2, r2, #22
 8003d06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0208 	orr.w	r2, r2, #8
 8003d1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e005      	b.n	8003d3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d56:	f7ff fddf 	bl	8003918 <HAL_GetTick>
 8003d5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d008      	beq.n	8003d7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2280      	movs	r2, #128	; 0x80
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e052      	b.n	8003e20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0216 	bic.w	r2, r2, #22
 8003d88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <HAL_DMA_Abort+0x62>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0208 	bic.w	r2, r2, #8
 8003db8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dca:	e013      	b.n	8003df4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dcc:	f7ff fda4 	bl	8003918 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d90c      	bls.n	8003df4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2203      	movs	r2, #3
 8003de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e015      	b.n	8003e20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e4      	bne.n	8003dcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	223f      	movs	r2, #63	; 0x3f
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d004      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00c      	b.n	8003e60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2205      	movs	r2, #5
 8003e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e78:	4b8e      	ldr	r3, [pc, #568]	; (80040b4 <HAL_DMA_IRQHandler+0x248>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a8e      	ldr	r2, [pc, #568]	; (80040b8 <HAL_DMA_IRQHandler+0x24c>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	0a9b      	lsrs	r3, r3, #10
 8003e84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	2208      	movs	r2, #8
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01a      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d013      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0204 	bic.w	r2, r2, #4
 8003ebe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	f043 0201 	orr.w	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	2201      	movs	r2, #1
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	2201      	movs	r2, #1
 8003efc:	409a      	lsls	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	f043 0202 	orr.w	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	2204      	movs	r2, #4
 8003f14:	409a      	lsls	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00b      	beq.n	8003f44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f30:	2204      	movs	r2, #4
 8003f32:	409a      	lsls	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	f043 0204 	orr.w	r2, r3, #4
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	2210      	movs	r2, #16
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d043      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d03c      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	2210      	movs	r2, #16
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d018      	beq.n	8003fae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d108      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d024      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	4798      	blx	r3
 8003f9a:	e01f      	b.n	8003fdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01b      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
 8003fac:	e016      	b.n	8003fdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d107      	bne.n	8003fcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0208 	bic.w	r2, r2, #8
 8003fca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 808f 	beq.w	800410c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8087 	beq.w	800410c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004002:	2220      	movs	r2, #32
 8004004:	409a      	lsls	r2, r3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b05      	cmp	r3, #5
 8004014:	d136      	bne.n	8004084 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0216 	bic.w	r2, r2, #22
 8004024:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004034:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <HAL_DMA_IRQHandler+0x1da>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0208 	bic.w	r2, r2, #8
 8004054:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405a:	223f      	movs	r2, #63	; 0x3f
 800405c:	409a      	lsls	r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004076:	2b00      	cmp	r3, #0
 8004078:	d07e      	beq.n	8004178 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
        }
        return;
 8004082:	e079      	b.n	8004178 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01d      	beq.n	80040ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10d      	bne.n	80040bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d031      	beq.n	800410c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
 80040b0:	e02c      	b.n	800410c <HAL_DMA_IRQHandler+0x2a0>
 80040b2:	bf00      	nop
 80040b4:	20000078 	.word	0x20000078
 80040b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d023      	beq.n	800410c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
 80040cc:	e01e      	b.n	800410c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10f      	bne.n	80040fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0210 	bic.w	r2, r2, #16
 80040ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004110:	2b00      	cmp	r3, #0
 8004112:	d032      	beq.n	800417a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d022      	beq.n	8004166 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2205      	movs	r2, #5
 8004124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	3301      	adds	r3, #1
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	429a      	cmp	r2, r3
 8004142:	d307      	bcc.n	8004154 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f2      	bne.n	8004138 <HAL_DMA_IRQHandler+0x2cc>
 8004152:	e000      	b.n	8004156 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004154:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
 8004176:	e000      	b.n	800417a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004178:	bf00      	nop
    }
  }
}
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800419c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b40      	cmp	r3, #64	; 0x40
 80041ac:	d108      	bne.n	80041c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041be:	e007      	b.n	80041d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	60da      	str	r2, [r3, #12]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	3b10      	subs	r3, #16
 80041ec:	4a14      	ldr	r2, [pc, #80]	; (8004240 <DMA_CalcBaseAndBitshift+0x64>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041f6:	4a13      	ldr	r2, [pc, #76]	; (8004244 <DMA_CalcBaseAndBitshift+0x68>)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b03      	cmp	r3, #3
 8004208:	d909      	bls.n	800421e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	1d1a      	adds	r2, r3, #4
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	659a      	str	r2, [r3, #88]	; 0x58
 800421c:	e007      	b.n	800422e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004226:	f023 0303 	bic.w	r3, r3, #3
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	aaaaaaab 	.word	0xaaaaaaab
 8004244:	0800ed80 	.word	0x0800ed80

08004248 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004258:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d11f      	bne.n	80042a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d856      	bhi.n	8004316 <DMA_CheckFifoParam+0xce>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <DMA_CheckFifoParam+0x28>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	08004281 	.word	0x08004281
 8004274:	08004293 	.word	0x08004293
 8004278:	08004281 	.word	0x08004281
 800427c:	08004317 	.word	0x08004317
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d046      	beq.n	800431a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004290:	e043      	b.n	800431a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800429a:	d140      	bne.n	800431e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a0:	e03d      	b.n	800431e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042aa:	d121      	bne.n	80042f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d837      	bhi.n	8004322 <DMA_CheckFifoParam+0xda>
 80042b2:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <DMA_CheckFifoParam+0x70>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	080042c9 	.word	0x080042c9
 80042bc:	080042cf 	.word	0x080042cf
 80042c0:	080042c9 	.word	0x080042c9
 80042c4:	080042e1 	.word	0x080042e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
      break;
 80042cc:	e030      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d025      	beq.n	8004326 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042de:	e022      	b.n	8004326 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042e8:	d11f      	bne.n	800432a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042ee:	e01c      	b.n	800432a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d903      	bls.n	80042fe <DMA_CheckFifoParam+0xb6>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d003      	beq.n	8004304 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042fc:	e018      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
      break;
 8004302:	e015      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00e      	beq.n	800432e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
      break;
 8004314:	e00b      	b.n	800432e <DMA_CheckFifoParam+0xe6>
      break;
 8004316:	bf00      	nop
 8004318:	e00a      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
      break;
 800431a:	bf00      	nop
 800431c:	e008      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
      break;
 800431e:	bf00      	nop
 8004320:	e006      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
      break;
 8004322:	bf00      	nop
 8004324:	e004      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
      break;
 8004326:	bf00      	nop
 8004328:	e002      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
      break;   
 800432a:	bf00      	nop
 800432c:	e000      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
      break;
 800432e:	bf00      	nop
    }
  } 
  
  return status; 
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop

08004340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004340:	b480      	push	{r7}
 8004342:	b089      	sub	sp, #36	; 0x24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800434e:	2300      	movs	r3, #0
 8004350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004352:	2300      	movs	r3, #0
 8004354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	e16b      	b.n	8004634 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800435c:	2201      	movs	r2, #1
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4013      	ands	r3, r2
 800436e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	429a      	cmp	r2, r3
 8004376:	f040 815a 	bne.w	800462e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d005      	beq.n	8004392 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800438e:	2b02      	cmp	r3, #2
 8004390:	d130      	bne.n	80043f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	2203      	movs	r2, #3
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4013      	ands	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043c8:	2201      	movs	r2, #1
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4013      	ands	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 0201 	and.w	r2, r3, #1
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d017      	beq.n	8004430 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	2203      	movs	r2, #3
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d123      	bne.n	8004484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	08da      	lsrs	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3208      	adds	r2, #8
 8004444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	220f      	movs	r2, #15
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	08da      	lsrs	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3208      	adds	r2, #8
 800447e:	69b9      	ldr	r1, [r7, #24]
 8004480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	2203      	movs	r2, #3
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 0203 	and.w	r2, r3, #3
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 80b4 	beq.w	800462e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	4b60      	ldr	r3, [pc, #384]	; (800464c <HAL_GPIO_Init+0x30c>)
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	4a5f      	ldr	r2, [pc, #380]	; (800464c <HAL_GPIO_Init+0x30c>)
 80044d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044d4:	6453      	str	r3, [r2, #68]	; 0x44
 80044d6:	4b5d      	ldr	r3, [pc, #372]	; (800464c <HAL_GPIO_Init+0x30c>)
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044e2:	4a5b      	ldr	r2, [pc, #364]	; (8004650 <HAL_GPIO_Init+0x310>)
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	089b      	lsrs	r3, r3, #2
 80044e8:	3302      	adds	r3, #2
 80044ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	220f      	movs	r2, #15
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4013      	ands	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a52      	ldr	r2, [pc, #328]	; (8004654 <HAL_GPIO_Init+0x314>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d02b      	beq.n	8004566 <HAL_GPIO_Init+0x226>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a51      	ldr	r2, [pc, #324]	; (8004658 <HAL_GPIO_Init+0x318>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d025      	beq.n	8004562 <HAL_GPIO_Init+0x222>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a50      	ldr	r2, [pc, #320]	; (800465c <HAL_GPIO_Init+0x31c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01f      	beq.n	800455e <HAL_GPIO_Init+0x21e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a4f      	ldr	r2, [pc, #316]	; (8004660 <HAL_GPIO_Init+0x320>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d019      	beq.n	800455a <HAL_GPIO_Init+0x21a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a4e      	ldr	r2, [pc, #312]	; (8004664 <HAL_GPIO_Init+0x324>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <HAL_GPIO_Init+0x216>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a4d      	ldr	r2, [pc, #308]	; (8004668 <HAL_GPIO_Init+0x328>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00d      	beq.n	8004552 <HAL_GPIO_Init+0x212>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a4c      	ldr	r2, [pc, #304]	; (800466c <HAL_GPIO_Init+0x32c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d007      	beq.n	800454e <HAL_GPIO_Init+0x20e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a4b      	ldr	r2, [pc, #300]	; (8004670 <HAL_GPIO_Init+0x330>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d101      	bne.n	800454a <HAL_GPIO_Init+0x20a>
 8004546:	2307      	movs	r3, #7
 8004548:	e00e      	b.n	8004568 <HAL_GPIO_Init+0x228>
 800454a:	2308      	movs	r3, #8
 800454c:	e00c      	b.n	8004568 <HAL_GPIO_Init+0x228>
 800454e:	2306      	movs	r3, #6
 8004550:	e00a      	b.n	8004568 <HAL_GPIO_Init+0x228>
 8004552:	2305      	movs	r3, #5
 8004554:	e008      	b.n	8004568 <HAL_GPIO_Init+0x228>
 8004556:	2304      	movs	r3, #4
 8004558:	e006      	b.n	8004568 <HAL_GPIO_Init+0x228>
 800455a:	2303      	movs	r3, #3
 800455c:	e004      	b.n	8004568 <HAL_GPIO_Init+0x228>
 800455e:	2302      	movs	r3, #2
 8004560:	e002      	b.n	8004568 <HAL_GPIO_Init+0x228>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <HAL_GPIO_Init+0x228>
 8004566:	2300      	movs	r3, #0
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	f002 0203 	and.w	r2, r2, #3
 800456e:	0092      	lsls	r2, r2, #2
 8004570:	4093      	lsls	r3, r2
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4313      	orrs	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004578:	4935      	ldr	r1, [pc, #212]	; (8004650 <HAL_GPIO_Init+0x310>)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	089b      	lsrs	r3, r3, #2
 800457e:	3302      	adds	r3, #2
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004586:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <HAL_GPIO_Init+0x334>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045aa:	4a32      	ldr	r2, [pc, #200]	; (8004674 <HAL_GPIO_Init+0x334>)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045b0:	4b30      	ldr	r3, [pc, #192]	; (8004674 <HAL_GPIO_Init+0x334>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045d4:	4a27      	ldr	r2, [pc, #156]	; (8004674 <HAL_GPIO_Init+0x334>)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045da:	4b26      	ldr	r3, [pc, #152]	; (8004674 <HAL_GPIO_Init+0x334>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045fe:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_GPIO_Init+0x334>)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <HAL_GPIO_Init+0x334>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	43db      	mvns	r3, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4013      	ands	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004628:	4a12      	ldr	r2, [pc, #72]	; (8004674 <HAL_GPIO_Init+0x334>)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3301      	adds	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	f67f ae90 	bls.w	800435c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800463c:	bf00      	nop
 800463e:	bf00      	nop
 8004640:	3724      	adds	r7, #36	; 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40023800 	.word	0x40023800
 8004650:	40013800 	.word	0x40013800
 8004654:	40020000 	.word	0x40020000
 8004658:	40020400 	.word	0x40020400
 800465c:	40020800 	.word	0x40020800
 8004660:	40020c00 	.word	0x40020c00
 8004664:	40021000 	.word	0x40021000
 8004668:	40021400 	.word	0x40021400
 800466c:	40021800 	.word	0x40021800
 8004670:	40021c00 	.word	0x40021c00
 8004674:	40013c00 	.word	0x40013c00

08004678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
 8004684:	4613      	mov	r3, r2
 8004686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004688:	787b      	ldrb	r3, [r7, #1]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800468e:	887a      	ldrh	r2, [r7, #2]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004694:	e003      	b.n	800469e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004696:	887b      	ldrh	r3, [r7, #2]
 8004698:	041a      	lsls	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	619a      	str	r2, [r3, #24]
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046bc:	887a      	ldrh	r2, [r7, #2]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4013      	ands	r3, r2
 80046c2:	041a      	lsls	r2, r3, #16
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	43d9      	mvns	r1, r3
 80046c8:	887b      	ldrh	r3, [r7, #2]
 80046ca:	400b      	ands	r3, r1
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	619a      	str	r2, [r3, #24]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e03e      	b.n	8004772 <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d106      	bne.n	800470e <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7fe ff95 	bl	8003638 <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f003 ff45 	bl	80085a8 <FSMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	461a      	mov	r2, r3
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	f003 ff7f 	bl	800862c <FSMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	461a      	mov	r2, r3
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	f003 ffad 	bl	8008698 <FSMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b10      	cmp	r3, #16
 8004744:	d108      	bne.n	8004758 <HAL_NAND_Init+0x7a>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0204 	orr.w	r2, r2, #4
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e007      	b.n	8004768 <HAL_NAND_Init+0x8a>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0204 	orr.w	r2, r2, #4
 8004766:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
*/
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b10      	cmp	r3, #16
 8004788:	d10a      	bne.n	80047a0 <HAL_NAND_IRQHandler+0x26>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	e009      	b.n	80047b4 <HAL_NAND_IRQHandler+0x3a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	bf0c      	ite	eq
 80047ae:	2301      	moveq	r3, #1
 80047b0:	2300      	movne	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d017      	beq.n	80047e8 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fd fbd7 	bl	8001f6c <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Rising edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d108      	bne.n	80047d8 <HAL_NAND_IRQHandler+0x5e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	e007      	b.n	80047e8 <HAL_NAND_IRQHandler+0x6e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0201 	bic.w	r2, r2, #1
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt Level flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d10a      	bne.n	8004806 <HAL_NAND_IRQHandler+0x8c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	bf0c      	ite	eq
 80047fe:	2301      	moveq	r3, #1
 8004800:	2300      	movne	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	e009      	b.n	800481a <HAL_NAND_IRQHandler+0xa0>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b02      	cmp	r3, #2
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d017      	beq.n	800484e <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fd fba4 	bl	8001f6c <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Level pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b10      	cmp	r3, #16
 800482a:	d108      	bne.n	800483e <HAL_NAND_IRQHandler+0xc4>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0202 	bic.w	r2, r2, #2
 800483a:	605a      	str	r2, [r3, #4]
 800483c:	e007      	b.n	800484e <HAL_NAND_IRQHandler+0xd4>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0202 	bic.w	r2, r2, #2
 800484c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Falling edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b10      	cmp	r3, #16
 8004854:	d10a      	bne.n	800486c <HAL_NAND_IRQHandler+0xf2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b04      	cmp	r3, #4
 8004862:	bf0c      	ite	eq
 8004864:	2301      	moveq	r3, #1
 8004866:	2300      	movne	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	e009      	b.n	8004880 <HAL_NAND_IRQHandler+0x106>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b04      	cmp	r3, #4
 8004878:	bf0c      	ite	eq
 800487a:	2301      	moveq	r3, #1
 800487c:	2300      	movne	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d017      	beq.n	80048b4 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fd fb71 	bl	8001f6c <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Falling edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b10      	cmp	r3, #16
 8004890:	d108      	bne.n	80048a4 <HAL_NAND_IRQHandler+0x12a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0204 	bic.w	r2, r2, #4
 80048a0:	605a      	str	r2, [r3, #4]
 80048a2:	e007      	b.n	80048b4 <HAL_NAND_IRQHandler+0x13a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0204 	bic.w	r2, r2, #4
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt FIFO empty flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d10a      	bne.n	80048d2 <HAL_NAND_IRQHandler+0x158>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b40      	cmp	r3, #64	; 0x40
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	e009      	b.n	80048e6 <HAL_NAND_IRQHandler+0x16c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d017      	beq.n	800491a <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd fb3e 	bl	8001f6c <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt FIFO empty pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d108      	bne.n	800490a <HAL_NAND_IRQHandler+0x190>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004906:	605a      	str	r2, [r3, #4]
  }
}
 8004908:	e007      	b.n	800491a <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004918:	625a      	str	r2, [r3, #36]	; 0x24
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_NAND_Read_Page_8b>:
  * @param  pBuffer  pointer to destination read buffer
  * @param  NumPageToRead  number of pages to read from block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToRead)
{   
 8004922:	b580      	push	{r7, lr}
 8004924:	b08a      	sub	sp, #40	; 0x28
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	603b      	str	r3, [r7, #0]
  __IO uint32_t index  = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesRead = 0U, nandaddress = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	2300      	movs	r3, #0
 8004942:	623b      	str	r3, [r7, #32]
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand); 
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_NAND_Read_Page_8b+0x34>
 8004952:	2302      	movs	r3, #2
 8004954:	e108      	b.n	8004b68 <HAL_NAND_Read_Page_8b+0x246>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d101      	bne.n	800496e <HAL_NAND_Read_Page_8b+0x4c>
  {
     return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
 800496c:	e0fc      	b.n	8004b68 <HAL_NAND_Read_Page_8b+0x246>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b10      	cmp	r3, #16
 8004974:	d103      	bne.n	800497e <HAL_NAND_Read_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 8004976:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
 800497c:	e002      	b.n	8004984 <HAL_NAND_Read_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 800497e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	4619      	mov	r1, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	889b      	ldrh	r3, [r3, #4]
 8004996:	461a      	mov	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	885b      	ldrh	r3, [r3, #2]
 800499c:	4618      	mov	r0, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	fb00 f303 	mul.w	r3, r0, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049ac:	fb02 f303 	mul.w	r3, r2, r3
 80049b0:	440b      	add	r3, r1
 80049b2:	61fb      	str	r3, [r7, #28]

  /* Page(s) read loop */  
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80049b4:	e0c2      	b.n	8004b3c <HAL_NAND_Read_Page_8b+0x21a>
  {
    /* update the buffer size */
    size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesRead);
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	3301      	adds	r3, #1
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	617b      	str	r3, [r7, #20]
    
    /* Send read page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
   
    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d6:	d835      	bhi.n	8004a44 <HAL_NAND_Read_Page_8b+0x122>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e8:	d212      	bcs.n	8004a10 <HAL_NAND_Read_Page_8b+0xee>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	0a1a      	lsrs	r2, r3, #8
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e058      	b.n	8004ac2 <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	0a1a      	lsrs	r2, r3, #8
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	0c1a      	lsrs	r2, r3, #16
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	e03e      	b.n	8004ac2 <HAL_NAND_Read_Page_8b+0x1a0>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a54:	d217      	bcs.n	8004a86 <HAL_NAND_Read_Page_8b+0x164>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	0a1a      	lsrs	r2, r3, #8
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	e01d      	b.n	8004ac2 <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	0a1a      	lsrs	r2, r3, #8
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	0c1a      	lsrs	r2, r3, #16
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]
      }
    }
  
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac8:	2230      	movs	r2, #48	; 0x30
 8004aca:	701a      	strb	r2, [r3, #0]
      
    /* Check if an extra command is needed for reading pages  */
    if(hnand->Config.ExtraCommandEnable == ENABLE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d125      	bne.n	8004b22 <HAL_NAND_Read_Page_8b+0x200>
    {
      /* Get tick */
      tickstart = HAL_GetTick();
 8004ad6:	f7fe ff1f 	bl	8003918 <HAL_GetTick>
 8004ada:	61b8      	str	r0, [r7, #24]
      
      /* Read status until NAND is ready */
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004adc:	e009      	b.n	8004af2 <HAL_NAND_Read_Page_8b+0x1d0>
      {
        if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8004ade:	f7fe ff1b 	bl	8003918 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aec:	d901      	bls.n	8004af2 <HAL_NAND_Read_Page_8b+0x1d0>
        {
          return HAL_TIMEOUT; 
 8004aee:	2303      	movs	r3, #3
 8004af0:	e03a      	b.n	8004b68 <HAL_NAND_Read_Page_8b+0x246>
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fa08 	bl	8004f08 <HAL_NAND_Read_Status>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b40      	cmp	r3, #64	; 0x40
 8004afc:	d1ef      	bne.n	8004ade <HAL_NAND_Read_Page_8b+0x1bc>
        }
      }
      
      /* Go back to read mode */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b08:	f3bf 8f4f 	dsb	sy
}
 8004b0c:	bf00      	nop
      __DSB();
    }
    
    /* Get Data into Buffer */    
    for(; index < size; index++)
 8004b0e:	e008      	b.n	8004b22 <HAL_NAND_Read_Page_8b+0x200>
    {
      *(uint8_t *)pBuffer++ = *(uint8_t *)deviceaddress;
 8004b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	1c59      	adds	r1, r3, #1
 8004b16:	6079      	str	r1, [r7, #4]
 8004b18:	7812      	ldrb	r2, [r2, #0]
 8004b1a:	701a      	strb	r2, [r3, #0]
    for(; index < size; index++)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d8f2      	bhi.n	8004b10 <HAL_NAND_Read_Page_8b+0x1ee>
    }
    
    /* Increment read pages number */
    numPagesRead++;
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to read */
    NumPageToRead--;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	61fb      	str	r3, [r7, #28]
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_NAND_Read_Page_8b+0x234>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	f4ff af30 	bcc.w	80049b6 <HAL_NAND_Read_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3728      	adds	r7, #40	; 0x28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_NAND_Write_Page_8b>:
  * @param  pBuffer  pointer to source buffer to write  
  * @param  NumPageToWrite   number of pages to write to block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t index = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesWritten = 0U, nandaddress = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	623b      	str	r3, [r7, #32]
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand);  
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_NAND_Write_Page_8b+0x34>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e106      	b.n	8004db2 <HAL_NAND_Write_Page_8b+0x242>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d101      	bne.n	8004bbc <HAL_NAND_Write_Page_8b+0x4c>
  {
     return HAL_BUSY;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e0fa      	b.n	8004db2 <HAL_NAND_Write_Page_8b+0x242>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d103      	bne.n	8004bcc <HAL_NAND_Write_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 8004bc4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bca:	e002      	b.n	8004bd2 <HAL_NAND_Write_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8004bcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_BUSY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	4619      	mov	r1, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	889b      	ldrh	r3, [r3, #4]
 8004be4:	461a      	mov	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	885b      	ldrh	r3, [r3, #2]
 8004bea:	4618      	mov	r0, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	fb00 f303 	mul.w	r3, r0, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	440b      	add	r3, r1
 8004c00:	61fb      	str	r3, [r7, #28]
    
  /* Page(s) write loop */
  while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004c02:	e0c0      	b.n	8004d86 <HAL_NAND_Write_Page_8b+0x216>
  {
    /* update the buffer size */
    size = hnand->Config.PageSize + ((hnand->Config.PageSize) * numPagesWritten);
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	3301      	adds	r3, #1
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c0c:	fb02 f303 	mul.w	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]
    
    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	701a      	strb	r2, [r3, #0]

    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2e:	d835      	bhi.n	8004c9c <HAL_NAND_Write_Page_8b+0x12c>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c40:	d212      	bcs.n	8004c68 <HAL_NAND_Write_Page_8b+0xf8>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	0a1a      	lsrs	r2, r3, #8
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	e068      	b.n	8004d3a <HAL_NAND_Write_Page_8b+0x1ca>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	0a1a      	lsrs	r2, r3, #8
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	0c1a      	lsrs	r2, r3, #16
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	e04e      	b.n	8004d3a <HAL_NAND_Write_Page_8b+0x1ca>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ca4:	fb02 f303 	mul.w	r3, r2, r3
 8004ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cac:	d217      	bcs.n	8004cde <HAL_NAND_Write_Page_8b+0x16e>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	0a1a      	lsrs	r2, r3, #8
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e02d      	b.n	8004d3a <HAL_NAND_Write_Page_8b+0x1ca>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	0a1a      	lsrs	r2, r3, #8
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d0c:	f3bf 8f4f 	dsb	sy
}
 8004d10:	bf00      	nop
        __DSB();
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	0c1a      	lsrs	r2, r3, #16
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d20:	f3bf 8f4f 	dsb	sy
}
 8004d24:	bf00      	nop
      }
    }
  

    /* Write data to memory */
    for(; index < size; index++)
 8004d26:	e008      	b.n	8004d3a <HAL_NAND_Write_Page_8b+0x1ca>
    {
      *(__IO uint8_t *)deviceaddress = *(uint8_t *)pBuffer++;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	7013      	strb	r3, [r2, #0]
    for(; index < size; index++)
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	3301      	adds	r3, #1
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d8f2      	bhi.n	8004d28 <HAL_NAND_Write_Page_8b+0x1b8>
    }
   
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d48:	2210      	movs	r2, #16
 8004d4a:	701a      	strb	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d4c:	f7fe fde4 	bl	8003918 <HAL_GetTick>
 8004d50:	61b8      	str	r0, [r7, #24]

    /* Read status until NAND is ready */
    while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004d52:	e009      	b.n	8004d68 <HAL_NAND_Write_Page_8b+0x1f8>
    {
      
      if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8004d54:	f7fe fde0 	bl	8003918 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d62:	d901      	bls.n	8004d68 <HAL_NAND_Write_Page_8b+0x1f8>
      {
        return HAL_TIMEOUT; 
 8004d64:	2303      	movs	r3, #3
 8004d66:	e024      	b.n	8004db2 <HAL_NAND_Write_Page_8b+0x242>
    while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f8cd 	bl	8004f08 <HAL_NAND_Read_Status>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b40      	cmp	r3, #64	; 0x40
 8004d72:	d1ef      	bne.n	8004d54 <HAL_NAND_Write_Page_8b+0x1e4>
      }
    }
 
    /* Increment written pages number */
    numPagesWritten++;
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	3301      	adds	r3, #1
 8004d78:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to write */
    NumPageToWrite--;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	3301      	adds	r3, #1
 8004d84:	61fb      	str	r3, [r7, #28]
  while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <HAL_NAND_Write_Page_8b+0x230>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d94:	fb02 f303 	mul.w	r3, r2, r3
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	f4ff af32 	bcc.w	8004c04 <HAL_NAND_Write_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */ 
  hnand->State = HAL_NAND_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3728      	adds	r7, #40	; 0x28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(hnand);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_NAND_Erase_Block+0x20>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e092      	b.n	8004f00 <HAL_NAND_Erase_Block+0x146>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d101      	bne.n	8004df2 <HAL_NAND_Erase_Block+0x38>
  {
     return HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
 8004df0:	e086      	b.n	8004f00 <HAL_NAND_Erase_Block+0x146>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d103      	bne.n	8004e02 <HAL_NAND_Erase_Block+0x48>
  {
    deviceaddress = NAND_DEVICE1;
 8004dfa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e002      	b.n	8004e08 <HAL_NAND_Erase_Block+0x4e>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8004e02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e06:	60fb      	str	r3, [r7, #12]
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;  
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Send Erase block command sequence */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e16:	2260      	movs	r2, #96	; 0x60
 8004e18:	701a      	strb	r2, [r3, #0]

  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	889b      	ldrh	r3, [r3, #4]
 8004e24:	4619      	mov	r1, r3
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	885b      	ldrh	r3, [r3, #2]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	fb00 f303 	mul.w	r3, r0, r3
 8004e34:	440b      	add	r3, r1
 8004e36:	b2d9      	uxtb	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	fb11 f303 	smulbb	r3, r1, r3
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	68f9      	ldr	r1, [r7, #12]
 8004e46:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004e4a:	4413      	add	r3, r2
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	700b      	strb	r3, [r1, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	4619      	mov	r1, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	889b      	ldrh	r3, [r3, #4]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	885b      	ldrh	r3, [r3, #2]
 8004e60:	4618      	mov	r0, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	fb00 f303 	mul.w	r3, r0, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e70:	fb02 f303 	mul.w	r3, r2, r3
 8004e74:	440b      	add	r3, r1
 8004e76:	0a1a      	lsrs	r2, r3, #8
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	4619      	mov	r1, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	889b      	ldrh	r3, [r3, #4]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	885b      	ldrh	r3, [r3, #2]
 8004e92:	4618      	mov	r0, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	fb00 f303 	mul.w	r3, r0, r3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	440b      	add	r3, r1
 8004ea8:	0c1a      	lsrs	r2, r3, #16
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]
    
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1; 
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eba:	22d0      	movs	r2, #208	; 0xd0
 8004ebc:	701a      	strb	r2, [r3, #0]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004ec6:	f7fe fd27 	bl	8003918 <HAL_GetTick>
 8004eca:	60b8      	str	r0, [r7, #8]
  
  /* Read status until NAND is ready */
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004ecc:	e00d      	b.n	8004eea <HAL_NAND_Erase_Block+0x130>
  {
    if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8004ece:	f7fe fd23 	bl	8003918 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004edc:	d905      	bls.n	8004eea <HAL_NAND_Erase_Block+0x130>
    {
      /* Process unlocked */
      __HAL_UNLOCK(hnand);    
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2020 	strb.w	r2, [r3, #32]
  
      return HAL_TIMEOUT; 
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e00a      	b.n	8004f00 <HAL_NAND_Erase_Block+0x146>
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f80c 	bl	8004f08 <HAL_NAND_Read_Status>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d1eb      	bne.n	8004ece <HAL_NAND_Erase_Block+0x114>
    } 
  }    
 
  /* Process unlocked */
  __HAL_UNLOCK(hnand);    
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;  
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t data = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60bb      	str	r3, [r7, #8]
  uint32_t deviceaddress = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d103      	bne.n	8004f28 <HAL_NAND_Read_Status+0x20>
  {
    deviceaddress = NAND_DEVICE1;
 8004f20:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	e002      	b.n	8004f2e <HAL_NAND_Read_Status+0x26>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8004f28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f2c:	60fb      	str	r3, [r7, #12]
  } 

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f34:	2270      	movs	r2, #112	; 0x70
 8004f36:	701a      	strb	r2, [r3, #0]
  
  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if((data & NAND_ERROR) == NAND_ERROR)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_NAND_Read_Status+0x46>
  {
    return NAND_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e007      	b.n	8004f5e <HAL_NAND_Read_Status+0x56>
  } 
  else if((data & NAND_READY) == NAND_READY)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_NAND_Read_Status+0x54>
  {
    return NAND_READY;
 8004f58:	2340      	movs	r3, #64	; 0x40
 8004f5a:	e000      	b.n	8004f5e <HAL_NAND_Read_Status+0x56>
  }

  return NAND_BUSY; 
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  return hnand->State;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f78:	b2db      	uxtb	r3, r3
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e267      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d075      	beq.n	8005092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fa6:	4b88      	ldr	r3, [pc, #544]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d00c      	beq.n	8004fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb2:	4b85      	ldr	r3, [pc, #532]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d112      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fbe:	4b82      	ldr	r3, [pc, #520]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fca:	d10b      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fcc:	4b7e      	ldr	r3, [pc, #504]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d05b      	beq.n	8005090 <HAL_RCC_OscConfig+0x108>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d157      	bne.n	8005090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e242      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fec:	d106      	bne.n	8004ffc <HAL_RCC_OscConfig+0x74>
 8004fee:	4b76      	ldr	r3, [pc, #472]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a75      	ldr	r2, [pc, #468]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e01d      	b.n	8005038 <HAL_RCC_OscConfig+0xb0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005004:	d10c      	bne.n	8005020 <HAL_RCC_OscConfig+0x98>
 8005006:	4b70      	ldr	r3, [pc, #448]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a6f      	ldr	r2, [pc, #444]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 800500c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b6d      	ldr	r3, [pc, #436]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a6c      	ldr	r2, [pc, #432]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e00b      	b.n	8005038 <HAL_RCC_OscConfig+0xb0>
 8005020:	4b69      	ldr	r3, [pc, #420]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a68      	ldr	r2, [pc, #416]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4b66      	ldr	r3, [pc, #408]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a65      	ldr	r2, [pc, #404]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d013      	beq.n	8005068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fe fc6a 	bl	8003918 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005048:	f7fe fc66 	bl	8003918 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	; 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e207      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	4b5b      	ldr	r3, [pc, #364]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0xc0>
 8005066:	e014      	b.n	8005092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fe fc56 	bl	8003918 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005070:	f7fe fc52 	bl	8003918 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	; 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e1f3      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005082:	4b51      	ldr	r3, [pc, #324]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0xe8>
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d063      	beq.n	8005166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800509e:	4b4a      	ldr	r3, [pc, #296]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050aa:	4b47      	ldr	r3, [pc, #284]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d11c      	bne.n	80050f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b6:	4b44      	ldr	r3, [pc, #272]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d116      	bne.n	80050f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c2:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_RCC_OscConfig+0x152>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d001      	beq.n	80050da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e1c7      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050da:	4b3b      	ldr	r3, [pc, #236]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4937      	ldr	r1, [pc, #220]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ee:	e03a      	b.n	8005166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d020      	beq.n	800513a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f8:	4b34      	ldr	r3, [pc, #208]	; (80051cc <HAL_RCC_OscConfig+0x244>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fe:	f7fe fc0b 	bl	8003918 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005106:	f7fe fc07 	bl	8003918 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e1a8      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005118:	4b2b      	ldr	r3, [pc, #172]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005124:	4b28      	ldr	r3, [pc, #160]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4925      	ldr	r1, [pc, #148]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 8005134:	4313      	orrs	r3, r2
 8005136:	600b      	str	r3, [r1, #0]
 8005138:	e015      	b.n	8005166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800513a:	4b24      	ldr	r3, [pc, #144]	; (80051cc <HAL_RCC_OscConfig+0x244>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005140:	f7fe fbea 	bl	8003918 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005148:	f7fe fbe6 	bl	8003918 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e187      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d036      	beq.n	80051e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d016      	beq.n	80051a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517a:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <HAL_RCC_OscConfig+0x248>)
 800517c:	2201      	movs	r2, #1
 800517e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005180:	f7fe fbca 	bl	8003918 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005188:	f7fe fbc6 	bl	8003918 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e167      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_RCC_OscConfig+0x240>)
 800519c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x200>
 80051a6:	e01b      	b.n	80051e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <HAL_RCC_OscConfig+0x248>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ae:	f7fe fbb3 	bl	8003918 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b4:	e00e      	b.n	80051d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051b6:	f7fe fbaf 	bl	8003918 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d907      	bls.n	80051d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e150      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
 80051c8:	40023800 	.word	0x40023800
 80051cc:	42470000 	.word	0x42470000
 80051d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d4:	4b88      	ldr	r3, [pc, #544]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 80051d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1ea      	bne.n	80051b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8097 	beq.w	800531c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ee:	2300      	movs	r3, #0
 80051f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f2:	4b81      	ldr	r3, [pc, #516]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10f      	bne.n	800521e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	4b7d      	ldr	r3, [pc, #500]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	4a7c      	ldr	r2, [pc, #496]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520c:	6413      	str	r3, [r2, #64]	; 0x40
 800520e:	4b7a      	ldr	r3, [pc, #488]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521a:	2301      	movs	r3, #1
 800521c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521e:	4b77      	ldr	r3, [pc, #476]	; (80053fc <HAL_RCC_OscConfig+0x474>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	2b00      	cmp	r3, #0
 8005228:	d118      	bne.n	800525c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800522a:	4b74      	ldr	r3, [pc, #464]	; (80053fc <HAL_RCC_OscConfig+0x474>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a73      	ldr	r2, [pc, #460]	; (80053fc <HAL_RCC_OscConfig+0x474>)
 8005230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005236:	f7fe fb6f 	bl	8003918 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523e:	f7fe fb6b 	bl	8003918 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e10c      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005250:	4b6a      	ldr	r3, [pc, #424]	; (80053fc <HAL_RCC_OscConfig+0x474>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0f0      	beq.n	800523e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d106      	bne.n	8005272 <HAL_RCC_OscConfig+0x2ea>
 8005264:	4b64      	ldr	r3, [pc, #400]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005268:	4a63      	ldr	r2, [pc, #396]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 800526a:	f043 0301 	orr.w	r3, r3, #1
 800526e:	6713      	str	r3, [r2, #112]	; 0x70
 8005270:	e01c      	b.n	80052ac <HAL_RCC_OscConfig+0x324>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b05      	cmp	r3, #5
 8005278:	d10c      	bne.n	8005294 <HAL_RCC_OscConfig+0x30c>
 800527a:	4b5f      	ldr	r3, [pc, #380]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	4a5e      	ldr	r2, [pc, #376]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005280:	f043 0304 	orr.w	r3, r3, #4
 8005284:	6713      	str	r3, [r2, #112]	; 0x70
 8005286:	4b5c      	ldr	r3, [pc, #368]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	4a5b      	ldr	r2, [pc, #364]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	6713      	str	r3, [r2, #112]	; 0x70
 8005292:	e00b      	b.n	80052ac <HAL_RCC_OscConfig+0x324>
 8005294:	4b58      	ldr	r3, [pc, #352]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005298:	4a57      	ldr	r2, [pc, #348]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 800529a:	f023 0301 	bic.w	r3, r3, #1
 800529e:	6713      	str	r3, [r2, #112]	; 0x70
 80052a0:	4b55      	ldr	r3, [pc, #340]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a4:	4a54      	ldr	r2, [pc, #336]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 80052a6:	f023 0304 	bic.w	r3, r3, #4
 80052aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d015      	beq.n	80052e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b4:	f7fe fb30 	bl	8003918 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ba:	e00a      	b.n	80052d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052bc:	f7fe fb2c 	bl	8003918 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e0cb      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d2:	4b49      	ldr	r3, [pc, #292]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0ee      	beq.n	80052bc <HAL_RCC_OscConfig+0x334>
 80052de:	e014      	b.n	800530a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e0:	f7fe fb1a 	bl	8003918 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e6:	e00a      	b.n	80052fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e8:	f7fe fb16 	bl	8003918 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e0b5      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052fe:	4b3e      	ldr	r3, [pc, #248]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1ee      	bne.n	80052e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d105      	bne.n	800531c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005310:	4b39      	ldr	r3, [pc, #228]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	4a38      	ldr	r2, [pc, #224]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80a1 	beq.w	8005468 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005326:	4b34      	ldr	r3, [pc, #208]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
 800532e:	2b08      	cmp	r3, #8
 8005330:	d05c      	beq.n	80053ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d141      	bne.n	80053be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533a:	4b31      	ldr	r3, [pc, #196]	; (8005400 <HAL_RCC_OscConfig+0x478>)
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005340:	f7fe faea 	bl	8003918 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005348:	f7fe fae6 	bl	8003918 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e087      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535a:	4b27      	ldr	r3, [pc, #156]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	019b      	lsls	r3, r3, #6
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537c:	085b      	lsrs	r3, r3, #1
 800537e:	3b01      	subs	r3, #1
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	061b      	lsls	r3, r3, #24
 800538a:	491b      	ldr	r1, [pc, #108]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 800538c:	4313      	orrs	r3, r2
 800538e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005390:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <HAL_RCC_OscConfig+0x478>)
 8005392:	2201      	movs	r2, #1
 8005394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005396:	f7fe fabf 	bl	8003918 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800539e:	f7fe fabb 	bl	8003918 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e05c      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b0:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0f0      	beq.n	800539e <HAL_RCC_OscConfig+0x416>
 80053bc:	e054      	b.n	8005468 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <HAL_RCC_OscConfig+0x478>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c4:	f7fe faa8 	bl	8003918 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053cc:	f7fe faa4 	bl	8003918 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e045      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <HAL_RCC_OscConfig+0x470>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f0      	bne.n	80053cc <HAL_RCC_OscConfig+0x444>
 80053ea:	e03d      	b.n	8005468 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d107      	bne.n	8005404 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e038      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40007000 	.word	0x40007000
 8005400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005404:	4b1b      	ldr	r3, [pc, #108]	; (8005474 <HAL_RCC_OscConfig+0x4ec>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d028      	beq.n	8005464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800541c:	429a      	cmp	r2, r3
 800541e:	d121      	bne.n	8005464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d11a      	bne.n	8005464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005434:	4013      	ands	r3, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800543a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800543c:	4293      	cmp	r3, r2
 800543e:	d111      	bne.n	8005464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	3b01      	subs	r3, #1
 800544e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d107      	bne.n	8005464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800

08005478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0cc      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800548c:	4b68      	ldr	r3, [pc, #416]	; (8005630 <HAL_RCC_ClockConfig+0x1b8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d90c      	bls.n	80054b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549a:	4b65      	ldr	r3, [pc, #404]	; (8005630 <HAL_RCC_ClockConfig+0x1b8>)
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a2:	4b63      	ldr	r3, [pc, #396]	; (8005630 <HAL_RCC_ClockConfig+0x1b8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0b8      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d020      	beq.n	8005502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054cc:	4b59      	ldr	r3, [pc, #356]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4a58      	ldr	r2, [pc, #352]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d005      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054e4:	4b53      	ldr	r3, [pc, #332]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	4a52      	ldr	r2, [pc, #328]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f0:	4b50      	ldr	r3, [pc, #320]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	494d      	ldr	r1, [pc, #308]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d044      	beq.n	8005598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d107      	bne.n	8005526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005516:	4b47      	ldr	r3, [pc, #284]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d119      	bne.n	8005556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e07f      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d003      	beq.n	8005536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005532:	2b03      	cmp	r3, #3
 8005534:	d107      	bne.n	8005546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005536:	4b3f      	ldr	r3, [pc, #252]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d109      	bne.n	8005556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e06f      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005546:	4b3b      	ldr	r3, [pc, #236]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e067      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005556:	4b37      	ldr	r3, [pc, #220]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f023 0203 	bic.w	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	4934      	ldr	r1, [pc, #208]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005564:	4313      	orrs	r3, r2
 8005566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005568:	f7fe f9d6 	bl	8003918 <HAL_GetTick>
 800556c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	e00a      	b.n	8005586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005570:	f7fe f9d2 	bl	8003918 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	; 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e04f      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005586:	4b2b      	ldr	r3, [pc, #172]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 020c 	and.w	r2, r3, #12
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	429a      	cmp	r2, r3
 8005596:	d1eb      	bne.n	8005570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005598:	4b25      	ldr	r3, [pc, #148]	; (8005630 <HAL_RCC_ClockConfig+0x1b8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d20c      	bcs.n	80055c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a6:	4b22      	ldr	r3, [pc, #136]	; (8005630 <HAL_RCC_ClockConfig+0x1b8>)
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	4b20      	ldr	r3, [pc, #128]	; (8005630 <HAL_RCC_ClockConfig+0x1b8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e032      	b.n	8005626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d008      	beq.n	80055de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055cc:	4b19      	ldr	r3, [pc, #100]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	4916      	ldr	r1, [pc, #88]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ea:	4b12      	ldr	r3, [pc, #72]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	490e      	ldr	r1, [pc, #56]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055fe:	f000 f821 	bl	8005644 <HAL_RCC_GetSysClockFreq>
 8005602:	4602      	mov	r2, r0
 8005604:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	490a      	ldr	r1, [pc, #40]	; (8005638 <HAL_RCC_ClockConfig+0x1c0>)
 8005610:	5ccb      	ldrb	r3, [r1, r3]
 8005612:	fa22 f303 	lsr.w	r3, r2, r3
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <HAL_RCC_ClockConfig+0x1c4>)
 8005618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800561a:	4b09      	ldr	r3, [pc, #36]	; (8005640 <HAL_RCC_ClockConfig+0x1c8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe f814 	bl	800364c <HAL_InitTick>

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40023c00 	.word	0x40023c00
 8005634:	40023800 	.word	0x40023800
 8005638:	0800ed68 	.word	0x0800ed68
 800563c:	20000078 	.word	0x20000078
 8005640:	2000007c 	.word	0x2000007c

08005644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005648:	b094      	sub	sp, #80	; 0x50
 800564a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	647b      	str	r3, [r7, #68]	; 0x44
 8005650:	2300      	movs	r3, #0
 8005652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005654:	2300      	movs	r3, #0
 8005656:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800565c:	4b79      	ldr	r3, [pc, #484]	; (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 030c 	and.w	r3, r3, #12
 8005664:	2b08      	cmp	r3, #8
 8005666:	d00d      	beq.n	8005684 <HAL_RCC_GetSysClockFreq+0x40>
 8005668:	2b08      	cmp	r3, #8
 800566a:	f200 80e1 	bhi.w	8005830 <HAL_RCC_GetSysClockFreq+0x1ec>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x34>
 8005672:	2b04      	cmp	r3, #4
 8005674:	d003      	beq.n	800567e <HAL_RCC_GetSysClockFreq+0x3a>
 8005676:	e0db      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005678:	4b73      	ldr	r3, [pc, #460]	; (8005848 <HAL_RCC_GetSysClockFreq+0x204>)
 800567a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800567c:	e0db      	b.n	8005836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800567e:	4b73      	ldr	r3, [pc, #460]	; (800584c <HAL_RCC_GetSysClockFreq+0x208>)
 8005680:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005682:	e0d8      	b.n	8005836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005684:	4b6f      	ldr	r3, [pc, #444]	; (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800568c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800568e:	4b6d      	ldr	r3, [pc, #436]	; (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d063      	beq.n	8005762 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800569a:	4b6a      	ldr	r3, [pc, #424]	; (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	099b      	lsrs	r3, r3, #6
 80056a0:	2200      	movs	r2, #0
 80056a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80056a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ac:	633b      	str	r3, [r7, #48]	; 0x30
 80056ae:	2300      	movs	r3, #0
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
 80056b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056b6:	4622      	mov	r2, r4
 80056b8:	462b      	mov	r3, r5
 80056ba:	f04f 0000 	mov.w	r0, #0
 80056be:	f04f 0100 	mov.w	r1, #0
 80056c2:	0159      	lsls	r1, r3, #5
 80056c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056c8:	0150      	lsls	r0, r2, #5
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4621      	mov	r1, r4
 80056d0:	1a51      	subs	r1, r2, r1
 80056d2:	6139      	str	r1, [r7, #16]
 80056d4:	4629      	mov	r1, r5
 80056d6:	eb63 0301 	sbc.w	r3, r3, r1
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056e8:	4659      	mov	r1, fp
 80056ea:	018b      	lsls	r3, r1, #6
 80056ec:	4651      	mov	r1, sl
 80056ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056f2:	4651      	mov	r1, sl
 80056f4:	018a      	lsls	r2, r1, #6
 80056f6:	4651      	mov	r1, sl
 80056f8:	ebb2 0801 	subs.w	r8, r2, r1
 80056fc:	4659      	mov	r1, fp
 80056fe:	eb63 0901 	sbc.w	r9, r3, r1
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800570e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005716:	4690      	mov	r8, r2
 8005718:	4699      	mov	r9, r3
 800571a:	4623      	mov	r3, r4
 800571c:	eb18 0303 	adds.w	r3, r8, r3
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	462b      	mov	r3, r5
 8005724:	eb49 0303 	adc.w	r3, r9, r3
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005736:	4629      	mov	r1, r5
 8005738:	024b      	lsls	r3, r1, #9
 800573a:	4621      	mov	r1, r4
 800573c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005740:	4621      	mov	r1, r4
 8005742:	024a      	lsls	r2, r1, #9
 8005744:	4610      	mov	r0, r2
 8005746:	4619      	mov	r1, r3
 8005748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574a:	2200      	movs	r2, #0
 800574c:	62bb      	str	r3, [r7, #40]	; 0x28
 800574e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005754:	f7fb f8ea 	bl	800092c <__aeabi_uldivmod>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4613      	mov	r3, r2
 800575e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005760:	e058      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005762:	4b38      	ldr	r3, [pc, #224]	; (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	099b      	lsrs	r3, r3, #6
 8005768:	2200      	movs	r2, #0
 800576a:	4618      	mov	r0, r3
 800576c:	4611      	mov	r1, r2
 800576e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005772:	623b      	str	r3, [r7, #32]
 8005774:	2300      	movs	r3, #0
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
 8005778:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800577c:	4642      	mov	r2, r8
 800577e:	464b      	mov	r3, r9
 8005780:	f04f 0000 	mov.w	r0, #0
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	0159      	lsls	r1, r3, #5
 800578a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800578e:	0150      	lsls	r0, r2, #5
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4641      	mov	r1, r8
 8005796:	ebb2 0a01 	subs.w	sl, r2, r1
 800579a:	4649      	mov	r1, r9
 800579c:	eb63 0b01 	sbc.w	fp, r3, r1
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057b4:	ebb2 040a 	subs.w	r4, r2, sl
 80057b8:	eb63 050b 	sbc.w	r5, r3, fp
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	00eb      	lsls	r3, r5, #3
 80057c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ca:	00e2      	lsls	r2, r4, #3
 80057cc:	4614      	mov	r4, r2
 80057ce:	461d      	mov	r5, r3
 80057d0:	4643      	mov	r3, r8
 80057d2:	18e3      	adds	r3, r4, r3
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	464b      	mov	r3, r9
 80057d8:	eb45 0303 	adc.w	r3, r5, r3
 80057dc:	607b      	str	r3, [r7, #4]
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057ea:	4629      	mov	r1, r5
 80057ec:	028b      	lsls	r3, r1, #10
 80057ee:	4621      	mov	r1, r4
 80057f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057f4:	4621      	mov	r1, r4
 80057f6:	028a      	lsls	r2, r1, #10
 80057f8:	4610      	mov	r0, r2
 80057fa:	4619      	mov	r1, r3
 80057fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fe:	2200      	movs	r2, #0
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	61fa      	str	r2, [r7, #28]
 8005804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005808:	f7fb f890 	bl	800092c <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4613      	mov	r3, r2
 8005812:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	0c1b      	lsrs	r3, r3, #16
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	3301      	adds	r3, #1
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005824:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005828:	fbb2 f3f3 	udiv	r3, r2, r3
 800582c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800582e:	e002      	b.n	8005836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <HAL_RCC_GetSysClockFreq+0x204>)
 8005832:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005838:	4618      	mov	r0, r3
 800583a:	3750      	adds	r7, #80	; 0x50
 800583c:	46bd      	mov	sp, r7
 800583e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005842:	bf00      	nop
 8005844:	40023800 	.word	0x40023800
 8005848:	00f42400 	.word	0x00f42400
 800584c:	007a1200 	.word	0x007a1200

08005850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005854:	4b03      	ldr	r3, [pc, #12]	; (8005864 <HAL_RCC_GetHCLKFreq+0x14>)
 8005856:	681b      	ldr	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000078 	.word	0x20000078

08005868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800586c:	f7ff fff0 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 8005870:	4602      	mov	r2, r0
 8005872:	4b05      	ldr	r3, [pc, #20]	; (8005888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	0a9b      	lsrs	r3, r3, #10
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	4903      	ldr	r1, [pc, #12]	; (800588c <HAL_RCC_GetPCLK1Freq+0x24>)
 800587e:	5ccb      	ldrb	r3, [r1, r3]
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40023800 	.word	0x40023800
 800588c:	0800ed78 	.word	0x0800ed78

08005890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005894:	f7ff ffdc 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 8005898:	4602      	mov	r2, r0
 800589a:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	0b5b      	lsrs	r3, r3, #13
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	4903      	ldr	r1, [pc, #12]	; (80058b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058a6:	5ccb      	ldrb	r3, [r1, r3]
 80058a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40023800 	.word	0x40023800
 80058b4:	0800ed78 	.word	0x0800ed78

080058b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	220f      	movs	r2, #15
 80058c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058c8:	4b12      	ldr	r3, [pc, #72]	; (8005914 <HAL_RCC_GetClockConfig+0x5c>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 0203 	and.w	r2, r3, #3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <HAL_RCC_GetClockConfig+0x5c>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80058e0:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <HAL_RCC_GetClockConfig+0x5c>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80058ec:	4b09      	ldr	r3, [pc, #36]	; (8005914 <HAL_RCC_GetClockConfig+0x5c>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	08db      	lsrs	r3, r3, #3
 80058f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058fa:	4b07      	ldr	r3, [pc, #28]	; (8005918 <HAL_RCC_GetClockConfig+0x60>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0207 	and.w	r2, r3, #7
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	601a      	str	r2, [r3, #0]
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40023800 	.word	0x40023800
 8005918:	40023c00 	.word	0x40023c00

0800591c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d105      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005940:	2b00      	cmp	r3, #0
 8005942:	d035      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005944:	4b62      	ldr	r3, [pc, #392]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800594a:	f7fd ffe5 	bl	8003918 <HAL_GetTick>
 800594e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005950:	e008      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005952:	f7fd ffe1 	bl	8003918 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e0b0      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005964:	4b5b      	ldr	r3, [pc, #364]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f0      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	019a      	lsls	r2, r3, #6
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	071b      	lsls	r3, r3, #28
 800597c:	4955      	ldr	r1, [pc, #340]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005984:	4b52      	ldr	r3, [pc, #328]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005986:	2201      	movs	r2, #1
 8005988:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800598a:	f7fd ffc5 	bl	8003918 <HAL_GetTick>
 800598e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005990:	e008      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005992:	f7fd ffc1 	bl	8003918 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e090      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059a4:	4b4b      	ldr	r3, [pc, #300]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0f0      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8083 	beq.w	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	4b44      	ldr	r3, [pc, #272]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	4a43      	ldr	r2, [pc, #268]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059cc:	6413      	str	r3, [r2, #64]	; 0x40
 80059ce:	4b41      	ldr	r3, [pc, #260]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059da:	4b3f      	ldr	r3, [pc, #252]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a3e      	ldr	r2, [pc, #248]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059e6:	f7fd ff97 	bl	8003918 <HAL_GetTick>
 80059ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059ec:	e008      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059ee:	f7fd ff93 	bl	8003918 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e062      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a00:	4b35      	ldr	r3, [pc, #212]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0f0      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a0c:	4b31      	ldr	r3, [pc, #196]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a14:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d02f      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d028      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a2a:	4b2a      	ldr	r3, [pc, #168]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a34:	4b29      	ldr	r3, [pc, #164]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a3a:	4b28      	ldr	r3, [pc, #160]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a40:	4a24      	ldr	r2, [pc, #144]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a46:	4b23      	ldr	r3, [pc, #140]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d114      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a52:	f7fd ff61 	bl	8003918 <HAL_GetTick>
 8005a56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a58:	e00a      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a5a:	f7fd ff5d 	bl	8003918 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e02a      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a70:	4b18      	ldr	r3, [pc, #96]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ee      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a88:	d10d      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a9e:	490d      	ldr	r1, [pc, #52]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	608b      	str	r3, [r1, #8]
 8005aa4:	e005      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ab0:	6093      	str	r3, [r2, #8]
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ab4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005abe:	4905      	ldr	r1, [pc, #20]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	42470068 	.word	0x42470068
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40007000 	.word	0x40007000
 8005adc:	42470e40 	.word	0x42470e40

08005ae0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e083      	b.n	8005bfa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	7f5b      	ldrb	r3, [r3, #29]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d105      	bne.n	8005b08 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fd fbe2 	bl	80032cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	22ca      	movs	r2, #202	; 0xca
 8005b14:	625a      	str	r2, [r3, #36]	; 0x24
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2253      	movs	r2, #83	; 0x53
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 faa8 	bl	8006074 <RTC_EnterInitMode>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	22ff      	movs	r2, #255	; 0xff
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2204      	movs	r2, #4
 8005b36:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e05e      	b.n	8005bfa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6899      	ldr	r1, [r3, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	68d2      	ldr	r2, [r2, #12]
 8005b76:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6919      	ldr	r1, [r3, #16]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	041a      	lsls	r2, r3, #16
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b9a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa3a 	bl	8006024 <HAL_RTC_WaitForSynchro>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	22ff      	movs	r2, #255	; 0xff
 8005bbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e018      	b.n	8005bfa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c02:	b590      	push	{r4, r7, lr}
 8005c04:	b087      	sub	sp, #28
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	7f1b      	ldrb	r3, [r3, #28]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_RTC_SetTime+0x1c>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e0aa      	b.n	8005d74 <HAL_RTC_SetTime+0x172>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2202      	movs	r2, #2
 8005c28:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d126      	bne.n	8005c7e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2200      	movs	r2, #0
 8005c42:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fa3f 	bl	80060cc <RTC_ByteToBcd2>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	785b      	ldrb	r3, [r3, #1]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fa38 	bl	80060cc <RTC_ByteToBcd2>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c60:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	789b      	ldrb	r3, [r3, #2]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fa30 	bl	80060cc <RTC_ByteToBcd2>
 8005c6c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005c6e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	78db      	ldrb	r3, [r3, #3]
 8005c76:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	e018      	b.n	8005cb0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c9e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005ca4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	78db      	ldrb	r3, [r3, #3]
 8005caa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	22ca      	movs	r2, #202	; 0xca
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2253      	movs	r2, #83	; 0x53
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f9d7 	bl	8006074 <RTC_EnterInitMode>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	22ff      	movs	r2, #255	; 0xff
 8005cd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e047      	b.n	8005d74 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005cee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005cf2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d02:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6899      	ldr	r1, [r3, #8]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d2a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d111      	bne.n	8005d5e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f972 	bl	8006024 <HAL_RTC_WaitForSynchro>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	22ff      	movs	r2, #255	; 0xff
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2204      	movs	r2, #4
 8005d52:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e00a      	b.n	8005d74 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	22ff      	movs	r2, #255	; 0xff
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005d72:	2300      	movs	r3, #0
  }
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	371c      	adds	r7, #28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd90      	pop	{r4, r7, pc}

08005d7c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005dae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005db2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	0c1b      	lsrs	r3, r3, #16
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	0c1b      	lsrs	r3, r3, #16
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d11a      	bne.n	8005e2e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 f983 	bl	8006108 <RTC_Bcd2ToByte>
 8005e02:	4603      	mov	r3, r0
 8005e04:	461a      	mov	r2, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 f97a 	bl	8006108 <RTC_Bcd2ToByte>
 8005e14:	4603      	mov	r3, r0
 8005e16:	461a      	mov	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	789b      	ldrb	r3, [r3, #2]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 f971 	bl	8006108 <RTC_Bcd2ToByte>
 8005e26:	4603      	mov	r3, r0
 8005e28:	461a      	mov	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e38:	b590      	push	{r4, r7, lr}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	7f1b      	ldrb	r3, [r3, #28]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_RTC_SetDate+0x1c>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e094      	b.n	8005f7e <HAL_RTC_SetDate+0x146>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10e      	bne.n	8005e84 <HAL_RTC_SetDate+0x4c>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	f023 0310 	bic.w	r3, r3, #16
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	330a      	adds	r3, #10
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d11c      	bne.n	8005ec4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	78db      	ldrb	r3, [r3, #3]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f91c 	bl	80060cc <RTC_ByteToBcd2>
 8005e94:	4603      	mov	r3, r0
 8005e96:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	785b      	ldrb	r3, [r3, #1]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 f915 	bl	80060cc <RTC_ByteToBcd2>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005ea6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	789b      	ldrb	r3, [r3, #2]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 f90d 	bl	80060cc <RTC_ByteToBcd2>
 8005eb2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005eb4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	e00e      	b.n	8005ee2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ed0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005ed6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	22ca      	movs	r2, #202	; 0xca
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2253      	movs	r2, #83	; 0x53
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f8be 	bl	8006074 <RTC_EnterInitMode>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	22ff      	movs	r2, #255	; 0xff
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2204      	movs	r2, #4
 8005f0a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e033      	b.n	8005f7e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f24:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f34:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d111      	bne.n	8005f68 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 f86d 	bl	8006024 <HAL_RTC_WaitForSynchro>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	22ff      	movs	r2, #255	; 0xff
 8005f56:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e00a      	b.n	8005f7e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	22ff      	movs	r2, #255	; 0xff
 8005f6e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
  }
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd90      	pop	{r4, r7, pc}

08005f86 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b086      	sub	sp, #24
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005fa0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	0c1b      	lsrs	r3, r3, #16
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	0a1b      	lsrs	r3, r3, #8
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	0b5b      	lsrs	r3, r3, #13
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11a      	bne.n	800601a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	78db      	ldrb	r3, [r3, #3]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 f88d 	bl	8006108 <RTC_Bcd2ToByte>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 f884 	bl	8006108 <RTC_Bcd2ToByte>
 8006000:	4603      	mov	r3, r0
 8006002:	461a      	mov	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	789b      	ldrb	r3, [r3, #2]
 800600c:	4618      	mov	r0, r3
 800600e:	f000 f87b 	bl	8006108 <RTC_Bcd2ToByte>
 8006012:	4603      	mov	r3, r0
 8006014:	461a      	mov	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800603e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006040:	f7fd fc6a 	bl	8003918 <HAL_GetTick>
 8006044:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006046:	e009      	b.n	800605c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006048:	f7fd fc66 	bl	8003918 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006056:	d901      	bls.n	800605c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e007      	b.n	800606c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0ee      	beq.n	8006048 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d119      	bne.n	80060c2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006096:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006098:	f7fd fc3e 	bl	8003918 <HAL_GetTick>
 800609c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800609e:	e009      	b.n	80060b4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060a0:	f7fd fc3a 	bl	8003918 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060ae:	d901      	bls.n	80060b4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e007      	b.n	80060c4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0ee      	beq.n	80060a0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	4603      	mov	r3, r0
 80060d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80060da:	e005      	b.n	80060e8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3301      	adds	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	3b0a      	subs	r3, #10
 80060e6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	2b09      	cmp	r3, #9
 80060ec:	d8f6      	bhi.n	80060dc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	b2db      	uxtb	r3, r3
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	091b      	lsrs	r3, r3, #4
 800611a:	b2db      	uxtb	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	b2da      	uxtb	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	4413      	add	r3, r2
 8006136:	b2db      	uxtb	r3, r3
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e07b      	b.n	800624e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	2b00      	cmp	r3, #0
 800615c:	d108      	bne.n	8006170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006166:	d009      	beq.n	800617c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	61da      	str	r2, [r3, #28]
 800616e:	e005      	b.n	800617c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fd f8c4 	bl	8003324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006200:	ea42 0103 	orr.w	r1, r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	0c1b      	lsrs	r3, r3, #16
 800621a:	f003 0104 	and.w	r1, r3, #4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	f003 0210 	and.w	r2, r3, #16
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800623c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b088      	sub	sp, #32
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	603b      	str	r3, [r7, #0]
 8006262:	4613      	mov	r3, r2
 8006264:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_SPI_Transmit+0x22>
 8006274:	2302      	movs	r3, #2
 8006276:	e126      	b.n	80064c6 <HAL_SPI_Transmit+0x270>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006280:	f7fd fb4a 	bl	8003918 <HAL_GetTick>
 8006284:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b01      	cmp	r3, #1
 8006294:	d002      	beq.n	800629c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006296:	2302      	movs	r3, #2
 8006298:	77fb      	strb	r3, [r7, #31]
    goto error;
 800629a:	e10b      	b.n	80064b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_SPI_Transmit+0x52>
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d102      	bne.n	80062ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062ac:	e102      	b.n	80064b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2203      	movs	r2, #3
 80062b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	88fa      	ldrh	r2, [r7, #6]
 80062c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	88fa      	ldrh	r2, [r7, #6]
 80062cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f4:	d10f      	bne.n	8006316 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006304:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006314:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006320:	2b40      	cmp	r3, #64	; 0x40
 8006322:	d007      	beq.n	8006334 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006332:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800633c:	d14b      	bne.n	80063d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <HAL_SPI_Transmit+0xf6>
 8006346:	8afb      	ldrh	r3, [r7, #22]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d13e      	bne.n	80063ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	881a      	ldrh	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	1c9a      	adds	r2, r3, #2
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006370:	e02b      	b.n	80063ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b02      	cmp	r3, #2
 800637e:	d112      	bne.n	80063a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	881a      	ldrh	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	1c9a      	adds	r2, r3, #2
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80063a4:	e011      	b.n	80063ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063a6:	f7fd fab7 	bl	8003918 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d803      	bhi.n	80063be <HAL_SPI_Transmit+0x168>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063bc:	d102      	bne.n	80063c4 <HAL_SPI_Transmit+0x16e>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063c8:	e074      	b.n	80064b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1ce      	bne.n	8006372 <HAL_SPI_Transmit+0x11c>
 80063d4:	e04c      	b.n	8006470 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_SPI_Transmit+0x18e>
 80063de:	8afb      	ldrh	r3, [r7, #22]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d140      	bne.n	8006466 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	330c      	adds	r3, #12
 80063ee:	7812      	ldrb	r2, [r2, #0]
 80063f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006400:	b29b      	uxth	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800640a:	e02c      	b.n	8006466 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b02      	cmp	r3, #2
 8006418:	d113      	bne.n	8006442 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	330c      	adds	r3, #12
 8006424:	7812      	ldrb	r2, [r2, #0]
 8006426:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006440:	e011      	b.n	8006466 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006442:	f7fd fa69 	bl	8003918 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d803      	bhi.n	800645a <HAL_SPI_Transmit+0x204>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006458:	d102      	bne.n	8006460 <HAL_SPI_Transmit+0x20a>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d102      	bne.n	8006466 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006464:	e026      	b.n	80064b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1cd      	bne.n	800640c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 fb13 	bl	8006aa0 <SPI_EndRxTxTransaction>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800648e:	2300      	movs	r3, #0
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	613b      	str	r3, [r7, #16]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	77fb      	strb	r3, [r7, #31]
 80064b0:	e000      	b.n	80064b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80064b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3720      	adds	r7, #32
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_SPI_Transmit_DMA+0x20>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e09b      	b.n	8006628 <HAL_SPI_Transmit_DMA+0x158>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d002      	beq.n	800650a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006504:	2302      	movs	r3, #2
 8006506:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006508:	e089      	b.n	800661e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <HAL_SPI_Transmit_DMA+0x46>
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d102      	bne.n	800651c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	75fb      	strb	r3, [r7, #23]
    goto error;
 800651a:	e080      	b.n	800661e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2203      	movs	r2, #3
 8006520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006562:	d10f      	bne.n	8006584 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006572:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006582:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006588:	4a29      	ldr	r2, [pc, #164]	; (8006630 <HAL_SPI_Transmit_DMA+0x160>)
 800658a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006590:	4a28      	ldr	r2, [pc, #160]	; (8006634 <HAL_SPI_Transmit_DMA+0x164>)
 8006592:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006598:	4a27      	ldr	r2, [pc, #156]	; (8006638 <HAL_SPI_Transmit_DMA+0x168>)
 800659a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065a0:	2200      	movs	r2, #0
 80065a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	4619      	mov	r1, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	330c      	adds	r3, #12
 80065b4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80065bc:	f7fd fb6c 	bl	8003c98 <HAL_DMA_Start_IT>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00c      	beq.n	80065e0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ca:	f043 0210 	orr.w	r2, r3, #16
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80065de:	e01e      	b.n	800661e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d007      	beq.n	80065fe <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065fc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0220 	orr.w	r2, r2, #32
 800660c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0202 	orr.w	r2, r2, #2
 800661c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006626:	7dfb      	ldrb	r3, [r7, #23]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	0800690d 	.word	0x0800690d
 8006634:	08006865 	.word	0x08006865
 8006638:	08006929 	.word	0x08006929

0800663c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	099b      	lsrs	r3, r3, #6
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10f      	bne.n	8006680 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	099b      	lsrs	r3, r3, #6
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
    return;
 800667e:	e0d7      	b.n	8006830 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00a      	beq.n	80066a2 <HAL_SPI_IRQHandler+0x66>
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	09db      	lsrs	r3, r3, #7
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
    return;
 80066a0:	e0c6      	b.n	8006830 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10c      	bne.n	80066c8 <HAL_SPI_IRQHandler+0x8c>
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	099b      	lsrs	r3, r3, #6
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	0a1b      	lsrs	r3, r3, #8
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80b4 	beq.w	8006830 <HAL_SPI_IRQHandler+0x1f4>
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 80ad 	beq.w	8006830 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	099b      	lsrs	r3, r3, #6
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d023      	beq.n	800672a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d011      	beq.n	8006712 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f2:	f043 0204 	orr.w	r2, r3, #4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	e00b      	b.n	800672a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006712:	2300      	movs	r3, #0
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	613b      	str	r3, [r7, #16]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	693b      	ldr	r3, [r7, #16]
        return;
 8006728:	e082      	b.n	8006830 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	095b      	lsrs	r3, r3, #5
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d014      	beq.n	8006760 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673a:	f043 0201 	orr.w	r2, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	0a1b      	lsrs	r3, r3, #8
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00c      	beq.n	8006786 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006770:	f043 0208 	orr.w	r2, r3, #8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006778:	2300      	movs	r3, #0
 800677a:	60bb      	str	r3, [r7, #8]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	60bb      	str	r3, [r7, #8]
 8006784:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678a:	2b00      	cmp	r3, #0
 800678c:	d04f      	beq.n	800682e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800679c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d104      	bne.n	80067ba <HAL_SPI_IRQHandler+0x17e>
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d034      	beq.n	8006824 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0203 	bic.w	r2, r2, #3
 80067c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d011      	beq.n	80067f6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d6:	4a18      	ldr	r2, [pc, #96]	; (8006838 <HAL_SPI_IRQHandler+0x1fc>)
 80067d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fd fb22 	bl	8003e28 <HAL_DMA_Abort_IT>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d016      	beq.n	800682c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006802:	4a0d      	ldr	r2, [pc, #52]	; (8006838 <HAL_SPI_IRQHandler+0x1fc>)
 8006804:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680a:	4618      	mov	r0, r3
 800680c:	f7fd fb0c 	bl	8003e28 <HAL_DMA_Abort_IT>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006822:	e003      	b.n	800682c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f813 	bl	8006850 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800682a:	e000      	b.n	800682e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800682c:	bf00      	nop
    return;
 800682e:	bf00      	nop
  }
}
 8006830:	3720      	adds	r7, #32
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	08006969 	.word	0x08006969

0800683c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006872:	f7fd f851 	bl	8003918 <HAL_GetTick>
 8006876:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006886:	d03b      	beq.n	8006900 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0220 	bic.w	r2, r2, #32
 8006896:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0202 	bic.w	r2, r2, #2
 80068a6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	2164      	movs	r1, #100	; 0x64
 80068ac:	6978      	ldr	r0, [r7, #20]
 80068ae:	f000 f8f7 	bl	8006aa0 <SPI_EndRxTxTransaction>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068bc:	f043 0220 	orr.w	r2, r3, #32
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2200      	movs	r2, #0
 80068e6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80068f8:	6978      	ldr	r0, [r7, #20]
 80068fa:	f7ff ffa9 	bl	8006850 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068fe:	e002      	b.n	8006906 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006900:	6978      	ldr	r0, [r7, #20]
 8006902:	f7fb fb1d 	bl	8001f40 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff ff8e 	bl	800683c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0203 	bic.w	r2, r2, #3
 8006944:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	f043 0210 	orr.w	r2, r3, #16
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f7ff ff78 	bl	8006850 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff ff64 	bl	8006850 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006988:	bf00      	nop
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	4613      	mov	r3, r2
 800699e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069a0:	f7fc ffba 	bl	8003918 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	1a9b      	subs	r3, r3, r2
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	4413      	add	r3, r2
 80069ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069b0:	f7fc ffb2 	bl	8003918 <HAL_GetTick>
 80069b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069b6:	4b39      	ldr	r3, [pc, #228]	; (8006a9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	015b      	lsls	r3, r3, #5
 80069bc:	0d1b      	lsrs	r3, r3, #20
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	fb02 f303 	mul.w	r3, r2, r3
 80069c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069c6:	e054      	b.n	8006a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ce:	d050      	beq.n	8006a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069d0:	f7fc ffa2 	bl	8003918 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d902      	bls.n	80069e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d13d      	bne.n	8006a62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069fe:	d111      	bne.n	8006a24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a08:	d004      	beq.n	8006a14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a12:	d107      	bne.n	8006a24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2c:	d10f      	bne.n	8006a4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e017      	b.n	8006a92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	bf0c      	ite	eq
 8006a82:	2301      	moveq	r3, #1
 8006a84:	2300      	movne	r3, #0
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d19b      	bne.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3720      	adds	r7, #32
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20000078 	.word	0x20000078

08006aa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006aac:	4b1b      	ldr	r3, [pc, #108]	; (8006b1c <SPI_EndRxTxTransaction+0x7c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <SPI_EndRxTxTransaction+0x80>)
 8006ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab6:	0d5b      	lsrs	r3, r3, #21
 8006ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006abc:	fb02 f303 	mul.w	r3, r2, r3
 8006ac0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aca:	d112      	bne.n	8006af2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2180      	movs	r1, #128	; 0x80
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f7ff ff5a 	bl	8006990 <SPI_WaitFlagStateUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d016      	beq.n	8006b10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae6:	f043 0220 	orr.w	r2, r3, #32
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e00f      	b.n	8006b12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00a      	beq.n	8006b0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b08:	2b80      	cmp	r3, #128	; 0x80
 8006b0a:	d0f2      	beq.n	8006af2 <SPI_EndRxTxTransaction+0x52>
 8006b0c:	e000      	b.n	8006b10 <SPI_EndRxTxTransaction+0x70>
        break;
 8006b0e:	bf00      	nop
  }

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000078 	.word	0x20000078
 8006b20:	165e9f81 	.word	0x165e9f81

08006b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e041      	b.n	8006bba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fc fc76 	bl	800343c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	4619      	mov	r1, r3
 8006b62:	4610      	mov	r0, r2
 8006b64:	f000 fa96 	bl	8007094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d001      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e04e      	b.n	8006c7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0201 	orr.w	r2, r2, #1
 8006bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a23      	ldr	r2, [pc, #140]	; (8006c88 <HAL_TIM_Base_Start_IT+0xc4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d022      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x80>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c06:	d01d      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x80>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1f      	ldr	r2, [pc, #124]	; (8006c8c <HAL_TIM_Base_Start_IT+0xc8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d018      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x80>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1e      	ldr	r2, [pc, #120]	; (8006c90 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d013      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x80>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1c      	ldr	r2, [pc, #112]	; (8006c94 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00e      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x80>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a1b      	ldr	r2, [pc, #108]	; (8006c98 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d009      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x80>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a19      	ldr	r2, [pc, #100]	; (8006c9c <HAL_TIM_Base_Start_IT+0xd8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d004      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x80>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a18      	ldr	r2, [pc, #96]	; (8006ca0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d111      	bne.n	8006c68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b06      	cmp	r3, #6
 8006c54:	d010      	beq.n	8006c78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 0201 	orr.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c66:	e007      	b.n	8006c78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0201 	orr.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	40010000 	.word	0x40010000
 8006c8c:	40000400 	.word	0x40000400
 8006c90:	40000800 	.word	0x40000800
 8006c94:	40000c00 	.word	0x40000c00
 8006c98:	40010400 	.word	0x40010400
 8006c9c:	40014000 	.word	0x40014000
 8006ca0:	40001800 	.word	0x40001800

08006ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d122      	bne.n	8006d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d11b      	bne.n	8006d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0202 	mvn.w	r2, #2
 8006cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f9b5 	bl	8007056 <HAL_TIM_IC_CaptureCallback>
 8006cec:	e005      	b.n	8006cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f9a7 	bl	8007042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f9b8 	bl	800706a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	2b04      	cmp	r3, #4
 8006d0c:	d122      	bne.n	8006d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d11b      	bne.n	8006d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f06f 0204 	mvn.w	r2, #4
 8006d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f98b 	bl	8007056 <HAL_TIM_IC_CaptureCallback>
 8006d40:	e005      	b.n	8006d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f97d 	bl	8007042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f98e 	bl	800706a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0308 	and.w	r3, r3, #8
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d122      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d11b      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0208 	mvn.w	r2, #8
 8006d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2204      	movs	r2, #4
 8006d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f961 	bl	8007056 <HAL_TIM_IC_CaptureCallback>
 8006d94:	e005      	b.n	8006da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f953 	bl	8007042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f964 	bl	800706a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0310 	and.w	r3, r3, #16
 8006db2:	2b10      	cmp	r3, #16
 8006db4:	d122      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f003 0310 	and.w	r3, r3, #16
 8006dc0:	2b10      	cmp	r3, #16
 8006dc2:	d11b      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f06f 0210 	mvn.w	r2, #16
 8006dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f937 	bl	8007056 <HAL_TIM_IC_CaptureCallback>
 8006de8:	e005      	b.n	8006df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f929 	bl	8007042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f93a 	bl	800706a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d10e      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d107      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0201 	mvn.w	r2, #1
 8006e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fb fe0a 	bl	8002a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e32:	2b80      	cmp	r3, #128	; 0x80
 8006e34:	d10e      	bne.n	8006e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e40:	2b80      	cmp	r3, #128	; 0x80
 8006e42:	d107      	bne.n	8006e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fae0 	bl	8007414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5e:	2b40      	cmp	r3, #64	; 0x40
 8006e60:	d10e      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	d107      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f8ff 	bl	800707e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f003 0320 	and.w	r3, r3, #32
 8006e8a:	2b20      	cmp	r3, #32
 8006e8c:	d10e      	bne.n	8006eac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f003 0320 	and.w	r3, r3, #32
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d107      	bne.n	8006eac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0220 	mvn.w	r2, #32
 8006ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 faaa 	bl	8007400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006eac:	bf00      	nop
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_TIM_ConfigClockSource+0x1c>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e0b4      	b.n	800703a <HAL_TIM_ConfigClockSource+0x186>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f08:	d03e      	beq.n	8006f88 <HAL_TIM_ConfigClockSource+0xd4>
 8006f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0e:	f200 8087 	bhi.w	8007020 <HAL_TIM_ConfigClockSource+0x16c>
 8006f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f16:	f000 8086 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x172>
 8006f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1e:	d87f      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x16c>
 8006f20:	2b70      	cmp	r3, #112	; 0x70
 8006f22:	d01a      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0xa6>
 8006f24:	2b70      	cmp	r3, #112	; 0x70
 8006f26:	d87b      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x16c>
 8006f28:	2b60      	cmp	r3, #96	; 0x60
 8006f2a:	d050      	beq.n	8006fce <HAL_TIM_ConfigClockSource+0x11a>
 8006f2c:	2b60      	cmp	r3, #96	; 0x60
 8006f2e:	d877      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x16c>
 8006f30:	2b50      	cmp	r3, #80	; 0x50
 8006f32:	d03c      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0xfa>
 8006f34:	2b50      	cmp	r3, #80	; 0x50
 8006f36:	d873      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x16c>
 8006f38:	2b40      	cmp	r3, #64	; 0x40
 8006f3a:	d058      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x13a>
 8006f3c:	2b40      	cmp	r3, #64	; 0x40
 8006f3e:	d86f      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x16c>
 8006f40:	2b30      	cmp	r3, #48	; 0x30
 8006f42:	d064      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x15a>
 8006f44:	2b30      	cmp	r3, #48	; 0x30
 8006f46:	d86b      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x16c>
 8006f48:	2b20      	cmp	r3, #32
 8006f4a:	d060      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x15a>
 8006f4c:	2b20      	cmp	r3, #32
 8006f4e:	d867      	bhi.n	8007020 <HAL_TIM_ConfigClockSource+0x16c>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d05c      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x15a>
 8006f54:	2b10      	cmp	r3, #16
 8006f56:	d05a      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x15a>
 8006f58:	e062      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	6899      	ldr	r1, [r3, #8]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f000 f9ad 	bl	80072c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	609a      	str	r2, [r3, #8]
      break;
 8006f86:	e04f      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	6899      	ldr	r1, [r3, #8]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f000 f996 	bl	80072c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006faa:	609a      	str	r2, [r3, #8]
      break;
 8006fac:	e03c      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	6859      	ldr	r1, [r3, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f000 f90a 	bl	80071d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2150      	movs	r1, #80	; 0x50
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 f963 	bl	8007292 <TIM_ITRx_SetConfig>
      break;
 8006fcc:	e02c      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	6859      	ldr	r1, [r3, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f000 f929 	bl	8007232 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2160      	movs	r1, #96	; 0x60
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f953 	bl	8007292 <TIM_ITRx_SetConfig>
      break;
 8006fec:	e01c      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	6859      	ldr	r1, [r3, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f000 f8ea 	bl	80071d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2140      	movs	r1, #64	; 0x40
 8007006:	4618      	mov	r0, r3
 8007008:	f000 f943 	bl	8007292 <TIM_ITRx_SetConfig>
      break;
 800700c:	e00c      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f000 f93a 	bl	8007292 <TIM_ITRx_SetConfig>
      break;
 800701e:	e003      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	73fb      	strb	r3, [r7, #15]
      break;
 8007024:	e000      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
	...

08007094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a40      	ldr	r2, [pc, #256]	; (80071a8 <TIM_Base_SetConfig+0x114>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d013      	beq.n	80070d4 <TIM_Base_SetConfig+0x40>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b2:	d00f      	beq.n	80070d4 <TIM_Base_SetConfig+0x40>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a3d      	ldr	r2, [pc, #244]	; (80071ac <TIM_Base_SetConfig+0x118>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00b      	beq.n	80070d4 <TIM_Base_SetConfig+0x40>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a3c      	ldr	r2, [pc, #240]	; (80071b0 <TIM_Base_SetConfig+0x11c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d007      	beq.n	80070d4 <TIM_Base_SetConfig+0x40>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a3b      	ldr	r2, [pc, #236]	; (80071b4 <TIM_Base_SetConfig+0x120>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d003      	beq.n	80070d4 <TIM_Base_SetConfig+0x40>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a3a      	ldr	r2, [pc, #232]	; (80071b8 <TIM_Base_SetConfig+0x124>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d108      	bne.n	80070e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a2f      	ldr	r2, [pc, #188]	; (80071a8 <TIM_Base_SetConfig+0x114>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d02b      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f4:	d027      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a2c      	ldr	r2, [pc, #176]	; (80071ac <TIM_Base_SetConfig+0x118>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d023      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a2b      	ldr	r2, [pc, #172]	; (80071b0 <TIM_Base_SetConfig+0x11c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d01f      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a2a      	ldr	r2, [pc, #168]	; (80071b4 <TIM_Base_SetConfig+0x120>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d01b      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a29      	ldr	r2, [pc, #164]	; (80071b8 <TIM_Base_SetConfig+0x124>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d017      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a28      	ldr	r2, [pc, #160]	; (80071bc <TIM_Base_SetConfig+0x128>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d013      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a27      	ldr	r2, [pc, #156]	; (80071c0 <TIM_Base_SetConfig+0x12c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d00f      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a26      	ldr	r2, [pc, #152]	; (80071c4 <TIM_Base_SetConfig+0x130>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00b      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a25      	ldr	r2, [pc, #148]	; (80071c8 <TIM_Base_SetConfig+0x134>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d007      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a24      	ldr	r2, [pc, #144]	; (80071cc <TIM_Base_SetConfig+0x138>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d003      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a23      	ldr	r2, [pc, #140]	; (80071d0 <TIM_Base_SetConfig+0x13c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d108      	bne.n	8007158 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a0a      	ldr	r2, [pc, #40]	; (80071a8 <TIM_Base_SetConfig+0x114>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d003      	beq.n	800718c <TIM_Base_SetConfig+0xf8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a0c      	ldr	r2, [pc, #48]	; (80071b8 <TIM_Base_SetConfig+0x124>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d103      	bne.n	8007194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	615a      	str	r2, [r3, #20]
}
 800719a:	bf00      	nop
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40010000 	.word	0x40010000
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800
 80071b4:	40000c00 	.word	0x40000c00
 80071b8:	40010400 	.word	0x40010400
 80071bc:	40014000 	.word	0x40014000
 80071c0:	40014400 	.word	0x40014400
 80071c4:	40014800 	.word	0x40014800
 80071c8:	40001800 	.word	0x40001800
 80071cc:	40001c00 	.word	0x40001c00
 80071d0:	40002000 	.word	0x40002000

080071d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	f023 0201 	bic.w	r2, r3, #1
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f023 030a 	bic.w	r3, r3, #10
 8007210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	f023 0210 	bic.w	r2, r3, #16
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800725c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	031b      	lsls	r3, r3, #12
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4313      	orrs	r3, r2
 8007266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800726e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	621a      	str	r2, [r3, #32]
}
 8007286:	bf00      	nop
 8007288:	371c      	adds	r7, #28
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007292:	b480      	push	{r7}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	f043 0307 	orr.w	r3, r3, #7
 80072b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	609a      	str	r2, [r3, #8]
}
 80072bc:	bf00      	nop
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	021a      	lsls	r2, r3, #8
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	609a      	str	r2, [r3, #8]
}
 80072fc:	bf00      	nop
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800731c:	2302      	movs	r3, #2
 800731e:	e05a      	b.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a21      	ldr	r2, [pc, #132]	; (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d022      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736c:	d01d      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1d      	ldr	r2, [pc, #116]	; (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d018      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1b      	ldr	r2, [pc, #108]	; (80073ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1a      	ldr	r2, [pc, #104]	; (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00e      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a18      	ldr	r2, [pc, #96]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d009      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a17      	ldr	r2, [pc, #92]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d004      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a15      	ldr	r2, [pc, #84]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d10c      	bne.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800
 80073f0:	40000c00 	.word	0x40000c00
 80073f4:	40010400 	.word	0x40010400
 80073f8:	40014000 	.word	0x40014000
 80073fc:	40001800 	.word	0x40001800

08007400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e03f      	b.n	80074ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fc f81a 	bl	8003488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2224      	movs	r2, #36	; 0x24
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800746a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fe27 	bl	80080c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	695a      	ldr	r2, [r3, #20]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	4613      	mov	r3, r2
 80074ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d11d      	bne.n	8007518 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <HAL_UART_Receive_IT+0x26>
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e016      	b.n	800751a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <HAL_UART_Receive_IT+0x38>
 80074f6:	2302      	movs	r3, #2
 80074f8:	e00f      	b.n	800751a <HAL_UART_Receive_IT+0x58>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007508:	88fb      	ldrh	r3, [r7, #6]
 800750a:	461a      	mov	r2, r3
 800750c:	68b9      	ldr	r1, [r7, #8]
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f000 fbd9 	bl	8007cc6 <UART_Start_Receive_IT>
 8007514:	4603      	mov	r3, r0
 8007516:	e000      	b.n	800751a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007518:	2302      	movs	r3, #2
  }
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08c      	sub	sp, #48	; 0x30
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	4613      	mov	r3, r2
 8007530:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b20      	cmp	r3, #32
 800753c:	d165      	bne.n	800760a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_UART_Transmit_DMA+0x26>
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e05e      	b.n	800760c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <HAL_UART_Transmit_DMA+0x38>
 8007558:	2302      	movs	r3, #2
 800755a:	e057      	b.n	800760c <HAL_UART_Transmit_DMA+0xe8>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	88fa      	ldrh	r2, [r7, #6]
 800756e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	88fa      	ldrh	r2, [r7, #6]
 8007574:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2221      	movs	r2, #33	; 0x21
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007588:	4a22      	ldr	r2, [pc, #136]	; (8007614 <HAL_UART_Transmit_DMA+0xf0>)
 800758a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007590:	4a21      	ldr	r2, [pc, #132]	; (8007618 <HAL_UART_Transmit_DMA+0xf4>)
 8007592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007598:	4a20      	ldr	r2, [pc, #128]	; (800761c <HAL_UART_Transmit_DMA+0xf8>)
 800759a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a0:	2200      	movs	r2, #0
 80075a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80075a4:	f107 0308 	add.w	r3, r7, #8
 80075a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	6819      	ldr	r1, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3304      	adds	r3, #4
 80075b8:	461a      	mov	r2, r3
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	f7fc fb6c 	bl	8003c98 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075c8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3314      	adds	r3, #20
 80075d8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	617b      	str	r3, [r7, #20]
   return(result);
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3314      	adds	r3, #20
 80075f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075f2:	627a      	str	r2, [r7, #36]	; 0x24
 80075f4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	6a39      	ldr	r1, [r7, #32]
 80075f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e5      	bne.n	80075d2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	e000      	b.n	800760c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800760a:	2302      	movs	r3, #2
  }
}
 800760c:	4618      	mov	r0, r3
 800760e:	3730      	adds	r7, #48	; 0x30
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	08007b7d 	.word	0x08007b7d
 8007618:	08007c17 	.word	0x08007c17
 800761c:	08007c33 	.word	0x08007c33

08007620 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b0ba      	sub	sp, #232	; 0xe8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007646:	2300      	movs	r3, #0
 8007648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800764c:	2300      	movs	r3, #0
 800764e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800765e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10f      	bne.n	8007686 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <HAL_UART_IRQHandler+0x66>
 8007672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fc62 	bl	8007f48 <UART_Receive_IT>
      return;
 8007684:	e256      	b.n	8007b34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 80de 	beq.w	800784c <HAL_UART_IRQHandler+0x22c>
 8007690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d106      	bne.n	80076aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800769c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 80d1 	beq.w	800784c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00b      	beq.n	80076ce <HAL_UART_IRQHandler+0xae>
 80076b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	f043 0201 	orr.w	r2, r3, #1
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <HAL_UART_IRQHandler+0xd2>
 80076da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f043 0202 	orr.w	r2, r3, #2
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <HAL_UART_IRQHandler+0xf6>
 80076fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f043 0204 	orr.w	r2, r3, #4
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d011      	beq.n	8007746 <HAL_UART_IRQHandler+0x126>
 8007722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	d105      	bne.n	800773a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800772e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d005      	beq.n	8007746 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	f043 0208 	orr.w	r2, r3, #8
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 81ed 	beq.w	8007b2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	2b00      	cmp	r3, #0
 800775a:	d008      	beq.n	800776e <HAL_UART_IRQHandler+0x14e>
 800775c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fbed 	bl	8007f48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	bf0c      	ite	eq
 800777c:	2301      	moveq	r3, #1
 800777e:	2300      	movne	r3, #0
 8007780:	b2db      	uxtb	r3, r3
 8007782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <HAL_UART_IRQHandler+0x17a>
 8007792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d04f      	beq.n	800783a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 faf5 	bl	8007d8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d141      	bne.n	8007832 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3314      	adds	r3, #20
 80077b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3314      	adds	r3, #20
 80077d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1d9      	bne.n	80077ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d013      	beq.n	800782a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	4a7d      	ldr	r2, [pc, #500]	; (80079fc <HAL_UART_IRQHandler+0x3dc>)
 8007808:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	4618      	mov	r0, r3
 8007810:	f7fc fb0a 	bl	8003e28 <HAL_DMA_Abort_IT>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d016      	beq.n	8007848 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007828:	e00e      	b.n	8007848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f990 	bl	8007b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007830:	e00a      	b.n	8007848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f98c 	bl	8007b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007838:	e006      	b.n	8007848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f988 	bl	8007b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007846:	e170      	b.n	8007b2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007848:	bf00      	nop
    return;
 800784a:	e16e      	b.n	8007b2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	2b01      	cmp	r3, #1
 8007852:	f040 814a 	bne.w	8007aea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785a:	f003 0310 	and.w	r3, r3, #16
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8143 	beq.w	8007aea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 813c 	beq.w	8007aea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007872:	2300      	movs	r3, #0
 8007874:	60bb      	str	r3, [r7, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60bb      	str	r3, [r7, #8]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	60bb      	str	r3, [r7, #8]
 8007886:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007892:	2b40      	cmp	r3, #64	; 0x40
 8007894:	f040 80b4 	bne.w	8007a00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 8140 	beq.w	8007b2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078b6:	429a      	cmp	r2, r3
 80078b8:	f080 8139 	bcs.w	8007b2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ce:	f000 8088 	beq.w	80079e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	330c      	adds	r3, #12
 80078d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	330c      	adds	r3, #12
 80078fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800790a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1d9      	bne.n	80078d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3314      	adds	r3, #20
 8007924:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800792e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007930:	f023 0301 	bic.w	r3, r3, #1
 8007934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3314      	adds	r3, #20
 800793e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007942:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007946:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800794a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e1      	bne.n	800791e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3314      	adds	r3, #20
 8007960:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800796a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800796c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3314      	adds	r3, #20
 800797a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800797e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007980:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007984:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800798c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e3      	bne.n	800795a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	330c      	adds	r3, #12
 80079a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b2:	f023 0310 	bic.w	r3, r3, #16
 80079b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	330c      	adds	r3, #12
 80079c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80079c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e3      	bne.n	80079a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fc f9b3 	bl	8003d48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f8b6 	bl	8007b64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079f8:	e099      	b.n	8007b2e <HAL_UART_IRQHandler+0x50e>
 80079fa:	bf00      	nop
 80079fc:	08007e51 	.word	0x08007e51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 808b 	beq.w	8007b32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8086 	beq.w	8007b32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330c      	adds	r3, #12
 8007a46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a4a:	647a      	str	r2, [r7, #68]	; 0x44
 8007a4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e3      	bne.n	8007a26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3314      	adds	r3, #20
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	f023 0301 	bic.w	r3, r3, #1
 8007a74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3314      	adds	r3, #20
 8007a7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a82:	633a      	str	r2, [r7, #48]	; 0x30
 8007a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e3      	bne.n	8007a5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	330c      	adds	r3, #12
 8007aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 0310 	bic.w	r3, r3, #16
 8007aba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	330c      	adds	r3, #12
 8007ac4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ac8:	61fa      	str	r2, [r7, #28]
 8007aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	69b9      	ldr	r1, [r7, #24]
 8007ace:	69fa      	ldr	r2, [r7, #28]
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e3      	bne.n	8007aa4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f83e 	bl	8007b64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ae8:	e023      	b.n	8007b32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d009      	beq.n	8007b0a <HAL_UART_IRQHandler+0x4ea>
 8007af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f9b8 	bl	8007e78 <UART_Transmit_IT>
    return;
 8007b08:	e014      	b.n	8007b34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00e      	beq.n	8007b34 <HAL_UART_IRQHandler+0x514>
 8007b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d008      	beq.n	8007b34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f9f8 	bl	8007f18 <UART_EndTransmit_IT>
    return;
 8007b28:	e004      	b.n	8007b34 <HAL_UART_IRQHandler+0x514>
    return;
 8007b2a:	bf00      	nop
 8007b2c:	e002      	b.n	8007b34 <HAL_UART_IRQHandler+0x514>
      return;
 8007b2e:	bf00      	nop
 8007b30:	e000      	b.n	8007b34 <HAL_UART_IRQHandler+0x514>
      return;
 8007b32:	bf00      	nop
  }
}
 8007b34:	37e8      	adds	r7, #232	; 0xe8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop

08007b3c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b090      	sub	sp, #64	; 0x40
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d137      	bne.n	8007c08 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3314      	adds	r3, #20
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	623b      	str	r3, [r7, #32]
   return(result);
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3314      	adds	r3, #20
 8007bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bbe:	633a      	str	r2, [r7, #48]	; 0x30
 8007bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	330c      	adds	r3, #12
 8007bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007be8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	330c      	adds	r3, #12
 8007bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bf2:	61fa      	str	r2, [r7, #28]
 8007bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	69b9      	ldr	r1, [r7, #24]
 8007bf8:	69fa      	ldr	r2, [r7, #28]
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e5      	bne.n	8007bd2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c06:	e002      	b.n	8007c0e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007c08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c0a:	f7fa f983 	bl	8001f14 <HAL_UART_TxCpltCallback>
}
 8007c0e:	bf00      	nop
 8007c10:	3740      	adds	r7, #64	; 0x40
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff ff89 	bl	8007b3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4e:	2b80      	cmp	r3, #128	; 0x80
 8007c50:	bf0c      	ite	eq
 8007c52:	2301      	moveq	r3, #1
 8007c54:	2300      	movne	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b21      	cmp	r3, #33	; 0x21
 8007c64:	d108      	bne.n	8007c78 <UART_DMAError+0x46>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007c72:	68b8      	ldr	r0, [r7, #8]
 8007c74:	f000 f861 	bl	8007d3a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c82:	2b40      	cmp	r3, #64	; 0x40
 8007c84:	bf0c      	ite	eq
 8007c86:	2301      	moveq	r3, #1
 8007c88:	2300      	movne	r3, #0
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b22      	cmp	r3, #34	; 0x22
 8007c98:	d108      	bne.n	8007cac <UART_DMAError+0x7a>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007ca6:	68b8      	ldr	r0, [r7, #8]
 8007ca8:	f000 f86f 	bl	8007d8a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	f043 0210 	orr.w	r2, r3, #16
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cb8:	68b8      	ldr	r0, [r7, #8]
 8007cba:	f7ff ff49 	bl	8007b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b085      	sub	sp, #20
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	88fa      	ldrh	r2, [r7, #6]
 8007cde:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	88fa      	ldrh	r2, [r7, #6]
 8007ce4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2222      	movs	r2, #34	; 0x22
 8007cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d0a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695a      	ldr	r2, [r3, #20]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0201 	orr.w	r2, r2, #1
 8007d1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0220 	orr.w	r2, r2, #32
 8007d2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b089      	sub	sp, #36	; 0x24
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	330c      	adds	r3, #12
 8007d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d58:	61fb      	str	r3, [r7, #28]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	330c      	adds	r3, #12
 8007d60:	69fa      	ldr	r2, [r7, #28]
 8007d62:	61ba      	str	r2, [r7, #24]
 8007d64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6979      	ldr	r1, [r7, #20]
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e5      	bne.n	8007d42 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007d7e:	bf00      	nop
 8007d80:	3724      	adds	r7, #36	; 0x24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b095      	sub	sp, #84	; 0x54
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	330c      	adds	r3, #12
 8007d98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	330c      	adds	r3, #12
 8007db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007db2:	643a      	str	r2, [r7, #64]	; 0x40
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007db8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e5      	bne.n	8007d92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3314      	adds	r3, #20
 8007dcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3314      	adds	r3, #20
 8007de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007de8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e5      	bne.n	8007dc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d119      	bne.n	8007e36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	330c      	adds	r3, #12
 8007e08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f023 0310 	bic.w	r3, r3, #16
 8007e18:	647b      	str	r3, [r7, #68]	; 0x44
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	330c      	adds	r3, #12
 8007e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e22:	61ba      	str	r2, [r7, #24]
 8007e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	6979      	ldr	r1, [r7, #20]
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e5      	bne.n	8007e02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e44:	bf00      	nop
 8007e46:	3754      	adds	r7, #84	; 0x54
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f7ff fe70 	bl	8007b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e70:	bf00      	nop
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b21      	cmp	r3, #33	; 0x21
 8007e8a:	d13e      	bne.n	8007f0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e94:	d114      	bne.n	8007ec0 <UART_Transmit_IT+0x48>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d110      	bne.n	8007ec0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	1c9a      	adds	r2, r3, #2
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	621a      	str	r2, [r3, #32]
 8007ebe:	e008      	b.n	8007ed2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	1c59      	adds	r1, r3, #1
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6211      	str	r1, [r2, #32]
 8007eca:	781a      	ldrb	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10f      	bne.n	8007f06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68da      	ldr	r2, [r3, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ef4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	e000      	b.n	8007f0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f0a:	2302      	movs	r3, #2
  }
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7f9 ffeb 	bl	8001f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08c      	sub	sp, #48	; 0x30
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b22      	cmp	r3, #34	; 0x22
 8007f5a:	f040 80ab 	bne.w	80080b4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f66:	d117      	bne.n	8007f98 <UART_Receive_IT+0x50>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d113      	bne.n	8007f98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f78:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	1c9a      	adds	r2, r3, #2
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	629a      	str	r2, [r3, #40]	; 0x28
 8007f96:	e026      	b.n	8007fe6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007faa:	d007      	beq.n	8007fbc <UART_Receive_IT+0x74>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10a      	bne.n	8007fca <UART_Receive_IT+0x82>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d106      	bne.n	8007fca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e008      	b.n	8007fdc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d15a      	bne.n	80080b0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0220 	bic.w	r2, r2, #32
 8008008:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008018:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	695a      	ldr	r2, [r3, #20]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0201 	bic.w	r2, r2, #1
 8008028:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2220      	movs	r2, #32
 800802e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008036:	2b01      	cmp	r3, #1
 8008038:	d135      	bne.n	80080a6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	330c      	adds	r3, #12
 8008046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	613b      	str	r3, [r7, #16]
   return(result);
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f023 0310 	bic.w	r3, r3, #16
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	330c      	adds	r3, #12
 800805e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008060:	623a      	str	r2, [r7, #32]
 8008062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	69f9      	ldr	r1, [r7, #28]
 8008066:	6a3a      	ldr	r2, [r7, #32]
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	61bb      	str	r3, [r7, #24]
   return(result);
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e5      	bne.n	8008040 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	2b10      	cmp	r3, #16
 8008080:	d10a      	bne.n	8008098 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff fd60 	bl	8007b64 <HAL_UARTEx_RxEventCallback>
 80080a4:	e002      	b.n	80080ac <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7f9 fcde 	bl	8001a68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	e002      	b.n	80080b6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	e000      	b.n	80080b6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080b4:	2302      	movs	r3, #2
  }
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3730      	adds	r7, #48	; 0x30
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080c4:	b0c0      	sub	sp, #256	; 0x100
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080dc:	68d9      	ldr	r1, [r3, #12]
 80080de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	ea40 0301 	orr.w	r3, r0, r1
 80080e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	431a      	orrs	r2, r3
 8008100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	4313      	orrs	r3, r2
 8008108:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008118:	f021 010c 	bic.w	r1, r1, #12
 800811c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008126:	430b      	orrs	r3, r1
 8008128:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800812a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800813a:	6999      	ldr	r1, [r3, #24]
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	ea40 0301 	orr.w	r3, r0, r1
 8008146:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	4b8f      	ldr	r3, [pc, #572]	; (800838c <UART_SetConfig+0x2cc>)
 8008150:	429a      	cmp	r2, r3
 8008152:	d005      	beq.n	8008160 <UART_SetConfig+0xa0>
 8008154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b8d      	ldr	r3, [pc, #564]	; (8008390 <UART_SetConfig+0x2d0>)
 800815c:	429a      	cmp	r2, r3
 800815e:	d104      	bne.n	800816a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008160:	f7fd fb96 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 8008164:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008168:	e003      	b.n	8008172 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800816a:	f7fd fb7d 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 800816e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800817c:	f040 810c 	bne.w	8008398 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008184:	2200      	movs	r2, #0
 8008186:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800818a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800818e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008192:	4622      	mov	r2, r4
 8008194:	462b      	mov	r3, r5
 8008196:	1891      	adds	r1, r2, r2
 8008198:	65b9      	str	r1, [r7, #88]	; 0x58
 800819a:	415b      	adcs	r3, r3
 800819c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800819e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081a2:	4621      	mov	r1, r4
 80081a4:	eb12 0801 	adds.w	r8, r2, r1
 80081a8:	4629      	mov	r1, r5
 80081aa:	eb43 0901 	adc.w	r9, r3, r1
 80081ae:	f04f 0200 	mov.w	r2, #0
 80081b2:	f04f 0300 	mov.w	r3, #0
 80081b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081c2:	4690      	mov	r8, r2
 80081c4:	4699      	mov	r9, r3
 80081c6:	4623      	mov	r3, r4
 80081c8:	eb18 0303 	adds.w	r3, r8, r3
 80081cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081d0:	462b      	mov	r3, r5
 80081d2:	eb49 0303 	adc.w	r3, r9, r3
 80081d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081ee:	460b      	mov	r3, r1
 80081f0:	18db      	adds	r3, r3, r3
 80081f2:	653b      	str	r3, [r7, #80]	; 0x50
 80081f4:	4613      	mov	r3, r2
 80081f6:	eb42 0303 	adc.w	r3, r2, r3
 80081fa:	657b      	str	r3, [r7, #84]	; 0x54
 80081fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008200:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008204:	f7f8 fb92 	bl	800092c <__aeabi_uldivmod>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4b61      	ldr	r3, [pc, #388]	; (8008394 <UART_SetConfig+0x2d4>)
 800820e:	fba3 2302 	umull	r2, r3, r3, r2
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	011c      	lsls	r4, r3, #4
 8008216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800821a:	2200      	movs	r2, #0
 800821c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008220:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008224:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008228:	4642      	mov	r2, r8
 800822a:	464b      	mov	r3, r9
 800822c:	1891      	adds	r1, r2, r2
 800822e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008230:	415b      	adcs	r3, r3
 8008232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008234:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008238:	4641      	mov	r1, r8
 800823a:	eb12 0a01 	adds.w	sl, r2, r1
 800823e:	4649      	mov	r1, r9
 8008240:	eb43 0b01 	adc.w	fp, r3, r1
 8008244:	f04f 0200 	mov.w	r2, #0
 8008248:	f04f 0300 	mov.w	r3, #0
 800824c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008250:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008258:	4692      	mov	sl, r2
 800825a:	469b      	mov	fp, r3
 800825c:	4643      	mov	r3, r8
 800825e:	eb1a 0303 	adds.w	r3, sl, r3
 8008262:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008266:	464b      	mov	r3, r9
 8008268:	eb4b 0303 	adc.w	r3, fp, r3
 800826c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800827c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008280:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008284:	460b      	mov	r3, r1
 8008286:	18db      	adds	r3, r3, r3
 8008288:	643b      	str	r3, [r7, #64]	; 0x40
 800828a:	4613      	mov	r3, r2
 800828c:	eb42 0303 	adc.w	r3, r2, r3
 8008290:	647b      	str	r3, [r7, #68]	; 0x44
 8008292:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008296:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800829a:	f7f8 fb47 	bl	800092c <__aeabi_uldivmod>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	4b3b      	ldr	r3, [pc, #236]	; (8008394 <UART_SetConfig+0x2d4>)
 80082a6:	fba3 2301 	umull	r2, r3, r3, r1
 80082aa:	095b      	lsrs	r3, r3, #5
 80082ac:	2264      	movs	r2, #100	; 0x64
 80082ae:	fb02 f303 	mul.w	r3, r2, r3
 80082b2:	1acb      	subs	r3, r1, r3
 80082b4:	00db      	lsls	r3, r3, #3
 80082b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082ba:	4b36      	ldr	r3, [pc, #216]	; (8008394 <UART_SetConfig+0x2d4>)
 80082bc:	fba3 2302 	umull	r2, r3, r3, r2
 80082c0:	095b      	lsrs	r3, r3, #5
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082c8:	441c      	add	r4, r3
 80082ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082dc:	4642      	mov	r2, r8
 80082de:	464b      	mov	r3, r9
 80082e0:	1891      	adds	r1, r2, r2
 80082e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80082e4:	415b      	adcs	r3, r3
 80082e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082ec:	4641      	mov	r1, r8
 80082ee:	1851      	adds	r1, r2, r1
 80082f0:	6339      	str	r1, [r7, #48]	; 0x30
 80082f2:	4649      	mov	r1, r9
 80082f4:	414b      	adcs	r3, r1
 80082f6:	637b      	str	r3, [r7, #52]	; 0x34
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	f04f 0300 	mov.w	r3, #0
 8008300:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008304:	4659      	mov	r1, fp
 8008306:	00cb      	lsls	r3, r1, #3
 8008308:	4651      	mov	r1, sl
 800830a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800830e:	4651      	mov	r1, sl
 8008310:	00ca      	lsls	r2, r1, #3
 8008312:	4610      	mov	r0, r2
 8008314:	4619      	mov	r1, r3
 8008316:	4603      	mov	r3, r0
 8008318:	4642      	mov	r2, r8
 800831a:	189b      	adds	r3, r3, r2
 800831c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008320:	464b      	mov	r3, r9
 8008322:	460a      	mov	r2, r1
 8008324:	eb42 0303 	adc.w	r3, r2, r3
 8008328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008338:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800833c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008340:	460b      	mov	r3, r1
 8008342:	18db      	adds	r3, r3, r3
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28
 8008346:	4613      	mov	r3, r2
 8008348:	eb42 0303 	adc.w	r3, r2, r3
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800834e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008352:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008356:	f7f8 fae9 	bl	800092c <__aeabi_uldivmod>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <UART_SetConfig+0x2d4>)
 8008360:	fba3 1302 	umull	r1, r3, r3, r2
 8008364:	095b      	lsrs	r3, r3, #5
 8008366:	2164      	movs	r1, #100	; 0x64
 8008368:	fb01 f303 	mul.w	r3, r1, r3
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	3332      	adds	r3, #50	; 0x32
 8008372:	4a08      	ldr	r2, [pc, #32]	; (8008394 <UART_SetConfig+0x2d4>)
 8008374:	fba2 2303 	umull	r2, r3, r2, r3
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	f003 0207 	and.w	r2, r3, #7
 800837e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4422      	add	r2, r4
 8008386:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008388:	e105      	b.n	8008596 <UART_SetConfig+0x4d6>
 800838a:	bf00      	nop
 800838c:	40011000 	.word	0x40011000
 8008390:	40011400 	.word	0x40011400
 8008394:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800839c:	2200      	movs	r2, #0
 800839e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083aa:	4642      	mov	r2, r8
 80083ac:	464b      	mov	r3, r9
 80083ae:	1891      	adds	r1, r2, r2
 80083b0:	6239      	str	r1, [r7, #32]
 80083b2:	415b      	adcs	r3, r3
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
 80083b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083ba:	4641      	mov	r1, r8
 80083bc:	1854      	adds	r4, r2, r1
 80083be:	4649      	mov	r1, r9
 80083c0:	eb43 0501 	adc.w	r5, r3, r1
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	00eb      	lsls	r3, r5, #3
 80083ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083d2:	00e2      	lsls	r2, r4, #3
 80083d4:	4614      	mov	r4, r2
 80083d6:	461d      	mov	r5, r3
 80083d8:	4643      	mov	r3, r8
 80083da:	18e3      	adds	r3, r4, r3
 80083dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083e0:	464b      	mov	r3, r9
 80083e2:	eb45 0303 	adc.w	r3, r5, r3
 80083e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083fa:	f04f 0200 	mov.w	r2, #0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008406:	4629      	mov	r1, r5
 8008408:	008b      	lsls	r3, r1, #2
 800840a:	4621      	mov	r1, r4
 800840c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008410:	4621      	mov	r1, r4
 8008412:	008a      	lsls	r2, r1, #2
 8008414:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008418:	f7f8 fa88 	bl	800092c <__aeabi_uldivmod>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4b60      	ldr	r3, [pc, #384]	; (80085a4 <UART_SetConfig+0x4e4>)
 8008422:	fba3 2302 	umull	r2, r3, r3, r2
 8008426:	095b      	lsrs	r3, r3, #5
 8008428:	011c      	lsls	r4, r3, #4
 800842a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800842e:	2200      	movs	r2, #0
 8008430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008434:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008438:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800843c:	4642      	mov	r2, r8
 800843e:	464b      	mov	r3, r9
 8008440:	1891      	adds	r1, r2, r2
 8008442:	61b9      	str	r1, [r7, #24]
 8008444:	415b      	adcs	r3, r3
 8008446:	61fb      	str	r3, [r7, #28]
 8008448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800844c:	4641      	mov	r1, r8
 800844e:	1851      	adds	r1, r2, r1
 8008450:	6139      	str	r1, [r7, #16]
 8008452:	4649      	mov	r1, r9
 8008454:	414b      	adcs	r3, r1
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	f04f 0200 	mov.w	r2, #0
 800845c:	f04f 0300 	mov.w	r3, #0
 8008460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008464:	4659      	mov	r1, fp
 8008466:	00cb      	lsls	r3, r1, #3
 8008468:	4651      	mov	r1, sl
 800846a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800846e:	4651      	mov	r1, sl
 8008470:	00ca      	lsls	r2, r1, #3
 8008472:	4610      	mov	r0, r2
 8008474:	4619      	mov	r1, r3
 8008476:	4603      	mov	r3, r0
 8008478:	4642      	mov	r2, r8
 800847a:	189b      	adds	r3, r3, r2
 800847c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008480:	464b      	mov	r3, r9
 8008482:	460a      	mov	r2, r1
 8008484:	eb42 0303 	adc.w	r3, r2, r3
 8008488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	67bb      	str	r3, [r7, #120]	; 0x78
 8008496:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084a4:	4649      	mov	r1, r9
 80084a6:	008b      	lsls	r3, r1, #2
 80084a8:	4641      	mov	r1, r8
 80084aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084ae:	4641      	mov	r1, r8
 80084b0:	008a      	lsls	r2, r1, #2
 80084b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084b6:	f7f8 fa39 	bl	800092c <__aeabi_uldivmod>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4b39      	ldr	r3, [pc, #228]	; (80085a4 <UART_SetConfig+0x4e4>)
 80084c0:	fba3 1302 	umull	r1, r3, r3, r2
 80084c4:	095b      	lsrs	r3, r3, #5
 80084c6:	2164      	movs	r1, #100	; 0x64
 80084c8:	fb01 f303 	mul.w	r3, r1, r3
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	3332      	adds	r3, #50	; 0x32
 80084d2:	4a34      	ldr	r2, [pc, #208]	; (80085a4 <UART_SetConfig+0x4e4>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	095b      	lsrs	r3, r3, #5
 80084da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084de:	441c      	add	r4, r3
 80084e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084e4:	2200      	movs	r2, #0
 80084e6:	673b      	str	r3, [r7, #112]	; 0x70
 80084e8:	677a      	str	r2, [r7, #116]	; 0x74
 80084ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084ee:	4642      	mov	r2, r8
 80084f0:	464b      	mov	r3, r9
 80084f2:	1891      	adds	r1, r2, r2
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	415b      	adcs	r3, r3
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084fe:	4641      	mov	r1, r8
 8008500:	1851      	adds	r1, r2, r1
 8008502:	6039      	str	r1, [r7, #0]
 8008504:	4649      	mov	r1, r9
 8008506:	414b      	adcs	r3, r1
 8008508:	607b      	str	r3, [r7, #4]
 800850a:	f04f 0200 	mov.w	r2, #0
 800850e:	f04f 0300 	mov.w	r3, #0
 8008512:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008516:	4659      	mov	r1, fp
 8008518:	00cb      	lsls	r3, r1, #3
 800851a:	4651      	mov	r1, sl
 800851c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008520:	4651      	mov	r1, sl
 8008522:	00ca      	lsls	r2, r1, #3
 8008524:	4610      	mov	r0, r2
 8008526:	4619      	mov	r1, r3
 8008528:	4603      	mov	r3, r0
 800852a:	4642      	mov	r2, r8
 800852c:	189b      	adds	r3, r3, r2
 800852e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008530:	464b      	mov	r3, r9
 8008532:	460a      	mov	r2, r1
 8008534:	eb42 0303 	adc.w	r3, r2, r3
 8008538:	66fb      	str	r3, [r7, #108]	; 0x6c
 800853a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	663b      	str	r3, [r7, #96]	; 0x60
 8008544:	667a      	str	r2, [r7, #100]	; 0x64
 8008546:	f04f 0200 	mov.w	r2, #0
 800854a:	f04f 0300 	mov.w	r3, #0
 800854e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008552:	4649      	mov	r1, r9
 8008554:	008b      	lsls	r3, r1, #2
 8008556:	4641      	mov	r1, r8
 8008558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800855c:	4641      	mov	r1, r8
 800855e:	008a      	lsls	r2, r1, #2
 8008560:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008564:	f7f8 f9e2 	bl	800092c <__aeabi_uldivmod>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4b0d      	ldr	r3, [pc, #52]	; (80085a4 <UART_SetConfig+0x4e4>)
 800856e:	fba3 1302 	umull	r1, r3, r3, r2
 8008572:	095b      	lsrs	r3, r3, #5
 8008574:	2164      	movs	r1, #100	; 0x64
 8008576:	fb01 f303 	mul.w	r3, r1, r3
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	3332      	adds	r3, #50	; 0x32
 8008580:	4a08      	ldr	r2, [pc, #32]	; (80085a4 <UART_SetConfig+0x4e4>)
 8008582:	fba2 2303 	umull	r2, r3, r2, r3
 8008586:	095b      	lsrs	r3, r3, #5
 8008588:	f003 020f 	and.w	r2, r3, #15
 800858c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4422      	add	r2, r4
 8008594:	609a      	str	r2, [r3, #8]
}
 8008596:	bf00      	nop
 8008598:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800859c:	46bd      	mov	sp, r7
 800859e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085a2:	bf00      	nop
 80085a4:	51eb851f 	.word	0x51eb851f

080085a8 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 80085b2:	2300      	movs	r3, #0
 80085b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b10      	cmp	r3, #16
 80085bc:	d103      	bne.n	80085c6 <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e002      	b.n	80085cc <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4b16      	ldr	r3, [pc, #88]	; (8008628 <FSMC_NAND_Init+0x80>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 80085dc:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 80085e2:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 80085e8:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 80085f0:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80085f8:	431a      	orrs	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	f043 0308 	orr.w	r3, r3, #8
 8008602:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b10      	cmp	r3, #16
 800860a:	d103      	bne.n	8008614 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	e002      	b.n	800861a <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	fff00181 	.word	0xfff00181

0800862c <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8008638:	2300      	movs	r3, #0
 800863a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b10      	cmp	r3, #16
 8008640:	d103      	bne.n	800864a <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	e002      	b.n	8008650 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864e:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8008650:	2300      	movs	r3, #0
 8008652:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 800865e:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8008666:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 800866e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	4313      	orrs	r3, r2
 8008674:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b10      	cmp	r3, #16
 800867a:	d103      	bne.n	8008684 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	609a      	str	r2, [r3, #8]
 8008682:	e002      	b.n	800868a <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 80086a4:	2300      	movs	r3, #0
 80086a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b10      	cmp	r3, #16
 80086ac:	d103      	bne.n	80086b6 <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	e002      	b.n	80086bc <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ba:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 80086bc:	2300      	movs	r3, #0
 80086be:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80086ca:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 80086d2:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 80086da:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	4313      	orrs	r3, r2
 80086e0:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b10      	cmp	r3, #16
 80086e6:	d103      	bne.n	80086f0 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	60da      	str	r2, [r3, #12]
 80086ee:	e002      	b.n	80086f6 <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	371c      	adds	r7, #28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <__NVIC_SetPriority>:
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	6039      	str	r1, [r7, #0]
 800870e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008714:	2b00      	cmp	r3, #0
 8008716:	db0a      	blt.n	800872e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	b2da      	uxtb	r2, r3
 800871c:	490c      	ldr	r1, [pc, #48]	; (8008750 <__NVIC_SetPriority+0x4c>)
 800871e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008722:	0112      	lsls	r2, r2, #4
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	440b      	add	r3, r1
 8008728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800872c:	e00a      	b.n	8008744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	b2da      	uxtb	r2, r3
 8008732:	4908      	ldr	r1, [pc, #32]	; (8008754 <__NVIC_SetPriority+0x50>)
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	f003 030f 	and.w	r3, r3, #15
 800873a:	3b04      	subs	r3, #4
 800873c:	0112      	lsls	r2, r2, #4
 800873e:	b2d2      	uxtb	r2, r2
 8008740:	440b      	add	r3, r1
 8008742:	761a      	strb	r2, [r3, #24]
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	e000e100 	.word	0xe000e100
 8008754:	e000ed00 	.word	0xe000ed00

08008758 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008758:	b580      	push	{r7, lr}
 800875a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800875c:	4b05      	ldr	r3, [pc, #20]	; (8008774 <SysTick_Handler+0x1c>)
 800875e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008760:	f002 f856 	bl	800a810 <xTaskGetSchedulerState>
 8008764:	4603      	mov	r3, r0
 8008766:	2b01      	cmp	r3, #1
 8008768:	d001      	beq.n	800876e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800876a:	f002 fe3d 	bl	800b3e8 <xPortSysTickHandler>
  }
}
 800876e:	bf00      	nop
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	e000e010 	.word	0xe000e010

08008778 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008778:	b580      	push	{r7, lr}
 800877a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800877c:	2100      	movs	r1, #0
 800877e:	f06f 0004 	mvn.w	r0, #4
 8008782:	f7ff ffbf 	bl	8008704 <__NVIC_SetPriority>
#endif
}
 8008786:	bf00      	nop
 8008788:	bd80      	pop	{r7, pc}
	...

0800878c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008792:	f3ef 8305 	mrs	r3, IPSR
 8008796:	603b      	str	r3, [r7, #0]
  return(result);
 8008798:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800879e:	f06f 0305 	mvn.w	r3, #5
 80087a2:	607b      	str	r3, [r7, #4]
 80087a4:	e00f      	b.n	80087c6 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 80087a6:	4b0a      	ldr	r3, [pc, #40]	; (80087d0 <osKernelInitialize+0x44>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d108      	bne.n	80087c0 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 80087ae:	4809      	ldr	r0, [pc, #36]	; (80087d4 <osKernelInitialize+0x48>)
 80087b0:	f003 f816 	bl	800b7e0 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 80087b4:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <osKernelInitialize+0x44>)
 80087b6:	2201      	movs	r2, #1
 80087b8:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	607b      	str	r3, [r7, #4]
 80087be:	e002      	b.n	80087c6 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 80087c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087c4:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087c6:	687b      	ldr	r3, [r7, #4]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000bdc 	.word	0x20000bdc
 80087d4:	20000084 	.word	0x20000084

080087d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087de:	f3ef 8305 	mrs	r3, IPSR
 80087e2:	603b      	str	r3, [r7, #0]
  return(result);
 80087e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80087ea:	f06f 0305 	mvn.w	r3, #5
 80087ee:	607b      	str	r3, [r7, #4]
 80087f0:	e010      	b.n	8008814 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087f2:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <osKernelStart+0x48>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d109      	bne.n	800880e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087fa:	f7ff ffbd 	bl	8008778 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087fe:	4b08      	ldr	r3, [pc, #32]	; (8008820 <osKernelStart+0x48>)
 8008800:	2202      	movs	r2, #2
 8008802:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008804:	f001 fba8 	bl	8009f58 <vTaskStartScheduler>
      stat = osOK;
 8008808:	2300      	movs	r3, #0
 800880a:	607b      	str	r3, [r7, #4]
 800880c:	e002      	b.n	8008814 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800880e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008812:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008814:	687b      	ldr	r3, [r7, #4]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000bdc 	.word	0x20000bdc

08008824 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008824:	b580      	push	{r7, lr}
 8008826:	b08e      	sub	sp, #56	; 0x38
 8008828:	af04      	add	r7, sp, #16
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008830:	2300      	movs	r3, #0
 8008832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008834:	f3ef 8305 	mrs	r3, IPSR
 8008838:	617b      	str	r3, [r7, #20]
  return(result);
 800883a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800883c:	2b00      	cmp	r3, #0
 800883e:	d17e      	bne.n	800893e <osThreadNew+0x11a>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d07b      	beq.n	800893e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008846:	2380      	movs	r3, #128	; 0x80
 8008848:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800884a:	2318      	movs	r3, #24
 800884c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008856:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d045      	beq.n	80088ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d002      	beq.n	800886c <osThreadNew+0x48>
        name = attr->name;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d008      	beq.n	8008892 <osThreadNew+0x6e>
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	2b38      	cmp	r3, #56	; 0x38
 8008884:	d805      	bhi.n	8008892 <osThreadNew+0x6e>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <osThreadNew+0x72>
        return (NULL);
 8008892:	2300      	movs	r3, #0
 8008894:	e054      	b.n	8008940 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	089b      	lsrs	r3, r3, #2
 80088a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00e      	beq.n	80088cc <osThreadNew+0xa8>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	2bbb      	cmp	r3, #187	; 0xbb
 80088b4:	d90a      	bls.n	80088cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d006      	beq.n	80088cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <osThreadNew+0xa8>
        mem = 1;
 80088c6:	2301      	movs	r3, #1
 80088c8:	61bb      	str	r3, [r7, #24]
 80088ca:	e010      	b.n	80088ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10c      	bne.n	80088ee <osThreadNew+0xca>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d108      	bne.n	80088ee <osThreadNew+0xca>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d104      	bne.n	80088ee <osThreadNew+0xca>
          mem = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61bb      	str	r3, [r7, #24]
 80088e8:	e001      	b.n	80088ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d110      	bne.n	8008916 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088fc:	9202      	str	r2, [sp, #8]
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6a3a      	ldr	r2, [r7, #32]
 8008908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f001 f938 	bl	8009b80 <xTaskCreateStatic>
 8008910:	4603      	mov	r3, r0
 8008912:	613b      	str	r3, [r7, #16]
 8008914:	e013      	b.n	800893e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d110      	bne.n	800893e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	b29a      	uxth	r2, r3
 8008920:	f107 0310 	add.w	r3, r7, #16
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f001 f983 	bl	8009c3a <xTaskCreate>
 8008934:	4603      	mov	r3, r0
 8008936:	2b01      	cmp	r3, #1
 8008938:	d001      	beq.n	800893e <osThreadNew+0x11a>
            hTask = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800893e:	693b      	ldr	r3, [r7, #16]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3728      	adds	r7, #40	; 0x28
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008950:	f3ef 8305 	mrs	r3, IPSR
 8008954:	60bb      	str	r3, [r7, #8]
  return(result);
 8008956:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <osDelay+0x1c>
    stat = osErrorISR;
 800895c:	f06f 0305 	mvn.w	r3, #5
 8008960:	60fb      	str	r3, [r7, #12]
 8008962:	e007      	b.n	8008974 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008964:	2300      	movs	r3, #0
 8008966:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <osDelay+0x2c>
      vTaskDelay(ticks);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 fabe 	bl	8009ef0 <vTaskDelay>
    }
  }

  return (stat);
 8008974:	68fb      	ldr	r3, [r7, #12]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800897e:	b580      	push	{r7, lr}
 8008980:	b08a      	sub	sp, #40	; 0x28
 8008982:	af02      	add	r7, sp, #8
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800898e:	f3ef 8305 	mrs	r3, IPSR
 8008992:	613b      	str	r3, [r7, #16]
  return(result);
 8008994:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008996:	2b00      	cmp	r3, #0
 8008998:	d175      	bne.n	8008a86 <osSemaphoreNew+0x108>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d072      	beq.n	8008a86 <osSemaphoreNew+0x108>
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d86e      	bhi.n	8008a86 <osSemaphoreNew+0x108>
    mem = -1;
 80089a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d015      	beq.n	80089e0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d006      	beq.n	80089ca <osSemaphoreNew+0x4c>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	2b4f      	cmp	r3, #79	; 0x4f
 80089c2:	d902      	bls.n	80089ca <osSemaphoreNew+0x4c>
        mem = 1;
 80089c4:	2301      	movs	r3, #1
 80089c6:	61bb      	str	r3, [r7, #24]
 80089c8:	e00c      	b.n	80089e4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d108      	bne.n	80089e4 <osSemaphoreNew+0x66>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d104      	bne.n	80089e4 <osSemaphoreNew+0x66>
          mem = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	61bb      	str	r3, [r7, #24]
 80089de:	e001      	b.n	80089e4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ea:	d04c      	beq.n	8008a86 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d128      	bne.n	8008a44 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d10a      	bne.n	8008a0e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	2203      	movs	r2, #3
 80089fe:	9200      	str	r2, [sp, #0]
 8008a00:	2200      	movs	r2, #0
 8008a02:	2100      	movs	r1, #0
 8008a04:	2001      	movs	r0, #1
 8008a06:	f000 fac5 	bl	8008f94 <xQueueGenericCreateStatic>
 8008a0a:	61f8      	str	r0, [r7, #28]
 8008a0c:	e005      	b.n	8008a1a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008a0e:	2203      	movs	r2, #3
 8008a10:	2100      	movs	r1, #0
 8008a12:	2001      	movs	r0, #1
 8008a14:	f000 fb36 	bl	8009084 <xQueueGenericCreate>
 8008a18:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d022      	beq.n	8008a66 <osSemaphoreNew+0xe8>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d01f      	beq.n	8008a66 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008a26:	2300      	movs	r3, #0
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	69f8      	ldr	r0, [r7, #28]
 8008a2e:	f000 fbf1 	bl	8009214 <xQueueGenericSend>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d016      	beq.n	8008a66 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008a38:	69f8      	ldr	r0, [r7, #28]
 8008a3a:	f000 fee5 	bl	8009808 <vQueueDelete>
            hSemaphore = NULL;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	61fb      	str	r3, [r7, #28]
 8008a42:	e010      	b.n	8008a66 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d108      	bne.n	8008a5c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 fb73 	bl	800913e <xQueueCreateCountingSemaphoreStatic>
 8008a58:	61f8      	str	r0, [r7, #28]
 8008a5a:	e004      	b.n	8008a66 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008a5c:	68b9      	ldr	r1, [r7, #8]
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f000 fba4 	bl	80091ac <xQueueCreateCountingSemaphore>
 8008a64:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00c      	beq.n	8008a86 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <osSemaphoreNew+0xfc>
          name = attr->name;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	e001      	b.n	8008a7e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008a7e:	6979      	ldr	r1, [r7, #20]
 8008a80:	69f8      	ldr	r0, [r7, #28]
 8008a82:	f000 fff5 	bl	8009a70 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008a86:	69fb      	ldr	r3, [r7, #28]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3720      	adds	r7, #32
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08a      	sub	sp, #40	; 0x28
 8008a94:	af02      	add	r7, sp, #8
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008aa0:	f3ef 8305 	mrs	r3, IPSR
 8008aa4:	613b      	str	r3, [r7, #16]
  return(result);
 8008aa6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d15f      	bne.n	8008b6c <osMessageQueueNew+0xdc>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d05c      	beq.n	8008b6c <osMessageQueueNew+0xdc>
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d059      	beq.n	8008b6c <osMessageQueueNew+0xdc>
    mem = -1;
 8008ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008abc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d029      	beq.n	8008b18 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d012      	beq.n	8008af2 <osMessageQueueNew+0x62>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	2b4f      	cmp	r3, #79	; 0x4f
 8008ad2:	d90e      	bls.n	8008af2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	695a      	ldr	r2, [r3, #20]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	68b9      	ldr	r1, [r7, #8]
 8008ae4:	fb01 f303 	mul.w	r3, r1, r3
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d302      	bcc.n	8008af2 <osMessageQueueNew+0x62>
        mem = 1;
 8008aec:	2301      	movs	r3, #1
 8008aee:	61bb      	str	r3, [r7, #24]
 8008af0:	e014      	b.n	8008b1c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d110      	bne.n	8008b1c <osMessageQueueNew+0x8c>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10c      	bne.n	8008b1c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d108      	bne.n	8008b1c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d104      	bne.n	8008b1c <osMessageQueueNew+0x8c>
          mem = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	61bb      	str	r3, [r7, #24]
 8008b16:	e001      	b.n	8008b1c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d10b      	bne.n	8008b3a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691a      	ldr	r2, [r3, #16]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	9100      	str	r1, [sp, #0]
 8008b2e:	68b9      	ldr	r1, [r7, #8]
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fa2f 	bl	8008f94 <xQueueGenericCreateStatic>
 8008b36:	61f8      	str	r0, [r7, #28]
 8008b38:	e008      	b.n	8008b4c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d105      	bne.n	8008b4c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008b40:	2200      	movs	r2, #0
 8008b42:	68b9      	ldr	r1, [r7, #8]
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 fa9d 	bl	8009084 <xQueueGenericCreate>
 8008b4a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00c      	beq.n	8008b6c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	617b      	str	r3, [r7, #20]
 8008b5e:	e001      	b.n	8008b64 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008b64:	6979      	ldr	r1, [r7, #20]
 8008b66:	69f8      	ldr	r0, [r7, #28]
 8008b68:	f000 ff82 	bl	8009a70 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008b6c:	69fb      	ldr	r3, [r7, #28]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3720      	adds	r7, #32
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	4613      	mov	r3, r2
 8008b86:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b90:	f3ef 8305 	mrs	r3, IPSR
 8008b94:	617b      	str	r3, [r7, #20]
  return(result);
 8008b96:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d028      	beq.n	8008bee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <osMessageQueuePut+0x36>
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <osMessageQueuePut+0x36>
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008bae:	f06f 0303 	mvn.w	r3, #3
 8008bb2:	61fb      	str	r3, [r7, #28]
 8008bb4:	e038      	b.n	8008c28 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008bba:	f107 0210 	add.w	r2, r7, #16
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	68b9      	ldr	r1, [r7, #8]
 8008bc2:	69b8      	ldr	r0, [r7, #24]
 8008bc4:	f000 fc24 	bl	8009410 <xQueueGenericSendFromISR>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d003      	beq.n	8008bd6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008bce:	f06f 0302 	mvn.w	r3, #2
 8008bd2:	61fb      	str	r3, [r7, #28]
 8008bd4:	e028      	b.n	8008c28 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d025      	beq.n	8008c28 <osMessageQueuePut+0xb0>
 8008bdc:	4b15      	ldr	r3, [pc, #84]	; (8008c34 <osMessageQueuePut+0xbc>)
 8008bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	e01c      	b.n	8008c28 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <osMessageQueuePut+0x82>
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d103      	bne.n	8008c02 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008bfa:	f06f 0303 	mvn.w	r3, #3
 8008bfe:	61fb      	str	r3, [r7, #28]
 8008c00:	e012      	b.n	8008c28 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008c02:	2300      	movs	r3, #0
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	69b8      	ldr	r0, [r7, #24]
 8008c0a:	f000 fb03 	bl	8009214 <xQueueGenericSend>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d009      	beq.n	8008c28 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008c1a:	f06f 0301 	mvn.w	r3, #1
 8008c1e:	61fb      	str	r3, [r7, #28]
 8008c20:	e002      	b.n	8008c28 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008c22:	f06f 0302 	mvn.w	r3, #2
 8008c26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008c28:	69fb      	ldr	r3, [r7, #28]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3720      	adds	r7, #32
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	e000ed04 	.word	0xe000ed04

08008c38 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c4e:	f3ef 8305 	mrs	r3, IPSR
 8008c52:	617b      	str	r3, [r7, #20]
  return(result);
 8008c54:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d028      	beq.n	8008cac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <osMessageQueueGet+0x34>
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <osMessageQueueGet+0x34>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008c6c:	f06f 0303 	mvn.w	r3, #3
 8008c70:	61fb      	str	r3, [r7, #28]
 8008c72:	e037      	b.n	8008ce4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008c74:	2300      	movs	r3, #0
 8008c76:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008c78:	f107 0310 	add.w	r3, r7, #16
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	68b9      	ldr	r1, [r7, #8]
 8008c80:	69b8      	ldr	r0, [r7, #24]
 8008c82:	f000 fd41 	bl	8009708 <xQueueReceiveFromISR>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d003      	beq.n	8008c94 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008c8c:	f06f 0302 	mvn.w	r3, #2
 8008c90:	61fb      	str	r3, [r7, #28]
 8008c92:	e027      	b.n	8008ce4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d024      	beq.n	8008ce4 <osMessageQueueGet+0xac>
 8008c9a:	4b15      	ldr	r3, [pc, #84]	; (8008cf0 <osMessageQueueGet+0xb8>)
 8008c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	e01b      	b.n	8008ce4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <osMessageQueueGet+0x80>
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d103      	bne.n	8008cc0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008cb8:	f06f 0303 	mvn.w	r3, #3
 8008cbc:	61fb      	str	r3, [r7, #28]
 8008cbe:	e011      	b.n	8008ce4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	68b9      	ldr	r1, [r7, #8]
 8008cc4:	69b8      	ldr	r0, [r7, #24]
 8008cc6:	f000 fc3f 	bl	8009548 <xQueueReceive>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d009      	beq.n	8008ce4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008cd6:	f06f 0301 	mvn.w	r3, #1
 8008cda:	61fb      	str	r3, [r7, #28]
 8008cdc:	e002      	b.n	8008ce4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008cde:	f06f 0302 	mvn.w	r3, #2
 8008ce2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008ce4:	69fb      	ldr	r3, [r7, #28]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3720      	adds	r7, #32
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	e000ed04 	.word	0xe000ed04

08008cf4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4a07      	ldr	r2, [pc, #28]	; (8008d20 <vApplicationGetIdleTaskMemory+0x2c>)
 8008d04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	4a06      	ldr	r2, [pc, #24]	; (8008d24 <vApplicationGetIdleTaskMemory+0x30>)
 8008d0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2280      	movs	r2, #128	; 0x80
 8008d10:	601a      	str	r2, [r3, #0]
}
 8008d12:	bf00      	nop
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	200053e0 	.word	0x200053e0
 8008d24:	2000549c 	.word	0x2000549c

08008d28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4a07      	ldr	r2, [pc, #28]	; (8008d54 <vApplicationGetTimerTaskMemory+0x2c>)
 8008d38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	4a06      	ldr	r2, [pc, #24]	; (8008d58 <vApplicationGetTimerTaskMemory+0x30>)
 8008d3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d46:	601a      	str	r2, [r3, #0]
}
 8008d48:	bf00      	nop
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	2000569c 	.word	0x2000569c
 8008d58:	20005758 	.word	0x20005758

08008d5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f103 0208 	add.w	r2, r3, #8
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f103 0208 	add.w	r2, r3, #8
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f103 0208 	add.w	r2, r3, #8
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008daa:	bf00      	nop
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008db6:	b480      	push	{r7}
 8008db8:	b085      	sub	sp, #20
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	689a      	ldr	r2, [r3, #8]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	601a      	str	r2, [r3, #0]
}
 8008df2:	bf00      	nop
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b085      	sub	sp, #20
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e14:	d103      	bne.n	8008e1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	e00c      	b.n	8008e38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3308      	adds	r3, #8
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	e002      	b.n	8008e2c <vListInsert+0x2e>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d2f6      	bcs.n	8008e26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	601a      	str	r2, [r3, #0]
}
 8008e64:	bf00      	nop
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	6892      	ldr	r2, [r2, #8]
 8008e86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6852      	ldr	r2, [r2, #4]
 8008e90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d103      	bne.n	8008ea4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	1e5a      	subs	r2, r3, #1
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10a      	bne.n	8008eee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008eea:	bf00      	nop
 8008eec:	e7fe      	b.n	8008eec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008eee:	f002 f9e9 	bl	800b2c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efa:	68f9      	ldr	r1, [r7, #12]
 8008efc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008efe:	fb01 f303 	mul.w	r3, r1, r3
 8008f02:	441a      	add	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	68f9      	ldr	r1, [r7, #12]
 8008f22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f24:	fb01 f303 	mul.w	r3, r1, r3
 8008f28:	441a      	add	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	22ff      	movs	r2, #255	; 0xff
 8008f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	22ff      	movs	r2, #255	; 0xff
 8008f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d114      	bne.n	8008f6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d01a      	beq.n	8008f82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	3310      	adds	r3, #16
 8008f50:	4618      	mov	r0, r3
 8008f52:	f001 fa9b 	bl	800a48c <xTaskRemoveFromEventList>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d012      	beq.n	8008f82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	; (8008f90 <xQueueGenericReset+0xcc>)
 8008f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	e009      	b.n	8008f82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3310      	adds	r3, #16
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7ff fef2 	bl	8008d5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	3324      	adds	r3, #36	; 0x24
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7ff feed 	bl	8008d5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f82:	f002 f9cf 	bl	800b324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f86:	2301      	movs	r3, #1
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	e000ed04 	.word	0xe000ed04

08008f94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b08e      	sub	sp, #56	; 0x38
 8008f98:	af02      	add	r7, sp, #8
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10a      	bne.n	8008fda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fd6:	bf00      	nop
 8008fd8:	e7fe      	b.n	8008fd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d002      	beq.n	8008fe6 <xQueueGenericCreateStatic+0x52>
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <xQueueGenericCreateStatic+0x56>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e000      	b.n	8008fec <xQueueGenericCreateStatic+0x58>
 8008fea:	2300      	movs	r3, #0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10a      	bne.n	8009006 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	623b      	str	r3, [r7, #32]
}
 8009002:	bf00      	nop
 8009004:	e7fe      	b.n	8009004 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <xQueueGenericCreateStatic+0x7e>
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d101      	bne.n	8009016 <xQueueGenericCreateStatic+0x82>
 8009012:	2301      	movs	r3, #1
 8009014:	e000      	b.n	8009018 <xQueueGenericCreateStatic+0x84>
 8009016:	2300      	movs	r3, #0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10a      	bne.n	8009032 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	61fb      	str	r3, [r7, #28]
}
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009032:	2350      	movs	r3, #80	; 0x50
 8009034:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2b50      	cmp	r3, #80	; 0x50
 800903a:	d00a      	beq.n	8009052 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	61bb      	str	r3, [r7, #24]
}
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009052:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00d      	beq.n	800907a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800905e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009066:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800906a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	4613      	mov	r3, r2
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	68b9      	ldr	r1, [r7, #8]
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 f83f 	bl	80090f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800907c:	4618      	mov	r0, r3
 800907e:	3730      	adds	r7, #48	; 0x30
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009084:	b580      	push	{r7, lr}
 8009086:	b08a      	sub	sp, #40	; 0x28
 8009088:	af02      	add	r7, sp, #8
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10a      	bne.n	80090ae <xQueueGenericCreate+0x2a>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	613b      	str	r3, [r7, #16]
}
 80090aa:	bf00      	nop
 80090ac:	e7fe      	b.n	80090ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	fb02 f303 	mul.w	r3, r2, r3
 80090b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	3350      	adds	r3, #80	; 0x50
 80090bc:	4618      	mov	r0, r3
 80090be:	f002 fa23 	bl	800b508 <pvPortMalloc>
 80090c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d011      	beq.n	80090ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	3350      	adds	r3, #80	; 0x50
 80090d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090dc:	79fa      	ldrb	r2, [r7, #7]
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	4613      	mov	r3, r2
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f000 f805 	bl	80090f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090ee:	69bb      	ldr	r3, [r7, #24]
	}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3720      	adds	r7, #32
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	69ba      	ldr	r2, [r7, #24]
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	e002      	b.n	800911a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009126:	2101      	movs	r1, #1
 8009128:	69b8      	ldr	r0, [r7, #24]
 800912a:	f7ff fecb 	bl	8008ec4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	78fa      	ldrb	r2, [r7, #3]
 8009132:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800913e:	b580      	push	{r7, lr}
 8009140:	b08a      	sub	sp, #40	; 0x28
 8009142:	af02      	add	r7, sp, #8
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	61bb      	str	r3, [r7, #24]
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	429a      	cmp	r2, r3
 800916c:	d90a      	bls.n	8009184 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	617b      	str	r3, [r7, #20]
}
 8009180:	bf00      	nop
 8009182:	e7fe      	b.n	8009182 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009184:	2302      	movs	r3, #2
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	2100      	movs	r1, #0
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f7ff ff00 	bl	8008f94 <xQueueGenericCreateStatic>
 8009194:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80091a2:	69fb      	ldr	r3, [r7, #28]
	}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3720      	adds	r7, #32
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10a      	bne.n	80091d2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	613b      	str	r3, [r7, #16]
}
 80091ce:	bf00      	nop
 80091d0:	e7fe      	b.n	80091d0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d90a      	bls.n	80091f0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	60fb      	str	r3, [r7, #12]
}
 80091ec:	bf00      	nop
 80091ee:	e7fe      	b.n	80091ee <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80091f0:	2202      	movs	r2, #2
 80091f2:	2100      	movs	r1, #0
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff ff45 	bl	8009084 <xQueueGenericCreate>
 80091fa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009208:	697b      	ldr	r3, [r7, #20]
	}
 800920a:	4618      	mov	r0, r3
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08e      	sub	sp, #56	; 0x38
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009222:	2300      	movs	r3, #0
 8009224:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800922a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10a      	bne.n	8009246 <xQueueGenericSend+0x32>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009242:	bf00      	nop
 8009244:	e7fe      	b.n	8009244 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d103      	bne.n	8009254 <xQueueGenericSend+0x40>
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <xQueueGenericSend+0x44>
 8009254:	2301      	movs	r3, #1
 8009256:	e000      	b.n	800925a <xQueueGenericSend+0x46>
 8009258:	2300      	movs	r3, #0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10a      	bne.n	8009274 <xQueueGenericSend+0x60>
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009270:	bf00      	nop
 8009272:	e7fe      	b.n	8009272 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d103      	bne.n	8009282 <xQueueGenericSend+0x6e>
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927e:	2b01      	cmp	r3, #1
 8009280:	d101      	bne.n	8009286 <xQueueGenericSend+0x72>
 8009282:	2301      	movs	r3, #1
 8009284:	e000      	b.n	8009288 <xQueueGenericSend+0x74>
 8009286:	2300      	movs	r3, #0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	623b      	str	r3, [r7, #32]
}
 800929e:	bf00      	nop
 80092a0:	e7fe      	b.n	80092a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092a2:	f001 fab5 	bl	800a810 <xTaskGetSchedulerState>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d102      	bne.n	80092b2 <xQueueGenericSend+0x9e>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <xQueueGenericSend+0xa2>
 80092b2:	2301      	movs	r3, #1
 80092b4:	e000      	b.n	80092b8 <xQueueGenericSend+0xa4>
 80092b6:	2300      	movs	r3, #0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10a      	bne.n	80092d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	61fb      	str	r3, [r7, #28]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092d2:	f001 fff7 	bl	800b2c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092de:	429a      	cmp	r2, r3
 80092e0:	d302      	bcc.n	80092e8 <xQueueGenericSend+0xd4>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d129      	bne.n	800933c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	68b9      	ldr	r1, [r7, #8]
 80092ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092ee:	f000 faae 	bl	800984e <prvCopyDataToQueue>
 80092f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d010      	beq.n	800931e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	3324      	adds	r3, #36	; 0x24
 8009300:	4618      	mov	r0, r3
 8009302:	f001 f8c3 	bl	800a48c <xTaskRemoveFromEventList>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d013      	beq.n	8009334 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800930c:	4b3f      	ldr	r3, [pc, #252]	; (800940c <xQueueGenericSend+0x1f8>)
 800930e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	e00a      	b.n	8009334 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009320:	2b00      	cmp	r3, #0
 8009322:	d007      	beq.n	8009334 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009324:	4b39      	ldr	r3, [pc, #228]	; (800940c <xQueueGenericSend+0x1f8>)
 8009326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800932a:	601a      	str	r2, [r3, #0]
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009334:	f001 fff6 	bl	800b324 <vPortExitCritical>
				return pdPASS;
 8009338:	2301      	movs	r3, #1
 800933a:	e063      	b.n	8009404 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d103      	bne.n	800934a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009342:	f001 ffef 	bl	800b324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009346:	2300      	movs	r3, #0
 8009348:	e05c      	b.n	8009404 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800934a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934c:	2b00      	cmp	r3, #0
 800934e:	d106      	bne.n	800935e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009350:	f107 0314 	add.w	r3, r7, #20
 8009354:	4618      	mov	r0, r3
 8009356:	f001 f8fd 	bl	800a554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800935a:	2301      	movs	r3, #1
 800935c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800935e:	f001 ffe1 	bl	800b324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009362:	f000 fe69 	bl	800a038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009366:	f001 ffad 	bl	800b2c4 <vPortEnterCritical>
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009370:	b25b      	sxtb	r3, r3
 8009372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009376:	d103      	bne.n	8009380 <xQueueGenericSend+0x16c>
 8009378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009386:	b25b      	sxtb	r3, r3
 8009388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800938c:	d103      	bne.n	8009396 <xQueueGenericSend+0x182>
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009396:	f001 ffc5 	bl	800b324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800939a:	1d3a      	adds	r2, r7, #4
 800939c:	f107 0314 	add.w	r3, r7, #20
 80093a0:	4611      	mov	r1, r2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 f8ec 	bl	800a580 <xTaskCheckForTimeOut>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d124      	bne.n	80093f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093b0:	f000 fb45 	bl	8009a3e <prvIsQueueFull>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d018      	beq.n	80093ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	3310      	adds	r3, #16
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	4611      	mov	r1, r2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f001 f812 	bl	800a3ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ca:	f000 fad0 	bl	800996e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093ce:	f000 fe41 	bl	800a054 <xTaskResumeAll>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f47f af7c 	bne.w	80092d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80093da:	4b0c      	ldr	r3, [pc, #48]	; (800940c <xQueueGenericSend+0x1f8>)
 80093dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	e772      	b.n	80092d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80093ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ee:	f000 fabe 	bl	800996e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093f2:	f000 fe2f 	bl	800a054 <xTaskResumeAll>
 80093f6:	e76c      	b.n	80092d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80093f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093fa:	f000 fab8 	bl	800996e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093fe:	f000 fe29 	bl	800a054 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009402:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009404:	4618      	mov	r0, r3
 8009406:	3738      	adds	r7, #56	; 0x38
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b090      	sub	sp, #64	; 0x40
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10a      	bne.n	800943e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d103      	bne.n	800944c <xQueueGenericSendFromISR+0x3c>
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <xQueueGenericSendFromISR+0x40>
 800944c:	2301      	movs	r3, #1
 800944e:	e000      	b.n	8009452 <xQueueGenericSendFromISR+0x42>
 8009450:	2300      	movs	r3, #0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10a      	bne.n	800946c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009468:	bf00      	nop
 800946a:	e7fe      	b.n	800946a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b02      	cmp	r3, #2
 8009470:	d103      	bne.n	800947a <xQueueGenericSendFromISR+0x6a>
 8009472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009476:	2b01      	cmp	r3, #1
 8009478:	d101      	bne.n	800947e <xQueueGenericSendFromISR+0x6e>
 800947a:	2301      	movs	r3, #1
 800947c:	e000      	b.n	8009480 <xQueueGenericSendFromISR+0x70>
 800947e:	2300      	movs	r3, #0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10a      	bne.n	800949a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	623b      	str	r3, [r7, #32]
}
 8009496:	bf00      	nop
 8009498:	e7fe      	b.n	8009498 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800949a:	f001 fff5 	bl	800b488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800949e:	f3ef 8211 	mrs	r2, BASEPRI
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	61fa      	str	r2, [r7, #28]
 80094b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d302      	bcc.n	80094cc <xQueueGenericSendFromISR+0xbc>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d12f      	bne.n	800952c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	68b9      	ldr	r1, [r7, #8]
 80094e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094e2:	f000 f9b4 	bl	800984e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80094ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094ee:	d112      	bne.n	8009516 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d016      	beq.n	8009526 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fa:	3324      	adds	r3, #36	; 0x24
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 ffc5 	bl	800a48c <xTaskRemoveFromEventList>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00e      	beq.n	8009526 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00b      	beq.n	8009526 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	e007      	b.n	8009526 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009516:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800951a:	3301      	adds	r3, #1
 800951c:	b2db      	uxtb	r3, r3
 800951e:	b25a      	sxtb	r2, r3
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009526:	2301      	movs	r3, #1
 8009528:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800952a:	e001      	b.n	8009530 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800952c:	2300      	movs	r3, #0
 800952e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009532:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800953a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800953c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800953e:	4618      	mov	r0, r3
 8009540:	3740      	adds	r7, #64	; 0x40
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08c      	sub	sp, #48	; 0x30
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009554:	2300      	movs	r3, #0
 8009556:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10a      	bne.n	8009578 <xQueueReceive+0x30>
	__asm volatile
 8009562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	623b      	str	r3, [r7, #32]
}
 8009574:	bf00      	nop
 8009576:	e7fe      	b.n	8009576 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d103      	bne.n	8009586 <xQueueReceive+0x3e>
 800957e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <xQueueReceive+0x42>
 8009586:	2301      	movs	r3, #1
 8009588:	e000      	b.n	800958c <xQueueReceive+0x44>
 800958a:	2300      	movs	r3, #0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10a      	bne.n	80095a6 <xQueueReceive+0x5e>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	61fb      	str	r3, [r7, #28]
}
 80095a2:	bf00      	nop
 80095a4:	e7fe      	b.n	80095a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095a6:	f001 f933 	bl	800a810 <xTaskGetSchedulerState>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d102      	bne.n	80095b6 <xQueueReceive+0x6e>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <xQueueReceive+0x72>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e000      	b.n	80095bc <xQueueReceive+0x74>
 80095ba:	2300      	movs	r3, #0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10a      	bne.n	80095d6 <xQueueReceive+0x8e>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	61bb      	str	r3, [r7, #24]
}
 80095d2:	bf00      	nop
 80095d4:	e7fe      	b.n	80095d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095d6:	f001 fe75 	bl	800b2c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d01f      	beq.n	8009626 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095e6:	68b9      	ldr	r1, [r7, #8]
 80095e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ea:	f000 f99a 	bl	8009922 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	1e5a      	subs	r2, r3, #1
 80095f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00f      	beq.n	800961e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	3310      	adds	r3, #16
 8009602:	4618      	mov	r0, r3
 8009604:	f000 ff42 	bl	800a48c <xTaskRemoveFromEventList>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d007      	beq.n	800961e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800960e:	4b3d      	ldr	r3, [pc, #244]	; (8009704 <xQueueReceive+0x1bc>)
 8009610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800961e:	f001 fe81 	bl	800b324 <vPortExitCritical>
				return pdPASS;
 8009622:	2301      	movs	r3, #1
 8009624:	e069      	b.n	80096fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d103      	bne.n	8009634 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800962c:	f001 fe7a 	bl	800b324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009630:	2300      	movs	r3, #0
 8009632:	e062      	b.n	80096fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800963a:	f107 0310 	add.w	r3, r7, #16
 800963e:	4618      	mov	r0, r3
 8009640:	f000 ff88 	bl	800a554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009644:	2301      	movs	r3, #1
 8009646:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009648:	f001 fe6c 	bl	800b324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800964c:	f000 fcf4 	bl	800a038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009650:	f001 fe38 	bl	800b2c4 <vPortEnterCritical>
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800965a:	b25b      	sxtb	r3, r3
 800965c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009660:	d103      	bne.n	800966a <xQueueReceive+0x122>
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	2200      	movs	r2, #0
 8009666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009670:	b25b      	sxtb	r3, r3
 8009672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009676:	d103      	bne.n	8009680 <xQueueReceive+0x138>
 8009678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009680:	f001 fe50 	bl	800b324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009684:	1d3a      	adds	r2, r7, #4
 8009686:	f107 0310 	add.w	r3, r7, #16
 800968a:	4611      	mov	r1, r2
 800968c:	4618      	mov	r0, r3
 800968e:	f000 ff77 	bl	800a580 <xTaskCheckForTimeOut>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d123      	bne.n	80096e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800969a:	f000 f9ba 	bl	8009a12 <prvIsQueueEmpty>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d017      	beq.n	80096d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a6:	3324      	adds	r3, #36	; 0x24
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	4611      	mov	r1, r2
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 fe9d 	bl	800a3ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096b4:	f000 f95b 	bl	800996e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096b8:	f000 fccc 	bl	800a054 <xTaskResumeAll>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d189      	bne.n	80095d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80096c2:	4b10      	ldr	r3, [pc, #64]	; (8009704 <xQueueReceive+0x1bc>)
 80096c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	e780      	b.n	80095d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096d6:	f000 f94a 	bl	800996e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096da:	f000 fcbb 	bl	800a054 <xTaskResumeAll>
 80096de:	e77a      	b.n	80095d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e2:	f000 f944 	bl	800996e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096e6:	f000 fcb5 	bl	800a054 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ec:	f000 f991 	bl	8009a12 <prvIsQueueEmpty>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f43f af6f 	beq.w	80095d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3730      	adds	r7, #48	; 0x30
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	e000ed04 	.word	0xe000ed04

08009708 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08e      	sub	sp, #56	; 0x38
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10a      	bne.n	8009734 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	623b      	str	r3, [r7, #32]
}
 8009730:	bf00      	nop
 8009732:	e7fe      	b.n	8009732 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d103      	bne.n	8009742 <xQueueReceiveFromISR+0x3a>
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <xQueueReceiveFromISR+0x3e>
 8009742:	2301      	movs	r3, #1
 8009744:	e000      	b.n	8009748 <xQueueReceiveFromISR+0x40>
 8009746:	2300      	movs	r3, #0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	61fb      	str	r3, [r7, #28]
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009762:	f001 fe91 	bl	800b488 <vPortValidateInterruptPriority>
	__asm volatile
 8009766:	f3ef 8211 	mrs	r2, BASEPRI
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	61ba      	str	r2, [r7, #24]
 800977c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800977e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009780:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009786:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	2b00      	cmp	r3, #0
 800978c:	d02f      	beq.n	80097ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009798:	68b9      	ldr	r1, [r7, #8]
 800979a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800979c:	f000 f8c1 	bl	8009922 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a2:	1e5a      	subs	r2, r3, #1
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80097a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097b0:	d112      	bne.n	80097d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d016      	beq.n	80097e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097bc:	3310      	adds	r3, #16
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fe64 	bl	800a48c <xTaskRemoveFromEventList>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00e      	beq.n	80097e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00b      	beq.n	80097e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	e007      	b.n	80097e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80097d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097dc:	3301      	adds	r3, #1
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	b25a      	sxtb	r2, r3
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80097e8:	2301      	movs	r3, #1
 80097ea:	637b      	str	r3, [r7, #52]	; 0x34
 80097ec:	e001      	b.n	80097f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	637b      	str	r3, [r7, #52]	; 0x34
 80097f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f383 8811 	msr	BASEPRI, r3
}
 80097fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009800:	4618      	mov	r0, r3
 8009802:	3738      	adds	r7, #56	; 0x38
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10a      	bne.n	8009830 <vQueueDelete+0x28>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	60bb      	str	r3, [r7, #8]
}
 800982c:	bf00      	nop
 800982e:	e7fe      	b.n	800982e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 f947 	bl	8009ac4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800983c:	2b00      	cmp	r3, #0
 800983e:	d102      	bne.n	8009846 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f001 ff05 	bl	800b650 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009846:	bf00      	nop
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b086      	sub	sp, #24
 8009852:	af00      	add	r7, sp, #0
 8009854:	60f8      	str	r0, [r7, #12]
 8009856:	60b9      	str	r1, [r7, #8]
 8009858:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800985a:	2300      	movs	r3, #0
 800985c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009862:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10d      	bne.n	8009888 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d14d      	bne.n	8009910 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 ffe7 	bl	800a84c <xTaskPriorityDisinherit>
 800987e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	609a      	str	r2, [r3, #8]
 8009886:	e043      	b.n	8009910 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d119      	bne.n	80098c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6858      	ldr	r0, [r3, #4]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009896:	461a      	mov	r2, r3
 8009898:	68b9      	ldr	r1, [r7, #8]
 800989a:	f002 f957 	bl	800bb4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a6:	441a      	add	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d32b      	bcc.n	8009910 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	605a      	str	r2, [r3, #4]
 80098c0:	e026      	b.n	8009910 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	68d8      	ldr	r0, [r3, #12]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ca:	461a      	mov	r2, r3
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	f002 f93d 	bl	800bb4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	68da      	ldr	r2, [r3, #12]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098da:	425b      	negs	r3, r3
 80098dc:	441a      	add	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	68da      	ldr	r2, [r3, #12]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d207      	bcs.n	80098fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	689a      	ldr	r2, [r3, #8]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f6:	425b      	negs	r3, r3
 80098f8:	441a      	add	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b02      	cmp	r3, #2
 8009902:	d105      	bne.n	8009910 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	3b01      	subs	r3, #1
 800990e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	1c5a      	adds	r2, r3, #1
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009918:	697b      	ldr	r3, [r7, #20]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b082      	sub	sp, #8
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009930:	2b00      	cmp	r3, #0
 8009932:	d018      	beq.n	8009966 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	68da      	ldr	r2, [r3, #12]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993c:	441a      	add	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68da      	ldr	r2, [r3, #12]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	429a      	cmp	r2, r3
 800994c:	d303      	bcc.n	8009956 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68d9      	ldr	r1, [r3, #12]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995e:	461a      	mov	r2, r3
 8009960:	6838      	ldr	r0, [r7, #0]
 8009962:	f002 f8f3 	bl	800bb4c <memcpy>
	}
}
 8009966:	bf00      	nop
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009976:	f001 fca5 	bl	800b2c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009980:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009982:	e011      	b.n	80099a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009988:	2b00      	cmp	r3, #0
 800998a:	d012      	beq.n	80099b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3324      	adds	r3, #36	; 0x24
 8009990:	4618      	mov	r0, r3
 8009992:	f000 fd7b 	bl	800a48c <xTaskRemoveFromEventList>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800999c:	f000 fe52 	bl	800a644 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	3b01      	subs	r3, #1
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	dce9      	bgt.n	8009984 <prvUnlockQueue+0x16>
 80099b0:	e000      	b.n	80099b4 <prvUnlockQueue+0x46>
					break;
 80099b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	22ff      	movs	r2, #255	; 0xff
 80099b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80099bc:	f001 fcb2 	bl	800b324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099c0:	f001 fc80 	bl	800b2c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099cc:	e011      	b.n	80099f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d012      	beq.n	80099fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	3310      	adds	r3, #16
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 fd56 	bl	800a48c <xTaskRemoveFromEventList>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80099e6:	f000 fe2d 	bl	800a644 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80099ea:	7bbb      	ldrb	r3, [r7, #14]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	dce9      	bgt.n	80099ce <prvUnlockQueue+0x60>
 80099fa:	e000      	b.n	80099fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	22ff      	movs	r2, #255	; 0xff
 8009a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009a06:	f001 fc8d 	bl	800b324 <vPortExitCritical>
}
 8009a0a:	bf00      	nop
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a1a:	f001 fc53 	bl	800b2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a26:	2301      	movs	r3, #1
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	e001      	b.n	8009a30 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a30:	f001 fc78 	bl	800b324 <vPortExitCritical>

	return xReturn;
 8009a34:	68fb      	ldr	r3, [r7, #12]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a46:	f001 fc3d 	bl	800b2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d102      	bne.n	8009a5c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a56:	2301      	movs	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]
 8009a5a:	e001      	b.n	8009a60 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a60:	f001 fc60 	bl	800b324 <vPortExitCritical>

	return xReturn;
 8009a64:	68fb      	ldr	r3, [r7, #12]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	60fb      	str	r3, [r7, #12]
 8009a7e:	e014      	b.n	8009aaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a80:	4a0f      	ldr	r2, [pc, #60]	; (8009ac0 <vQueueAddToRegistry+0x50>)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10b      	bne.n	8009aa4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a8c:	490c      	ldr	r1, [pc, #48]	; (8009ac0 <vQueueAddToRegistry+0x50>)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a96:	4a0a      	ldr	r2, [pc, #40]	; (8009ac0 <vQueueAddToRegistry+0x50>)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	4413      	add	r3, r2
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009aa2:	e006      	b.n	8009ab2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	60fb      	str	r3, [r7, #12]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b07      	cmp	r3, #7
 8009aae:	d9e7      	bls.n	8009a80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ab0:	bf00      	nop
 8009ab2:	bf00      	nop
 8009ab4:	3714      	adds	r7, #20
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	20005b58 	.word	0x20005b58

08009ac4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009acc:	2300      	movs	r3, #0
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	e016      	b.n	8009b00 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009ad2:	4a10      	ldr	r2, [pc, #64]	; (8009b14 <vQueueUnregisterQueue+0x50>)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	4413      	add	r3, r2
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d10b      	bne.n	8009afa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009ae2:	4a0c      	ldr	r2, [pc, #48]	; (8009b14 <vQueueUnregisterQueue+0x50>)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009aec:	4a09      	ldr	r2, [pc, #36]	; (8009b14 <vQueueUnregisterQueue+0x50>)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	00db      	lsls	r3, r3, #3
 8009af2:	4413      	add	r3, r2
 8009af4:	2200      	movs	r2, #0
 8009af6:	605a      	str	r2, [r3, #4]
				break;
 8009af8:	e006      	b.n	8009b08 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3301      	adds	r3, #1
 8009afe:	60fb      	str	r3, [r7, #12]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2b07      	cmp	r3, #7
 8009b04:	d9e5      	bls.n	8009ad2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009b06:	bf00      	nop
 8009b08:	bf00      	nop
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	20005b58 	.word	0x20005b58

08009b18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b28:	f001 fbcc 	bl	800b2c4 <vPortEnterCritical>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b32:	b25b      	sxtb	r3, r3
 8009b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b38:	d103      	bne.n	8009b42 <vQueueWaitForMessageRestricted+0x2a>
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b48:	b25b      	sxtb	r3, r3
 8009b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b4e:	d103      	bne.n	8009b58 <vQueueWaitForMessageRestricted+0x40>
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b58:	f001 fbe4 	bl	800b324 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d106      	bne.n	8009b72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	3324      	adds	r3, #36	; 0x24
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	68b9      	ldr	r1, [r7, #8]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 fc61 	bl	800a434 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b72:	6978      	ldr	r0, [r7, #20]
 8009b74:	f7ff fefb 	bl	800996e <prvUnlockQueue>
	}
 8009b78:	bf00      	nop
 8009b7a:	3718      	adds	r7, #24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08e      	sub	sp, #56	; 0x38
 8009b84:	af04      	add	r7, sp, #16
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
 8009b8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10a      	bne.n	8009baa <xTaskCreateStatic+0x2a>
	__asm volatile
 8009b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	623b      	str	r3, [r7, #32]
}
 8009ba6:	bf00      	nop
 8009ba8:	e7fe      	b.n	8009ba8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10a      	bne.n	8009bc6 <xTaskCreateStatic+0x46>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	61fb      	str	r3, [r7, #28]
}
 8009bc2:	bf00      	nop
 8009bc4:	e7fe      	b.n	8009bc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009bc6:	23bc      	movs	r3, #188	; 0xbc
 8009bc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	2bbc      	cmp	r3, #188	; 0xbc
 8009bce:	d00a      	beq.n	8009be6 <xTaskCreateStatic+0x66>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	61bb      	str	r3, [r7, #24]
}
 8009be2:	bf00      	nop
 8009be4:	e7fe      	b.n	8009be4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009be6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d01e      	beq.n	8009c2c <xTaskCreateStatic+0xac>
 8009bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d01b      	beq.n	8009c2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bfc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c00:	2202      	movs	r2, #2
 8009c02:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c06:	2300      	movs	r3, #0
 8009c08:	9303      	str	r3, [sp, #12]
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	9302      	str	r3, [sp, #8]
 8009c0e:	f107 0314 	add.w	r3, r7, #20
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	68b9      	ldr	r1, [r7, #8]
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 f850 	bl	8009cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c26:	f000 f8f3 	bl	8009e10 <prvAddNewTaskToReadyList>
 8009c2a:	e001      	b.n	8009c30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c30:	697b      	ldr	r3, [r7, #20]
	}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3728      	adds	r7, #40	; 0x28
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b08c      	sub	sp, #48	; 0x30
 8009c3e:	af04      	add	r7, sp, #16
 8009c40:	60f8      	str	r0, [r7, #12]
 8009c42:	60b9      	str	r1, [r7, #8]
 8009c44:	603b      	str	r3, [r7, #0]
 8009c46:	4613      	mov	r3, r2
 8009c48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c4a:	88fb      	ldrh	r3, [r7, #6]
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f001 fc5a 	bl	800b508 <pvPortMalloc>
 8009c54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00e      	beq.n	8009c7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c5c:	20bc      	movs	r0, #188	; 0xbc
 8009c5e:	f001 fc53 	bl	800b508 <pvPortMalloc>
 8009c62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d003      	beq.n	8009c72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8009c70:	e005      	b.n	8009c7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c72:	6978      	ldr	r0, [r7, #20]
 8009c74:	f001 fcec 	bl	800b650 <vPortFree>
 8009c78:	e001      	b.n	8009c7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d017      	beq.n	8009cb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c8c:	88fa      	ldrh	r2, [r7, #6]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9303      	str	r3, [sp, #12]
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	9302      	str	r3, [sp, #8]
 8009c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68b9      	ldr	r1, [r7, #8]
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f000 f80e 	bl	8009cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ca8:	69f8      	ldr	r0, [r7, #28]
 8009caa:	f000 f8b1 	bl	8009e10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	61bb      	str	r3, [r7, #24]
 8009cb2:	e002      	b.n	8009cba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009cba:	69bb      	ldr	r3, [r7, #24]
	}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3720      	adds	r7, #32
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
 8009cd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	461a      	mov	r2, r3
 8009cdc:	21a5      	movs	r1, #165	; 0xa5
 8009cde:	f001 ff43 	bl	800bb68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009cec:	3b01      	subs	r3, #1
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	f023 0307 	bic.w	r3, r3, #7
 8009cfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00a      	beq.n	8009d1c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	617b      	str	r3, [r7, #20]
}
 8009d18:	bf00      	nop
 8009d1a:	e7fe      	b.n	8009d1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d01f      	beq.n	8009d62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d22:	2300      	movs	r3, #0
 8009d24:	61fb      	str	r3, [r7, #28]
 8009d26:	e012      	b.n	8009d4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	7819      	ldrb	r1, [r3, #0]
 8009d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	4413      	add	r3, r2
 8009d36:	3334      	adds	r3, #52	; 0x34
 8009d38:	460a      	mov	r2, r1
 8009d3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	4413      	add	r3, r2
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d006      	beq.n	8009d56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	61fb      	str	r3, [r7, #28]
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	2b0f      	cmp	r3, #15
 8009d52:	d9e9      	bls.n	8009d28 <prvInitialiseNewTask+0x64>
 8009d54:	e000      	b.n	8009d58 <prvInitialiseNewTask+0x94>
			{
				break;
 8009d56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d60:	e003      	b.n	8009d6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6c:	2b37      	cmp	r3, #55	; 0x37
 8009d6e:	d901      	bls.n	8009d74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d70:	2337      	movs	r3, #55	; 0x37
 8009d72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	2200      	movs	r2, #0
 8009d84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	3304      	adds	r3, #4
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff f806 	bl	8008d9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	3318      	adds	r3, #24
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff f801 	bl	8008d9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	3354      	adds	r3, #84	; 0x54
 8009dc4:	2260      	movs	r2, #96	; 0x60
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f001 fecd 	bl	800bb68 <memset>
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	4a0c      	ldr	r2, [pc, #48]	; (8009e04 <prvInitialiseNewTask+0x140>)
 8009dd2:	659a      	str	r2, [r3, #88]	; 0x58
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	4a0c      	ldr	r2, [pc, #48]	; (8009e08 <prvInitialiseNewTask+0x144>)
 8009dd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	4a0b      	ldr	r2, [pc, #44]	; (8009e0c <prvInitialiseNewTask+0x148>)
 8009dde:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	68f9      	ldr	r1, [r7, #12]
 8009de4:	69b8      	ldr	r0, [r7, #24]
 8009de6:	f001 f941 	bl	800b06c <pxPortInitialiseStack>
 8009dea:	4602      	mov	r2, r0
 8009dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dfc:	bf00      	nop
 8009dfe:	3720      	adds	r7, #32
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	0800eda8 	.word	0x0800eda8
 8009e08:	0800edc8 	.word	0x0800edc8
 8009e0c:	0800ed88 	.word	0x0800ed88

08009e10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e18:	f001 fa54 	bl	800b2c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e1c:	4b2d      	ldr	r3, [pc, #180]	; (8009ed4 <prvAddNewTaskToReadyList+0xc4>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3301      	adds	r3, #1
 8009e22:	4a2c      	ldr	r2, [pc, #176]	; (8009ed4 <prvAddNewTaskToReadyList+0xc4>)
 8009e24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e26:	4b2c      	ldr	r3, [pc, #176]	; (8009ed8 <prvAddNewTaskToReadyList+0xc8>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d109      	bne.n	8009e42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e2e:	4a2a      	ldr	r2, [pc, #168]	; (8009ed8 <prvAddNewTaskToReadyList+0xc8>)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e34:	4b27      	ldr	r3, [pc, #156]	; (8009ed4 <prvAddNewTaskToReadyList+0xc4>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d110      	bne.n	8009e5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e3c:	f000 fc26 	bl	800a68c <prvInitialiseTaskLists>
 8009e40:	e00d      	b.n	8009e5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e42:	4b26      	ldr	r3, [pc, #152]	; (8009edc <prvAddNewTaskToReadyList+0xcc>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d109      	bne.n	8009e5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e4a:	4b23      	ldr	r3, [pc, #140]	; (8009ed8 <prvAddNewTaskToReadyList+0xc8>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d802      	bhi.n	8009e5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e58:	4a1f      	ldr	r2, [pc, #124]	; (8009ed8 <prvAddNewTaskToReadyList+0xc8>)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e5e:	4b20      	ldr	r3, [pc, #128]	; (8009ee0 <prvAddNewTaskToReadyList+0xd0>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3301      	adds	r3, #1
 8009e64:	4a1e      	ldr	r2, [pc, #120]	; (8009ee0 <prvAddNewTaskToReadyList+0xd0>)
 8009e66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e68:	4b1d      	ldr	r3, [pc, #116]	; (8009ee0 <prvAddNewTaskToReadyList+0xd0>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e74:	4b1b      	ldr	r3, [pc, #108]	; (8009ee4 <prvAddNewTaskToReadyList+0xd4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d903      	bls.n	8009e84 <prvAddNewTaskToReadyList+0x74>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e80:	4a18      	ldr	r2, [pc, #96]	; (8009ee4 <prvAddNewTaskToReadyList+0xd4>)
 8009e82:	6013      	str	r3, [r2, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e88:	4613      	mov	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4a15      	ldr	r2, [pc, #84]	; (8009ee8 <prvAddNewTaskToReadyList+0xd8>)
 8009e92:	441a      	add	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3304      	adds	r3, #4
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4610      	mov	r0, r2
 8009e9c:	f7fe ff8b 	bl	8008db6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ea0:	f001 fa40 	bl	800b324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ea4:	4b0d      	ldr	r3, [pc, #52]	; (8009edc <prvAddNewTaskToReadyList+0xcc>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00e      	beq.n	8009eca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009eac:	4b0a      	ldr	r3, [pc, #40]	; (8009ed8 <prvAddNewTaskToReadyList+0xc8>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d207      	bcs.n	8009eca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009eba:	4b0c      	ldr	r3, [pc, #48]	; (8009eec <prvAddNewTaskToReadyList+0xdc>)
 8009ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eca:	bf00      	nop
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	2000606c 	.word	0x2000606c
 8009ed8:	20005b98 	.word	0x20005b98
 8009edc:	20006078 	.word	0x20006078
 8009ee0:	20006088 	.word	0x20006088
 8009ee4:	20006074 	.word	0x20006074
 8009ee8:	20005b9c 	.word	0x20005b9c
 8009eec:	e000ed04 	.word	0xe000ed04

08009ef0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d017      	beq.n	8009f32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f02:	4b13      	ldr	r3, [pc, #76]	; (8009f50 <vTaskDelay+0x60>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <vTaskDelay+0x30>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	60bb      	str	r3, [r7, #8]
}
 8009f1c:	bf00      	nop
 8009f1e:	e7fe      	b.n	8009f1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f20:	f000 f88a 	bl	800a038 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f24:	2100      	movs	r1, #0
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fcfe 	bl	800a928 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f2c:	f000 f892 	bl	800a054 <xTaskResumeAll>
 8009f30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d107      	bne.n	8009f48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009f38:	4b06      	ldr	r3, [pc, #24]	; (8009f54 <vTaskDelay+0x64>)
 8009f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f48:	bf00      	nop
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	20006094 	.word	0x20006094
 8009f54:	e000ed04 	.word	0xe000ed04

08009f58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08a      	sub	sp, #40	; 0x28
 8009f5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f62:	2300      	movs	r3, #0
 8009f64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f66:	463a      	mov	r2, r7
 8009f68:	1d39      	adds	r1, r7, #4
 8009f6a:	f107 0308 	add.w	r3, r7, #8
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fe fec0 	bl	8008cf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	9202      	str	r2, [sp, #8]
 8009f7c:	9301      	str	r3, [sp, #4]
 8009f7e:	2300      	movs	r3, #0
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	2300      	movs	r3, #0
 8009f84:	460a      	mov	r2, r1
 8009f86:	4924      	ldr	r1, [pc, #144]	; (800a018 <vTaskStartScheduler+0xc0>)
 8009f88:	4824      	ldr	r0, [pc, #144]	; (800a01c <vTaskStartScheduler+0xc4>)
 8009f8a:	f7ff fdf9 	bl	8009b80 <xTaskCreateStatic>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	4a23      	ldr	r2, [pc, #140]	; (800a020 <vTaskStartScheduler+0xc8>)
 8009f92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f94:	4b22      	ldr	r3, [pc, #136]	; (800a020 <vTaskStartScheduler+0xc8>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	617b      	str	r3, [r7, #20]
 8009fa0:	e001      	b.n	8009fa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d102      	bne.n	8009fb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009fac:	f000 fd10 	bl	800a9d0 <xTimerCreateTimerTask>
 8009fb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d11b      	bne.n	8009ff0 <vTaskStartScheduler+0x98>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	613b      	str	r3, [r7, #16]
}
 8009fca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fcc:	4b15      	ldr	r3, [pc, #84]	; (800a024 <vTaskStartScheduler+0xcc>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3354      	adds	r3, #84	; 0x54
 8009fd2:	4a15      	ldr	r2, [pc, #84]	; (800a028 <vTaskStartScheduler+0xd0>)
 8009fd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009fd6:	4b15      	ldr	r3, [pc, #84]	; (800a02c <vTaskStartScheduler+0xd4>)
 8009fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009fde:	4b14      	ldr	r3, [pc, #80]	; (800a030 <vTaskStartScheduler+0xd8>)
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fe4:	4b13      	ldr	r3, [pc, #76]	; (800a034 <vTaskStartScheduler+0xdc>)
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009fea:	f001 f8c9 	bl	800b180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009fee:	e00e      	b.n	800a00e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ff6:	d10a      	bne.n	800a00e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	60fb      	str	r3, [r7, #12]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <vTaskStartScheduler+0xb4>
}
 800a00e:	bf00      	nop
 800a010:	3718      	adds	r7, #24
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	0800cc40 	.word	0x0800cc40
 800a01c:	0800a65d 	.word	0x0800a65d
 800a020:	20006090 	.word	0x20006090
 800a024:	20005b98 	.word	0x20005b98
 800a028:	20000098 	.word	0x20000098
 800a02c:	2000608c 	.word	0x2000608c
 800a030:	20006078 	.word	0x20006078
 800a034:	20006070 	.word	0x20006070

0800a038 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a038:	b480      	push	{r7}
 800a03a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a03c:	4b04      	ldr	r3, [pc, #16]	; (800a050 <vTaskSuspendAll+0x18>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3301      	adds	r3, #1
 800a042:	4a03      	ldr	r2, [pc, #12]	; (800a050 <vTaskSuspendAll+0x18>)
 800a044:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a046:	bf00      	nop
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	20006094 	.word	0x20006094

0800a054 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a05e:	2300      	movs	r3, #0
 800a060:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a062:	4b42      	ldr	r3, [pc, #264]	; (800a16c <xTaskResumeAll+0x118>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10a      	bne.n	800a080 <xTaskResumeAll+0x2c>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	603b      	str	r3, [r7, #0]
}
 800a07c:	bf00      	nop
 800a07e:	e7fe      	b.n	800a07e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a080:	f001 f920 	bl	800b2c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a084:	4b39      	ldr	r3, [pc, #228]	; (800a16c <xTaskResumeAll+0x118>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3b01      	subs	r3, #1
 800a08a:	4a38      	ldr	r2, [pc, #224]	; (800a16c <xTaskResumeAll+0x118>)
 800a08c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a08e:	4b37      	ldr	r3, [pc, #220]	; (800a16c <xTaskResumeAll+0x118>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d162      	bne.n	800a15c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a096:	4b36      	ldr	r3, [pc, #216]	; (800a170 <xTaskResumeAll+0x11c>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d05e      	beq.n	800a15c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a09e:	e02f      	b.n	800a100 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0a0:	4b34      	ldr	r3, [pc, #208]	; (800a174 <xTaskResumeAll+0x120>)
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3318      	adds	r3, #24
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe fedf 	bl	8008e70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe feda 	bl	8008e70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c0:	4b2d      	ldr	r3, [pc, #180]	; (800a178 <xTaskResumeAll+0x124>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d903      	bls.n	800a0d0 <xTaskResumeAll+0x7c>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0cc:	4a2a      	ldr	r2, [pc, #168]	; (800a178 <xTaskResumeAll+0x124>)
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4a27      	ldr	r2, [pc, #156]	; (800a17c <xTaskResumeAll+0x128>)
 800a0de:	441a      	add	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	f7fe fe65 	bl	8008db6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f0:	4b23      	ldr	r3, [pc, #140]	; (800a180 <xTaskResumeAll+0x12c>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d302      	bcc.n	800a100 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a0fa:	4b22      	ldr	r3, [pc, #136]	; (800a184 <xTaskResumeAll+0x130>)
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a100:	4b1c      	ldr	r3, [pc, #112]	; (800a174 <xTaskResumeAll+0x120>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1cb      	bne.n	800a0a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a10e:	f000 fb5f 	bl	800a7d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a112:	4b1d      	ldr	r3, [pc, #116]	; (800a188 <xTaskResumeAll+0x134>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d010      	beq.n	800a140 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a11e:	f000 f847 	bl	800a1b0 <xTaskIncrementTick>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a128:	4b16      	ldr	r3, [pc, #88]	; (800a184 <xTaskResumeAll+0x130>)
 800a12a:	2201      	movs	r2, #1
 800a12c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	3b01      	subs	r3, #1
 800a132:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1f1      	bne.n	800a11e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a13a:	4b13      	ldr	r3, [pc, #76]	; (800a188 <xTaskResumeAll+0x134>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a140:	4b10      	ldr	r3, [pc, #64]	; (800a184 <xTaskResumeAll+0x130>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d009      	beq.n	800a15c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a148:	2301      	movs	r3, #1
 800a14a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a14c:	4b0f      	ldr	r3, [pc, #60]	; (800a18c <xTaskResumeAll+0x138>)
 800a14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a15c:	f001 f8e2 	bl	800b324 <vPortExitCritical>

	return xAlreadyYielded;
 800a160:	68bb      	ldr	r3, [r7, #8]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20006094 	.word	0x20006094
 800a170:	2000606c 	.word	0x2000606c
 800a174:	2000602c 	.word	0x2000602c
 800a178:	20006074 	.word	0x20006074
 800a17c:	20005b9c 	.word	0x20005b9c
 800a180:	20005b98 	.word	0x20005b98
 800a184:	20006080 	.word	0x20006080
 800a188:	2000607c 	.word	0x2000607c
 800a18c:	e000ed04 	.word	0xe000ed04

0800a190 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a196:	4b05      	ldr	r3, [pc, #20]	; (800a1ac <xTaskGetTickCount+0x1c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a19c:	687b      	ldr	r3, [r7, #4]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	20006070 	.word	0x20006070

0800a1b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ba:	4b4f      	ldr	r3, [pc, #316]	; (800a2f8 <xTaskIncrementTick+0x148>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f040 808f 	bne.w	800a2e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1c4:	4b4d      	ldr	r3, [pc, #308]	; (800a2fc <xTaskIncrementTick+0x14c>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a1cc:	4a4b      	ldr	r2, [pc, #300]	; (800a2fc <xTaskIncrementTick+0x14c>)
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d120      	bne.n	800a21a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a1d8:	4b49      	ldr	r3, [pc, #292]	; (800a300 <xTaskIncrementTick+0x150>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00a      	beq.n	800a1f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	603b      	str	r3, [r7, #0]
}
 800a1f4:	bf00      	nop
 800a1f6:	e7fe      	b.n	800a1f6 <xTaskIncrementTick+0x46>
 800a1f8:	4b41      	ldr	r3, [pc, #260]	; (800a300 <xTaskIncrementTick+0x150>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	60fb      	str	r3, [r7, #12]
 800a1fe:	4b41      	ldr	r3, [pc, #260]	; (800a304 <xTaskIncrementTick+0x154>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a3f      	ldr	r2, [pc, #252]	; (800a300 <xTaskIncrementTick+0x150>)
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	4a3f      	ldr	r2, [pc, #252]	; (800a304 <xTaskIncrementTick+0x154>)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	4b3e      	ldr	r3, [pc, #248]	; (800a308 <xTaskIncrementTick+0x158>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3301      	adds	r3, #1
 800a212:	4a3d      	ldr	r2, [pc, #244]	; (800a308 <xTaskIncrementTick+0x158>)
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	f000 fadb 	bl	800a7d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a21a:	4b3c      	ldr	r3, [pc, #240]	; (800a30c <xTaskIncrementTick+0x15c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	429a      	cmp	r2, r3
 800a222:	d349      	bcc.n	800a2b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a224:	4b36      	ldr	r3, [pc, #216]	; (800a300 <xTaskIncrementTick+0x150>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d104      	bne.n	800a238 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a22e:	4b37      	ldr	r3, [pc, #220]	; (800a30c <xTaskIncrementTick+0x15c>)
 800a230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a234:	601a      	str	r2, [r3, #0]
					break;
 800a236:	e03f      	b.n	800a2b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a238:	4b31      	ldr	r3, [pc, #196]	; (800a300 <xTaskIncrementTick+0x150>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d203      	bcs.n	800a258 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a250:	4a2e      	ldr	r2, [pc, #184]	; (800a30c <xTaskIncrementTick+0x15c>)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a256:	e02f      	b.n	800a2b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fe fe07 	bl	8008e70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a266:	2b00      	cmp	r3, #0
 800a268:	d004      	beq.n	800a274 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	3318      	adds	r3, #24
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe fdfe 	bl	8008e70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a278:	4b25      	ldr	r3, [pc, #148]	; (800a310 <xTaskIncrementTick+0x160>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d903      	bls.n	800a288 <xTaskIncrementTick+0xd8>
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	4a22      	ldr	r2, [pc, #136]	; (800a310 <xTaskIncrementTick+0x160>)
 800a286:	6013      	str	r3, [r2, #0]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28c:	4613      	mov	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4a1f      	ldr	r2, [pc, #124]	; (800a314 <xTaskIncrementTick+0x164>)
 800a296:	441a      	add	r2, r3
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f7fe fd89 	bl	8008db6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a8:	4b1b      	ldr	r3, [pc, #108]	; (800a318 <xTaskIncrementTick+0x168>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d3b8      	bcc.n	800a224 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2b6:	e7b5      	b.n	800a224 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2b8:	4b17      	ldr	r3, [pc, #92]	; (800a318 <xTaskIncrementTick+0x168>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2be:	4915      	ldr	r1, [pc, #84]	; (800a314 <xTaskIncrementTick+0x164>)
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	440b      	add	r3, r1
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d901      	bls.n	800a2d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a2d4:	4b11      	ldr	r3, [pc, #68]	; (800a31c <xTaskIncrementTick+0x16c>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d007      	beq.n	800a2ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	e004      	b.n	800a2ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a2e2:	4b0f      	ldr	r3, [pc, #60]	; (800a320 <xTaskIncrementTick+0x170>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	4a0d      	ldr	r2, [pc, #52]	; (800a320 <xTaskIncrementTick+0x170>)
 800a2ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a2ec:	697b      	ldr	r3, [r7, #20]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3718      	adds	r7, #24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20006094 	.word	0x20006094
 800a2fc:	20006070 	.word	0x20006070
 800a300:	20006024 	.word	0x20006024
 800a304:	20006028 	.word	0x20006028
 800a308:	20006084 	.word	0x20006084
 800a30c:	2000608c 	.word	0x2000608c
 800a310:	20006074 	.word	0x20006074
 800a314:	20005b9c 	.word	0x20005b9c
 800a318:	20005b98 	.word	0x20005b98
 800a31c:	20006080 	.word	0x20006080
 800a320:	2000607c 	.word	0x2000607c

0800a324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a32a:	4b2a      	ldr	r3, [pc, #168]	; (800a3d4 <vTaskSwitchContext+0xb0>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a332:	4b29      	ldr	r3, [pc, #164]	; (800a3d8 <vTaskSwitchContext+0xb4>)
 800a334:	2201      	movs	r2, #1
 800a336:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a338:	e046      	b.n	800a3c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a33a:	4b27      	ldr	r3, [pc, #156]	; (800a3d8 <vTaskSwitchContext+0xb4>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a340:	4b26      	ldr	r3, [pc, #152]	; (800a3dc <vTaskSwitchContext+0xb8>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	e010      	b.n	800a36a <vTaskSwitchContext+0x46>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10a      	bne.n	800a364 <vTaskSwitchContext+0x40>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	607b      	str	r3, [r7, #4]
}
 800a360:	bf00      	nop
 800a362:	e7fe      	b.n	800a362 <vTaskSwitchContext+0x3e>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3b01      	subs	r3, #1
 800a368:	60fb      	str	r3, [r7, #12]
 800a36a:	491d      	ldr	r1, [pc, #116]	; (800a3e0 <vTaskSwitchContext+0xbc>)
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	4613      	mov	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4413      	add	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	440b      	add	r3, r1
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d0e4      	beq.n	800a348 <vTaskSwitchContext+0x24>
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	4613      	mov	r3, r2
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4a15      	ldr	r2, [pc, #84]	; (800a3e0 <vTaskSwitchContext+0xbc>)
 800a38a:	4413      	add	r3, r2
 800a38c:	60bb      	str	r3, [r7, #8]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	605a      	str	r2, [r3, #4]
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	3308      	adds	r3, #8
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d104      	bne.n	800a3ae <vTaskSwitchContext+0x8a>
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	685a      	ldr	r2, [r3, #4]
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	605a      	str	r2, [r3, #4]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	4a0b      	ldr	r2, [pc, #44]	; (800a3e4 <vTaskSwitchContext+0xc0>)
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	4a08      	ldr	r2, [pc, #32]	; (800a3dc <vTaskSwitchContext+0xb8>)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a3be:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <vTaskSwitchContext+0xc0>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3354      	adds	r3, #84	; 0x54
 800a3c4:	4a08      	ldr	r2, [pc, #32]	; (800a3e8 <vTaskSwitchContext+0xc4>)
 800a3c6:	6013      	str	r3, [r2, #0]
}
 800a3c8:	bf00      	nop
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	20006094 	.word	0x20006094
 800a3d8:	20006080 	.word	0x20006080
 800a3dc:	20006074 	.word	0x20006074
 800a3e0:	20005b9c 	.word	0x20005b9c
 800a3e4:	20005b98 	.word	0x20005b98
 800a3e8:	20000098 	.word	0x20000098

0800a3ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10a      	bne.n	800a412 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	60fb      	str	r3, [r7, #12]
}
 800a40e:	bf00      	nop
 800a410:	e7fe      	b.n	800a410 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a412:	4b07      	ldr	r3, [pc, #28]	; (800a430 <vTaskPlaceOnEventList+0x44>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	3318      	adds	r3, #24
 800a418:	4619      	mov	r1, r3
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f7fe fcef 	bl	8008dfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a420:	2101      	movs	r1, #1
 800a422:	6838      	ldr	r0, [r7, #0]
 800a424:	f000 fa80 	bl	800a928 <prvAddCurrentTaskToDelayedList>
}
 800a428:	bf00      	nop
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	20005b98 	.word	0x20005b98

0800a434 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10a      	bne.n	800a45c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	617b      	str	r3, [r7, #20]
}
 800a458:	bf00      	nop
 800a45a:	e7fe      	b.n	800a45a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a45c:	4b0a      	ldr	r3, [pc, #40]	; (800a488 <vTaskPlaceOnEventListRestricted+0x54>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3318      	adds	r3, #24
 800a462:	4619      	mov	r1, r3
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f7fe fca6 	bl	8008db6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d002      	beq.n	800a476 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a474:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a476:	6879      	ldr	r1, [r7, #4]
 800a478:	68b8      	ldr	r0, [r7, #8]
 800a47a:	f000 fa55 	bl	800a928 <prvAddCurrentTaskToDelayedList>
	}
 800a47e:	bf00      	nop
 800a480:	3718      	adds	r7, #24
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	20005b98 	.word	0x20005b98

0800a48c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	60fb      	str	r3, [r7, #12]
}
 800a4b4:	bf00      	nop
 800a4b6:	e7fe      	b.n	800a4b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	3318      	adds	r3, #24
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fcd7 	bl	8008e70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4c2:	4b1e      	ldr	r3, [pc, #120]	; (800a53c <xTaskRemoveFromEventList+0xb0>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d11d      	bne.n	800a506 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe fcce 	bl	8008e70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d8:	4b19      	ldr	r3, [pc, #100]	; (800a540 <xTaskRemoveFromEventList+0xb4>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d903      	bls.n	800a4e8 <xTaskRemoveFromEventList+0x5c>
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e4:	4a16      	ldr	r2, [pc, #88]	; (800a540 <xTaskRemoveFromEventList+0xb4>)
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4a13      	ldr	r2, [pc, #76]	; (800a544 <xTaskRemoveFromEventList+0xb8>)
 800a4f6:	441a      	add	r2, r3
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4610      	mov	r0, r2
 800a500:	f7fe fc59 	bl	8008db6 <vListInsertEnd>
 800a504:	e005      	b.n	800a512 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	3318      	adds	r3, #24
 800a50a:	4619      	mov	r1, r3
 800a50c:	480e      	ldr	r0, [pc, #56]	; (800a548 <xTaskRemoveFromEventList+0xbc>)
 800a50e:	f7fe fc52 	bl	8008db6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a516:	4b0d      	ldr	r3, [pc, #52]	; (800a54c <xTaskRemoveFromEventList+0xc0>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d905      	bls.n	800a52c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a520:	2301      	movs	r3, #1
 800a522:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a524:	4b0a      	ldr	r3, [pc, #40]	; (800a550 <xTaskRemoveFromEventList+0xc4>)
 800a526:	2201      	movs	r2, #1
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	e001      	b.n	800a530 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a52c:	2300      	movs	r3, #0
 800a52e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a530:	697b      	ldr	r3, [r7, #20]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3718      	adds	r7, #24
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	20006094 	.word	0x20006094
 800a540:	20006074 	.word	0x20006074
 800a544:	20005b9c 	.word	0x20005b9c
 800a548:	2000602c 	.word	0x2000602c
 800a54c:	20005b98 	.word	0x20005b98
 800a550:	20006080 	.word	0x20006080

0800a554 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a55c:	4b06      	ldr	r3, [pc, #24]	; (800a578 <vTaskInternalSetTimeOutState+0x24>)
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a564:	4b05      	ldr	r3, [pc, #20]	; (800a57c <vTaskInternalSetTimeOutState+0x28>)
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	605a      	str	r2, [r3, #4]
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	20006084 	.word	0x20006084
 800a57c:	20006070 	.word	0x20006070

0800a580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b088      	sub	sp, #32
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	613b      	str	r3, [r7, #16]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10a      	bne.n	800a5c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	60fb      	str	r3, [r7, #12]
}
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a5c2:	f000 fe7f 	bl	800b2c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a5c6:	4b1d      	ldr	r3, [pc, #116]	; (800a63c <xTaskCheckForTimeOut+0xbc>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	69ba      	ldr	r2, [r7, #24]
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5de:	d102      	bne.n	800a5e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	61fb      	str	r3, [r7, #28]
 800a5e4:	e023      	b.n	800a62e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	4b15      	ldr	r3, [pc, #84]	; (800a640 <xTaskCheckForTimeOut+0xc0>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d007      	beq.n	800a602 <xTaskCheckForTimeOut+0x82>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d302      	bcc.n	800a602 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	61fb      	str	r3, [r7, #28]
 800a600:	e015      	b.n	800a62e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d20b      	bcs.n	800a624 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	1ad2      	subs	r2, r2, r3
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f7ff ff9b 	bl	800a554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a61e:	2300      	movs	r3, #0
 800a620:	61fb      	str	r3, [r7, #28]
 800a622:	e004      	b.n	800a62e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a62a:	2301      	movs	r3, #1
 800a62c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a62e:	f000 fe79 	bl	800b324 <vPortExitCritical>

	return xReturn;
 800a632:	69fb      	ldr	r3, [r7, #28]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3720      	adds	r7, #32
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	20006070 	.word	0x20006070
 800a640:	20006084 	.word	0x20006084

0800a644 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a644:	b480      	push	{r7}
 800a646:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a648:	4b03      	ldr	r3, [pc, #12]	; (800a658 <vTaskMissedYield+0x14>)
 800a64a:	2201      	movs	r2, #1
 800a64c:	601a      	str	r2, [r3, #0]
}
 800a64e:	bf00      	nop
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	20006080 	.word	0x20006080

0800a65c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a664:	f000 f852 	bl	800a70c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a668:	4b06      	ldr	r3, [pc, #24]	; (800a684 <prvIdleTask+0x28>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d9f9      	bls.n	800a664 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a670:	4b05      	ldr	r3, [pc, #20]	; (800a688 <prvIdleTask+0x2c>)
 800a672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a680:	e7f0      	b.n	800a664 <prvIdleTask+0x8>
 800a682:	bf00      	nop
 800a684:	20005b9c 	.word	0x20005b9c
 800a688:	e000ed04 	.word	0xe000ed04

0800a68c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a692:	2300      	movs	r3, #0
 800a694:	607b      	str	r3, [r7, #4]
 800a696:	e00c      	b.n	800a6b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	4613      	mov	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4a12      	ldr	r2, [pc, #72]	; (800a6ec <prvInitialiseTaskLists+0x60>)
 800a6a4:	4413      	add	r3, r2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fb58 	bl	8008d5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	607b      	str	r3, [r7, #4]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b37      	cmp	r3, #55	; 0x37
 800a6b6:	d9ef      	bls.n	800a698 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a6b8:	480d      	ldr	r0, [pc, #52]	; (800a6f0 <prvInitialiseTaskLists+0x64>)
 800a6ba:	f7fe fb4f 	bl	8008d5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a6be:	480d      	ldr	r0, [pc, #52]	; (800a6f4 <prvInitialiseTaskLists+0x68>)
 800a6c0:	f7fe fb4c 	bl	8008d5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a6c4:	480c      	ldr	r0, [pc, #48]	; (800a6f8 <prvInitialiseTaskLists+0x6c>)
 800a6c6:	f7fe fb49 	bl	8008d5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a6ca:	480c      	ldr	r0, [pc, #48]	; (800a6fc <prvInitialiseTaskLists+0x70>)
 800a6cc:	f7fe fb46 	bl	8008d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a6d0:	480b      	ldr	r0, [pc, #44]	; (800a700 <prvInitialiseTaskLists+0x74>)
 800a6d2:	f7fe fb43 	bl	8008d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a6d6:	4b0b      	ldr	r3, [pc, #44]	; (800a704 <prvInitialiseTaskLists+0x78>)
 800a6d8:	4a05      	ldr	r2, [pc, #20]	; (800a6f0 <prvInitialiseTaskLists+0x64>)
 800a6da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a6dc:	4b0a      	ldr	r3, [pc, #40]	; (800a708 <prvInitialiseTaskLists+0x7c>)
 800a6de:	4a05      	ldr	r2, [pc, #20]	; (800a6f4 <prvInitialiseTaskLists+0x68>)
 800a6e0:	601a      	str	r2, [r3, #0]
}
 800a6e2:	bf00      	nop
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	20005b9c 	.word	0x20005b9c
 800a6f0:	20005ffc 	.word	0x20005ffc
 800a6f4:	20006010 	.word	0x20006010
 800a6f8:	2000602c 	.word	0x2000602c
 800a6fc:	20006040 	.word	0x20006040
 800a700:	20006058 	.word	0x20006058
 800a704:	20006024 	.word	0x20006024
 800a708:	20006028 	.word	0x20006028

0800a70c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a712:	e019      	b.n	800a748 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a714:	f000 fdd6 	bl	800b2c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a718:	4b10      	ldr	r3, [pc, #64]	; (800a75c <prvCheckTasksWaitingTermination+0x50>)
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3304      	adds	r3, #4
 800a724:	4618      	mov	r0, r3
 800a726:	f7fe fba3 	bl	8008e70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a72a:	4b0d      	ldr	r3, [pc, #52]	; (800a760 <prvCheckTasksWaitingTermination+0x54>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	3b01      	subs	r3, #1
 800a730:	4a0b      	ldr	r2, [pc, #44]	; (800a760 <prvCheckTasksWaitingTermination+0x54>)
 800a732:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a734:	4b0b      	ldr	r3, [pc, #44]	; (800a764 <prvCheckTasksWaitingTermination+0x58>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	3b01      	subs	r3, #1
 800a73a:	4a0a      	ldr	r2, [pc, #40]	; (800a764 <prvCheckTasksWaitingTermination+0x58>)
 800a73c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a73e:	f000 fdf1 	bl	800b324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f810 	bl	800a768 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a748:	4b06      	ldr	r3, [pc, #24]	; (800a764 <prvCheckTasksWaitingTermination+0x58>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1e1      	bne.n	800a714 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a750:	bf00      	nop
 800a752:	bf00      	nop
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20006040 	.word	0x20006040
 800a760:	2000606c 	.word	0x2000606c
 800a764:	20006054 	.word	0x20006054

0800a768 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	3354      	adds	r3, #84	; 0x54
 800a774:	4618      	mov	r0, r3
 800a776:	f001 fb03 	bl	800bd80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a780:	2b00      	cmp	r3, #0
 800a782:	d108      	bne.n	800a796 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 ff61 	bl	800b650 <vPortFree>
				vPortFree( pxTCB );
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 ff5e 	bl	800b650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a794:	e018      	b.n	800a7c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d103      	bne.n	800a7a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 ff55 	bl	800b650 <vPortFree>
	}
 800a7a6:	e00f      	b.n	800a7c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d00a      	beq.n	800a7c8 <prvDeleteTCB+0x60>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	60fb      	str	r3, [r7, #12]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <prvDeleteTCB+0x5e>
	}
 800a7c8:	bf00      	nop
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7d6:	4b0c      	ldr	r3, [pc, #48]	; (800a808 <prvResetNextTaskUnblockTime+0x38>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d104      	bne.n	800a7ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7e0:	4b0a      	ldr	r3, [pc, #40]	; (800a80c <prvResetNextTaskUnblockTime+0x3c>)
 800a7e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a7e8:	e008      	b.n	800a7fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ea:	4b07      	ldr	r3, [pc, #28]	; (800a808 <prvResetNextTaskUnblockTime+0x38>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	4a04      	ldr	r2, [pc, #16]	; (800a80c <prvResetNextTaskUnblockTime+0x3c>)
 800a7fa:	6013      	str	r3, [r2, #0]
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	20006024 	.word	0x20006024
 800a80c:	2000608c 	.word	0x2000608c

0800a810 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a816:	4b0b      	ldr	r3, [pc, #44]	; (800a844 <xTaskGetSchedulerState+0x34>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d102      	bne.n	800a824 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a81e:	2301      	movs	r3, #1
 800a820:	607b      	str	r3, [r7, #4]
 800a822:	e008      	b.n	800a836 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a824:	4b08      	ldr	r3, [pc, #32]	; (800a848 <xTaskGetSchedulerState+0x38>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d102      	bne.n	800a832 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a82c:	2302      	movs	r3, #2
 800a82e:	607b      	str	r3, [r7, #4]
 800a830:	e001      	b.n	800a836 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a832:	2300      	movs	r3, #0
 800a834:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a836:	687b      	ldr	r3, [r7, #4]
	}
 800a838:	4618      	mov	r0, r3
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	20006078 	.word	0x20006078
 800a848:	20006094 	.word	0x20006094

0800a84c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a858:	2300      	movs	r3, #0
 800a85a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d056      	beq.n	800a910 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a862:	4b2e      	ldr	r3, [pc, #184]	; (800a91c <xTaskPriorityDisinherit+0xd0>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d00a      	beq.n	800a882 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	60fb      	str	r3, [r7, #12]
}
 800a87e:	bf00      	nop
 800a880:	e7fe      	b.n	800a880 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10a      	bne.n	800a8a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	60bb      	str	r3, [r7, #8]
}
 800a89c:	bf00      	nop
 800a89e:	e7fe      	b.n	800a89e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a4:	1e5a      	subs	r2, r3, #1
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d02c      	beq.n	800a910 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d128      	bne.n	800a910 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	3304      	adds	r3, #4
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fe fad4 	bl	8008e70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e0:	4b0f      	ldr	r3, [pc, #60]	; (800a920 <xTaskPriorityDisinherit+0xd4>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d903      	bls.n	800a8f0 <xTaskPriorityDisinherit+0xa4>
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ec:	4a0c      	ldr	r2, [pc, #48]	; (800a920 <xTaskPriorityDisinherit+0xd4>)
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4a09      	ldr	r2, [pc, #36]	; (800a924 <xTaskPriorityDisinherit+0xd8>)
 800a8fe:	441a      	add	r2, r3
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	3304      	adds	r3, #4
 800a904:	4619      	mov	r1, r3
 800a906:	4610      	mov	r0, r2
 800a908:	f7fe fa55 	bl	8008db6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a90c:	2301      	movs	r3, #1
 800a90e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a910:	697b      	ldr	r3, [r7, #20]
	}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	20005b98 	.word	0x20005b98
 800a920:	20006074 	.word	0x20006074
 800a924:	20005b9c 	.word	0x20005b9c

0800a928 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a932:	4b21      	ldr	r3, [pc, #132]	; (800a9b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a938:	4b20      	ldr	r3, [pc, #128]	; (800a9bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	3304      	adds	r3, #4
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fe fa96 	bl	8008e70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a94a:	d10a      	bne.n	800a962 <prvAddCurrentTaskToDelayedList+0x3a>
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d007      	beq.n	800a962 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a952:	4b1a      	ldr	r3, [pc, #104]	; (800a9bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	3304      	adds	r3, #4
 800a958:	4619      	mov	r1, r3
 800a95a:	4819      	ldr	r0, [pc, #100]	; (800a9c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a95c:	f7fe fa2b 	bl	8008db6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a960:	e026      	b.n	800a9b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4413      	add	r3, r2
 800a968:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a96a:	4b14      	ldr	r3, [pc, #80]	; (800a9bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	429a      	cmp	r2, r3
 800a978:	d209      	bcs.n	800a98e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a97a:	4b12      	ldr	r3, [pc, #72]	; (800a9c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	4b0f      	ldr	r3, [pc, #60]	; (800a9bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3304      	adds	r3, #4
 800a984:	4619      	mov	r1, r3
 800a986:	4610      	mov	r0, r2
 800a988:	f7fe fa39 	bl	8008dfe <vListInsert>
}
 800a98c:	e010      	b.n	800a9b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a98e:	4b0e      	ldr	r3, [pc, #56]	; (800a9c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <prvAddCurrentTaskToDelayedList+0x94>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3304      	adds	r3, #4
 800a998:	4619      	mov	r1, r3
 800a99a:	4610      	mov	r0, r2
 800a99c:	f7fe fa2f 	bl	8008dfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9a0:	4b0a      	ldr	r3, [pc, #40]	; (800a9cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d202      	bcs.n	800a9b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a9aa:	4a08      	ldr	r2, [pc, #32]	; (800a9cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	6013      	str	r3, [r2, #0]
}
 800a9b0:	bf00      	nop
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	20006070 	.word	0x20006070
 800a9bc:	20005b98 	.word	0x20005b98
 800a9c0:	20006058 	.word	0x20006058
 800a9c4:	20006028 	.word	0x20006028
 800a9c8:	20006024 	.word	0x20006024
 800a9cc:	2000608c 	.word	0x2000608c

0800a9d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b08a      	sub	sp, #40	; 0x28
 800a9d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a9da:	f000 fb07 	bl	800afec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a9de:	4b1c      	ldr	r3, [pc, #112]	; (800aa50 <xTimerCreateTimerTask+0x80>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d021      	beq.n	800aa2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a9ee:	1d3a      	adds	r2, r7, #4
 800a9f0:	f107 0108 	add.w	r1, r7, #8
 800a9f4:	f107 030c 	add.w	r3, r7, #12
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fe f995 	bl	8008d28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a9fe:	6879      	ldr	r1, [r7, #4]
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	9202      	str	r2, [sp, #8]
 800aa06:	9301      	str	r3, [sp, #4]
 800aa08:	2302      	movs	r3, #2
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	460a      	mov	r2, r1
 800aa10:	4910      	ldr	r1, [pc, #64]	; (800aa54 <xTimerCreateTimerTask+0x84>)
 800aa12:	4811      	ldr	r0, [pc, #68]	; (800aa58 <xTimerCreateTimerTask+0x88>)
 800aa14:	f7ff f8b4 	bl	8009b80 <xTaskCreateStatic>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	4a10      	ldr	r2, [pc, #64]	; (800aa5c <xTimerCreateTimerTask+0x8c>)
 800aa1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <xTimerCreateTimerTask+0x8c>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa26:	2301      	movs	r3, #1
 800aa28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10a      	bne.n	800aa46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	613b      	str	r3, [r7, #16]
}
 800aa42:	bf00      	nop
 800aa44:	e7fe      	b.n	800aa44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa46:	697b      	ldr	r3, [r7, #20]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	200060c8 	.word	0x200060c8
 800aa54:	0800cc48 	.word	0x0800cc48
 800aa58:	0800ab95 	.word	0x0800ab95
 800aa5c:	200060cc 	.word	0x200060cc

0800aa60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08a      	sub	sp, #40	; 0x28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10a      	bne.n	800aa8e <xTimerGenericCommand+0x2e>
	__asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	623b      	str	r3, [r7, #32]
}
 800aa8a:	bf00      	nop
 800aa8c:	e7fe      	b.n	800aa8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa8e:	4b1a      	ldr	r3, [pc, #104]	; (800aaf8 <xTimerGenericCommand+0x98>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d02a      	beq.n	800aaec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	2b05      	cmp	r3, #5
 800aaa6:	dc18      	bgt.n	800aada <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aaa8:	f7ff feb2 	bl	800a810 <xTaskGetSchedulerState>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d109      	bne.n	800aac6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aab2:	4b11      	ldr	r3, [pc, #68]	; (800aaf8 <xTimerGenericCommand+0x98>)
 800aab4:	6818      	ldr	r0, [r3, #0]
 800aab6:	f107 0110 	add.w	r1, r7, #16
 800aaba:	2300      	movs	r3, #0
 800aabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aabe:	f7fe fba9 	bl	8009214 <xQueueGenericSend>
 800aac2:	6278      	str	r0, [r7, #36]	; 0x24
 800aac4:	e012      	b.n	800aaec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aac6:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <xTimerGenericCommand+0x98>)
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	f107 0110 	add.w	r1, r7, #16
 800aace:	2300      	movs	r3, #0
 800aad0:	2200      	movs	r2, #0
 800aad2:	f7fe fb9f 	bl	8009214 <xQueueGenericSend>
 800aad6:	6278      	str	r0, [r7, #36]	; 0x24
 800aad8:	e008      	b.n	800aaec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aada:	4b07      	ldr	r3, [pc, #28]	; (800aaf8 <xTimerGenericCommand+0x98>)
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	f107 0110 	add.w	r1, r7, #16
 800aae2:	2300      	movs	r3, #0
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	f7fe fc93 	bl	8009410 <xQueueGenericSendFromISR>
 800aaea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3728      	adds	r7, #40	; 0x28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	200060c8 	.word	0x200060c8

0800aafc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b088      	sub	sp, #32
 800ab00:	af02      	add	r7, sp, #8
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab06:	4b22      	ldr	r3, [pc, #136]	; (800ab90 <prvProcessExpiredTimer+0x94>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	3304      	adds	r3, #4
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fe f9ab 	bl	8008e70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d022      	beq.n	800ab6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	699a      	ldr	r2, [r3, #24]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	18d1      	adds	r1, r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	6978      	ldr	r0, [r7, #20]
 800ab36:	f000 f8d1 	bl	800acdc <prvInsertTimerInActiveList>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d01f      	beq.n	800ab80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab40:	2300      	movs	r3, #0
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	2300      	movs	r3, #0
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	2100      	movs	r1, #0
 800ab4a:	6978      	ldr	r0, [r7, #20]
 800ab4c:	f7ff ff88 	bl	800aa60 <xTimerGenericCommand>
 800ab50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d113      	bne.n	800ab80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	60fb      	str	r3, [r7, #12]
}
 800ab6a:	bf00      	nop
 800ab6c:	e7fe      	b.n	800ab6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab74:	f023 0301 	bic.w	r3, r3, #1
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	6a1b      	ldr	r3, [r3, #32]
 800ab84:	6978      	ldr	r0, [r7, #20]
 800ab86:	4798      	blx	r3
}
 800ab88:	bf00      	nop
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	200060c0 	.word	0x200060c0

0800ab94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab9c:	f107 0308 	add.w	r3, r7, #8
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 f857 	bl	800ac54 <prvGetNextExpireTime>
 800aba6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	4619      	mov	r1, r3
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f000 f803 	bl	800abb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800abb2:	f000 f8d5 	bl	800ad60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800abb6:	e7f1      	b.n	800ab9c <prvTimerTask+0x8>

0800abb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800abc2:	f7ff fa39 	bl	800a038 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abc6:	f107 0308 	add.w	r3, r7, #8
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 f866 	bl	800ac9c <prvSampleTimeNow>
 800abd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d130      	bne.n	800ac3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10a      	bne.n	800abf4 <prvProcessTimerOrBlockTask+0x3c>
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d806      	bhi.n	800abf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800abe6:	f7ff fa35 	bl	800a054 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800abea:	68f9      	ldr	r1, [r7, #12]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f7ff ff85 	bl	800aafc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800abf2:	e024      	b.n	800ac3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d008      	beq.n	800ac0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800abfa:	4b13      	ldr	r3, [pc, #76]	; (800ac48 <prvProcessTimerOrBlockTask+0x90>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <prvProcessTimerOrBlockTask+0x50>
 800ac04:	2301      	movs	r3, #1
 800ac06:	e000      	b.n	800ac0a <prvProcessTimerOrBlockTask+0x52>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac0c:	4b0f      	ldr	r3, [pc, #60]	; (800ac4c <prvProcessTimerOrBlockTask+0x94>)
 800ac0e:	6818      	ldr	r0, [r3, #0]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	1ad3      	subs	r3, r2, r3
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	4619      	mov	r1, r3
 800ac1a:	f7fe ff7d 	bl	8009b18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac1e:	f7ff fa19 	bl	800a054 <xTaskResumeAll>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10a      	bne.n	800ac3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac28:	4b09      	ldr	r3, [pc, #36]	; (800ac50 <prvProcessTimerOrBlockTask+0x98>)
 800ac2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac2e:	601a      	str	r2, [r3, #0]
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	f3bf 8f6f 	isb	sy
}
 800ac38:	e001      	b.n	800ac3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac3a:	f7ff fa0b 	bl	800a054 <xTaskResumeAll>
}
 800ac3e:	bf00      	nop
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	200060c4 	.word	0x200060c4
 800ac4c:	200060c8 	.word	0x200060c8
 800ac50:	e000ed04 	.word	0xe000ed04

0800ac54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac5c:	4b0e      	ldr	r3, [pc, #56]	; (800ac98 <prvGetNextExpireTime+0x44>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <prvGetNextExpireTime+0x16>
 800ac66:	2201      	movs	r2, #1
 800ac68:	e000      	b.n	800ac6c <prvGetNextExpireTime+0x18>
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d105      	bne.n	800ac84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac78:	4b07      	ldr	r3, [pc, #28]	; (800ac98 <prvGetNextExpireTime+0x44>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	60fb      	str	r3, [r7, #12]
 800ac82:	e001      	b.n	800ac88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac84:	2300      	movs	r3, #0
 800ac86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac88:	68fb      	ldr	r3, [r7, #12]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	200060c0 	.word	0x200060c0

0800ac9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aca4:	f7ff fa74 	bl	800a190 <xTaskGetTickCount>
 800aca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800acaa:	4b0b      	ldr	r3, [pc, #44]	; (800acd8 <prvSampleTimeNow+0x3c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d205      	bcs.n	800acc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800acb4:	f000 f936 	bl	800af24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	e002      	b.n	800acc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800acc6:	4a04      	ldr	r2, [pc, #16]	; (800acd8 <prvSampleTimeNow+0x3c>)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800accc:	68fb      	ldr	r3, [r7, #12]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	200060d0 	.word	0x200060d0

0800acdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800acea:	2300      	movs	r3, #0
 800acec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d812      	bhi.n	800ad28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	1ad2      	subs	r2, r2, r3
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d302      	bcc.n	800ad16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad10:	2301      	movs	r3, #1
 800ad12:	617b      	str	r3, [r7, #20]
 800ad14:	e01b      	b.n	800ad4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad16:	4b10      	ldr	r3, [pc, #64]	; (800ad58 <prvInsertTimerInActiveList+0x7c>)
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	4619      	mov	r1, r3
 800ad20:	4610      	mov	r0, r2
 800ad22:	f7fe f86c 	bl	8008dfe <vListInsert>
 800ad26:	e012      	b.n	800ad4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d206      	bcs.n	800ad3e <prvInsertTimerInActiveList+0x62>
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d302      	bcc.n	800ad3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	617b      	str	r3, [r7, #20]
 800ad3c:	e007      	b.n	800ad4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad3e:	4b07      	ldr	r3, [pc, #28]	; (800ad5c <prvInsertTimerInActiveList+0x80>)
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	3304      	adds	r3, #4
 800ad46:	4619      	mov	r1, r3
 800ad48:	4610      	mov	r0, r2
 800ad4a:	f7fe f858 	bl	8008dfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad4e:	697b      	ldr	r3, [r7, #20]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	200060c4 	.word	0x200060c4
 800ad5c:	200060c0 	.word	0x200060c0

0800ad60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08e      	sub	sp, #56	; 0x38
 800ad64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad66:	e0ca      	b.n	800aefe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da18      	bge.n	800ada0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad6e:	1d3b      	adds	r3, r7, #4
 800ad70:	3304      	adds	r3, #4
 800ad72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10a      	bne.n	800ad90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	61fb      	str	r3, [r7, #28]
}
 800ad8c:	bf00      	nop
 800ad8e:	e7fe      	b.n	800ad8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad96:	6850      	ldr	r0, [r2, #4]
 800ad98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad9a:	6892      	ldr	r2, [r2, #8]
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f2c0 80aa 	blt.w	800aefc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800adac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adae:	695b      	ldr	r3, [r3, #20]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d004      	beq.n	800adbe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb6:	3304      	adds	r3, #4
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fe f859 	bl	8008e70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800adbe:	463b      	mov	r3, r7
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff ff6b 	bl	800ac9c <prvSampleTimeNow>
 800adc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b09      	cmp	r3, #9
 800adcc:	f200 8097 	bhi.w	800aefe <prvProcessReceivedCommands+0x19e>
 800add0:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <prvProcessReceivedCommands+0x78>)
 800add2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add6:	bf00      	nop
 800add8:	0800ae01 	.word	0x0800ae01
 800addc:	0800ae01 	.word	0x0800ae01
 800ade0:	0800ae01 	.word	0x0800ae01
 800ade4:	0800ae75 	.word	0x0800ae75
 800ade8:	0800ae89 	.word	0x0800ae89
 800adec:	0800aed3 	.word	0x0800aed3
 800adf0:	0800ae01 	.word	0x0800ae01
 800adf4:	0800ae01 	.word	0x0800ae01
 800adf8:	0800ae75 	.word	0x0800ae75
 800adfc:	0800ae89 	.word	0x0800ae89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae06:	f043 0301 	orr.w	r3, r3, #1
 800ae0a:	b2da      	uxtb	r2, r3
 800ae0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	18d1      	adds	r1, r2, r3
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae20:	f7ff ff5c 	bl	800acdc <prvInsertTimerInActiveList>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d069      	beq.n	800aefe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae38:	f003 0304 	and.w	r3, r3, #4
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d05e      	beq.n	800aefe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae44:	699b      	ldr	r3, [r3, #24]
 800ae46:	441a      	add	r2, r3
 800ae48:	2300      	movs	r3, #0
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	2100      	movs	r1, #0
 800ae50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae52:	f7ff fe05 	bl	800aa60 <xTimerGenericCommand>
 800ae56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d14f      	bne.n	800aefe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	61bb      	str	r3, [r7, #24]
}
 800ae70:	bf00      	nop
 800ae72:	e7fe      	b.n	800ae72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae7a:	f023 0301 	bic.w	r3, r3, #1
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ae86:	e03a      	b.n	800aefe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae8e:	f043 0301 	orr.w	r3, r3, #1
 800ae92:	b2da      	uxtb	r2, r3
 800ae94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10a      	bne.n	800aebe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	617b      	str	r3, [r7, #20]
}
 800aeba:	bf00      	nop
 800aebc:	e7fe      	b.n	800aebc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec0:	699a      	ldr	r2, [r3, #24]
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	18d1      	adds	r1, r2, r3
 800aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aecc:	f7ff ff06 	bl	800acdc <prvInsertTimerInActiveList>
					break;
 800aed0:	e015      	b.n	800aefe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aed8:	f003 0302 	and.w	r3, r3, #2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d103      	bne.n	800aee8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aee2:	f000 fbb5 	bl	800b650 <vPortFree>
 800aee6:	e00a      	b.n	800aefe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeee:	f023 0301 	bic.w	r3, r3, #1
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aefa:	e000      	b.n	800aefe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aefc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aefe:	4b08      	ldr	r3, [pc, #32]	; (800af20 <prvProcessReceivedCommands+0x1c0>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	1d39      	adds	r1, r7, #4
 800af04:	2200      	movs	r2, #0
 800af06:	4618      	mov	r0, r3
 800af08:	f7fe fb1e 	bl	8009548 <xQueueReceive>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f47f af2a 	bne.w	800ad68 <prvProcessReceivedCommands+0x8>
	}
}
 800af14:	bf00      	nop
 800af16:	bf00      	nop
 800af18:	3730      	adds	r7, #48	; 0x30
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	200060c8 	.word	0x200060c8

0800af24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b088      	sub	sp, #32
 800af28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af2a:	e048      	b.n	800afbe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af2c:	4b2d      	ldr	r3, [pc, #180]	; (800afe4 <prvSwitchTimerLists+0xc0>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af36:	4b2b      	ldr	r3, [pc, #172]	; (800afe4 <prvSwitchTimerLists+0xc0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	3304      	adds	r3, #4
 800af44:	4618      	mov	r0, r3
 800af46:	f7fd ff93 	bl	8008e70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af58:	f003 0304 	and.w	r3, r3, #4
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d02e      	beq.n	800afbe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	4413      	add	r3, r2
 800af68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d90e      	bls.n	800af90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af7e:	4b19      	ldr	r3, [pc, #100]	; (800afe4 <prvSwitchTimerLists+0xc0>)
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	3304      	adds	r3, #4
 800af86:	4619      	mov	r1, r3
 800af88:	4610      	mov	r0, r2
 800af8a:	f7fd ff38 	bl	8008dfe <vListInsert>
 800af8e:	e016      	b.n	800afbe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af90:	2300      	movs	r3, #0
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	2300      	movs	r3, #0
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	2100      	movs	r1, #0
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7ff fd60 	bl	800aa60 <xTimerGenericCommand>
 800afa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10a      	bne.n	800afbe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	603b      	str	r3, [r7, #0]
}
 800afba:	bf00      	nop
 800afbc:	e7fe      	b.n	800afbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afbe:	4b09      	ldr	r3, [pc, #36]	; (800afe4 <prvSwitchTimerLists+0xc0>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1b1      	bne.n	800af2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800afc8:	4b06      	ldr	r3, [pc, #24]	; (800afe4 <prvSwitchTimerLists+0xc0>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800afce:	4b06      	ldr	r3, [pc, #24]	; (800afe8 <prvSwitchTimerLists+0xc4>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a04      	ldr	r2, [pc, #16]	; (800afe4 <prvSwitchTimerLists+0xc0>)
 800afd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800afd6:	4a04      	ldr	r2, [pc, #16]	; (800afe8 <prvSwitchTimerLists+0xc4>)
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	6013      	str	r3, [r2, #0]
}
 800afdc:	bf00      	nop
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	200060c0 	.word	0x200060c0
 800afe8:	200060c4 	.word	0x200060c4

0800afec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aff2:	f000 f967 	bl	800b2c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aff6:	4b15      	ldr	r3, [pc, #84]	; (800b04c <prvCheckForValidListAndQueue+0x60>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d120      	bne.n	800b040 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800affe:	4814      	ldr	r0, [pc, #80]	; (800b050 <prvCheckForValidListAndQueue+0x64>)
 800b000:	f7fd feac 	bl	8008d5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b004:	4813      	ldr	r0, [pc, #76]	; (800b054 <prvCheckForValidListAndQueue+0x68>)
 800b006:	f7fd fea9 	bl	8008d5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b00a:	4b13      	ldr	r3, [pc, #76]	; (800b058 <prvCheckForValidListAndQueue+0x6c>)
 800b00c:	4a10      	ldr	r2, [pc, #64]	; (800b050 <prvCheckForValidListAndQueue+0x64>)
 800b00e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b010:	4b12      	ldr	r3, [pc, #72]	; (800b05c <prvCheckForValidListAndQueue+0x70>)
 800b012:	4a10      	ldr	r2, [pc, #64]	; (800b054 <prvCheckForValidListAndQueue+0x68>)
 800b014:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b016:	2300      	movs	r3, #0
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	4b11      	ldr	r3, [pc, #68]	; (800b060 <prvCheckForValidListAndQueue+0x74>)
 800b01c:	4a11      	ldr	r2, [pc, #68]	; (800b064 <prvCheckForValidListAndQueue+0x78>)
 800b01e:	2110      	movs	r1, #16
 800b020:	200a      	movs	r0, #10
 800b022:	f7fd ffb7 	bl	8008f94 <xQueueGenericCreateStatic>
 800b026:	4603      	mov	r3, r0
 800b028:	4a08      	ldr	r2, [pc, #32]	; (800b04c <prvCheckForValidListAndQueue+0x60>)
 800b02a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b02c:	4b07      	ldr	r3, [pc, #28]	; (800b04c <prvCheckForValidListAndQueue+0x60>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d005      	beq.n	800b040 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b034:	4b05      	ldr	r3, [pc, #20]	; (800b04c <prvCheckForValidListAndQueue+0x60>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	490b      	ldr	r1, [pc, #44]	; (800b068 <prvCheckForValidListAndQueue+0x7c>)
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fe fd18 	bl	8009a70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b040:	f000 f970 	bl	800b324 <vPortExitCritical>
}
 800b044:	bf00      	nop
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	200060c8 	.word	0x200060c8
 800b050:	20006098 	.word	0x20006098
 800b054:	200060ac 	.word	0x200060ac
 800b058:	200060c0 	.word	0x200060c0
 800b05c:	200060c4 	.word	0x200060c4
 800b060:	20006174 	.word	0x20006174
 800b064:	200060d4 	.word	0x200060d4
 800b068:	0800cc50 	.word	0x0800cc50

0800b06c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3b04      	subs	r3, #4
 800b07c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	3b04      	subs	r3, #4
 800b08a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	f023 0201 	bic.w	r2, r3, #1
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3b04      	subs	r3, #4
 800b09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b09c:	4a0c      	ldr	r2, [pc, #48]	; (800b0d0 <pxPortInitialiseStack+0x64>)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3b14      	subs	r3, #20
 800b0a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3b04      	subs	r3, #4
 800b0b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f06f 0202 	mvn.w	r2, #2
 800b0ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	3b20      	subs	r3, #32
 800b0c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr
 800b0d0:	0800b0d5 	.word	0x0800b0d5

0800b0d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b0de:	4b12      	ldr	r3, [pc, #72]	; (800b128 <prvTaskExitError+0x54>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0e6:	d00a      	beq.n	800b0fe <prvTaskExitError+0x2a>
	__asm volatile
 800b0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ec:	f383 8811 	msr	BASEPRI, r3
 800b0f0:	f3bf 8f6f 	isb	sy
 800b0f4:	f3bf 8f4f 	dsb	sy
 800b0f8:	60fb      	str	r3, [r7, #12]
}
 800b0fa:	bf00      	nop
 800b0fc:	e7fe      	b.n	800b0fc <prvTaskExitError+0x28>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	60bb      	str	r3, [r7, #8]
}
 800b110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b112:	bf00      	nop
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d0fc      	beq.n	800b114 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b11a:	bf00      	nop
 800b11c:	bf00      	nop
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr
 800b128:	20000094 	.word	0x20000094
 800b12c:	00000000 	.word	0x00000000

0800b130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b130:	4b07      	ldr	r3, [pc, #28]	; (800b150 <pxCurrentTCBConst2>)
 800b132:	6819      	ldr	r1, [r3, #0]
 800b134:	6808      	ldr	r0, [r1, #0]
 800b136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13a:	f380 8809 	msr	PSP, r0
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f04f 0000 	mov.w	r0, #0
 800b146:	f380 8811 	msr	BASEPRI, r0
 800b14a:	4770      	bx	lr
 800b14c:	f3af 8000 	nop.w

0800b150 <pxCurrentTCBConst2>:
 800b150:	20005b98 	.word	0x20005b98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b154:	bf00      	nop
 800b156:	bf00      	nop

0800b158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b158:	4808      	ldr	r0, [pc, #32]	; (800b17c <prvPortStartFirstTask+0x24>)
 800b15a:	6800      	ldr	r0, [r0, #0]
 800b15c:	6800      	ldr	r0, [r0, #0]
 800b15e:	f380 8808 	msr	MSP, r0
 800b162:	f04f 0000 	mov.w	r0, #0
 800b166:	f380 8814 	msr	CONTROL, r0
 800b16a:	b662      	cpsie	i
 800b16c:	b661      	cpsie	f
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	df00      	svc	0
 800b178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b17a:	bf00      	nop
 800b17c:	e000ed08 	.word	0xe000ed08

0800b180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b186:	4b46      	ldr	r3, [pc, #280]	; (800b2a0 <xPortStartScheduler+0x120>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a46      	ldr	r2, [pc, #280]	; (800b2a4 <xPortStartScheduler+0x124>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d10a      	bne.n	800b1a6 <xPortStartScheduler+0x26>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	613b      	str	r3, [r7, #16]
}
 800b1a2:	bf00      	nop
 800b1a4:	e7fe      	b.n	800b1a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1a6:	4b3e      	ldr	r3, [pc, #248]	; (800b2a0 <xPortStartScheduler+0x120>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a3f      	ldr	r2, [pc, #252]	; (800b2a8 <xPortStartScheduler+0x128>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d10a      	bne.n	800b1c6 <xPortStartScheduler+0x46>
	__asm volatile
 800b1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b4:	f383 8811 	msr	BASEPRI, r3
 800b1b8:	f3bf 8f6f 	isb	sy
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	60fb      	str	r3, [r7, #12]
}
 800b1c2:	bf00      	nop
 800b1c4:	e7fe      	b.n	800b1c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b1c6:	4b39      	ldr	r3, [pc, #228]	; (800b2ac <xPortStartScheduler+0x12c>)
 800b1c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	22ff      	movs	r2, #255	; 0xff
 800b1d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b1e0:	78fb      	ldrb	r3, [r7, #3]
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b1e8:	b2da      	uxtb	r2, r3
 800b1ea:	4b31      	ldr	r3, [pc, #196]	; (800b2b0 <xPortStartScheduler+0x130>)
 800b1ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b1ee:	4b31      	ldr	r3, [pc, #196]	; (800b2b4 <xPortStartScheduler+0x134>)
 800b1f0:	2207      	movs	r2, #7
 800b1f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1f4:	e009      	b.n	800b20a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b1f6:	4b2f      	ldr	r3, [pc, #188]	; (800b2b4 <xPortStartScheduler+0x134>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	4a2d      	ldr	r2, [pc, #180]	; (800b2b4 <xPortStartScheduler+0x134>)
 800b1fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b200:	78fb      	ldrb	r3, [r7, #3]
 800b202:	b2db      	uxtb	r3, r3
 800b204:	005b      	lsls	r3, r3, #1
 800b206:	b2db      	uxtb	r3, r3
 800b208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b20a:	78fb      	ldrb	r3, [r7, #3]
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b212:	2b80      	cmp	r3, #128	; 0x80
 800b214:	d0ef      	beq.n	800b1f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b216:	4b27      	ldr	r3, [pc, #156]	; (800b2b4 <xPortStartScheduler+0x134>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f1c3 0307 	rsb	r3, r3, #7
 800b21e:	2b04      	cmp	r3, #4
 800b220:	d00a      	beq.n	800b238 <xPortStartScheduler+0xb8>
	__asm volatile
 800b222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b226:	f383 8811 	msr	BASEPRI, r3
 800b22a:	f3bf 8f6f 	isb	sy
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	60bb      	str	r3, [r7, #8]
}
 800b234:	bf00      	nop
 800b236:	e7fe      	b.n	800b236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b238:	4b1e      	ldr	r3, [pc, #120]	; (800b2b4 <xPortStartScheduler+0x134>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	021b      	lsls	r3, r3, #8
 800b23e:	4a1d      	ldr	r2, [pc, #116]	; (800b2b4 <xPortStartScheduler+0x134>)
 800b240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b242:	4b1c      	ldr	r3, [pc, #112]	; (800b2b4 <xPortStartScheduler+0x134>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b24a:	4a1a      	ldr	r2, [pc, #104]	; (800b2b4 <xPortStartScheduler+0x134>)
 800b24c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	b2da      	uxtb	r2, r3
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b256:	4b18      	ldr	r3, [pc, #96]	; (800b2b8 <xPortStartScheduler+0x138>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a17      	ldr	r2, [pc, #92]	; (800b2b8 <xPortStartScheduler+0x138>)
 800b25c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b262:	4b15      	ldr	r3, [pc, #84]	; (800b2b8 <xPortStartScheduler+0x138>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a14      	ldr	r2, [pc, #80]	; (800b2b8 <xPortStartScheduler+0x138>)
 800b268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b26c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b26e:	f000 f8dd 	bl	800b42c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b272:	4b12      	ldr	r3, [pc, #72]	; (800b2bc <xPortStartScheduler+0x13c>)
 800b274:	2200      	movs	r2, #0
 800b276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b278:	f000 f8fc 	bl	800b474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b27c:	4b10      	ldr	r3, [pc, #64]	; (800b2c0 <xPortStartScheduler+0x140>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a0f      	ldr	r2, [pc, #60]	; (800b2c0 <xPortStartScheduler+0x140>)
 800b282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b288:	f7ff ff66 	bl	800b158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b28c:	f7ff f84a 	bl	800a324 <vTaskSwitchContext>
	prvTaskExitError();
 800b290:	f7ff ff20 	bl	800b0d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3718      	adds	r7, #24
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	e000ed00 	.word	0xe000ed00
 800b2a4:	410fc271 	.word	0x410fc271
 800b2a8:	410fc270 	.word	0x410fc270
 800b2ac:	e000e400 	.word	0xe000e400
 800b2b0:	200061c4 	.word	0x200061c4
 800b2b4:	200061c8 	.word	0x200061c8
 800b2b8:	e000ed20 	.word	0xe000ed20
 800b2bc:	20000094 	.word	0x20000094
 800b2c0:	e000ef34 	.word	0xe000ef34

0800b2c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	607b      	str	r3, [r7, #4]
}
 800b2dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b2de:	4b0f      	ldr	r3, [pc, #60]	; (800b31c <vPortEnterCritical+0x58>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	4a0d      	ldr	r2, [pc, #52]	; (800b31c <vPortEnterCritical+0x58>)
 800b2e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b2e8:	4b0c      	ldr	r3, [pc, #48]	; (800b31c <vPortEnterCritical+0x58>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d10f      	bne.n	800b310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b2f0:	4b0b      	ldr	r3, [pc, #44]	; (800b320 <vPortEnterCritical+0x5c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00a      	beq.n	800b310 <vPortEnterCritical+0x4c>
	__asm volatile
 800b2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	603b      	str	r3, [r7, #0]
}
 800b30c:	bf00      	nop
 800b30e:	e7fe      	b.n	800b30e <vPortEnterCritical+0x4a>
	}
}
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr
 800b31c:	20000094 	.word	0x20000094
 800b320:	e000ed04 	.word	0xe000ed04

0800b324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b32a:	4b12      	ldr	r3, [pc, #72]	; (800b374 <vPortExitCritical+0x50>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10a      	bne.n	800b348 <vPortExitCritical+0x24>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	607b      	str	r3, [r7, #4]
}
 800b344:	bf00      	nop
 800b346:	e7fe      	b.n	800b346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b348:	4b0a      	ldr	r3, [pc, #40]	; (800b374 <vPortExitCritical+0x50>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	3b01      	subs	r3, #1
 800b34e:	4a09      	ldr	r2, [pc, #36]	; (800b374 <vPortExitCritical+0x50>)
 800b350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b352:	4b08      	ldr	r3, [pc, #32]	; (800b374 <vPortExitCritical+0x50>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d105      	bne.n	800b366 <vPortExitCritical+0x42>
 800b35a:	2300      	movs	r3, #0
 800b35c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	f383 8811 	msr	BASEPRI, r3
}
 800b364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b366:	bf00      	nop
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	20000094 	.word	0x20000094
	...

0800b380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b380:	f3ef 8009 	mrs	r0, PSP
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	4b15      	ldr	r3, [pc, #84]	; (800b3e0 <pxCurrentTCBConst>)
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	f01e 0f10 	tst.w	lr, #16
 800b390:	bf08      	it	eq
 800b392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39a:	6010      	str	r0, [r2, #0]
 800b39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b3a4:	f380 8811 	msr	BASEPRI, r0
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	f3bf 8f6f 	isb	sy
 800b3b0:	f7fe ffb8 	bl	800a324 <vTaskSwitchContext>
 800b3b4:	f04f 0000 	mov.w	r0, #0
 800b3b8:	f380 8811 	msr	BASEPRI, r0
 800b3bc:	bc09      	pop	{r0, r3}
 800b3be:	6819      	ldr	r1, [r3, #0]
 800b3c0:	6808      	ldr	r0, [r1, #0]
 800b3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c6:	f01e 0f10 	tst.w	lr, #16
 800b3ca:	bf08      	it	eq
 800b3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b3d0:	f380 8809 	msr	PSP, r0
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	f3af 8000 	nop.w

0800b3e0 <pxCurrentTCBConst>:
 800b3e0:	20005b98 	.word	0x20005b98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b3e4:	bf00      	nop
 800b3e6:	bf00      	nop

0800b3e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	607b      	str	r3, [r7, #4]
}
 800b400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b402:	f7fe fed5 	bl	800a1b0 <xTaskIncrementTick>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d003      	beq.n	800b414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b40c:	4b06      	ldr	r3, [pc, #24]	; (800b428 <xPortSysTickHandler+0x40>)
 800b40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b412:	601a      	str	r2, [r3, #0]
 800b414:	2300      	movs	r3, #0
 800b416:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	f383 8811 	msr	BASEPRI, r3
}
 800b41e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	e000ed04 	.word	0xe000ed04

0800b42c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b42c:	b480      	push	{r7}
 800b42e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b430:	4b0b      	ldr	r3, [pc, #44]	; (800b460 <vPortSetupTimerInterrupt+0x34>)
 800b432:	2200      	movs	r2, #0
 800b434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b436:	4b0b      	ldr	r3, [pc, #44]	; (800b464 <vPortSetupTimerInterrupt+0x38>)
 800b438:	2200      	movs	r2, #0
 800b43a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b43c:	4b0a      	ldr	r3, [pc, #40]	; (800b468 <vPortSetupTimerInterrupt+0x3c>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a0a      	ldr	r2, [pc, #40]	; (800b46c <vPortSetupTimerInterrupt+0x40>)
 800b442:	fba2 2303 	umull	r2, r3, r2, r3
 800b446:	099b      	lsrs	r3, r3, #6
 800b448:	4a09      	ldr	r2, [pc, #36]	; (800b470 <vPortSetupTimerInterrupt+0x44>)
 800b44a:	3b01      	subs	r3, #1
 800b44c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b44e:	4b04      	ldr	r3, [pc, #16]	; (800b460 <vPortSetupTimerInterrupt+0x34>)
 800b450:	2207      	movs	r2, #7
 800b452:	601a      	str	r2, [r3, #0]
}
 800b454:	bf00      	nop
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	e000e010 	.word	0xe000e010
 800b464:	e000e018 	.word	0xe000e018
 800b468:	20000078 	.word	0x20000078
 800b46c:	10624dd3 	.word	0x10624dd3
 800b470:	e000e014 	.word	0xe000e014

0800b474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b484 <vPortEnableVFP+0x10>
 800b478:	6801      	ldr	r1, [r0, #0]
 800b47a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b47e:	6001      	str	r1, [r0, #0]
 800b480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b482:	bf00      	nop
 800b484:	e000ed88 	.word	0xe000ed88

0800b488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b48e:	f3ef 8305 	mrs	r3, IPSR
 800b492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b0f      	cmp	r3, #15
 800b498:	d914      	bls.n	800b4c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b49a:	4a17      	ldr	r2, [pc, #92]	; (800b4f8 <vPortValidateInterruptPriority+0x70>)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	4413      	add	r3, r2
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4a4:	4b15      	ldr	r3, [pc, #84]	; (800b4fc <vPortValidateInterruptPriority+0x74>)
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	7afa      	ldrb	r2, [r7, #11]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d20a      	bcs.n	800b4c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	607b      	str	r3, [r7, #4]
}
 800b4c0:	bf00      	nop
 800b4c2:	e7fe      	b.n	800b4c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b4c4:	4b0e      	ldr	r3, [pc, #56]	; (800b500 <vPortValidateInterruptPriority+0x78>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b4cc:	4b0d      	ldr	r3, [pc, #52]	; (800b504 <vPortValidateInterruptPriority+0x7c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d90a      	bls.n	800b4ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	603b      	str	r3, [r7, #0]
}
 800b4e6:	bf00      	nop
 800b4e8:	e7fe      	b.n	800b4e8 <vPortValidateInterruptPriority+0x60>
	}
 800b4ea:	bf00      	nop
 800b4ec:	3714      	adds	r7, #20
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	e000e3f0 	.word	0xe000e3f0
 800b4fc:	200061c4 	.word	0x200061c4
 800b500:	e000ed0c 	.word	0xe000ed0c
 800b504:	200061c8 	.word	0x200061c8

0800b508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b088      	sub	sp, #32
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b510:	2300      	movs	r3, #0
 800b512:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800b514:	4b48      	ldr	r3, [pc, #288]	; (800b638 <pvPortMalloc+0x130>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10a      	bne.n	800b532 <pvPortMalloc+0x2a>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	60fb      	str	r3, [r7, #12]
}
 800b52e:	bf00      	nop
 800b530:	e7fe      	b.n	800b530 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800b532:	f7fe fd81 	bl	800a038 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b536:	4b41      	ldr	r3, [pc, #260]	; (800b63c <pvPortMalloc+0x134>)
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4013      	ands	r3, r2
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d172      	bne.n	800b628 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00d      	beq.n	800b564 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800b548:	2208      	movs	r2, #8
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4413      	add	r3, r2
 800b54e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f003 0307 	and.w	r3, r3, #7
 800b556:	2b00      	cmp	r3, #0
 800b558:	d004      	beq.n	800b564 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f023 0307 	bic.w	r3, r3, #7
 800b560:	3308      	adds	r3, #8
 800b562:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d05e      	beq.n	800b628 <pvPortMalloc+0x120>
 800b56a:	4b35      	ldr	r3, [pc, #212]	; (800b640 <pvPortMalloc+0x138>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	429a      	cmp	r2, r3
 800b572:	d859      	bhi.n	800b628 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b574:	4b33      	ldr	r3, [pc, #204]	; (800b644 <pvPortMalloc+0x13c>)
 800b576:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800b578:	4b32      	ldr	r3, [pc, #200]	; (800b644 <pvPortMalloc+0x13c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b57e:	e004      	b.n	800b58a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	429a      	cmp	r2, r3
 800b592:	d903      	bls.n	800b59c <pvPortMalloc+0x94>
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1f1      	bne.n	800b580 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b59c:	4b26      	ldr	r3, [pc, #152]	; (800b638 <pvPortMalloc+0x130>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	69fa      	ldr	r2, [r7, #28]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d040      	beq.n	800b628 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2208      	movs	r2, #8
 800b5ac:	4413      	add	r3, r2
 800b5ae:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	1ad2      	subs	r2, r2, r3
 800b5c0:	2308      	movs	r3, #8
 800b5c2:	005b      	lsls	r3, r3, #1
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d90f      	bls.n	800b5e8 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5c8:	69fa      	ldr	r2, [r7, #28]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	685a      	ldr	r2, [r3, #4]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	1ad2      	subs	r2, r2, r3
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800b5e2:	6938      	ldr	r0, [r7, #16]
 800b5e4:	f000 f8a2 	bl	800b72c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5e8:	4b15      	ldr	r3, [pc, #84]	; (800b640 <pvPortMalloc+0x138>)
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	4a13      	ldr	r2, [pc, #76]	; (800b640 <pvPortMalloc+0x138>)
 800b5f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5f6:	4b12      	ldr	r3, [pc, #72]	; (800b640 <pvPortMalloc+0x138>)
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	4b13      	ldr	r3, [pc, #76]	; (800b648 <pvPortMalloc+0x140>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d203      	bcs.n	800b60a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b602:	4b0f      	ldr	r3, [pc, #60]	; (800b640 <pvPortMalloc+0x138>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a10      	ldr	r2, [pc, #64]	; (800b648 <pvPortMalloc+0x140>)
 800b608:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	685a      	ldr	r2, [r3, #4]
 800b60e:	4b0b      	ldr	r3, [pc, #44]	; (800b63c <pvPortMalloc+0x134>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	431a      	orrs	r2, r3
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	2200      	movs	r2, #0
 800b61c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b61e:	4b0b      	ldr	r3, [pc, #44]	; (800b64c <pvPortMalloc+0x144>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3301      	adds	r3, #1
 800b624:	4a09      	ldr	r2, [pc, #36]	; (800b64c <pvPortMalloc+0x144>)
 800b626:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b628:	f7fe fd14 	bl	800a054 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800b62c:	697b      	ldr	r3, [r7, #20]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3720      	adds	r7, #32
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	200061d4 	.word	0x200061d4
 800b63c:	200061e8 	.word	0x200061e8
 800b640:	200061d8 	.word	0x200061d8
 800b644:	200061cc 	.word	0x200061cc
 800b648:	200061dc 	.word	0x200061dc
 800b64c:	200061e0 	.word	0x200061e0

0800b650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d04d      	beq.n	800b6fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b662:	2308      	movs	r3, #8
 800b664:	425b      	negs	r3, r3
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	4413      	add	r3, r2
 800b66a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	4b24      	ldr	r3, [pc, #144]	; (800b708 <vPortFree+0xb8>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4013      	ands	r3, r2
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10a      	bne.n	800b694 <vPortFree+0x44>
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	60fb      	str	r3, [r7, #12]
}
 800b690:	bf00      	nop
 800b692:	e7fe      	b.n	800b692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00a      	beq.n	800b6b2 <vPortFree+0x62>
	__asm volatile
 800b69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a0:	f383 8811 	msr	BASEPRI, r3
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	60bb      	str	r3, [r7, #8]
}
 800b6ae:	bf00      	nop
 800b6b0:	e7fe      	b.n	800b6b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	685a      	ldr	r2, [r3, #4]
 800b6b6:	4b14      	ldr	r3, [pc, #80]	; (800b708 <vPortFree+0xb8>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d01e      	beq.n	800b6fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d11a      	bne.n	800b6fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	4b0e      	ldr	r3, [pc, #56]	; (800b708 <vPortFree+0xb8>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	43db      	mvns	r3, r3
 800b6d2:	401a      	ands	r2, r3
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6d8:	f7fe fcae 	bl	800a038 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	685a      	ldr	r2, [r3, #4]
 800b6e0:	4b0a      	ldr	r3, [pc, #40]	; (800b70c <vPortFree+0xbc>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	4a09      	ldr	r2, [pc, #36]	; (800b70c <vPortFree+0xbc>)
 800b6e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6ea:	6938      	ldr	r0, [r7, #16]
 800b6ec:	f000 f81e 	bl	800b72c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b6f0:	4b07      	ldr	r3, [pc, #28]	; (800b710 <vPortFree+0xc0>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	4a06      	ldr	r2, [pc, #24]	; (800b710 <vPortFree+0xc0>)
 800b6f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b6fa:	f7fe fcab 	bl	800a054 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6fe:	bf00      	nop
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	200061e8 	.word	0x200061e8
 800b70c:	200061d8 	.word	0x200061d8
 800b710:	200061e4 	.word	0x200061e4

0800b714 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800b714:	b480      	push	{r7}
 800b716:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800b718:	4b03      	ldr	r3, [pc, #12]	; (800b728 <xPortGetFreeHeapSize+0x14>)
 800b71a:	681b      	ldr	r3, [r3, #0]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	200061d8 	.word	0x200061d8

0800b72c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b734:	4b28      	ldr	r3, [pc, #160]	; (800b7d8 <prvInsertBlockIntoFreeList+0xac>)
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	e002      	b.n	800b740 <prvInsertBlockIntoFreeList+0x14>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	429a      	cmp	r2, r3
 800b748:	d8f7      	bhi.n	800b73a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	4413      	add	r3, r2
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d108      	bne.n	800b76e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	441a      	add	r2, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	441a      	add	r2, r3
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d118      	bne.n	800b7b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	4b15      	ldr	r3, [pc, #84]	; (800b7dc <prvInsertBlockIntoFreeList+0xb0>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d00d      	beq.n	800b7aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	685a      	ldr	r2, [r3, #4]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	441a      	add	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	e008      	b.n	800b7bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7aa:	4b0c      	ldr	r3, [pc, #48]	; (800b7dc <prvInsertBlockIntoFreeList+0xb0>)
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	601a      	str	r2, [r3, #0]
 800b7b2:	e003      	b.n	800b7bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d002      	beq.n	800b7ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7ca:	bf00      	nop
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	200061cc 	.word	0x200061cc
 800b7dc:	200061d4 	.word	0x200061d4

0800b7e0 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b08f      	sub	sp, #60	; 0x3c
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800b7f4:	4b5a      	ldr	r3, [pc, #360]	; (800b960 <vPortDefineHeapRegions+0x180>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00a      	beq.n	800b812 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	617b      	str	r3, [r7, #20]
}
 800b80e:	bf00      	nop
 800b810:	e7fe      	b.n	800b810 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800b812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b814:	00db      	lsls	r3, r3, #3
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	4413      	add	r3, r2
 800b81a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800b81c:	e07d      	b.n	800b91a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82c:	f003 0307 	and.w	r3, r3, #7
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00e      	beq.n	800b852 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b836:	3307      	adds	r3, #7
 800b838:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	f023 0307 	bic.w	r3, r3, #7
 800b840:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800b842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b84e:	4413      	add	r3, r2
 800b850:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800b852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b854:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d106      	bne.n	800b86a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	4a41      	ldr	r2, [pc, #260]	; (800b964 <vPortDefineHeapRegions+0x184>)
 800b860:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800b862:	4b40      	ldr	r3, [pc, #256]	; (800b964 <vPortDefineHeapRegions+0x184>)
 800b864:	2200      	movs	r2, #0
 800b866:	605a      	str	r2, [r3, #4]
 800b868:	e01f      	b.n	800b8aa <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800b86a:	4b3d      	ldr	r3, [pc, #244]	; (800b960 <vPortDefineHeapRegions+0x180>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	613b      	str	r3, [r7, #16]
}
 800b884:	bf00      	nop
 800b886:	e7fe      	b.n	800b886 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800b888:	4b35      	ldr	r3, [pc, #212]	; (800b960 <vPortDefineHeapRegions+0x180>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	461a      	mov	r2, r3
 800b88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b890:	4293      	cmp	r3, r2
 800b892:	d80a      	bhi.n	800b8aa <vPortDefineHeapRegions+0xca>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	60fb      	str	r3, [r7, #12]
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800b8aa:	4b2d      	ldr	r3, [pc, #180]	; (800b960 <vPortDefineHeapRegions+0x180>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800b8b0:	69fa      	ldr	r2, [r7, #28]
 800b8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b4:	4413      	add	r3, r2
 800b8b6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800b8b8:	2208      	movs	r2, #8
 800b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8bc:	1a9b      	subs	r3, r3, r2
 800b8be:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	f023 0307 	bic.w	r3, r3, #7
 800b8c6:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	4a25      	ldr	r2, [pc, #148]	; (800b960 <vPortDefineHeapRegions+0x180>)
 800b8cc:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800b8ce:	4b24      	ldr	r3, [pc, #144]	; (800b960 <vPortDefineHeapRegions+0x180>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800b8d6:	4b22      	ldr	r3, [pc, #136]	; (800b960 <vPortDefineHeapRegions+0x180>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8e6:	1ad2      	subs	r2, r2, r3
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800b8ec:	4b1c      	ldr	r3, [pc, #112]	; (800b960 <vPortDefineHeapRegions+0x180>)
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	6a3a      	ldr	r2, [r7, #32]
 800b8fe:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b906:	4413      	add	r3, r2
 800b908:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800b90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90c:	3301      	adds	r3, #1
 800b90e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800b910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b912:	00db      	lsls	r3, r3, #3
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	4413      	add	r3, r2
 800b918:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f47f af7d 	bne.w	800b81e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800b924:	4a10      	ldr	r2, [pc, #64]	; (800b968 <vPortDefineHeapRegions+0x188>)
 800b926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b928:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800b92a:	4a10      	ldr	r2, [pc, #64]	; (800b96c <vPortDefineHeapRegions+0x18c>)
 800b92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800b930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10a      	bne.n	800b94c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	60bb      	str	r3, [r7, #8]
}
 800b948:	bf00      	nop
 800b94a:	e7fe      	b.n	800b94a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b94c:	4b08      	ldr	r3, [pc, #32]	; (800b970 <vPortDefineHeapRegions+0x190>)
 800b94e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b952:	601a      	str	r2, [r3, #0]
}
 800b954:	bf00      	nop
 800b956:	373c      	adds	r7, #60	; 0x3c
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr
 800b960:	200061d4 	.word	0x200061d4
 800b964:	200061cc 	.word	0x200061cc
 800b968:	200061dc 	.word	0x200061dc
 800b96c:	200061d8 	.word	0x200061d8
 800b970:	200061e8 	.word	0x200061e8

0800b974 <atol>:
 800b974:	220a      	movs	r2, #10
 800b976:	2100      	movs	r1, #0
 800b978:	f000 bb5e 	b.w	800c038 <strtol>

0800b97c <calloc>:
 800b97c:	4b02      	ldr	r3, [pc, #8]	; (800b988 <calloc+0xc>)
 800b97e:	460a      	mov	r2, r1
 800b980:	4601      	mov	r1, r0
 800b982:	6818      	ldr	r0, [r3, #0]
 800b984:	f000 b8f8 	b.w	800bb78 <_calloc_r>
 800b988:	20000098 	.word	0x20000098

0800b98c <__errno>:
 800b98c:	4b01      	ldr	r3, [pc, #4]	; (800b994 <__errno+0x8>)
 800b98e:	6818      	ldr	r0, [r3, #0]
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	20000098 	.word	0x20000098

0800b998 <gmtime_r>:
 800b998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800b9a0:	460c      	mov	r4, r1
 800b9a2:	4a4f      	ldr	r2, [pc, #316]	; (800bae0 <gmtime_r+0x148>)
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	4639      	mov	r1, r7
 800b9aa:	f7f4 ff6f 	bl	800088c <__aeabi_ldivmod>
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	4a4b      	ldr	r2, [pc, #300]	; (800bae0 <gmtime_r+0x148>)
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f7f4 ff68 	bl	800088c <__aeabi_ldivmod>
 800b9bc:	2a00      	cmp	r2, #0
 800b9be:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800b9c2:	bfb7      	itett	lt
 800b9c4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800b9c8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800b9cc:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800b9d0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800b9d4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800b9d8:	fbb2 f1f0 	udiv	r1, r2, r0
 800b9dc:	fb00 2211 	mls	r2, r0, r1, r2
 800b9e0:	203c      	movs	r0, #60	; 0x3c
 800b9e2:	60a1      	str	r1, [r4, #8]
 800b9e4:	fbb2 f1f0 	udiv	r1, r2, r0
 800b9e8:	fb00 2211 	mls	r2, r0, r1, r2
 800b9ec:	6061      	str	r1, [r4, #4]
 800b9ee:	6022      	str	r2, [r4, #0]
 800b9f0:	2107      	movs	r1, #7
 800b9f2:	1cda      	adds	r2, r3, #3
 800b9f4:	fb92 f1f1 	sdiv	r1, r2, r1
 800b9f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b9fc:	1a52      	subs	r2, r2, r1
 800b9fe:	bf48      	it	mi
 800ba00:	3207      	addmi	r2, #7
 800ba02:	4d38      	ldr	r5, [pc, #224]	; (800bae4 <gmtime_r+0x14c>)
 800ba04:	4838      	ldr	r0, [pc, #224]	; (800bae8 <gmtime_r+0x150>)
 800ba06:	61a2      	str	r2, [r4, #24]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	bfb7      	itett	lt
 800ba0c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800ba10:	fb93 f5f5 	sdivge	r5, r3, r5
 800ba14:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800ba18:	fb92 f5f5 	sdivlt	r5, r2, r5
 800ba1c:	fb00 3005 	mla	r0, r0, r5, r3
 800ba20:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800ba24:	fbb0 f2f2 	udiv	r2, r0, r2
 800ba28:	4402      	add	r2, r0
 800ba2a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800ba2e:	fbb0 f1f3 	udiv	r1, r0, r3
 800ba32:	1a52      	subs	r2, r2, r1
 800ba34:	f240 1c6d 	movw	ip, #365	; 0x16d
 800ba38:	492c      	ldr	r1, [pc, #176]	; (800baec <gmtime_r+0x154>)
 800ba3a:	fbb0 f1f1 	udiv	r1, r0, r1
 800ba3e:	2764      	movs	r7, #100	; 0x64
 800ba40:	1a52      	subs	r2, r2, r1
 800ba42:	fbb2 f1fc 	udiv	r1, r2, ip
 800ba46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba4a:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba4e:	1af3      	subs	r3, r6, r3
 800ba50:	4403      	add	r3, r0
 800ba52:	fb0c 3311 	mls	r3, ip, r1, r3
 800ba56:	2299      	movs	r2, #153	; 0x99
 800ba58:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800ba5c:	f10e 0e02 	add.w	lr, lr, #2
 800ba60:	f103 0c01 	add.w	ip, r3, #1
 800ba64:	fbbe f0f2 	udiv	r0, lr, r2
 800ba68:	4342      	muls	r2, r0
 800ba6a:	3202      	adds	r2, #2
 800ba6c:	f04f 0805 	mov.w	r8, #5
 800ba70:	fbb2 f2f8 	udiv	r2, r2, r8
 800ba74:	ebac 0c02 	sub.w	ip, ip, r2
 800ba78:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800ba7c:	4596      	cmp	lr, r2
 800ba7e:	bf94      	ite	ls
 800ba80:	2202      	movls	r2, #2
 800ba82:	f06f 0209 	mvnhi.w	r2, #9
 800ba86:	4410      	add	r0, r2
 800ba88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ba8c:	fb02 1505 	mla	r5, r2, r5, r1
 800ba90:	2801      	cmp	r0, #1
 800ba92:	bf98      	it	ls
 800ba94:	3501      	addls	r5, #1
 800ba96:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800ba9a:	d30d      	bcc.n	800bab8 <gmtime_r+0x120>
 800ba9c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800baa0:	61e3      	str	r3, [r4, #28]
 800baa2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800baa6:	2300      	movs	r3, #0
 800baa8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800baac:	f8c4 c00c 	str.w	ip, [r4, #12]
 800bab0:	6223      	str	r3, [r4, #32]
 800bab2:	4620      	mov	r0, r4
 800bab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab8:	078a      	lsls	r2, r1, #30
 800baba:	d102      	bne.n	800bac2 <gmtime_r+0x12a>
 800babc:	fb07 1616 	mls	r6, r7, r6, r1
 800bac0:	b95e      	cbnz	r6, 800bada <gmtime_r+0x142>
 800bac2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bac6:	fbb1 f6f2 	udiv	r6, r1, r2
 800baca:	fb02 1216 	mls	r2, r2, r6, r1
 800bace:	fab2 f282 	clz	r2, r2
 800bad2:	0952      	lsrs	r2, r2, #5
 800bad4:	333b      	adds	r3, #59	; 0x3b
 800bad6:	4413      	add	r3, r2
 800bad8:	e7e2      	b.n	800baa0 <gmtime_r+0x108>
 800bada:	2201      	movs	r2, #1
 800badc:	e7fa      	b.n	800bad4 <gmtime_r+0x13c>
 800bade:	bf00      	nop
 800bae0:	00015180 	.word	0x00015180
 800bae4:	00023ab1 	.word	0x00023ab1
 800bae8:	fffdc54f 	.word	0xfffdc54f
 800baec:	00023ab0 	.word	0x00023ab0

0800baf0 <__libc_init_array>:
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	4d0d      	ldr	r5, [pc, #52]	; (800bb28 <__libc_init_array+0x38>)
 800baf4:	4c0d      	ldr	r4, [pc, #52]	; (800bb2c <__libc_init_array+0x3c>)
 800baf6:	1b64      	subs	r4, r4, r5
 800baf8:	10a4      	asrs	r4, r4, #2
 800bafa:	2600      	movs	r6, #0
 800bafc:	42a6      	cmp	r6, r4
 800bafe:	d109      	bne.n	800bb14 <__libc_init_array+0x24>
 800bb00:	4d0b      	ldr	r5, [pc, #44]	; (800bb30 <__libc_init_array+0x40>)
 800bb02:	4c0c      	ldr	r4, [pc, #48]	; (800bb34 <__libc_init_array+0x44>)
 800bb04:	f000 fe2a 	bl	800c75c <_init>
 800bb08:	1b64      	subs	r4, r4, r5
 800bb0a:	10a4      	asrs	r4, r4, #2
 800bb0c:	2600      	movs	r6, #0
 800bb0e:	42a6      	cmp	r6, r4
 800bb10:	d105      	bne.n	800bb1e <__libc_init_array+0x2e>
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb18:	4798      	blx	r3
 800bb1a:	3601      	adds	r6, #1
 800bb1c:	e7ee      	b.n	800bafc <__libc_init_array+0xc>
 800bb1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb22:	4798      	blx	r3
 800bb24:	3601      	adds	r6, #1
 800bb26:	e7f2      	b.n	800bb0e <__libc_init_array+0x1e>
 800bb28:	0800ef24 	.word	0x0800ef24
 800bb2c:	0800ef24 	.word	0x0800ef24
 800bb30:	0800ef24 	.word	0x0800ef24
 800bb34:	0800ef28 	.word	0x0800ef28

0800bb38 <__retarget_lock_acquire_recursive>:
 800bb38:	4770      	bx	lr

0800bb3a <__retarget_lock_release_recursive>:
 800bb3a:	4770      	bx	lr

0800bb3c <free>:
 800bb3c:	4b02      	ldr	r3, [pc, #8]	; (800bb48 <free+0xc>)
 800bb3e:	4601      	mov	r1, r0
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	f000 b82f 	b.w	800bba4 <_free_r>
 800bb46:	bf00      	nop
 800bb48:	20000098 	.word	0x20000098

0800bb4c <memcpy>:
 800bb4c:	440a      	add	r2, r1
 800bb4e:	4291      	cmp	r1, r2
 800bb50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bb54:	d100      	bne.n	800bb58 <memcpy+0xc>
 800bb56:	4770      	bx	lr
 800bb58:	b510      	push	{r4, lr}
 800bb5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb62:	4291      	cmp	r1, r2
 800bb64:	d1f9      	bne.n	800bb5a <memcpy+0xe>
 800bb66:	bd10      	pop	{r4, pc}

0800bb68 <memset>:
 800bb68:	4402      	add	r2, r0
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d100      	bne.n	800bb72 <memset+0xa>
 800bb70:	4770      	bx	lr
 800bb72:	f803 1b01 	strb.w	r1, [r3], #1
 800bb76:	e7f9      	b.n	800bb6c <memset+0x4>

0800bb78 <_calloc_r>:
 800bb78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb7a:	fba1 2402 	umull	r2, r4, r1, r2
 800bb7e:	b94c      	cbnz	r4, 800bb94 <_calloc_r+0x1c>
 800bb80:	4611      	mov	r1, r2
 800bb82:	9201      	str	r2, [sp, #4]
 800bb84:	f000 f87a 	bl	800bc7c <_malloc_r>
 800bb88:	9a01      	ldr	r2, [sp, #4]
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	b930      	cbnz	r0, 800bb9c <_calloc_r+0x24>
 800bb8e:	4628      	mov	r0, r5
 800bb90:	b003      	add	sp, #12
 800bb92:	bd30      	pop	{r4, r5, pc}
 800bb94:	220c      	movs	r2, #12
 800bb96:	6002      	str	r2, [r0, #0]
 800bb98:	2500      	movs	r5, #0
 800bb9a:	e7f8      	b.n	800bb8e <_calloc_r+0x16>
 800bb9c:	4621      	mov	r1, r4
 800bb9e:	f7ff ffe3 	bl	800bb68 <memset>
 800bba2:	e7f4      	b.n	800bb8e <_calloc_r+0x16>

0800bba4 <_free_r>:
 800bba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bba6:	2900      	cmp	r1, #0
 800bba8:	d044      	beq.n	800bc34 <_free_r+0x90>
 800bbaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbae:	9001      	str	r0, [sp, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f1a1 0404 	sub.w	r4, r1, #4
 800bbb6:	bfb8      	it	lt
 800bbb8:	18e4      	addlt	r4, r4, r3
 800bbba:	f000 fa81 	bl	800c0c0 <__malloc_lock>
 800bbbe:	4a1e      	ldr	r2, [pc, #120]	; (800bc38 <_free_r+0x94>)
 800bbc0:	9801      	ldr	r0, [sp, #4]
 800bbc2:	6813      	ldr	r3, [r2, #0]
 800bbc4:	b933      	cbnz	r3, 800bbd4 <_free_r+0x30>
 800bbc6:	6063      	str	r3, [r4, #4]
 800bbc8:	6014      	str	r4, [r2, #0]
 800bbca:	b003      	add	sp, #12
 800bbcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbd0:	f000 ba7c 	b.w	800c0cc <__malloc_unlock>
 800bbd4:	42a3      	cmp	r3, r4
 800bbd6:	d908      	bls.n	800bbea <_free_r+0x46>
 800bbd8:	6825      	ldr	r5, [r4, #0]
 800bbda:	1961      	adds	r1, r4, r5
 800bbdc:	428b      	cmp	r3, r1
 800bbde:	bf01      	itttt	eq
 800bbe0:	6819      	ldreq	r1, [r3, #0]
 800bbe2:	685b      	ldreq	r3, [r3, #4]
 800bbe4:	1949      	addeq	r1, r1, r5
 800bbe6:	6021      	streq	r1, [r4, #0]
 800bbe8:	e7ed      	b.n	800bbc6 <_free_r+0x22>
 800bbea:	461a      	mov	r2, r3
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	b10b      	cbz	r3, 800bbf4 <_free_r+0x50>
 800bbf0:	42a3      	cmp	r3, r4
 800bbf2:	d9fa      	bls.n	800bbea <_free_r+0x46>
 800bbf4:	6811      	ldr	r1, [r2, #0]
 800bbf6:	1855      	adds	r5, r2, r1
 800bbf8:	42a5      	cmp	r5, r4
 800bbfa:	d10b      	bne.n	800bc14 <_free_r+0x70>
 800bbfc:	6824      	ldr	r4, [r4, #0]
 800bbfe:	4421      	add	r1, r4
 800bc00:	1854      	adds	r4, r2, r1
 800bc02:	42a3      	cmp	r3, r4
 800bc04:	6011      	str	r1, [r2, #0]
 800bc06:	d1e0      	bne.n	800bbca <_free_r+0x26>
 800bc08:	681c      	ldr	r4, [r3, #0]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	6053      	str	r3, [r2, #4]
 800bc0e:	4421      	add	r1, r4
 800bc10:	6011      	str	r1, [r2, #0]
 800bc12:	e7da      	b.n	800bbca <_free_r+0x26>
 800bc14:	d902      	bls.n	800bc1c <_free_r+0x78>
 800bc16:	230c      	movs	r3, #12
 800bc18:	6003      	str	r3, [r0, #0]
 800bc1a:	e7d6      	b.n	800bbca <_free_r+0x26>
 800bc1c:	6825      	ldr	r5, [r4, #0]
 800bc1e:	1961      	adds	r1, r4, r5
 800bc20:	428b      	cmp	r3, r1
 800bc22:	bf04      	itt	eq
 800bc24:	6819      	ldreq	r1, [r3, #0]
 800bc26:	685b      	ldreq	r3, [r3, #4]
 800bc28:	6063      	str	r3, [r4, #4]
 800bc2a:	bf04      	itt	eq
 800bc2c:	1949      	addeq	r1, r1, r5
 800bc2e:	6021      	streq	r1, [r4, #0]
 800bc30:	6054      	str	r4, [r2, #4]
 800bc32:	e7ca      	b.n	800bbca <_free_r+0x26>
 800bc34:	b003      	add	sp, #12
 800bc36:	bd30      	pop	{r4, r5, pc}
 800bc38:	200061f0 	.word	0x200061f0

0800bc3c <sbrk_aligned>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	4e0e      	ldr	r6, [pc, #56]	; (800bc78 <sbrk_aligned+0x3c>)
 800bc40:	460c      	mov	r4, r1
 800bc42:	6831      	ldr	r1, [r6, #0]
 800bc44:	4605      	mov	r5, r0
 800bc46:	b911      	cbnz	r1, 800bc4e <sbrk_aligned+0x12>
 800bc48:	f000 f8f6 	bl	800be38 <_sbrk_r>
 800bc4c:	6030      	str	r0, [r6, #0]
 800bc4e:	4621      	mov	r1, r4
 800bc50:	4628      	mov	r0, r5
 800bc52:	f000 f8f1 	bl	800be38 <_sbrk_r>
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	d00a      	beq.n	800bc70 <sbrk_aligned+0x34>
 800bc5a:	1cc4      	adds	r4, r0, #3
 800bc5c:	f024 0403 	bic.w	r4, r4, #3
 800bc60:	42a0      	cmp	r0, r4
 800bc62:	d007      	beq.n	800bc74 <sbrk_aligned+0x38>
 800bc64:	1a21      	subs	r1, r4, r0
 800bc66:	4628      	mov	r0, r5
 800bc68:	f000 f8e6 	bl	800be38 <_sbrk_r>
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	d101      	bne.n	800bc74 <sbrk_aligned+0x38>
 800bc70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bc74:	4620      	mov	r0, r4
 800bc76:	bd70      	pop	{r4, r5, r6, pc}
 800bc78:	200061f4 	.word	0x200061f4

0800bc7c <_malloc_r>:
 800bc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc80:	1ccd      	adds	r5, r1, #3
 800bc82:	f025 0503 	bic.w	r5, r5, #3
 800bc86:	3508      	adds	r5, #8
 800bc88:	2d0c      	cmp	r5, #12
 800bc8a:	bf38      	it	cc
 800bc8c:	250c      	movcc	r5, #12
 800bc8e:	2d00      	cmp	r5, #0
 800bc90:	4607      	mov	r7, r0
 800bc92:	db01      	blt.n	800bc98 <_malloc_r+0x1c>
 800bc94:	42a9      	cmp	r1, r5
 800bc96:	d905      	bls.n	800bca4 <_malloc_r+0x28>
 800bc98:	230c      	movs	r3, #12
 800bc9a:	603b      	str	r3, [r7, #0]
 800bc9c:	2600      	movs	r6, #0
 800bc9e:	4630      	mov	r0, r6
 800bca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca4:	4e2e      	ldr	r6, [pc, #184]	; (800bd60 <_malloc_r+0xe4>)
 800bca6:	f000 fa0b 	bl	800c0c0 <__malloc_lock>
 800bcaa:	6833      	ldr	r3, [r6, #0]
 800bcac:	461c      	mov	r4, r3
 800bcae:	bb34      	cbnz	r4, 800bcfe <_malloc_r+0x82>
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	4638      	mov	r0, r7
 800bcb4:	f7ff ffc2 	bl	800bc3c <sbrk_aligned>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	4604      	mov	r4, r0
 800bcbc:	d14d      	bne.n	800bd5a <_malloc_r+0xde>
 800bcbe:	6834      	ldr	r4, [r6, #0]
 800bcc0:	4626      	mov	r6, r4
 800bcc2:	2e00      	cmp	r6, #0
 800bcc4:	d140      	bne.n	800bd48 <_malloc_r+0xcc>
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4638      	mov	r0, r7
 800bccc:	eb04 0803 	add.w	r8, r4, r3
 800bcd0:	f000 f8b2 	bl	800be38 <_sbrk_r>
 800bcd4:	4580      	cmp	r8, r0
 800bcd6:	d13a      	bne.n	800bd4e <_malloc_r+0xd2>
 800bcd8:	6821      	ldr	r1, [r4, #0]
 800bcda:	3503      	adds	r5, #3
 800bcdc:	1a6d      	subs	r5, r5, r1
 800bcde:	f025 0503 	bic.w	r5, r5, #3
 800bce2:	3508      	adds	r5, #8
 800bce4:	2d0c      	cmp	r5, #12
 800bce6:	bf38      	it	cc
 800bce8:	250c      	movcc	r5, #12
 800bcea:	4629      	mov	r1, r5
 800bcec:	4638      	mov	r0, r7
 800bcee:	f7ff ffa5 	bl	800bc3c <sbrk_aligned>
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	d02b      	beq.n	800bd4e <_malloc_r+0xd2>
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	442b      	add	r3, r5
 800bcfa:	6023      	str	r3, [r4, #0]
 800bcfc:	e00e      	b.n	800bd1c <_malloc_r+0xa0>
 800bcfe:	6822      	ldr	r2, [r4, #0]
 800bd00:	1b52      	subs	r2, r2, r5
 800bd02:	d41e      	bmi.n	800bd42 <_malloc_r+0xc6>
 800bd04:	2a0b      	cmp	r2, #11
 800bd06:	d916      	bls.n	800bd36 <_malloc_r+0xba>
 800bd08:	1961      	adds	r1, r4, r5
 800bd0a:	42a3      	cmp	r3, r4
 800bd0c:	6025      	str	r5, [r4, #0]
 800bd0e:	bf18      	it	ne
 800bd10:	6059      	strne	r1, [r3, #4]
 800bd12:	6863      	ldr	r3, [r4, #4]
 800bd14:	bf08      	it	eq
 800bd16:	6031      	streq	r1, [r6, #0]
 800bd18:	5162      	str	r2, [r4, r5]
 800bd1a:	604b      	str	r3, [r1, #4]
 800bd1c:	4638      	mov	r0, r7
 800bd1e:	f104 060b 	add.w	r6, r4, #11
 800bd22:	f000 f9d3 	bl	800c0cc <__malloc_unlock>
 800bd26:	f026 0607 	bic.w	r6, r6, #7
 800bd2a:	1d23      	adds	r3, r4, #4
 800bd2c:	1af2      	subs	r2, r6, r3
 800bd2e:	d0b6      	beq.n	800bc9e <_malloc_r+0x22>
 800bd30:	1b9b      	subs	r3, r3, r6
 800bd32:	50a3      	str	r3, [r4, r2]
 800bd34:	e7b3      	b.n	800bc9e <_malloc_r+0x22>
 800bd36:	6862      	ldr	r2, [r4, #4]
 800bd38:	42a3      	cmp	r3, r4
 800bd3a:	bf0c      	ite	eq
 800bd3c:	6032      	streq	r2, [r6, #0]
 800bd3e:	605a      	strne	r2, [r3, #4]
 800bd40:	e7ec      	b.n	800bd1c <_malloc_r+0xa0>
 800bd42:	4623      	mov	r3, r4
 800bd44:	6864      	ldr	r4, [r4, #4]
 800bd46:	e7b2      	b.n	800bcae <_malloc_r+0x32>
 800bd48:	4634      	mov	r4, r6
 800bd4a:	6876      	ldr	r6, [r6, #4]
 800bd4c:	e7b9      	b.n	800bcc2 <_malloc_r+0x46>
 800bd4e:	230c      	movs	r3, #12
 800bd50:	603b      	str	r3, [r7, #0]
 800bd52:	4638      	mov	r0, r7
 800bd54:	f000 f9ba 	bl	800c0cc <__malloc_unlock>
 800bd58:	e7a1      	b.n	800bc9e <_malloc_r+0x22>
 800bd5a:	6025      	str	r5, [r4, #0]
 800bd5c:	e7de      	b.n	800bd1c <_malloc_r+0xa0>
 800bd5e:	bf00      	nop
 800bd60:	200061f0 	.word	0x200061f0

0800bd64 <cleanup_glue>:
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	460c      	mov	r4, r1
 800bd68:	6809      	ldr	r1, [r1, #0]
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	b109      	cbz	r1, 800bd72 <cleanup_glue+0xe>
 800bd6e:	f7ff fff9 	bl	800bd64 <cleanup_glue>
 800bd72:	4621      	mov	r1, r4
 800bd74:	4628      	mov	r0, r5
 800bd76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd7a:	f7ff bf13 	b.w	800bba4 <_free_r>
	...

0800bd80 <_reclaim_reent>:
 800bd80:	4b2c      	ldr	r3, [pc, #176]	; (800be34 <_reclaim_reent+0xb4>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4283      	cmp	r3, r0
 800bd86:	b570      	push	{r4, r5, r6, lr}
 800bd88:	4604      	mov	r4, r0
 800bd8a:	d051      	beq.n	800be30 <_reclaim_reent+0xb0>
 800bd8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bd8e:	b143      	cbz	r3, 800bda2 <_reclaim_reent+0x22>
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d14a      	bne.n	800be2c <_reclaim_reent+0xac>
 800bd96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd98:	6819      	ldr	r1, [r3, #0]
 800bd9a:	b111      	cbz	r1, 800bda2 <_reclaim_reent+0x22>
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f7ff ff01 	bl	800bba4 <_free_r>
 800bda2:	6961      	ldr	r1, [r4, #20]
 800bda4:	b111      	cbz	r1, 800bdac <_reclaim_reent+0x2c>
 800bda6:	4620      	mov	r0, r4
 800bda8:	f7ff fefc 	bl	800bba4 <_free_r>
 800bdac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bdae:	b111      	cbz	r1, 800bdb6 <_reclaim_reent+0x36>
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f7ff fef7 	bl	800bba4 <_free_r>
 800bdb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bdb8:	b111      	cbz	r1, 800bdc0 <_reclaim_reent+0x40>
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f7ff fef2 	bl	800bba4 <_free_r>
 800bdc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bdc2:	b111      	cbz	r1, 800bdca <_reclaim_reent+0x4a>
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f7ff feed 	bl	800bba4 <_free_r>
 800bdca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bdcc:	b111      	cbz	r1, 800bdd4 <_reclaim_reent+0x54>
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f7ff fee8 	bl	800bba4 <_free_r>
 800bdd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bdd6:	b111      	cbz	r1, 800bdde <_reclaim_reent+0x5e>
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f7ff fee3 	bl	800bba4 <_free_r>
 800bdde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bde0:	b111      	cbz	r1, 800bde8 <_reclaim_reent+0x68>
 800bde2:	4620      	mov	r0, r4
 800bde4:	f7ff fede 	bl	800bba4 <_free_r>
 800bde8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdea:	b111      	cbz	r1, 800bdf2 <_reclaim_reent+0x72>
 800bdec:	4620      	mov	r0, r4
 800bdee:	f7ff fed9 	bl	800bba4 <_free_r>
 800bdf2:	69a3      	ldr	r3, [r4, #24]
 800bdf4:	b1e3      	cbz	r3, 800be30 <_reclaim_reent+0xb0>
 800bdf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	4798      	blx	r3
 800bdfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bdfe:	b1b9      	cbz	r1, 800be30 <_reclaim_reent+0xb0>
 800be00:	4620      	mov	r0, r4
 800be02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be06:	f7ff bfad 	b.w	800bd64 <cleanup_glue>
 800be0a:	5949      	ldr	r1, [r1, r5]
 800be0c:	b941      	cbnz	r1, 800be20 <_reclaim_reent+0xa0>
 800be0e:	3504      	adds	r5, #4
 800be10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be12:	2d80      	cmp	r5, #128	; 0x80
 800be14:	68d9      	ldr	r1, [r3, #12]
 800be16:	d1f8      	bne.n	800be0a <_reclaim_reent+0x8a>
 800be18:	4620      	mov	r0, r4
 800be1a:	f7ff fec3 	bl	800bba4 <_free_r>
 800be1e:	e7ba      	b.n	800bd96 <_reclaim_reent+0x16>
 800be20:	680e      	ldr	r6, [r1, #0]
 800be22:	4620      	mov	r0, r4
 800be24:	f7ff febe 	bl	800bba4 <_free_r>
 800be28:	4631      	mov	r1, r6
 800be2a:	e7ef      	b.n	800be0c <_reclaim_reent+0x8c>
 800be2c:	2500      	movs	r5, #0
 800be2e:	e7ef      	b.n	800be10 <_reclaim_reent+0x90>
 800be30:	bd70      	pop	{r4, r5, r6, pc}
 800be32:	bf00      	nop
 800be34:	20000098 	.word	0x20000098

0800be38 <_sbrk_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4d06      	ldr	r5, [pc, #24]	; (800be54 <_sbrk_r+0x1c>)
 800be3c:	2300      	movs	r3, #0
 800be3e:	4604      	mov	r4, r0
 800be40:	4608      	mov	r0, r1
 800be42:	602b      	str	r3, [r5, #0]
 800be44:	f7f7 fcbc 	bl	80037c0 <_sbrk>
 800be48:	1c43      	adds	r3, r0, #1
 800be4a:	d102      	bne.n	800be52 <_sbrk_r+0x1a>
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	b103      	cbz	r3, 800be52 <_sbrk_r+0x1a>
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	200061f8 	.word	0x200061f8

0800be58 <siprintf>:
 800be58:	b40e      	push	{r1, r2, r3}
 800be5a:	b500      	push	{lr}
 800be5c:	b09c      	sub	sp, #112	; 0x70
 800be5e:	ab1d      	add	r3, sp, #116	; 0x74
 800be60:	9002      	str	r0, [sp, #8]
 800be62:	9006      	str	r0, [sp, #24]
 800be64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be68:	4809      	ldr	r0, [pc, #36]	; (800be90 <siprintf+0x38>)
 800be6a:	9107      	str	r1, [sp, #28]
 800be6c:	9104      	str	r1, [sp, #16]
 800be6e:	4909      	ldr	r1, [pc, #36]	; (800be94 <siprintf+0x3c>)
 800be70:	f853 2b04 	ldr.w	r2, [r3], #4
 800be74:	9105      	str	r1, [sp, #20]
 800be76:	6800      	ldr	r0, [r0, #0]
 800be78:	9301      	str	r3, [sp, #4]
 800be7a:	a902      	add	r1, sp, #8
 800be7c:	f000 f988 	bl	800c190 <_svfiprintf_r>
 800be80:	9b02      	ldr	r3, [sp, #8]
 800be82:	2200      	movs	r2, #0
 800be84:	701a      	strb	r2, [r3, #0]
 800be86:	b01c      	add	sp, #112	; 0x70
 800be88:	f85d eb04 	ldr.w	lr, [sp], #4
 800be8c:	b003      	add	sp, #12
 800be8e:	4770      	bx	lr
 800be90:	20000098 	.word	0x20000098
 800be94:	ffff0208 	.word	0xffff0208

0800be98 <strcat>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	4602      	mov	r2, r0
 800be9c:	7814      	ldrb	r4, [r2, #0]
 800be9e:	4613      	mov	r3, r2
 800bea0:	3201      	adds	r2, #1
 800bea2:	2c00      	cmp	r4, #0
 800bea4:	d1fa      	bne.n	800be9c <strcat+0x4>
 800bea6:	3b01      	subs	r3, #1
 800bea8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800beb0:	2a00      	cmp	r2, #0
 800beb2:	d1f9      	bne.n	800bea8 <strcat+0x10>
 800beb4:	bd10      	pop	{r4, pc}

0800beb6 <strchr>:
 800beb6:	b2c9      	uxtb	r1, r1
 800beb8:	4603      	mov	r3, r0
 800beba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bebe:	b11a      	cbz	r2, 800bec8 <strchr+0x12>
 800bec0:	428a      	cmp	r2, r1
 800bec2:	d1f9      	bne.n	800beb8 <strchr+0x2>
 800bec4:	4618      	mov	r0, r3
 800bec6:	4770      	bx	lr
 800bec8:	2900      	cmp	r1, #0
 800beca:	bf18      	it	ne
 800becc:	2300      	movne	r3, #0
 800bece:	e7f9      	b.n	800bec4 <strchr+0xe>

0800bed0 <strcpy>:
 800bed0:	4603      	mov	r3, r0
 800bed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bed6:	f803 2b01 	strb.w	r2, [r3], #1
 800beda:	2a00      	cmp	r2, #0
 800bedc:	d1f9      	bne.n	800bed2 <strcpy+0x2>
 800bede:	4770      	bx	lr

0800bee0 <strncpy>:
 800bee0:	b510      	push	{r4, lr}
 800bee2:	3901      	subs	r1, #1
 800bee4:	4603      	mov	r3, r0
 800bee6:	b132      	cbz	r2, 800bef6 <strncpy+0x16>
 800bee8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800beec:	f803 4b01 	strb.w	r4, [r3], #1
 800bef0:	3a01      	subs	r2, #1
 800bef2:	2c00      	cmp	r4, #0
 800bef4:	d1f7      	bne.n	800bee6 <strncpy+0x6>
 800bef6:	441a      	add	r2, r3
 800bef8:	2100      	movs	r1, #0
 800befa:	4293      	cmp	r3, r2
 800befc:	d100      	bne.n	800bf00 <strncpy+0x20>
 800befe:	bd10      	pop	{r4, pc}
 800bf00:	f803 1b01 	strb.w	r1, [r3], #1
 800bf04:	e7f9      	b.n	800befa <strncpy+0x1a>

0800bf06 <strstr>:
 800bf06:	780a      	ldrb	r2, [r1, #0]
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	b96a      	cbnz	r2, 800bf28 <strstr+0x22>
 800bf0c:	bd70      	pop	{r4, r5, r6, pc}
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d109      	bne.n	800bf26 <strstr+0x20>
 800bf12:	460c      	mov	r4, r1
 800bf14:	4605      	mov	r5, r0
 800bf16:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d0f6      	beq.n	800bf0c <strstr+0x6>
 800bf1e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bf22:	429e      	cmp	r6, r3
 800bf24:	d0f7      	beq.n	800bf16 <strstr+0x10>
 800bf26:	3001      	adds	r0, #1
 800bf28:	7803      	ldrb	r3, [r0, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1ef      	bne.n	800bf0e <strstr+0x8>
 800bf2e:	4618      	mov	r0, r3
 800bf30:	e7ec      	b.n	800bf0c <strstr+0x6>
	...

0800bf34 <_strtol_l.constprop.0>:
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf3a:	d001      	beq.n	800bf40 <_strtol_l.constprop.0+0xc>
 800bf3c:	2b24      	cmp	r3, #36	; 0x24
 800bf3e:	d906      	bls.n	800bf4e <_strtol_l.constprop.0+0x1a>
 800bf40:	f7ff fd24 	bl	800b98c <__errno>
 800bf44:	2316      	movs	r3, #22
 800bf46:	6003      	str	r3, [r0, #0]
 800bf48:	2000      	movs	r0, #0
 800bf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c034 <_strtol_l.constprop.0+0x100>
 800bf52:	460d      	mov	r5, r1
 800bf54:	462e      	mov	r6, r5
 800bf56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf5a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bf5e:	f017 0708 	ands.w	r7, r7, #8
 800bf62:	d1f7      	bne.n	800bf54 <_strtol_l.constprop.0+0x20>
 800bf64:	2c2d      	cmp	r4, #45	; 0x2d
 800bf66:	d132      	bne.n	800bfce <_strtol_l.constprop.0+0x9a>
 800bf68:	782c      	ldrb	r4, [r5, #0]
 800bf6a:	2701      	movs	r7, #1
 800bf6c:	1cb5      	adds	r5, r6, #2
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d05b      	beq.n	800c02a <_strtol_l.constprop.0+0xf6>
 800bf72:	2b10      	cmp	r3, #16
 800bf74:	d109      	bne.n	800bf8a <_strtol_l.constprop.0+0x56>
 800bf76:	2c30      	cmp	r4, #48	; 0x30
 800bf78:	d107      	bne.n	800bf8a <_strtol_l.constprop.0+0x56>
 800bf7a:	782c      	ldrb	r4, [r5, #0]
 800bf7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bf80:	2c58      	cmp	r4, #88	; 0x58
 800bf82:	d14d      	bne.n	800c020 <_strtol_l.constprop.0+0xec>
 800bf84:	786c      	ldrb	r4, [r5, #1]
 800bf86:	2310      	movs	r3, #16
 800bf88:	3502      	adds	r5, #2
 800bf8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bf8e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bf92:	f04f 0c00 	mov.w	ip, #0
 800bf96:	fbb8 f9f3 	udiv	r9, r8, r3
 800bf9a:	4666      	mov	r6, ip
 800bf9c:	fb03 8a19 	mls	sl, r3, r9, r8
 800bfa0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bfa4:	f1be 0f09 	cmp.w	lr, #9
 800bfa8:	d816      	bhi.n	800bfd8 <_strtol_l.constprop.0+0xa4>
 800bfaa:	4674      	mov	r4, lr
 800bfac:	42a3      	cmp	r3, r4
 800bfae:	dd24      	ble.n	800bffa <_strtol_l.constprop.0+0xc6>
 800bfb0:	f1bc 0f00 	cmp.w	ip, #0
 800bfb4:	db1e      	blt.n	800bff4 <_strtol_l.constprop.0+0xc0>
 800bfb6:	45b1      	cmp	r9, r6
 800bfb8:	d31c      	bcc.n	800bff4 <_strtol_l.constprop.0+0xc0>
 800bfba:	d101      	bne.n	800bfc0 <_strtol_l.constprop.0+0x8c>
 800bfbc:	45a2      	cmp	sl, r4
 800bfbe:	db19      	blt.n	800bff4 <_strtol_l.constprop.0+0xc0>
 800bfc0:	fb06 4603 	mla	r6, r6, r3, r4
 800bfc4:	f04f 0c01 	mov.w	ip, #1
 800bfc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfcc:	e7e8      	b.n	800bfa0 <_strtol_l.constprop.0+0x6c>
 800bfce:	2c2b      	cmp	r4, #43	; 0x2b
 800bfd0:	bf04      	itt	eq
 800bfd2:	782c      	ldrbeq	r4, [r5, #0]
 800bfd4:	1cb5      	addeq	r5, r6, #2
 800bfd6:	e7ca      	b.n	800bf6e <_strtol_l.constprop.0+0x3a>
 800bfd8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bfdc:	f1be 0f19 	cmp.w	lr, #25
 800bfe0:	d801      	bhi.n	800bfe6 <_strtol_l.constprop.0+0xb2>
 800bfe2:	3c37      	subs	r4, #55	; 0x37
 800bfe4:	e7e2      	b.n	800bfac <_strtol_l.constprop.0+0x78>
 800bfe6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bfea:	f1be 0f19 	cmp.w	lr, #25
 800bfee:	d804      	bhi.n	800bffa <_strtol_l.constprop.0+0xc6>
 800bff0:	3c57      	subs	r4, #87	; 0x57
 800bff2:	e7db      	b.n	800bfac <_strtol_l.constprop.0+0x78>
 800bff4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bff8:	e7e6      	b.n	800bfc8 <_strtol_l.constprop.0+0x94>
 800bffa:	f1bc 0f00 	cmp.w	ip, #0
 800bffe:	da05      	bge.n	800c00c <_strtol_l.constprop.0+0xd8>
 800c000:	2322      	movs	r3, #34	; 0x22
 800c002:	6003      	str	r3, [r0, #0]
 800c004:	4646      	mov	r6, r8
 800c006:	b942      	cbnz	r2, 800c01a <_strtol_l.constprop.0+0xe6>
 800c008:	4630      	mov	r0, r6
 800c00a:	e79e      	b.n	800bf4a <_strtol_l.constprop.0+0x16>
 800c00c:	b107      	cbz	r7, 800c010 <_strtol_l.constprop.0+0xdc>
 800c00e:	4276      	negs	r6, r6
 800c010:	2a00      	cmp	r2, #0
 800c012:	d0f9      	beq.n	800c008 <_strtol_l.constprop.0+0xd4>
 800c014:	f1bc 0f00 	cmp.w	ip, #0
 800c018:	d000      	beq.n	800c01c <_strtol_l.constprop.0+0xe8>
 800c01a:	1e69      	subs	r1, r5, #1
 800c01c:	6011      	str	r1, [r2, #0]
 800c01e:	e7f3      	b.n	800c008 <_strtol_l.constprop.0+0xd4>
 800c020:	2430      	movs	r4, #48	; 0x30
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1b1      	bne.n	800bf8a <_strtol_l.constprop.0+0x56>
 800c026:	2308      	movs	r3, #8
 800c028:	e7af      	b.n	800bf8a <_strtol_l.constprop.0+0x56>
 800c02a:	2c30      	cmp	r4, #48	; 0x30
 800c02c:	d0a5      	beq.n	800bf7a <_strtol_l.constprop.0+0x46>
 800c02e:	230a      	movs	r3, #10
 800c030:	e7ab      	b.n	800bf8a <_strtol_l.constprop.0+0x56>
 800c032:	bf00      	nop
 800c034:	0800ede9 	.word	0x0800ede9

0800c038 <strtol>:
 800c038:	4613      	mov	r3, r2
 800c03a:	460a      	mov	r2, r1
 800c03c:	4601      	mov	r1, r0
 800c03e:	4802      	ldr	r0, [pc, #8]	; (800c048 <strtol+0x10>)
 800c040:	6800      	ldr	r0, [r0, #0]
 800c042:	f7ff bf77 	b.w	800bf34 <_strtol_l.constprop.0>
 800c046:	bf00      	nop
 800c048:	20000098 	.word	0x20000098

0800c04c <_vsniprintf_r>:
 800c04c:	b530      	push	{r4, r5, lr}
 800c04e:	4614      	mov	r4, r2
 800c050:	2c00      	cmp	r4, #0
 800c052:	b09b      	sub	sp, #108	; 0x6c
 800c054:	4605      	mov	r5, r0
 800c056:	461a      	mov	r2, r3
 800c058:	da05      	bge.n	800c066 <_vsniprintf_r+0x1a>
 800c05a:	238b      	movs	r3, #139	; 0x8b
 800c05c:	6003      	str	r3, [r0, #0]
 800c05e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c062:	b01b      	add	sp, #108	; 0x6c
 800c064:	bd30      	pop	{r4, r5, pc}
 800c066:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c06a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c06e:	bf14      	ite	ne
 800c070:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c074:	4623      	moveq	r3, r4
 800c076:	9302      	str	r3, [sp, #8]
 800c078:	9305      	str	r3, [sp, #20]
 800c07a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c07e:	9100      	str	r1, [sp, #0]
 800c080:	9104      	str	r1, [sp, #16]
 800c082:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c086:	4669      	mov	r1, sp
 800c088:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c08a:	f000 f881 	bl	800c190 <_svfiprintf_r>
 800c08e:	1c43      	adds	r3, r0, #1
 800c090:	bfbc      	itt	lt
 800c092:	238b      	movlt	r3, #139	; 0x8b
 800c094:	602b      	strlt	r3, [r5, #0]
 800c096:	2c00      	cmp	r4, #0
 800c098:	d0e3      	beq.n	800c062 <_vsniprintf_r+0x16>
 800c09a:	9b00      	ldr	r3, [sp, #0]
 800c09c:	2200      	movs	r2, #0
 800c09e:	701a      	strb	r2, [r3, #0]
 800c0a0:	e7df      	b.n	800c062 <_vsniprintf_r+0x16>
	...

0800c0a4 <vsniprintf>:
 800c0a4:	b507      	push	{r0, r1, r2, lr}
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	460a      	mov	r2, r1
 800c0ac:	4601      	mov	r1, r0
 800c0ae:	4803      	ldr	r0, [pc, #12]	; (800c0bc <vsniprintf+0x18>)
 800c0b0:	6800      	ldr	r0, [r0, #0]
 800c0b2:	f7ff ffcb 	bl	800c04c <_vsniprintf_r>
 800c0b6:	b003      	add	sp, #12
 800c0b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0bc:	20000098 	.word	0x20000098

0800c0c0 <__malloc_lock>:
 800c0c0:	4801      	ldr	r0, [pc, #4]	; (800c0c8 <__malloc_lock+0x8>)
 800c0c2:	f7ff bd39 	b.w	800bb38 <__retarget_lock_acquire_recursive>
 800c0c6:	bf00      	nop
 800c0c8:	200061ec 	.word	0x200061ec

0800c0cc <__malloc_unlock>:
 800c0cc:	4801      	ldr	r0, [pc, #4]	; (800c0d4 <__malloc_unlock+0x8>)
 800c0ce:	f7ff bd34 	b.w	800bb3a <__retarget_lock_release_recursive>
 800c0d2:	bf00      	nop
 800c0d4:	200061ec 	.word	0x200061ec

0800c0d8 <__ssputs_r>:
 800c0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0dc:	688e      	ldr	r6, [r1, #8]
 800c0de:	429e      	cmp	r6, r3
 800c0e0:	4682      	mov	sl, r0
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	4690      	mov	r8, r2
 800c0e6:	461f      	mov	r7, r3
 800c0e8:	d838      	bhi.n	800c15c <__ssputs_r+0x84>
 800c0ea:	898a      	ldrh	r2, [r1, #12]
 800c0ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0f0:	d032      	beq.n	800c158 <__ssputs_r+0x80>
 800c0f2:	6825      	ldr	r5, [r4, #0]
 800c0f4:	6909      	ldr	r1, [r1, #16]
 800c0f6:	eba5 0901 	sub.w	r9, r5, r1
 800c0fa:	6965      	ldr	r5, [r4, #20]
 800c0fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c104:	3301      	adds	r3, #1
 800c106:	444b      	add	r3, r9
 800c108:	106d      	asrs	r5, r5, #1
 800c10a:	429d      	cmp	r5, r3
 800c10c:	bf38      	it	cc
 800c10e:	461d      	movcc	r5, r3
 800c110:	0553      	lsls	r3, r2, #21
 800c112:	d531      	bpl.n	800c178 <__ssputs_r+0xa0>
 800c114:	4629      	mov	r1, r5
 800c116:	f7ff fdb1 	bl	800bc7c <_malloc_r>
 800c11a:	4606      	mov	r6, r0
 800c11c:	b950      	cbnz	r0, 800c134 <__ssputs_r+0x5c>
 800c11e:	230c      	movs	r3, #12
 800c120:	f8ca 3000 	str.w	r3, [sl]
 800c124:	89a3      	ldrh	r3, [r4, #12]
 800c126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c12a:	81a3      	strh	r3, [r4, #12]
 800c12c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c134:	6921      	ldr	r1, [r4, #16]
 800c136:	464a      	mov	r2, r9
 800c138:	f7ff fd08 	bl	800bb4c <memcpy>
 800c13c:	89a3      	ldrh	r3, [r4, #12]
 800c13e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c146:	81a3      	strh	r3, [r4, #12]
 800c148:	6126      	str	r6, [r4, #16]
 800c14a:	6165      	str	r5, [r4, #20]
 800c14c:	444e      	add	r6, r9
 800c14e:	eba5 0509 	sub.w	r5, r5, r9
 800c152:	6026      	str	r6, [r4, #0]
 800c154:	60a5      	str	r5, [r4, #8]
 800c156:	463e      	mov	r6, r7
 800c158:	42be      	cmp	r6, r7
 800c15a:	d900      	bls.n	800c15e <__ssputs_r+0x86>
 800c15c:	463e      	mov	r6, r7
 800c15e:	6820      	ldr	r0, [r4, #0]
 800c160:	4632      	mov	r2, r6
 800c162:	4641      	mov	r1, r8
 800c164:	f000 faa8 	bl	800c6b8 <memmove>
 800c168:	68a3      	ldr	r3, [r4, #8]
 800c16a:	1b9b      	subs	r3, r3, r6
 800c16c:	60a3      	str	r3, [r4, #8]
 800c16e:	6823      	ldr	r3, [r4, #0]
 800c170:	4433      	add	r3, r6
 800c172:	6023      	str	r3, [r4, #0]
 800c174:	2000      	movs	r0, #0
 800c176:	e7db      	b.n	800c130 <__ssputs_r+0x58>
 800c178:	462a      	mov	r2, r5
 800c17a:	f000 fab7 	bl	800c6ec <_realloc_r>
 800c17e:	4606      	mov	r6, r0
 800c180:	2800      	cmp	r0, #0
 800c182:	d1e1      	bne.n	800c148 <__ssputs_r+0x70>
 800c184:	6921      	ldr	r1, [r4, #16]
 800c186:	4650      	mov	r0, sl
 800c188:	f7ff fd0c 	bl	800bba4 <_free_r>
 800c18c:	e7c7      	b.n	800c11e <__ssputs_r+0x46>
	...

0800c190 <_svfiprintf_r>:
 800c190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c194:	4698      	mov	r8, r3
 800c196:	898b      	ldrh	r3, [r1, #12]
 800c198:	061b      	lsls	r3, r3, #24
 800c19a:	b09d      	sub	sp, #116	; 0x74
 800c19c:	4607      	mov	r7, r0
 800c19e:	460d      	mov	r5, r1
 800c1a0:	4614      	mov	r4, r2
 800c1a2:	d50e      	bpl.n	800c1c2 <_svfiprintf_r+0x32>
 800c1a4:	690b      	ldr	r3, [r1, #16]
 800c1a6:	b963      	cbnz	r3, 800c1c2 <_svfiprintf_r+0x32>
 800c1a8:	2140      	movs	r1, #64	; 0x40
 800c1aa:	f7ff fd67 	bl	800bc7c <_malloc_r>
 800c1ae:	6028      	str	r0, [r5, #0]
 800c1b0:	6128      	str	r0, [r5, #16]
 800c1b2:	b920      	cbnz	r0, 800c1be <_svfiprintf_r+0x2e>
 800c1b4:	230c      	movs	r3, #12
 800c1b6:	603b      	str	r3, [r7, #0]
 800c1b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1bc:	e0d1      	b.n	800c362 <_svfiprintf_r+0x1d2>
 800c1be:	2340      	movs	r3, #64	; 0x40
 800c1c0:	616b      	str	r3, [r5, #20]
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c6:	2320      	movs	r3, #32
 800c1c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1d0:	2330      	movs	r3, #48	; 0x30
 800c1d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c37c <_svfiprintf_r+0x1ec>
 800c1d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1da:	f04f 0901 	mov.w	r9, #1
 800c1de:	4623      	mov	r3, r4
 800c1e0:	469a      	mov	sl, r3
 800c1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1e6:	b10a      	cbz	r2, 800c1ec <_svfiprintf_r+0x5c>
 800c1e8:	2a25      	cmp	r2, #37	; 0x25
 800c1ea:	d1f9      	bne.n	800c1e0 <_svfiprintf_r+0x50>
 800c1ec:	ebba 0b04 	subs.w	fp, sl, r4
 800c1f0:	d00b      	beq.n	800c20a <_svfiprintf_r+0x7a>
 800c1f2:	465b      	mov	r3, fp
 800c1f4:	4622      	mov	r2, r4
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	4638      	mov	r0, r7
 800c1fa:	f7ff ff6d 	bl	800c0d8 <__ssputs_r>
 800c1fe:	3001      	adds	r0, #1
 800c200:	f000 80aa 	beq.w	800c358 <_svfiprintf_r+0x1c8>
 800c204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c206:	445a      	add	r2, fp
 800c208:	9209      	str	r2, [sp, #36]	; 0x24
 800c20a:	f89a 3000 	ldrb.w	r3, [sl]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 80a2 	beq.w	800c358 <_svfiprintf_r+0x1c8>
 800c214:	2300      	movs	r3, #0
 800c216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c21a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c21e:	f10a 0a01 	add.w	sl, sl, #1
 800c222:	9304      	str	r3, [sp, #16]
 800c224:	9307      	str	r3, [sp, #28]
 800c226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c22a:	931a      	str	r3, [sp, #104]	; 0x68
 800c22c:	4654      	mov	r4, sl
 800c22e:	2205      	movs	r2, #5
 800c230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c234:	4851      	ldr	r0, [pc, #324]	; (800c37c <_svfiprintf_r+0x1ec>)
 800c236:	f7f3 ffd3 	bl	80001e0 <memchr>
 800c23a:	9a04      	ldr	r2, [sp, #16]
 800c23c:	b9d8      	cbnz	r0, 800c276 <_svfiprintf_r+0xe6>
 800c23e:	06d0      	lsls	r0, r2, #27
 800c240:	bf44      	itt	mi
 800c242:	2320      	movmi	r3, #32
 800c244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c248:	0711      	lsls	r1, r2, #28
 800c24a:	bf44      	itt	mi
 800c24c:	232b      	movmi	r3, #43	; 0x2b
 800c24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c252:	f89a 3000 	ldrb.w	r3, [sl]
 800c256:	2b2a      	cmp	r3, #42	; 0x2a
 800c258:	d015      	beq.n	800c286 <_svfiprintf_r+0xf6>
 800c25a:	9a07      	ldr	r2, [sp, #28]
 800c25c:	4654      	mov	r4, sl
 800c25e:	2000      	movs	r0, #0
 800c260:	f04f 0c0a 	mov.w	ip, #10
 800c264:	4621      	mov	r1, r4
 800c266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c26a:	3b30      	subs	r3, #48	; 0x30
 800c26c:	2b09      	cmp	r3, #9
 800c26e:	d94e      	bls.n	800c30e <_svfiprintf_r+0x17e>
 800c270:	b1b0      	cbz	r0, 800c2a0 <_svfiprintf_r+0x110>
 800c272:	9207      	str	r2, [sp, #28]
 800c274:	e014      	b.n	800c2a0 <_svfiprintf_r+0x110>
 800c276:	eba0 0308 	sub.w	r3, r0, r8
 800c27a:	fa09 f303 	lsl.w	r3, r9, r3
 800c27e:	4313      	orrs	r3, r2
 800c280:	9304      	str	r3, [sp, #16]
 800c282:	46a2      	mov	sl, r4
 800c284:	e7d2      	b.n	800c22c <_svfiprintf_r+0x9c>
 800c286:	9b03      	ldr	r3, [sp, #12]
 800c288:	1d19      	adds	r1, r3, #4
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	9103      	str	r1, [sp, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	bfbb      	ittet	lt
 800c292:	425b      	neglt	r3, r3
 800c294:	f042 0202 	orrlt.w	r2, r2, #2
 800c298:	9307      	strge	r3, [sp, #28]
 800c29a:	9307      	strlt	r3, [sp, #28]
 800c29c:	bfb8      	it	lt
 800c29e:	9204      	strlt	r2, [sp, #16]
 800c2a0:	7823      	ldrb	r3, [r4, #0]
 800c2a2:	2b2e      	cmp	r3, #46	; 0x2e
 800c2a4:	d10c      	bne.n	800c2c0 <_svfiprintf_r+0x130>
 800c2a6:	7863      	ldrb	r3, [r4, #1]
 800c2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2aa:	d135      	bne.n	800c318 <_svfiprintf_r+0x188>
 800c2ac:	9b03      	ldr	r3, [sp, #12]
 800c2ae:	1d1a      	adds	r2, r3, #4
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	9203      	str	r2, [sp, #12]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	bfb8      	it	lt
 800c2b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c2bc:	3402      	adds	r4, #2
 800c2be:	9305      	str	r3, [sp, #20]
 800c2c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c38c <_svfiprintf_r+0x1fc>
 800c2c4:	7821      	ldrb	r1, [r4, #0]
 800c2c6:	2203      	movs	r2, #3
 800c2c8:	4650      	mov	r0, sl
 800c2ca:	f7f3 ff89 	bl	80001e0 <memchr>
 800c2ce:	b140      	cbz	r0, 800c2e2 <_svfiprintf_r+0x152>
 800c2d0:	2340      	movs	r3, #64	; 0x40
 800c2d2:	eba0 000a 	sub.w	r0, r0, sl
 800c2d6:	fa03 f000 	lsl.w	r0, r3, r0
 800c2da:	9b04      	ldr	r3, [sp, #16]
 800c2dc:	4303      	orrs	r3, r0
 800c2de:	3401      	adds	r4, #1
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e6:	4826      	ldr	r0, [pc, #152]	; (800c380 <_svfiprintf_r+0x1f0>)
 800c2e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2ec:	2206      	movs	r2, #6
 800c2ee:	f7f3 ff77 	bl	80001e0 <memchr>
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	d038      	beq.n	800c368 <_svfiprintf_r+0x1d8>
 800c2f6:	4b23      	ldr	r3, [pc, #140]	; (800c384 <_svfiprintf_r+0x1f4>)
 800c2f8:	bb1b      	cbnz	r3, 800c342 <_svfiprintf_r+0x1b2>
 800c2fa:	9b03      	ldr	r3, [sp, #12]
 800c2fc:	3307      	adds	r3, #7
 800c2fe:	f023 0307 	bic.w	r3, r3, #7
 800c302:	3308      	adds	r3, #8
 800c304:	9303      	str	r3, [sp, #12]
 800c306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c308:	4433      	add	r3, r6
 800c30a:	9309      	str	r3, [sp, #36]	; 0x24
 800c30c:	e767      	b.n	800c1de <_svfiprintf_r+0x4e>
 800c30e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c312:	460c      	mov	r4, r1
 800c314:	2001      	movs	r0, #1
 800c316:	e7a5      	b.n	800c264 <_svfiprintf_r+0xd4>
 800c318:	2300      	movs	r3, #0
 800c31a:	3401      	adds	r4, #1
 800c31c:	9305      	str	r3, [sp, #20]
 800c31e:	4619      	mov	r1, r3
 800c320:	f04f 0c0a 	mov.w	ip, #10
 800c324:	4620      	mov	r0, r4
 800c326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c32a:	3a30      	subs	r2, #48	; 0x30
 800c32c:	2a09      	cmp	r2, #9
 800c32e:	d903      	bls.n	800c338 <_svfiprintf_r+0x1a8>
 800c330:	2b00      	cmp	r3, #0
 800c332:	d0c5      	beq.n	800c2c0 <_svfiprintf_r+0x130>
 800c334:	9105      	str	r1, [sp, #20]
 800c336:	e7c3      	b.n	800c2c0 <_svfiprintf_r+0x130>
 800c338:	fb0c 2101 	mla	r1, ip, r1, r2
 800c33c:	4604      	mov	r4, r0
 800c33e:	2301      	movs	r3, #1
 800c340:	e7f0      	b.n	800c324 <_svfiprintf_r+0x194>
 800c342:	ab03      	add	r3, sp, #12
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	462a      	mov	r2, r5
 800c348:	4b0f      	ldr	r3, [pc, #60]	; (800c388 <_svfiprintf_r+0x1f8>)
 800c34a:	a904      	add	r1, sp, #16
 800c34c:	4638      	mov	r0, r7
 800c34e:	f3af 8000 	nop.w
 800c352:	1c42      	adds	r2, r0, #1
 800c354:	4606      	mov	r6, r0
 800c356:	d1d6      	bne.n	800c306 <_svfiprintf_r+0x176>
 800c358:	89ab      	ldrh	r3, [r5, #12]
 800c35a:	065b      	lsls	r3, r3, #25
 800c35c:	f53f af2c 	bmi.w	800c1b8 <_svfiprintf_r+0x28>
 800c360:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c362:	b01d      	add	sp, #116	; 0x74
 800c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c368:	ab03      	add	r3, sp, #12
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	462a      	mov	r2, r5
 800c36e:	4b06      	ldr	r3, [pc, #24]	; (800c388 <_svfiprintf_r+0x1f8>)
 800c370:	a904      	add	r1, sp, #16
 800c372:	4638      	mov	r0, r7
 800c374:	f000 f87a 	bl	800c46c <_printf_i>
 800c378:	e7eb      	b.n	800c352 <_svfiprintf_r+0x1c2>
 800c37a:	bf00      	nop
 800c37c:	0800eee9 	.word	0x0800eee9
 800c380:	0800eef3 	.word	0x0800eef3
 800c384:	00000000 	.word	0x00000000
 800c388:	0800c0d9 	.word	0x0800c0d9
 800c38c:	0800eeef 	.word	0x0800eeef

0800c390 <_printf_common>:
 800c390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c394:	4616      	mov	r6, r2
 800c396:	4699      	mov	r9, r3
 800c398:	688a      	ldr	r2, [r1, #8]
 800c39a:	690b      	ldr	r3, [r1, #16]
 800c39c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	bfb8      	it	lt
 800c3a4:	4613      	movlt	r3, r2
 800c3a6:	6033      	str	r3, [r6, #0]
 800c3a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3ac:	4607      	mov	r7, r0
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	b10a      	cbz	r2, 800c3b6 <_printf_common+0x26>
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	6033      	str	r3, [r6, #0]
 800c3b6:	6823      	ldr	r3, [r4, #0]
 800c3b8:	0699      	lsls	r1, r3, #26
 800c3ba:	bf42      	ittt	mi
 800c3bc:	6833      	ldrmi	r3, [r6, #0]
 800c3be:	3302      	addmi	r3, #2
 800c3c0:	6033      	strmi	r3, [r6, #0]
 800c3c2:	6825      	ldr	r5, [r4, #0]
 800c3c4:	f015 0506 	ands.w	r5, r5, #6
 800c3c8:	d106      	bne.n	800c3d8 <_printf_common+0x48>
 800c3ca:	f104 0a19 	add.w	sl, r4, #25
 800c3ce:	68e3      	ldr	r3, [r4, #12]
 800c3d0:	6832      	ldr	r2, [r6, #0]
 800c3d2:	1a9b      	subs	r3, r3, r2
 800c3d4:	42ab      	cmp	r3, r5
 800c3d6:	dc26      	bgt.n	800c426 <_printf_common+0x96>
 800c3d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3dc:	1e13      	subs	r3, r2, #0
 800c3de:	6822      	ldr	r2, [r4, #0]
 800c3e0:	bf18      	it	ne
 800c3e2:	2301      	movne	r3, #1
 800c3e4:	0692      	lsls	r2, r2, #26
 800c3e6:	d42b      	bmi.n	800c440 <_printf_common+0xb0>
 800c3e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	4638      	mov	r0, r7
 800c3f0:	47c0      	blx	r8
 800c3f2:	3001      	adds	r0, #1
 800c3f4:	d01e      	beq.n	800c434 <_printf_common+0xa4>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	68e5      	ldr	r5, [r4, #12]
 800c3fa:	6832      	ldr	r2, [r6, #0]
 800c3fc:	f003 0306 	and.w	r3, r3, #6
 800c400:	2b04      	cmp	r3, #4
 800c402:	bf08      	it	eq
 800c404:	1aad      	subeq	r5, r5, r2
 800c406:	68a3      	ldr	r3, [r4, #8]
 800c408:	6922      	ldr	r2, [r4, #16]
 800c40a:	bf0c      	ite	eq
 800c40c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c410:	2500      	movne	r5, #0
 800c412:	4293      	cmp	r3, r2
 800c414:	bfc4      	itt	gt
 800c416:	1a9b      	subgt	r3, r3, r2
 800c418:	18ed      	addgt	r5, r5, r3
 800c41a:	2600      	movs	r6, #0
 800c41c:	341a      	adds	r4, #26
 800c41e:	42b5      	cmp	r5, r6
 800c420:	d11a      	bne.n	800c458 <_printf_common+0xc8>
 800c422:	2000      	movs	r0, #0
 800c424:	e008      	b.n	800c438 <_printf_common+0xa8>
 800c426:	2301      	movs	r3, #1
 800c428:	4652      	mov	r2, sl
 800c42a:	4649      	mov	r1, r9
 800c42c:	4638      	mov	r0, r7
 800c42e:	47c0      	blx	r8
 800c430:	3001      	adds	r0, #1
 800c432:	d103      	bne.n	800c43c <_printf_common+0xac>
 800c434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c43c:	3501      	adds	r5, #1
 800c43e:	e7c6      	b.n	800c3ce <_printf_common+0x3e>
 800c440:	18e1      	adds	r1, r4, r3
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	2030      	movs	r0, #48	; 0x30
 800c446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c44a:	4422      	add	r2, r4
 800c44c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c454:	3302      	adds	r3, #2
 800c456:	e7c7      	b.n	800c3e8 <_printf_common+0x58>
 800c458:	2301      	movs	r3, #1
 800c45a:	4622      	mov	r2, r4
 800c45c:	4649      	mov	r1, r9
 800c45e:	4638      	mov	r0, r7
 800c460:	47c0      	blx	r8
 800c462:	3001      	adds	r0, #1
 800c464:	d0e6      	beq.n	800c434 <_printf_common+0xa4>
 800c466:	3601      	adds	r6, #1
 800c468:	e7d9      	b.n	800c41e <_printf_common+0x8e>
	...

0800c46c <_printf_i>:
 800c46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c470:	7e0f      	ldrb	r7, [r1, #24]
 800c472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c474:	2f78      	cmp	r7, #120	; 0x78
 800c476:	4691      	mov	r9, r2
 800c478:	4680      	mov	r8, r0
 800c47a:	460c      	mov	r4, r1
 800c47c:	469a      	mov	sl, r3
 800c47e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c482:	d807      	bhi.n	800c494 <_printf_i+0x28>
 800c484:	2f62      	cmp	r7, #98	; 0x62
 800c486:	d80a      	bhi.n	800c49e <_printf_i+0x32>
 800c488:	2f00      	cmp	r7, #0
 800c48a:	f000 80d8 	beq.w	800c63e <_printf_i+0x1d2>
 800c48e:	2f58      	cmp	r7, #88	; 0x58
 800c490:	f000 80a3 	beq.w	800c5da <_printf_i+0x16e>
 800c494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c49c:	e03a      	b.n	800c514 <_printf_i+0xa8>
 800c49e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4a2:	2b15      	cmp	r3, #21
 800c4a4:	d8f6      	bhi.n	800c494 <_printf_i+0x28>
 800c4a6:	a101      	add	r1, pc, #4	; (adr r1, 800c4ac <_printf_i+0x40>)
 800c4a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4ac:	0800c505 	.word	0x0800c505
 800c4b0:	0800c519 	.word	0x0800c519
 800c4b4:	0800c495 	.word	0x0800c495
 800c4b8:	0800c495 	.word	0x0800c495
 800c4bc:	0800c495 	.word	0x0800c495
 800c4c0:	0800c495 	.word	0x0800c495
 800c4c4:	0800c519 	.word	0x0800c519
 800c4c8:	0800c495 	.word	0x0800c495
 800c4cc:	0800c495 	.word	0x0800c495
 800c4d0:	0800c495 	.word	0x0800c495
 800c4d4:	0800c495 	.word	0x0800c495
 800c4d8:	0800c625 	.word	0x0800c625
 800c4dc:	0800c549 	.word	0x0800c549
 800c4e0:	0800c607 	.word	0x0800c607
 800c4e4:	0800c495 	.word	0x0800c495
 800c4e8:	0800c495 	.word	0x0800c495
 800c4ec:	0800c647 	.word	0x0800c647
 800c4f0:	0800c495 	.word	0x0800c495
 800c4f4:	0800c549 	.word	0x0800c549
 800c4f8:	0800c495 	.word	0x0800c495
 800c4fc:	0800c495 	.word	0x0800c495
 800c500:	0800c60f 	.word	0x0800c60f
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	1d1a      	adds	r2, r3, #4
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	602a      	str	r2, [r5, #0]
 800c50c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c514:	2301      	movs	r3, #1
 800c516:	e0a3      	b.n	800c660 <_printf_i+0x1f4>
 800c518:	6820      	ldr	r0, [r4, #0]
 800c51a:	6829      	ldr	r1, [r5, #0]
 800c51c:	0606      	lsls	r6, r0, #24
 800c51e:	f101 0304 	add.w	r3, r1, #4
 800c522:	d50a      	bpl.n	800c53a <_printf_i+0xce>
 800c524:	680e      	ldr	r6, [r1, #0]
 800c526:	602b      	str	r3, [r5, #0]
 800c528:	2e00      	cmp	r6, #0
 800c52a:	da03      	bge.n	800c534 <_printf_i+0xc8>
 800c52c:	232d      	movs	r3, #45	; 0x2d
 800c52e:	4276      	negs	r6, r6
 800c530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c534:	485e      	ldr	r0, [pc, #376]	; (800c6b0 <_printf_i+0x244>)
 800c536:	230a      	movs	r3, #10
 800c538:	e019      	b.n	800c56e <_printf_i+0x102>
 800c53a:	680e      	ldr	r6, [r1, #0]
 800c53c:	602b      	str	r3, [r5, #0]
 800c53e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c542:	bf18      	it	ne
 800c544:	b236      	sxthne	r6, r6
 800c546:	e7ef      	b.n	800c528 <_printf_i+0xbc>
 800c548:	682b      	ldr	r3, [r5, #0]
 800c54a:	6820      	ldr	r0, [r4, #0]
 800c54c:	1d19      	adds	r1, r3, #4
 800c54e:	6029      	str	r1, [r5, #0]
 800c550:	0601      	lsls	r1, r0, #24
 800c552:	d501      	bpl.n	800c558 <_printf_i+0xec>
 800c554:	681e      	ldr	r6, [r3, #0]
 800c556:	e002      	b.n	800c55e <_printf_i+0xf2>
 800c558:	0646      	lsls	r6, r0, #25
 800c55a:	d5fb      	bpl.n	800c554 <_printf_i+0xe8>
 800c55c:	881e      	ldrh	r6, [r3, #0]
 800c55e:	4854      	ldr	r0, [pc, #336]	; (800c6b0 <_printf_i+0x244>)
 800c560:	2f6f      	cmp	r7, #111	; 0x6f
 800c562:	bf0c      	ite	eq
 800c564:	2308      	moveq	r3, #8
 800c566:	230a      	movne	r3, #10
 800c568:	2100      	movs	r1, #0
 800c56a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c56e:	6865      	ldr	r5, [r4, #4]
 800c570:	60a5      	str	r5, [r4, #8]
 800c572:	2d00      	cmp	r5, #0
 800c574:	bfa2      	ittt	ge
 800c576:	6821      	ldrge	r1, [r4, #0]
 800c578:	f021 0104 	bicge.w	r1, r1, #4
 800c57c:	6021      	strge	r1, [r4, #0]
 800c57e:	b90e      	cbnz	r6, 800c584 <_printf_i+0x118>
 800c580:	2d00      	cmp	r5, #0
 800c582:	d04d      	beq.n	800c620 <_printf_i+0x1b4>
 800c584:	4615      	mov	r5, r2
 800c586:	fbb6 f1f3 	udiv	r1, r6, r3
 800c58a:	fb03 6711 	mls	r7, r3, r1, r6
 800c58e:	5dc7      	ldrb	r7, [r0, r7]
 800c590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c594:	4637      	mov	r7, r6
 800c596:	42bb      	cmp	r3, r7
 800c598:	460e      	mov	r6, r1
 800c59a:	d9f4      	bls.n	800c586 <_printf_i+0x11a>
 800c59c:	2b08      	cmp	r3, #8
 800c59e:	d10b      	bne.n	800c5b8 <_printf_i+0x14c>
 800c5a0:	6823      	ldr	r3, [r4, #0]
 800c5a2:	07de      	lsls	r6, r3, #31
 800c5a4:	d508      	bpl.n	800c5b8 <_printf_i+0x14c>
 800c5a6:	6923      	ldr	r3, [r4, #16]
 800c5a8:	6861      	ldr	r1, [r4, #4]
 800c5aa:	4299      	cmp	r1, r3
 800c5ac:	bfde      	ittt	le
 800c5ae:	2330      	movle	r3, #48	; 0x30
 800c5b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c5b8:	1b52      	subs	r2, r2, r5
 800c5ba:	6122      	str	r2, [r4, #16]
 800c5bc:	f8cd a000 	str.w	sl, [sp]
 800c5c0:	464b      	mov	r3, r9
 800c5c2:	aa03      	add	r2, sp, #12
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	4640      	mov	r0, r8
 800c5c8:	f7ff fee2 	bl	800c390 <_printf_common>
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	d14c      	bne.n	800c66a <_printf_i+0x1fe>
 800c5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5d4:	b004      	add	sp, #16
 800c5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5da:	4835      	ldr	r0, [pc, #212]	; (800c6b0 <_printf_i+0x244>)
 800c5dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c5e0:	6829      	ldr	r1, [r5, #0]
 800c5e2:	6823      	ldr	r3, [r4, #0]
 800c5e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5e8:	6029      	str	r1, [r5, #0]
 800c5ea:	061d      	lsls	r5, r3, #24
 800c5ec:	d514      	bpl.n	800c618 <_printf_i+0x1ac>
 800c5ee:	07df      	lsls	r7, r3, #31
 800c5f0:	bf44      	itt	mi
 800c5f2:	f043 0320 	orrmi.w	r3, r3, #32
 800c5f6:	6023      	strmi	r3, [r4, #0]
 800c5f8:	b91e      	cbnz	r6, 800c602 <_printf_i+0x196>
 800c5fa:	6823      	ldr	r3, [r4, #0]
 800c5fc:	f023 0320 	bic.w	r3, r3, #32
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	2310      	movs	r3, #16
 800c604:	e7b0      	b.n	800c568 <_printf_i+0xfc>
 800c606:	6823      	ldr	r3, [r4, #0]
 800c608:	f043 0320 	orr.w	r3, r3, #32
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	2378      	movs	r3, #120	; 0x78
 800c610:	4828      	ldr	r0, [pc, #160]	; (800c6b4 <_printf_i+0x248>)
 800c612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c616:	e7e3      	b.n	800c5e0 <_printf_i+0x174>
 800c618:	0659      	lsls	r1, r3, #25
 800c61a:	bf48      	it	mi
 800c61c:	b2b6      	uxthmi	r6, r6
 800c61e:	e7e6      	b.n	800c5ee <_printf_i+0x182>
 800c620:	4615      	mov	r5, r2
 800c622:	e7bb      	b.n	800c59c <_printf_i+0x130>
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	6826      	ldr	r6, [r4, #0]
 800c628:	6961      	ldr	r1, [r4, #20]
 800c62a:	1d18      	adds	r0, r3, #4
 800c62c:	6028      	str	r0, [r5, #0]
 800c62e:	0635      	lsls	r5, r6, #24
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	d501      	bpl.n	800c638 <_printf_i+0x1cc>
 800c634:	6019      	str	r1, [r3, #0]
 800c636:	e002      	b.n	800c63e <_printf_i+0x1d2>
 800c638:	0670      	lsls	r0, r6, #25
 800c63a:	d5fb      	bpl.n	800c634 <_printf_i+0x1c8>
 800c63c:	8019      	strh	r1, [r3, #0]
 800c63e:	2300      	movs	r3, #0
 800c640:	6123      	str	r3, [r4, #16]
 800c642:	4615      	mov	r5, r2
 800c644:	e7ba      	b.n	800c5bc <_printf_i+0x150>
 800c646:	682b      	ldr	r3, [r5, #0]
 800c648:	1d1a      	adds	r2, r3, #4
 800c64a:	602a      	str	r2, [r5, #0]
 800c64c:	681d      	ldr	r5, [r3, #0]
 800c64e:	6862      	ldr	r2, [r4, #4]
 800c650:	2100      	movs	r1, #0
 800c652:	4628      	mov	r0, r5
 800c654:	f7f3 fdc4 	bl	80001e0 <memchr>
 800c658:	b108      	cbz	r0, 800c65e <_printf_i+0x1f2>
 800c65a:	1b40      	subs	r0, r0, r5
 800c65c:	6060      	str	r0, [r4, #4]
 800c65e:	6863      	ldr	r3, [r4, #4]
 800c660:	6123      	str	r3, [r4, #16]
 800c662:	2300      	movs	r3, #0
 800c664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c668:	e7a8      	b.n	800c5bc <_printf_i+0x150>
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	462a      	mov	r2, r5
 800c66e:	4649      	mov	r1, r9
 800c670:	4640      	mov	r0, r8
 800c672:	47d0      	blx	sl
 800c674:	3001      	adds	r0, #1
 800c676:	d0ab      	beq.n	800c5d0 <_printf_i+0x164>
 800c678:	6823      	ldr	r3, [r4, #0]
 800c67a:	079b      	lsls	r3, r3, #30
 800c67c:	d413      	bmi.n	800c6a6 <_printf_i+0x23a>
 800c67e:	68e0      	ldr	r0, [r4, #12]
 800c680:	9b03      	ldr	r3, [sp, #12]
 800c682:	4298      	cmp	r0, r3
 800c684:	bfb8      	it	lt
 800c686:	4618      	movlt	r0, r3
 800c688:	e7a4      	b.n	800c5d4 <_printf_i+0x168>
 800c68a:	2301      	movs	r3, #1
 800c68c:	4632      	mov	r2, r6
 800c68e:	4649      	mov	r1, r9
 800c690:	4640      	mov	r0, r8
 800c692:	47d0      	blx	sl
 800c694:	3001      	adds	r0, #1
 800c696:	d09b      	beq.n	800c5d0 <_printf_i+0x164>
 800c698:	3501      	adds	r5, #1
 800c69a:	68e3      	ldr	r3, [r4, #12]
 800c69c:	9903      	ldr	r1, [sp, #12]
 800c69e:	1a5b      	subs	r3, r3, r1
 800c6a0:	42ab      	cmp	r3, r5
 800c6a2:	dcf2      	bgt.n	800c68a <_printf_i+0x21e>
 800c6a4:	e7eb      	b.n	800c67e <_printf_i+0x212>
 800c6a6:	2500      	movs	r5, #0
 800c6a8:	f104 0619 	add.w	r6, r4, #25
 800c6ac:	e7f5      	b.n	800c69a <_printf_i+0x22e>
 800c6ae:	bf00      	nop
 800c6b0:	0800eefa 	.word	0x0800eefa
 800c6b4:	0800ef0b 	.word	0x0800ef0b

0800c6b8 <memmove>:
 800c6b8:	4288      	cmp	r0, r1
 800c6ba:	b510      	push	{r4, lr}
 800c6bc:	eb01 0402 	add.w	r4, r1, r2
 800c6c0:	d902      	bls.n	800c6c8 <memmove+0x10>
 800c6c2:	4284      	cmp	r4, r0
 800c6c4:	4623      	mov	r3, r4
 800c6c6:	d807      	bhi.n	800c6d8 <memmove+0x20>
 800c6c8:	1e43      	subs	r3, r0, #1
 800c6ca:	42a1      	cmp	r1, r4
 800c6cc:	d008      	beq.n	800c6e0 <memmove+0x28>
 800c6ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6d6:	e7f8      	b.n	800c6ca <memmove+0x12>
 800c6d8:	4402      	add	r2, r0
 800c6da:	4601      	mov	r1, r0
 800c6dc:	428a      	cmp	r2, r1
 800c6de:	d100      	bne.n	800c6e2 <memmove+0x2a>
 800c6e0:	bd10      	pop	{r4, pc}
 800c6e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6ea:	e7f7      	b.n	800c6dc <memmove+0x24>

0800c6ec <_realloc_r>:
 800c6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f0:	4680      	mov	r8, r0
 800c6f2:	4614      	mov	r4, r2
 800c6f4:	460e      	mov	r6, r1
 800c6f6:	b921      	cbnz	r1, 800c702 <_realloc_r+0x16>
 800c6f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6fc:	4611      	mov	r1, r2
 800c6fe:	f7ff babd 	b.w	800bc7c <_malloc_r>
 800c702:	b92a      	cbnz	r2, 800c710 <_realloc_r+0x24>
 800c704:	f7ff fa4e 	bl	800bba4 <_free_r>
 800c708:	4625      	mov	r5, r4
 800c70a:	4628      	mov	r0, r5
 800c70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c710:	f000 f81b 	bl	800c74a <_malloc_usable_size_r>
 800c714:	4284      	cmp	r4, r0
 800c716:	4607      	mov	r7, r0
 800c718:	d802      	bhi.n	800c720 <_realloc_r+0x34>
 800c71a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c71e:	d812      	bhi.n	800c746 <_realloc_r+0x5a>
 800c720:	4621      	mov	r1, r4
 800c722:	4640      	mov	r0, r8
 800c724:	f7ff faaa 	bl	800bc7c <_malloc_r>
 800c728:	4605      	mov	r5, r0
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d0ed      	beq.n	800c70a <_realloc_r+0x1e>
 800c72e:	42bc      	cmp	r4, r7
 800c730:	4622      	mov	r2, r4
 800c732:	4631      	mov	r1, r6
 800c734:	bf28      	it	cs
 800c736:	463a      	movcs	r2, r7
 800c738:	f7ff fa08 	bl	800bb4c <memcpy>
 800c73c:	4631      	mov	r1, r6
 800c73e:	4640      	mov	r0, r8
 800c740:	f7ff fa30 	bl	800bba4 <_free_r>
 800c744:	e7e1      	b.n	800c70a <_realloc_r+0x1e>
 800c746:	4635      	mov	r5, r6
 800c748:	e7df      	b.n	800c70a <_realloc_r+0x1e>

0800c74a <_malloc_usable_size_r>:
 800c74a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c74e:	1f18      	subs	r0, r3, #4
 800c750:	2b00      	cmp	r3, #0
 800c752:	bfbc      	itt	lt
 800c754:	580b      	ldrlt	r3, [r1, r0]
 800c756:	18c0      	addlt	r0, r0, r3
 800c758:	4770      	bx	lr
	...

0800c75c <_init>:
 800c75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75e:	bf00      	nop
 800c760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c762:	bc08      	pop	{r3}
 800c764:	469e      	mov	lr, r3
 800c766:	4770      	bx	lr

0800c768 <_fini>:
 800c768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76a:	bf00      	nop
 800c76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c76e:	bc08      	pop	{r3}
 800c770:	469e      	mov	lr, r3
 800c772:	4770      	bx	lr
